
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000724c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800751c  0800751c  0000851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080076f0  080076f0  000086f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080076f8  080076f8  000086f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080076fc  080076fc  000086fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000168  24000000  08007700  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c00  24000168  08007868  00009168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000d68  08007868  00009d68  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009168  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00009196  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001f30e  00000000  00000000  000091d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004087  00000000  00000000  000284e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000dc56  00000000  00000000  0002c56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0003a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001751  00000000  00000000  0003b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000181c1  00000000  00000000  0003c931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000626d  00000000  00000000  00054af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002f10  00000000  00000000  0005ad60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  0005dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000168 	.word	0x24000168
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08007504 	.word	0x08007504

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400016c 	.word	0x2400016c
 800030c:	08007504 	.word	0x08007504

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:
 80006b0:	4a88      	ldr	r2, [pc, #544]	@ (80008d4 <MatrixScan+0x224>)
 80006b2:	4b89      	ldr	r3, [pc, #548]	@ (80008d8 <MatrixScan+0x228>)
 80006b4:	6912      	ldr	r2, [r2, #16]
 80006b6:	4989      	ldr	r1, [pc, #548]	@ (80008dc <MatrixScan+0x22c>)
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006bc:	ea23 0902 	bic.w	r9, r3, r2
 80006c0:	4c87      	ldr	r4, [pc, #540]	@ (80008e0 <MatrixScan+0x230>)
 80006c2:	4b88      	ldr	r3, [pc, #544]	@ (80008e4 <MatrixScan+0x234>)
 80006c4:	4682      	mov	sl, r0
 80006c6:	6924      	ldr	r4, [r4, #16]
 80006c8:	b0c1      	sub	sp, #260	@ 0x104
 80006ca:	6909      	ldr	r1, [r1, #16]
 80006cc:	691f      	ldr	r7, [r3, #16]
 80006ce:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 80006d2:	4b85      	ldr	r3, [pc, #532]	@ (80008e8 <MatrixScan+0x238>)
 80006d4:	4e85      	ldr	r6, [pc, #532]	@ (80008ec <MatrixScan+0x23c>)
 80006d6:	ea23 0002 	bic.w	r0, r3, r2
 80006da:	4a85      	ldr	r2, [pc, #532]	@ (80008f0 <MatrixScan+0x240>)
 80006dc:	ea23 0707 	bic.w	r7, r3, r7
 80006e0:	ea26 0601 	bic.w	r6, r6, r1
 80006e4:	ea22 0804 	bic.w	r8, r2, r4
 80006e8:	4a82      	ldr	r2, [pc, #520]	@ (80008f4 <MatrixScan+0x244>)
 80006ea:	4d83      	ldr	r5, [pc, #524]	@ (80008f8 <MatrixScan+0x248>)
 80006ec:	6912      	ldr	r2, [r2, #16]
 80006ee:	f8df b24c 	ldr.w	fp, [pc, #588]	@ 800093c <MatrixScan+0x28c>
 80006f2:	ea23 0202 	bic.w	r2, r3, r2
 80006f6:	4c81      	ldr	r4, [pc, #516]	@ (80008fc <MatrixScan+0x24c>)
 80006f8:	4981      	ldr	r1, [pc, #516]	@ (8000900 <MatrixScan+0x250>)
 80006fa:	9205      	str	r2, [sp, #20]
 80006fc:	4a81      	ldr	r2, [pc, #516]	@ (8000904 <MatrixScan+0x254>)
 80006fe:	9004      	str	r0, [sp, #16]
 8000700:	6912      	ldr	r2, [r2, #16]
 8000702:	ea23 0302 	bic.w	r3, r3, r2
 8000706:	9306      	str	r3, [sp, #24]
 8000708:	4b7f      	ldr	r3, [pc, #508]	@ (8000908 <MatrixScan+0x258>)
 800070a:	691a      	ldr	r2, [r3, #16]
 800070c:	9600      	str	r6, [sp, #0]
 800070e:	4b7f      	ldr	r3, [pc, #508]	@ (800090c <MatrixScan+0x25c>)
 8000710:	e9cd 7001 	strd	r7, r0, [sp, #4]
 8000714:	682d      	ldr	r5, [r5, #0]
 8000716:	ea23 0302 	bic.w	r3, r3, r2
 800071a:	a80e      	add	r0, sp, #56	@ 0x38
 800071c:	464a      	mov	r2, r9
 800071e:	9508      	str	r5, [sp, #32]
 8000720:	4d7b      	ldr	r5, [pc, #492]	@ (8000910 <MatrixScan+0x260>)
 8000722:	9307      	str	r3, [sp, #28]
 8000724:	4643      	mov	r3, r8
 8000726:	682d      	ldr	r5, [r5, #0]
 8000728:	6824      	ldr	r4, [r4, #0]
 800072a:	9509      	str	r5, [sp, #36]	@ 0x24
 800072c:	4d79      	ldr	r5, [pc, #484]	@ (8000914 <MatrixScan+0x264>)
 800072e:	682d      	ldr	r5, [r5, #0]
 8000730:	950a      	str	r5, [sp, #40]	@ 0x28
 8000732:	4d79      	ldr	r5, [pc, #484]	@ (8000918 <MatrixScan+0x268>)
 8000734:	682d      	ldr	r5, [r5, #0]
 8000736:	950b      	str	r5, [sp, #44]	@ 0x2c
 8000738:	4d78      	ldr	r5, [pc, #480]	@ (800091c <MatrixScan+0x26c>)
 800073a:	682d      	ldr	r5, [r5, #0]
 800073c:	950c      	str	r5, [sp, #48]	@ 0x30
 800073e:	4d78      	ldr	r5, [pc, #480]	@ (8000920 <MatrixScan+0x270>)
 8000740:	682d      	ldr	r5, [r5, #0]
 8000742:	950d      	str	r5, [sp, #52]	@ 0x34
 8000744:	f8db 5000 	ldr.w	r5, [fp]
 8000748:	f006 fa3c 	bl	8006bc4 <siprintf>
 800074c:	a80e      	add	r0, sp, #56	@ 0x38
 800074e:	f7ff fddf 	bl	8000310 <strlen>
 8000752:	a90e      	add	r1, sp, #56	@ 0x38
 8000754:	b282      	uxth	r2, r0
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	4872      	ldr	r0, [pc, #456]	@ (8000924 <MatrixScan+0x274>)
 800075c:	f003 febe 	bl	80044dc <HAL_UART_Transmit>
 8000760:	454c      	cmp	r4, r9
 8000762:	d039      	beq.n	80007d8 <MatrixScan+0x128>
 8000764:	ea84 0409 	eor.w	r4, r4, r9
 8000768:	f04f 35ff 	mov.w	r5, #4294967295
 800076c:	0864      	lsrs	r4, r4, #1
 800076e:	f105 0501 	add.w	r5, r5, #1
 8000772:	d1fb      	bne.n	800076c <MatrixScan+0xbc>
 8000774:	fa29 f405 	lsr.w	r4, r9, r5
 8000778:	462a      	mov	r2, r5
 800077a:	496b      	ldr	r1, [pc, #428]	@ (8000928 <MatrixScan+0x278>)
 800077c:	f004 0401 	and.w	r4, r4, #1
 8000780:	4623      	mov	r3, r4
 8000782:	a827      	add	r0, sp, #156	@ 0x9c
 8000784:	f006 fa1e 	bl	8006bc4 <siprintf>
 8000788:	a827      	add	r0, sp, #156	@ 0x9c
 800078a:	f7ff fdc1 	bl	8000310 <strlen>
 800078e:	a927      	add	r1, sp, #156	@ 0x9c
 8000790:	b282      	uxth	r2, r0
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	4863      	ldr	r0, [pc, #396]	@ (8000924 <MatrixScan+0x274>)
 8000798:	f003 fea0 	bl	80044dc <HAL_UART_Transmit>
 800079c:	4b57      	ldr	r3, [pc, #348]	@ (80008fc <MatrixScan+0x24c>)
 800079e:	4650      	mov	r0, sl
 80007a0:	9a04      	ldr	r2, [sp, #16]
 80007a2:	f8c3 9000 	str.w	r9, [r3]
 80007a6:	4b54      	ldr	r3, [pc, #336]	@ (80008f8 <MatrixScan+0x248>)
 80007a8:	f8ca 5000 	str.w	r5, [sl]
 80007ac:	f8c3 8000 	str.w	r8, [r3]
 80007b0:	4b57      	ldr	r3, [pc, #348]	@ (8000910 <MatrixScan+0x260>)
 80007b2:	f88a 4004 	strb.w	r4, [sl, #4]
 80007b6:	601e      	str	r6, [r3, #0]
 80007b8:	4b56      	ldr	r3, [pc, #344]	@ (8000914 <MatrixScan+0x264>)
 80007ba:	601f      	str	r7, [r3, #0]
 80007bc:	4b56      	ldr	r3, [pc, #344]	@ (8000918 <MatrixScan+0x268>)
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	9a05      	ldr	r2, [sp, #20]
 80007c2:	4b56      	ldr	r3, [pc, #344]	@ (800091c <MatrixScan+0x26c>)
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	4b56      	ldr	r3, [pc, #344]	@ (8000920 <MatrixScan+0x270>)
 80007c8:	9a06      	ldr	r2, [sp, #24]
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	9b07      	ldr	r3, [sp, #28]
 80007ce:	f8cb 3000 	str.w	r3, [fp]
 80007d2:	b041      	add	sp, #260	@ 0x104
 80007d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007d8:	9b08      	ldr	r3, [sp, #32]
 80007da:	4543      	cmp	r3, r8
 80007dc:	d010      	beq.n	8000800 <MatrixScan+0x150>
 80007de:	ea83 0308 	eor.w	r3, r3, r8
 80007e2:	f04f 34ff 	mov.w	r4, #4294967295
 80007e6:	085b      	lsrs	r3, r3, #1
 80007e8:	4625      	mov	r5, r4
 80007ea:	f104 0401 	add.w	r4, r4, #1
 80007ee:	d1fa      	bne.n	80007e6 <MatrixScan+0x136>
 80007f0:	fa28 f404 	lsr.w	r4, r8, r4
 80007f4:	3511      	adds	r5, #17
 80007f6:	494d      	ldr	r1, [pc, #308]	@ (800092c <MatrixScan+0x27c>)
 80007f8:	f004 0401 	and.w	r4, r4, #1
 80007fc:	462a      	mov	r2, r5
 80007fe:	e7bf      	b.n	8000780 <MatrixScan+0xd0>
 8000800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000802:	42b3      	cmp	r3, r6
 8000804:	d010      	beq.n	8000828 <MatrixScan+0x178>
 8000806:	4073      	eors	r3, r6
 8000808:	461a      	mov	r2, r3
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	0852      	lsrs	r2, r2, #1
 8000810:	461d      	mov	r5, r3
 8000812:	f103 0301 	add.w	r3, r3, #1
 8000816:	d1fa      	bne.n	800080e <MatrixScan+0x15e>
 8000818:	fa26 f303 	lsr.w	r3, r6, r3
 800081c:	3521      	adds	r5, #33	@ 0x21
 800081e:	4944      	ldr	r1, [pc, #272]	@ (8000930 <MatrixScan+0x280>)
 8000820:	f003 0401 	and.w	r4, r3, #1
 8000824:	462a      	mov	r2, r5
 8000826:	e7ab      	b.n	8000780 <MatrixScan+0xd0>
 8000828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800082a:	42bb      	cmp	r3, r7
 800082c:	d010      	beq.n	8000850 <MatrixScan+0x1a0>
 800082e:	407b      	eors	r3, r7
 8000830:	461a      	mov	r2, r3
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	0852      	lsrs	r2, r2, #1
 8000838:	461d      	mov	r5, r3
 800083a:	f103 0301 	add.w	r3, r3, #1
 800083e:	d1fa      	bne.n	8000836 <MatrixScan+0x186>
 8000840:	fa27 f303 	lsr.w	r3, r7, r3
 8000844:	3531      	adds	r5, #49	@ 0x31
 8000846:	493b      	ldr	r1, [pc, #236]	@ (8000934 <MatrixScan+0x284>)
 8000848:	f003 0401 	and.w	r4, r3, #1
 800084c:	462a      	mov	r2, r5
 800084e:	e797      	b.n	8000780 <MatrixScan+0xd0>
 8000850:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8000852:	9b04      	ldr	r3, [sp, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d010      	beq.n	800087a <MatrixScan+0x1ca>
 8000858:	405a      	eors	r2, r3
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	0852      	lsrs	r2, r2, #1
 8000860:	461d      	mov	r5, r3
 8000862:	f103 0301 	add.w	r3, r3, #1
 8000866:	d1fa      	bne.n	800085e <MatrixScan+0x1ae>
 8000868:	9a04      	ldr	r2, [sp, #16]
 800086a:	fa22 f303 	lsr.w	r3, r2, r3
 800086e:	3541      	adds	r5, #65	@ 0x41
 8000870:	4931      	ldr	r1, [pc, #196]	@ (8000938 <MatrixScan+0x288>)
 8000872:	f003 0401 	and.w	r4, r3, #1
 8000876:	462a      	mov	r2, r5
 8000878:	e782      	b.n	8000780 <MatrixScan+0xd0>
 800087a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800087c:	9b05      	ldr	r3, [sp, #20]
 800087e:	429a      	cmp	r2, r3
 8000880:	d009      	beq.n	8000896 <MatrixScan+0x1e6>
 8000882:	405a      	eors	r2, r3
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	0852      	lsrs	r2, r2, #1
 800088a:	461d      	mov	r5, r3
 800088c:	f103 0301 	add.w	r3, r3, #1
 8000890:	d1fa      	bne.n	8000888 <MatrixScan+0x1d8>
 8000892:	9a05      	ldr	r2, [sp, #20]
 8000894:	e7e9      	b.n	800086a <MatrixScan+0x1ba>
 8000896:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8000898:	9b06      	ldr	r3, [sp, #24]
 800089a:	429a      	cmp	r2, r3
 800089c:	d008      	beq.n	80008b0 <MatrixScan+0x200>
 800089e:	405a      	eors	r2, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	0852      	lsrs	r2, r2, #1
 80008a4:	461d      	mov	r5, r3
 80008a6:	f103 0301 	add.w	r3, r3, #1
 80008aa:	d1fa      	bne.n	80008a2 <MatrixScan+0x1f2>
 80008ac:	9a06      	ldr	r2, [sp, #24]
 80008ae:	e7dc      	b.n	800086a <MatrixScan+0x1ba>
 80008b0:	9b07      	ldr	r3, [sp, #28]
 80008b2:	462a      	mov	r2, r5
 80008b4:	429d      	cmp	r5, r3
 80008b6:	d008      	beq.n	80008ca <MatrixScan+0x21a>
 80008b8:	405a      	eors	r2, r3
 80008ba:	2300      	movs	r3, #0
 80008bc:	0852      	lsrs	r2, r2, #1
 80008be:	461d      	mov	r5, r3
 80008c0:	f103 0301 	add.w	r3, r3, #1
 80008c4:	d1fa      	bne.n	80008bc <MatrixScan+0x20c>
 80008c6:	9a07      	ldr	r2, [sp, #28]
 80008c8:	e7cf      	b.n	800086a <MatrixScan+0x1ba>
 80008ca:	24ff      	movs	r4, #255	@ 0xff
 80008cc:	f04f 35ff 	mov.w	r5, #4294967295
 80008d0:	e764      	b.n	800079c <MatrixScan+0xec>
 80008d2:	bf00      	nop
 80008d4:	58020000 	.word	0x58020000
 80008d8:	93fc3734 	.word	0x93fc3734
 80008dc:	58020800 	.word	0x58020800
 80008e0:	58020400 	.word	0x58020400
 80008e4:	58020c00 	.word	0x58020c00
 80008e8:	b71571c7 	.word	0xb71571c7
 80008ec:	b7156d7a 	.word	0xb7156d7a
 80008f0:	93fc3b1c 	.word	0x93fc3b1c
 80008f4:	58021400 	.word	0x58021400
 80008f8:	2400019c 	.word	0x2400019c
 80008fc:	240001a0 	.word	0x240001a0
 8000900:	0800751c 	.word	0x0800751c
 8000904:	58021800 	.word	0x58021800
 8000908:	58021c00 	.word	0x58021c00
 800090c:	b71571bc 	.word	0xb71571bc
 8000910:	24000198 	.word	0x24000198
 8000914:	24000194 	.word	0x24000194
 8000918:	24000190 	.word	0x24000190
 800091c:	2400018c 	.word	0x2400018c
 8000920:	24000188 	.word	0x24000188
 8000924:	240001ac 	.word	0x240001ac
 8000928:	0800754c 	.word	0x0800754c
 800092c:	08007574 	.word	0x08007574
 8000930:	0800759c 	.word	0x0800759c
 8000934:	080075c4 	.word	0x080075c4
 8000938:	080075ec 	.word	0x080075ec
 800093c:	24000184 	.word	0x24000184

08000940 <SystemClock_Config>:
 8000940:	b510      	push	{r4, lr}
 8000942:	b09e      	sub	sp, #120	@ 0x78
 8000944:	224c      	movs	r2, #76	@ 0x4c
 8000946:	2100      	movs	r1, #0
 8000948:	a80a      	add	r0, sp, #40	@ 0x28
 800094a:	f006 f95b 	bl	8006c04 <memset>
 800094e:	2220      	movs	r2, #32
 8000950:	2100      	movs	r1, #0
 8000952:	a802      	add	r0, sp, #8
 8000954:	f006 f956 	bl	8006c04 <memset>
 8000958:	2002      	movs	r0, #2
 800095a:	f001 fec7 	bl	80026ec <HAL_PWREx_ConfigSupply>
 800095e:	4a20      	ldr	r2, [pc, #128]	@ (80009e0 <SystemClock_Config+0xa0>)
 8000960:	2300      	movs	r3, #0
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	6993      	ldr	r3, [r2, #24]
 8000966:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	6993      	ldr	r3, [r2, #24]
 800096e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	9b01      	ldr	r3, [sp, #4]
 8000976:	6993      	ldr	r3, [r2, #24]
 8000978:	049b      	lsls	r3, r3, #18
 800097a:	d5fc      	bpl.n	8000976 <SystemClock_Config+0x36>
 800097c:	2021      	movs	r0, #33	@ 0x21
 800097e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000982:	2201      	movs	r2, #1
 8000984:	2302      	movs	r3, #2
 8000986:	2408      	movs	r4, #8
 8000988:	9210      	str	r2, [sp, #64]	@ 0x40
 800098a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800098e:	2105      	movs	r1, #5
 8000990:	a80a      	add	r0, sp, #40	@ 0x28
 8000992:	9115      	str	r1, [sp, #84]	@ 0x54
 8000994:	216e      	movs	r1, #110	@ 0x6e
 8000996:	e9cd 2217 	strd	r2, r2, [sp, #92]	@ 0x5c
 800099a:	2200      	movs	r2, #0
 800099c:	9116      	str	r1, [sp, #88]	@ 0x58
 800099e:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
 80009a2:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
 80009a6:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
 80009aa:	f001 ff3d 	bl	8002828 <HAL_RCC_OscConfig>
 80009ae:	b108      	cbz	r0, 80009b4 <SystemClock_Config+0x74>
 80009b0:	b672      	cpsid	i
 80009b2:	e7fe      	b.n	80009b2 <SystemClock_Config+0x72>
 80009b4:	2340      	movs	r3, #64	@ 0x40
 80009b6:	223f      	movs	r2, #63	@ 0x3f
 80009b8:	2103      	movs	r1, #3
 80009ba:	9004      	str	r0, [sp, #16]
 80009bc:	9202      	str	r2, [sp, #8]
 80009be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009c2:	9307      	str	r3, [sp, #28]
 80009c4:	a802      	add	r0, sp, #8
 80009c6:	9103      	str	r1, [sp, #12]
 80009c8:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80009cc:	2350      	movs	r3, #80	@ 0x50
 80009ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80009d2:	f002 fa5d 	bl	8002e90 <HAL_RCC_ClockConfig>
 80009d6:	b108      	cbz	r0, 80009dc <SystemClock_Config+0x9c>
 80009d8:	b672      	cpsid	i
 80009da:	e7fe      	b.n	80009da <SystemClock_Config+0x9a>
 80009dc:	b01e      	add	sp, #120	@ 0x78
 80009de:	bd10      	pop	{r4, pc}
 80009e0:	58024800 	.word	0x58024800

080009e4 <main>:
 80009e4:	b580      	push	{r7, lr}
 80009e6:	2400      	movs	r4, #0
 80009e8:	b0a2      	sub	sp, #136	@ 0x88
 80009ea:	2501      	movs	r5, #1
 80009ec:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80009f0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80009f4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80009f8:	f000 fb3a 	bl	8001070 <HAL_MPU_Disable>
 80009fc:	f248 721f 	movw	r2, #34591	@ 0x871f
 8000a00:	f240 1301 	movw	r3, #257	@ 0x101
 8000a04:	a809      	add	r0, sp, #36	@ 0x24
 8000a06:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
 8000a0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8000a0c:	e9cd 420a 	strd	r4, r2, [sp, #40]	@ 0x28
 8000a10:	f000 fb4c 	bl	80010ac <HAL_MPU_ConfigRegion>
 8000a14:	2004      	movs	r0, #4
 8000a16:	f000 fb39 	bl	800108c <HAL_MPU_Enable>
 8000a1a:	f000 fa63 	bl	8000ee4 <HAL_Init>
 8000a1e:	f7ff ff8f 	bl	8000940 <SystemClock_Config>
 8000a22:	4b6f      	ldr	r3, [pc, #444]	@ (8000be0 <main+0x1fc>)
 8000a24:	940d      	str	r4, [sp, #52]	@ 0x34
 8000a26:	a909      	add	r1, sp, #36	@ 0x24
 8000a28:	940a      	str	r4, [sp, #40]	@ 0x28
 8000a2a:	486e      	ldr	r0, [pc, #440]	@ (8000be4 <main+0x200>)
 8000a2c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000a30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a34:	f042 0210 	orr.w	r2, r2, #16
 8000a38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a40:	f002 0210 	and.w	r2, r2, #16
 8000a44:	9203      	str	r2, [sp, #12]
 8000a46:	9a03      	ldr	r2, [sp, #12]
 8000a48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a4c:	f042 0204 	orr.w	r2, r2, #4
 8000a50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a58:	f002 0204 	and.w	r2, r2, #4
 8000a5c:	9204      	str	r2, [sp, #16]
 8000a5e:	9a04      	ldr	r2, [sp, #16]
 8000a60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a68:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a70:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000a74:	9205      	str	r2, [sp, #20]
 8000a76:	9a05      	ldr	r2, [sp, #20]
 8000a78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a7c:	432a      	orrs	r2, r5
 8000a7e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a86:	402a      	ands	r2, r5
 8000a88:	9206      	str	r2, [sp, #24]
 8000a8a:	9a06      	ldr	r2, [sp, #24]
 8000a8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a90:	f042 0202 	orr.w	r2, r2, #2
 8000a94:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a9c:	f002 0202 	and.w	r2, r2, #2
 8000aa0:	9207      	str	r2, [sp, #28]
 8000aa2:	9a07      	ldr	r2, [sp, #28]
 8000aa4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000aa8:	f042 0208 	orr.w	r2, r2, #8
 8000aac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	9308      	str	r3, [sp, #32]
 8000aba:	9b08      	ldr	r3, [sp, #32]
 8000abc:	950b      	str	r5, [sp, #44]	@ 0x2c
 8000abe:	9609      	str	r6, [sp, #36]	@ 0x24
 8000ac0:	f000 fb24 	bl	800110c <HAL_GPIO_Init>
 8000ac4:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 8000ac8:	a909      	add	r1, sp, #36	@ 0x24
 8000aca:	4847      	ldr	r0, [pc, #284]	@ (8000be8 <main+0x204>)
 8000acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ace:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8000ad2:	f000 fb1b 	bl	800110c <HAL_GPIO_Init>
 8000ad6:	f649 73d4 	movw	r3, #40916	@ 0x9fd4
 8000ada:	a909      	add	r1, sp, #36	@ 0x24
 8000adc:	4843      	ldr	r0, [pc, #268]	@ (8000bec <main+0x208>)
 8000ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ae0:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8000ae4:	f000 fb12 	bl	800110c <HAL_GPIO_Init>
 8000ae8:	f244 33dc 	movw	r3, #17372	@ 0x43dc
 8000aec:	a909      	add	r1, sp, #36	@ 0x24
 8000aee:	4840      	ldr	r0, [pc, #256]	@ (8000bf0 <main+0x20c>)
 8000af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000af2:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8000af6:	f000 fb09 	bl	800110c <HAL_GPIO_Init>
 8000afa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b02:	a909      	add	r1, sp, #36	@ 0x24
 8000b04:	483a      	ldr	r0, [pc, #232]	@ (8000bf0 <main+0x20c>)
 8000b06:	950b      	str	r5, [sp, #44]	@ 0x2c
 8000b08:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
 8000b0c:	f000 fafe 	bl	800110c <HAL_GPIO_Init>
 8000b10:	4838      	ldr	r0, [pc, #224]	@ (8000bf4 <main+0x210>)
 8000b12:	a909      	add	r1, sp, #36	@ 0x24
 8000b14:	9609      	str	r6, [sp, #36]	@ 0x24
 8000b16:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8000b1a:	4d37      	ldr	r5, [pc, #220]	@ (8000bf8 <main+0x214>)
 8000b1c:	f000 faf6 	bl	800110c <HAL_GPIO_Init>
 8000b20:	f005 fd86 	bl	8006630 <MX_USB_DEVICE_Init>
 8000b24:	4b35      	ldr	r3, [pc, #212]	@ (8000bfc <main+0x218>)
 8000b26:	4628      	mov	r0, r5
 8000b28:	612c      	str	r4, [r5, #16]
 8000b2a:	602b      	str	r3, [r5, #0]
 8000b2c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000b30:	62ac      	str	r4, [r5, #40]	@ 0x28
 8000b32:	606b      	str	r3, [r5, #4]
 8000b34:	230c      	movs	r3, #12
 8000b36:	e9c5 4402 	strd	r4, r4, [r5, #8]
 8000b3a:	e9c5 4406 	strd	r4, r4, [r5, #24]
 8000b3e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8000b42:	616b      	str	r3, [r5, #20]
 8000b44:	f004 f88e 	bl	8004c64 <HAL_UART_Init>
 8000b48:	b108      	cbz	r0, 8000b4e <main+0x16a>
 8000b4a:	b672      	cpsid	i
 8000b4c:	e7fe      	b.n	8000b4c <main+0x168>
 8000b4e:	4601      	mov	r1, r0
 8000b50:	4628      	mov	r0, r5
 8000b52:	f004 f8d9 	bl	8004d08 <HAL_UARTEx_SetTxFifoThreshold>
 8000b56:	b108      	cbz	r0, 8000b5c <main+0x178>
 8000b58:	b672      	cpsid	i
 8000b5a:	e7fe      	b.n	8000b5a <main+0x176>
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	4628      	mov	r0, r5
 8000b60:	f004 f914 	bl	8004d8c <HAL_UARTEx_SetRxFifoThreshold>
 8000b64:	b108      	cbz	r0, 8000b6a <main+0x186>
 8000b66:	b672      	cpsid	i
 8000b68:	e7fe      	b.n	8000b68 <main+0x184>
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f004 f8ae 	bl	8004ccc <HAL_UARTEx_DisableFifoMode>
 8000b70:	bb98      	cbnz	r0, 8000bda <main+0x1f6>
 8000b72:	4f23      	ldr	r7, [pc, #140]	@ (8000c00 <main+0x21c>)
 8000b74:	4e23      	ldr	r6, [pc, #140]	@ (8000c04 <main+0x220>)
 8000b76:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000c08 <main+0x224>
 8000b7a:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8000c0c <main+0x228>
 8000b7e:	e021      	b.n	8000bc4 <main+0x1e0>
 8000b80:	f000 f9ec 	bl	8000f5c <HAL_GetTick>
 8000b84:	6834      	ldr	r4, [r6, #0]
 8000b86:	4602      	mov	r2, r0
 8000b88:	4641      	mov	r1, r8
 8000b8a:	fb89 c304 	smull	ip, r3, r9, r4
 8000b8e:	17e4      	asrs	r4, r4, #31
 8000b90:	a809      	add	r0, sp, #36	@ 0x24
 8000b92:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
 8000b96:	f006 f815 	bl	8006bc4 <siprintf>
 8000b9a:	a809      	add	r0, sp, #36	@ 0x24
 8000b9c:	f7ff fbb8 	bl	8000310 <strlen>
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	b282      	uxth	r2, r0
 8000ba6:	a909      	add	r1, sp, #36	@ 0x24
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f003 fc97 	bl	80044dc <HAL_UART_Transmit>
 8000bae:	f000 f9d5 	bl	8000f5c <HAL_GetTick>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	6038      	str	r0, [r7, #0]
 8000bb6:	4668      	mov	r0, sp
 8000bb8:	6033      	str	r3, [r6, #0]
 8000bba:	f7ff fd79 	bl	80006b0 <MatrixScan>
 8000bbe:	4668      	mov	r0, sp
 8000bc0:	f7ff fd76 	bl	80006b0 <MatrixScan>
 8000bc4:	f000 f9ca 	bl	8000f5c <HAL_GetTick>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	1ac0      	subs	r0, r0, r3
 8000bcc:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	d8d5      	bhi.n	8000b80 <main+0x19c>
 8000bd4:	6833      	ldr	r3, [r6, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	e7ed      	b.n	8000bb6 <main+0x1d2>
 8000bda:	b672      	cpsid	i
 8000bdc:	e7fe      	b.n	8000bdc <main+0x1f8>
 8000bde:	bf00      	nop
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58021000 	.word	0x58021000
 8000be8:	58020800 	.word	0x58020800
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	58020400 	.word	0x58020400
 8000bf4:	58020c00 	.word	0x58020c00
 8000bf8:	240001ac 	.word	0x240001ac
 8000bfc:	40004c00 	.word	0x40004c00
 8000c00:	240001a4 	.word	0x240001a4
 8000c04:	240001a8 	.word	0x240001a8
 8000c08:	66666667 	.word	0x66666667
 8000c0c:	08007614 	.word	0x08007614

08000c10 <Error_Handler>:
 8000c10:	b672      	cpsid	i
 8000c12:	e7fe      	b.n	8000c12 <Error_Handler+0x2>

08000c14 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <HAL_MspInit+0x20>)
{
 8000c16:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c18:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000c1c:	f042 0202 	orr.w	r2, r2, #2
 8000c20:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	b002      	add	sp, #8
 8000c32:	4770      	bx	lr
 8000c34:	58024400 	.word	0x58024400

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	b0b6      	sub	sp, #216	@ 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	2100      	movs	r1, #0
{
 8000c3e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	22b8      	movs	r2, #184	@ 0xb8
 8000c42:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	9106      	str	r1, [sp, #24]
 8000c46:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000c4a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4e:	f005 ffd9 	bl	8006c04 <memset>
  if(huart->Instance==UART4)
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d001      	beq.n	8000c5e <HAL_UART_MspInit+0x26>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000c5a:	b036      	add	sp, #216	@ 0xd8
 8000c5c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c5e:	2202      	movs	r2, #2
 8000c60:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c62:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c64:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c68:	f002 fbf0 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	bb48      	cbnz	r0, 8000cc2 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c70:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	481b      	ldr	r0, [pc, #108]	@ (8000ce0 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c74:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c7c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000c80:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000c84:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000c88:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8000c8c:	9200      	str	r2, [sp, #0]
 8000c8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c94:	f042 0201 	orr.w	r2, r2, #1
 8000c98:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ca0:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ca6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8000cc8 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000cb2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8000cd0 <HAL_UART_MspInit+0x98>
 8000cb6:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f000 fa27 	bl	800110c <HAL_GPIO_Init>
}
 8000cbe:	b036      	add	sp, #216	@ 0xd8
 8000cc0:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000cc2:	f7ff ffa5 	bl	8000c10 <Error_Handler>
 8000cc6:	e7d2      	b.n	8000c6e <HAL_UART_MspInit+0x36>
 8000cc8:	00000003 	.word	0x00000003
 8000ccc:	00000002 	.word	0x00000002
	...
 8000cd8:	40004c00 	.word	0x40004c00
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58020000 	.word	0x58020000

08000ce4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler>
 8000ce6:	bf00      	nop

08000ce8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <HardFault_Handler>
 8000cea:	bf00      	nop

08000cec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler>
 8000cee:	bf00      	nop

08000cf0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <BusFault_Handler>
 8000cf2:	bf00      	nop

08000cf4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler>
 8000cf6:	bf00      	nop

08000cf8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 b91e 	b.w	8000f44 <HAL_IncTick>

08000d08 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000d08:	4801      	ldr	r0, [pc, #4]	@ (8000d10 <OTG_HS_IRQHandler+0x8>)
 8000d0a:	f000 bd5d 	b.w	80017c8 <HAL_PCD_IRQHandler>
 8000d0e:	bf00      	nop
 8000d10:	2400073c 	.word	0x2400073c

08000d14 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <_sbrk+0x38>)
{
 8000d16:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8000d1a:	6808      	ldr	r0, [r1, #0]
{
 8000d1c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1e:	4c0d      	ldr	r4, [pc, #52]	@ (8000d54 <_sbrk+0x40>)
 8000d20:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000d22:	b120      	cbz	r0, 8000d2e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d24:	4403      	add	r3, r0
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d807      	bhi.n	8000d3a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d2a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000d2c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000d2e:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <_sbrk+0x44>)
 8000d30:	4620      	mov	r0, r4
 8000d32:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000d34:	4403      	add	r3, r0
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d9f7      	bls.n	8000d2a <_sbrk+0x16>
    errno = ENOMEM;
 8000d3a:	f005 ff6b 	bl	8006c14 <__errno>
 8000d3e:	220c      	movs	r2, #12
 8000d40:	4603      	mov	r3, r0
    return (void *)-1;
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	bd10      	pop	{r4, pc}
 8000d4a:	bf00      	nop
 8000d4c:	24000240 	.word	0x24000240
 8000d50:	24050000 	.word	0x24050000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	24000d68 	.word	0x24000d68

08000d5c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d5c:	492a      	ldr	r1, [pc, #168]	@ (8000e08 <SystemInit+0xac>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8000e0c <SystemInit+0xb0>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d60:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8000d68:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d6e:	6813      	ldr	r3, [r2, #0]
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	2b06      	cmp	r3, #6
 8000d76:	d805      	bhi.n	8000d84 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d78:	6813      	ldr	r3, [r2, #0]
 8000d7a:	f023 030f 	bic.w	r3, r3, #15
 8000d7e:	f043 0307 	orr.w	r3, r3, #7
 8000d82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d84:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <SystemInit+0xb4>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d86:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d88:	4a22      	ldr	r2, [pc, #136]	@ (8000e14 <SystemInit+0xb8>)
  RCC->CR |= RCC_CR_HSION;
 8000d8a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d8c:	481f      	ldr	r0, [pc, #124]	@ (8000e0c <SystemInit+0xb0>)
  RCC->CR |= RCC_CR_HSION;
 8000d8e:	f041 0101 	orr.w	r1, r1, #1
 8000d92:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000d94:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000d96:	6819      	ldr	r1, [r3, #0]
 8000d98:	400a      	ands	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d9c:	6803      	ldr	r3, [r0, #0]
 8000d9e:	0719      	lsls	r1, r3, #28
 8000da0:	d505      	bpl.n	8000dae <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000da2:	6803      	ldr	r3, [r0, #0]
 8000da4:	f023 030f 	bic.w	r3, r3, #15
 8000da8:	f043 0307 	orr.w	r3, r3, #7
 8000dac:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <SystemInit+0xb4>)
 8000db0:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000db2:	4919      	ldr	r1, [pc, #100]	@ (8000e18 <SystemInit+0xbc>)
  RCC->PLLCKSELR = 0x02020200;
 8000db4:	4c19      	ldr	r4, [pc, #100]	@ (8000e1c <SystemInit+0xc0>)
  RCC->PLLCFGR = 0x01FF0000;
 8000db6:	481a      	ldr	r0, [pc, #104]	@ (8000e20 <SystemInit+0xc4>)
  RCC->D1CFGR = 0x00000000;
 8000db8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000dba:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000dbc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000dbe:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000dc0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000dc2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dc6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dca:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dcc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dce:	6819      	ldr	r1, [r3, #0]
 8000dd0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000dd4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dd6:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000dd8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000ddc:	04d2      	lsls	r2, r2, #19
 8000dde:	d40f      	bmi.n	8000e00 <SystemInit+0xa4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000de0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000de4:	f243 00d2 	movw	r0, #12498	@ 0x30d2
 8000de8:	490e      	ldr	r1, [pc, #56]	@ (8000e24 <SystemInit+0xc8>)
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000dea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000dee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000df2:	6008      	str	r0, [r1, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000df4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000df8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000dfc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	52002000 	.word	0x52002000
 8000e10:	58024400 	.word	0x58024400
 8000e14:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e18:	01010280 	.word	0x01010280
 8000e1c:	02020200 	.word	0x02020200
 8000e20:	01ff0000 	.word	0x01ff0000
 8000e24:	52004000 	.word	0x52004000

08000e28 <ExitRun0Mode>:
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <ExitRun0Mode+0x14>)
 8000e2a:	68d3      	ldr	r3, [r2, #12]
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e32:	6853      	ldr	r3, [r2, #4]
 8000e34:	049b      	lsls	r3, r3, #18
 8000e36:	d5fc      	bpl.n	8000e32 <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	58024800 	.word	0x58024800

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e40:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000e7c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e44:	f7ff fff0 	bl	8000e28 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e48:	f7ff ff88 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f005 fed5 	bl	8006c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fdb5 	bl	80009e4 <main>
  bx  lr
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e84:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8000e88:	08007700 	.word	0x08007700
  ldr r2, =_sbss
 8000e8c:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8000e90:	24000d68 	.word	0x24000d68

08000e94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC3_IRQHandler>
	...

08000e98 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_InitTick+0x40>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b90b      	cbnz	r3, 8000ea2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ea0:	4770      	bx	lr
{
 8000ea2:	b510      	push	{r4, lr}
 8000ea4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ea6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <HAL_InitTick+0x44>)
 8000eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eb0:	6810      	ldr	r0, [r2, #0]
 8000eb2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000eb6:	f000 f8c5 	bl	8001044 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	b908      	cbnz	r0, 8000ec0 <HAL_InitTick+0x28>
 8000ebc:	2c0f      	cmp	r4, #15
 8000ebe:	d901      	bls.n	8000ec4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000ec0:	2001      	movs	r0, #1
}
 8000ec2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f870 	bl	8000fb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_InitTick+0x48>)
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	601c      	str	r4, [r3, #0]
}
 8000ed6:	bd10      	pop	{r4, pc}
 8000ed8:	24000008 	.word	0x24000008
 8000edc:	24000004 	.word	0x24000004
 8000ee0:	2400000c 	.word	0x2400000c

08000ee4 <HAL_Init>:
{
 8000ee4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ee8:	4c12      	ldr	r4, [pc, #72]	@ (8000f34 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eea:	f000 f84f 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eee:	f001 ff41 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <HAL_Init+0x54>)
 8000ef4:	4911      	ldr	r1, [pc, #68]	@ (8000f3c <HAL_Init+0x58>)
 8000ef6:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ef8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000efa:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000efe:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f02:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f04:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f06:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8000f0a:	490d      	ldr	r1, [pc, #52]	@ (8000f40 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f0c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f10:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f12:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8000f16:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f18:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f1a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1c:	f7ff ffbc 	bl	8000e98 <HAL_InitTick>
 8000f20:	b110      	cbz	r0, 8000f28 <HAL_Init+0x44>
    return HAL_ERROR;
 8000f22:	2401      	movs	r4, #1
}
 8000f24:	4620      	mov	r0, r4
 8000f26:	bd10      	pop	{r4, pc}
 8000f28:	4604      	mov	r4, r0
  HAL_MspInit();
 8000f2a:	f7ff fe73 	bl	8000c14 <HAL_MspInit>
}
 8000f2e:	4620      	mov	r0, r4
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	bf00      	nop
 8000f34:	24000000 	.word	0x24000000
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	0800763c 	.word	0x0800763c
 8000f40:	24000004 	.word	0x24000004

08000f44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000f44:	4a03      	ldr	r2, [pc, #12]	@ (8000f54 <HAL_IncTick+0x10>)
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <HAL_IncTick+0x14>)
 8000f48:	6811      	ldr	r1, [r2, #0]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	24000244 	.word	0x24000244
 8000f58:	24000008 	.word	0x24000008

08000f5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f5c:	4b01      	ldr	r3, [pc, #4]	@ (8000f64 <HAL_GetTick+0x8>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	24000244 	.word	0x24000244

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff fff6 	bl	8000f5c <HAL_GetTick>
 8000f70:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	1c63      	adds	r3, r4, #1
 8000f74:	d002      	beq.n	8000f7c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <HAL_Delay+0x20>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	1b40      	subs	r0, r0, r5
 8000f82:	42a0      	cmp	r0, r4
 8000f84:	d3fa      	bcc.n	8000f7c <HAL_Delay+0x14>
  {
  }
}
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
 8000f88:	24000008 	.word	0x24000008

08000f8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4906      	ldr	r1, [pc, #24]	@ (8000fa8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f92:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f96:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000fa2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fa4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00
 8000fac:	05fa0000 	.word	0x05fa0000

08000fb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <HAL_NVIC_SetPriority+0x6c>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fba:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc2:	f1be 0f04 	cmp.w	lr, #4
 8000fc6:	bf28      	it	cs
 8000fc8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fcc:	f1bc 0f06 	cmp.w	ip, #6
 8000fd0:	d91a      	bls.n	8001008 <HAL_NVIC_SetPriority+0x58>
 8000fd2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	fa03 f30c 	lsl.w	r3, r3, ip
 8000fde:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	fa03 f30e 	lsl.w	r3, r3, lr
 8000fec:	ea21 0303 	bic.w	r3, r1, r3
 8000ff0:	fa03 f30c 	lsl.w	r3, r3, ip
 8000ff4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000ffc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	db06      	blt.n	800100e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <HAL_NVIC_SetPriority+0x70>)
 8001002:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001004:	f85d fb04 	ldr.w	pc, [sp], #4
 8001008:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	4694      	mov	ip, r2
 800100c:	e7e9      	b.n	8000fe2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	f000 000f 	and.w	r0, r0, #15
 8001012:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_NVIC_SetPriority+0x74>)
 8001014:	5413      	strb	r3, [r2, r0]
 8001016:	f85d fb04 	ldr.w	pc, [sp], #4
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	e000e400 	.word	0xe000e400
 8001024:	e000ed14 	.word	0xe000ed14

08001028 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001028:	2800      	cmp	r0, #0
 800102a:	db07      	blt.n	800103c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102c:	2301      	movs	r3, #1
 800102e:	f000 011f 	and.w	r1, r0, #31
 8001032:	4a03      	ldr	r2, [pc, #12]	@ (8001040 <HAL_NVIC_EnableIRQ+0x18>)
 8001034:	0940      	lsrs	r0, r0, #5
 8001036:	408b      	lsls	r3, r1
 8001038:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	1e43      	subs	r3, r0, #1
 8001046:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800104a:	d301      	bcc.n	8001050 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800104e:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001050:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	4905      	ldr	r1, [pc, #20]	@ (800106c <HAL_SYSTICK_Config+0x28>)
 8001058:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001070:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001076:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800107a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8001080:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_MPU_Enable+0x1c>)
 800108e:	f040 0001 	orr.w	r0, r0, #1
 8001092:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001098:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800109e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010a2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010ac:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <HAL_MPU_ConfigRegion+0x5c>)
 80010ae:	7843      	ldrb	r3, [r0, #1]
 80010b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80010b4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80010c0:	6843      	ldr	r3, [r0, #4]
 80010c2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010c6:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010c8:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80010ce:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010d0:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010d4:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010d8:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010da:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010dc:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010e0:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010e4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010e8:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010ea:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010ee:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010f6:	7a01      	ldrb	r1, [r0, #8]
 80010f8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80010fc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001100:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001110:	680c      	ldr	r4, [r1, #0]
{
 8001112:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001114:	2c00      	cmp	r4, #0
 8001116:	f000 80a0 	beq.w	800125a <HAL_GPIO_Init+0x14e>
  uint32_t position = 0x00U;
 800111a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800111c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001120:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001124:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001126:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800112a:	ea1c 0a04 	ands.w	sl, ip, r4
 800112e:	f000 808f 	beq.w	8001250 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001132:	9900      	ldr	r1, [sp, #0]
 8001134:	005f      	lsls	r7, r3, #1
 8001136:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001138:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113a:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800113e:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001142:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001146:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	f1b8 0f01 	cmp.w	r8, #1
 800114c:	f240 8088 	bls.w	8001260 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001150:	2a03      	cmp	r2, #3
 8001152:	f040 80c6 	bne.w	80012e2 <HAL_GPIO_Init+0x1d6>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001156:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001158:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800115a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800115e:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001162:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8001166:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001168:	d072      	beq.n	8001250 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4e79      	ldr	r6, [pc, #484]	@ (8001350 <HAL_GPIO_Init+0x244>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800116c:	f003 0703 	and.w	r7, r3, #3
 8001170:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001176:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800117c:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001180:	4974      	ldr	r1, [pc, #464]	@ (8001354 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 8001186:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 800118a:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800118e:	4288      	cmp	r0, r1
 8001190:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	f002 0202 	and.w	r2, r2, #2
 8001198:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800119c:	9203      	str	r2, [sp, #12]
 800119e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80011a0:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011a2:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011a6:	d02c      	beq.n	8001202 <HAL_GPIO_Init+0xf6>
 80011a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80011ac:	4288      	cmp	r0, r1
 80011ae:	f000 80ab 	beq.w	8001308 <HAL_GPIO_Init+0x1fc>
 80011b2:	4969      	ldr	r1, [pc, #420]	@ (8001358 <HAL_GPIO_Init+0x24c>)
 80011b4:	4288      	cmp	r0, r1
 80011b6:	f000 80ad 	beq.w	8001314 <HAL_GPIO_Init+0x208>
 80011ba:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 800135c <HAL_GPIO_Init+0x250>
 80011be:	4560      	cmp	r0, ip
 80011c0:	f000 809c 	beq.w	80012fc <HAL_GPIO_Init+0x1f0>
 80011c4:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8001360 <HAL_GPIO_Init+0x254>
 80011c8:	4560      	cmp	r0, ip
 80011ca:	f000 80af 	beq.w	800132c <HAL_GPIO_Init+0x220>
 80011ce:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8001364 <HAL_GPIO_Init+0x258>
 80011d2:	4560      	cmp	r0, ip
 80011d4:	f000 80b0 	beq.w	8001338 <HAL_GPIO_Init+0x22c>
 80011d8:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8001368 <HAL_GPIO_Init+0x25c>
 80011dc:	4560      	cmp	r0, ip
 80011de:	f000 809f 	beq.w	8001320 <HAL_GPIO_Init+0x214>
 80011e2:	f8df c188 	ldr.w	ip, [pc, #392]	@ 800136c <HAL_GPIO_Init+0x260>
 80011e6:	4560      	cmp	r0, ip
 80011e8:	f000 80ac 	beq.w	8001344 <HAL_GPIO_Init+0x238>
 80011ec:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8001370 <HAL_GPIO_Init+0x264>
 80011f0:	4560      	cmp	r0, ip
 80011f2:	bf0c      	ite	eq
 80011f4:	f04f 0c09 	moveq.w	ip, #9
 80011f8:	f04f 0c0a 	movne.w	ip, #10
 80011fc:	fa0c f707 	lsl.w	r7, ip, r7
 8001200:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001202:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001204:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8001206:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 800120a:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 800120e:	bf4c      	ite	mi
 8001210:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8001214:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001216:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8001218:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 800121c:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 8001220:	bf54      	ite	pl
 8001222:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001224:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001228:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800122a:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800122e:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8001232:	bf54      	ite	pl
 8001234:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001236:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123a:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800123c:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8001240:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8001244:	bf54      	ite	pl
 8001246:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001248:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800124c:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 8001250:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001252:	fa34 f203 	lsrs.w	r2, r4, r3
 8001256:	f47f af66 	bne.w	8001126 <HAL_GPIO_Init+0x1a>
  }
}
 800125a:	b005      	add	sp, #20
 800125c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001260:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001262:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8001264:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001268:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800126a:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126e:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001272:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001274:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001278:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 800127a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8001282:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001286:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128a:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128e:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8001292:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001296:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 800129a:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800129e:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a2:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80012a6:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	f47f af54 	bne.w	8001156 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012ae:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012b2:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 80012b4:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012bc:	6909      	ldr	r1, [r1, #16]
 80012be:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80012c2:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 80012c6:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ca:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012cc:	210f      	movs	r1, #15
 80012ce:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012d2:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012d4:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012d8:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 80012dc:	f8c8 c020 	str.w	ip, [r8, #32]
 80012e0:	e739      	b.n	8001156 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e2:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 80012e4:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e8:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ea:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ee:	fa01 fc07 	lsl.w	ip, r1, r7
 80012f2:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80012f6:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fa:	e72c      	b.n	8001156 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012fc:	f04f 0c03 	mov.w	ip, #3
 8001300:	fa0c f707 	lsl.w	r7, ip, r7
 8001304:	433a      	orrs	r2, r7
 8001306:	e77c      	b.n	8001202 <HAL_GPIO_Init+0xf6>
 8001308:	f04f 0c01 	mov.w	ip, #1
 800130c:	fa0c f707 	lsl.w	r7, ip, r7
 8001310:	433a      	orrs	r2, r7
 8001312:	e776      	b.n	8001202 <HAL_GPIO_Init+0xf6>
 8001314:	f04f 0c02 	mov.w	ip, #2
 8001318:	fa0c f707 	lsl.w	r7, ip, r7
 800131c:	433a      	orrs	r2, r7
 800131e:	e770      	b.n	8001202 <HAL_GPIO_Init+0xf6>
 8001320:	f04f 0c06 	mov.w	ip, #6
 8001324:	fa0c f707 	lsl.w	r7, ip, r7
 8001328:	433a      	orrs	r2, r7
 800132a:	e76a      	b.n	8001202 <HAL_GPIO_Init+0xf6>
 800132c:	f04f 0c04 	mov.w	ip, #4
 8001330:	fa0c f707 	lsl.w	r7, ip, r7
 8001334:	433a      	orrs	r2, r7
 8001336:	e764      	b.n	8001202 <HAL_GPIO_Init+0xf6>
 8001338:	f04f 0c05 	mov.w	ip, #5
 800133c:	fa0c f707 	lsl.w	r7, ip, r7
 8001340:	433a      	orrs	r2, r7
 8001342:	e75e      	b.n	8001202 <HAL_GPIO_Init+0xf6>
 8001344:	f04f 0c07 	mov.w	ip, #7
 8001348:	fa0c f707 	lsl.w	r7, ip, r7
 800134c:	433a      	orrs	r2, r7
 800134e:	e758      	b.n	8001202 <HAL_GPIO_Init+0xf6>
 8001350:	58024400 	.word	0x58024400
 8001354:	58020000 	.word	0x58020000
 8001358:	58020800 	.word	0x58020800
 800135c:	58020c00 	.word	0x58020c00
 8001360:	58021000 	.word	0x58021000
 8001364:	58021400 	.word	0x58021400
 8001368:	58021800 	.word	0x58021800
 800136c:	58021c00 	.word	0x58021c00
 8001370:	58022400 	.word	0x58022400

08001374 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	b082      	sub	sp, #8
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001378:	b1d0      	cbz	r0, 80013b0 <HAL_PCD_Init+0x3c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800137a:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 800137e:	4604      	mov	r4, r0
 8001380:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 81eb 	beq.w	8001760 <HAL_PCD_Init+0x3ec>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800138a:	2603      	movs	r6, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800138c:	6820      	ldr	r0, [r4, #0]

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138e:	1d25      	adds	r5, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001390:	f884 6495 	strb.w	r6, [r4, #1173]	@ 0x495
  __HAL_PCD_DISABLE(hpcd);
 8001394:	f003 fe4c 	bl	8005030 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001398:	7c23      	ldrb	r3, [r4, #16]
 800139a:	f88d 3000 	strb.w	r3, [sp]
 800139e:	6820      	ldr	r0, [r4, #0]
 80013a0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80013a4:	f003 fd34 	bl	8004e10 <USB_CoreInit>
 80013a8:	b130      	cbz	r0, 80013b8 <HAL_PCD_Init+0x44>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80013b0:	2501      	movs	r5, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80013b2:	4628      	mov	r0, r5
 80013b4:	b002      	add	sp, #8
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013b8:	4601      	mov	r1, r0
 80013ba:	6820      	ldr	r0, [r4, #0]
 80013bc:	f003 fe40 	bl	8005040 <USB_SetCurrentMode>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	d1f2      	bne.n	80013aa <HAL_PCD_Init+0x36>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c4:	7922      	ldrb	r2, [r4, #4]
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	f000 81b1 	beq.w	800172e <HAL_PCD_Init+0x3ba>
    hpcd->IN_ep[i].num = i;
 80013cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d0:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d2:	85e0      	strh	r0, [r4, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013d4:	7620      	strb	r0, [r4, #24]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013d6:	6260      	str	r0, [r4, #36]	@ 0x24
    hpcd->IN_ep[i].num = i;
 80013d8:	82a3      	strh	r3, [r4, #20]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013da:	e9c4 0007 	strd	r0, r0, [r4, #28]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013de:	f000 81c8 	beq.w	8001772 <HAL_PCD_Init+0x3fe>
    hpcd->IN_ep[i].num = i;
 80013e2:	f240 1301 	movw	r3, #257	@ 0x101
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e6:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hpcd->IN_ep[i].num = i;
 80013ec:	8723      	strh	r3, [r4, #56]	@ 0x38
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ee:	f04f 0301 	mov.w	r3, #1
    hpcd->IN_ep[i].xfer_len = 0U;
 80013f2:	64a0      	str	r0, [r4, #72]	@ 0x48
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013f4:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013f8:	e9c4 0010 	strd	r0, r0, [r4, #64]	@ 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fc:	f000 80e0 	beq.w	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 8001400:	f44f 7381 	mov.w	r3, #258	@ 0x102
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001404:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001406:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
    hpcd->IN_ep[i].num = i;
 800140a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800140e:	f04f 0302 	mov.w	r3, #2
    hpcd->IN_ep[i].xfer_len = 0U;
 8001412:	66e0      	str	r0, [r4, #108]	@ 0x6c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001414:	f8a4 3076 	strh.w	r3, [r4, #118]	@ 0x76
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001418:	e9c4 0019 	strd	r0, r0, [r4, #100]	@ 0x64
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800141c:	f000 80d0 	beq.w	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 8001420:	f240 1303 	movw	r3, #259	@ 0x103
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001424:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001426:	f8a4 609a 	strh.w	r6, [r4, #154]	@ 0x9a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800142a:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
    hpcd->IN_ep[i].xfer_len = 0U;
 800142e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    hpcd->IN_ep[i].num = i;
 8001432:	f8a4 3080 	strh.w	r3, [r4, #128]	@ 0x80
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001436:	e9c4 0022 	strd	r0, r0, [r4, #136]	@ 0x88
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143a:	f000 80c1 	beq.w	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 800143e:	f44f 7382 	mov.w	r3, #260	@ 0x104
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001442:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001444:	f884 00a8 	strb.w	r0, [r4, #168]	@ 0xa8
    hpcd->IN_ep[i].num = i;
 8001448:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
    hpcd->IN_ep[i].tx_fifo_num = i;
 800144c:	f04f 0304 	mov.w	r3, #4
    hpcd->IN_ep[i].xfer_len = 0U;
 8001450:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001454:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001458:	e9c4 002b 	strd	r0, r0, [r4, #172]	@ 0xac
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145c:	f000 80b0 	beq.w	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 8001460:	f240 1305 	movw	r3, #261	@ 0x105
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001466:	f884 00cc 	strb.w	r0, [r4, #204]	@ 0xcc
    hpcd->IN_ep[i].num = i;
 800146a:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
    hpcd->IN_ep[i].tx_fifo_num = i;
 800146e:	f04f 0305 	mov.w	r3, #5
    hpcd->IN_ep[i].xfer_len = 0U;
 8001472:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001476:	f8a4 30e2 	strh.w	r3, [r4, #226]	@ 0xe2
    hpcd->IN_ep[i].xfer_buff = 0U;
 800147a:	e9c4 0034 	strd	r0, r0, [r4, #208]	@ 0xd0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147e:	f000 809f 	beq.w	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 8001482:	f44f 7383 	mov.w	r3, #262	@ 0x106
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001486:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001488:	f884 00f0 	strb.w	r0, [r4, #240]	@ 0xf0
    hpcd->IN_ep[i].num = i;
 800148c:	f8a4 30ec 	strh.w	r3, [r4, #236]	@ 0xec
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001490:	f04f 0306 	mov.w	r3, #6
    hpcd->IN_ep[i].xfer_len = 0U;
 8001494:	f8c4 00fc 	str.w	r0, [r4, #252]	@ 0xfc
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001498:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
    hpcd->IN_ep[i].xfer_buff = 0U;
 800149c:	e9c4 003d 	strd	r0, r0, [r4, #244]	@ 0xf4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a0:	f000 808e 	beq.w	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 80014a4:	f240 1107 	movw	r1, #263	@ 0x107
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014a8:	2300      	movs	r3, #0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014aa:	2a08      	cmp	r2, #8
    hpcd->IN_ep[i].num = i;
 80014ac:	f8a4 1110 	strh.w	r1, [r4, #272]	@ 0x110
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b0:	f04f 0107 	mov.w	r1, #7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014b4:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
    hpcd->IN_ep[i].xfer_len = 0U;
 80014b8:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014bc:	f8a4 112a 	strh.w	r1, [r4, #298]	@ 0x12a
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014c0:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c4:	d07c      	beq.n	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 80014c6:	f44f 7184 	mov.w	r1, #264	@ 0x108
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ca:	2a09      	cmp	r2, #9
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014cc:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
    hpcd->IN_ep[i].num = i;
 80014d0:	f8a4 1134 	strh.w	r1, [r4, #308]	@ 0x134
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d4:	f04f 0108 	mov.w	r1, #8
    hpcd->IN_ep[i].xfer_len = 0U;
 80014d8:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014dc:	f8a4 114e 	strh.w	r1, [r4, #334]	@ 0x14e
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014e0:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e4:	d06c      	beq.n	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 80014e6:	f240 1109 	movw	r1, #265	@ 0x109
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ea:	2a0a      	cmp	r2, #10
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ec:	f884 315c 	strb.w	r3, [r4, #348]	@ 0x15c
    hpcd->IN_ep[i].num = i;
 80014f0:	f8a4 1158 	strh.w	r1, [r4, #344]	@ 0x158
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014f4:	f04f 0109 	mov.w	r1, #9
    hpcd->IN_ep[i].xfer_len = 0U;
 80014f8:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014fc:	f8a4 1172 	strh.w	r1, [r4, #370]	@ 0x172
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001500:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001504:	d05c      	beq.n	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 8001506:	f44f 7185 	mov.w	r1, #266	@ 0x10a
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150a:	2a0b      	cmp	r2, #11
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800150c:	f884 3180 	strb.w	r3, [r4, #384]	@ 0x180
    hpcd->IN_ep[i].num = i;
 8001510:	f8a4 117c 	strh.w	r1, [r4, #380]	@ 0x17c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001514:	f04f 010a 	mov.w	r1, #10
    hpcd->IN_ep[i].xfer_len = 0U;
 8001518:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800151c:	f8a4 1196 	strh.w	r1, [r4, #406]	@ 0x196
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001520:	e9c4 3361 	strd	r3, r3, [r4, #388]	@ 0x184
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001524:	d04c      	beq.n	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 8001526:	f240 110b 	movw	r1, #267	@ 0x10b
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	2a0c      	cmp	r2, #12
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800152c:	f884 31a4 	strb.w	r3, [r4, #420]	@ 0x1a4
    hpcd->IN_ep[i].num = i;
 8001530:	f8a4 11a0 	strh.w	r1, [r4, #416]	@ 0x1a0
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001534:	f04f 010b 	mov.w	r1, #11
    hpcd->IN_ep[i].xfer_len = 0U;
 8001538:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
    hpcd->IN_ep[i].tx_fifo_num = i;
 800153c:	f8a4 11ba 	strh.w	r1, [r4, #442]	@ 0x1ba
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001540:	e9c4 336a 	strd	r3, r3, [r4, #424]	@ 0x1a8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001544:	d03c      	beq.n	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 8001546:	f44f 7186 	mov.w	r1, #268	@ 0x10c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154a:	2a0d      	cmp	r2, #13
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800154c:	f884 31c8 	strb.w	r3, [r4, #456]	@ 0x1c8
    hpcd->IN_ep[i].num = i;
 8001550:	f8a4 11c4 	strh.w	r1, [r4, #452]	@ 0x1c4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001554:	f04f 010c 	mov.w	r1, #12
    hpcd->IN_ep[i].xfer_len = 0U;
 8001558:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
    hpcd->IN_ep[i].tx_fifo_num = i;
 800155c:	f8a4 11de 	strh.w	r1, [r4, #478]	@ 0x1de
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001560:	e9c4 3373 	strd	r3, r3, [r4, #460]	@ 0x1cc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001564:	d02c      	beq.n	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 8001566:	f240 110d 	movw	r1, #269	@ 0x10d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156a:	2a0e      	cmp	r2, #14
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800156c:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
    hpcd->IN_ep[i].num = i;
 8001570:	f8a4 11e8 	strh.w	r1, [r4, #488]	@ 0x1e8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001574:	f04f 010d 	mov.w	r1, #13
    hpcd->IN_ep[i].xfer_len = 0U;
 8001578:	f8c4 31f8 	str.w	r3, [r4, #504]	@ 0x1f8
    hpcd->IN_ep[i].tx_fifo_num = i;
 800157c:	f8a4 1202 	strh.w	r1, [r4, #514]	@ 0x202
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001580:	e9c4 337c 	strd	r3, r3, [r4, #496]	@ 0x1f0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001584:	d01c      	beq.n	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 8001586:	f44f 7187 	mov.w	r1, #270	@ 0x10e
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158a:	2a0f      	cmp	r2, #15
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800158c:	f884 3210 	strb.w	r3, [r4, #528]	@ 0x210
    hpcd->IN_ep[i].num = i;
 8001590:	f8a4 120c 	strh.w	r1, [r4, #524]	@ 0x20c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001594:	f04f 010e 	mov.w	r1, #14
    hpcd->IN_ep[i].xfer_len = 0U;
 8001598:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800159c:	f8a4 1226 	strh.w	r1, [r4, #550]	@ 0x226
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015a0:	e9c4 3385 	strd	r3, r3, [r4, #532]	@ 0x214
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a4:	d00c      	beq.n	80015c0 <HAL_PCD_Init+0x24c>
    hpcd->IN_ep[i].num = i;
 80015a6:	f240 110f 	movw	r1, #271	@ 0x10f
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015aa:	f884 3234 	strb.w	r3, [r4, #564]	@ 0x234
    hpcd->IN_ep[i].xfer_len = 0U;
 80015ae:	f8c4 3240 	str.w	r3, [r4, #576]	@ 0x240
    hpcd->IN_ep[i].num = i;
 80015b2:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015b6:	210f      	movs	r1, #15
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015b8:	e9c4 338e 	strd	r3, r3, [r4, #568]	@ 0x238
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015bc:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
    hpcd->OUT_ep[i].num = i;
 80015c0:	2300      	movs	r3, #0
 80015c2:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c4:	2a02      	cmp	r2, #2
    hpcd->OUT_ep[i].num = i;
 80015c6:	f8a4 3254 	strh.w	r3, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ca:	f884 3258 	strb.w	r3, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015ce:	f8c4 3264 	str.w	r3, [r4, #612]	@ 0x264
    hpcd->OUT_ep[i].num = i;
 80015d2:	f8a4 1278 	strh.w	r1, [r4, #632]	@ 0x278
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015d6:	f884 327c 	strb.w	r3, [r4, #636]	@ 0x27c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015da:	f8c4 3288 	str.w	r3, [r4, #648]	@ 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015de:	e9c4 3397 	strd	r3, r3, [r4, #604]	@ 0x25c
 80015e2:	e9c4 33a0 	strd	r3, r3, [r4, #640]	@ 0x280
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e6:	f000 80a2 	beq.w	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 80015ea:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ec:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ee:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
    hpcd->OUT_ep[i].num = i;
 80015f2:	f8a4 129c 	strh.w	r1, [r4, #668]	@ 0x29c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015f6:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015fa:	e9c4 33a9 	strd	r3, r3, [r4, #676]	@ 0x2a4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fe:	f000 8096 	beq.w	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 8001602:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001604:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001606:	f884 32c4 	strb.w	r3, [r4, #708]	@ 0x2c4
    hpcd->OUT_ep[i].num = i;
 800160a:	f8a4 12c0 	strh.w	r1, [r4, #704]	@ 0x2c0
    hpcd->OUT_ep[i].xfer_len = 0U;
 800160e:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001612:	e9c4 33b2 	strd	r3, r3, [r4, #712]	@ 0x2c8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001616:	f000 808a 	beq.w	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 800161a:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161c:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800161e:	f884 32e8 	strb.w	r3, [r4, #744]	@ 0x2e8
    hpcd->OUT_ep[i].num = i;
 8001622:	f8a4 12e4 	strh.w	r1, [r4, #740]	@ 0x2e4
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001626:	f8c4 32f4 	str.w	r3, [r4, #756]	@ 0x2f4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800162a:	e9c4 33bb 	strd	r3, r3, [r4, #748]	@ 0x2ec
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162e:	d07e      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 8001630:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001632:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001634:	f884 330c 	strb.w	r3, [r4, #780]	@ 0x30c
    hpcd->OUT_ep[i].num = i;
 8001638:	f8a4 1308 	strh.w	r1, [r4, #776]	@ 0x308
    hpcd->OUT_ep[i].xfer_len = 0U;
 800163c:	f8c4 3318 	str.w	r3, [r4, #792]	@ 0x318
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001640:	e9c4 33c4 	strd	r3, r3, [r4, #784]	@ 0x310
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001644:	d073      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 8001646:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001648:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800164a:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
    hpcd->OUT_ep[i].num = i;
 800164e:	f8a4 132c 	strh.w	r1, [r4, #812]	@ 0x32c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001652:	f8c4 333c 	str.w	r3, [r4, #828]	@ 0x33c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001656:	e9c4 33cd 	strd	r3, r3, [r4, #820]	@ 0x334
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165a:	d068      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 800165c:	2107      	movs	r1, #7
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165e:	2a08      	cmp	r2, #8
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001660:	f884 3354 	strb.w	r3, [r4, #852]	@ 0x354
    hpcd->OUT_ep[i].num = i;
 8001664:	f8a4 1350 	strh.w	r1, [r4, #848]	@ 0x350
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001668:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800166c:	e9c4 33d6 	strd	r3, r3, [r4, #856]	@ 0x358
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001670:	d05d      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 8001672:	2108      	movs	r1, #8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	2a09      	cmp	r2, #9
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001676:	f884 3378 	strb.w	r3, [r4, #888]	@ 0x378
    hpcd->OUT_ep[i].num = i;
 800167a:	f8a4 1374 	strh.w	r1, [r4, #884]	@ 0x374
    hpcd->OUT_ep[i].xfer_len = 0U;
 800167e:	f8c4 3384 	str.w	r3, [r4, #900]	@ 0x384
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001682:	e9c4 33df 	strd	r3, r3, [r4, #892]	@ 0x37c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001686:	d052      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 8001688:	2109      	movs	r1, #9
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168a:	2a0a      	cmp	r2, #10
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800168c:	f884 339c 	strb.w	r3, [r4, #924]	@ 0x39c
    hpcd->OUT_ep[i].num = i;
 8001690:	f8a4 1398 	strh.w	r1, [r4, #920]	@ 0x398
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001694:	f8c4 33a8 	str.w	r3, [r4, #936]	@ 0x3a8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001698:	e9c4 33e8 	strd	r3, r3, [r4, #928]	@ 0x3a0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169c:	d047      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 800169e:	210a      	movs	r1, #10
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a0:	2a0b      	cmp	r2, #11
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016a2:	f884 33c0 	strb.w	r3, [r4, #960]	@ 0x3c0
    hpcd->OUT_ep[i].num = i;
 80016a6:	f8a4 13bc 	strh.w	r1, [r4, #956]	@ 0x3bc
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016aa:	f8c4 33cc 	str.w	r3, [r4, #972]	@ 0x3cc
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ae:	e9c4 33f1 	strd	r3, r3, [r4, #964]	@ 0x3c4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b2:	d03c      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 80016b4:	210b      	movs	r1, #11
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b6:	2a0c      	cmp	r2, #12
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016b8:	f884 33e4 	strb.w	r3, [r4, #996]	@ 0x3e4
    hpcd->OUT_ep[i].num = i;
 80016bc:	f8a4 13e0 	strh.w	r1, [r4, #992]	@ 0x3e0
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016c0:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016c4:	e9c4 33fa 	strd	r3, r3, [r4, #1000]	@ 0x3e8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c8:	d031      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 80016ca:	210c      	movs	r1, #12
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016cc:	2a0d      	cmp	r2, #13
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ce:	f884 3408 	strb.w	r3, [r4, #1032]	@ 0x408
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016d2:	f8c4 340c 	str.w	r3, [r4, #1036]	@ 0x40c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016d6:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hpcd->OUT_ep[i].num = i;
 80016da:	f8a4 1404 	strh.w	r1, [r4, #1028]	@ 0x404
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016de:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e2:	d024      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 80016e4:	210d      	movs	r1, #13
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e6:	2a0e      	cmp	r2, #14
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016e8:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016ec:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016f0:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    hpcd->OUT_ep[i].num = i;
 80016f4:	f8a4 1428 	strh.w	r1, [r4, #1064]	@ 0x428
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016f8:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fc:	d017      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 80016fe:	210e      	movs	r1, #14
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001700:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001702:	f884 3450 	strb.w	r3, [r4, #1104]	@ 0x450
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001706:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800170a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    hpcd->OUT_ep[i].num = i;
 800170e:	f8a4 144c 	strh.w	r1, [r4, #1100]	@ 0x44c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001712:	f8c4 345c 	str.w	r3, [r4, #1116]	@ 0x45c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001716:	d00a      	beq.n	800172e <HAL_PCD_Init+0x3ba>
    hpcd->OUT_ep[i].num = i;
 8001718:	220f      	movs	r2, #15
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800171a:	f884 3474 	strb.w	r3, [r4, #1140]	@ 0x474
    hpcd->OUT_ep[i].maxpacket = 0U;
 800171e:	f8c4 3478 	str.w	r3, [r4, #1144]	@ 0x478
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001722:	f8c4 347c 	str.w	r3, [r4, #1148]	@ 0x47c
    hpcd->OUT_ep[i].num = i;
 8001726:	f8a4 2470 	strh.w	r2, [r4, #1136]	@ 0x470
    hpcd->OUT_ep[i].xfer_len = 0U;
 800172a:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800172e:	7c20      	ldrb	r0, [r4, #16]
 8001730:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001734:	f88d 0000 	strb.w	r0, [sp]
 8001738:	6820      	ldr	r0, [r4, #0]
 800173a:	f003 fcb7 	bl	80050ac <USB_DevInit>
 800173e:	4605      	mov	r5, r0
 8001740:	2800      	cmp	r0, #0
 8001742:	f47f ae32 	bne.w	80013aa <HAL_PCD_Init+0x36>
  hpcd->State = HAL_PCD_STATE_READY;
 8001746:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8001748:	7b23      	ldrb	r3, [r4, #12]
  hpcd->USB_Address = 0U;
 800174a:	7460      	strb	r0, [r4, #17]
  if (hpcd->Init.lpm_enable == 1U)
 800174c:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800174e:	f884 2495 	strb.w	r2, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 8001752:	d00a      	beq.n	800176a <HAL_PCD_Init+0x3f6>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	f004 f8e7 	bl	8005928 <USB_DevDisconnect>
}
 800175a:	4628      	mov	r0, r5
 800175c:	b002      	add	sp, #8
 800175e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001760:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8001764:	f005 f882 	bl	800686c <HAL_PCD_MspInit>
 8001768:	e60f      	b.n	800138a <HAL_PCD_Init+0x16>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800176a:	4620      	mov	r0, r4
 800176c:	f000 ffa4 	bl	80026b8 <HAL_PCDEx_ActivateLPM>
 8001770:	e7f0      	b.n	8001754 <HAL_PCD_Init+0x3e0>
    hpcd->OUT_ep[i].num = i;
 8001772:	f8a4 0254 	strh.w	r0, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001776:	f884 0258 	strb.w	r0, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 800177a:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800177e:	e9c4 0097 	strd	r0, r0, [r4, #604]	@ 0x25c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001782:	e7d4      	b.n	800172e <HAL_PCD_Init+0x3ba>

08001784 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001784:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8001786:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
{
 800178a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800178c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800178e:	2b01      	cmp	r3, #1
 8001790:	d017      	beq.n	80017c2 <HAL_PCD_Start+0x3e>
 8001792:	2301      	movs	r3, #1
 8001794:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001798:	68c3      	ldr	r3, [r0, #12]
 800179a:	065b      	lsls	r3, r3, #25
 800179c:	d502      	bpl.n	80017a4 <HAL_PCD_Start+0x20>
 800179e:	7b63      	ldrb	r3, [r4, #13]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d009      	beq.n	80017b8 <HAL_PCD_Start+0x34>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 80017a4:	f003 fc3c 	bl	8005020 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017a8:	6820      	ldr	r0, [r4, #0]
 80017aa:	f004 f8ad 	bl	8005908 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017ae:	2300      	movs	r3, #0

  return HAL_OK;
 80017b0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80017b2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
}
 80017b6:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017b8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017be:	6383      	str	r3, [r0, #56]	@ 0x38
 80017c0:	e7f0      	b.n	80017a4 <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 80017c2:	2002      	movs	r0, #2
}
 80017c4:	bd10      	pop	{r4, pc}
 80017c6:	bf00      	nop

080017c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017cc:	6806      	ldr	r6, [r0, #0]
{
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017d2:	4630      	mov	r0, r6
 80017d4:	f004 f8e6 	bl	80059a4 <USB_GetMode>
 80017d8:	b110      	cbz	r0, 80017e0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 80017da:	b009      	add	sp, #36	@ 0x24
 80017dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017e0:	4605      	mov	r5, r0
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	f004 f8b0 	bl	8005948 <USB_ReadInterrupts>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d0f6      	beq.n	80017da <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017ec:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 80017f0:	f506 6200 	add.w	r2, r6, #2048	@ 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017f4:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017f6:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80017fa:	9203      	str	r2, [sp, #12]
 80017fc:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001800:	f004 f8a2 	bl	8005948 <USB_ReadInterrupts>
 8001804:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001808:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800180a:	d003      	beq.n	8001814 <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800180c:	6943      	ldr	r3, [r0, #20]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001814:	f004 f898 	bl	8005948 <USB_ReadInterrupts>
 8001818:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800181c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800181e:	d012      	beq.n	8001846 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001820:	6983      	ldr	r3, [r0, #24]
 8001822:	f023 0310 	bic.w	r3, r3, #16
 8001826:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8001828:	6a37      	ldr	r7, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800182a:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800182e:	f007 080f 	and.w	r8, r7, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001832:	2b02      	cmp	r3, #2
 8001834:	f000 83d2 	beq.w	8001fdc <HAL_PCD_IRQHandler+0x814>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001838:	2b06      	cmp	r3, #6
 800183a:	f000 836f 	beq.w	8001f1c <HAL_PCD_IRQHandler+0x754>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800183e:	6983      	ldr	r3, [r0, #24]
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001846:	f004 f87f 	bl	8005948 <USB_ReadInterrupts>
 800184a:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800184e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001850:	f040 82c7 	bne.w	8001de2 <HAL_PCD_IRQHandler+0x61a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001854:	f004 f878 	bl	8005948 <USB_ReadInterrupts>
 8001858:	0347      	lsls	r7, r0, #13
 800185a:	f100 8226 	bmi.w	8001caa <HAL_PCD_IRQHandler+0x4e2>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800185e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001860:	f004 f872 	bl	8005948 <USB_ReadInterrupts>
 8001864:	2800      	cmp	r0, #0
 8001866:	f2c0 8198 	blt.w	8001b9a <HAL_PCD_IRQHandler+0x3d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800186a:	6820      	ldr	r0, [r4, #0]
 800186c:	f004 f86c 	bl	8005948 <USB_ReadInterrupts>
 8001870:	0501      	lsls	r1, r0, #20
 8001872:	f100 8157 	bmi.w	8001b24 <HAL_PCD_IRQHandler+0x35c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001876:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001878:	f004 f866 	bl	8005948 <USB_ReadInterrupts>
 800187c:	0103      	lsls	r3, r0, #4
 800187e:	d514      	bpl.n	80018aa <HAL_PCD_IRQHandler+0xe2>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	6953      	ldr	r3, [r2, #20]
 8001884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001888:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800188a:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 82f7 	bne.w	8001e82 <HAL_PCD_IRQHandler+0x6ba>
        hpcd->LPM_State = LPM_L1;
 8001894:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001896:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8001898:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800189c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800189e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80018a2:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018a6:	f000 ff1f 	bl	80026e8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018aa:	6820      	ldr	r0, [r4, #0]
 80018ac:	f004 f84c 	bl	8005948 <USB_ReadInterrupts>
 80018b0:	04c7      	lsls	r7, r0, #19
 80018b2:	f100 819c 	bmi.w	8001bee <HAL_PCD_IRQHandler+0x426>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018b6:	6820      	ldr	r0, [r4, #0]
 80018b8:	f004 f846 	bl	8005948 <USB_ReadInterrupts>
 80018bc:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 80018c0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018c2:	f040 817d 	bne.w	8001bc0 <HAL_PCD_IRQHandler+0x3f8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018c6:	f004 f83f 	bl	8005948 <USB_ReadInterrupts>
 80018ca:	0700      	lsls	r0, r0, #28
 80018cc:	f100 81e4 	bmi.w	8001c98 <HAL_PCD_IRQHandler+0x4d0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018d0:	6820      	ldr	r0, [r4, #0]
 80018d2:	f004 f839 	bl	8005948 <USB_ReadInterrupts>
 80018d6:	0601      	lsls	r1, r0, #24
 80018d8:	d571      	bpl.n	80019be <HAL_PCD_IRQHandler+0x1f6>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018da:	69b3      	ldr	r3, [r6, #24]
 80018dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018e0:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e2:	7923      	ldrb	r3, [r4, #4]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d96a      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018e8:	f894 227b 	ldrb.w	r2, [r4, #635]	@ 0x27b
 80018ec:	2a01      	cmp	r2, #1
 80018ee:	f000 83e2 	beq.w	80020b6 <HAL_PCD_IRQHandler+0x8ee>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d963      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018f6:	f894 229f 	ldrb.w	r2, [r4, #671]	@ 0x29f
 80018fa:	2a01      	cmp	r2, #1
 80018fc:	f000 83f6 	beq.w	80020ec <HAL_PCD_IRQHandler+0x924>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001900:	2b03      	cmp	r3, #3
 8001902:	d95c      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001904:	f894 22c3 	ldrb.w	r2, [r4, #707]	@ 0x2c3
 8001908:	2a01      	cmp	r2, #1
 800190a:	f000 8300 	beq.w	8001f0e <HAL_PCD_IRQHandler+0x746>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800190e:	2b04      	cmp	r3, #4
 8001910:	d955      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001912:	f894 22e7 	ldrb.w	r2, [r4, #743]	@ 0x2e7
 8001916:	2a01      	cmp	r2, #1
 8001918:	f000 8313 	beq.w	8001f42 <HAL_PCD_IRQHandler+0x77a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800191c:	2b05      	cmp	r3, #5
 800191e:	d94e      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001920:	f894 230b 	ldrb.w	r2, [r4, #779]	@ 0x30b
 8001924:	2a01      	cmp	r2, #1
 8001926:	f000 8420 	beq.w	800216a <HAL_PCD_IRQHandler+0x9a2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192a:	2b06      	cmp	r3, #6
 800192c:	d947      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800192e:	f894 232f 	ldrb.w	r2, [r4, #815]	@ 0x32f
 8001932:	2a01      	cmp	r2, #1
 8001934:	f000 842d 	beq.w	8002192 <HAL_PCD_IRQHandler+0x9ca>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001938:	2b07      	cmp	r3, #7
 800193a:	d940      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800193c:	f894 2353 	ldrb.w	r2, [r4, #851]	@ 0x353
 8001940:	2a01      	cmp	r2, #1
 8001942:	f000 843f 	beq.w	80021c4 <HAL_PCD_IRQHandler+0x9fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001946:	2b08      	cmp	r3, #8
 8001948:	d939      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800194a:	f894 2377 	ldrb.w	r2, [r4, #887]	@ 0x377
 800194e:	2a01      	cmp	r2, #1
 8001950:	f000 844c 	beq.w	80021ec <HAL_PCD_IRQHandler+0xa24>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001954:	2b09      	cmp	r3, #9
 8001956:	d932      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001958:	f894 239b 	ldrb.w	r2, [r4, #923]	@ 0x39b
 800195c:	2a01      	cmp	r2, #1
 800195e:	f000 8459 	beq.w	8002214 <HAL_PCD_IRQHandler+0xa4c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001962:	2b0a      	cmp	r3, #10
 8001964:	d92b      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001966:	f894 23bf 	ldrb.w	r2, [r4, #959]	@ 0x3bf
 800196a:	2a01      	cmp	r2, #1
 800196c:	f000 8466 	beq.w	800223c <HAL_PCD_IRQHandler+0xa74>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001970:	2b0b      	cmp	r3, #11
 8001972:	d924      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001974:	f894 23e3 	ldrb.w	r2, [r4, #995]	@ 0x3e3
 8001978:	2a01      	cmp	r2, #1
 800197a:	f000 8473 	beq.w	8002264 <HAL_PCD_IRQHandler+0xa9c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d91d      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001982:	f894 2407 	ldrb.w	r2, [r4, #1031]	@ 0x407
 8001986:	2a01      	cmp	r2, #1
 8001988:	f000 8478 	beq.w	800227c <HAL_PCD_IRQHandler+0xab4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800198c:	2b0d      	cmp	r3, #13
 800198e:	d916      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001990:	f894 242b 	ldrb.w	r2, [r4, #1067]	@ 0x42b
 8001994:	2a01      	cmp	r2, #1
 8001996:	f000 8498 	beq.w	80022ca <HAL_PCD_IRQHandler+0xb02>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800199a:	2b0e      	cmp	r3, #14
 800199c:	d90f      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800199e:	f894 244f 	ldrb.w	r2, [r4, #1103]	@ 0x44f
 80019a2:	2a01      	cmp	r2, #1
 80019a4:	f000 849f 	beq.w	80022e6 <HAL_PCD_IRQHandler+0xb1e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d908      	bls.n	80019be <HAL_PCD_IRQHandler+0x1f6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019ac:	f894 3473 	ldrb.w	r3, [r4, #1139]	@ 0x473
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d104      	bne.n	80019be <HAL_PCD_IRQHandler+0x1f6>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80019b4:	f504 618e 	add.w	r1, r4, #1136	@ 0x470
 80019b8:	6820      	ldr	r0, [r4, #0]
 80019ba:	f003 feab 	bl	8005714 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019be:	6820      	ldr	r0, [r4, #0]
 80019c0:	f003 ffc2 	bl	8005948 <USB_ReadInterrupts>
 80019c4:	02c2      	lsls	r2, r0, #11
 80019c6:	f140 80ab 	bpl.w	8001b20 <HAL_PCD_IRQHandler+0x358>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ca:	7923      	ldrb	r3, [r4, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	f240 8089 	bls.w	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019d2:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019d6:	f8d6 1920 	ldr.w	r1, [r6, #2336]	@ 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019da:	2a01      	cmp	r2, #1
 80019dc:	f000 8260 	beq.w	8001ea0 <HAL_PCD_IRQHandler+0x6d8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d97f      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019e4:	f894 2060 	ldrb.w	r2, [r4, #96]	@ 0x60
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019e8:	f8d6 1940 	ldr.w	r1, [r6, #2368]	@ 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ec:	2a01      	cmp	r2, #1
 80019ee:	f000 826a 	beq.w	8001ec6 <HAL_PCD_IRQHandler+0x6fe>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d976      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019f6:	f894 2084 	ldrb.w	r2, [r4, #132]	@ 0x84
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019fa:	f8d6 1960 	ldr.w	r1, [r6, #2400]	@ 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019fe:	2a01      	cmp	r2, #1
 8001a00:	f000 826d 	beq.w	8001ede <HAL_PCD_IRQHandler+0x716>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d96d      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a08:	f894 20a8 	ldrb.w	r2, [r4, #168]	@ 0xa8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a0c:	f8d6 1980 	ldr.w	r1, [r6, #2432]	@ 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a10:	2a01      	cmp	r2, #1
 8001a12:	f000 8270 	beq.w	8001ef6 <HAL_PCD_IRQHandler+0x72e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d964      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1a:	f894 20cc 	ldrb.w	r2, [r4, #204]	@ 0xcc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a1e:	f8d6 19a0 	ldr.w	r1, [r6, #2464]	@ 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a22:	2a01      	cmp	r2, #1
 8001a24:	f000 833b 	beq.w	800209e <HAL_PCD_IRQHandler+0x8d6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a28:	2b06      	cmp	r3, #6
 8001a2a:	d95b      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a2c:	f894 20f0 	ldrb.w	r2, [r4, #240]	@ 0xf0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a30:	f8d6 19c0 	ldr.w	r1, [r6, #2496]	@ 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a34:	2a01      	cmp	r2, #1
 8001a36:	f000 834d 	beq.w	80020d4 <HAL_PCD_IRQHandler+0x90c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a3a:	2b07      	cmp	r3, #7
 8001a3c:	d952      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a3e:	f894 2114 	ldrb.w	r2, [r4, #276]	@ 0x114
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a42:	f8d6 19e0 	ldr.w	r1, [r6, #2528]	@ 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a46:	2a01      	cmp	r2, #1
 8001a48:	f000 8357 	beq.w	80020fa <HAL_PCD_IRQHandler+0x932>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d949      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a50:	f894 2138 	ldrb.w	r2, [r4, #312]	@ 0x138
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a54:	f8d6 1a00 	ldr.w	r1, [r6, #2560]	@ 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a58:	2a01      	cmp	r2, #1
 8001a5a:	f000 835e 	beq.w	800211a <HAL_PCD_IRQHandler+0x952>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5e:	2b09      	cmp	r3, #9
 8001a60:	d940      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a62:	f894 215c 	ldrb.w	r2, [r4, #348]	@ 0x15c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a66:	f8d6 1a20 	ldr.w	r1, [r6, #2592]	@ 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a6a:	2a01      	cmp	r2, #1
 8001a6c:	f000 8369 	beq.w	8002142 <HAL_PCD_IRQHandler+0x97a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a70:	2b0a      	cmp	r3, #10
 8001a72:	d937      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a74:	f894 2180 	ldrb.w	r2, [r4, #384]	@ 0x180
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a78:	f8d6 1a40 	ldr.w	r1, [r6, #2624]	@ 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a7c:	2a01      	cmp	r2, #1
 8001a7e:	f000 837c 	beq.w	800217a <HAL_PCD_IRQHandler+0x9b2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a82:	2b0b      	cmp	r3, #11
 8001a84:	d92e      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a86:	f894 21a4 	ldrb.w	r2, [r4, #420]	@ 0x1a4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a8a:	f8d6 1a60 	ldr.w	r1, [r6, #2656]	@ 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a8e:	2a01      	cmp	r2, #1
 8001a90:	f000 838c 	beq.w	80021ac <HAL_PCD_IRQHandler+0x9e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	d925      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a98:	f894 21c8 	ldrb.w	r2, [r4, #456]	@ 0x1c8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a9c:	f8d6 1a80 	ldr.w	r1, [r6, #2688]	@ 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa0:	2a01      	cmp	r2, #1
 8001aa2:	f000 8397 	beq.w	80021d4 <HAL_PCD_IRQHandler+0xa0c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa6:	2b0d      	cmp	r3, #13
 8001aa8:	d91c      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aaa:	f894 21ec 	ldrb.w	r2, [r4, #492]	@ 0x1ec
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001aae:	f8d6 1aa0 	ldr.w	r1, [r6, #2720]	@ 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab2:	2a01      	cmp	r2, #1
 8001ab4:	f000 83a2 	beq.w	80021fc <HAL_PCD_IRQHandler+0xa34>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab8:	2b0e      	cmp	r3, #14
 8001aba:	d913      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001abc:	f894 2210 	ldrb.w	r2, [r4, #528]	@ 0x210
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ac0:	f8d6 1ac0 	ldr.w	r1, [r6, #2752]	@ 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac4:	2a01      	cmp	r2, #1
 8001ac6:	f000 83ad 	beq.w	8002224 <HAL_PCD_IRQHandler+0xa5c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aca:	2b0f      	cmp	r3, #15
 8001acc:	d90a      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ace:	f894 2234 	ldrb.w	r2, [r4, #564]	@ 0x234
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ad2:	f8d6 1ae0 	ldr.w	r1, [r6, #2784]	@ 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad6:	2a01      	cmp	r2, #1
 8001ad8:	f000 83b8 	beq.w	800224c <HAL_PCD_IRQHandler+0xa84>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d901      	bls.n	8001ae4 <HAL_PCD_IRQHandler+0x31c>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ae0:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	@ 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ae4:	6820      	ldr	r0, [r4, #0]
 8001ae6:	6943      	ldr	r3, [r0, #20]
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aec:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aee:	f003 ff2b 	bl	8005948 <USB_ReadInterrupts>
 8001af2:	0283      	lsls	r3, r0, #10
 8001af4:	d421      	bmi.n	8001b3a <HAL_PCD_IRQHandler+0x372>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001af6:	6820      	ldr	r0, [r4, #0]
 8001af8:	f003 ff26 	bl	8005948 <USB_ReadInterrupts>
 8001afc:	0040      	lsls	r0, r0, #1
 8001afe:	f100 80c2 	bmi.w	8001c86 <HAL_PCD_IRQHandler+0x4be>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b02:	6820      	ldr	r0, [r4, #0]
 8001b04:	f003 ff20 	bl	8005948 <USB_ReadInterrupts>
 8001b08:	0741      	lsls	r1, r0, #29
 8001b0a:	f57f ae66 	bpl.w	80017da <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b12:	076a      	lsls	r2, r5, #29
 8001b14:	f100 8283 	bmi.w	800201e <HAL_PCD_IRQHandler+0x856>
      hpcd->Instance->GOTGINT |= RegVal;
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	432a      	orrs	r2, r5
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	e65c      	b.n	80017da <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b20:	6820      	ldr	r0, [r4, #0]
 8001b22:	e7e4      	b.n	8001aee <HAL_PCD_IRQHandler+0x326>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b24:	9b03      	ldr	r3, [sp, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	07da      	lsls	r2, r3, #31
 8001b2a:	f100 8274 	bmi.w	8002016 <HAL_PCD_IRQHandler+0x84e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b2e:	6820      	ldr	r0, [r4, #0]
 8001b30:	6943      	ldr	r3, [r0, #20]
 8001b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b36:	6143      	str	r3, [r0, #20]
 8001b38:	e69e      	b.n	8001878 <HAL_PCD_IRQHandler+0xb0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b3a:	f894 c004 	ldrb.w	ip, [r4, #4]
 8001b3e:	f1bc 0f01 	cmp.w	ip, #1
 8001b42:	d924      	bls.n	8001b8e <HAL_PCD_IRQHandler+0x3c6>
 8001b44:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 8001b48:	4623      	mov	r3, r4
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	e004      	b.n	8001b58 <HAL_PCD_IRQHandler+0x390>
 8001b4e:	3101      	adds	r1, #1
 8001b50:	3220      	adds	r2, #32
 8001b52:	3324      	adds	r3, #36	@ 0x24
 8001b54:	4561      	cmp	r1, ip
 8001b56:	d01a      	beq.n	8001b8e <HAL_PCD_IRQHandler+0x3c6>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b58:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b5c:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b5e:	2801      	cmp	r0, #1
 8001b60:	d1f5      	bne.n	8001b4e <HAL_PCD_IRQHandler+0x386>
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	daf3      	bge.n	8001b4e <HAL_PCD_IRQHandler+0x386>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001b66:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 8001b6a:	ea87 4715 	eor.w	r7, r7, r5, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b6e:	07ff      	lsls	r7, r7, #31
 8001b70:	d4ed      	bmi.n	8001b4e <HAL_PCD_IRQHandler+0x386>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b72:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b76:	69b0      	ldr	r0, [r6, #24]
 8001b78:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8001b7c:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b7e:	6970      	ldr	r0, [r6, #20]
 8001b80:	0605      	lsls	r5, r0, #24
 8001b82:	d4e4      	bmi.n	8001b4e <HAL_PCD_IRQHandler+0x386>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b84:	9a03      	ldr	r2, [sp, #12]
 8001b86:	6853      	ldr	r3, [r2, #4]
 8001b88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b8c:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b8e:	6820      	ldr	r0, [r4, #0]
 8001b90:	6943      	ldr	r3, [r0, #20]
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b96:	6143      	str	r3, [r0, #20]
 8001b98:	e7ae      	b.n	8001af8 <HAL_PCD_IRQHandler+0x330>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b9a:	9a03      	ldr	r2, [sp, #12]
 8001b9c:	6853      	ldr	r3, [r2, #4]
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001ba4:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	f000 8185 	beq.w	8001eb8 <HAL_PCD_IRQHandler+0x6f0>
        HAL_PCD_ResumeCallback(hpcd);
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f004 ff44 	bl	8006a3c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001bb4:	6820      	ldr	r0, [r4, #0]
 8001bb6:	6943      	ldr	r3, [r0, #20]
 8001bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001bbc:	6143      	str	r3, [r0, #20]
 8001bbe:	e655      	b.n	800186c <HAL_PCD_IRQHandler+0xa4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bc0:	f003 fef4 	bl	80059ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bc4:	6820      	ldr	r0, [r4, #0]
 8001bc6:	f003 fbcf 	bl	8005368 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bca:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bcc:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bce:	f001 fa89 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 8001bd2:	79e2      	ldrb	r2, [r4, #7]
 8001bd4:	4601      	mov	r1, r0
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	f003 f9a8 	bl	8004f2c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f004 feff 	bl	80069e0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001be2:	6820      	ldr	r0, [r4, #0]
 8001be4:	6943      	ldr	r3, [r0, #20]
 8001be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bea:	6143      	str	r3, [r0, #20]
 8001bec:	e66b      	b.n	80018c6 <HAL_PCD_IRQHandler+0xfe>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bee:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bf4:	6853      	ldr	r3, [r2, #4]
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bfc:	f003 fb8c 	bl	8005318 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	7920      	ldrb	r0, [r4, #4]
 8001c02:	b1d8      	cbz	r0, 8001c3c <HAL_PCD_IRQHandler+0x474>
 8001c04:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c08:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8001c0c:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0e:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c10:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c12:	3320      	adds	r3, #32
 8001c14:	4285      	cmp	r5, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c16:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001c1a:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c1e:	f8c3 11e8 	str.w	r1, [r3, #488]	@ 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c22:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8001c26:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001c2a:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c2e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8001c32:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8001c36:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c3a:	d1e7      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x444>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c3c:	9a03      	ldr	r2, [sp, #12]
 8001c3e:	69d3      	ldr	r3, [r2, #28]
 8001c40:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001c44:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c46:	7be3      	ldrb	r3, [r4, #15]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 811e 	beq.w	8001e8a <HAL_PCD_IRQHandler+0x6c2>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c4e:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8001c52:	f043 030b 	orr.w	r3, r3, #11
 8001c56:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c5a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001c5c:	f043 030b 	orr.w	r3, r3, #11
 8001c60:	6453      	str	r3, [r2, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c62:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c66:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001c6a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c6c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001c70:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c74:	79a1      	ldrb	r1, [r4, #6]
 8001c76:	f003 feaf 	bl	80059d8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c7a:	6820      	ldr	r0, [r4, #0]
 8001c7c:	6943      	ldr	r3, [r0, #20]
 8001c7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c82:	6143      	str	r3, [r0, #20]
 8001c84:	e618      	b.n	80018b8 <HAL_PCD_IRQHandler+0xf0>
      HAL_PCD_ConnectCallback(hpcd);
 8001c86:	4620      	mov	r0, r4
 8001c88:	f004 fee4 	bl	8006a54 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c8c:	6820      	ldr	r0, [r4, #0]
 8001c8e:	6943      	ldr	r3, [r0, #20]
 8001c90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c94:	6143      	str	r3, [r0, #20]
 8001c96:	e735      	b.n	8001b04 <HAL_PCD_IRQHandler+0x33c>
      HAL_PCD_SOFCallback(hpcd);
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f004 fe9d 	bl	80069d8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	6943      	ldr	r3, [r0, #20]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	6143      	str	r3, [r0, #20]
 8001ca8:	e613      	b.n	80018d2 <HAL_PCD_IRQHandler+0x10a>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001caa:	6820      	ldr	r0, [r4, #0]
 8001cac:	f003 fe58 	bl	8005960 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8001cb0:	4681      	mov	r9, r0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001cb2:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8001cb4:	f1b9 0f00 	cmp.w	r9, #0
 8001cb8:	f43f add2 	beq.w	8001860 <HAL_PCD_IRQHandler+0x98>
      epnum = 0U;
 8001cbc:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001cc0:	9505      	str	r5, [sp, #20]
 8001cc2:	46a0      	mov	r8, r4
 8001cc4:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
 8001cc8:	46d3      	mov	fp, sl
 8001cca:	4605      	mov	r5, r0
 8001ccc:	9604      	str	r6, [sp, #16]
 8001cce:	e009      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x51c>
      while (ep_intr != 0U)
 8001cd0:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8001cd4:	f10b 0b01 	add.w	fp, fp, #1
      while (ep_intr != 0U)
 8001cd8:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 8001cdc:	f107 0720 	add.w	r7, r7, #32
 8001ce0:	f000 8138 	beq.w	8001f54 <HAL_PCD_IRQHandler+0x78c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ce4:	f019 0f01 	tst.w	r9, #1
 8001ce8:	d0f2      	beq.n	8001cd0 <HAL_PCD_IRQHandler+0x508>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cea:	fa5f fa8b 	uxtb.w	sl, fp
 8001cee:	4628      	mov	r0, r5
 8001cf0:	4651      	mov	r1, sl
 8001cf2:	f003 fe47 	bl	8005984 <USB_ReadDevInEPInterrupt>
 8001cf6:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cf8:	07f0      	lsls	r0, r6, #31
 8001cfa:	d512      	bpl.n	8001d22 <HAL_PCD_IRQHandler+0x55a>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cfc:	2001      	movs	r0, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cfe:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d00:	f00b 010f 	and.w	r1, fp, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d06:	fa00 f101 	lsl.w	r1, r0, r1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d0a:	ea22 0201 	bic.w	r2, r2, r1
 8001d0e:	635a      	str	r2, [r3, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d10:	60b8      	str	r0, [r7, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001d12:	79a1      	ldrb	r1, [r4, #6]
 8001d14:	4281      	cmp	r1, r0
 8001d16:	f000 8187 	beq.w	8002028 <HAL_PCD_IRQHandler+0x860>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d1a:	4651      	mov	r1, sl
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f004 fe51 	bl	80069c4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d22:	0731      	lsls	r1, r6, #28
 8001d24:	d501      	bpl.n	8001d2a <HAL_PCD_IRQHandler+0x562>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d26:	2308      	movs	r3, #8
 8001d28:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d2a:	06f2      	lsls	r2, r6, #27
 8001d2c:	d501      	bpl.n	8001d32 <HAL_PCD_IRQHandler+0x56a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d2e:	2310      	movs	r3, #16
 8001d30:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d32:	0673      	lsls	r3, r6, #25
 8001d34:	d501      	bpl.n	8001d3a <HAL_PCD_IRQHandler+0x572>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d36:	2340      	movs	r3, #64	@ 0x40
 8001d38:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d3a:	07b5      	lsls	r5, r6, #30
 8001d3c:	f100 8142 	bmi.w	8001fc4 <HAL_PCD_IRQHandler+0x7fc>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d40:	0630      	lsls	r0, r6, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d42:	6825      	ldr	r5, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d44:	d5c4      	bpl.n	8001cd0 <HAL_PCD_IRQHandler+0x508>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001d46:	e9d8 2309 	ldrd	r2, r3, [r8, #36]	@ 0x24
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d8c0      	bhi.n	8001cd0 <HAL_PCD_IRQHandler+0x508>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d4e:	eba2 0e03 	sub.w	lr, r2, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001d52:	f8d8 101c 	ldr.w	r1, [r8, #28]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d56:	f505 6c10 	add.w	ip, r5, #2304	@ 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d5a:	9507      	str	r5, [sp, #28]
  len32b = (len + 3U) / 4U;
 8001d5c:	458e      	cmp	lr, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d5e:	eb0c 164b 	add.w	r6, ip, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8001d62:	bf28      	it	cs
 8001d64:	468e      	movcs	lr, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d66:	69b0      	ldr	r0, [r6, #24]
  len32b = (len + 3U) / 4U;
 8001d68:	f10e 0103 	add.w	r1, lr, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d6c:	fa1f fe80 	uxth.w	lr, r0
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d70:	ebbe 0f91 	cmp.w	lr, r1, lsr #2
 8001d74:	f0c0 8181 	bcc.w	800207a <HAL_PCD_IRQHandler+0x8b2>
 8001d78:	9706      	str	r7, [sp, #24]
 8001d7a:	4617      	mov	r7, r2
 8001d7c:	e021      	b.n	8001dc2 <HAL_PCD_IRQHandler+0x5fa>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d7e:	1aff      	subs	r7, r7, r3
 8001d80:	f8d8 301c 	ldr.w	r3, [r8, #28]
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d84:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8001d88:	4652      	mov	r2, sl
 8001d8a:	429f      	cmp	r7, r3
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	bf28      	it	cs
 8001d90:	461f      	movcs	r7, r3
 8001d92:	79a3      	ldrb	r3, [r4, #6]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	b2bb      	uxth	r3, r7
 8001d98:	f003 fd06 	bl	80057a8 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001d9c:	f8d8 3020 	ldr.w	r3, [r8, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001da0:	69b2      	ldr	r2, [r6, #24]
    ep->xfer_buff  += len;
 8001da2:	443b      	add	r3, r7
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001da4:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8001da6:	f8c8 3020 	str.w	r3, [r8, #32]
    ep->xfer_count += len;
 8001daa:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 8001dae:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8001db0:	3703      	adds	r7, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001db2:	ebb2 0f97 	cmp.w	r2, r7, lsr #2
    ep->xfer_count += len;
 8001db6:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dba:	f0c0 815a 	bcc.w	8002072 <HAL_PCD_IRQHandler+0x8aa>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dbe:	f8d8 7024 	ldr.w	r7, [r8, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dc2:	429f      	cmp	r7, r3
 8001dc4:	d8db      	bhi.n	8001d7e <HAL_PCD_IRQHandler+0x5b6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001dc6:	9f06      	ldr	r7, [sp, #24]
 8001dc8:	6825      	ldr	r5, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dca:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dcc:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dce:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dd2:	f00b 030f 	and.w	r3, fp, #15
 8001dd6:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dd8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8001dda:	ea23 0302 	bic.w	r3, r3, r2
 8001dde:	634b      	str	r3, [r1, #52]	@ 0x34
 8001de0:	e776      	b.n	8001cd0 <HAL_PCD_IRQHandler+0x508>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001de2:	f003 fdb5 	bl	8005950 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8001de6:	4607      	mov	r7, r0
 8001de8:	2800      	cmp	r0, #0
 8001dea:	f000 80b1 	beq.w	8001f50 <HAL_PCD_IRQHandler+0x788>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dee:	9504      	str	r5, [sp, #16]
 8001df0:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 8001df4:	46a3      	mov	fp, r4
      epnum = 0U;
 8001df6:	f04f 0a00 	mov.w	sl, #0
 8001dfa:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dfc:	4625      	mov	r5, r4
 8001dfe:	e008      	b.n	8001e12 <HAL_PCD_IRQHandler+0x64a>
      while (ep_intr != 0U)
 8001e00:	087f      	lsrs	r7, r7, #1
        epnum++;
 8001e02:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8001e06:	f108 0820 	add.w	r8, r8, #32
 8001e0a:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 8001e0e:	f000 80a5 	beq.w	8001f5c <HAL_PCD_IRQHandler+0x794>
        if ((ep_intr & 0x1U) != 0U)
 8001e12:	07fc      	lsls	r4, r7, #31
 8001e14:	d5f4      	bpl.n	8001e00 <HAL_PCD_IRQHandler+0x638>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e16:	fa5f f48a 	uxtb.w	r4, sl
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	f003 fda8 	bl	8005970 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e20:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e24:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e26:	f040 809c 	bne.w	8001f62 <HAL_PCD_IRQHandler+0x79a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e2a:	f019 0f08 	tst.w	r9, #8
 8001e2e:	f040 80b8 	bne.w	8001fa2 <HAL_PCD_IRQHandler+0x7da>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e32:	f019 0f10 	tst.w	r9, #16
 8001e36:	d002      	beq.n	8001e3e <HAL_PCD_IRQHandler+0x676>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e38:	2210      	movs	r2, #16
 8001e3a:	f8c8 2008 	str.w	r2, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e3e:	f019 0f02 	tst.w	r9, #2
 8001e42:	d00f      	beq.n	8001e64 <HAL_PCD_IRQHandler+0x69c>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e44:	6972      	ldr	r2, [r6, #20]
 8001e46:	0613      	lsls	r3, r2, #24
 8001e48:	d504      	bpl.n	8001e54 <HAL_PCD_IRQHandler+0x68c>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e4a:	9b03      	ldr	r3, [sp, #12]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e52:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8001e54:	f89b 2257 	ldrb.w	r2, [fp, #599]	@ 0x257
 8001e58:	2a01      	cmp	r2, #1
 8001e5a:	f000 8133 	beq.w	80020c4 <HAL_PCD_IRQHandler+0x8fc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e64:	f019 0f20 	tst.w	r9, #32
 8001e68:	d002      	beq.n	8001e70 <HAL_PCD_IRQHandler+0x6a8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e70:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
 8001e74:	d003      	beq.n	8001e7e <HAL_PCD_IRQHandler+0x6b6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7a:	f8c8 3008 	str.w	r3, [r8, #8]
 8001e7e:	6828      	ldr	r0, [r5, #0]
 8001e80:	e7be      	b.n	8001e00 <HAL_PCD_IRQHandler+0x638>
        HAL_PCD_SuspendCallback(hpcd);
 8001e82:	4620      	mov	r0, r4
 8001e84:	f004 fdc2 	bl	8006a0c <HAL_PCD_SuspendCallback>
 8001e88:	e50f      	b.n	80018aa <HAL_PCD_IRQHandler+0xe2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001e90:	6952      	ldr	r2, [r2, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e96:	690b      	ldr	r3, [r1, #16]
 8001e98:	f043 030b 	orr.w	r3, r3, #11
 8001e9c:	610b      	str	r3, [r1, #16]
 8001e9e:	e6e0      	b.n	8001c62 <HAL_PCD_IRQHandler+0x49a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	f6bf ad9d 	bge.w	80019e0 <HAL_PCD_IRQHandler+0x218>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ea6:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8001eaa:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001eac:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001eb0:	f003 fc30 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eb4:	7923      	ldrb	r3, [r4, #4]
 8001eb6:	e593      	b.n	80019e0 <HAL_PCD_IRQHandler+0x218>
        hpcd->LPM_State = LPM_L0;
 8001eb8:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eba:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8001ebc:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ec0:	f000 fc12 	bl	80026e8 <HAL_PCDEx_LPM_Callback>
 8001ec4:	e676      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x3ec>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec6:	2900      	cmp	r1, #0
 8001ec8:	f6bf ad93 	bge.w	80019f2 <HAL_PCD_IRQHandler+0x22a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ecc:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 8001ed0:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ed2:	f884 205f 	strb.w	r2, [r4, #95]	@ 0x5f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ed6:	f003 fc1d 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eda:	7923      	ldrb	r3, [r4, #4]
 8001edc:	e589      	b.n	80019f2 <HAL_PCD_IRQHandler+0x22a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ede:	2900      	cmp	r1, #0
 8001ee0:	f6bf ad90 	bge.w	8001a04 <HAL_PCD_IRQHandler+0x23c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ee4:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8001ee8:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001eea:	f884 2083 	strb.w	r2, [r4, #131]	@ 0x83
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001eee:	f003 fc11 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ef2:	7923      	ldrb	r3, [r4, #4]
 8001ef4:	e586      	b.n	8001a04 <HAL_PCD_IRQHandler+0x23c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ef6:	2900      	cmp	r1, #0
 8001ef8:	f6bf ad8d 	bge.w	8001a16 <HAL_PCD_IRQHandler+0x24e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001efc:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 8001f00:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f02:	f884 20a7 	strb.w	r2, [r4, #167]	@ 0xa7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f06:	f003 fc05 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f0a:	7923      	ldrb	r3, [r4, #4]
 8001f0c:	e583      	b.n	8001a16 <HAL_PCD_IRQHandler+0x24e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f0e:	f504 7130 	add.w	r1, r4, #704	@ 0x2c0
 8001f12:	6820      	ldr	r0, [r4, #0]
 8001f14:	f003 fbfe 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f18:	7923      	ldrb	r3, [r4, #4]
 8001f1a:	e4f8      	b.n	800190e <HAL_PCD_IRQHandler+0x146>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f1c:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f20:	2208      	movs	r2, #8
 8001f22:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8001f26:	4630      	mov	r0, r6
 8001f28:	f003 fc54 	bl	80057d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f2c:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8001f30:	eb04 0288 	add.w	r2, r4, r8, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f34:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f36:	f8d2 1268 	ldr.w	r1, [r2, #616]	@ 0x268
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8001f40:	e47d      	b.n	800183e <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f42:	f504 7139 	add.w	r1, r4, #740	@ 0x2e4
 8001f46:	6820      	ldr	r0, [r4, #0]
 8001f48:	f003 fbe4 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f4c:	7923      	ldrb	r3, [r4, #4]
 8001f4e:	e4e5      	b.n	800191c <HAL_PCD_IRQHandler+0x154>
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	e47f      	b.n	8001854 <HAL_PCD_IRQHandler+0x8c>
 8001f54:	4628      	mov	r0, r5
 8001f56:	9e04      	ldr	r6, [sp, #16]
 8001f58:	9d05      	ldr	r5, [sp, #20]
 8001f5a:	e481      	b.n	8001860 <HAL_PCD_IRQHandler+0x98>
 8001f5c:	462c      	mov	r4, r5
 8001f5e:	9d04      	ldr	r5, [sp, #16]
 8001f60:	e478      	b.n	8001854 <HAL_PCD_IRQHandler+0x8c>
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f62:	6828      	ldr	r0, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f64:	2201      	movs	r2, #1
 8001f66:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f6a:	f500 6230 	add.w	r2, r0, #2816	@ 0xb00

  if (hpcd->Init.dma_enable == 1U)
 8001f6e:	79a9      	ldrb	r1, [r5, #6]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f70:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001f74:	f8d0 e040 	ldr.w	lr, [r0, #64]	@ 0x40
  if (hpcd->Init.dma_enable == 1U)
 8001f78:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f7a:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001f7c:	f000 8081 	beq.w	8002082 <HAL_PCD_IRQHandler+0x8ba>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f80:	49bc      	ldr	r1, [pc, #752]	@ (8002274 <HAL_PCD_IRQHandler+0xaac>)
 8001f82:	458e      	cmp	lr, r1
 8001f84:	f000 80d5 	beq.w	8002132 <HAL_PCD_IRQHandler+0x96a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f88:	f1ba 0f00 	cmp.w	sl, #0
 8001f8c:	d104      	bne.n	8001f98 <HAL_PCD_IRQHandler+0x7d0>
 8001f8e:	f8d5 2264 	ldr.w	r2, [r5, #612]	@ 0x264
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	f000 81a1 	beq.w	80022da <HAL_PCD_IRQHandler+0xb12>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f98:	4621      	mov	r1, r4
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	f004 fd08 	bl	80069b0 <HAL_PCD_DataOutStageCallback>
 8001fa0:	e743      	b.n	8001e2a <HAL_PCD_IRQHandler+0x662>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fa2:	6829      	ldr	r1, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001faa:	f501 6230 	add.w	r2, r1, #2816	@ 0xb00
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001fae:	6c08      	ldr	r0, [r1, #64]	@ 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fb0:	49b1      	ldr	r1, [pc, #708]	@ (8002278 <HAL_PCD_IRQHandler+0xab0>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fb2:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fb6:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fb8:	6893      	ldr	r3, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fba:	d848      	bhi.n	800204e <HAL_PCD_IRQHandler+0x886>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f004 fcf1 	bl	80069a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001fc2:	e736      	b.n	8001e32 <HAL_PCD_IRQHandler+0x66a>
            (void)USB_FlushTxFifo(USBx, epnum);
 8001fc4:	4659      	mov	r1, fp
 8001fc6:	9804      	ldr	r0, [sp, #16]
 8001fc8:	f003 f9a6 	bl	8005318 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8001fcc:	f898 2017 	ldrb.w	r2, [r8, #23]
 8001fd0:	2a01      	cmp	r2, #1
 8001fd2:	f000 80c2 	beq.w	800215a <HAL_PCD_IRQHandler+0x992>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	e6b1      	b.n	8001d40 <HAL_PCD_IRQHandler+0x578>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fdc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001fe0:	421f      	tst	r7, r3
 8001fe2:	f43f ac2c 	beq.w	800183e <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fe6:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 8001fea:	f3c7 120a 	ubfx	r2, r7, #4, #11
 8001fee:	4630      	mov	r0, r6
 8001ff0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8001ff4:	4617      	mov	r7, r2
 8001ff6:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 8001ffa:	f003 fbeb 	bl	80057d4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ffe:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002002:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002004:	443b      	add	r3, r7
 8002006:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800200a:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 800200e:	443b      	add	r3, r7
 8002010:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 8002014:	e413      	b.n	800183e <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 8002016:	4620      	mov	r0, r4
 8002018:	f004 fcf8 	bl	8006a0c <HAL_PCD_SuspendCallback>
 800201c:	e587      	b.n	8001b2e <HAL_PCD_IRQHandler+0x366>
        HAL_PCD_DisconnectCallback(hpcd);
 800201e:	4620      	mov	r0, r4
 8002020:	f004 fd1c 	bl	8006a5c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	e577      	b.n	8001b18 <HAL_PCD_IRQHandler+0x350>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002028:	e9d8 0207 	ldrd	r0, r2, [r8, #28]
 800202c:	4402      	add	r2, r0
 800202e:	f8c8 2020 	str.w	r2, [r8, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002032:	f1bb 0f00 	cmp.w	fp, #0
 8002036:	f47f ae70 	bne.w	8001d1a <HAL_PCD_IRQHandler+0x552>
 800203a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800203c:	2a00      	cmp	r2, #0
 800203e:	f47f ae6c 	bne.w	8001d1a <HAL_PCD_IRQHandler+0x552>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002042:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002046:	6820      	ldr	r0, [r4, #0]
 8002048:	f003 fcc6 	bl	80059d8 <USB_EP0_OutStart>
 800204c:	e665      	b.n	8001d1a <HAL_PCD_IRQHandler+0x552>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800204e:	0419      	lsls	r1, r3, #16
 8002050:	d55f      	bpl.n	8002112 <HAL_PCD_IRQHandler+0x94a>
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  HAL_PCD_SetupStageCallback(hpcd);
 8002056:	4628      	mov	r0, r5
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002058:	6091      	str	r1, [r2, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 800205a:	f004 fca3 	bl	80069a4 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800205e:	79a9      	ldrb	r1, [r5, #6]
 8002060:	2901      	cmp	r1, #1
 8002062:	f47f aee6 	bne.w	8001e32 <HAL_PCD_IRQHandler+0x66a>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002066:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 800206a:	6828      	ldr	r0, [r5, #0]
 800206c:	f003 fcb4 	bl	80059d8 <USB_EP0_OutStart>
 8002070:	e6df      	b.n	8001e32 <HAL_PCD_IRQHandler+0x66a>
  if (ep->xfer_len <= ep->xfer_count)
 8002072:	9f06      	ldr	r7, [sp, #24]
 8002074:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002078:	6825      	ldr	r5, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 800207a:	4293      	cmp	r3, r2
 800207c:	f4ff ae28 	bcc.w	8001cd0 <HAL_PCD_IRQHandler+0x508>
 8002080:	e6a3      	b.n	8001dca <HAL_PCD_IRQHandler+0x602>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002082:	0719      	lsls	r1, r3, #28
 8002084:	f140 808d 	bpl.w	80021a2 <HAL_PCD_IRQHandler+0x9da>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002088:	497b      	ldr	r1, [pc, #492]	@ (8002278 <HAL_PCD_IRQHandler+0xab0>)
 800208a:	458e      	cmp	lr, r1
 800208c:	f67f aecd 	bls.w	8001e2a <HAL_PCD_IRQHandler+0x662>
 8002090:	0418      	lsls	r0, r3, #16
 8002092:	f57f aeca 	bpl.w	8001e2a <HAL_PCD_IRQHandler+0x662>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002096:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800209a:	6091      	str	r1, [r2, #8]
 800209c:	e6c5      	b.n	8001e2a <HAL_PCD_IRQHandler+0x662>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800209e:	2900      	cmp	r1, #0
 80020a0:	f6bf acc2 	bge.w	8001a28 <HAL_PCD_IRQHandler+0x260>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020a4:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 80020a8:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80020aa:	f884 20cb 	strb.w	r2, [r4, #203]	@ 0xcb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020ae:	f003 fb31 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020b2:	7923      	ldrb	r3, [r4, #4]
 80020b4:	e4b8      	b.n	8001a28 <HAL_PCD_IRQHandler+0x260>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020b6:	f504 711e 	add.w	r1, r4, #632	@ 0x278
 80020ba:	6820      	ldr	r0, [r4, #0]
 80020bc:	f003 fb2a 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020c0:	7923      	ldrb	r3, [r4, #4]
 80020c2:	e416      	b.n	80018f2 <HAL_PCD_IRQHandler+0x12a>
              ep->is_iso_incomplete = 0U;
 80020c4:	2200      	movs	r2, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020c6:	4621      	mov	r1, r4
 80020c8:	4628      	mov	r0, r5
              ep->is_iso_incomplete = 0U;
 80020ca:	f88b 2257 	strb.w	r2, [fp, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020ce:	f004 fcb9 	bl	8006a44 <HAL_PCD_ISOOUTIncompleteCallback>
 80020d2:	e6c4      	b.n	8001e5e <HAL_PCD_IRQHandler+0x696>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020d4:	2900      	cmp	r1, #0
 80020d6:	f6bf acb0 	bge.w	8001a3a <HAL_PCD_IRQHandler+0x272>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020da:	f104 01ec 	add.w	r1, r4, #236	@ 0xec
 80020de:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80020e0:	f884 20ef 	strb.w	r2, [r4, #239]	@ 0xef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020e4:	f003 fb16 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020e8:	7923      	ldrb	r3, [r4, #4]
 80020ea:	e4a6      	b.n	8001a3a <HAL_PCD_IRQHandler+0x272>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020ec:	f504 7127 	add.w	r1, r4, #668	@ 0x29c
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	f003 fb0f 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020f6:	7923      	ldrb	r3, [r4, #4]
 80020f8:	e402      	b.n	8001900 <HAL_PCD_IRQHandler+0x138>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020fa:	2900      	cmp	r1, #0
 80020fc:	f6bf aca6 	bge.w	8001a4c <HAL_PCD_IRQHandler+0x284>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002100:	f504 7188 	add.w	r1, r4, #272	@ 0x110
 8002104:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002106:	f884 2113 	strb.w	r2, [r4, #275]	@ 0x113
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800210a:	f003 fb03 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800210e:	7923      	ldrb	r3, [r4, #4]
 8002110:	e49c      	b.n	8001a4c <HAL_PCD_IRQHandler+0x284>
  HAL_PCD_SetupStageCallback(hpcd);
 8002112:	4628      	mov	r0, r5
 8002114:	f004 fc46 	bl	80069a4 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002118:	e7a1      	b.n	800205e <HAL_PCD_IRQHandler+0x896>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800211a:	2900      	cmp	r1, #0
 800211c:	f6bf ac9f 	bge.w	8001a5e <HAL_PCD_IRQHandler+0x296>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002120:	f504 719a 	add.w	r1, r4, #308	@ 0x134
 8002124:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002126:	f884 2137 	strb.w	r2, [r4, #311]	@ 0x137
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800212a:	f003 faf3 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800212e:	7923      	ldrb	r3, [r4, #4]
 8002130:	e495      	b.n	8001a5e <HAL_PCD_IRQHandler+0x296>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002132:	0419      	lsls	r1, r3, #16
 8002134:	d4af      	bmi.n	8002096 <HAL_PCD_IRQHandler+0x8ce>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002136:	0698      	lsls	r0, r3, #26
 8002138:	f57f af2e 	bpl.w	8001f98 <HAL_PCD_IRQHandler+0x7d0>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800213c:	2120      	movs	r1, #32
 800213e:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002140:	e72a      	b.n	8001f98 <HAL_PCD_IRQHandler+0x7d0>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002142:	2900      	cmp	r1, #0
 8002144:	f6bf ac94 	bge.w	8001a70 <HAL_PCD_IRQHandler+0x2a8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002148:	f504 71ac 	add.w	r1, r4, #344	@ 0x158
 800214c:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800214e:	f884 215b 	strb.w	r2, [r4, #347]	@ 0x15b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002152:	f003 fadf 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002156:	7923      	ldrb	r3, [r4, #4]
 8002158:	e48a      	b.n	8001a70 <HAL_PCD_IRQHandler+0x2a8>
              ep->is_iso_incomplete = 0U;
 800215a:	2200      	movs	r2, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800215c:	4651      	mov	r1, sl
 800215e:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 8002160:	f888 2017 	strb.w	r2, [r8, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002164:	f004 fc72 	bl	8006a4c <HAL_PCD_ISOINIncompleteCallback>
 8002168:	e735      	b.n	8001fd6 <HAL_PCD_IRQHandler+0x80e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800216a:	f504 7142 	add.w	r1, r4, #776	@ 0x308
 800216e:	6820      	ldr	r0, [r4, #0]
 8002170:	f003 fad0 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002174:	7923      	ldrb	r3, [r4, #4]
 8002176:	f7ff bbd8 	b.w	800192a <HAL_PCD_IRQHandler+0x162>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800217a:	2900      	cmp	r1, #0
 800217c:	f6bf ac81 	bge.w	8001a82 <HAL_PCD_IRQHandler+0x2ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002180:	f504 71be 	add.w	r1, r4, #380	@ 0x17c
 8002184:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002186:	f884 217f 	strb.w	r2, [r4, #383]	@ 0x17f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800218a:	f003 fac3 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800218e:	7923      	ldrb	r3, [r4, #4]
 8002190:	e477      	b.n	8001a82 <HAL_PCD_IRQHandler+0x2ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002192:	f504 714b 	add.w	r1, r4, #812	@ 0x32c
 8002196:	6820      	ldr	r0, [r4, #0]
 8002198:	f003 fabc 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800219c:	7923      	ldrb	r3, [r4, #4]
 800219e:	f7ff bbcb 	b.w	8001938 <HAL_PCD_IRQHandler+0x170>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021a2:	0699      	lsls	r1, r3, #26
 80021a4:	d572      	bpl.n	800228c <HAL_PCD_IRQHandler+0xac4>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a6:	2120      	movs	r1, #32
 80021a8:	6091      	str	r1, [r2, #8]
 80021aa:	e63e      	b.n	8001e2a <HAL_PCD_IRQHandler+0x662>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ac:	2900      	cmp	r1, #0
 80021ae:	f6bf ac71 	bge.w	8001a94 <HAL_PCD_IRQHandler+0x2cc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021b2:	f504 71d0 	add.w	r1, r4, #416	@ 0x1a0
 80021b6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021b8:	f884 21a3 	strb.w	r2, [r4, #419]	@ 0x1a3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021bc:	f003 faaa 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021c0:	7923      	ldrb	r3, [r4, #4]
 80021c2:	e467      	b.n	8001a94 <HAL_PCD_IRQHandler+0x2cc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021c4:	f504 7154 	add.w	r1, r4, #848	@ 0x350
 80021c8:	6820      	ldr	r0, [r4, #0]
 80021ca:	f003 faa3 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ce:	7923      	ldrb	r3, [r4, #4]
 80021d0:	f7ff bbb9 	b.w	8001946 <HAL_PCD_IRQHandler+0x17e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021d4:	2900      	cmp	r1, #0
 80021d6:	f6bf ac66 	bge.w	8001aa6 <HAL_PCD_IRQHandler+0x2de>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021da:	f504 71e2 	add.w	r1, r4, #452	@ 0x1c4
 80021de:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021e0:	f884 21c7 	strb.w	r2, [r4, #455]	@ 0x1c7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021e4:	f003 fa96 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021e8:	7923      	ldrb	r3, [r4, #4]
 80021ea:	e45c      	b.n	8001aa6 <HAL_PCD_IRQHandler+0x2de>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021ec:	f504 715d 	add.w	r1, r4, #884	@ 0x374
 80021f0:	6820      	ldr	r0, [r4, #0]
 80021f2:	f003 fa8f 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021f6:	7923      	ldrb	r3, [r4, #4]
 80021f8:	f7ff bbac 	b.w	8001954 <HAL_PCD_IRQHandler+0x18c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021fc:	2900      	cmp	r1, #0
 80021fe:	f6bf ac5b 	bge.w	8001ab8 <HAL_PCD_IRQHandler+0x2f0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002202:	f504 71f4 	add.w	r1, r4, #488	@ 0x1e8
 8002206:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002208:	f884 21eb 	strb.w	r2, [r4, #491]	@ 0x1eb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800220c:	f003 fa82 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002210:	7923      	ldrb	r3, [r4, #4]
 8002212:	e451      	b.n	8001ab8 <HAL_PCD_IRQHandler+0x2f0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002214:	f504 7166 	add.w	r1, r4, #920	@ 0x398
 8002218:	6820      	ldr	r0, [r4, #0]
 800221a:	f003 fa7b 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800221e:	7923      	ldrb	r3, [r4, #4]
 8002220:	f7ff bb9f 	b.w	8001962 <HAL_PCD_IRQHandler+0x19a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002224:	2900      	cmp	r1, #0
 8002226:	f6bf ac50 	bge.w	8001aca <HAL_PCD_IRQHandler+0x302>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800222a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800222e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002230:	f884 220f 	strb.w	r2, [r4, #527]	@ 0x20f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002234:	f003 fa6e 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002238:	7923      	ldrb	r3, [r4, #4]
 800223a:	e446      	b.n	8001aca <HAL_PCD_IRQHandler+0x302>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800223c:	f504 716f 	add.w	r1, r4, #956	@ 0x3bc
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	f003 fa67 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002246:	7923      	ldrb	r3, [r4, #4]
 8002248:	f7ff bb92 	b.w	8001970 <HAL_PCD_IRQHandler+0x1a8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800224c:	2900      	cmp	r1, #0
 800224e:	f6bf ac45 	bge.w	8001adc <HAL_PCD_IRQHandler+0x314>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002252:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 8002256:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002258:	f884 2233 	strb.w	r2, [r4, #563]	@ 0x233
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800225c:	f003 fa5a 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002260:	7923      	ldrb	r3, [r4, #4]
 8002262:	e43b      	b.n	8001adc <HAL_PCD_IRQHandler+0x314>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002264:	f504 7178 	add.w	r1, r4, #992	@ 0x3e0
 8002268:	6820      	ldr	r0, [r4, #0]
 800226a:	f003 fa53 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800226e:	7923      	ldrb	r3, [r4, #4]
 8002270:	f7ff bb85 	b.w	800197e <HAL_PCD_IRQHandler+0x1b6>
 8002274:	4f54310a 	.word	0x4f54310a
 8002278:	4f54300a 	.word	0x4f54300a
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800227c:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8002280:	6820      	ldr	r0, [r4, #0]
 8002282:	f003 fa47 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002286:	7923      	ldrb	r3, [r4, #4]
 8002288:	f7ff bb80 	b.w	800198c <HAL_PCD_IRQHandler+0x1c4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800228c:	f013 0f28 	tst.w	r3, #40	@ 0x28
 8002290:	f47f adcb 	bne.w	8001e2a <HAL_PCD_IRQHandler+0x662>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002294:	491b      	ldr	r1, [pc, #108]	@ (8002304 <HAL_PCD_IRQHandler+0xb3c>)
 8002296:	458e      	cmp	lr, r1
 8002298:	d902      	bls.n	80022a0 <HAL_PCD_IRQHandler+0xad8>
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	f53f aefb 	bmi.w	8002096 <HAL_PCD_IRQHandler+0x8ce>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022a0:	6911      	ldr	r1, [r2, #16]
 80022a2:	f8db 2274 	ldr.w	r2, [fp, #628]	@ 0x274
 80022a6:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80022aa:	1a52      	subs	r2, r2, r1
 80022ac:	f8cb 2268 	str.w	r2, [fp, #616]	@ 0x268
        if (epnum == 0U)
 80022b0:	f1ba 0f00 	cmp.w	sl, #0
 80022b4:	f47f ae70 	bne.w	8001f98 <HAL_PCD_IRQHandler+0x7d0>
          if (ep->xfer_len == 0U)
 80022b8:	f8d5 1264 	ldr.w	r1, [r5, #612]	@ 0x264
 80022bc:	b1d9      	cbz	r1, 80022f6 <HAL_PCD_IRQHandler+0xb2e>
            ep->xfer_buff += ep->xfer_count;
 80022be:	f8d5 1260 	ldr.w	r1, [r5, #608]	@ 0x260
 80022c2:	4411      	add	r1, r2
 80022c4:	f8c5 1260 	str.w	r1, [r5, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022c8:	e666      	b.n	8001f98 <HAL_PCD_IRQHandler+0x7d0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022ca:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
 80022ce:	6820      	ldr	r0, [r4, #0]
 80022d0:	f003 fa20 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022d4:	7923      	ldrb	r3, [r4, #4]
 80022d6:	f7ff bb60 	b.w	800199a <HAL_PCD_IRQHandler+0x1d2>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022da:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 80022de:	4651      	mov	r1, sl
 80022e0:	f003 fb7a 	bl	80059d8 <USB_EP0_OutStart>
 80022e4:	e658      	b.n	8001f98 <HAL_PCD_IRQHandler+0x7d0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022e6:	f204 414c 	addw	r1, r4, #1100	@ 0x44c
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	f003 fa12 	bl	8005714 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022f0:	7923      	ldrb	r3, [r4, #4]
 80022f2:	f7ff bb59 	b.w	80019a8 <HAL_PCD_IRQHandler+0x1e0>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022f6:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 80022fa:	2101      	movs	r1, #1
 80022fc:	f003 fb6c 	bl	80059d8 <USB_EP0_OutStart>
 8002300:	e64a      	b.n	8001f98 <HAL_PCD_IRQHandler+0x7d0>
 8002302:	bf00      	nop
 8002304:	4f54300a 	.word	0x4f54300a

08002308 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002308:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 800230c:	2a01      	cmp	r2, #1
 800230e:	d00d      	beq.n	800232c <HAL_PCD_SetAddress+0x24>
 8002310:	2201      	movs	r2, #1
{
 8002312:	b510      	push	{r4, lr}
 8002314:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002316:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8002318:	7461      	strb	r1, [r4, #17]
  __HAL_LOCK(hpcd);
 800231a:	f884 2494 	strb.w	r2, [r4, #1172]	@ 0x494
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800231e:	f003 fae1 	bl	80058e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002322:	2300      	movs	r3, #0
  return HAL_OK;
 8002324:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8002326:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
}
 800232a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800232c:	2002      	movs	r0, #2
}
 800232e:	4770      	bx	lr

08002330 <HAL_PCD_EP_Open>:
{
 8002330:	b510      	push	{r4, lr}
 8002332:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8002336:	0609      	lsls	r1, r1, #24
{
 8002338:	4604      	mov	r4, r0
 800233a:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 800233e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002342:	d427      	bmi.n	8002394 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002344:	f50c 7115 	add.w	r1, ip, #596	@ 0x254
    ep->is_in = 0U;
 8002348:	f04f 0c00 	mov.w	ip, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800234c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800234e:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8002352:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002356:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800235a:	f3c2 020a 	ubfx	r2, r2, #0, #11
  ep->num = ep_addr & EP_ADDR_MSK;
 800235e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8002362:	710b      	strb	r3, [r1, #4]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002364:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8002366:	784a      	ldrb	r2, [r1, #1]
 8002368:	b10a      	cbz	r2, 800236e <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 800236a:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 800236e:	2b02      	cmp	r3, #2
 8002370:	d101      	bne.n	8002376 <HAL_PCD_EP_Open+0x46>
    ep->data_pid_start = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	714b      	strb	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8002376:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800237a:	2b01      	cmp	r3, #1
 800237c:	d016      	beq.n	80023ac <HAL_PCD_EP_Open+0x7c>
 800237e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002380:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002382:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002386:	f002 fffb 	bl	8005380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800238a:	2300      	movs	r3, #0
  return ret;
 800238c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800238e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
}
 8002392:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002394:	f10c 0114 	add.w	r1, ip, #20
    ep->is_in = 1U;
 8002398:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239c:	4401      	add	r1, r0
    ep->is_in = 1U;
 800239e:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 80023a2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80023a6:	f880 c015 	strb.w	ip, [r0, #21]
 80023aa:	e7d6      	b.n	800235a <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 80023ac:	2002      	movs	r0, #2
}
 80023ae:	bd10      	pop	{r4, pc}

080023b0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80023b0:	f001 030f 	and.w	r3, r1, #15
 80023b4:	0609      	lsls	r1, r1, #24
 80023b6:	461a      	mov	r2, r3
 80023b8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
{
 80023bc:	b510      	push	{r4, lr}
 80023be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80023c2:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80023c4:	d419      	bmi.n	80023fa <HAL_PCD_EP_Close+0x4a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c6:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
 80023ca:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80023ce:	2000      	movs	r0, #0
 80023d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d4:	4421      	add	r1, r4
    ep->is_in = 0U;
 80023d6:	f883 0255 	strb.w	r0, [r3, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80023da:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80023dc:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d01a      	beq.n	800241a <HAL_PCD_EP_Close+0x6a>
 80023e4:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023e6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80023e8:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023ec:	f003 f80e 	bl	800540c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023f0:	2300      	movs	r3, #0
  return HAL_OK;
 80023f2:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80023f4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
}
 80023f8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023fa:	f103 0114 	add.w	r1, r3, #20
    ep->is_in = 1U;
 80023fe:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 8002402:	f04f 0c01 	mov.w	ip, #1
 8002406:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800240a:	4421      	add	r1, r4
    ep->is_in = 1U;
 800240c:	f883 c015 	strb.w	ip, [r3, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002410:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002412:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002416:	2b01      	cmp	r3, #1
 8002418:	d1e4      	bne.n	80023e4 <HAL_PCD_EP_Close+0x34>
 800241a:	2002      	movs	r0, #2
}
 800241c:	bd10      	pop	{r4, pc}
 800241e:	bf00      	nop

08002420 <HAL_PCD_EP_Receive>:
{
 8002420:	b510      	push	{r4, lr}
 8002422:	f001 0e0f 	and.w	lr, r1, #15
 8002426:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002428:	2124      	movs	r1, #36	@ 0x24
  ep->xfer_buff = pBuf;
 800242a:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800242e:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 8002432:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002436:	f501 7115 	add.w	r1, r1, #596	@ 0x254
  ep->xfer_len = len;
 800243a:	f8cc 3264 	str.w	r3, [ip, #612]	@ 0x264
  ep->xfer_count = 0U;
 800243e:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002440:	f88c e254 	strb.w	lr, [ip, #596]	@ 0x254
  ep->xfer_buff = pBuf;
 8002444:	f8cc 2260 	str.w	r2, [ip, #608]	@ 0x260
  ep->xfer_count = 0U;
 8002448:	f8cc 3268 	str.w	r3, [ip, #616]	@ 0x268
  ep->is_in = 0U;
 800244c:	f88c 3255 	strb.w	r3, [ip, #597]	@ 0x255
  if (hpcd->Init.dma_enable == 1U)
 8002450:	7982      	ldrb	r2, [r0, #6]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002452:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002454:	2a01      	cmp	r2, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002456:	bf08      	it	eq
 8002458:	f8cc 4270 	streq.w	r4, [ip, #624]	@ 0x270
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800245c:	f003 f834 	bl	80054c8 <USB_EPStartXfer>
}
 8002460:	2000      	movs	r0, #0
 8002462:	bd10      	pop	{r4, pc}

08002464 <HAL_PCD_EP_Transmit>:
{
 8002464:	b510      	push	{r4, lr}
 8002466:	f001 0e0f 	and.w	lr, r1, #15
 800246a:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246c:	2124      	movs	r1, #36	@ 0x24
  ep->xfer_buff = pBuf;
 800246e:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002472:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 8002476:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247a:	3114      	adds	r1, #20
  ep->xfer_len = len;
 800247c:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
  ep->xfer_count = 0U;
 8002480:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002482:	f88c e014 	strb.w	lr, [ip, #20]
  ep->xfer_count = 0U;
 8002486:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  ep->is_in = 1U;
 800248a:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 800248c:	f8cc 2020 	str.w	r2, [ip, #32]
  ep->is_in = 1U;
 8002490:	f88c 3015 	strb.w	r3, [ip, #21]
  if (hpcd->Init.dma_enable == 1U)
 8002494:	7982      	ldrb	r2, [r0, #6]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002496:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002498:	429a      	cmp	r2, r3
    ep->dma_addr = (uint32_t)pBuf;
 800249a:	bf08      	it	eq
 800249c:	f8cc 4030 	streq.w	r4, [ip, #48]	@ 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024a0:	f003 f812 	bl	80054c8 <USB_EPStartXfer>
}
 80024a4:	2000      	movs	r0, #0
 80024a6:	bd10      	pop	{r4, pc}

080024a8 <HAL_PCD_EP_SetStall>:
{
 80024a8:	b538      	push	{r3, r4, r5, lr}
 80024aa:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024ae:	7903      	ldrb	r3, [r0, #4]
 80024b0:	42ab      	cmp	r3, r5
 80024b2:	d333      	bcc.n	800251c <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 80024b4:	060b      	lsls	r3, r1, #24
 80024b6:	4604      	mov	r4, r0
 80024b8:	d41d      	bmi.n	80024f6 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 80024ba:	2224      	movs	r2, #36	@ 0x24
    ep->is_in = 0U;
 80024bc:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 80024c0:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 80024c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80024c8:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80024ca:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 80024ce:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 80024d2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80024d6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80024d8:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 80024dc:	429a      	cmp	r2, r3
 80024de:	d01b      	beq.n	8002518 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024e0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80024e2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024e6:	f003 f999 	bl	800581c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024ea:	b1cd      	cbz	r5, 8002520 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 80024ec:	2300      	movs	r3, #0
  return HAL_OK;
 80024ee:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80024f0:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
}
 80024f4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f6:	2124      	movs	r1, #36	@ 0x24
    ep->is_in = 1U;
 80024f8:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80024fc:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024fe:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8002502:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002506:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8002508:	755a      	strb	r2, [r3, #21]
  ep->is_stall = 1U;
 800250a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800250c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800250e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002510:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 8002514:	429a      	cmp	r2, r3
 8002516:	d1e3      	bne.n	80024e0 <HAL_PCD_EP_SetStall+0x38>
 8002518:	2002      	movs	r0, #2
}
 800251a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800251c:	2001      	movs	r0, #1
}
 800251e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002520:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002524:	79a1      	ldrb	r1, [r4, #6]
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	f003 fa56 	bl	80059d8 <USB_EP0_OutStart>
 800252c:	e7de      	b.n	80024ec <HAL_PCD_EP_SetStall+0x44>
 800252e:	bf00      	nop

08002530 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002530:	f001 020f 	and.w	r2, r1, #15
{
 8002534:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002536:	7903      	ldrb	r3, [r0, #4]
 8002538:	4293      	cmp	r3, r2
 800253a:	d332      	bcc.n	80025a2 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800253c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002540:	0609      	lsls	r1, r1, #24
 8002542:	4604      	mov	r4, r0
 8002544:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002548:	d41a      	bmi.n	8002580 <HAL_PCD_EP_ClrStall+0x50>
    ep->is_in = 0U;
 800254a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800254e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
    ep->is_in = 0U;
 8002552:	2500      	movs	r5, #0
 8002554:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002558:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 800255a:	f880 5255 	strb.w	r5, [r0, #597]	@ 0x255
  ep->is_stall = 0U;
 800255e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002560:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002562:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002564:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002568:	2b01      	cmp	r3, #1
 800256a:	d018      	beq.n	800259e <HAL_PCD_EP_ClrStall+0x6e>
 800256c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800256e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002570:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002574:	f003 f98a 	bl	800588c <USB_EPClearStall>
  return HAL_OK;
 8002578:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800257a:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494
}
 800257e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8002580:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002584:	3314      	adds	r3, #20
    ep->is_in = 1U;
 8002586:	2501      	movs	r5, #1
 8002588:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258c:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800258e:	7545      	strb	r5, [r0, #21]
  ep->is_stall = 0U;
 8002590:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002592:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002594:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002596:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800259a:	2b01      	cmp	r3, #1
 800259c:	d1e6      	bne.n	800256c <HAL_PCD_EP_ClrStall+0x3c>
 800259e:	2002      	movs	r0, #2
}
 80025a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80025a2:	2001      	movs	r0, #1
}
 80025a4:	bd38      	pop	{r3, r4, r5, pc}
 80025a6:	bf00      	nop

080025a8 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025a8:	6800      	ldr	r0, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025aa:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (fifo == 0U)
 80025ae:	b919      	cbnz	r1, 80025b8 <HAL_PCDEx_SetTxFiFo+0x10>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025b0:	4313      	orrs	r3, r2
 80025b2:	6283      	str	r3, [r0, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80025b4:	2000      	movs	r0, #0
 80025b6:	4770      	bx	lr
{
 80025b8:	b430      	push	{r4, r5}
    for (i = 0U; i < (fifo - 1U); i++)
 80025ba:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025bc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80025be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80025c2:	d06b      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025c4:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
    for (i = 0U; i < (fifo - 1U); i++)
 80025c8:	2901      	cmp	r1, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025ca:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80025ce:	d065      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025d0:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    for (i = 0U; i < (fifo - 1U); i++)
 80025d4:	2902      	cmp	r1, #2
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80025da:	d05f      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025dc:	f8d0 410c 	ldr.w	r4, [r0, #268]	@ 0x10c
    for (i = 0U; i < (fifo - 1U); i++)
 80025e0:	2903      	cmp	r1, #3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025e2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80025e6:	d059      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025e8:	f8d0 4110 	ldr.w	r4, [r0, #272]	@ 0x110
    for (i = 0U; i < (fifo - 1U); i++)
 80025ec:	2904      	cmp	r1, #4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80025f2:	d053      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025f4:	f8d0 4114 	ldr.w	r4, [r0, #276]	@ 0x114
    for (i = 0U; i < (fifo - 1U); i++)
 80025f8:	2905      	cmp	r1, #5
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80025fe:	d04d      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002600:	f8d0 4118 	ldr.w	r4, [r0, #280]	@ 0x118
    for (i = 0U; i < (fifo - 1U); i++)
 8002604:	2906      	cmp	r1, #6
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002606:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800260a:	d047      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800260c:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
    for (i = 0U; i < (fifo - 1U); i++)
 8002610:	2907      	cmp	r1, #7
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002612:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002616:	d041      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002618:	f8d0 4120 	ldr.w	r4, [r0, #288]	@ 0x120
    for (i = 0U; i < (fifo - 1U); i++)
 800261c:	2908      	cmp	r1, #8
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800261e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002622:	d03b      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002624:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
    for (i = 0U; i < (fifo - 1U); i++)
 8002628:	2909      	cmp	r1, #9
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800262a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800262e:	d035      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002630:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
    for (i = 0U; i < (fifo - 1U); i++)
 8002634:	290a      	cmp	r1, #10
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002636:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800263a:	d02f      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800263c:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
    for (i = 0U; i < (fifo - 1U); i++)
 8002640:	290b      	cmp	r1, #11
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002642:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002646:	d029      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002648:	f8d0 4130 	ldr.w	r4, [r0, #304]	@ 0x130
    for (i = 0U; i < (fifo - 1U); i++)
 800264c:	290c      	cmp	r1, #12
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800264e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002652:	d023      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002654:	f8d0 4134 	ldr.w	r4, [r0, #308]	@ 0x134
    for (i = 0U; i < (fifo - 1U); i++)
 8002658:	290d      	cmp	r1, #13
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800265a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800265e:	d01d      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002660:	f8d0 4138 	ldr.w	r4, [r0, #312]	@ 0x138
    for (i = 0U; i < (fifo - 1U); i++)
 8002664:	290e      	cmp	r1, #14
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002666:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800266a:	d017      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800266c:	f8d0 413c 	ldr.w	r4, [r0, #316]	@ 0x13c
    for (i = 0U; i < (fifo - 1U); i++)
 8002670:	290f      	cmp	r1, #15
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002672:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002676:	d011      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002678:	f8d0 4140 	ldr.w	r4, [r0, #320]	@ 0x140
    for (i = 0U; i < (fifo - 1U); i++)
 800267c:	2910      	cmp	r1, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800267e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002682:	d00b      	beq.n	800269c <HAL_PCDEx_SetTxFiFo+0xf4>
 8002684:	2410      	movs	r4, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002686:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800268a:	3401      	adds	r4, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800268c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8002690:	428c      	cmp	r4, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002692:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8002696:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800269a:	d3f4      	bcc.n	8002686 <HAL_PCDEx_SetTxFiFo+0xde>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800269c:	3140      	adds	r1, #64	@ 0x40
 800269e:	431a      	orrs	r2, r3
 80026a0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
}
 80026a4:	2000      	movs	r0, #0
 80026a6:	bc30      	pop	{r4, r5}
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026a8:	605a      	str	r2, [r3, #4]
}
 80026aa:	4770      	bx	lr

080026ac <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026ac:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 80026ae:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6259      	str	r1, [r3, #36]	@ 0x24
}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop

080026b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026b8:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80026ba:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026be:	4909      	ldr	r1, [pc, #36]	@ (80026e4 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c0:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 80026c2:	4660      	mov	r0, ip
{
 80026c4:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 80026c6:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 80026c8:	f883 c4cc 	strb.w	ip, [r3, #1228]	@ 0x4cc
  hpcd->lpm_active = 1U;
 80026cc:	f8c3 44d8 	str.w	r4, [r3, #1240]	@ 0x4d8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026d0:	6993      	ldr	r3, [r2, #24]
}
 80026d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80026da:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026dc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80026de:	4319      	orrs	r1, r3
 80026e0:	6551      	str	r1, [r2, #84]	@ 0x54
}
 80026e2:	4770      	bx	lr
 80026e4:	10000003 	.word	0x10000003

080026e8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop

080026ec <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026ec:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026ee:	4c10      	ldr	r4, [pc, #64]	@ (8002730 <HAL_PWREx_ConfigSupply+0x44>)
 80026f0:	68e3      	ldr	r3, [r4, #12]
 80026f2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026f6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026f8:	d105      	bne.n	8002706 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	1a18      	subs	r0, r3, r0
 8002700:	bf18      	it	ne
 8002702:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002704:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002706:	f023 0307 	bic.w	r3, r3, #7
 800270a:	4303      	orrs	r3, r0
 800270c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800270e:	f7fe fc25 	bl	8000f5c <HAL_GetTick>
 8002712:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002714:	e005      	b.n	8002722 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002716:	f7fe fc21 	bl	8000f5c <HAL_GetTick>
 800271a:	1b40      	subs	r0, r0, r5
 800271c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002720:	d804      	bhi.n	800272c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002722:	6863      	ldr	r3, [r4, #4]
 8002724:	049b      	lsls	r3, r3, #18
 8002726:	d5f6      	bpl.n	8002716 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8002728:	2000      	movs	r0, #0
}
 800272a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800272c:	2001      	movs	r0, #1
}
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	58024800 	.word	0x58024800

08002734 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002734:	4a02      	ldr	r2, [pc, #8]	@ (8002740 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8002736:	68d3      	ldr	r3, [r2, #12]
 8002738:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800273c:	60d3      	str	r3, [r2, #12]
}
 800273e:	4770      	bx	lr
 8002740:	58024800 	.word	0x58024800

08002744 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002744:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002746:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002748:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800274a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800274c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800274e:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002752:	6b59      	ldr	r1, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002754:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002758:	d036      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800275a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800275e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002762:	f002 0203 	and.w	r2, r2, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002766:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800276a:	fb05 f101 	mul.w	r1, r5, r1
 800276e:	2a01      	cmp	r2, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002774:	ee06 1a90 	vmov	s13, r1
 8002778:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800277c:	d002      	beq.n	8002784 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800277e:	2a02      	cmp	r2, #2
 8002780:	d042      	beq.n	8002808 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8002782:	b31a      	cbz	r2, 80027cc <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002784:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8002818 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002788:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800279a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80027a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027a6:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80027b2:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027b4:	ee07 3a10 	vmov	s14, r3
 80027b8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80027bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027c0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80027c4:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80027c8:	bc30      	pop	{r4, r5}
 80027ca:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	0692      	lsls	r2, r2, #26
 80027d0:	d51d      	bpl.n	800280e <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027d2:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027d8:	4a10      	ldr	r2, [pc, #64]	@ (800281c <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027dc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027e4:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027e6:	ee06 3a10 	vmov	s12, r3
 80027ea:	ee05 2a90 	vmov	s11, r2
 80027ee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80027f2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80027f6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80027fa:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80027fe:	ee36 7a26 	vadd.f32	s14, s12, s13
 8002802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002806:	e7d0      	b.n	80027aa <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002808:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002820 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 800280c:	e7bc      	b.n	8002788 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800280e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002824 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8002812:	e7b9      	b.n	8002788 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002814:	58024400 	.word	0x58024400
 8002818:	4a742400 	.word	0x4a742400
 800281c:	03d09000 	.word	0x03d09000
 8002820:	4bbebc20 	.word	0x4bbebc20
 8002824:	4c742400 	.word	0x4c742400

08002828 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002828:	2800      	cmp	r0, #0
 800282a:	f000 82a1 	beq.w	8002d70 <HAL_RCC_OscConfig+0x548>
{
 800282e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002830:	6803      	ldr	r3, [r0, #0]
 8002832:	4604      	mov	r4, r0
 8002834:	07d9      	lsls	r1, r3, #31
 8002836:	d52e      	bpl.n	8002896 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002838:	499b      	ldr	r1, [pc, #620]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 800283a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800283c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002842:	2a10      	cmp	r2, #16
 8002844:	f000 80d6 	beq.w	80029f4 <HAL_RCC_OscConfig+0x1cc>
 8002848:	2a18      	cmp	r2, #24
 800284a:	f000 80ce 	beq.w	80029ea <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284e:	6863      	ldr	r3, [r4, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002854:	f000 80ee 	beq.w	8002a34 <HAL_RCC_OscConfig+0x20c>
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8144 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x2be>
 800285e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002862:	4b91      	ldr	r3, [pc, #580]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	f000 824e 	beq.w	8002d06 <HAL_RCC_OscConfig+0x4de>
 800286a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002876:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002878:	f7fe fb70 	bl	8000f5c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800287c:	4e8a      	ldr	r6, [pc, #552]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 800287e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002880:	e005      	b.n	800288e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002882:	f7fe fb6b 	bl	8000f5c <HAL_GetTick>
 8002886:	1b40      	subs	r0, r0, r5
 8002888:	2864      	cmp	r0, #100	@ 0x64
 800288a:	f200 812a 	bhi.w	8002ae2 <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800288e:	6833      	ldr	r3, [r6, #0]
 8002890:	039b      	lsls	r3, r3, #14
 8002892:	d5f6      	bpl.n	8002882 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	079d      	lsls	r5, r3, #30
 8002898:	d464      	bmi.n	8002964 <HAL_RCC_OscConfig+0x13c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800289a:	06d9      	lsls	r1, r3, #27
 800289c:	d528      	bpl.n	80028f0 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289e:	4982      	ldr	r1, [pc, #520]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028a0:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028a8:	2a08      	cmp	r2, #8
 80028aa:	f000 80b3 	beq.w	8002a14 <HAL_RCC_OscConfig+0x1ec>
 80028ae:	2a18      	cmp	r2, #24
 80028b0:	f000 80ab 	beq.w	8002a0a <HAL_RCC_OscConfig+0x1e2>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028b4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80028b6:	4d7c      	ldr	r5, [pc, #496]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 814c 	beq.w	8002b56 <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_CSI_ENABLE();
 80028be:	682b      	ldr	r3, [r5, #0]
 80028c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028c6:	f7fe fb49 	bl	8000f5c <HAL_GetTick>
 80028ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028cc:	e005      	b.n	80028da <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028ce:	f7fe fb45 	bl	8000f5c <HAL_GetTick>
 80028d2:	1b80      	subs	r0, r0, r6
 80028d4:	2802      	cmp	r0, #2
 80028d6:	f200 8104 	bhi.w	8002ae2 <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028da:	682b      	ldr	r3, [r5, #0]
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	d5f6      	bpl.n	80028ce <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028e0:	68eb      	ldr	r3, [r5, #12]
 80028e2:	6a22      	ldr	r2, [r4, #32]
 80028e4:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80028e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028ec:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	071d      	lsls	r5, r3, #28
 80028f2:	d516      	bpl.n	8002922 <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028f4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4d6c      	ldr	r5, [pc, #432]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 810a 	beq.w	8002b12 <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_LSI_ENABLE();
 80028fe:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002906:	f7fe fb29 	bl	8000f5c <HAL_GetTick>
 800290a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800290c:	e005      	b.n	800291a <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe fb25 	bl	8000f5c <HAL_GetTick>
 8002912:	1b80      	subs	r0, r0, r6
 8002914:	2802      	cmp	r0, #2
 8002916:	f200 80e4 	bhi.w	8002ae2 <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800291a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800291c:	0798      	lsls	r0, r3, #30
 800291e:	d5f6      	bpl.n	800290e <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	069a      	lsls	r2, r3, #26
 8002924:	d516      	bpl.n	8002954 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002926:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002928:	4d5f      	ldr	r5, [pc, #380]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8102 	beq.w	8002b34 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI48_ENABLE();
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002936:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002938:	f7fe fb10 	bl	8000f5c <HAL_GetTick>
 800293c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800293e:	e005      	b.n	800294c <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002940:	f7fe fb0c 	bl	8000f5c <HAL_GetTick>
 8002944:	1b80      	subs	r0, r0, r6
 8002946:	2802      	cmp	r0, #2
 8002948:	f200 80cb 	bhi.w	8002ae2 <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	049f      	lsls	r7, r3, #18
 8002950:	d5f6      	bpl.n	8002940 <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	0759      	lsls	r1, r3, #29
 8002956:	d473      	bmi.n	8002a40 <HAL_RCC_OscConfig+0x218>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002958:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 80a8 	bne.w	8002ab0 <HAL_RCC_OscConfig+0x288>
  return HAL_OK;
 8002960:	2000      	movs	r0, #0
}
 8002962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	4a50      	ldr	r2, [pc, #320]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002966:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002968:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800296a:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800296e:	d122      	bne.n	80029b6 <HAL_RCC_OscConfig+0x18e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002970:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002972:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	0759      	lsls	r1, r3, #29
 8002978:	d501      	bpl.n	800297e <HAL_RCC_OscConfig+0x156>
 800297a:	2a00      	cmp	r2, #0
 800297c:	d043      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1de>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800297e:	4d4a      	ldr	r5, [pc, #296]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002980:	682b      	ldr	r3, [r5, #0]
 8002982:	f023 0319 	bic.w	r3, r3, #25
 8002986:	4313      	orrs	r3, r2
 8002988:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800298a:	f7fe fae7 	bl	8000f5c <HAL_GetTick>
 800298e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002990:	e005      	b.n	800299e <HAL_RCC_OscConfig+0x176>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe fae3 	bl	8000f5c <HAL_GetTick>
 8002996:	1b80      	subs	r0, r0, r6
 8002998:	2802      	cmp	r0, #2
 800299a:	f200 80a2 	bhi.w	8002ae2 <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299e:	682b      	ldr	r3, [r5, #0]
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	d5f6      	bpl.n	8002992 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	686b      	ldr	r3, [r5, #4]
 80029a6:	6922      	ldr	r2, [r4, #16]
 80029a8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80029ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029b0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	e771      	b.n	800289a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029b6:	2b18      	cmp	r3, #24
 80029b8:	f000 80f0 	beq.w	8002b9c <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029bc:	4d3a      	ldr	r5, [pc, #232]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029be:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029c0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029c2:	2a00      	cmp	r2, #0
 80029c4:	f000 80d9 	beq.w	8002b7a <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029c8:	f023 0319 	bic.w	r3, r3, #25
 80029cc:	4313      	orrs	r3, r2
 80029ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029d0:	f7fe fac4 	bl	8000f5c <HAL_GetTick>
 80029d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d6:	e004      	b.n	80029e2 <HAL_RCC_OscConfig+0x1ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d8:	f7fe fac0 	bl	8000f5c <HAL_GetTick>
 80029dc:	1b80      	subs	r0, r0, r6
 80029de:	2802      	cmp	r0, #2
 80029e0:	d87f      	bhi.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e2:	682b      	ldr	r3, [r5, #0]
 80029e4:	075f      	lsls	r7, r3, #29
 80029e6:	d5f7      	bpl.n	80029d8 <HAL_RCC_OscConfig+0x1b0>
 80029e8:	e7dc      	b.n	80029a4 <HAL_RCC_OscConfig+0x17c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029ea:	f001 0103 	and.w	r1, r1, #3
 80029ee:	2902      	cmp	r1, #2
 80029f0:	f47f af2d 	bne.w	800284e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	0392      	lsls	r2, r2, #14
 80029fa:	f57f af4c 	bpl.w	8002896 <HAL_RCC_OscConfig+0x6e>
 80029fe:	6862      	ldr	r2, [r4, #4]
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	f47f af48 	bne.w	8002896 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 8002a06:	2001      	movs	r0, #1
}
 8002a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a0a:	f001 0103 	and.w	r1, r1, #3
 8002a0e:	2901      	cmp	r1, #1
 8002a10:	f47f af50 	bne.w	80028b4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a14:	4a24      	ldr	r2, [pc, #144]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	05d2      	lsls	r2, r2, #23
 8002a1a:	d502      	bpl.n	8002a22 <HAL_RCC_OscConfig+0x1fa>
 8002a1c:	69e2      	ldr	r2, [r4, #28]
 8002a1e:	2a80      	cmp	r2, #128	@ 0x80
 8002a20:	d1f1      	bne.n	8002a06 <HAL_RCC_OscConfig+0x1de>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a22:	4921      	ldr	r1, [pc, #132]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a24:	6a20      	ldr	r0, [r4, #32]
 8002a26:	68ca      	ldr	r2, [r1, #12]
 8002a28:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8002a2c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002a30:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a32:	e75d      	b.n	80028f0 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a34:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a36:	6813      	ldr	r3, [r2, #0]
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3e:	e71b      	b.n	8002878 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002a40:	4d1a      	ldr	r5, [pc, #104]	@ (8002aac <HAL_RCC_OscConfig+0x284>)
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a48:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002a4a:	f7fe fa87 	bl	8000f5c <HAL_GetTick>
 8002a4e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a50:	e004      	b.n	8002a5c <HAL_RCC_OscConfig+0x234>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe fa83 	bl	8000f5c <HAL_GetTick>
 8002a56:	1b80      	subs	r0, r0, r6
 8002a58:	2864      	cmp	r0, #100	@ 0x64
 8002a5a:	d842      	bhi.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	05da      	lsls	r2, r3, #23
 8002a60:	d5f7      	bpl.n	8002a52 <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a62:	68a3      	ldr	r3, [r4, #8]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f000 816f 	beq.w	8002d48 <HAL_RCC_OscConfig+0x520>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8153 	beq.w	8002d16 <HAL_RCC_OscConfig+0x4ee>
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a76:	f000 8173 	beq.w	8002d60 <HAL_RCC_OscConfig+0x538>
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a82:	f022 0204 	bic.w	r2, r2, #4
 8002a86:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002a88:	f7fe fa68 	bl	8000f5c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a8c:	4e06      	ldr	r6, [pc, #24]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002a92:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a94:	e004      	b.n	8002aa0 <HAL_RCC_OscConfig+0x278>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe fa61 	bl	8000f5c <HAL_GetTick>
 8002a9a:	1b40      	subs	r0, r0, r5
 8002a9c:	42b8      	cmp	r0, r7
 8002a9e:	d820      	bhi.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002aa2:	079b      	lsls	r3, r3, #30
 8002aa4:	d5f7      	bpl.n	8002a96 <HAL_RCC_OscConfig+0x26e>
 8002aa6:	e757      	b.n	8002958 <HAL_RCC_OscConfig+0x130>
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	58024800 	.word	0x58024800
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ab0:	4da8      	ldr	r5, [pc, #672]	@ (8002d54 <HAL_RCC_OscConfig+0x52c>)
 8002ab2:	692a      	ldr	r2, [r5, #16]
 8002ab4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002ab8:	2a18      	cmp	r2, #24
 8002aba:	f000 80d7 	beq.w	8002c6c <HAL_RCC_OscConfig+0x444>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002ac0:	682b      	ldr	r3, [r5, #0]
 8002ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac8:	d06c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x37c>
        tickstart = HAL_GetTick();
 8002aca:	f7fe fa47 	bl	8000f5c <HAL_GetTick>
 8002ace:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad0:	682b      	ldr	r3, [r5, #0]
 8002ad2:	019b      	lsls	r3, r3, #6
 8002ad4:	f57f af44 	bpl.w	8002960 <HAL_RCC_OscConfig+0x138>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fa40 	bl	8000f5c <HAL_GetTick>
 8002adc:	1b00      	subs	r0, r0, r4
 8002ade:	2802      	cmp	r0, #2
 8002ae0:	d9f6      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2a8>
            return HAL_TIMEOUT;
 8002ae2:	2003      	movs	r0, #3
}
 8002ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae6:	4d9b      	ldr	r5, [pc, #620]	@ (8002d54 <HAL_RCC_OscConfig+0x52c>)
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aee:	602b      	str	r3, [r5, #0]
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002af8:	f7fe fa30 	bl	8000f5c <HAL_GetTick>
 8002afc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002afe:	e004      	b.n	8002b0a <HAL_RCC_OscConfig+0x2e2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7fe fa2c 	bl	8000f5c <HAL_GetTick>
 8002b04:	1b80      	subs	r0, r0, r6
 8002b06:	2864      	cmp	r0, #100	@ 0x64
 8002b08:	d8eb      	bhi.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	039f      	lsls	r7, r3, #14
 8002b0e:	d4f7      	bmi.n	8002b00 <HAL_RCC_OscConfig+0x2d8>
 8002b10:	e6c0      	b.n	8002894 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002b12:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fa1f 	bl	8000f5c <HAL_GetTick>
 8002b1e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b20:	e004      	b.n	8002b2c <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe fa1b 	bl	8000f5c <HAL_GetTick>
 8002b26:	1b80      	subs	r0, r0, r6
 8002b28:	2802      	cmp	r0, #2
 8002b2a:	d8da      	bhi.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b2c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002b2e:	0799      	lsls	r1, r3, #30
 8002b30:	d4f7      	bmi.n	8002b22 <HAL_RCC_OscConfig+0x2fa>
 8002b32:	e6f5      	b.n	8002920 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b3a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fa0e 	bl	8000f5c <HAL_GetTick>
 8002b40:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b42:	e004      	b.n	8002b4e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b44:	f7fe fa0a 	bl	8000f5c <HAL_GetTick>
 8002b48:	1b80      	subs	r0, r0, r6
 8002b4a:	2802      	cmp	r0, #2
 8002b4c:	d8c9      	bhi.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b4e:	682b      	ldr	r3, [r5, #0]
 8002b50:	0498      	lsls	r0, r3, #18
 8002b52:	d4f7      	bmi.n	8002b44 <HAL_RCC_OscConfig+0x31c>
 8002b54:	e6fd      	b.n	8002952 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8002b56:	682b      	ldr	r3, [r5, #0]
 8002b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b5e:	f7fe f9fd 	bl	8000f5c <HAL_GetTick>
 8002b62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b64:	e004      	b.n	8002b70 <HAL_RCC_OscConfig+0x348>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b66:	f7fe f9f9 	bl	8000f5c <HAL_GetTick>
 8002b6a:	1b80      	subs	r0, r0, r6
 8002b6c:	2802      	cmp	r0, #2
 8002b6e:	d8b8      	bhi.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	05df      	lsls	r7, r3, #23
 8002b74:	d4f7      	bmi.n	8002b66 <HAL_RCC_OscConfig+0x33e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	e6ba      	b.n	80028f0 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b80:	f7fe f9ec 	bl	8000f5c <HAL_GetTick>
 8002b84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b86:	e004      	b.n	8002b92 <HAL_RCC_OscConfig+0x36a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe f9e8 	bl	8000f5c <HAL_GetTick>
 8002b8c:	1b80      	subs	r0, r0, r6
 8002b8e:	2802      	cmp	r0, #2
 8002b90:	d8a7      	bhi.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b92:	682b      	ldr	r3, [r5, #0]
 8002b94:	0758      	lsls	r0, r3, #29
 8002b96:	d4f7      	bmi.n	8002b88 <HAL_RCC_OscConfig+0x360>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	e67e      	b.n	800289a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b9c:	0790      	lsls	r0, r2, #30
 8002b9e:	f47f af0d 	bne.w	80029bc <HAL_RCC_OscConfig+0x194>
 8002ba2:	e6e5      	b.n	8002970 <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8002ba4:	f7fe f9da 	bl	8000f5c <HAL_GetTick>
 8002ba8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002baa:	e004      	b.n	8002bb6 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe f9d6 	bl	8000f5c <HAL_GetTick>
 8002bb0:	1b80      	subs	r0, r0, r6
 8002bb2:	2802      	cmp	r0, #2
 8002bb4:	d895      	bhi.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb6:	682b      	ldr	r3, [r5, #0]
 8002bb8:	0199      	lsls	r1, r3, #6
 8002bba:	d4f7      	bmi.n	8002bac <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbc:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002bbe:	4b66      	ldr	r3, [pc, #408]	@ (8002d58 <HAL_RCC_OscConfig+0x530>)
 8002bc0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002bc2:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bc4:	4965      	ldr	r1, [pc, #404]	@ (8002d5c <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bc6:	4e63      	ldr	r6, [pc, #396]	@ (8002d54 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002bcc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002bd0:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002bd2:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	025b      	lsls	r3, r3, #9
 8002bdc:	0412      	lsls	r2, r2, #16
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002be4:	4313      	orrs	r3, r2
 8002be6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002be8:	3a01      	subs	r2, #1
 8002bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002bf2:	3a01      	subs	r2, #1
 8002bf4:	0612      	lsls	r2, r2, #24
 8002bf6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bfe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c06:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002c08:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002c0a:	4011      	ands	r1, r2
 8002c0c:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002c10:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c12:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c14:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002c16:	f023 030c 	bic.w	r3, r3, #12
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c1e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c20:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c22:	f023 0302 	bic.w	r3, r3, #2
 8002c26:	4313      	orrs	r3, r2
 8002c28:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c2a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c30:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c38:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c40:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c42:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002c4a:	682b      	ldr	r3, [r5, #0]
 8002c4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c52:	f7fe f983 	bl	8000f5c <HAL_GetTick>
 8002c56:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c58:	6833      	ldr	r3, [r6, #0]
 8002c5a:	019a      	lsls	r2, r3, #6
 8002c5c:	f53f ae80 	bmi.w	8002960 <HAL_RCC_OscConfig+0x138>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe f97c 	bl	8000f5c <HAL_GetTick>
 8002c64:	1b00      	subs	r0, r0, r4
 8002c66:	2802      	cmp	r0, #2
 8002c68:	d9f6      	bls.n	8002c58 <HAL_RCC_OscConfig+0x430>
 8002c6a:	e73a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6c:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c6e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c70:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	f43f aec8 	beq.w	8002a06 <HAL_RCC_OscConfig+0x1de>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002c7c:	428b      	cmp	r3, r1
 8002c7e:	f47f aec2 	bne.w	8002a06 <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c82:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f47f aebc 	bne.w	8002a06 <HAL_RCC_OscConfig+0x1de>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002c90:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002c94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	f47f aeb5 	bne.w	8002a06 <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c9e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8002ca2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f47f aeae 	bne.w	8002a06 <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002caa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002cac:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8002cb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	f47f aea7 	bne.w	8002a06 <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cb8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002cba:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8002cbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cc0:	4298      	cmp	r0, r3
 8002cc2:	f47f aea0 	bne.w	8002a06 <HAL_RCC_OscConfig+0x1de>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cc6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002cc8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cca:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	f43f ae46 	beq.w	8002960 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLLFRACN_DISABLE();
 8002cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d54 <HAL_RCC_OscConfig+0x52c>)
 8002cd6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8002cde:	f7fe f93d 	bl	8000f5c <HAL_GetTick>
 8002ce2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ce4:	f7fe f93a 	bl	8000f5c <HAL_GetTick>
 8002ce8:	42a8      	cmp	r0, r5
 8002cea:	d0fb      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4bc>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cec:	4a19      	ldr	r2, [pc, #100]	@ (8002d54 <HAL_RCC_OscConfig+0x52c>)
 8002cee:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCC_OscConfig+0x534>)
 8002cf0:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8002cf2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002cf4:	4003      	ands	r3, r0
 8002cf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cfa:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8002cfc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002d04:	e62c      	b.n	8002960 <HAL_RCC_OscConfig+0x138>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d06:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d12:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d14:	e5b0      	b.n	8002878 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d16:	4d0f      	ldr	r5, [pc, #60]	@ (8002d54 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	672b      	str	r3, [r5, #112]	@ 0x70
 8002d24:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002d26:	f023 0304 	bic.w	r3, r3, #4
 8002d2a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002d2c:	f7fe f916 	bl	8000f5c <HAL_GetTick>
 8002d30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d32:	e005      	b.n	8002d40 <HAL_RCC_OscConfig+0x518>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe f912 	bl	8000f5c <HAL_GetTick>
 8002d38:	1b80      	subs	r0, r0, r6
 8002d3a:	42b8      	cmp	r0, r7
 8002d3c:	f63f aed1 	bhi.w	8002ae2 <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d40:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002d42:	0798      	lsls	r0, r3, #30
 8002d44:	d4f6      	bmi.n	8002d34 <HAL_RCC_OscConfig+0x50c>
 8002d46:	e607      	b.n	8002958 <HAL_RCC_OscConfig+0x130>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d48:	4a02      	ldr	r2, [pc, #8]	@ (8002d54 <HAL_RCC_OscConfig+0x52c>)
 8002d4a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d52:	e699      	b.n	8002a88 <HAL_RCC_OscConfig+0x260>
 8002d54:	58024400 	.word	0x58024400
 8002d58:	fffffc0c 	.word	0xfffffc0c
 8002d5c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d60:	f042 0204 	orr.w	r2, r2, #4
 8002d64:	671a      	str	r2, [r3, #112]	@ 0x70
 8002d66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d6e:	e68b      	b.n	8002a88 <HAL_RCC_OscConfig+0x260>
    return HAL_ERROR;
 8002d70:	2001      	movs	r0, #1
}
 8002d72:	4770      	bx	lr

08002d74 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d74:	4a3f      	ldr	r2, [pc, #252]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d76:	6913      	ldr	r3, [r2, #16]
 8002d78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d004      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x16>
 8002d80:	2b18      	cmp	r3, #24
 8002d82:	d00d      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x2c>
 8002d84:	b11b      	cbz	r3, 8002d8e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8002d86:	483c      	ldr	r0, [pc, #240]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d88:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8a:	483c      	ldr	r0, [pc, #240]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	0699      	lsls	r1, r3, #26
 8002d92:	d548      	bpl.n	8002e26 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d94:	6813      	ldr	r3, [r2, #0]
 8002d96:	483a      	ldr	r0, [pc, #232]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d98:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002d9c:	40d8      	lsrs	r0, r3
 8002d9e:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002da0:	6a93      	ldr	r3, [r2, #40]	@ 0x28
{
 8002da2:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002da4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002da6:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8002da8:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dac:	6b51      	ldr	r1, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dae:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002db2:	d036      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002db4:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002db8:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dbc:	f003 0303 	and.w	r3, r3, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc0:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dc4:	fb05 f101 	mul.w	r1, r5, r1
 8002dc8:	2b01      	cmp	r3, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dce:	ee06 1a90 	vmov	s13, r1
 8002dd2:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8002dd6:	d002      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x6a>
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d026      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0xb6>
 8002ddc:	b343      	cbz	r3, 8002e30 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dde:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002e84 <HAL_RCC_GetSysClockFreq+0x110>
 8002de2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002de6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dec:	ee07 3a10 	vmov	s14, r3
 8002df0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002df4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002df8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002dfc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002e00:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002e0c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e1e:	ee17 0a90 	vmov	r0, s15
}
 8002e22:	bc30      	pop	{r4, r5}
 8002e24:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e26:	4816      	ldr	r0, [pc, #88]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8002e28:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e2a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002e88 <HAL_RCC_GetSysClockFreq+0x114>
 8002e2e:	e7d8      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e30:	6813      	ldr	r3, [r2, #0]
 8002e32:	069b      	lsls	r3, r3, #26
 8002e34:	d51a      	bpl.n	8002e6c <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e36:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e3c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e3e:	4910      	ldr	r1, [pc, #64]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e40:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e48:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e4a:	ee06 3a10 	vmov	s12, r3
 8002e4e:	ee05 1a90 	vmov	s11, r1
 8002e52:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002e56:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002e5a:	ee36 6a07 	vadd.f32	s12, s12, s14
 8002e5e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8002e62:	ee76 7a26 	vadd.f32	s15, s12, s13
 8002e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e6a:	e7cb      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e6c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002e8c <HAL_RCC_GetSysClockFreq+0x118>
 8002e70:	e7b7      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x6e>
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400
 8002e78:	003d0900 	.word	0x003d0900
 8002e7c:	017d7840 	.word	0x017d7840
 8002e80:	03d09000 	.word	0x03d09000
 8002e84:	4a742400 	.word	0x4a742400
 8002e88:	4bbebc20 	.word	0x4bbebc20
 8002e8c:	4c742400 	.word	0x4c742400

08002e90 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002e90:	2800      	cmp	r0, #0
 8002e92:	f000 810e 	beq.w	80030b2 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e96:	4a8d      	ldr	r2, [pc, #564]	@ (80030cc <HAL_RCC_ClockConfig+0x23c>)
 8002e98:	6813      	ldr	r3, [r2, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	428b      	cmp	r3, r1
{
 8002ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	d20c      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	6813      	ldr	r3, [r2, #0]
 8002eac:	f023 030f 	bic.w	r3, r3, #15
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	428b      	cmp	r3, r1
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002ebe:	2001      	movs	r0, #1
}
 8002ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	0758      	lsls	r0, r3, #29
 8002ec8:	d50b      	bpl.n	8002ee2 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eca:	4981      	ldr	r1, [pc, #516]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	6920      	ldr	r0, [r4, #16]
 8002ece:	698a      	ldr	r2, [r1, #24]
 8002ed0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002ed4:	4290      	cmp	r0, r2
 8002ed6:	d904      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ed8:	698a      	ldr	r2, [r1, #24]
 8002eda:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ede:	4302      	orrs	r2, r0
 8002ee0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee2:	0719      	lsls	r1, r3, #28
 8002ee4:	d50b      	bpl.n	8002efe <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ee6:	497a      	ldr	r1, [pc, #488]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002ee8:	6960      	ldr	r0, [r4, #20]
 8002eea:	69ca      	ldr	r2, [r1, #28]
 8002eec:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002ef0:	4290      	cmp	r0, r2
 8002ef2:	d904      	bls.n	8002efe <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ef4:	69ca      	ldr	r2, [r1, #28]
 8002ef6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002efa:	4302      	orrs	r2, r0
 8002efc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	06da      	lsls	r2, r3, #27
 8002f00:	d50b      	bpl.n	8002f1a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f02:	4973      	ldr	r1, [pc, #460]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002f04:	69a0      	ldr	r0, [r4, #24]
 8002f06:	69ca      	ldr	r2, [r1, #28]
 8002f08:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002f0c:	4290      	cmp	r0, r2
 8002f0e:	d904      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f10:	69ca      	ldr	r2, [r1, #28]
 8002f12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f16:	4302      	orrs	r2, r0
 8002f18:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f1a:	069f      	lsls	r7, r3, #26
 8002f1c:	d50b      	bpl.n	8002f36 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f1e:	496c      	ldr	r1, [pc, #432]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002f20:	69e0      	ldr	r0, [r4, #28]
 8002f22:	6a0a      	ldr	r2, [r1, #32]
 8002f24:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002f28:	4290      	cmp	r0, r2
 8002f2a:	d904      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f2c:	6a0a      	ldr	r2, [r1, #32]
 8002f2e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f32:	4302      	orrs	r2, r0
 8002f34:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f36:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f38:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	f140 80ab 	bpl.w	8003096 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f40:	4e63      	ldr	r6, [pc, #396]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002f42:	68e0      	ldr	r0, [r4, #12]
 8002f44:	69b1      	ldr	r1, [r6, #24]
 8002f46:	f001 010f 	and.w	r1, r1, #15
 8002f4a:	4288      	cmp	r0, r1
 8002f4c:	d904      	bls.n	8002f58 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4e:	69b1      	ldr	r1, [r6, #24]
 8002f50:	f021 010f 	bic.w	r1, r1, #15
 8002f54:	4301      	orrs	r1, r0
 8002f56:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d030      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f5c:	4a5c      	ldr	r2, [pc, #368]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002f5e:	68a1      	ldr	r1, [r4, #8]
 8002f60:	6993      	ldr	r3, [r2, #24]
 8002f62:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f66:	430b      	orrs	r3, r1
 8002f68:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f6c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	2902      	cmp	r1, #2
 8002f70:	f000 80a1 	beq.w	80030b6 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f74:	2903      	cmp	r1, #3
 8002f76:	f000 8098 	beq.w	80030aa <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f7a:	2901      	cmp	r1, #1
 8002f7c:	f000 80a1 	beq.w	80030c2 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f80:	075f      	lsls	r7, r3, #29
 8002f82:	d59c      	bpl.n	8002ebe <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f84:	4e52      	ldr	r6, [pc, #328]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f86:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	6933      	ldr	r3, [r6, #16]
 8002f8c:	f023 0307 	bic.w	r3, r3, #7
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8002f94:	f7fd ffe2 	bl	8000f5c <HAL_GetTick>
 8002f98:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	e005      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9c:	f7fd ffde 	bl	8000f5c <HAL_GetTick>
 8002fa0:	1bc0      	subs	r0, r0, r7
 8002fa2:	4540      	cmp	r0, r8
 8002fa4:	f200 808b 	bhi.w	80030be <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa8:	6933      	ldr	r3, [r6, #16]
 8002faa:	6862      	ldr	r2, [r4, #4]
 8002fac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fb0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002fb4:	d1f2      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	079e      	lsls	r6, r3, #30
 8002fba:	d506      	bpl.n	8002fca <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fbc:	68e0      	ldr	r0, [r4, #12]
 8002fbe:	4944      	ldr	r1, [pc, #272]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002fc0:	698a      	ldr	r2, [r1, #24]
 8002fc2:	f002 020f 	and.w	r2, r2, #15
 8002fc6:	4282      	cmp	r2, r0
 8002fc8:	d869      	bhi.n	800309e <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fca:	4940      	ldr	r1, [pc, #256]	@ (80030cc <HAL_RCC_ClockConfig+0x23c>)
 8002fcc:	680a      	ldr	r2, [r1, #0]
 8002fce:	f002 020f 	and.w	r2, r2, #15
 8002fd2:	42aa      	cmp	r2, r5
 8002fd4:	d90a      	bls.n	8002fec <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	680a      	ldr	r2, [r1, #0]
 8002fd8:	f022 020f 	bic.w	r2, r2, #15
 8002fdc:	432a      	orrs	r2, r5
 8002fde:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe0:	680a      	ldr	r2, [r1, #0]
 8002fe2:	f002 020f 	and.w	r2, r2, #15
 8002fe6:	42aa      	cmp	r2, r5
 8002fe8:	f47f af69 	bne.w	8002ebe <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fec:	0758      	lsls	r0, r3, #29
 8002fee:	d50b      	bpl.n	8003008 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ff0:	4937      	ldr	r1, [pc, #220]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002ff2:	6920      	ldr	r0, [r4, #16]
 8002ff4:	698a      	ldr	r2, [r1, #24]
 8002ff6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002ffa:	4290      	cmp	r0, r2
 8002ffc:	d204      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ffe:	698a      	ldr	r2, [r1, #24]
 8003000:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003004:	4302      	orrs	r2, r0
 8003006:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	0719      	lsls	r1, r3, #28
 800300a:	d50b      	bpl.n	8003024 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800300c:	4930      	ldr	r1, [pc, #192]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 800300e:	6960      	ldr	r0, [r4, #20]
 8003010:	69ca      	ldr	r2, [r1, #28]
 8003012:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003016:	4290      	cmp	r0, r2
 8003018:	d204      	bcs.n	8003024 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800301a:	69ca      	ldr	r2, [r1, #28]
 800301c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003020:	4302      	orrs	r2, r0
 8003022:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	06da      	lsls	r2, r3, #27
 8003026:	d50b      	bpl.n	8003040 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003028:	4929      	ldr	r1, [pc, #164]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 800302a:	69a0      	ldr	r0, [r4, #24]
 800302c:	69ca      	ldr	r2, [r1, #28]
 800302e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003032:	4290      	cmp	r0, r2
 8003034:	d204      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003036:	69ca      	ldr	r2, [r1, #28]
 8003038:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800303c:	4302      	orrs	r2, r0
 800303e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003040:	069b      	lsls	r3, r3, #26
 8003042:	d50b      	bpl.n	800305c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003044:	4a22      	ldr	r2, [pc, #136]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8003046:	69e1      	ldr	r1, [r4, #28]
 8003048:	6a13      	ldr	r3, [r2, #32]
 800304a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800304e:	4299      	cmp	r1, r3
 8003050:	d204      	bcs.n	800305c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003052:	6a13      	ldr	r3, [r2, #32]
 8003054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003058:	430b      	orrs	r3, r1
 800305a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800305c:	f7ff fe8a 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8003060:	4a1b      	ldr	r2, [pc, #108]	@ (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8003062:	4603      	mov	r3, r0
 8003064:	481b      	ldr	r0, [pc, #108]	@ (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8003066:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003068:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800306a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800306e:	4d1a      	ldr	r5, [pc, #104]	@ (80030d8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003070:	f002 020f 	and.w	r2, r2, #15
 8003074:	4c19      	ldr	r4, [pc, #100]	@ (80030dc <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003076:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003078:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800307a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800307e:	4818      	ldr	r0, [pc, #96]	@ (80030e0 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003080:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003084:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8003086:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8003088:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800308a:	40d3      	lsrs	r3, r2
 800308c:	6023      	str	r3, [r4, #0]
}
 800308e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8003092:	f7fd bf01 	b.w	8000e98 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003096:	2a00      	cmp	r2, #0
 8003098:	f47f af60 	bne.w	8002f5c <HAL_RCC_ClockConfig+0xcc>
 800309c:	e795      	b.n	8002fca <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309e:	698a      	ldr	r2, [r1, #24]
 80030a0:	f022 020f 	bic.w	r2, r2, #15
 80030a4:	4302      	orrs	r2, r0
 80030a6:	618a      	str	r2, [r1, #24]
 80030a8:	e78f      	b.n	8002fca <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030aa:	019a      	lsls	r2, r3, #6
 80030ac:	f53f af6a 	bmi.w	8002f84 <HAL_RCC_ClockConfig+0xf4>
 80030b0:	e705      	b.n	8002ebe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80030b2:	2001      	movs	r0, #1
}
 80030b4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030b6:	0398      	lsls	r0, r3, #14
 80030b8:	f53f af64 	bmi.w	8002f84 <HAL_RCC_ClockConfig+0xf4>
 80030bc:	e6ff      	b.n	8002ebe <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80030be:	2003      	movs	r0, #3
 80030c0:	e6fe      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030c2:	05db      	lsls	r3, r3, #23
 80030c4:	f53f af5e 	bmi.w	8002f84 <HAL_RCC_ClockConfig+0xf4>
 80030c8:	e6f9      	b.n	8002ebe <HAL_RCC_ClockConfig+0x2e>
 80030ca:	bf00      	nop
 80030cc:	52002000 	.word	0x52002000
 80030d0:	58024400 	.word	0x58024400
 80030d4:	0800763c 	.word	0x0800763c
 80030d8:	24000004 	.word	0x24000004
 80030dc:	24000000 	.word	0x24000000
 80030e0:	2400000c 	.word	0x2400000c

080030e4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e4:	4a18      	ldr	r2, [pc, #96]	@ (8003148 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e8:	6913      	ldr	r3, [r2, #16]
 80030ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d019      	beq.n	8003126 <HAL_RCC_GetHCLKFreq+0x42>
 80030f2:	2b18      	cmp	r3, #24
 80030f4:	d022      	beq.n	800313c <HAL_RCC_GetHCLKFreq+0x58>
 80030f6:	b1c3      	cbz	r3, 800312a <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 80030f8:	4b14      	ldr	r3, [pc, #80]	@ (800314c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030fa:	4913      	ldr	r1, [pc, #76]	@ (8003148 <HAL_RCC_GetHCLKFreq+0x64>)
 80030fc:	4814      	ldr	r0, [pc, #80]	@ (8003150 <HAL_RCC_GetHCLKFreq+0x6c>)
 80030fe:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003100:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003102:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003106:	4c13      	ldr	r4, [pc, #76]	@ (8003154 <HAL_RCC_GetHCLKFreq+0x70>)
 8003108:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800310c:	4d12      	ldr	r5, [pc, #72]	@ (8003158 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800310e:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003110:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003112:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003116:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800311a:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800311c:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8003120:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003122:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003124:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003126:	4b0d      	ldr	r3, [pc, #52]	@ (800315c <HAL_RCC_GetHCLKFreq+0x78>)
 8003128:	e7e7      	b.n	80030fa <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	069b      	lsls	r3, r3, #26
 800312e:	d509      	bpl.n	8003144 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003134:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003138:	40d3      	lsrs	r3, r2
 800313a:	e7de      	b.n	80030fa <HAL_RCC_GetHCLKFreq+0x16>
 800313c:	f7ff fb02 	bl	8002744 <HAL_RCC_GetSysClockFreq.part.0>
 8003140:	4603      	mov	r3, r0
 8003142:	e7da      	b.n	80030fa <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003144:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003146:	e7d8      	b.n	80030fa <HAL_RCC_GetHCLKFreq+0x16>
 8003148:	58024400 	.word	0x58024400
 800314c:	003d0900 	.word	0x003d0900
 8003150:	0800763c 	.word	0x0800763c
 8003154:	24000000 	.word	0x24000000
 8003158:	24000004 	.word	0x24000004
 800315c:	017d7840 	.word	0x017d7840
 8003160:	03d09000 	.word	0x03d09000

08003164 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003164:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003166:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003168:	6913      	ldr	r3, [r2, #16]
 800316a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800316e:	2b10      	cmp	r3, #16
 8003170:	d020      	beq.n	80031b4 <HAL_RCC_GetPCLK1Freq+0x50>
 8003172:	2b18      	cmp	r3, #24
 8003174:	d029      	beq.n	80031ca <HAL_RCC_GetPCLK1Freq+0x66>
 8003176:	b1fb      	cbz	r3, 80031b8 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8003178:	4b18      	ldr	r3, [pc, #96]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800317a:	4a17      	ldr	r2, [pc, #92]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x74>)
 800317c:	4918      	ldr	r1, [pc, #96]	@ (80031e0 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800317e:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8003180:	4d18      	ldr	r5, [pc, #96]	@ (80031e4 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003182:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003186:	4c18      	ldr	r4, [pc, #96]	@ (80031e8 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003188:	5c08      	ldrb	r0, [r1, r0]
 800318a:	f000 001f 	and.w	r0, r0, #31
 800318e:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003190:	6990      	ldr	r0, [r2, #24]
 8003192:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8003196:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003198:	5c08      	ldrb	r0, [r1, r0]
 800319a:	f000 001f 	and.w	r0, r0, #31
 800319e:	40c3      	lsrs	r3, r0
 80031a0:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031a2:	69d2      	ldr	r2, [r2, #28]
 80031a4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80031a8:	5c88      	ldrb	r0, [r1, r2]
 80031aa:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031ae:	fa23 f000 	lsr.w	r0, r3, r0
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b4:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <HAL_RCC_GetPCLK1Freq+0x88>)
 80031b6:	e7e0      	b.n	800317a <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	069b      	lsls	r3, r3, #26
 80031bc:	d509      	bpl.n	80031d2 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80031c2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80031c6:	40d3      	lsrs	r3, r2
 80031c8:	e7d7      	b.n	800317a <HAL_RCC_GetPCLK1Freq+0x16>
 80031ca:	f7ff fabb 	bl	8002744 <HAL_RCC_GetSysClockFreq.part.0>
 80031ce:	4603      	mov	r3, r0
 80031d0:	e7d3      	b.n	800317a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031d2:	4b07      	ldr	r3, [pc, #28]	@ (80031f0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80031d4:	e7d1      	b.n	800317a <HAL_RCC_GetPCLK1Freq+0x16>
 80031d6:	bf00      	nop
 80031d8:	58024400 	.word	0x58024400
 80031dc:	003d0900 	.word	0x003d0900
 80031e0:	0800763c 	.word	0x0800763c
 80031e4:	24000004 	.word	0x24000004
 80031e8:	24000000 	.word	0x24000000
 80031ec:	017d7840 	.word	0x017d7840
 80031f0:	03d09000 	.word	0x03d09000

080031f4 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f8:	6913      	ldr	r3, [r2, #16]
 80031fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d020      	beq.n	8003244 <HAL_RCC_GetPCLK2Freq+0x50>
 8003202:	2b18      	cmp	r3, #24
 8003204:	d029      	beq.n	800325a <HAL_RCC_GetPCLK2Freq+0x66>
 8003206:	b1fb      	cbz	r3, 8003248 <HAL_RCC_GetPCLK2Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8003208:	4b18      	ldr	r3, [pc, #96]	@ (800326c <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800320a:	4a17      	ldr	r2, [pc, #92]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x74>)
 800320c:	4918      	ldr	r1, [pc, #96]	@ (8003270 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800320e:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8003210:	4d18      	ldr	r5, [pc, #96]	@ (8003274 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003212:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003216:	4c18      	ldr	r4, [pc, #96]	@ (8003278 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003218:	5c08      	ldrb	r0, [r1, r0]
 800321a:	f000 001f 	and.w	r0, r0, #31
 800321e:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003220:	6990      	ldr	r0, [r2, #24]
 8003222:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8003226:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003228:	5c08      	ldrb	r0, [r1, r0]
 800322a:	f000 001f 	and.w	r0, r0, #31
 800322e:	40c3      	lsrs	r3, r0
 8003230:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003232:	69d2      	ldr	r2, [r2, #28]
 8003234:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8003238:	5c88      	ldrb	r0, [r1, r2]
 800323a:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800323e:	fa23 f000 	lsr.w	r0, r3, r0
 8003242:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003244:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <HAL_RCC_GetPCLK2Freq+0x88>)
 8003246:	e7e0      	b.n	800320a <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003248:	6813      	ldr	r3, [r2, #0]
 800324a:	069b      	lsls	r3, r3, #26
 800324c:	d509      	bpl.n	8003262 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8003252:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003256:	40d3      	lsrs	r3, r2
 8003258:	e7d7      	b.n	800320a <HAL_RCC_GetPCLK2Freq+0x16>
 800325a:	f7ff fa73 	bl	8002744 <HAL_RCC_GetSysClockFreq.part.0>
 800325e:	4603      	mov	r3, r0
 8003260:	e7d3      	b.n	800320a <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003262:	4b07      	ldr	r3, [pc, #28]	@ (8003280 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8003264:	e7d1      	b.n	800320a <HAL_RCC_GetPCLK2Freq+0x16>
 8003266:	bf00      	nop
 8003268:	58024400 	.word	0x58024400
 800326c:	003d0900 	.word	0x003d0900
 8003270:	0800763c 	.word	0x0800763c
 8003274:	24000004 	.word	0x24000004
 8003278:	24000000 	.word	0x24000000
 800327c:	017d7840 	.word	0x017d7840
 8003280:	03d09000 	.word	0x03d09000

08003284 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003286:	4c36      	ldr	r4, [pc, #216]	@ (8003360 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8003288:	4606      	mov	r6, r0
 800328a:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003292:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003294:	f7fd fe62 	bl	8000f5c <HAL_GetTick>
 8003298:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800329a:	e004      	b.n	80032a6 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800329c:	f7fd fe5e 	bl	8000f5c <HAL_GetTick>
 80032a0:	1b40      	subs	r0, r0, r5
 80032a2:	2802      	cmp	r0, #2
 80032a4:	d856      	bhi.n	8003354 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	011a      	lsls	r2, r3, #4
 80032aa:	d4f7      	bmi.n	800329c <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80032ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80032ae:	6832      	ldr	r2, [r6, #0]
 80032b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80032b4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80032b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032ba:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80032be:	3b01      	subs	r3, #1
 80032c0:	3a01      	subs	r2, #1
 80032c2:	025b      	lsls	r3, r3, #9
 80032c4:	0412      	lsls	r2, r2, #16
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80032cc:	4313      	orrs	r3, r2
 80032ce:	6872      	ldr	r2, [r6, #4]
 80032d0:	3a01      	subs	r2, #1
 80032d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d6:	4313      	orrs	r3, r2
 80032d8:	6932      	ldr	r2, [r6, #16]
 80032da:	3a01      	subs	r2, #1
 80032dc:	0612      	lsls	r2, r2, #24
 80032de:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80032e2:	4313      	orrs	r3, r2
 80032e4:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80032e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80032e8:	6972      	ldr	r2, [r6, #20]
 80032ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80032ee:	4313      	orrs	r3, r2
 80032f0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80032f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80032f4:	69b3      	ldr	r3, [r6, #24]
 80032f6:	f022 0220 	bic.w	r2, r2, #32
 80032fa:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80032fc:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80032fe:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003300:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003302:	f022 0210 	bic.w	r2, r2, #16
 8003306:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003308:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800330a:	69f2      	ldr	r2, [r6, #28]
 800330c:	400b      	ands	r3, r1
 800330e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003312:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003314:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003316:	f043 0310 	orr.w	r3, r3, #16
 800331a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800331c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800331e:	b1df      	cbz	r7, 8003358 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003320:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003322:	bf0c      	ite	eq
 8003324:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003328:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800332c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800332e:	4c0c      	ldr	r4, [pc, #48]	@ (8003360 <RCCEx_PLL2_Config.part.0+0xdc>)
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003336:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7fd fe10 	bl	8000f5c <HAL_GetTick>
 800333c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800333e:	e004      	b.n	800334a <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003340:	f7fd fe0c 	bl	8000f5c <HAL_GetTick>
 8003344:	1b40      	subs	r0, r0, r5
 8003346:	2802      	cmp	r0, #2
 8003348:	d804      	bhi.n	8003354 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	d5f7      	bpl.n	8003340 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8003350:	2000      	movs	r0, #0
}
 8003352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003354:	2003      	movs	r0, #3
}
 8003356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003358:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800335c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800335e:	e7e6      	b.n	800332e <RCCEx_PLL2_Config.part.0+0xaa>
 8003360:	58024400 	.word	0x58024400
 8003364:	ffff0007 	.word	0xffff0007

08003368 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800336a:	4c36      	ldr	r4, [pc, #216]	@ (8003444 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800336c:	4606      	mov	r6, r0
 800336e:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003376:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003378:	f7fd fdf0 	bl	8000f5c <HAL_GetTick>
 800337c:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800337e:	e004      	b.n	800338a <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003380:	f7fd fdec 	bl	8000f5c <HAL_GetTick>
 8003384:	1b40      	subs	r0, r0, r5
 8003386:	2802      	cmp	r0, #2
 8003388:	d856      	bhi.n	8003438 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	009a      	lsls	r2, r3, #2
 800338e:	d4f7      	bmi.n	8003380 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003390:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003392:	6832      	ldr	r2, [r6, #0]
 8003394:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8003398:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800339c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800339e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	3a01      	subs	r2, #1
 80033a6:	025b      	lsls	r3, r3, #9
 80033a8:	0412      	lsls	r2, r2, #16
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80033b0:	4313      	orrs	r3, r2
 80033b2:	6872      	ldr	r2, [r6, #4]
 80033b4:	3a01      	subs	r2, #1
 80033b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ba:	4313      	orrs	r3, r2
 80033bc:	6932      	ldr	r2, [r6, #16]
 80033be:	3a01      	subs	r2, #1
 80033c0:	0612      	lsls	r2, r2, #24
 80033c2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80033c6:	4313      	orrs	r3, r2
 80033c8:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80033ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80033cc:	6972      	ldr	r2, [r6, #20]
 80033ce:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80033d2:	4313      	orrs	r3, r2
 80033d4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80033d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80033d8:	69b3      	ldr	r3, [r6, #24]
 80033da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033de:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80033e0:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80033e2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80033e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80033e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033ea:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80033ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80033ee:	69f2      	ldr	r2, [r6, #28]
 80033f0:	400b      	ands	r3, r1
 80033f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80033f6:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80033f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80033fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033fe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003400:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003402:	b1df      	cbz	r7, 800343c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003404:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003406:	bf0c      	ite	eq
 8003408:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800340c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8003410:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003412:	4c0c      	ldr	r4, [pc, #48]	@ (8003444 <RCCEx_PLL3_Config.part.0+0xdc>)
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fd fd9e 	bl	8000f5c <HAL_GetTick>
 8003420:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003422:	e004      	b.n	800342e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003424:	f7fd fd9a 	bl	8000f5c <HAL_GetTick>
 8003428:	1b40      	subs	r0, r0, r5
 800342a:	2802      	cmp	r0, #2
 800342c:	d804      	bhi.n	8003438 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	d5f7      	bpl.n	8003424 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8003434:	2000      	movs	r0, #0
}
 8003436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003438:	2003      	movs	r0, #3
}
 800343a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800343c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003440:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003442:	e7e6      	b.n	8003412 <RCCEx_PLL3_Config.part.0+0xaa>
 8003444:	58024400 	.word	0x58024400
 8003448:	ffff0007 	.word	0xffff0007

0800344c <HAL_RCCEx_PeriphCLKConfig>:
{
 800344c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003450:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8003454:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003456:	0118      	lsls	r0, r3, #4
 8003458:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 800345c:	d526      	bpl.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800345e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003460:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003464:	f000 865c 	beq.w	8004120 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8003468:	d815      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800346a:	2900      	cmp	r1, #0
 800346c:	f000 84a4 	beq.w	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x96c>
 8003470:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003474:	f040 8410 	bne.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003478:	49b0      	ldr	r1, [pc, #704]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800347a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800347c:	f001 0103 	and.w	r1, r1, #3
 8003480:	2903      	cmp	r1, #3
 8003482:	f000 8409 	beq.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8003486:	2102      	movs	r1, #2
 8003488:	f104 0008 	add.w	r0, r4, #8
 800348c:	f7ff fefa 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003490:	4606      	mov	r6, r0
        break;
 8003492:	f000 be52 	b.w	800413a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003496:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800349a:	f040 83fd 	bne.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800349e:	4da7      	ldr	r5, [pc, #668]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034a0:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034a2:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80034a4:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 80034a8:	4301      	orrs	r1, r0
 80034aa:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034ac:	05d9      	lsls	r1, r3, #23
 80034ae:	d50a      	bpl.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 80034b0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80034b2:	2904      	cmp	r1, #4
 80034b4:	d806      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80034b6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80034ba:	0459      	.short	0x0459
 80034bc:	0623060b 	.word	0x0623060b
 80034c0:	045e045e 	.word	0x045e045e
 80034c4:	2601      	movs	r6, #1
 80034c6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034c8:	055f      	lsls	r7, r3, #21
 80034ca:	d528      	bpl.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    switch (PeriphClkInit->Sai4AClockSelection)
 80034cc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80034d0:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80034d4:	f000 85e8 	beq.w	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80034d8:	f200 80f9 	bhi.w	80036ce <HAL_RCCEx_PeriphCLKConfig+0x282>
 80034dc:	2900      	cmp	r1, #0
 80034de:	f000 8457 	beq.w	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80034e2:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80034e6:	f040 80fc 	bne.w	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034ea:	4994      	ldr	r1, [pc, #592]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80034ee:	f001 0103 	and.w	r1, r1, #3
 80034f2:	2903      	cmp	r1, #3
 80034f4:	f000 80f5 	beq.w	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80034f8:	2100      	movs	r1, #0
 80034fa:	f104 0008 	add.w	r0, r4, #8
 80034fe:	f7ff fec1 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003502:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003504:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003508:	2d00      	cmp	r5, #0
 800350a:	f040 84e2 	bne.w	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800350e:	4f8b      	ldr	r7, [pc, #556]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003510:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8003514:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003516:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 800351a:	4301      	orrs	r1, r0
 800351c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800351e:	0518      	lsls	r0, r3, #20
 8003520:	d528      	bpl.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x128>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003522:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8003526:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800352a:	f000 85a9 	beq.w	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800352e:	f200 80db 	bhi.w	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003532:	2900      	cmp	r1, #0
 8003534:	f000 8436 	beq.w	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8003538:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800353c:	f040 80de 	bne.w	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003540:	497e      	ldr	r1, [pc, #504]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003542:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003544:	f001 0103 	and.w	r1, r1, #3
 8003548:	2903      	cmp	r1, #3
 800354a:	f000 80d7 	beq.w	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800354e:	2100      	movs	r1, #0
 8003550:	f104 0008 	add.w	r0, r4, #8
 8003554:	f7ff fe96 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003558:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800355a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800355e:	2d00      	cmp	r5, #0
 8003560:	f040 84b4 	bne.w	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003564:	4f75      	ldr	r7, [pc, #468]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003566:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800356a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800356c:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8003570:	4301      	orrs	r1, r0
 8003572:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003574:	0199      	lsls	r1, r3, #6
 8003576:	d518      	bpl.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    switch (PeriphClkInit->OspiClockSelection)
 8003578:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800357a:	2920      	cmp	r1, #32
 800357c:	f000 8530 	beq.w	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb94>
 8003580:	f200 80bf 	bhi.w	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8003584:	b139      	cbz	r1, 8003596 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003586:	2910      	cmp	r1, #16
 8003588:	f040 80be 	bne.w	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358c:	486b      	ldr	r0, [pc, #428]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800358e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003590:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003594:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003596:	2d00      	cmp	r5, #0
 8003598:	f040 8485 	bne.w	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800359c:	4f67      	ldr	r7, [pc, #412]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800359e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80035a0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80035a2:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 80035a6:	4301      	orrs	r1, r0
 80035a8:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035aa:	04df      	lsls	r7, r3, #19
 80035ac:	d526      	bpl.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch (PeriphClkInit->Spi123ClockSelection)
 80035ae:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80035b0:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80035b4:	f000 8550 	beq.w	8004058 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80035b8:	f200 80a9 	bhi.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80035bc:	2900      	cmp	r1, #0
 80035be:	f000 83cc 	beq.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x90e>
 80035c2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80035c6:	f040 80aa 	bne.w	800371e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035ca:	495c      	ldr	r1, [pc, #368]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035cc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80035ce:	f001 0103 	and.w	r1, r1, #3
 80035d2:	2903      	cmp	r1, #3
 80035d4:	f000 80a3 	beq.w	800371e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035d8:	2100      	movs	r1, #0
 80035da:	f104 0008 	add.w	r0, r4, #8
 80035de:	f7ff fe51 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 80035e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80035e8:	2d00      	cmp	r5, #0
 80035ea:	f040 846c 	bne.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035ee:	4f53      	ldr	r7, [pc, #332]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035f0:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80035f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80035f4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80035f8:	4301      	orrs	r1, r0
 80035fa:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035fc:	0498      	lsls	r0, r3, #18
 80035fe:	d524      	bpl.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003600:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003602:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8003606:	f000 8513 	beq.w	8004030 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
 800360a:	f200 808b 	bhi.w	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800360e:	b191      	cbz	r1, 8003636 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003610:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003614:	f040 808e 	bne.w	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003618:	4948      	ldr	r1, [pc, #288]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800361a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800361c:	f001 0103 	and.w	r1, r1, #3
 8003620:	2903      	cmp	r1, #3
 8003622:	f000 8087 	beq.w	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003626:	2101      	movs	r1, #1
 8003628:	f104 0008 	add.w	r0, r4, #8
 800362c:	f7ff fe2a 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003630:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003632:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003636:	2d00      	cmp	r5, #0
 8003638:	f040 845c 	bne.w	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800363c:	4f3f      	ldr	r7, [pc, #252]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800363e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003640:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003642:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8003646:	4301      	orrs	r1, r0
 8003648:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800364a:	0459      	lsls	r1, r3, #17
 800364c:	d523      	bpl.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800364e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8003652:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003656:	f000 84d7 	beq.w	8004008 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 800365a:	d871      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800365c:	b181      	cbz	r1, 8003680 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800365e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003662:	d175      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x304>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003664:	4935      	ldr	r1, [pc, #212]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003666:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003668:	f001 0103 	and.w	r1, r1, #3
 800366c:	2903      	cmp	r1, #3
 800366e:	d06f      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003670:	2101      	movs	r1, #1
 8003672:	f104 0008 	add.w	r0, r4, #8
 8003676:	f7ff fe05 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 800367a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800367c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003680:	2d00      	cmp	r5, #0
 8003682:	f040 844d 	bne.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003686:	4f2d      	ldr	r7, [pc, #180]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003688:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800368c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800368e:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8003692:	4301      	orrs	r1, r0
 8003694:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003696:	041f      	lsls	r7, r3, #16
 8003698:	d50d      	bpl.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    switch (PeriphClkInit->FdcanClockSelection)
 800369a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800369c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80036a0:	f000 82cf 	beq.w	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80036a4:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80036a8:	f000 83db 	beq.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80036ac:	2900      	cmp	r1, #0
 80036ae:	f000 82cd 	beq.w	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x800>
 80036b2:	2601      	movs	r6, #1
 80036b4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036b6:	01d8      	lsls	r0, r3, #7
 80036b8:	d556      	bpl.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch (PeriphClkInit->FmcClockSelection)
 80036ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80036bc:	2903      	cmp	r1, #3
 80036be:	f200 859b 	bhi.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80036c2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80036c6:	004d      	.short	0x004d
 80036c8:	04320048 	.word	0x04320048
 80036cc:	004d      	.short	0x004d
    switch (PeriphClkInit->Sai4AClockSelection)
 80036ce:	f421 1000 	bic.w	r0, r1, #2097152	@ 0x200000
 80036d2:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80036d6:	f43f af17 	beq.w	8003508 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80036da:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 80036de:	f43f af13 	beq.w	8003508 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80036e2:	2601      	movs	r6, #1
 80036e4:	4635      	mov	r5, r6
 80036e6:	e71a      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    switch (PeriphClkInit->Sai4BClockSelection)
 80036e8:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 80036ec:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 80036f0:	f43f af35 	beq.w	800355e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80036f4:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80036f8:	f43f af31 	beq.w	800355e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80036fc:	2601      	movs	r6, #1
 80036fe:	4635      	mov	r5, r6
 8003700:	e738      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x128>
    switch (PeriphClkInit->OspiClockSelection)
 8003702:	2930      	cmp	r1, #48	@ 0x30
 8003704:	f43f af47 	beq.w	8003596 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003708:	2601      	movs	r6, #1
 800370a:	4635      	mov	r5, r6
 800370c:	e74d      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    switch (PeriphClkInit->Spi123ClockSelection)
 800370e:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8003712:	f43f af69 	beq.w	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003716:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800371a:	f43f af65 	beq.w	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800371e:	2601      	movs	r6, #1
 8003720:	4635      	mov	r5, r6
 8003722:	e76b      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003724:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8003728:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 800372c:	d083      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800372e:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8003732:	d080      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003734:	2601      	movs	r6, #1
 8003736:	4635      	mov	r5, r6
 8003738:	e787      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800373a:	bf00      	nop
 800373c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi6ClockSelection)
 8003740:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8003744:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003748:	d09a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800374a:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800374e:	d097      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003750:	2601      	movs	r6, #1
 8003752:	4635      	mov	r5, r6
 8003754:	e79f      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003756:	4837      	ldr	r0, [pc, #220]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003758:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800375a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800375e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003760:	2d00      	cmp	r5, #0
 8003762:	f000 83a3 	beq.w	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003766:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003768:	0259      	lsls	r1, r3, #9
 800376a:	f100 82b4 	bmi.w	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x88a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800376e:	07d8      	lsls	r0, r3, #31
 8003770:	d52f      	bpl.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003772:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003774:	2928      	cmp	r1, #40	@ 0x28
 8003776:	d82a      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003778:	e8df f011 	tbh	[pc, r1, lsl #1]
 800377c:	002902a2 	.word	0x002902a2
 8003780:	00290029 	.word	0x00290029
 8003784:	00290029 	.word	0x00290029
 8003788:	00290029 	.word	0x00290029
 800378c:	00290293 	.word	0x00290293
 8003790:	00290029 	.word	0x00290029
 8003794:	00290029 	.word	0x00290029
 8003798:	00290029 	.word	0x00290029
 800379c:	0029050b 	.word	0x0029050b
 80037a0:	00290029 	.word	0x00290029
 80037a4:	00290029 	.word	0x00290029
 80037a8:	00290029 	.word	0x00290029
 80037ac:	002902a2 	.word	0x002902a2
 80037b0:	00290029 	.word	0x00290029
 80037b4:	00290029 	.word	0x00290029
 80037b8:	00290029 	.word	0x00290029
 80037bc:	002902a2 	.word	0x002902a2
 80037c0:	00290029 	.word	0x00290029
 80037c4:	00290029 	.word	0x00290029
 80037c8:	00290029 	.word	0x00290029
 80037cc:	02a2      	.short	0x02a2
 80037ce:	2601      	movs	r6, #1
 80037d0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037d2:	0799      	lsls	r1, r3, #30
 80037d4:	d51e      	bpl.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80037d6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80037d8:	2905      	cmp	r1, #5
 80037da:	f200 84f3 	bhi.w	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80037de:	e8df f011 	tbh	[pc, r1, lsl #1]
 80037e2:	0015      	.short	0x0015
 80037e4:	04c60006 	.word	0x04c60006
 80037e8:	00150015 	.word	0x00150015
 80037ec:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037ee:	4911      	ldr	r1, [pc, #68]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80037f2:	f001 0103 	and.w	r1, r1, #3
 80037f6:	2903      	cmp	r1, #3
 80037f8:	f000 84e4 	beq.w	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80037fc:	2101      	movs	r1, #1
 80037fe:	f104 0008 	add.w	r0, r4, #8
 8003802:	f7ff fd3f 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003806:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003808:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800380c:	2d00      	cmp	r5, #0
 800380e:	f000 8374 	beq.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003812:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003814:	075f      	lsls	r7, r3, #29
 8003816:	d522      	bpl.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003818:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800381c:	2905      	cmp	r1, #5
 800381e:	f200 84d5 	bhi.w	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003822:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003826:	0018      	.short	0x0018
 8003828:	04920009 	.word	0x04920009
 800382c:	00180018 	.word	0x00180018
 8003830:	0018      	.short	0x0018
 8003832:	bf00      	nop
 8003834:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003838:	49af      	ldr	r1, [pc, #700]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800383a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800383c:	f001 0103 	and.w	r1, r1, #3
 8003840:	2903      	cmp	r1, #3
 8003842:	f000 84c3 	beq.w	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003846:	2101      	movs	r1, #1
 8003848:	f104 0008 	add.w	r0, r4, #8
 800384c:	f7ff fd1a 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003850:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003852:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003856:	2d00      	cmp	r5, #0
 8003858:	f000 8357 	beq.w	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800385c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800385e:	0698      	lsls	r0, r3, #26
 8003860:	d526      	bpl.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003862:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8003866:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800386a:	f000 8383 	beq.w	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
 800386e:	f200 8189 	bhi.w	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x738>
 8003872:	b191      	cbz	r1, 800389a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003874:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003878:	f040 818e 	bne.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800387c:	499e      	ldr	r1, [pc, #632]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800387e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003880:	f001 0103 	and.w	r1, r1, #3
 8003884:	2903      	cmp	r1, #3
 8003886:	f000 8187 	beq.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800388a:	2100      	movs	r1, #0
 800388c:	f104 0008 	add.w	r0, r4, #8
 8003890:	f7ff fcf8 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003894:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003896:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800389a:	2d00      	cmp	r5, #0
 800389c:	f040 8326 	bne.w	8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038a0:	4f95      	ldr	r7, [pc, #596]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80038a2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80038a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038a8:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80038ac:	4301      	orrs	r1, r0
 80038ae:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038b0:	0659      	lsls	r1, r3, #25
 80038b2:	d526      	bpl.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80038b4:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 80038b8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80038bc:	f000 836c 	beq.w	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80038c0:	f200 816d 	bhi.w	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x752>
 80038c4:	b191      	cbz	r1, 80038ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80038c6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80038ca:	f040 8172 	bne.w	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x766>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038ce:	498a      	ldr	r1, [pc, #552]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80038d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80038d2:	f001 0103 	and.w	r1, r1, #3
 80038d6:	2903      	cmp	r1, #3
 80038d8:	f000 816b 	beq.w	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x766>
 80038dc:	2100      	movs	r1, #0
 80038de:	f104 0008 	add.w	r0, r4, #8
 80038e2:	f7ff fccf 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 80038e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80038ec:	2d00      	cmp	r5, #0
 80038ee:	f040 82fb 	bne.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038f2:	4f81      	ldr	r7, [pc, #516]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80038f4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80038f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80038fa:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 80038fe:	4301      	orrs	r1, r0
 8003900:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003902:	061f      	lsls	r7, r3, #24
 8003904:	d526      	bpl.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x508>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003906:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800390a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800390e:	f000 8355 	beq.w	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003912:	f200 8151 	bhi.w	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 8003916:	b191      	cbz	r1, 800393e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003918:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800391c:	f040 8156 	bne.w	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003920:	4975      	ldr	r1, [pc, #468]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003922:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003924:	f001 0103 	and.w	r1, r1, #3
 8003928:	2903      	cmp	r1, #3
 800392a:	f000 814f 	beq.w	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x780>
 800392e:	2100      	movs	r1, #0
 8003930:	f104 0008 	add.w	r0, r4, #8
 8003934:	f7ff fca6 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003938:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800393a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800393e:	2d00      	cmp	r5, #0
 8003940:	f040 82d6 	bne.w	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003944:	4f6c      	ldr	r7, [pc, #432]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003946:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800394a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800394c:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003950:	4301      	orrs	r1, r0
 8003952:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003954:	0718      	lsls	r0, r3, #28
 8003956:	d50b      	bpl.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x524>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003958:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800395c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003960:	f000 8242 	beq.w	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003964:	4f64      	ldr	r7, [pc, #400]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003966:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003968:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800396c:	4301      	orrs	r1, r0
 800396e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003970:	06d9      	lsls	r1, r3, #27
 8003972:	d50b      	bpl.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x540>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003974:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8003978:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800397c:	f000 8249 	beq.w	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003980:	4f5d      	ldr	r7, [pc, #372]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003982:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003984:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8003988:	4301      	orrs	r1, r0
 800398a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800398c:	031f      	lsls	r7, r3, #12
 800398e:	d50e      	bpl.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x562>
    switch (PeriphClkInit->AdcClockSelection)
 8003990:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8003994:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003998:	f000 8163 	beq.w	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800399c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80039a0:	f000 816e 	beq.w	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x834>
 80039a4:	2900      	cmp	r1, #0
 80039a6:	f000 826d 	beq.w	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 80039aa:	2601      	movs	r6, #1
 80039ac:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039ae:	0358      	lsls	r0, r3, #13
 80039b0:	d50f      	bpl.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->UsbClockSelection)
 80039b2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80039b6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80039ba:	f000 82c9 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 80039be:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80039c2:	f000 8132 	beq.w	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80039c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80039ca:	f000 8129 	beq.w	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80039ce:	2601      	movs	r6, #1
 80039d0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039d2:	03d9      	lsls	r1, r3, #15
 80039d4:	d520      	bpl.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch (PeriphClkInit->SdmmcClockSelection)
 80039d6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80039d8:	2900      	cmp	r1, #0
 80039da:	f000 822f 	beq.w	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 80039de:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80039e2:	f040 811a 	bne.w	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039e6:	4944      	ldr	r1, [pc, #272]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80039e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80039ea:	f001 0103 	and.w	r1, r1, #3
 80039ee:	2903      	cmp	r1, #3
 80039f0:	f000 8113 	beq.w	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80039f4:	2102      	movs	r1, #2
 80039f6:	f104 0008 	add.w	r0, r4, #8
 80039fa:	f7ff fc43 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 80039fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a00:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	f040 8221 	bne.w	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a0a:	4f3b      	ldr	r7, [pc, #236]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003a0c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003a0e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003a10:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8003a14:	4301      	orrs	r1, r0
 8003a16:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a18:	009f      	lsls	r7, r3, #2
 8003a1a:	d50e      	bpl.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a1c:	4936      	ldr	r1, [pc, #216]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003a1e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003a20:	f001 0103 	and.w	r1, r1, #3
 8003a24:	2903      	cmp	r1, #3
 8003a26:	d007      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8003a28:	2102      	movs	r1, #2
 8003a2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003a2e:	f7ff fc9b 	bl	8003368 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a32:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a36:	b100      	cbz	r0, 8003a3a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = HAL_ERROR;
 8003a38:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a3a:	0398      	lsls	r0, r3, #14
 8003a3c:	f140 80d5 	bpl.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch (PeriphClkInit->RngClockSelection)
 8003a40:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003a42:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003a46:	f000 8203 	beq.w	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003a4a:	f240 80c2 	bls.w	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8003a4e:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8003a52:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003a56:	f000 80bf 	beq.w	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
 8003a5a:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a5c:	02d9      	lsls	r1, r3, #11
 8003a5e:	d506      	bpl.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x622>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a60:	4825      	ldr	r0, [pc, #148]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003a62:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 8003a64:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003a66:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003a6a:	4331      	orrs	r1, r6
 8003a6c:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a6e:	029f      	lsls	r7, r3, #10
 8003a70:	d506      	bpl.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x634>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a72:	4821      	ldr	r0, [pc, #132]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003a74:	6ea6      	ldr	r6, [r4, #104]	@ 0x68
 8003a76:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003a78:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8003a7c:	4331      	orrs	r1, r6
 8003a7e:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a80:	005e      	lsls	r6, r3, #1
 8003a82:	d509      	bpl.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a84:	491c      	ldr	r1, [pc, #112]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003a86:	6908      	ldr	r0, [r1, #16]
 8003a88:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8003a8c:	6108      	str	r0, [r1, #16]
 8003a8e:	6908      	ldr	r0, [r1, #16]
 8003a90:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8003a94:	4330      	orrs	r0, r6
 8003a96:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da06      	bge.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x65e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a9c:	4816      	ldr	r0, [pc, #88]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003a9e:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8003aa0:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003aa2:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8003aa6:	4331      	orrs	r1, r6
 8003aa8:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003aaa:	0218      	lsls	r0, r3, #8
 8003aac:	d507      	bpl.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x672>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003aae:	4912      	ldr	r1, [pc, #72]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ab0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8003ab4:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8003ab6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003aba:	4303      	orrs	r3, r0
 8003abc:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003abe:	07d1      	lsls	r1, r2, #31
 8003ac0:	d50f      	bpl.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x696>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	f000 8186 	beq.w	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x990>
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	f104 0008 	add.w	r0, r4, #8
 8003ad6:	f7ff fbd5 	bl	8003284 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ada:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003adc:	2800      	cmp	r0, #0
 8003ade:	f040 81ff 	bne.w	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xa94>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ae2:	0793      	lsls	r3, r2, #30
 8003ae4:	d513      	bpl.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ae6:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	f000 8169 	beq.w	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003af4:	e002      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003af6:	bf00      	nop
 8003af8:	58024400 	.word	0x58024400
 8003afc:	2101      	movs	r1, #1
 8003afe:	f104 0008 	add.w	r0, r4, #8
 8003b02:	f7ff fbbf 	bl	8003284 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b06:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	f040 81e5 	bne.w	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b0e:	0757      	lsls	r7, r2, #29
 8003b10:	d50f      	bpl.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b12:	4bb3      	ldr	r3, [pc, #716]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	f000 8155 	beq.w	8003dca <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003b20:	2102      	movs	r1, #2
 8003b22:	f104 0008 	add.w	r0, r4, #8
 8003b26:	f7ff fbad 	bl	8003284 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b2a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	f040 81d9 	bne.w	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xa98>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b32:	0716      	lsls	r6, r2, #28
 8003b34:	d50f      	bpl.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b36:	4baa      	ldr	r3, [pc, #680]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	f000 8145 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x982>
 8003b44:	2100      	movs	r1, #0
 8003b46:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003b4a:	f7ff fc0d 	bl	8003368 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b4e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b50:	2800      	cmp	r0, #0
 8003b52:	f040 81c3 	bne.w	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa90>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b56:	06d0      	lsls	r0, r2, #27
 8003b58:	d54a      	bpl.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b5a:	4ba1      	ldr	r3, [pc, #644]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b5c:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	f000 8133 	beq.w	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x986>
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f7ff fbfa 	bl	8003368 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d03a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x7a2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	069a      	lsls	r2, r3, #26
 8003b7c:	f140 808e 	bpl.w	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003b80:	4605      	mov	r5, r0
 8003b82:	e039      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b84:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8003b88:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003b8c:	f43f ae85 	beq.w	800389a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003b90:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8003b94:	f43f ae81 	beq.w	800389a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003b98:	2601      	movs	r6, #1
 8003b9a:	4635      	mov	r5, r6
 8003b9c:	e688      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b9e:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8003ba2:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003ba6:	f43f aea1 	beq.w	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003baa:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8003bae:	f43f ae9d 	beq.w	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003bb2:	2601      	movs	r6, #1
 8003bb4:	4635      	mov	r5, r6
 8003bb6:	e6a4      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003bb8:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8003bbc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003bc0:	f43f aebd 	beq.w	800393e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003bc4:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8003bc8:	f43f aeb9 	beq.w	800393e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003bcc:	2601      	movs	r6, #1
 8003bce:	4635      	mov	r5, r6
 8003bd0:	e6c0      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x508>
    switch (PeriphClkInit->RngClockSelection)
 8003bd2:	2900      	cmp	r1, #0
 8003bd4:	f47f af41 	bne.w	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    if (ret == HAL_OK)
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	f47f af3f 	bne.w	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x610>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bde:	4d80      	ldr	r5, [pc, #512]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003be0:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8003be2:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8003be6:	4301      	orrs	r1, r0
 8003be8:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 8003bea:	4635      	mov	r5, r6
 8003bec:	e736      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x610>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bee:	6862      	ldr	r2, [r4, #4]
 8003bf0:	0693      	lsls	r3, r2, #26
 8003bf2:	d50d      	bpl.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bf4:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bf8:	4b79      	ldr	r3, [pc, #484]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d04b      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003c04:	2102      	movs	r1, #2
 8003c06:	4630      	mov	r0, r6
 8003c08:	f7ff fbae 	bl	8003368 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d145      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (status == HAL_OK)
 8003c10:	1e28      	subs	r0, r5, #0
 8003c12:	bf18      	it	ne
 8003c14:	2001      	movne	r0, #1
}
 8003c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c1a:	2601      	movs	r6, #1
 8003c1c:	4635      	mov	r5, r6
 8003c1e:	e6fb      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c20:	486f      	ldr	r0, [pc, #444]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c22:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003c24:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003c28:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003c2a:	2d00      	cmp	r5, #0
 8003c2c:	f040 8149 	bne.w	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c30:	4f6b      	ldr	r7, [pc, #428]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c32:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003c36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c38:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8003c3c:	4301      	orrs	r1, r0
 8003c3e:	6579      	str	r1, [r7, #84]	@ 0x54
 8003c40:	e6c7      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c42:	4867      	ldr	r0, [pc, #412]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c44:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003c46:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003c4a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	f040 8135 	bne.w	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c52:	4f63      	ldr	r7, [pc, #396]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c54:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003c56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003c58:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8003c5c:	4301      	orrs	r1, r0
 8003c5e:	6539      	str	r1, [r7, #80]	@ 0x50
 8003c60:	e529      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c62:	495f      	ldr	r1, [pc, #380]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c64:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c66:	f001 0103 	and.w	r1, r1, #3
 8003c6a:	2903      	cmp	r1, #3
 8003c6c:	f43f ae9d 	beq.w	80039aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003c70:	2102      	movs	r1, #2
 8003c72:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003c76:	f7ff fb77 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8003c7a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c7c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c80:	2d00      	cmp	r5, #0
 8003c82:	f040 814b 	bne.w	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xad0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c86:	4f56      	ldr	r7, [pc, #344]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c88:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8003c8c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003c8e:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8003c92:	4301      	orrs	r1, r0
 8003c94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c96:	e68a      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003c98:	2601      	movs	r6, #1
 8003c9a:	e407      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x60>
  return HAL_ERROR;
 8003c9c:	2001      	movs	r0, #1
}
 8003c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ca2:	494f      	ldr	r1, [pc, #316]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ca4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ca6:	f001 0103 	and.w	r1, r1, #3
 8003caa:	2903      	cmp	r1, #3
 8003cac:	f43f ad8f 	beq.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	f104 0008 	add.w	r0, r4, #8
 8003cb6:	f7ff fae5 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003cba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003cbc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cc0:	2d00      	cmp	r5, #0
 8003cc2:	f040 8130 	bne.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xada>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cc6:	4f46      	ldr	r7, [pc, #280]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003cc8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003cca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ccc:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8003cd0:	4301      	orrs	r1, r0
 8003cd2:	6579      	str	r1, [r7, #84]	@ 0x54
 8003cd4:	e57d      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd6:	4f43      	ldr	r7, [pc, #268]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cde:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003ce0:	f7fd f93c 	bl	8000f5c <HAL_GetTick>
 8003ce4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce6:	e006      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce8:	f7fd f938 	bl	8000f5c <HAL_GetTick>
 8003cec:	eba0 0008 	sub.w	r0, r0, r8
 8003cf0:	2864      	cmp	r0, #100	@ 0x64
 8003cf2:	f200 8261 	bhi.w	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	05da      	lsls	r2, r3, #23
 8003cfa:	d5f5      	bpl.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    if (ret == HAL_OK)
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	f040 825c 	bne.w	80041ba <HAL_RCCEx_PeriphCLKConfig+0xd6e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d02:	4a37      	ldr	r2, [pc, #220]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d04:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8003d08:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8003d0a:	4059      	eors	r1, r3
 8003d0c:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8003d10:	d00b      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x8de>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d12:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d14:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d16:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d1a:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8003d1e:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d20:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8003d22:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8003d26:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8003d28:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d2e:	f000 8267 	beq.w	8004200 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d32:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8003d36:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8003d3a:	f000 8275 	beq.w	8004228 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003d3e:	4928      	ldr	r1, [pc, #160]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d40:	690a      	ldr	r2, [r1, #16]
 8003d42:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8003d46:	610a      	str	r2, [r1, #16]
 8003d48:	4825      	ldr	r0, [pc, #148]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d4a:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8003d4e:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8003d50:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d52:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d56:	6701      	str	r1, [r0, #112]	@ 0x70
 8003d58:	e509      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x322>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5a:	4821      	ldr	r0, [pc, #132]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d5c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003d5e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003d62:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	f040 80ae 	bne.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003d6a:	e440      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6c:	481c      	ldr	r0, [pc, #112]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d6e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003d70:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003d74:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8003d76:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	f040 81bb 	bne.w	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d7e:	4f18      	ldr	r7, [pc, #96]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d84:	f021 0107 	bic.w	r1, r1, #7
 8003d88:	4301      	orrs	r1, r0
 8003d8a:	6539      	str	r1, [r7, #80]	@ 0x50
 8003d8c:	f7ff bb9c 	b.w	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d90:	4813      	ldr	r0, [pc, #76]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d92:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003d94:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003d98:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003d9a:	2d00      	cmp	r5, #0
 8003d9c:	f040 8099 	bne.w	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003da0:	f7ff bbb5 	b.w	800350e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da4:	480e      	ldr	r0, [pc, #56]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003da6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003da8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003dac:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003dae:	2d00      	cmp	r5, #0
 8003db0:	f040 808c 	bne.w	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa80>
 8003db4:	f7ff bbd6 	b.w	8003564 <HAL_RCCEx_PeriphCLKConfig+0x118>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db8:	4d09      	ldr	r5, [pc, #36]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003dba:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8003dbc:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003dc0:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003dc2:	f7ff bb6c 	b.w	800349e <HAL_RCCEx_PeriphCLKConfig+0x52>
    return HAL_ERROR;
 8003dc6:	2501      	movs	r5, #1
 8003dc8:	e6a1      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003dca:	2501      	movs	r5, #1
 8003dcc:	e6b1      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    return HAL_ERROR;
 8003dce:	2501      	movs	r5, #1
 8003dd0:	e6c1      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003dd2:	0691      	lsls	r1, r2, #26
 8003dd4:	f57f af62 	bpl.w	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x850>
    return HAL_ERROR;
 8003dd8:	2501      	movs	r5, #1
 8003dda:	e70d      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    return HAL_ERROR;
 8003ddc:	2501      	movs	r5, #1
 8003dde:	e680      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8003de0:	58024400 	.word	0x58024400
 8003de4:	58024800 	.word	0x58024800
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003de8:	49c4      	ldr	r1, [pc, #784]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003dea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003dec:	f001 0103 	and.w	r1, r1, #3
 8003df0:	2903      	cmp	r1, #3
 8003df2:	f000 81ef 	beq.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd88>
 8003df6:	2102      	movs	r1, #2
 8003df8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003dfc:	f7ff fab4 	bl	8003368 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e00:	2800      	cmp	r0, #0
 8003e02:	f000 81f3 	beq.w	80041ec <HAL_RCCEx_PeriphCLKConfig+0xda0>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003e06:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 8003e0a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e0c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003e10:	e5a8      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x518>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e12:	49ba      	ldr	r1, [pc, #744]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003e14:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e16:	f001 0103 	and.w	r1, r1, #3
 8003e1a:	2903      	cmp	r1, #3
 8003e1c:	f000 81dd 	beq.w	80041da <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003e20:	2102      	movs	r1, #2
 8003e22:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e26:	f7ff fa9f 	bl	8003368 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	f000 81d8 	beq.w	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e30:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
        status = HAL_ERROR;
 8003e34:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e36:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003e3a:	e5a1      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x534>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3c:	48af      	ldr	r0, [pc, #700]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003e3e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003e40:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003e44:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003e46:	2d00      	cmp	r5, #0
 8003e48:	f43f addf 	beq.w	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003e4c:	462e      	mov	r6, r5
 8003e4e:	e5e3      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e50:	4faa      	ldr	r7, [pc, #680]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003e52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e54:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003e58:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003e5a:	2d00      	cmp	r5, #0
 8003e5c:	f47f adfe 	bne.w	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003e60:	e6bd      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x792>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e62:	49a6      	ldr	r1, [pc, #664]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003e64:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e66:	f001 0103 	and.w	r1, r1, #3
 8003e6a:	2903      	cmp	r1, #3
 8003e6c:	f43f ac21 	beq.w	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003e70:	2101      	movs	r1, #1
 8003e72:	f104 0008 	add.w	r0, r4, #8
 8003e76:	f7ff fa05 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003e7a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e7c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e80:	b9e5      	cbnz	r5, 8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e82:	e6e6      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x806>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e84:	489d      	ldr	r0, [pc, #628]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003e86:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003e88:	f000 0003 	and.w	r0, r0, #3
 8003e8c:	2803      	cmp	r0, #3
 8003e8e:	f43f ad8c 	beq.w	80039aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003e92:	f104 0008 	add.w	r0, r4, #8
 8003e96:	f7ff f9f5 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003e9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e9c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	d13b      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8003ea4:	e6ef      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8003ea6:	462e      	mov	r6, r5
 8003ea8:	f7ff bb7f 	b.w	80035aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003eac:	4f93      	ldr	r7, [pc, #588]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003eae:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003eb0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003eb2:	f021 0103 	bic.w	r1, r1, #3
 8003eb6:	4301      	orrs	r1, r0
 8003eb8:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003eba:	e455      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003ebc:	462e      	mov	r6, r5
 8003ebe:	f7ff bbfa 	b.w	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003ec2:	462e      	mov	r6, r5
 8003ec4:	e585      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003ec6:	462e      	mov	r6, r5
 8003ec8:	f7ff bb98 	b.w	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8003ecc:	462e      	mov	r6, r5
 8003ece:	f7ff bb51 	b.w	8003574 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003ed2:	462e      	mov	r6, r5
 8003ed4:	f7ff bb23 	b.w	800351e <HAL_RCCEx_PeriphCLKConfig+0xd2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ed8:	4605      	mov	r5, r0
 8003eda:	e618      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003edc:	4605      	mov	r5, r0
 8003ede:	e63a      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	e5fe      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x696>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	e624      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8003ee8:	462e      	mov	r6, r5
 8003eea:	e50a      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003eec:	462e      	mov	r6, r5
 8003eee:	e4df      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003ef0:	462e      	mov	r6, r5
 8003ef2:	e52f      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003ef4:	462e      	mov	r6, r5
 8003ef6:	f7ff bba8 	b.w	800364a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003efa:	4f80      	ldr	r7, [pc, #512]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003efc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003efe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f00:	f021 0107 	bic.w	r1, r1, #7
 8003f04:	4301      	orrs	r1, r0
 8003f06:	6579      	str	r1, [r7, #84]	@ 0x54
 8003f08:	e484      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f0a:	4f7c      	ldr	r7, [pc, #496]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003f0c:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8003f10:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003f12:	f021 0107 	bic.w	r1, r1, #7
 8003f16:	4301      	orrs	r1, r0
 8003f18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f1a:	e4a0      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x412>
 8003f1c:	462e      	mov	r6, r5
 8003f1e:	e546      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003f20:	462e      	mov	r6, r5
 8003f22:	f7ff bbb8 	b.w	8003696 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003f26:	462e      	mov	r6, r5
 8003f28:	e453      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f2a:	4974      	ldr	r1, [pc, #464]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003f2c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f2e:	f001 0103 	and.w	r1, r1, #3
 8003f32:	2903      	cmp	r1, #3
 8003f34:	f000 8160 	beq.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8003f38:	2102      	movs	r1, #2
 8003f3a:	f104 0008 	add.w	r0, r4, #8
 8003f3e:	f7ff f9a1 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003f42:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f44:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f48:	2d00      	cmp	r5, #0
 8003f4a:	f47f ac0c 	bne.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003f4e:	e7ad      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa60>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f50:	496a      	ldr	r1, [pc, #424]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003f52:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f54:	f001 0103 	and.w	r1, r1, #3
 8003f58:	2903      	cmp	r1, #3
 8003f5a:	f43f ad38 	beq.w	80039ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003f5e:	2101      	movs	r1, #1
 8003f60:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003f64:	f7ff fa00 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8003f68:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f6a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f6e:	2d00      	cmp	r5, #0
 8003f70:	d1a7      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003f72:	e65d      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f74:	4961      	ldr	r1, [pc, #388]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003f76:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f78:	f001 0103 	and.w	r1, r1, #3
 8003f7c:	2903      	cmp	r1, #3
 8003f7e:	f43f ae0b 	beq.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003f82:	2102      	movs	r1, #2
 8003f84:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003f88:	f7ff f9ee 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8003f8c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f8e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f92:	2d00      	cmp	r5, #0
 8003f94:	d1aa      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8003f96:	e483      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f98:	4958      	ldr	r1, [pc, #352]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003f9a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f9c:	f001 0103 	and.w	r1, r1, #3
 8003fa0:	2903      	cmp	r1, #3
 8003fa2:	f43f ae06 	beq.w	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x766>
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003fac:	f7ff f9dc 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8003fb0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fb2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003fb6:	2d00      	cmp	r5, #0
 8003fb8:	d196      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
 8003fba:	e49a      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fbc:	494f      	ldr	r1, [pc, #316]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003fbe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003fc0:	f001 0103 	and.w	r1, r1, #3
 8003fc4:	2903      	cmp	r1, #3
 8003fc6:	f43f ae01 	beq.w	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x780>
 8003fca:	2102      	movs	r1, #2
 8003fcc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003fd0:	f7ff f9ca 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8003fd4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003fd6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003fda:	2d00      	cmp	r5, #0
 8003fdc:	d188      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003fde:	e4b1      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fe0:	4946      	ldr	r1, [pc, #280]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8003fe2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003fe4:	f001 0103 	and.w	r1, r1, #3
 8003fe8:	2903      	cmp	r1, #3
 8003fea:	f43f ab8d 	beq.w	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003fee:	2102      	movs	r1, #2
 8003ff0:	f104 0008 	add.w	r0, r4, #8
 8003ff4:	f7ff f946 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 8003ff8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ffa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ffe:	2d00      	cmp	r5, #0
 8004000:	f47f af51 	bne.w	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8004004:	f7ff baca 	b.w	800359c <HAL_RCCEx_PeriphCLKConfig+0x150>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004008:	493c      	ldr	r1, [pc, #240]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 800400a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800400c:	f001 0103 	and.w	r1, r1, #3
 8004010:	2903      	cmp	r1, #3
 8004012:	f43f ab9d 	beq.w	8003750 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004016:	2101      	movs	r1, #1
 8004018:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800401c:	f7ff f9a4 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8004020:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004022:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004026:	2d00      	cmp	r5, #0
 8004028:	f47f af7a 	bne.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 800402c:	f7ff bb2b 	b.w	8003686 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004030:	4932      	ldr	r1, [pc, #200]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8004032:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004034:	f001 0103 	and.w	r1, r1, #3
 8004038:	2903      	cmp	r1, #3
 800403a:	f43f ab7b 	beq.w	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800403e:	2101      	movs	r1, #1
 8004040:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004044:	f7ff f990 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8004048:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800404a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800404e:	2d00      	cmp	r5, #0
 8004050:	f47f af50 	bne.w	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004054:	f7ff baf2 	b.w	800363c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004058:	4928      	ldr	r1, [pc, #160]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 800405a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800405c:	f001 0103 	and.w	r1, r1, #3
 8004060:	2903      	cmp	r1, #3
 8004062:	f43f ab5c 	beq.w	800371e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004066:	2100      	movs	r1, #0
 8004068:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800406c:	f7ff f97c 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8004070:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004072:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004076:	2d00      	cmp	r5, #0
 8004078:	f47f af25 	bne.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800407c:	f7ff bab7 	b.w	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004080:	491e      	ldr	r1, [pc, #120]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 8004082:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004084:	f001 0103 	and.w	r1, r1, #3
 8004088:	2903      	cmp	r1, #3
 800408a:	f43f ab37 	beq.w	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800408e:	2100      	movs	r1, #0
 8004090:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004094:	f7ff f968 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8004098:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800409a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800409e:	2d00      	cmp	r5, #0
 80040a0:	f47f af14 	bne.w	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa80>
 80040a4:	f7ff ba5e 	b.w	8003564 <HAL_RCCEx_PeriphCLKConfig+0x118>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040a8:	4914      	ldr	r1, [pc, #80]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 80040aa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80040ac:	f001 0103 	and.w	r1, r1, #3
 80040b0:	2903      	cmp	r1, #3
 80040b2:	f43f ab16 	beq.w	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80040b6:	2100      	movs	r1, #0
 80040b8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80040bc:	f7ff f954 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 80040c0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80040c2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80040c6:	2d00      	cmp	r5, #0
 80040c8:	f47f af03 	bne.w	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80040cc:	f7ff ba1f 	b.w	800350e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040d0:	490a      	ldr	r1, [pc, #40]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
 80040d2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80040d4:	f001 0103 	and.w	r1, r1, #3
 80040d8:	2903      	cmp	r1, #3
 80040da:	f43f a9f3 	beq.w	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040de:	2100      	movs	r1, #0
 80040e0:	f104 0008 	add.w	r0, r4, #8
 80040e4:	f7ff f8ce 	bl	8003284 <RCCEx_PLL2_Config.part.0>
 80040e8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040ea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	f43f ae45 	beq.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x932>
 80040f4:	462e      	mov	r6, r5
 80040f6:	f7ff b9e7 	b.w	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040fa:	bf00      	nop
 80040fc:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004100:	4951      	ldr	r1, [pc, #324]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004102:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004104:	f001 0103 	and.w	r1, r1, #3
 8004108:	2903      	cmp	r1, #3
 800410a:	f43f a9db 	beq.w	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800410e:	2100      	movs	r1, #0
 8004110:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004114:	f7ff f928 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8004118:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800411a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800411e:	e62b      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x92c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004120:	4949      	ldr	r1, [pc, #292]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004122:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004124:	f001 0103 	and.w	r1, r1, #3
 8004128:	2903      	cmp	r1, #3
 800412a:	f43f adb5 	beq.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800412e:	2102      	movs	r1, #2
 8004130:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004134:	f7ff f918 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8004138:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800413a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800413e:	2e00      	cmp	r6, #0
 8004140:	f47f a9b4 	bne.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004144:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004146:	f7ff b9aa 	b.w	800349e <HAL_RCCEx_PeriphCLKConfig+0x52>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800414a:	493f      	ldr	r1, [pc, #252]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800414c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800414e:	f001 0103 	and.w	r1, r1, #3
 8004152:	2903      	cmp	r1, #3
 8004154:	d03a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004156:	2101      	movs	r1, #1
 8004158:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800415c:	f7ff f904 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8004160:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004162:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004166:	2d00      	cmp	r5, #0
 8004168:	f47f ab78 	bne.w	800385c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800416c:	e6cd      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xabe>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800416e:	4936      	ldr	r1, [pc, #216]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004170:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004172:	f001 0103 	and.w	r1, r1, #3
 8004176:	2903      	cmp	r1, #3
 8004178:	d024      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 800417a:	2101      	movs	r1, #1
 800417c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004180:	f7ff f8f2 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 8004184:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004186:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800418a:	2d00      	cmp	r5, #0
 800418c:	f47f ab41 	bne.w	8003812 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8004190:	e6b3      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xaae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004192:	492d      	ldr	r1, [pc, #180]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004194:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004196:	f001 0103 	and.w	r1, r1, #3
 800419a:	2903      	cmp	r1, #3
 800419c:	f43f ab17 	beq.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 80041a0:	2101      	movs	r1, #1
 80041a2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80041a6:	f7ff f8df 	bl	8003368 <RCCEx_PLL3_Config.part.0>
 80041aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	f47f aeb8 	bne.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xada>
 80041b6:	e586      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
        ret = HAL_TIMEOUT;
 80041b8:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041ba:	462e      	mov	r6, r5
 80041bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80041c0:	f7ff bad5 	b.w	800376e <HAL_RCCEx_PeriphCLKConfig+0x322>
 80041c4:	2601      	movs	r6, #1
 80041c6:	4635      	mov	r5, r6
 80041c8:	f7ff bb24 	b.w	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80041cc:	2601      	movs	r6, #1
 80041ce:	4635      	mov	r5, r6
 80041d0:	f7ff bb45 	b.w	800385e <HAL_RCCEx_PeriphCLKConfig+0x412>
        status = HAL_ERROR;
 80041d4:	2601      	movs	r6, #1
 80041d6:	f7ff bbc5 	b.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0x518>
        status = HAL_ERROR;
 80041da:	2601      	movs	r6, #1
 80041dc:	f7ff bbd0 	b.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0x534>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041e0:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80041e8:	f7ff bbca 	b.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0x534>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80041ec:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041f0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80041f4:	f7ff bbb6 	b.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80041f8:	2601      	movs	r6, #1
 80041fa:	4635      	mov	r5, r6
 80041fc:	f7ff bab4 	b.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x31c>
        tickstart = HAL_GetTick();
 8004200:	f7fc feac 	bl	8000f5c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004204:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8004248 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
        tickstart = HAL_GetTick();
 8004208:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800420e:	e004      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xdce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fc fea4 	bl	8000f5c <HAL_GetTick>
 8004214:	1bc0      	subs	r0, r0, r7
 8004216:	4548      	cmp	r0, r9
 8004218:	d810      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xdf0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800421a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800421e:	079b      	lsls	r3, r3, #30
 8004220:	d5f6      	bpl.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004222:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8004226:	e584      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8004228:	4807      	ldr	r0, [pc, #28]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800422a:	4a08      	ldr	r2, [pc, #32]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800422c:	6901      	ldr	r1, [r0, #16]
 800422e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004232:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8004236:	430a      	orrs	r2, r1
 8004238:	6102      	str	r2, [r0, #16]
 800423a:	e585      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
        status = ret;
 800423c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800423e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004242:	4635      	mov	r5, r6
 8004244:	f7ff ba93 	b.w	800376e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004248:	58024400 	.word	0x58024400
 800424c:	00ffffcf 	.word	0x00ffffcf

08004250 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004250:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004252:	f7fe ff47 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 8004256:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004258:	4a05      	ldr	r2, [pc, #20]	@ (8004270 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004260:	5cd3      	ldrb	r3, [r2, r3]
 8004262:	f003 031f 	and.w	r3, r3, #31
}
 8004266:	40d8      	lsrs	r0, r3
 8004268:	bd08      	pop	{r3, pc}
 800426a:	bf00      	nop
 800426c:	58024400 	.word	0x58024400
 8004270:	0800763c 	.word	0x0800763c

08004274 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004274:	4a47      	ldr	r2, [pc, #284]	@ (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8004276:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004278:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800427a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800427c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800427e:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004282:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004286:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8004288:	d05b      	beq.n	8004342 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800428a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800428e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004292:	f001 0103 	and.w	r1, r1, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004296:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800429a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800429e:	2901      	cmp	r1, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042a4:	ee06 4a90 	vmov	s13, r4
 80042a8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80042ac:	d003      	beq.n	80042b6 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80042ae:	2902      	cmp	r1, #2
 80042b0:	d06a      	beq.n	8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 80042b2:	2900      	cmp	r1, #0
 80042b4:	d04a      	beq.n	800434c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042b6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80042ba:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80042be:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80042c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80042cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042d0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80042d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 80042de:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80042e2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80042e4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80042e8:	ee07 3a10 	vmov	s14, r3
 80042ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80042f0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80042f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80042fa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80042fe:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004302:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004304:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004308:	ee07 3a10 	vmov	s14, r3
 800430c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004310:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004314:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004318:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800431c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004320:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004322:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004326:	ee06 3a90 	vmov	s13, r3
 800432a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800432e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004332:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004336:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800433a:	ee17 3a90 	vmov	r3, s15
 800433e:	6083      	str	r3, [r0, #8]
}
 8004340:	4770      	bx	lr
 8004342:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004344:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004348:	6083      	str	r3, [r0, #8]
}
 800434a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800434c:	6813      	ldr	r3, [r2, #0]
 800434e:	069b      	lsls	r3, r3, #26
 8004350:	d51d      	bpl.n	800438e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004352:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004354:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004358:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800435a:	4910      	ldr	r1, [pc, #64]	@ (800439c <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800435c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004360:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004364:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004366:	ee06 3a10 	vmov	s12, r3
 800436a:	ee05 1a90 	vmov	s11, r1
 800436e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004372:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004376:	ee36 6a27 	vadd.f32	s12, s12, s15
 800437a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800437e:	ee36 7a26 	vadd.f32	s14, s12, s13
 8004382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004386:	e7a9      	b.n	80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004388:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800438c:	e795      	b.n	80042ba <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800438e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8004392:	e792      	b.n	80042ba <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8004394:	58024400 	.word	0x58024400
 8004398:	4a742400 	.word	0x4a742400
 800439c:	03d09000 	.word	0x03d09000
 80043a0:	4bbebc20 	.word	0x4bbebc20
 80043a4:	4c742400 	.word	0x4c742400

080043a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043a8:	4a47      	ldr	r2, [pc, #284]	@ (80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 80043aa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80043ae:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043b0:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 80043b2:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80043b6:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043ba:	6c54      	ldr	r4, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 80043bc:	d05b      	beq.n	8004476 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043be:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043c2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043c6:	f001 0103 	and.w	r1, r1, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043ca:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043ce:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80043d2:	2901      	cmp	r1, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043d8:	ee06 4a90 	vmov	s13, r4
 80043dc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80043e0:	d003      	beq.n	80043ea <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80043e2:	2902      	cmp	r1, #2
 80043e4:	d06a      	beq.n	80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 80043e6:	2900      	cmp	r1, #0
 80043e8:	d04a      	beq.n	8004480 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043ea:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80043ee:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80043f2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80043f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004404:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004410:	4a2d      	ldr	r2, [pc, #180]	@ (80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8004412:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004416:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004418:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800441c:	ee07 3a10 	vmov	s14, r3
 8004420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004424:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004426:	ee37 7a06 	vadd.f32	s14, s14, s12
 800442a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800442e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004432:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004436:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004438:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800443c:	ee07 3a10 	vmov	s14, r3
 8004440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004444:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004448:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800444c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004450:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004454:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004456:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800445a:	ee06 3a90 	vmov	s13, r3
 800445e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004462:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004466:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800446a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800446e:	ee17 3a90 	vmov	r3, s15
 8004472:	6083      	str	r3, [r0, #8]
}
 8004474:	4770      	bx	lr
 8004476:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004478:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800447c:	6083      	str	r3, [r0, #8]
}
 800447e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004480:	6813      	ldr	r3, [r2, #0]
 8004482:	069b      	lsls	r3, r3, #26
 8004484:	d51d      	bpl.n	80044c2 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004486:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004488:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800448c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800448e:	4910      	ldr	r1, [pc, #64]	@ (80044d0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004490:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004494:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004498:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800449a:	ee06 3a10 	vmov	s12, r3
 800449e:	ee05 1a90 	vmov	s11, r1
 80044a2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80044a6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80044aa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80044ae:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80044b2:	ee36 7a26 	vadd.f32	s14, s12, s13
 80044b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ba:	e7a9      	b.n	8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044bc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80044c0:	e795      	b.n	80043ee <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80044d8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 80044c6:	e792      	b.n	80043ee <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80044c8:	58024400 	.word	0x58024400
 80044cc:	4a742400 	.word	0x4a742400
 80044d0:	03d09000 	.word	0x03d09000
 80044d4:	4bbebc20 	.word	0x4bbebc20
 80044d8:	4c742400 	.word	0x4c742400

080044dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e0:	461d      	mov	r5, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d156      	bne.n	8004598 <HAL_UART_Transmit+0xbc>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ea:	4688      	mov	r8, r1
 80044ec:	2900      	cmp	r1, #0
 80044ee:	d050      	beq.n	8004592 <HAL_UART_Transmit+0xb6>
 80044f0:	fab2 f982 	clz	r9, r2
 80044f4:	4616      	mov	r6, r2
 80044f6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80044fa:	2a00      	cmp	r2, #0
 80044fc:	d049      	beq.n	8004592 <HAL_UART_Transmit+0xb6>
    {
      return  HAL_ERROR;
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fe:	2321      	movs	r3, #33	@ 0x21
 8004500:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004506:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450a:	f7fc fd27 	bl	8000f5c <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004510:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8004512:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800451a:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451e:	d051      	beq.n	80045c4 <HAL_UART_Transmit+0xe8>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
 8004520:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004524:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8004526:	b292      	uxth	r2, r2
 8004528:	b1aa      	cbz	r2, 8004556 <HAL_UART_Transmit+0x7a>
 800452a:	1c68      	adds	r0, r5, #1
 800452c:	d126      	bne.n	800457c <HAL_UART_Transmit+0xa0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	0612      	lsls	r2, r2, #24
 8004532:	d5fc      	bpl.n	800452e <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8004534:	f1b8 0f00 	cmp.w	r8, #0
 8004538:	d026      	beq.n	8004588 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800453a:	f818 2b01 	ldrb.w	r2, [r8], #1
 800453e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8004540:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8004544:	3a01      	subs	r2, #1
 8004546:	b292      	uxth	r2, r2
 8004548:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800454c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8004550:	b292      	uxth	r2, r2
 8004552:	2a00      	cmp	r2, #0
 8004554:	d1e9      	bne.n	800452a <HAL_UART_Transmit+0x4e>
 8004556:	1c69      	adds	r1, r5, #1
 8004558:	d130      	bne.n	80045bc <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	0652      	lsls	r2, r2, #25
 800455e:	d5fc      	bpl.n	800455a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8004560:	2320      	movs	r3, #32
    return HAL_OK;
 8004562:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8004564:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8004568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456c:	f7fc fcf6 	bl	8000f5c <HAL_GetTick>
 8004570:	1bc0      	subs	r0, r0, r7
 8004572:	4285      	cmp	r5, r0
 8004574:	d313      	bcc.n	800459e <HAL_UART_Transmit+0xc2>
 8004576:	b195      	cbz	r5, 800459e <HAL_UART_Transmit+0xc2>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	0616      	lsls	r6, r2, #24
 8004580:	d5f4      	bpl.n	800456c <HAL_UART_Transmit+0x90>
      if (pdata8bits == NULL)
 8004582:	f1b8 0f00 	cmp.w	r8, #0
 8004586:	d1d8      	bne.n	800453a <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004588:	f839 2b02 	ldrh.w	r2, [r9], #2
 800458c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004590:	e7d5      	b.n	800453e <HAL_UART_Transmit+0x62>
      return  HAL_ERROR;
 8004592:	2001      	movs	r0, #1
}
 8004594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8004598:	2002      	movs	r0, #2
}
 800459a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->gState = HAL_UART_STATE_READY;
 800459e:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80045a0:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80045a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80045a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fc fcd7 	bl	8000f5c <HAL_GetTick>
 80045ae:	1bc3      	subs	r3, r0, r7
 80045b0:	429d      	cmp	r5, r3
 80045b2:	d3f4      	bcc.n	800459e <HAL_UART_Transmit+0xc2>
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	d0f2      	beq.n	800459e <HAL_UART_Transmit+0xc2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	065b      	lsls	r3, r3, #25
 80045c0:	d5f3      	bpl.n	80045aa <HAL_UART_Transmit+0xce>
 80045c2:	e7cd      	b.n	8004560 <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c4:	6923      	ldr	r3, [r4, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1aa      	bne.n	8004520 <HAL_UART_Transmit+0x44>
 80045ca:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80045cc:	4698      	mov	r8, r3
 80045ce:	e7a7      	b.n	8004520 <HAL_UART_Transmit+0x44>

080045d0 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045d0:	6901      	ldr	r1, [r0, #16]
 80045d2:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80045d4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045d6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d8:	49a6      	ldr	r1, [pc, #664]	@ (8004874 <UART_SetConfig+0x2a4>)
{
 80045da:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045dc:	6945      	ldr	r5, [r0, #20]
{
 80045de:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e0:	69c0      	ldr	r0, [r0, #28]
{
 80045e2:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045ea:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045ec:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045ee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045f2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80045fa:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045fc:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045fe:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004600:	4a9d      	ldr	r2, [pc, #628]	@ (8004878 <UART_SetConfig+0x2a8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	f000 811f 	beq.w	8004846 <UART_SetConfig+0x276>
    tmpreg |= huart->Init.OneBitSampling;
 8004608:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800460a:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800460c:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800460e:	4a9b      	ldr	r2, [pc, #620]	@ (800487c <UART_SetConfig+0x2ac>)
 8004610:	4032      	ands	r2, r6
 8004612:	4311      	orrs	r1, r2
 8004614:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004618:	f022 020f 	bic.w	r2, r2, #15
 800461c:	432a      	orrs	r2, r5
 800461e:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004620:	4a97      	ldr	r2, [pc, #604]	@ (8004880 <UART_SetConfig+0x2b0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d02e      	beq.n	8004684 <UART_SetConfig+0xb4>
 8004626:	4a97      	ldr	r2, [pc, #604]	@ (8004884 <UART_SetConfig+0x2b4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d020      	beq.n	800466e <UART_SetConfig+0x9e>
 800462c:	4a96      	ldr	r2, [pc, #600]	@ (8004888 <UART_SetConfig+0x2b8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01d      	beq.n	800466e <UART_SetConfig+0x9e>
 8004632:	4a96      	ldr	r2, [pc, #600]	@ (800488c <UART_SetConfig+0x2bc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01a      	beq.n	800466e <UART_SetConfig+0x9e>
 8004638:	4a95      	ldr	r2, [pc, #596]	@ (8004890 <UART_SetConfig+0x2c0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d017      	beq.n	800466e <UART_SetConfig+0x9e>
 800463e:	4a95      	ldr	r2, [pc, #596]	@ (8004894 <UART_SetConfig+0x2c4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d01f      	beq.n	8004684 <UART_SetConfig+0xb4>
 8004644:	4a94      	ldr	r2, [pc, #592]	@ (8004898 <UART_SetConfig+0x2c8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d011      	beq.n	800466e <UART_SetConfig+0x9e>
 800464a:	4a94      	ldr	r2, [pc, #592]	@ (800489c <UART_SetConfig+0x2cc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00e      	beq.n	800466e <UART_SetConfig+0x9e>
 8004650:	4a93      	ldr	r2, [pc, #588]	@ (80048a0 <UART_SetConfig+0x2d0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d016      	beq.n	8004684 <UART_SetConfig+0xb4>
 8004656:	4a93      	ldr	r2, [pc, #588]	@ (80048a4 <UART_SetConfig+0x2d4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <UART_SetConfig+0xb4>
        ret = HAL_ERROR;
 800465c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800465e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8004660:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 8004664:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8004666:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004668:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800466a:	b006      	add	sp, #24
 800466c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800466e:	4b8e      	ldr	r3, [pc, #568]	@ (80048a8 <UART_SetConfig+0x2d8>)
 8004670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	2b05      	cmp	r3, #5
 8004678:	d8f0      	bhi.n	800465c <UART_SetConfig+0x8c>
 800467a:	e8df f003 	tbb	[pc, r3]
 800467e:	5f9d      	.short	0x5f9d
 8004680:	977e7169 	.word	0x977e7169
 8004684:	4b88      	ldr	r3, [pc, #544]	@ (80048a8 <UART_SetConfig+0x2d8>)
 8004686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800468c:	2b28      	cmp	r3, #40	@ 0x28
 800468e:	d8e5      	bhi.n	800465c <UART_SetConfig+0x8c>
 8004690:	a201      	add	r2, pc, #4	@ (adr r2, 8004698 <UART_SetConfig+0xc8>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	08004813 	.word	0x08004813
 800469c:	0800465d 	.word	0x0800465d
 80046a0:	0800465d 	.word	0x0800465d
 80046a4:	0800465d 	.word	0x0800465d
 80046a8:	0800465d 	.word	0x0800465d
 80046ac:	0800465d 	.word	0x0800465d
 80046b0:	0800465d 	.word	0x0800465d
 80046b4:	0800465d 	.word	0x0800465d
 80046b8:	0800473d 	.word	0x0800473d
 80046bc:	0800465d 	.word	0x0800465d
 80046c0:	0800465d 	.word	0x0800465d
 80046c4:	0800465d 	.word	0x0800465d
 80046c8:	0800465d 	.word	0x0800465d
 80046cc:	0800465d 	.word	0x0800465d
 80046d0:	0800465d 	.word	0x0800465d
 80046d4:	0800465d 	.word	0x0800465d
 80046d8:	08004751 	.word	0x08004751
 80046dc:	0800465d 	.word	0x0800465d
 80046e0:	0800465d 	.word	0x0800465d
 80046e4:	0800465d 	.word	0x0800465d
 80046e8:	0800465d 	.word	0x0800465d
 80046ec:	0800465d 	.word	0x0800465d
 80046f0:	0800465d 	.word	0x0800465d
 80046f4:	0800465d 	.word	0x0800465d
 80046f8:	08004761 	.word	0x08004761
 80046fc:	0800465d 	.word	0x0800465d
 8004700:	0800465d 	.word	0x0800465d
 8004704:	0800465d 	.word	0x0800465d
 8004708:	0800465d 	.word	0x0800465d
 800470c:	0800465d 	.word	0x0800465d
 8004710:	0800465d 	.word	0x0800465d
 8004714:	0800465d 	.word	0x0800465d
 8004718:	0800477b 	.word	0x0800477b
 800471c:	0800465d 	.word	0x0800465d
 8004720:	0800465d 	.word	0x0800465d
 8004724:	0800465d 	.word	0x0800465d
 8004728:	0800465d 	.word	0x0800465d
 800472c:	0800465d 	.word	0x0800465d
 8004730:	0800465d 	.word	0x0800465d
 8004734:	0800465d 	.word	0x0800465d
 8004738:	080047ad 	.word	0x080047ad
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004740:	d040      	beq.n	80047c4 <UART_SetConfig+0x1f4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004742:	4668      	mov	r0, sp
 8004744:	f7ff fd96 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004748:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800474a:	b368      	cbz	r0, 80047a8 <UART_SetConfig+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800474c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800474e:	e018      	b.n	8004782 <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004750:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004754:	d06d      	beq.n	8004832 <UART_SetConfig+0x262>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004756:	a803      	add	r0, sp, #12
 8004758:	f7ff fe26 	bl	80043a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800475c:	9804      	ldr	r0, [sp, #16]
        break;
 800475e:	e7f4      	b.n	800474a <UART_SetConfig+0x17a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004760:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004764:	d05b      	beq.n	800481e <UART_SetConfig+0x24e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004766:	4b50      	ldr	r3, [pc, #320]	@ (80048a8 <UART_SetConfig+0x2d8>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	0692      	lsls	r2, r2, #26
 800476c:	d54c      	bpl.n	8004808 <UART_SetConfig+0x238>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	484e      	ldr	r0, [pc, #312]	@ (80048ac <UART_SetConfig+0x2dc>)
 8004772:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004776:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8004778:	e003      	b.n	8004782 <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 800477e:	484c      	ldr	r0, [pc, #304]	@ (80048b0 <UART_SetConfig+0x2e0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004780:	d027      	beq.n	80047d2 <UART_SetConfig+0x202>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004782:	4a4c      	ldr	r2, [pc, #304]	@ (80048b4 <UART_SetConfig+0x2e4>)
 8004784:	6863      	ldr	r3, [r4, #4]
 8004786:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800478e:	fbb0 f0f1 	udiv	r0, r0, r1
 8004792:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004796:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800479a:	f1a0 0310 	sub.w	r3, r0, #16
 800479e:	4293      	cmp	r3, r2
 80047a0:	f63f af5c 	bhi.w	800465c <UART_SetConfig+0x8c>
          huart->Instance->BRR = usartdiv;
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 80047a8:	2000      	movs	r0, #0
 80047aa:	e758      	b.n	800465e <UART_SetConfig+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80047b0:	d00f      	beq.n	80047d2 <UART_SetConfig+0x202>
        pclk = (uint32_t) LSE_VALUE;
 80047b2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80047b6:	e7e4      	b.n	8004782 <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80047bc:	d026      	beq.n	800480c <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80047be:	f7fe fcd1 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
        break;
 80047c2:	e7c2      	b.n	800474a <UART_SetConfig+0x17a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047c4:	4668      	mov	r0, sp
 80047c6:	f7ff fd55 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047ca:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d0eb      	beq.n	80047a8 <UART_SetConfig+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80047d2:	4b38      	ldr	r3, [pc, #224]	@ (80048b4 <UART_SetConfig+0x2e4>)
 80047d4:	6862      	ldr	r2, [r4, #4]
 80047d6:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80047da:	0853      	lsrs	r3, r2, #1
 80047dc:	fbb0 f0f1 	udiv	r0, r0, r1
 80047e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e4:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047e8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ec:	f1a3 0210 	sub.w	r2, r3, #16
 80047f0:	428a      	cmp	r2, r1
 80047f2:	f63f af33 	bhi.w	800465c <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f6:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047fa:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80047fe:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004800:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8004802:	4313      	orrs	r3, r2
 8004804:	60cb      	str	r3, [r1, #12]
 8004806:	e7cf      	b.n	80047a8 <UART_SetConfig+0x1d8>
          pclk = (uint32_t) HSI_VALUE;
 8004808:	4828      	ldr	r0, [pc, #160]	@ (80048ac <UART_SetConfig+0x2dc>)
 800480a:	e7ba      	b.n	8004782 <UART_SetConfig+0x1b2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800480c:	f7fe fcaa 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
        break;
 8004810:	e7dc      	b.n	80047cc <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004812:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004816:	d011      	beq.n	800483c <UART_SetConfig+0x26c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004818:	f7fe fcec 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
        break;
 800481c:	e795      	b.n	800474a <UART_SetConfig+0x17a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800481e:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <UART_SetConfig+0x2d8>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	0691      	lsls	r1, r2, #26
 8004824:	d50d      	bpl.n	8004842 <UART_SetConfig+0x272>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4820      	ldr	r0, [pc, #128]	@ (80048ac <UART_SetConfig+0x2dc>)
 800482a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800482e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8004830:	e7cf      	b.n	80047d2 <UART_SetConfig+0x202>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004832:	a803      	add	r0, sp, #12
 8004834:	f7ff fdb8 	bl	80043a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004838:	9804      	ldr	r0, [sp, #16]
        break;
 800483a:	e7c7      	b.n	80047cc <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800483c:	f7fe fcda 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8004840:	e7c4      	b.n	80047cc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004842:	481a      	ldr	r0, [pc, #104]	@ (80048ac <UART_SetConfig+0x2dc>)
 8004844:	e7c5      	b.n	80047d2 <UART_SetConfig+0x202>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004846:	6898      	ldr	r0, [r3, #8]
 8004848:	4a0c      	ldr	r2, [pc, #48]	@ (800487c <UART_SetConfig+0x2ac>)
 800484a:	4002      	ands	r2, r0
 800484c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800484e:	4916      	ldr	r1, [pc, #88]	@ (80048a8 <UART_SetConfig+0x2d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004850:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004854:	f022 020f 	bic.w	r2, r2, #15
 8004858:	432a      	orrs	r2, r5
 800485a:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800485c:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	2b05      	cmp	r3, #5
 8004864:	f63f aefa 	bhi.w	800465c <UART_SetConfig+0x8c>
 8004868:	e8df f003 	tbb	[pc, r3]
 800486c:	26525b60 	.word	0x26525b60
 8004870:	6366      	.short	0x6366
 8004872:	bf00      	nop
 8004874:	cfff69f3 	.word	0xcfff69f3
 8004878:	58000c00 	.word	0x58000c00
 800487c:	11fff4ff 	.word	0x11fff4ff
 8004880:	40011000 	.word	0x40011000
 8004884:	40004400 	.word	0x40004400
 8004888:	40004800 	.word	0x40004800
 800488c:	40004c00 	.word	0x40004c00
 8004890:	40005000 	.word	0x40005000
 8004894:	40011400 	.word	0x40011400
 8004898:	40007800 	.word	0x40007800
 800489c:	40007c00 	.word	0x40007c00
 80048a0:	40011800 	.word	0x40011800
 80048a4:	40011c00 	.word	0x40011c00
 80048a8:	58024400 	.word	0x58024400
 80048ac:	03d09000 	.word	0x03d09000
 80048b0:	003d0900 	.word	0x003d0900
 80048b4:	0800764c 	.word	0x0800764c
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b8:	4b23      	ldr	r3, [pc, #140]	@ (8004948 <UART_SetConfig+0x378>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	0690      	lsls	r0, r2, #26
 80048be:	d43d      	bmi.n	800493c <UART_SetConfig+0x36c>
          pclk = (uint32_t) HSI_VALUE;
 80048c0:	4822      	ldr	r0, [pc, #136]	@ (800494c <UART_SetConfig+0x37c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048c2:	4b23      	ldr	r3, [pc, #140]	@ (8004950 <UART_SetConfig+0x380>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048c4:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048c6:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ca:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048ce:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048d2:	4299      	cmp	r1, r3
 80048d4:	f63f aec2 	bhi.w	800465c <UART_SetConfig+0x8c>
 80048d8:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80048dc:	f63f aebe 	bhi.w	800465c <UART_SetConfig+0x8c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e0:	2300      	movs	r3, #0
 80048e2:	4619      	mov	r1, r3
 80048e4:	f7fb fd6c 	bl	80003c0 <__aeabi_uldivmod>
 80048e8:	4632      	mov	r2, r6
 80048ea:	0209      	lsls	r1, r1, #8
 80048ec:	0203      	lsls	r3, r0, #8
 80048ee:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80048f2:	0870      	lsrs	r0, r6, #1
 80048f4:	1818      	adds	r0, r3, r0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	f141 0100 	adc.w	r1, r1, #0
 80048fe:	f7fb fd5f 	bl	80003c0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004902:	4b14      	ldr	r3, [pc, #80]	@ (8004954 <UART_SetConfig+0x384>)
 8004904:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8004908:	429a      	cmp	r2, r3
 800490a:	f63f aea7 	bhi.w	800465c <UART_SetConfig+0x8c>
 800490e:	e749      	b.n	80047a4 <UART_SetConfig+0x1d4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004910:	a803      	add	r0, sp, #12
 8004912:	f7ff fd49 	bl	80043a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004916:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8004918:	2800      	cmp	r0, #0
 800491a:	f43f af45 	beq.w	80047a8 <UART_SetConfig+0x1d8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800491e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8004920:	e7cf      	b.n	80048c2 <UART_SetConfig+0x2f2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004922:	4668      	mov	r0, sp
 8004924:	f7ff fca6 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004928:	9801      	ldr	r0, [sp, #4]
        break;
 800492a:	e7f5      	b.n	8004918 <UART_SetConfig+0x348>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800492c:	f7ff fc90 	bl	8004250 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8004930:	e7f2      	b.n	8004918 <UART_SetConfig+0x348>
        pclk = (uint32_t) LSE_VALUE;
 8004932:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004936:	e7c4      	b.n	80048c2 <UART_SetConfig+0x2f2>
        pclk = (uint32_t) CSI_VALUE;
 8004938:	4807      	ldr	r0, [pc, #28]	@ (8004958 <UART_SetConfig+0x388>)
 800493a:	e7c2      	b.n	80048c2 <UART_SetConfig+0x2f2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4803      	ldr	r0, [pc, #12]	@ (800494c <UART_SetConfig+0x37c>)
 8004940:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004944:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8004946:	e7bc      	b.n	80048c2 <UART_SetConfig+0x2f2>
 8004948:	58024400 	.word	0x58024400
 800494c:	03d09000 	.word	0x03d09000
 8004950:	0800764c 	.word	0x0800764c
 8004954:	000ffcff 	.word	0x000ffcff
 8004958:	003d0900 	.word	0x003d0900

0800495c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800495c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800495e:	071a      	lsls	r2, r3, #28
{
 8004960:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004962:	d506      	bpl.n	8004972 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004964:	6801      	ldr	r1, [r0, #0]
 8004966:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004968:	684a      	ldr	r2, [r1, #4]
 800496a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800496e:	4322      	orrs	r2, r4
 8004970:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004972:	07dc      	lsls	r4, r3, #31
 8004974:	d506      	bpl.n	8004984 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004976:	6801      	ldr	r1, [r0, #0]
 8004978:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800497a:	684a      	ldr	r2, [r1, #4]
 800497c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004980:	4322      	orrs	r2, r4
 8004982:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004984:	0799      	lsls	r1, r3, #30
 8004986:	d506      	bpl.n	8004996 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004988:	6801      	ldr	r1, [r0, #0]
 800498a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800498c:	684a      	ldr	r2, [r1, #4]
 800498e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004992:	4322      	orrs	r2, r4
 8004994:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004996:	075a      	lsls	r2, r3, #29
 8004998:	d506      	bpl.n	80049a8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800499a:	6801      	ldr	r1, [r0, #0]
 800499c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800499e:	684a      	ldr	r2, [r1, #4]
 80049a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049a4:	4322      	orrs	r2, r4
 80049a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a8:	06dc      	lsls	r4, r3, #27
 80049aa:	d506      	bpl.n	80049ba <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049ac:	6801      	ldr	r1, [r0, #0]
 80049ae:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80049b0:	688a      	ldr	r2, [r1, #8]
 80049b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049b6:	4322      	orrs	r2, r4
 80049b8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ba:	0699      	lsls	r1, r3, #26
 80049bc:	d506      	bpl.n	80049cc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049be:	6801      	ldr	r1, [r0, #0]
 80049c0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80049c2:	688a      	ldr	r2, [r1, #8]
 80049c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049c8:	4322      	orrs	r2, r4
 80049ca:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	065a      	lsls	r2, r3, #25
 80049ce:	d50a      	bpl.n	80049e6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d0:	6801      	ldr	r1, [r0, #0]
 80049d2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80049d4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d6:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049da:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80049de:	ea42 0204 	orr.w	r2, r2, r4
 80049e2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049e4:	d00b      	beq.n	80049fe <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049e6:	061b      	lsls	r3, r3, #24
 80049e8:	d506      	bpl.n	80049f8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ea:	6802      	ldr	r2, [r0, #0]
 80049ec:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80049ee:	6853      	ldr	r3, [r2, #4]
 80049f0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6053      	str	r3, [r2, #4]
}
 80049f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049fc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049fe:	684a      	ldr	r2, [r1, #4]
 8004a00:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004a02:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004a06:	4322      	orrs	r2, r4
 8004a08:	604a      	str	r2, [r1, #4]
 8004a0a:	e7ec      	b.n	80049e6 <UART_AdvFeatureConfig+0x8a>

08004a0c <UART_CheckIdleState>:
{
 8004a0c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0e:	2300      	movs	r3, #0
{
 8004a10:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a12:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8004a16:	f7fc faa1 	bl	8000f5c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a1a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004a1c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a1e:	6813      	ldr	r3, [r2, #0]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	d40f      	bmi.n	8004a44 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a24:	6813      	ldr	r3, [r2, #0]
 8004a26:	0759      	lsls	r1, r3, #29
 8004a28:	d431      	bmi.n	8004a8e <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004a2c:	2220      	movs	r2, #32
  return HAL_OK;
 8004a2e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8004a30:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004a34:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a38:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a3a:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a44:	69d3      	ldr	r3, [r2, #28]
 8004a46:	0298      	lsls	r0, r3, #10
 8004a48:	d4ec      	bmi.n	8004a24 <UART_CheckIdleState+0x18>
 8004a4a:	e00c      	b.n	8004a66 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a4c:	6819      	ldr	r1, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	0749      	lsls	r1, r1, #29
 8004a52:	d505      	bpl.n	8004a60 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a54:	69d9      	ldr	r1, [r3, #28]
 8004a56:	0708      	lsls	r0, r1, #28
 8004a58:	d44a      	bmi.n	8004af0 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a5a:	69d9      	ldr	r1, [r3, #28]
 8004a5c:	0509      	lsls	r1, r1, #20
 8004a5e:	d475      	bmi.n	8004b4c <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	0298      	lsls	r0, r3, #10
 8004a64:	d4de      	bmi.n	8004a24 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fc fa79 	bl	8000f5c <HAL_GetTick>
 8004a6a:	1b43      	subs	r3, r0, r5
 8004a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a70:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	d3eb      	bcc.n	8004a4c <UART_CheckIdleState+0x40>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	e843 2100 	strex	r1, r2, [r3]
 8004a80:	2900      	cmp	r1, #0
 8004a82:	d1f7      	bne.n	8004a74 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8004a84:	2320      	movs	r3, #32
 8004a86:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8004a8a:	2003      	movs	r0, #3
 8004a8c:	e7d6      	b.n	8004a3c <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8e:	69d3      	ldr	r3, [r2, #28]
 8004a90:	025b      	lsls	r3, r3, #9
 8004a92:	d4ca      	bmi.n	8004a2a <UART_CheckIdleState+0x1e>
 8004a94:	e00d      	b.n	8004ab2 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	0750      	lsls	r0, r2, #29
 8004a9a:	d507      	bpl.n	8004aac <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	0711      	lsls	r1, r2, #28
 8004aa0:	f100 8082 	bmi.w	8004ba8 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aa4:	69da      	ldr	r2, [r3, #28]
 8004aa6:	0512      	lsls	r2, r2, #20
 8004aa8:	f100 80ac 	bmi.w	8004c04 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	025b      	lsls	r3, r3, #9
 8004ab0:	d4bb      	bmi.n	8004a2a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fc fa53 	bl	8000f5c <HAL_GetTick>
 8004ab6:	1b43      	subs	r3, r0, r5
 8004ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	d3ea      	bcc.n	8004a96 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ac4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	e843 2100 	strex	r1, r2, [r3]
 8004acc:	2900      	cmp	r1, #0
 8004ace:	d1f7      	bne.n	8004ac0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	f103 0208 	add.w	r2, r3, #8
 8004ad4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	f103 0008 	add.w	r0, r3, #8
 8004ae0:	e840 2100 	strex	r1, r2, [r0]
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	d1f3      	bne.n	8004ad0 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	2320      	movs	r3, #32
 8004aea:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8004aee:	e7cc      	b.n	8004a8a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004af0:	2208      	movs	r2, #8
 8004af2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004af8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	e843 2100 	strex	r1, r2, [r3]
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d1f7      	bne.n	8004af4 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b04:	4856      	ldr	r0, [pc, #344]	@ (8004c60 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	f103 0208 	add.w	r2, r3, #8
 8004b0a:	e852 2f00 	ldrex	r2, [r2]
 8004b0e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	f103 0508 	add.w	r5, r3, #8
 8004b14:	e845 2100 	strex	r1, r2, [r5]
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	d1f4      	bne.n	8004b06 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004b1e:	2a01      	cmp	r2, #1
 8004b20:	d00b      	beq.n	8004b3a <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b22:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004b24:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b26:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004b28:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b2c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8004b30:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b34:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8004b38:	e79c      	b.n	8004a74 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	e843 2100 	strex	r1, r2, [r3]
 8004b46:	2900      	cmp	r1, #0
 8004b48:	d1f7      	bne.n	8004b3a <UART_CheckIdleState+0x12e>
 8004b4a:	e7ea      	b.n	8004b22 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b50:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b56:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	e843 2100 	strex	r1, r2, [r3]
 8004b5e:	2900      	cmp	r1, #0
 8004b60:	d1f7      	bne.n	8004b52 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b62:	483f      	ldr	r0, [pc, #252]	@ (8004c60 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	f103 0208 	add.w	r2, r3, #8
 8004b68:	e852 2f00 	ldrex	r2, [r2]
 8004b6c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	f103 0508 	add.w	r5, r3, #8
 8004b72:	e845 2100 	strex	r1, r2, [r5]
 8004b76:	2900      	cmp	r1, #0
 8004b78:	d1f4      	bne.n	8004b64 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004b7c:	2a01      	cmp	r2, #1
 8004b7e:	d00a      	beq.n	8004b96 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b80:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004b82:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8004b84:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b86:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8004b8a:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b90:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8004b94:	e76e      	b.n	8004a74 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	e843 2100 	strex	r1, r2, [r3]
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	d1f7      	bne.n	8004b96 <UART_CheckIdleState+0x18a>
 8004ba6:	e7eb      	b.n	8004b80 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba8:	2208      	movs	r2, #8
 8004baa:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bb0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	e843 2100 	strex	r1, r2, [r3]
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d1f7      	bne.n	8004bac <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bbc:	4828      	ldr	r0, [pc, #160]	@ (8004c60 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	f103 0208 	add.w	r2, r3, #8
 8004bc2:	e852 2f00 	ldrex	r2, [r2]
 8004bc6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	f103 0508 	add.w	r5, r3, #8
 8004bcc:	e845 2100 	strex	r1, r2, [r5]
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d1f4      	bne.n	8004bbe <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004bd6:	2a01      	cmp	r2, #1
 8004bd8:	d00b      	beq.n	8004bf2 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004bdc:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bde:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004be0:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8004be4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8004be8:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bec:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8004bf0:	e766      	b.n	8004ac0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	e843 2100 	strex	r1, r2, [r3]
 8004bfe:	2900      	cmp	r1, #0
 8004c00:	d1f7      	bne.n	8004bf2 <UART_CheckIdleState+0x1e6>
 8004c02:	e7ea      	b.n	8004bda <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c08:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c0e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	e843 2100 	strex	r1, r2, [r3]
 8004c16:	2900      	cmp	r1, #0
 8004c18:	d1f7      	bne.n	8004c0a <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c1a:	4811      	ldr	r0, [pc, #68]	@ (8004c60 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	f103 0208 	add.w	r2, r3, #8
 8004c20:	e852 2f00 	ldrex	r2, [r2]
 8004c24:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	f103 0508 	add.w	r5, r3, #8
 8004c2a:	e845 2100 	strex	r1, r2, [r5]
 8004c2e:	2900      	cmp	r1, #0
 8004c30:	d1f4      	bne.n	8004c1c <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c32:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004c34:	2a01      	cmp	r2, #1
 8004c36:	d00a      	beq.n	8004c4e <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c38:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8004c3c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8004c42:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c46:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c48:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8004c4c:	e738      	b.n	8004ac0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c52:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	e843 2100 	strex	r1, r2, [r3]
 8004c5a:	2900      	cmp	r1, #0
 8004c5c:	d1f7      	bne.n	8004c4e <UART_CheckIdleState+0x242>
 8004c5e:	e7eb      	b.n	8004c38 <UART_CheckIdleState+0x22c>
 8004c60:	effffffe 	.word	0xeffffffe

08004c64 <HAL_UART_Init>:
  if (huart == NULL)
 8004c64:	b380      	cbz	r0, 8004cc8 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c66:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6e:	b333      	cbz	r3, 8004cbe <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8004c70:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c72:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c74:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8004c76:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8004c7a:	6813      	ldr	r3, [r2, #0]
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c82:	b9c1      	cbnz	r1, 8004cb6 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7ff fca3 	bl	80045d0 <UART_SetConfig>
 8004c8a:	2801      	cmp	r0, #1
 8004c8c:	d011      	beq.n	8004cb2 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004c90:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
}
 8004ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004cac:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004cae:	f7ff bead 	b.w	8004a0c <UART_CheckIdleState>
}
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7ff fe50 	bl	800495c <UART_AdvFeatureConfig>
 8004cbc:	e7e2      	b.n	8004c84 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8004cbe:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8004cc2:	f7fb ffb9 	bl	8000c38 <HAL_UART_MspInit>
 8004cc6:	e7d3      	b.n	8004c70 <HAL_UART_Init+0xc>
}
 8004cc8:	2001      	movs	r0, #1
 8004cca:	4770      	bx	lr

08004ccc <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ccc:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8004cd0:	2a01      	cmp	r2, #1
 8004cd2:	d017      	beq.n	8004d04 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cd4:	6802      	ldr	r2, [r0, #0]
 8004cd6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8004cd8:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cda:	2100      	movs	r1, #0
{
 8004cdc:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8004cde:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8004ce2:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ce4:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004ce6:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ce8:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8004cec:	f024 0401 	bic.w	r4, r4, #1
 8004cf0:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cf2:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cf4:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8004cf6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8004cf8:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004cfc:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8004d00:	bc30      	pop	{r4, r5}
 8004d02:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004d04:	2002      	movs	r0, #2
}
 8004d06:	4770      	bx	lr

08004d08 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d08:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8004d0c:	2a01      	cmp	r2, #1
 8004d0e:	d037      	beq.n	8004d80 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d10:	6802      	ldr	r2, [r0, #0]
 8004d12:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8004d14:	2024      	movs	r0, #36	@ 0x24
{
 8004d16:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8004d18:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d1c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d1e:	6810      	ldr	r0, [r2, #0]
 8004d20:	f020 0001 	bic.w	r0, r0, #1
 8004d24:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d26:	6890      	ldr	r0, [r2, #8]
 8004d28:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8004d2c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d2e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d30:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d32:	b310      	cbz	r0, 8004d7a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d34:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d36:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d38:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d3c:	4911      	ldr	r1, [pc, #68]	@ (8004d84 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d3e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d42:	4d11      	ldr	r5, [pc, #68]	@ (8004d88 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d44:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d48:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d4c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d50:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d52:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d56:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d58:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d5c:	fbb1 f1f5 	udiv	r1, r1, r5
 8004d60:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8004d64:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8004d66:	2100      	movs	r1, #0
 8004d68:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d6c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8004d6e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8004d70:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004d74:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8004d78:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8004d7a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	e7ef      	b.n	8004d60 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8004d80:	2002      	movs	r0, #2
}
 8004d82:	4770      	bx	lr
 8004d84:	0800766c 	.word	0x0800766c
 8004d88:	08007664 	.word	0x08007664

08004d8c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8004d8c:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8004d90:	2a01      	cmp	r2, #1
 8004d92:	d037      	beq.n	8004e04 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d94:	6802      	ldr	r2, [r0, #0]
 8004d96:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	2024      	movs	r0, #36	@ 0x24
{
 8004d9a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8004d9c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004da0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004da2:	6810      	ldr	r0, [r2, #0]
 8004da4:	f020 0001 	bic.w	r0, r0, #1
 8004da8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004daa:	6890      	ldr	r0, [r2, #8]
 8004dac:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8004db0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004db2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004db4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004db6:	b310      	cbz	r0, 8004dfe <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004db8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004dba:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004dbc:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dc0:	4911      	ldr	r1, [pc, #68]	@ (8004e08 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004dc2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8004dc6:	4d11      	ldr	r5, [pc, #68]	@ (8004e0c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dc8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004dcc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004dd0:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dd4:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8004dd6:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004dda:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ddc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004de0:	fbb1 f1f5 	udiv	r1, r1, r5
 8004de4:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8004de8:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8004dea:	2100      	movs	r1, #0
 8004dec:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004df0:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8004df2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8004df4:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004df8:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8004dfc:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8004dfe:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8004e00:	4608      	mov	r0, r1
 8004e02:	e7ef      	b.n	8004de4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8004e04:	2002      	movs	r0, #2
}
 8004e06:	4770      	bx	lr
 8004e08:	0800766c 	.word	0x0800766c
 8004e0c:	08007664 	.word	0x08007664

08004e10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e10:	b084      	sub	sp, #16
 8004e12:	b082      	sub	sp, #8
 8004e14:	f10d 0c0c 	add.w	ip, sp, #12
 8004e18:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e1c:	f89d 2011 	ldrb.w	r2, [sp, #17]
{
 8004e20:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e22:	2a01      	cmp	r2, #1
 8004e24:	d135      	bne.n	8004e92 <USB_CoreInit+0x82>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e26:	6b81      	ldr	r1, [r0, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e28:	f1a2 1242 	sub.w	r2, r2, #4325442	@ 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8004e2c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e30:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
    if (cfg.use_external_vbus == 1U)
 8004e34:	2801      	cmp	r0, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e36:	6399      	str	r1, [r3, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	ea02 0201 	and.w	r2, r2, r1
 8004e3e:	60da      	str	r2, [r3, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004e46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e48:	d068      	beq.n	8004f1c <USB_CoreInit+0x10c>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	9200      	str	r2, [sp, #0]
 8004e4e:	e002      	b.n	8004e56 <USB_CoreInit+0x46>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	2a00      	cmp	r2, #0
 8004e54:	db37      	blt.n	8004ec6 <USB_CoreInit+0xb6>
    count++;
 8004e56:	9a00      	ldr	r2, [sp, #0]
 8004e58:	3201      	adds	r2, #1
 8004e5a:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8004e5c:	9a00      	ldr	r2, [sp, #0]
 8004e5e:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8004e62:	d9f5      	bls.n	8004e50 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 8004e64:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 8004e66:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004e6a:	2a01      	cmp	r2, #1
 8004e6c:	d10e      	bne.n	8004e8c <USB_CoreInit+0x7c>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004e6e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004e70:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <USB_CoreInit+0x118>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004e72:	b289      	uxth	r1, r1
 8004e74:	65d9      	str	r1, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004e76:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	f042 0206 	orr.w	r2, r2, #6
 8004e82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	f042 0220 	orr.w	r2, r2, #32
 8004e8a:	609a      	str	r2, [r3, #8]
}
 8004e8c:	b002      	add	sp, #8
 8004e8e:	b004      	add	sp, #16
 8004e90:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e92:	68c2      	ldr	r2, [r0, #12]
  __IO uint32_t count = 0U;
 8004e94:	2100      	movs	r1, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e9a:	60c2      	str	r2, [r0, #12]
  __IO uint32_t count = 0U;
 8004e9c:	9101      	str	r1, [sp, #4]
 8004e9e:	e002      	b.n	8004ea6 <USB_CoreInit+0x96>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	db27      	blt.n	8004ef6 <USB_CoreInit+0xe6>
    count++;
 8004ea6:	9a01      	ldr	r2, [sp, #4]
 8004ea8:	3201      	adds	r2, #1
 8004eaa:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004eac:	9a01      	ldr	r2, [sp, #4]
 8004eae:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8004eb2:	d9f5      	bls.n	8004ea0 <USB_CoreInit+0x90>
      return HAL_TIMEOUT;
 8004eb4:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 8004eb6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004eba:	b9ba      	cbnz	r2, 8004eec <USB_CoreInit+0xdc>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ebe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ec2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ec4:	e7cf      	b.n	8004e66 <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	611a      	str	r2, [r3, #16]
 8004ed2:	e003      	b.n	8004edc <USB_CoreInit+0xcc>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ed4:	6918      	ldr	r0, [r3, #16]
 8004ed6:	f010 0001 	ands.w	r0, r0, #1
 8004eda:	d0c4      	beq.n	8004e66 <USB_CoreInit+0x56>
    count++;
 8004edc:	9a00      	ldr	r2, [sp, #0]
 8004ede:	3201      	adds	r2, #1
 8004ee0:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8004ee2:	9a00      	ldr	r2, [sp, #0]
 8004ee4:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8004ee8:	d9f4      	bls.n	8004ed4 <USB_CoreInit+0xc4>
 8004eea:	e7bb      	b.n	8004e64 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ef4:	e7b7      	b.n	8004e66 <USB_CoreInit+0x56>
  count = 0U;
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	611a      	str	r2, [r3, #16]
 8004f02:	e003      	b.n	8004f0c <USB_CoreInit+0xfc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f04:	6918      	ldr	r0, [r3, #16]
 8004f06:	f010 0001 	ands.w	r0, r0, #1
 8004f0a:	d0d4      	beq.n	8004eb6 <USB_CoreInit+0xa6>
    count++;
 8004f0c:	9a01      	ldr	r2, [sp, #4]
 8004f0e:	3201      	adds	r2, #1
 8004f10:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004f12:	9a01      	ldr	r2, [sp, #4]
 8004f14:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8004f18:	d9f4      	bls.n	8004f04 <USB_CoreInit+0xf4>
 8004f1a:	e7cb      	b.n	8004eb4 <USB_CoreInit+0xa4>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	e791      	b.n	8004e4a <USB_CoreInit+0x3a>
 8004f26:	bf00      	nop
 8004f28:	03ee0000 	.word	0x03ee0000

08004f2c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004f2c:	2a02      	cmp	r2, #2
{
 8004f2e:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8004f30:	d00a      	beq.n	8004f48 <USB_SetTurnaroundTime+0x1c>
 8004f32:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f36:	68da      	ldr	r2, [r3, #12]
}
 8004f38:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f3a:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 8004f3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	60da      	str	r2, [r3, #12]
}
 8004f46:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f48:	4a23      	ldr	r2, [pc, #140]	@ (8004fd8 <USB_SetTurnaroundTime+0xac>)
 8004f4a:	4824      	ldr	r0, [pc, #144]	@ (8004fdc <USB_SetTurnaroundTime+0xb0>)
 8004f4c:	440a      	add	r2, r1
 8004f4e:	4282      	cmp	r2, r0
 8004f50:	d92c      	bls.n	8004fac <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f52:	4a23      	ldr	r2, [pc, #140]	@ (8004fe0 <USB_SetTurnaroundTime+0xb4>)
 8004f54:	4823      	ldr	r0, [pc, #140]	@ (8004fe4 <USB_SetTurnaroundTime+0xb8>)
 8004f56:	440a      	add	r2, r1
 8004f58:	4282      	cmp	r2, r0
 8004f5a:	d92a      	bls.n	8004fb2 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f5c:	4a22      	ldr	r2, [pc, #136]	@ (8004fe8 <USB_SetTurnaroundTime+0xbc>)
 8004f5e:	4823      	ldr	r0, [pc, #140]	@ (8004fec <USB_SetTurnaroundTime+0xc0>)
 8004f60:	440a      	add	r2, r1
 8004f62:	4282      	cmp	r2, r0
 8004f64:	d928      	bls.n	8004fb8 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f66:	4a22      	ldr	r2, [pc, #136]	@ (8004ff0 <USB_SetTurnaroundTime+0xc4>)
 8004f68:	4822      	ldr	r0, [pc, #136]	@ (8004ff4 <USB_SetTurnaroundTime+0xc8>)
 8004f6a:	440a      	add	r2, r1
 8004f6c:	4282      	cmp	r2, r0
 8004f6e:	d326      	bcc.n	8004fbe <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f70:	4a21      	ldr	r2, [pc, #132]	@ (8004ff8 <USB_SetTurnaroundTime+0xcc>)
 8004f72:	4822      	ldr	r0, [pc, #136]	@ (8004ffc <USB_SetTurnaroundTime+0xd0>)
 8004f74:	440a      	add	r2, r1
 8004f76:	4282      	cmp	r2, r0
 8004f78:	d924      	bls.n	8004fc4 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f7a:	4a21      	ldr	r2, [pc, #132]	@ (8005000 <USB_SetTurnaroundTime+0xd4>)
 8004f7c:	4821      	ldr	r0, [pc, #132]	@ (8005004 <USB_SetTurnaroundTime+0xd8>)
 8004f7e:	440a      	add	r2, r1
 8004f80:	4282      	cmp	r2, r0
 8004f82:	d322      	bcc.n	8004fca <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f84:	4a20      	ldr	r2, [pc, #128]	@ (8005008 <USB_SetTurnaroundTime+0xdc>)
 8004f86:	4821      	ldr	r0, [pc, #132]	@ (800500c <USB_SetTurnaroundTime+0xe0>)
 8004f88:	440a      	add	r2, r1
 8004f8a:	4282      	cmp	r2, r0
 8004f8c:	d3d1      	bcc.n	8004f32 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f8e:	4a20      	ldr	r2, [pc, #128]	@ (8005010 <USB_SetTurnaroundTime+0xe4>)
 8004f90:	4820      	ldr	r0, [pc, #128]	@ (8005014 <USB_SetTurnaroundTime+0xe8>)
 8004f92:	440a      	add	r2, r1
 8004f94:	4282      	cmp	r2, r0
 8004f96:	d31b      	bcc.n	8004fd0 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f98:	4a1f      	ldr	r2, [pc, #124]	@ (8005018 <USB_SetTurnaroundTime+0xec>)
 8004f9a:	4820      	ldr	r0, [pc, #128]	@ (800501c <USB_SetTurnaroundTime+0xf0>)
 8004f9c:	440a      	add	r2, r1
 8004f9e:	4282      	cmp	r2, r0
 8004fa0:	bf2c      	ite	cs
 8004fa2:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 8004fa6:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 8004faa:	e7c4      	b.n	8004f36 <USB_SetTurnaroundTime+0xa>
 8004fac:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8004fb0:	e7c1      	b.n	8004f36 <USB_SetTurnaroundTime+0xa>
 8004fb2:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8004fb6:	e7be      	b.n	8004f36 <USB_SetTurnaroundTime+0xa>
 8004fb8:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8004fbc:	e7bb      	b.n	8004f36 <USB_SetTurnaroundTime+0xa>
 8004fbe:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8004fc2:	e7b8      	b.n	8004f36 <USB_SetTurnaroundTime+0xa>
 8004fc4:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 8004fc8:	e7b5      	b.n	8004f36 <USB_SetTurnaroundTime+0xa>
 8004fca:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8004fce:	e7b2      	b.n	8004f36 <USB_SetTurnaroundTime+0xa>
 8004fd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004fd4:	e7af      	b.n	8004f36 <USB_SetTurnaroundTime+0xa>
 8004fd6:	bf00      	nop
 8004fd8:	ff275340 	.word	0xff275340
 8004fdc:	000c34ff 	.word	0x000c34ff
 8004fe0:	ff1b1e40 	.word	0xff1b1e40
 8004fe4:	000f423f 	.word	0x000f423f
 8004fe8:	ff0bdc00 	.word	0xff0bdc00
 8004fec:	00124f7f 	.word	0x00124f7f
 8004ff0:	fef98c80 	.word	0xfef98c80
 8004ff4:	0013d620 	.word	0x0013d620
 8004ff8:	fee5b660 	.word	0xfee5b660
 8004ffc:	0016e35f 	.word	0x0016e35f
 8005000:	feced300 	.word	0xfeced300
 8005004:	001b7740 	.word	0x001b7740
 8005008:	feb35bc0 	.word	0xfeb35bc0
 800500c:	002191c0 	.word	0x002191c0
 8005010:	fe91ca00 	.word	0xfe91ca00
 8005014:	00387520 	.word	0x00387520
 8005018:	fe5954e0 	.word	0xfe5954e0
 800501c:	00419ce0 	.word	0x00419ce0

08005020 <USB_EnableGlobalInt>:
{
 8005020:	4603      	mov	r3, r0
}
 8005022:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	609a      	str	r2, [r3, #8]
}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop

08005030 <USB_DisableGlobalInt>:
{
 8005030:	4603      	mov	r3, r0
}
 8005032:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	609a      	str	r2, [r3, #8]
}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop

08005040 <USB_SetCurrentMode>:
{
 8005040:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005042:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005044:	2901      	cmp	r1, #1
{
 8005046:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005048:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800504c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800504e:	d017      	beq.n	8005080 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8005050:	b9a1      	cbnz	r1, 800507c <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005052:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8005054:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005056:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800505a:	60c3      	str	r3, [r0, #12]
 800505c:	e001      	b.n	8005062 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800505e:	2cc8      	cmp	r4, #200	@ 0xc8
 8005060:	d00c      	beq.n	800507c <USB_SetCurrentMode+0x3c>
      HAL_Delay(10U);
 8005062:	200a      	movs	r0, #10
      ms += 10U;
 8005064:	4404      	add	r4, r0
      HAL_Delay(10U);
 8005066:	f7fb ff7f 	bl	8000f68 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800506a:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800506c:	07db      	lsls	r3, r3, #31
 800506e:	d4f6      	bmi.n	800505e <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005070:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8005074:	fab0 f080 	clz	r0, r0
 8005078:	0940      	lsrs	r0, r0, #5
}
 800507a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800507c:	2001      	movs	r0, #1
}
 800507e:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005080:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8005082:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005084:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005088:	60c3      	str	r3, [r0, #12]
 800508a:	e001      	b.n	8005090 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800508c:	2cc8      	cmp	r4, #200	@ 0xc8
 800508e:	d0f5      	beq.n	800507c <USB_SetCurrentMode+0x3c>
      HAL_Delay(10U);
 8005090:	200a      	movs	r0, #10
      ms += 10U;
 8005092:	4404      	add	r4, r0
      HAL_Delay(10U);
 8005094:	f7fb ff68 	bl	8000f68 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8005098:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800509a:	07da      	lsls	r2, r3, #31
 800509c:	d5f6      	bpl.n	800508c <USB_SetCurrentMode+0x4c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800509e:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 80050a2:	fab0 f080 	clz	r0, r0
 80050a6:	0940      	lsrs	r0, r0, #5
 80050a8:	e7e7      	b.n	800507a <USB_SetCurrentMode+0x3a>
 80050aa:	bf00      	nop

080050ac <USB_DevInit>:
{
 80050ac:	b084      	sub	sp, #16
 80050ae:	4684      	mov	ip, r0
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b4:	b082      	sub	sp, #8
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050b6:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
{
 80050ba:	ac09      	add	r4, sp, #36	@ 0x24
 80050bc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	f89d 402e 	ldrb.w	r4, [sp, #46]	@ 0x2e
 80050c6:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
 80050ca:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
 80050ce:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
 80050d2:	f8c0 310c 	str.w	r3, [r0, #268]	@ 0x10c
 80050d6:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
 80050da:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
 80050de:	f8c0 3118 	str.w	r3, [r0, #280]	@ 0x118
 80050e2:	f8c0 311c 	str.w	r3, [r0, #284]	@ 0x11c
 80050e6:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
 80050ea:	f8c0 3124 	str.w	r3, [r0, #292]	@ 0x124
 80050ee:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
 80050f2:	f8c0 312c 	str.w	r3, [r0, #300]	@ 0x12c
 80050f6:	f8c0 3130 	str.w	r3, [r0, #304]	@ 0x130
 80050fa:	f8c0 3134 	str.w	r3, [r0, #308]	@ 0x134
 80050fe:	f8c0 3138 	str.w	r3, [r0, #312]	@ 0x138
 8005102:	f8c0 313c 	str.w	r3, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8005106:	2c00      	cmp	r4, #0
 8005108:	f040 80bf 	bne.w	800528a <USB_DevInit+0x1de>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800510c:	f8de 3004 	ldr.w	r3, [lr, #4]
 8005110:	f043 0302 	orr.w	r3, r3, #2
 8005114:	f8ce 3004 	str.w	r3, [lr, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005118:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800511a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800511e:	6383      	str	r3, [r0, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005120:	6803      	ldr	r3, [r0, #0]
 8005122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005126:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005128:	6803      	ldr	r3, [r0, #0]
 800512a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800512e:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	f8cc 3e00 	str.w	r3, [ip, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005136:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 800513a:	2b01      	cmp	r3, #1
 800513c:	f000 80b1 	beq.w	80052a2 <USB_DevInit+0x1f6>
  USBx_DEVICE->DCFG |= speed;
 8005140:	f8dc 3800 	ldr.w	r3, [ip, #2048]	@ 0x800
 8005144:	f043 0303 	orr.w	r3, r3, #3
 8005148:	f8cc 3800 	str.w	r3, [ip, #2048]	@ 0x800
  __IO uint32_t count = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	e004      	b.n	800515c <USB_DevInit+0xb0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005152:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f2c0 80be 	blt.w	80052d8 <USB_DevInit+0x22c>
    count++;
 800515c:	9b00      	ldr	r3, [sp, #0]
 800515e:	3301      	adds	r3, #1
 8005160:	9300      	str	r3, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8005162:	9b00      	ldr	r3, [sp, #0]
 8005164:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005168:	d9f3      	bls.n	8005152 <USB_DevInit+0xa6>
 800516a:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	e004      	b.n	800517c <USB_DevInit+0xd0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005172:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f2c0 809b 	blt.w	80052b2 <USB_DevInit+0x206>
    count++;
 800517c:	9b01      	ldr	r3, [sp, #4]
 800517e:	3301      	adds	r3, #1
 8005180:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8005182:	9b01      	ldr	r3, [sp, #4]
 8005184:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005188:	d9f3      	bls.n	8005172 <USB_DevInit+0xc6>
    ret = HAL_ERROR;
 800518a:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800518c:	2200      	movs	r2, #0
 800518e:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005192:	f8ce 2014 	str.w	r2, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005196:	f8ce 201c 	str.w	r2, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800519a:	b305      	cbz	r5, 80051de <USB_DevInit+0x132>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800519c:	f8dc 1900 	ldr.w	r1, [ip, #2304]	@ 0x900
 80051a0:	f50c 6310 	add.w	r3, ip, #2304	@ 0x900
 80051a4:	2900      	cmp	r1, #0
 80051a6:	db14      	blt.n	80051d2 <USB_DevInit+0x126>
      USBx_INEP(i)->DIEPCTL = 0U;
 80051a8:	2600      	movs	r6, #0
 80051aa:	4611      	mov	r1, r2
 80051ac:	601e      	str	r6, [r3, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ae:	2700      	movs	r7, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051b0:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b4:	1c4a      	adds	r2, r1, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051b6:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051b8:	609e      	str	r6, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ba:	3320      	adds	r3, #32
 80051bc:	4295      	cmp	r5, r2
 80051be:	d040      	beq.n	8005242 <USB_DevInit+0x196>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	2900      	cmp	r1, #0
 80051c4:	daf0      	bge.n	80051a8 <USB_DevInit+0xfc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051c6:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ca:	4611      	mov	r1, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051cc:	f8c3 8000 	str.w	r8, [r3]
 80051d0:	e7f0      	b.n	80051b4 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051d2:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d6:	4611      	mov	r1, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051d8:	f8cc 6900 	str.w	r6, [ip, #2304]	@ 0x900
 80051dc:	e7e7      	b.n	80051ae <USB_DevInit+0x102>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051de:	f8de 3010 	ldr.w	r3, [lr, #16]
  USBx->GINTMSK = 0U;
 80051e2:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e8:	f8ce 3010 	str.w	r3, [lr, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051ec:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
  USBx->GINTMSK = 0U;
 80051f0:	f8cc 2018 	str.w	r2, [ip, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051f4:	f8cc 3014 	str.w	r3, [ip, #20]
  if (cfg.dma_enable == 0U)
 80051f8:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 80051fc:	b92b      	cbnz	r3, 800520a <USB_DevInit+0x15e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051fe:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8005202:	f043 0310 	orr.w	r3, r3, #16
 8005206:	f8cc 3018 	str.w	r3, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800520a:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800520e:	4b40      	ldr	r3, [pc, #256]	@ (8005310 <USB_DevInit+0x264>)
 8005210:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8005212:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005216:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.Sof_enable != 0U)
 800521a:	b12a      	cbz	r2, 8005228 <USB_DevInit+0x17c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800521c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8005220:	f043 0308 	orr.w	r3, r3, #8
 8005224:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8005228:	2c01      	cmp	r4, #1
 800522a:	d105      	bne.n	8005238 <USB_DevInit+0x18c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800522c:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8005230:	4b38      	ldr	r3, [pc, #224]	@ (8005314 <USB_DevInit+0x268>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8cc 3018 	str.w	r3, [ip, #24]
}
 8005238:	b002      	add	sp, #8
 800523a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800523e:	b004      	add	sp, #16
 8005240:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005242:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	@ 0xb00
 8005246:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 800524a:	2a00      	cmp	r2, #0
 800524c:	db17      	blt.n	800527e <USB_DevInit+0x1d2>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800524e:	2500      	movs	r5, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005250:	2600      	movs	r6, #0
 8005252:	462a      	mov	r2, r5
 8005254:	601e      	str	r6, [r3, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005256:	2700      	movs	r7, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005258:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800525c:	4291      	cmp	r1, r2
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800525e:	611f      	str	r7, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005260:	f102 0501 	add.w	r5, r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005264:	609e      	str	r6, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005266:	f103 0320 	add.w	r3, r3, #32
 800526a:	d0b8      	beq.n	80051de <USB_DevInit+0x132>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	2a00      	cmp	r2, #0
 8005270:	daee      	bge.n	8005250 <USB_DevInit+0x1a4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005272:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
 8005276:	462a      	mov	r2, r5
 8005278:	f8c3 8000 	str.w	r8, [r3]
 800527c:	e7ee      	b.n	800525c <USB_DevInit+0x1b0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800527e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005282:	f8cc 2b00 	str.w	r2, [ip, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005286:	2200      	movs	r2, #0
 8005288:	e7e5      	b.n	8005256 <USB_DevInit+0x1aa>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800528a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800528c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005290:	6383      	str	r3, [r0, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	f8cc 3e00 	str.w	r3, [ip, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005298:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 800529c:	2b01      	cmp	r3, #1
 800529e:	f47f af4f 	bne.w	8005140 <USB_DevInit+0x94>
    if (cfg.speed == USBD_HS_SPEED)
 80052a2:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80052a6:	bb63      	cbnz	r3, 8005302 <USB_DevInit+0x256>
  USBx_DEVICE->DCFG |= speed;
 80052a8:	f8dc 3800 	ldr.w	r3, [ip, #2048]	@ 0x800
 80052ac:	f8cc 3800 	str.w	r3, [ip, #2048]	@ 0x800
  return HAL_OK;
 80052b0:	e74c      	b.n	800514c <USB_DevInit+0xa0>
  count = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052b6:	2310      	movs	r3, #16
 80052b8:	f8cc 3010 	str.w	r3, [ip, #16]
 80052bc:	e004      	b.n	80052c8 <USB_DevInit+0x21c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052be:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80052c2:	06db      	lsls	r3, r3, #27
 80052c4:	f57f af62 	bpl.w	800518c <USB_DevInit+0xe0>
    count++;
 80052c8:	9b01      	ldr	r3, [sp, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80052ce:	9b01      	ldr	r3, [sp, #4]
 80052d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052d4:	d9f3      	bls.n	80052be <USB_DevInit+0x212>
 80052d6:	e758      	b.n	800518a <USB_DevInit+0xde>
  count = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052dc:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80052e0:	f8cc 3010 	str.w	r3, [ip, #16]
 80052e4:	e005      	b.n	80052f2 <USB_DevInit+0x246>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052e6:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80052ea:	f010 0020 	ands.w	r0, r0, #32
 80052ee:	f43f af3d 	beq.w	800516c <USB_DevInit+0xc0>
    count++;
 80052f2:	9b00      	ldr	r3, [sp, #0]
 80052f4:	3301      	adds	r3, #1
 80052f6:	9300      	str	r3, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 80052f8:	9b00      	ldr	r3, [sp, #0]
 80052fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052fe:	d9f2      	bls.n	80052e6 <USB_DevInit+0x23a>
 8005300:	e733      	b.n	800516a <USB_DevInit+0xbe>
  USBx_DEVICE->DCFG |= speed;
 8005302:	f8dc 3800 	ldr.w	r3, [ip, #2048]	@ 0x800
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	f8cc 3800 	str.w	r3, [ip, #2048]	@ 0x800
  return HAL_OK;
 800530e:	e71d      	b.n	800514c <USB_DevInit+0xa0>
 8005310:	803c3800 	.word	0x803c3800
 8005314:	40000004 	.word	0x40000004

08005318 <USB_FlushTxFifo>:
{
 8005318:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	e002      	b.n	8005326 <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005320:	6903      	ldr	r3, [r0, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	db09      	blt.n	800533a <USB_FlushTxFifo+0x22>
    count++;
 8005326:	9b01      	ldr	r3, [sp, #4]
 8005328:	3301      	adds	r3, #1
 800532a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800532c:	9b01      	ldr	r3, [sp, #4]
 800532e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005332:	d9f5      	bls.n	8005320 <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 8005334:	2003      	movs	r0, #3
}
 8005336:	b002      	add	sp, #8
 8005338:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800533a:	0189      	lsls	r1, r1, #6
  count = 0U;
 800533c:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800533e:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8005342:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005344:	6101      	str	r1, [r0, #16]
 8005346:	e003      	b.n	8005350 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005348:	6903      	ldr	r3, [r0, #16]
 800534a:	f013 0320 	ands.w	r3, r3, #32
 800534e:	d007      	beq.n	8005360 <USB_FlushTxFifo+0x48>
    count++;
 8005350:	9b01      	ldr	r3, [sp, #4]
 8005352:	3301      	adds	r3, #1
 8005354:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8005356:	9b01      	ldr	r3, [sp, #4]
 8005358:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800535c:	d9f4      	bls.n	8005348 <USB_FlushTxFifo+0x30>
 800535e:	e7e9      	b.n	8005334 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 8005360:	4618      	mov	r0, r3
}
 8005362:	b002      	add	sp, #8
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop

08005368 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005368:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800536c:	f013 0006 	ands.w	r0, r3, #6
 8005370:	d004      	beq.n	800537c <USB_GetDevSpeed+0x14>
    speed = USBD_FS_SPEED;
 8005372:	f013 0f02 	tst.w	r3, #2
 8005376:	bf0c      	ite	eq
 8005378:	200f      	moveq	r0, #15
 800537a:	2002      	movne	r0, #2
}
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop

08005380 <USB_ActivateEndpoint>:
{
 8005380:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8005382:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005384:	2301      	movs	r3, #1
 8005386:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
 800538a:	f002 0e0f 	and.w	lr, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800538e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005392:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 8005396:	f891 e001 	ldrb.w	lr, [r1, #1]
 800539a:	f1be 0f01 	cmp.w	lr, #1
 800539e:	d018      	beq.n	80053d2 <USB_ActivateEndpoint+0x52>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053a0:	f8dc 201c 	ldr.w	r2, [ip, #28]
 80053a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80053a8:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053ac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	d40c      	bmi.n	80053ce <USB_ActivateEndpoint+0x4e>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053b4:	688b      	ldr	r3, [r1, #8]
 80053b6:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 80053ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053be:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053c0:	4a11      	ldr	r2, [pc, #68]	@ (8005408 <USB_ActivateEndpoint+0x88>)
 80053c2:	4323      	orrs	r3, r4
 80053c4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80053c8:	431a      	orrs	r2, r3
 80053ca:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
}
 80053ce:	2000      	movs	r0, #0
 80053d0:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053d2:	f8dc 401c 	ldr.w	r4, [ip, #28]
 80053d6:	4323      	orrs	r3, r4
 80053d8:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053dc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80053e0:	041c      	lsls	r4, r3, #16
 80053e2:	d4f4      	bmi.n	80053ce <USB_ActivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e4:	688b      	ldr	r3, [r1, #8]
 80053e6:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
 80053ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053ee:	790c      	ldrb	r4, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053f0:	4905      	ldr	r1, [pc, #20]	@ (8005408 <USB_ActivateEndpoint+0x88>)
 80053f2:	432b      	orrs	r3, r5
 80053f4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80053f8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80053fc:	4319      	orrs	r1, r3
 80053fe:	f8c0 1900 	str.w	r1, [r0, #2304]	@ 0x900
}
 8005402:	2000      	movs	r0, #0
 8005404:	bd30      	pop	{r4, r5, pc}
 8005406:	bf00      	nop
 8005408:	10008000 	.word	0x10008000

0800540c <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 800540c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800540e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005410:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005412:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8005416:	d02a      	beq.n	800546e <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005418:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	@ 0xb00
 800541c:	2a00      	cmp	r2, #0
 800541e:	db19      	blt.n	8005454 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005420:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005430:	4a23      	ldr	r2, [pc, #140]	@ (80054c0 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005432:	ea21 0103 	bic.w	r1, r1, r3
 8005436:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800543a:	f8d0 181c 	ldr.w	r1, [r0, #2076]	@ 0x81c
 800543e:	ea21 0303 	bic.w	r3, r1, r3
 8005442:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
}
 8005446:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005448:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800544c:	401a      	ands	r2, r3
 800544e:	f8cc 2b00 	str.w	r2, [ip, #2816]	@ 0xb00
}
 8005452:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005454:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	@ 0xb00
 8005458:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800545c:	f8cc 2b00 	str.w	r2, [ip, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005460:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	@ 0xb00
 8005464:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005468:	f8cc 2b00 	str.w	r2, [ip, #2816]	@ 0xb00
 800546c:	e7d8      	b.n	8005420 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800546e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	@ 0x900
 8005472:	2a00      	cmp	r2, #0
 8005474:	da0b      	bge.n	800548e <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005476:	f8dc 2900 	ldr.w	r2, [ip, #2304]	@ 0x900
 800547a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800547e:	f8cc 2900 	str.w	r2, [ip, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005482:	f8dc 2900 	ldr.w	r2, [ip, #2304]	@ 0x900
 8005486:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800548a:	f8cc 2900 	str.w	r2, [ip, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800548e:	f003 020f 	and.w	r2, r3, #15
 8005492:	2301      	movs	r3, #1
 8005494:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 8005498:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800549a:	4a0a      	ldr	r2, [pc, #40]	@ (80054c4 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800549c:	ea21 0103 	bic.w	r1, r1, r3
 80054a0:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054a4:	f8d0 181c 	ldr.w	r1, [r0, #2076]	@ 0x81c
 80054a8:	ea21 0303 	bic.w	r3, r1, r3
 80054ac:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
}
 80054b0:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054b2:	f8dc 3900 	ldr.w	r3, [ip, #2304]	@ 0x900
 80054b6:	401a      	ands	r2, r3
 80054b8:	f8cc 2900 	str.w	r2, [ip, #2304]	@ 0x900
}
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	eff37800 	.word	0xeff37800
 80054c4:	ec337800 	.word	0xec337800

080054c8 <USB_EPStartXfer>:
{
 80054c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 80054cc:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80054ce:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
 80054d0:	2c01      	cmp	r4, #1
    if (ep->xfer_len == 0U)
 80054d2:	690d      	ldr	r5, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054d4:	eb00 1346 	add.w	r3, r0, r6, lsl #5
        if (ep->type == EP_TYPE_ISOC)
 80054d8:	f891 e004 	ldrb.w	lr, [r1, #4]
  if (ep->is_in == 1U)
 80054dc:	d05f      	beq.n	800559e <USB_EPStartXfer+0xd6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054de:	f8d3 7b10 	ldr.w	r7, [r3, #2832]	@ 0xb10
 80054e2:	f503 6c30 	add.w	ip, r3, #2816	@ 0xb00
 80054e6:	4c88      	ldr	r4, [pc, #544]	@ (8005708 <USB_EPStartXfer+0x240>)
 80054e8:	403c      	ands	r4, r7
 80054ea:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054ee:	4c87      	ldr	r4, [pc, #540]	@ (800570c <USB_EPStartXfer+0x244>)
 80054f0:	f8d3 7b10 	ldr.w	r7, [r3, #2832]	@ 0xb10
 80054f4:	403c      	ands	r4, r7
 80054f6:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
        ep->xfer_len = ep->maxpacket;
 80054fa:	688c      	ldr	r4, [r1, #8]
    if (epnum == 0U)
 80054fc:	bb5e      	cbnz	r6, 8005556 <USB_EPStartXfer+0x8e>
      if (ep->xfer_len > 0U)
 80054fe:	b105      	cbz	r5, 8005502 <USB_EPStartXfer+0x3a>
        ep->xfer_len = ep->maxpacket;
 8005500:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8005502:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005504:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8005508:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800550c:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800550e:	ea44 0405 	orr.w	r4, r4, r5
 8005512:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005516:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800551a:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800551e:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8005522:	d036      	beq.n	8005592 <USB_EPStartXfer+0xca>
    if (ep->type == EP_TYPE_ISOC)
 8005524:	f1be 0f01 	cmp.w	lr, #1
 8005528:	d10c      	bne.n	8005544 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800552a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 800552e:	f412 7f80 	tst.w	r2, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005532:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005536:	bf0c      	ite	eq
 8005538:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800553c:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8005540:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005544:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8005548:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 800554c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8005550:	2000      	movs	r0, #0
 8005552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->xfer_len == 0U)
 8005556:	2d00      	cmp	r5, #0
 8005558:	d0d4      	beq.n	8005504 <USB_EPStartXfer+0x3c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800555a:	4425      	add	r5, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800555c:	4e6c      	ldr	r6, [pc, #432]	@ (8005710 <USB_EPStartXfer+0x248>)
    if (dma == 1U)
 800555e:	2a01      	cmp	r2, #1
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005560:	f105 35ff 	add.w	r5, r5, #4294967295
 8005564:	fbb5 f5f4 	udiv	r5, r5, r4
 8005568:	b2ad      	uxth	r5, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 800556a:	fb05 f404 	mul.w	r4, r5, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800556e:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8005572:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005576:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005578:	f3c4 0412 	ubfx	r4, r4, #0, #19
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800557c:	ea45 0506 	orr.w	r5, r5, r6
 8005580:	f8cc 5010 	str.w	r5, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005584:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8005588:	ea44 0405 	orr.w	r4, r4, r5
 800558c:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8005590:	d1c8      	bne.n	8005524 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005592:	68ca      	ldr	r2, [r1, #12]
 8005594:	2a00      	cmp	r2, #0
 8005596:	d0c5      	beq.n	8005524 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005598:	f8cc 2014 	str.w	r2, [ip, #20]
 800559c:	e7c2      	b.n	8005524 <USB_EPStartXfer+0x5c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800559e:	f503 6410 	add.w	r4, r3, #2304	@ 0x900
 80055a2:	f8d4 c010 	ldr.w	ip, [r4, #16]
    if (ep->xfer_len == 0U)
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	d138      	bne.n	800561c <USB_EPStartXfer+0x154>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055aa:	4f58      	ldr	r7, [pc, #352]	@ (800570c <USB_EPStartXfer+0x244>)
    if (dma == 1U)
 80055ac:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055ae:	ea0c 0707 	and.w	r7, ip, r7
 80055b2:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055b4:	6927      	ldr	r7, [r4, #16]
 80055b6:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
 80055ba:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055bc:	4f52      	ldr	r7, [pc, #328]	@ (8005708 <USB_EPStartXfer+0x240>)
 80055be:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80055c2:	ea0c 0707 	and.w	r7, ip, r7
 80055c6:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 80055c8:	d05b      	beq.n	8005682 <USB_EPStartXfer+0x1ba>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055ca:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80055ce:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055d2:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 80055d6:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80055da:	d1b9      	bne.n	8005550 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055dc:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
 80055e0:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055e4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80055e8:	bf0c      	ite	eq
 80055ea:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055ee:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
 80055f2:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
  if (dma == 0U)
 80055f6:	2a00      	cmp	r2, #0
 80055f8:	d1aa      	bne.n	8005550 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 80055fa:	b2ad      	uxth	r5, r5
 80055fc:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 80055fe:	08ad      	lsrs	r5, r5, #2
 8005600:	d0a6      	beq.n	8005550 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005602:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005604:	eb00 3606 	add.w	r6, r0, r6, lsl #12
 8005608:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 800560c:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8005610:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8005614:	4299      	cmp	r1, r3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005616:	6032      	str	r2, [r6, #0]
    for (i = 0U; i < count32b; i++)
 8005618:	d1fa      	bne.n	8005610 <USB_EPStartXfer+0x148>
 800561a:	e799      	b.n	8005550 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800561c:	4f3a      	ldr	r7, [pc, #232]	@ (8005708 <USB_EPStartXfer+0x240>)
 800561e:	ea0c 0707 	and.w	r7, ip, r7
 8005622:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005624:	4f39      	ldr	r7, [pc, #228]	@ (800570c <USB_EPStartXfer+0x244>)
 8005626:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800562a:	ea0c 0707 	and.w	r7, ip, r7
        if (ep->xfer_len > ep->maxpacket)
 800562e:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005632:	6127      	str	r7, [r4, #16]
      if (epnum == 0U)
 8005634:	2e00      	cmp	r6, #0
 8005636:	d140      	bne.n	80056ba <USB_EPStartXfer+0x1f2>
        if (ep->xfer_len > ep->maxpacket)
 8005638:	45ac      	cmp	ip, r5
 800563a:	d361      	bcc.n	8005700 <USB_EPStartXfer+0x238>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800563c:	6927      	ldr	r7, [r4, #16]
 800563e:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
 8005642:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005644:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8005648:	f3c5 0712 	ubfx	r7, r5, #0, #19
    if (dma == 1U)
 800564c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800564e:	ea47 070c 	orr.w	r7, r7, ip
 8005652:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 8005654:	d015      	beq.n	8005682 <USB_EPStartXfer+0x1ba>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005656:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 800565a:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800565e:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 8005662:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005666:	d0b9      	beq.n	80055dc <USB_EPStartXfer+0x114>
        if (ep->xfer_len > 0U)
 8005668:	2d00      	cmp	r5, #0
 800566a:	f43f af71 	beq.w	8005550 <USB_EPStartXfer+0x88>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800566e:	f006 060f 	and.w	r6, r6, #15
 8005672:	2301      	movs	r3, #1
 8005674:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 8005678:	40b3      	lsls	r3, r6
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8005680:	e766      	b.n	8005550 <USB_EPStartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 8005682:	69ca      	ldr	r2, [r1, #28]
 8005684:	b102      	cbz	r2, 8005688 <USB_EPStartXfer+0x1c0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005686:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8005688:	f1be 0f01 	cmp.w	lr, #1
 800568c:	d10c      	bne.n	80056a8 <USB_EPStartXfer+0x1e0>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800568e:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8005692:	f412 7f80 	tst.w	r2, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005696:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800569a:	bf0c      	ite	eq
 800569c:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056a0:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 80056a4:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056a8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 80056ac:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056ae:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 80056b2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 80056b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056ba:	eb0c 0705 	add.w	r7, ip, r5
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80056be:	f8d4 8010 	ldr.w	r8, [r4, #16]
        if (ep->type == EP_TYPE_ISOC)
 80056c2:	f1be 0f01 	cmp.w	lr, #1
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056c6:	f107 37ff 	add.w	r7, r7, #4294967295
 80056ca:	fbb7 f7fc 	udiv	r7, r7, ip
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80056ce:	f8df c040 	ldr.w	ip, [pc, #64]	@ 8005710 <USB_EPStartXfer+0x248>
 80056d2:	ea0c 4cc7 	and.w	ip, ip, r7, lsl #19
 80056d6:	b2bf      	uxth	r7, r7
 80056d8:	ea4c 0c08 	orr.w	ip, ip, r8
 80056dc:	f8c4 c010 	str.w	ip, [r4, #16]
        if (ep->type == EP_TYPE_ISOC)
 80056e0:	d1b0      	bne.n	8005644 <USB_EPStartXfer+0x17c>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056e2:	f8d4 c010 	ldr.w	ip, [r4, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80056e6:	077f      	lsls	r7, r7, #29
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056e8:	f02c 4cc0 	bic.w	ip, ip, #1610612736	@ 0x60000000
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80056ec:	f007 47c0 	and.w	r7, r7, #1610612736	@ 0x60000000
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056f0:	f8c4 c010 	str.w	ip, [r4, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80056f4:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80056f8:	ea47 070c 	orr.w	r7, r7, ip
 80056fc:	6127      	str	r7, [r4, #16]
 80056fe:	e7a1      	b.n	8005644 <USB_EPStartXfer+0x17c>
          ep->xfer_len = ep->maxpacket;
 8005700:	4665      	mov	r5, ip
 8005702:	f8c1 c010 	str.w	ip, [r1, #16]
 8005706:	e799      	b.n	800563c <USB_EPStartXfer+0x174>
 8005708:	fff80000 	.word	0xfff80000
 800570c:	e007ffff 	.word	0xe007ffff
 8005710:	1ff80000 	.word	0x1ff80000

08005714 <USB_EPStopXfer>:
{
 8005714:	b410      	push	{r4}
  __IO uint32_t count = 0U;
 8005716:	2300      	movs	r3, #0
{
 8005718:	b083      	sub	sp, #12
  if (ep->is_in == 1U)
 800571a:	784a      	ldrb	r2, [r1, #1]
  __IO uint32_t count = 0U;
 800571c:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 800571e:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005720:	780b      	ldrb	r3, [r1, #0]
 8005722:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8005726:	d023      	beq.n	8005770 <USB_EPStopXfer+0x5c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005728:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 800572c:	58c1      	ldr	r1, [r0, r3]
 800572e:	18c2      	adds	r2, r0, r3
 8005730:	2900      	cmp	r1, #0
 8005732:	db04      	blt.n	800573e <USB_EPStopXfer+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;
 8005734:	2000      	movs	r0, #0
}
 8005736:	b003      	add	sp, #12
 8005738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800573c:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800573e:	58c4      	ldr	r4, [r0, r3]
        if (count > 10000U)
 8005740:	f242 7110 	movw	r1, #10000	@ 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005744:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8005748:	50c4      	str	r4, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800574a:	58c4      	ldr	r4, [r0, r3]
 800574c:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8005750:	50c4      	str	r4, [r0, r3]
 8005752:	e002      	b.n	800575a <USB_EPStopXfer+0x46>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005754:	6813      	ldr	r3, [r2, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	daec      	bge.n	8005734 <USB_EPStopXfer+0x20>
        count++;
 800575a:	9b01      	ldr	r3, [sp, #4]
 800575c:	3301      	adds	r3, #1
 800575e:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	428b      	cmp	r3, r1
 8005764:	d9f6      	bls.n	8005754 <USB_EPStopXfer+0x40>
          ret = HAL_ERROR;
 8005766:	2001      	movs	r0, #1
}
 8005768:	b003      	add	sp, #12
 800576a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800576e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005770:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8005774:	58c1      	ldr	r1, [r0, r3]
 8005776:	18c2      	adds	r2, r0, r3
 8005778:	2900      	cmp	r1, #0
 800577a:	dadb      	bge.n	8005734 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800577c:	58c4      	ldr	r4, [r0, r3]
        if (count > 10000U)
 800577e:	f242 7110 	movw	r1, #10000	@ 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005782:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8005786:	50c4      	str	r4, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005788:	58c4      	ldr	r4, [r0, r3]
 800578a:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800578e:	50c4      	str	r4, [r0, r3]
 8005790:	e002      	b.n	8005798 <USB_EPStopXfer+0x84>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	dacd      	bge.n	8005734 <USB_EPStopXfer+0x20>
        count++;
 8005798:	9b01      	ldr	r3, [sp, #4]
 800579a:	3301      	adds	r3, #1
 800579c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800579e:	9b01      	ldr	r3, [sp, #4]
 80057a0:	428b      	cmp	r3, r1
 80057a2:	d9f6      	bls.n	8005792 <USB_EPStopXfer+0x7e>
 80057a4:	e7df      	b.n	8005766 <USB_EPStopXfer+0x52>
 80057a6:	bf00      	nop

080057a8 <USB_WritePacket>:
{
 80057a8:	b410      	push	{r4}
 80057aa:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 80057ae:	b964      	cbnz	r4, 80057ca <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 80057b0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	d009      	beq.n	80057ca <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057b6:	3201      	adds	r2, #1
 80057b8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80057bc:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80057c0:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 80057c4:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057c6:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80057c8:	d1fa      	bne.n	80057c0 <USB_WritePacket+0x18>
}
 80057ca:	2000      	movs	r0, #0
 80057cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop

080057d4 <USB_ReadPacket>:
{
 80057d4:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 80057d6:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 80057da:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 80057dc:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 80057e0:	d01a      	beq.n	8005818 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057e2:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  uint8_t *pDest = dest;
 80057e6:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 80057e8:	2300      	movs	r3, #0
 80057ea:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057ec:	6822      	ldr	r2, [r4, #0]
  for (i = 0U; i < count32b; i++)
 80057ee:	459e      	cmp	lr, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057f0:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 80057f4:	d1f9      	bne.n	80057ea <USB_ReadPacket+0x16>
    pDest++;
 80057f6:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 80057fa:	b166      	cbz	r6, 8005816 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057fc:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
    } while (remaining_bytes != 0U);
 8005800:	2e01      	cmp	r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005802:	682b      	ldr	r3, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005804:	7003      	strb	r3, [r0, #0]
    } while (remaining_bytes != 0U);
 8005806:	d005      	beq.n	8005814 <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005808:	0a1a      	lsrs	r2, r3, #8
    } while (remaining_bytes != 0U);
 800580a:	2e02      	cmp	r6, #2
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800580c:	7042      	strb	r2, [r0, #1]
    } while (remaining_bytes != 0U);
 800580e:	d001      	beq.n	8005814 <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	7083      	strb	r3, [r0, #2]
      pDest++;
 8005814:	4430      	add	r0, r6
}
 8005816:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8005818:	4608      	mov	r0, r1
 800581a:	e7ee      	b.n	80057fa <USB_ReadPacket+0x26>

0800581c <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800581c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800581e:	784a      	ldrb	r2, [r1, #1]
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005820:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005824:	3b00      	subs	r3, #0
 8005826:	bf18      	it	ne
 8005828:	2301      	movne	r3, #1
  if (ep->is_in == 1U)
 800582a:	2a01      	cmp	r2, #1
 800582c:	d00c      	beq.n	8005848 <USB_EPSetStall+0x2c>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800582e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8005832:	2a00      	cmp	r2, #0
 8005834:	db00      	blt.n	8005838 <USB_EPSetStall+0x1c>
 8005836:	b9a3      	cbnz	r3, 8005862 <USB_EPSetStall+0x46>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005838:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800583c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005840:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8005844:	2000      	movs	r0, #0
 8005846:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005848:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800584c:	2a00      	cmp	r2, #0
 800584e:	db00      	blt.n	8005852 <USB_EPSetStall+0x36>
 8005850:	b973      	cbnz	r3, 8005870 <USB_EPSetStall+0x54>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005852:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005856:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800585a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800585e:	2000      	movs	r0, #0
 8005860:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005862:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005866:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800586a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800586e:	e7e3      	b.n	8005838 <USB_EPSetStall+0x1c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005870:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005874:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005878:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800587c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005884:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8005888:	e7e9      	b.n	800585e <USB_EPSetStall+0x42>
 800588a:	bf00      	nop

0800588c <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800588c:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 800588e:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005890:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005894:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 8005896:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005898:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800589c:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 800589e:	d011      	beq.n	80058c4 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058a0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058a4:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058a6:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80058aa:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058ae:	d901      	bls.n	80058b4 <USB_EPClearStall+0x28>
}
 80058b0:	2000      	movs	r0, #0
 80058b2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80058b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80058c0:	2000      	movs	r0, #0
 80058c2:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058c4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058c8:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058ca:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80058ce:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058d2:	d8ed      	bhi.n	80058b0 <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058d4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058dc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 80058e0:	2000      	movs	r0, #0
 80058e2:	4770      	bx	lr

080058e4 <USB_SetDevAddress>:
{
 80058e4:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058e6:	0109      	lsls	r1, r1, #4
}
 80058e8:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058ea:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058ee:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058f2:	f422 62fe 	bic.w	r2, r2, #2032	@ 0x7f0
 80058f6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058fa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80058fe:	4311      	orrs	r1, r2
 8005900:	f8c3 1800 	str.w	r1, [r3, #2048]	@ 0x800
}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop

08005908 <USB_DevConnect>:
{
 8005908:	4603      	mov	r3, r0
}
 800590a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800590c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005910:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005914:	f022 0203 	bic.w	r2, r2, #3
 8005918:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800591c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8005920:	f023 0302 	bic.w	r3, r3, #2
 8005924:	604b      	str	r3, [r1, #4]
}
 8005926:	4770      	bx	lr

08005928 <USB_DevDisconnect>:
{
 8005928:	4603      	mov	r3, r0
}
 800592a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800592c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005930:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005934:	f022 0203 	bic.w	r2, r2, #3
 8005938:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800593c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8005940:	f043 0302 	orr.w	r3, r3, #2
 8005944:	604b      	str	r3, [r1, #4]
}
 8005946:	4770      	bx	lr

08005948 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005948:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800594a:	6980      	ldr	r0, [r0, #24]
}
 800594c:	4010      	ands	r0, r2
 800594e:	4770      	bx	lr

08005950 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005950:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005954:	f8d0 081c 	ldr.w	r0, [r0, #2076]	@ 0x81c
 8005958:	4018      	ands	r0, r3
}
 800595a:	0c00      	lsrs	r0, r0, #16
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop

08005960 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005960:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005964:	f8d0 081c 	ldr.w	r0, [r0, #2076]	@ 0x81c
 8005968:	4018      	ands	r0, r3
}
 800596a:	b280      	uxth	r0, r0
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop

08005970 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005970:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005974:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005978:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800597c:	6940      	ldr	r0, [r0, #20]
}
 800597e:	4010      	ands	r0, r2
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop

08005984 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8005984:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005988:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800598c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005990:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005994:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005998:	40cb      	lsrs	r3, r1
 800599a:	01db      	lsls	r3, r3, #7
 800599c:	b2db      	uxtb	r3, r3
 800599e:	4313      	orrs	r3, r2
}
 80059a0:	4018      	ands	r0, r3
 80059a2:	4770      	bx	lr

080059a4 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80059a4:	6940      	ldr	r0, [r0, #20]
}
 80059a6:	f000 0001 	and.w	r0, r0, #1
 80059aa:	4770      	bx	lr

080059ac <USB_ActivateSetup>:
{
 80059ac:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059ae:	4a09      	ldr	r2, [pc, #36]	@ (80059d4 <USB_ActivateSetup+0x28>)
}
 80059b0:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059b2:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
{
 80059b6:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059b8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80059bc:	4022      	ands	r2, r4
}
 80059be:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059c2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059c6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80059ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ce:	604b      	str	r3, [r1, #4]
}
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	fffff800 	.word	0xfffff800

080059d8 <USB_EP0_OutStart>:
{
 80059d8:	b430      	push	{r4, r5}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80059da:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059dc:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059e0:	4c10      	ldr	r4, [pc, #64]	@ (8005a24 <USB_EP0_OutStart+0x4c>)
 80059e2:	42a5      	cmp	r5, r4
 80059e4:	d903      	bls.n	80059ee <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059e6:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 80059ea:	2c00      	cmp	r4, #0
 80059ec:	db16      	blt.n	8005a1c <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059ee:	2400      	movs	r4, #0
  if (dma == 1U)
 80059f0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059f2:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f4:	691c      	ldr	r4, [r3, #16]
 80059f6:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80059fa:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059fc:	691c      	ldr	r4, [r3, #16]
 80059fe:	f044 0418 	orr.w	r4, r4, #24
 8005a02:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a04:	691c      	ldr	r4, [r3, #16]
 8005a06:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8005a0a:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8005a0c:	d106      	bne.n	8005a1c <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a0e:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a10:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005a14:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005a18:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	bc30      	pop	{r4, r5}
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	4f54300a 	.word	0x4f54300a

08005a28 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a28:	4603      	mov	r3, r0
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4

  return (uint8_t)USBD_OK;
}
 8005a30:	4608      	mov	r0, r1
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005a32:	32b0      	adds	r2, #176	@ 0xb0
 8005a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a38:	7319      	strb	r1, [r3, #12]
}
 8005a3a:	4770      	bx	lr

08005a3c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a3c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a3e:	220a      	movs	r2, #10

  return USBD_HID_DeviceQualifierDesc;
}
 8005a40:	4801      	ldr	r0, [pc, #4]	@ (8005a48 <USBD_HID_GetDeviceQualifierDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a42:	801a      	strh	r2, [r3, #0]
}
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	24000050 	.word	0x24000050

08005a4c <USBD_HID_GetFSCfgDesc>:
{
 8005a4c:	b510      	push	{r4, lr}
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a4e:	2181      	movs	r1, #129	@ 0x81
{
 8005a50:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a52:	4805      	ldr	r0, [pc, #20]	@ (8005a68 <USBD_HID_GetFSCfgDesc+0x1c>)
 8005a54:	f000 faae 	bl	8005fb4 <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8005a58:	b108      	cbz	r0, 8005a5e <USBD_HID_GetFSCfgDesc+0x12>
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005a5a:	230a      	movs	r3, #10
 8005a5c:	7183      	strb	r3, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a5e:	2322      	movs	r3, #34	@ 0x22
}
 8005a60:	4801      	ldr	r0, [pc, #4]	@ (8005a68 <USBD_HID_GetFSCfgDesc+0x1c>)
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a62:	8023      	strh	r3, [r4, #0]
}
 8005a64:	bd10      	pop	{r4, pc}
 8005a66:	bf00      	nop
 8005a68:	24000068 	.word	0x24000068

08005a6c <USBD_HID_GetHSCfgDesc>:
{
 8005a6c:	b510      	push	{r4, lr}
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a6e:	2181      	movs	r1, #129	@ 0x81
{
 8005a70:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a72:	4805      	ldr	r0, [pc, #20]	@ (8005a88 <USBD_HID_GetHSCfgDesc+0x1c>)
 8005a74:	f000 fa9e 	bl	8005fb4 <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8005a78:	b108      	cbz	r0, 8005a7e <USBD_HID_GetHSCfgDesc+0x12>
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005a7a:	2307      	movs	r3, #7
 8005a7c:	7183      	strb	r3, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a7e:	2322      	movs	r3, #34	@ 0x22
}
 8005a80:	4801      	ldr	r0, [pc, #4]	@ (8005a88 <USBD_HID_GetHSCfgDesc+0x1c>)
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a82:	8023      	strh	r3, [r4, #0]
}
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	bf00      	nop
 8005a88:	24000068 	.word	0x24000068

08005a8c <USBD_HID_Setup>:
{
 8005a8c:	b510      	push	{r4, lr}
  uint16_t status_info = 0U;
 8005a8e:	2300      	movs	r3, #0
{
 8005a90:	b082      	sub	sp, #8
  uint16_t status_info = 0U;
 8005a92:	f8ad 3006 	strh.w	r3, [sp, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a96:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005a9a:	33b0      	adds	r3, #176	@ 0xb0
 8005a9c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  if (hhid == NULL)
 8005aa0:	b13c      	cbz	r4, 8005ab2 <USBD_HID_Setup+0x26>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aa2:	780b      	ldrb	r3, [r1, #0]
 8005aa4:	f013 0360 	ands.w	r3, r3, #96	@ 0x60
 8005aa8:	d022      	beq.n	8005af0 <USBD_HID_Setup+0x64>
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d004      	beq.n	8005ab8 <USBD_HID_Setup+0x2c>
            USBD_CtlError(pdev, req);
 8005aae:	f000 fd4d 	bl	800654c <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 8005ab2:	2003      	movs	r0, #3
}
 8005ab4:	b002      	add	sp, #8
 8005ab6:	bd10      	pop	{r4, pc}
      switch (req->bRequest)
 8005ab8:	784b      	ldrb	r3, [r1, #1]
 8005aba:	3b02      	subs	r3, #2
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	d8f6      	bhi.n	8005aae <USBD_HID_Setup+0x22>
 8005ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <USBD_HID_Setup+0x3c>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005b47 	.word	0x08005b47
 8005acc:	08005b3d 	.word	0x08005b3d
 8005ad0:	08005aaf 	.word	0x08005aaf
 8005ad4:	08005aaf 	.word	0x08005aaf
 8005ad8:	08005aaf 	.word	0x08005aaf
 8005adc:	08005aaf 	.word	0x08005aaf
 8005ae0:	08005aaf 	.word	0x08005aaf
 8005ae4:	08005aaf 	.word	0x08005aaf
 8005ae8:	08005b35 	.word	0x08005b35
 8005aec:	08005b2d 	.word	0x08005b2d
      switch (req->bRequest)
 8005af0:	784b      	ldrb	r3, [r1, #1]
 8005af2:	2b0b      	cmp	r3, #11
 8005af4:	d8db      	bhi.n	8005aae <USBD_HID_Setup+0x22>
 8005af6:	a201      	add	r2, pc, #4	@ (adr r2, 8005afc <USBD_HID_Setup+0x70>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b7b 	.word	0x08005b7b
 8005b00:	08005b31 	.word	0x08005b31
 8005b04:	08005aaf 	.word	0x08005aaf
 8005b08:	08005aaf 	.word	0x08005aaf
 8005b0c:	08005aaf 	.word	0x08005aaf
 8005b10:	08005aaf 	.word	0x08005aaf
 8005b14:	08005b5f 	.word	0x08005b5f
 8005b18:	08005aaf 	.word	0x08005aaf
 8005b1c:	08005aaf 	.word	0x08005aaf
 8005b20:	08005aaf 	.word	0x08005aaf
 8005b24:	08005b8f 	.word	0x08005b8f
 8005b28:	08005b51 	.word	0x08005b51
          hhid->Protocol = (uint8_t)(req->wValue);
 8005b2c:	788b      	ldrb	r3, [r1, #2]
 8005b2e:	6023      	str	r3, [r4, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b30:	2000      	movs	r0, #0
 8005b32:	e7bf      	b.n	8005ab4 <USBD_HID_Setup+0x28>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005b34:	884b      	ldrh	r3, [r1, #2]
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	6063      	str	r3, [r4, #4]
          break;
 8005b3a:	e7f9      	b.n	8005b30 <USBD_HID_Setup+0xa4>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	4621      	mov	r1, r4
 8005b40:	f000 fd3c 	bl	80065bc <USBD_CtlSendData>
          break;
 8005b44:	e7f4      	b.n	8005b30 <USBD_HID_Setup+0xa4>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005b46:	2201      	movs	r2, #1
 8005b48:	1d21      	adds	r1, r4, #4
 8005b4a:	f000 fd37 	bl	80065bc <USBD_CtlSendData>
          break;
 8005b4e:	e7ef      	b.n	8005b30 <USBD_HID_Setup+0xa4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b50:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d1aa      	bne.n	8005aae <USBD_HID_Setup+0x22>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005b58:	788b      	ldrb	r3, [r1, #2]
 8005b5a:	60a3      	str	r3, [r4, #8]
 8005b5c:	e7e8      	b.n	8005b30 <USBD_HID_Setup+0xa4>
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005b5e:	884b      	ldrh	r3, [r1, #2]
 8005b60:	0a1b      	lsrs	r3, r3, #8
 8005b62:	2b22      	cmp	r3, #34	@ 0x22
 8005b64:	d01d      	beq.n	8005ba2 <USBD_HID_Setup+0x116>
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005b66:	2b21      	cmp	r3, #33	@ 0x21
 8005b68:	d1a1      	bne.n	8005aae <USBD_HID_Setup+0x22>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005b6a:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_HID_Desc;
 8005b6c:	4910      	ldr	r1, [pc, #64]	@ (8005bb0 <USBD_HID_Setup+0x124>)
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005b6e:	2a09      	cmp	r2, #9
 8005b70:	bf28      	it	cs
 8005b72:	2209      	movcs	r2, #9
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b74:	f000 fd22 	bl	80065bc <USBD_CtlSendData>
          break;
 8005b78:	e7da      	b.n	8005b30 <USBD_HID_Setup+0xa4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b7a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d195      	bne.n	8005aae <USBD_HID_Setup+0x22>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b82:	2202      	movs	r2, #2
 8005b84:	f10d 0106 	add.w	r1, sp, #6
 8005b88:	f000 fd18 	bl	80065bc <USBD_CtlSendData>
 8005b8c:	e7d0      	b.n	8005b30 <USBD_HID_Setup+0xa4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d18b      	bne.n	8005aae <USBD_HID_Setup+0x22>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005b96:	2201      	movs	r2, #1
 8005b98:	f104 0108 	add.w	r1, r4, #8
 8005b9c:	f000 fd0e 	bl	80065bc <USBD_CtlSendData>
 8005ba0:	e7c6      	b.n	8005b30 <USBD_HID_Setup+0xa4>
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005ba2:	88ca      	ldrh	r2, [r1, #6]
            pbuf = HID_MOUSE_ReportDesc;
 8005ba4:	4903      	ldr	r1, [pc, #12]	@ (8005bb4 <USBD_HID_Setup+0x128>)
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005ba6:	2a3f      	cmp	r2, #63	@ 0x3f
 8005ba8:	bf28      	it	cs
 8005baa:	223f      	movcs	r2, #63	@ 0x3f
            pbuf = HID_MOUSE_ReportDesc;
 8005bac:	e7e2      	b.n	8005b74 <USBD_HID_Setup+0xe8>
 8005bae:	bf00      	nop
 8005bb0:	2400005c 	.word	0x2400005c
 8005bb4:	24000010 	.word	0x24000010

08005bb8 <USBD_HID_DeInit>:
{
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005bbc:	2181      	movs	r1, #129	@ 0x81
 8005bbe:	f000 ff9f 	bl	8006b00 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005bc2:	2500      	movs	r5, #0
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005bc4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005bc8:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005bca:	33b0      	adds	r3, #176	@ 0xb0
 8005bcc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8005bd0:	b130      	cbz	r0, 8005be0 <USBD_HID_DeInit+0x28>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bd2:	f000 fff5 	bl	8006bc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bd6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005bda:	33b0      	adds	r3, #176	@ 0xb0
 8005bdc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
}
 8005be0:	2000      	movs	r0, #0
 8005be2:	bd38      	pop	{r3, r4, r5, pc}

08005be4 <USBD_HID_Init>:
{
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4604      	mov	r4, r0
  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005be8:	2010      	movs	r0, #16
 8005bea:	f000 ffe5 	bl	8006bb8 <USBD_static_malloc>
  if (hhid == NULL)
 8005bee:	4605      	mov	r5, r0
 8005bf0:	b1c0      	cbz	r0, 8005c24 <USBD_HID_Init+0x40>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005bf2:	f8d4 12d4 	ldr.w	r1, [r4, #724]	@ 0x2d4
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	2203      	movs	r2, #3
  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005bfa:	31b0      	adds	r1, #176	@ 0xb0
 8005bfc:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c00:	7c21      	ldrb	r1, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005c02:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005c06:	4620      	mov	r0, r4
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005c08:	2900      	cmp	r1, #0
 8005c0a:	bf14      	ite	ne
 8005c0c:	210a      	movne	r1, #10
 8005c0e:	2107      	moveq	r1, #7
 8005c10:	8761      	strh	r1, [r4, #58]	@ 0x3a
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005c12:	2181      	movs	r1, #129	@ 0x81
 8005c14:	f000 ff66 	bl	8006ae4 <USBD_LL_OpenEP>
  hhid->state = USBD_HID_IDLE;
 8005c18:	2300      	movs	r3, #0
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005c1a:	2201      	movs	r2, #1
  return (uint8_t)USBD_OK;
 8005c1c:	4618      	mov	r0, r3
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005c1e:	8722      	strh	r2, [r4, #56]	@ 0x38
  hhid->state = USBD_HID_IDLE;
 8005c20:	732b      	strb	r3, [r5, #12]
}
 8005c22:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c24:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
    return (uint8_t)USBD_EMEM;
 8005c28:	2002      	movs	r0, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c2a:	33b0      	adds	r3, #176	@ 0xb0
 8005c2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
}
 8005c30:	bd38      	pop	{r3, r4, r5, pc}
 8005c32:	bf00      	nop

08005c34 <USBD_HID_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
 8005c34:	b510      	push	{r4, lr}
 8005c36:	2181      	movs	r1, #129	@ 0x81
 8005c38:	4604      	mov	r4, r0
 8005c3a:	4805      	ldr	r0, [pc, #20]	@ (8005c50 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
 8005c3c:	f000 f9ba 	bl	8005fb4 <USBD_GetEpDesc>
 8005c40:	b108      	cbz	r0, 8005c46 <USBD_HID_GetOtherSpeedCfgDesc+0x12>
 8005c42:	230a      	movs	r3, #10
 8005c44:	7183      	strb	r3, [r0, #6]
 8005c46:	2322      	movs	r3, #34	@ 0x22
 8005c48:	4801      	ldr	r0, [pc, #4]	@ (8005c50 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
 8005c4a:	8023      	strh	r3, [r4, #0]
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	bf00      	nop
 8005c50:	24000068 	.word	0x24000068

08005c54 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c54:	b178      	cbz	r0, 8005c76 <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005c5c:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c60:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c64:	b109      	cbz	r1, 8005c6a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005c66:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c6a:	2301      	movs	r3, #1
  pdev->id = id;
 8005c6c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c6e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c72:	f000 bef7 	b.w	8006a64 <USBD_LL_Init>

  return ret;
}
 8005c76:	2003      	movs	r0, #3
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c7c:	b510      	push	{r4, lr}
  uint16_t len = 0U;
 8005c7e:	2300      	movs	r3, #0
{
 8005c80:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8005c82:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8005c86:	b189      	cbz	r1, 8005cac <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c88:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8005c8a:	4604      	mov	r4, r0
  pdev->pClass[0] = pclass;
 8005c8c:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c90:	b123      	cbz	r3, 8005c9c <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c92:	f10d 0006 	add.w	r0, sp, #6
 8005c96:	4798      	blx	r3
 8005c98:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005c9c:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8005ca0:	2000      	movs	r0, #0
  pdev->NumClasses++;
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
}
 8005ca8:	b002      	add	sp, #8
 8005caa:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005cac:	2003      	movs	r0, #3
}
 8005cae:	b002      	add	sp, #8
 8005cb0:	bd10      	pop	{r4, pc}
 8005cb2:	bf00      	nop

08005cb4 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cb4:	f000 bf0a 	b.w	8006acc <USBD_LL_Start>

08005cb8 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cb8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005cbc:	b10b      	cbz	r3, 8005cc2 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop

08005cc8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cc8:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005cca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8005cd2:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005cd4:	bf18      	it	ne
 8005cd6:	2003      	movne	r0, #3
 8005cd8:	bd08      	pop	{r3, pc}
 8005cda:	bf00      	nop

08005cdc <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cdc:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cde:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
{
 8005ce2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f000 fc25 	bl	8006534 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 8005cea:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8005cee:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8005cf2:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 8005cf4:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
 8005cf8:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 8005cfc:	f8c4 2294 	str.w	r2, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d009      	beq.n	8005d18 <USBD_LL_SetupStage+0x3c>
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d013      	beq.n	8005d30 <USBD_LL_SetupStage+0x54>
 8005d08:	b163      	cbz	r3, 8005d24 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 8005d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d14:	f000 bf00 	b.w	8006b18 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d18:	4629      	mov	r1, r5
 8005d1a:	4620      	mov	r0, r4
}
 8005d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d20:	f000 bb1c 	b.w	800635c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d24:	4629      	mov	r1, r5
 8005d26:	4620      	mov	r0, r4
}
 8005d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d2c:	f000 b958 	b.w	8005fe0 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d30:	4629      	mov	r1, r5
 8005d32:	4620      	mov	r0, r4
}
 8005d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d38:	f000 bb4c 	b.w	80063d4 <USBD_StdEPReq>

08005d3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8005d40:	b931      	cbnz	r1, 8005d50 <USBD_LL_DataOutStage+0x14>
 8005d42:	460b      	mov	r3, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d44:	f8d0 1294 	ldr.w	r1, [r0, #660]	@ 0x294
 8005d48:	2903      	cmp	r1, #3
 8005d4a:	d010      	beq.n	8005d6e <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d50:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d1f9      	bne.n	8005d4c <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f4      	beq.n	8005d4c <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 8005d62:	2200      	movs	r2, #0
}
 8005d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8005d68:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d6c:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8005d6e:	e9d0 1557 	ldrd	r1, r5, [r0, #348]	@ 0x15c
 8005d72:	42a9      	cmp	r1, r5
 8005d74:	d808      	bhi.n	8005d88 <USBD_LL_DataOutStage+0x4c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d76:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005d7a:	2a03      	cmp	r2, #3
 8005d7c:	d00f      	beq.n	8005d9e <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 fc3e 	bl	8006600 <USBD_CtlSendStatus>
}
 8005d84:	2000      	movs	r0, #0
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8005d88:	1b4b      	subs	r3, r1, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	462a      	mov	r2, r5
 8005d8e:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 8005d90:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d94:	bf28      	it	cs
 8005d96:	461a      	movcs	r2, r3
 8005d98:	f000 fc28 	bl	80065ec <USBD_CtlContinueRx>
 8005d9c:	e7d6      	b.n	8005d4c <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d9e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 8005da2:	6912      	ldr	r2, [r2, #16]
 8005da4:	2a00      	cmp	r2, #0
 8005da6:	d0ea      	beq.n	8005d7e <USBD_LL_DataOutStage+0x42>
              pdev->classId = idx;
 8005da8:	f8c0 32d4 	str.w	r3, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005dac:	4790      	blx	r2
 8005dae:	e7e6      	b.n	8005d7e <USBD_LL_DataOutStage+0x42>

08005db0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005db4:	b959      	cbnz	r1, 8005dce <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005db6:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d016      	beq.n	8005dec <USBD_LL_DataInStage+0x3c>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005dbe:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005dc2:	b113      	cbz	r3, 8005dca <USBD_LL_DataInStage+0x1a>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8005dca:	2000      	movs	r0, #0
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dce:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d1f9      	bne.n	8005dca <USBD_LL_DataInStage+0x1a>
        if (pdev->pClass[idx]->DataIn != NULL)
 8005dd6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f4      	beq.n	8005dca <USBD_LL_DataInStage+0x1a>
          pdev->classId = idx;
 8005de0:	2200      	movs	r2, #0
}
 8005de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8005de6:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005dea:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8005dec:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8005df0:	460d      	mov	r5, r1
 8005df2:	42b3      	cmp	r3, r6
 8005df4:	d810      	bhi.n	8005e18 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 8005df6:	d01c      	beq.n	8005e32 <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df8:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d02b      	beq.n	8005e58 <USBD_LL_DataInStage+0xa8>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e00:	2180      	movs	r1, #128	@ 0x80
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 fe88 	bl	8006b18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fc05 	bl	8006618 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8005e0e:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0d9      	beq.n	8005dca <USBD_LL_DataInStage+0x1a>
 8005e16:	e7d5      	b.n	8005dc4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8005e18:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e1a:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8005e1c:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f000 fbda 	bl	80065d8 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e24:	462b      	mov	r3, r5
 8005e26:	462a      	mov	r2, r5
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 feb8 	bl	8006ba0 <USBD_LL_PrepareReceive>
 8005e30:	e7c5      	b.n	8005dbe <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 8005e32:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d8df      	bhi.n	8005df8 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 8005e38:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d2db      	bcs.n	8005df8 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e40:	460a      	mov	r2, r1
 8005e42:	f000 fbc9 	bl	80065d8 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e46:	462b      	mov	r3, r5
 8005e48:	462a      	mov	r2, r5
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8005e4e:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e52:	f000 fea5 	bl	8006ba0 <USBD_LL_PrepareReceive>
 8005e56:	e7b2      	b.n	8005dbe <USBD_LL_DataInStage+0xe>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e58:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0ce      	beq.n	8005e00 <USBD_LL_DataInStage+0x50>
              pdev->classId = 0U;
 8005e62:	2200      	movs	r2, #0
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e64:	4620      	mov	r0, r4
              pdev->classId = 0U;
 8005e66:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e6a:	4798      	blx	r3
 8005e6c:	e7c8      	b.n	8005e00 <USBD_LL_DataInStage+0x50>
 8005e6e:	bf00      	nop

08005e70 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e72:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e74:	2201      	movs	r2, #1
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005e76:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
{
 8005e7a:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e7c:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
  pdev->dev_config = 0U;
 8005e80:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e82:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 8005e86:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005e8a:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 8005e8e:	b11b      	cbz	r3, 8005e98 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	b10b      	cbz	r3, 8005e98 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e94:	4798      	blx	r3
 8005e96:	b9b0      	cbnz	r0, 8005ec6 <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8005e98:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e9a:	2340      	movs	r3, #64	@ 0x40
 8005e9c:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e9e:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ea0:	4620      	mov	r0, r4

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ea2:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	f000 fe1d 	bl	8006ae4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eaa:	2200      	movs	r2, #0
 8005eac:	462b      	mov	r3, r5
 8005eae:	2180      	movs	r1, #128	@ 0x80
 8005eb0:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005eb2:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005eb6:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eba:	f000 fe13 	bl	8006ae4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return ret;
}
 8005ebe:	4638      	mov	r0, r7
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ec0:	84a6      	strh	r6, [r4, #36]	@ 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ec2:	6225      	str	r5, [r4, #32]
}
 8005ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 8005ec6:	2703      	movs	r7, #3
 8005ec8:	e7e7      	b.n	8005e9a <USBD_LL_Reset+0x2a>
 8005eca:	bf00      	nop

08005ecc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ecc:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8005ece:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8005ed0:	7419      	strb	r1, [r3, #16]
}
 8005ed2:	4770      	bx	lr

08005ed4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005ed4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
{
 8005ed8:	4603      	mov	r3, r0
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005eda:	2a04      	cmp	r2, #4
 8005edc:	d004      	beq.n	8005ee8 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005ede:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	f880 229d 	strb.w	r2, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ee8:	2204      	movs	r2, #4

  return USBD_OK;
}
 8005eea:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005eec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop

08005ef4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ef4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d104      	bne.n	8005f06 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005efc:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8005f06:	2000      	movs	r0, #0
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop

08005f0c <USBD_LL_SOF>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f0c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005f10:	2a03      	cmp	r2, #3
 8005f12:	d001      	beq.n	8005f18 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8005f14:	2000      	movs	r0, #0
 8005f16:	4770      	bx	lr
{
 8005f18:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8005f1a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005f1e:	b113      	cbz	r3, 8005f26 <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	b103      	cbz	r3, 8005f26 <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 8005f24:	4798      	blx	r3
}
 8005f26:	2000      	movs	r0, #0
 8005f28:	bd08      	pop	{r3, pc}
 8005f2a:	bf00      	nop

08005f2c <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8005f2c:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005f30:	32ae      	adds	r2, #174	@ 0xae
 8005f32:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005f36:	b162      	cbz	r2, 8005f52 <USBD_LL_IsoINIncomplete+0x26>
{
 8005f38:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f3a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d001      	beq.n	8005f46 <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8005f42:	2000      	movs	r0, #0
}
 8005f44:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f46:	6a13      	ldr	r3, [r2, #32]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0fa      	beq.n	8005f42 <USBD_LL_IsoINIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005f4c:	4798      	blx	r3
  return USBD_OK;
 8005f4e:	2000      	movs	r0, #0
}
 8005f50:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005f52:	2003      	movs	r0, #3
}
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop

08005f58 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8005f58:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005f5c:	32ae      	adds	r2, #174	@ 0xae
 8005f5e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005f62:	b162      	cbz	r2, 8005f7e <USBD_LL_IsoOUTIncomplete+0x26>
{
 8005f64:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f66:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d001      	beq.n	8005f72 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8005f6e:	2000      	movs	r0, #0
}
 8005f70:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f72:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0fa      	beq.n	8005f6e <USBD_LL_IsoOUTIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f78:	4798      	blx	r3
  return USBD_OK;
 8005f7a:	2000      	movs	r0, #0
}
 8005f7c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005f7e:	2003      	movs	r0, #3
}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop

08005f84 <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 8005f84:	2000      	movs	r0, #0
 8005f86:	4770      	bx	lr

08005f88 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f88:	2101      	movs	r1, #1
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f8a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f8e:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass[0] != NULL)
 8005f92:	b142      	cbz	r2, 8005fa6 <USBD_LL_DevDisconnected+0x1e>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f94:	6852      	ldr	r2, [r2, #4]
 8005f96:	7901      	ldrb	r1, [r0, #4]
{
 8005f98:	b508      	push	{r3, lr}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f9a:	4790      	blx	r2
 8005f9c:	b908      	cbnz	r0, 8005fa2 <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f9e:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005fa0:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 8005fa2:	2003      	movs	r0, #3
}
 8005fa4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8005fa6:	2000      	movs	r0, #0
}
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop

08005fac <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8005fac:	2000      	movs	r0, #0
 8005fae:	4770      	bx	lr

08005fb0 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	4770      	bx	lr

08005fb4 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fb4:	7802      	ldrb	r2, [r0, #0]
 8005fb6:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	4594      	cmp	ip, r2
 8005fbe:	d803      	bhi.n	8005fc8 <USBD_GetEpDesc+0x14>
 8005fc0:	e00c      	b.n	8005fdc <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 8005fc2:	459c      	cmp	ip, r3
 8005fc4:	d90a      	bls.n	8005fdc <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8005fc6:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005fc8:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 8005fca:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fcc:	7842      	ldrb	r2, [r0, #1]
  *ptr += pnext->bLength;
 8005fce:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fd0:	2a05      	cmp	r2, #5
 8005fd2:	d1f6      	bne.n	8005fc2 <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fd4:	7882      	ldrb	r2, [r0, #2]
 8005fd6:	428a      	cmp	r2, r1
 8005fd8:	d1f3      	bne.n	8005fc2 <USBD_GetEpDesc+0xe>
}
 8005fda:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fdc:	2000      	movs	r0, #0
}
 8005fde:	4770      	bx	lr

08005fe0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	780b      	ldrb	r3, [r1, #0]
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	d00e      	beq.n	8006010 <USBD_StdDevReq+0x30>
 8005ff2:	2b40      	cmp	r3, #64	@ 0x40
 8005ff4:	d00c      	beq.n	8006010 <USBD_StdDevReq+0x30>
 8005ff6:	b1bb      	cbz	r3, 8006028 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ff8:	2180      	movs	r1, #128	@ 0x80
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fd8c 	bl	8006b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006000:	2100      	movs	r1, #0
 8006002:	4620      	mov	r0, r4
 8006004:	f000 fd88 	bl	8006b18 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8006008:	2500      	movs	r5, #0
}
 800600a:	4628      	mov	r0, r5
 800600c:	b002      	add	sp, #8
 800600e:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006010:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006014:	4629      	mov	r1, r5
 8006016:	4620      	mov	r0, r4
 8006018:	33ae      	adds	r3, #174	@ 0xae
 800601a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800601e:	689b      	ldr	r3, [r3, #8]
}
 8006020:	b002      	add	sp, #8
 8006022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006026:	4718      	bx	r3
      switch (req->bRequest)
 8006028:	784b      	ldrb	r3, [r1, #1]
 800602a:	2b09      	cmp	r3, #9
 800602c:	d8e4      	bhi.n	8005ff8 <USBD_StdDevReq+0x18>
 800602e:	a201      	add	r2, pc, #4	@ (adr r2, 8006034 <USBD_StdDevReq+0x54>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006095 	.word	0x08006095
 8006038:	080060bd 	.word	0x080060bd
 800603c:	08005ff9 	.word	0x08005ff9
 8006040:	080060db 	.word	0x080060db
 8006044:	08005ff9 	.word	0x08005ff9
 8006048:	080060f3 	.word	0x080060f3
 800604c:	08006133 	.word	0x08006133
 8006050:	08005ff9 	.word	0x08005ff9
 8006054:	08006189 	.word	0x08006189
 8006058:	0800605d 	.word	0x0800605d
  cfgidx = (uint8_t)(req->wValue);
 800605c:	7889      	ldrb	r1, [r1, #2]
 800605e:	4db5      	ldr	r5, [pc, #724]	@ (8006334 <USBD_StdDevReq+0x354>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006060:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8006062:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006064:	f200 815e 	bhi.w	8006324 <USBD_StdDevReq+0x344>
  switch (pdev->dev_state)
 8006068:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800606c:	2b02      	cmp	r3, #2
 800606e:	b2de      	uxtb	r6, r3
 8006070:	f000 8145 	beq.w	80062fe <USBD_StdDevReq+0x31e>
 8006074:	2e03      	cmp	r6, #3
 8006076:	f000 8122 	beq.w	80062be <USBD_StdDevReq+0x2de>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800607a:	2180      	movs	r1, #128	@ 0x80
 800607c:	f000 fd4c 	bl	8006b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006080:	2100      	movs	r1, #0
 8006082:	4620      	mov	r0, r4
 8006084:	f000 fd48 	bl	8006b18 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006088:	7829      	ldrb	r1, [r5, #0]
 800608a:	4620      	mov	r0, r4
 800608c:	f7ff fe1c 	bl	8005cc8 <USBD_ClrClassConfig>
    return USBD_FAIL;
 8006090:	2503      	movs	r5, #3
 8006092:	e7ba      	b.n	800600a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006094:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006098:	3b01      	subs	r3, #1
 800609a:	2b02      	cmp	r3, #2
 800609c:	d8ac      	bhi.n	8005ff8 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 800609e:	88ca      	ldrh	r2, [r1, #6]
 80060a0:	2a02      	cmp	r2, #2
 80060a2:	d1a9      	bne.n	8005ff8 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 80060a4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80060a8:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bf0c      	ite	eq
 80060ae:	2301      	moveq	r3, #1
 80060b0:	2303      	movne	r3, #3
 80060b2:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80060b6:	f000 fa81 	bl	80065bc <USBD_CtlSendData>
      break;
 80060ba:	e7a5      	b.n	8006008 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80060bc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80060c0:	3b01      	subs	r3, #1
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d898      	bhi.n	8005ff8 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060c6:	884b      	ldrh	r3, [r1, #2]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d19d      	bne.n	8006008 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 80060cc:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 80060ce:	4620      	mov	r0, r4
        pdev->dev_remote_wakeup = 0U;
 80060d0:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80060d4:	f000 fa94 	bl	8006600 <USBD_CtlSendStatus>
 80060d8:	e796      	b.n	8006008 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060da:	884b      	ldrh	r3, [r1, #2]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d0f6      	beq.n	80060ce <USBD_StdDevReq+0xee>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d189      	bne.n	8005ff8 <USBD_StdDevReq+0x18>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80060e4:	888b      	ldrh	r3, [r1, #4]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80060ec:	f000 fa88 	bl	8006600 <USBD_CtlSendStatus>
 80060f0:	e78a      	b.n	8006008 <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060f2:	888b      	ldrh	r3, [r1, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f47f af7f 	bne.w	8005ff8 <USBD_StdDevReq+0x18>
 80060fa:	88cb      	ldrh	r3, [r1, #6]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f47f af7b 	bne.w	8005ff8 <USBD_StdDevReq+0x18>
 8006102:	884d      	ldrh	r5, [r1, #2]
 8006104:	2d7f      	cmp	r5, #127	@ 0x7f
 8006106:	f63f af77 	bhi.w	8005ff8 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800610a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800610e:	2b03      	cmp	r3, #3
 8006110:	f43f af72 	beq.w	8005ff8 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006114:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8006116:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800611a:	f000 fd29 	bl	8006b70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800611e:	4620      	mov	r0, r4
 8006120:	f000 fa6e 	bl	8006600 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006124:	2d00      	cmp	r5, #0
 8006126:	f000 8115 	beq.w	8006354 <USBD_StdDevReq+0x374>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800612a:	2302      	movs	r3, #2
 800612c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006130:	e76a      	b.n	8006008 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 8006132:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8006134:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 8006136:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 8006138:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800613c:	3b01      	subs	r3, #1
 800613e:	2b0e      	cmp	r3, #14
 8006140:	f63f af5a 	bhi.w	8005ff8 <USBD_StdDevReq+0x18>
 8006144:	a101      	add	r1, pc, #4	@ (adr r1, 800614c <USBD_StdDevReq+0x16c>)
 8006146:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800614a:	bf00      	nop
 800614c:	08006233 	.word	0x08006233
 8006150:	08006219 	.word	0x08006219
 8006154:	08006243 	.word	0x08006243
 8006158:	08005ff9 	.word	0x08005ff9
 800615c:	08005ff9 	.word	0x08005ff9
 8006160:	080061e9 	.word	0x080061e9
 8006164:	080061ff 	.word	0x080061ff
 8006168:	08005ff9 	.word	0x08005ff9
 800616c:	08005ff9 	.word	0x08005ff9
 8006170:	08005ff9 	.word	0x08005ff9
 8006174:	08005ff9 	.word	0x08005ff9
 8006178:	08005ff9 	.word	0x08005ff9
 800617c:	08005ff9 	.word	0x08005ff9
 8006180:	08005ff9 	.word	0x08005ff9
 8006184:	080061b1 	.word	0x080061b1
  if (req->wLength != 1U)
 8006188:	88ca      	ldrh	r2, [r1, #6]
 800618a:	2a01      	cmp	r2, #1
 800618c:	f47f af34 	bne.w	8005ff8 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8006190:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 8006194:	2902      	cmp	r1, #2
 8006196:	b2cb      	uxtb	r3, r1
 8006198:	f200 808a 	bhi.w	80062b0 <USBD_StdDevReq+0x2d0>
 800619c:	2b00      	cmp	r3, #0
 800619e:	f43f af2b 	beq.w	8005ff8 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 80061a2:	4601      	mov	r1, r0
 80061a4:	2300      	movs	r3, #0
 80061a6:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80061aa:	f000 fa07 	bl	80065bc <USBD_CtlSendData>
        break;
 80061ae:	e72b      	b.n	8006008 <USBD_StdDevReq+0x28>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80061b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f43f af1e 	beq.w	8005ff8 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80061bc:	f10d 0106 	add.w	r1, sp, #6
 80061c0:	7c20      	ldrb	r0, [r4, #16]
 80061c2:	4798      	blx	r3
  if (req->wLength != 0U)
 80061c4:	88eb      	ldrh	r3, [r5, #6]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d06e      	beq.n	80062a8 <USBD_StdDevReq+0x2c8>
    if (len != 0U)
 80061ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80061ce:	2a00      	cmp	r2, #0
 80061d0:	f43f af12 	beq.w	8005ff8 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 80061d4:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80061d6:	4601      	mov	r1, r0
 80061d8:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80061da:	bf28      	it	cs
 80061dc:	461a      	movcs	r2, r3
 80061de:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80061e2:	f000 f9eb 	bl	80065bc <USBD_CtlSendData>
 80061e6:	e70f      	b.n	8006008 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061e8:	7c03      	ldrb	r3, [r0, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f47f af04 	bne.w	8005ff8 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80061f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80061f4:	f10d 0006 	add.w	r0, sp, #6
 80061f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061fa:	4798      	blx	r3
  if (err != 0U)
 80061fc:	e7e2      	b.n	80061c4 <USBD_StdDevReq+0x1e4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061fe:	7c03      	ldrb	r3, [r0, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f47f aef9 	bne.w	8005ff8 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006206:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800620a:	f10d 0006 	add.w	r0, sp, #6
 800620e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006210:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006212:	2307      	movs	r3, #7
 8006214:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006216:	e7d5      	b.n	80061c4 <USBD_StdDevReq+0x1e4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006218:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800621a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800621e:	2a00      	cmp	r2, #0
 8006220:	f040 808a 	bne.w	8006338 <USBD_StdDevReq+0x358>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006226:	f10d 0006 	add.w	r0, sp, #6
 800622a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800622c:	2302      	movs	r3, #2
 800622e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006230:	e7c8      	b.n	80061c4 <USBD_StdDevReq+0x1e4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006232:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006236:	f10d 0106 	add.w	r1, sp, #6
 800623a:	7c00      	ldrb	r0, [r0, #16]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4798      	blx	r3
  if (err != 0U)
 8006240:	e7c0      	b.n	80061c4 <USBD_StdDevReq+0x1e4>
      switch ((uint8_t)(req->wValue))
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	2a05      	cmp	r2, #5
 8006246:	f63f aed7 	bhi.w	8005ff8 <USBD_StdDevReq+0x18>
 800624a:	e8df f002 	tbb	[pc, r2]
 800624e:	1b21      	.short	0x1b21
 8006250:	03090f15 	.word	0x03090f15
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006254:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1ae      	bne.n	80061bc <USBD_StdDevReq+0x1dc>
 800625e:	e6cb      	b.n	8005ff8 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006260:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1a8      	bne.n	80061bc <USBD_StdDevReq+0x1dc>
 800626a:	e6c5      	b.n	8005ff8 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800626c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1a2      	bne.n	80061bc <USBD_StdDevReq+0x1dc>
 8006276:	e6bf      	b.n	8005ff8 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006278:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d19c      	bne.n	80061bc <USBD_StdDevReq+0x1dc>
 8006282:	e6b9      	b.n	8005ff8 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006284:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d196      	bne.n	80061bc <USBD_StdDevReq+0x1dc>
 800628e:	e6b3      	b.n	8005ff8 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006290:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d190      	bne.n	80061bc <USBD_StdDevReq+0x1dc>
 800629a:	e6ad      	b.n	8005ff8 <USBD_StdDevReq+0x18>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800629c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800629e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062a0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062a4:	f7ff fd10 	bl	8005cc8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 f9a9 	bl	8006600 <USBD_CtlSendStatus>
 80062ae:	e6ab      	b.n	8006008 <USBD_StdDevReq+0x28>
    switch (pdev->dev_state)
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	f47f aea1 	bne.w	8005ff8 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80062b6:	1d01      	adds	r1, r0, #4
 80062b8:	f000 f980 	bl	80065bc <USBD_CtlSendData>
        break;
 80062bc:	e6a4      	b.n	8006008 <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 80062be:	2900      	cmp	r1, #0
 80062c0:	d0ec      	beq.n	800629c <USBD_StdDevReq+0x2bc>
      else if (cfgidx != pdev->dev_config)
 80062c2:	6841      	ldr	r1, [r0, #4]
 80062c4:	2901      	cmp	r1, #1
 80062c6:	d0ef      	beq.n	80062a8 <USBD_StdDevReq+0x2c8>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062c8:	b2c9      	uxtb	r1, r1
 80062ca:	f7ff fcfd 	bl	8005cc8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80062ce:	7829      	ldrb	r1, [r5, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062d0:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 80062d2:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062d4:	f7ff fcf0 	bl	8005cb8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80062d8:	4605      	mov	r5, r0
 80062da:	2800      	cmp	r0, #0
 80062dc:	d0e4      	beq.n	80062a8 <USBD_StdDevReq+0x2c8>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062de:	2180      	movs	r1, #128	@ 0x80
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 fc19 	bl	8006b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062e6:	2100      	movs	r1, #0
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 fc15 	bl	8006b18 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062ee:	7921      	ldrb	r1, [r4, #4]
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7ff fce9 	bl	8005cc8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062f6:	2302      	movs	r3, #2
 80062f8:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80062fc:	e685      	b.n	800600a <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 80062fe:	2900      	cmp	r1, #0
 8006300:	d0d2      	beq.n	80062a8 <USBD_StdDevReq+0x2c8>
        pdev->dev_config = cfgidx;
 8006302:	2101      	movs	r1, #1
 8006304:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006306:	f7ff fcd7 	bl	8005cb8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800630a:	4605      	mov	r5, r0
 800630c:	b1d8      	cbz	r0, 8006346 <USBD_StdDevReq+0x366>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800630e:	2180      	movs	r1, #128	@ 0x80
 8006310:	4620      	mov	r0, r4
 8006312:	f000 fc01 	bl	8006b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006316:	2100      	movs	r1, #0
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fbfd 	bl	8006b18 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800631e:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 8006322:	e672      	b.n	800600a <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006324:	2180      	movs	r1, #128	@ 0x80
 8006326:	f000 fbf7 	bl	8006b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800632a:	2100      	movs	r1, #0
 800632c:	4620      	mov	r0, r4
 800632e:	f000 fbf3 	bl	8006b18 <USBD_LL_StallEP>
    return USBD_FAIL;
 8006332:	e6ad      	b.n	8006090 <USBD_StdDevReq+0xb0>
 8006334:	24000248 	.word	0x24000248
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	f10d 0006 	add.w	r0, sp, #6
 800633e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006340:	2302      	movs	r3, #2
 8006342:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006344:	e73e      	b.n	80061c4 <USBD_StdDevReq+0x1e4>
          (void)USBD_CtlSendStatus(pdev);
 8006346:	4620      	mov	r0, r4
 8006348:	f000 f95a 	bl	8006600 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800634c:	2303      	movs	r3, #3
 800634e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006352:	e659      	b.n	8006008 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006354:	2301      	movs	r3, #1
 8006356:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800635a:	e655      	b.n	8006008 <USBD_StdDevReq+0x28>

0800635c <USBD_StdItfReq>:
{
 800635c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800635e:	780b      	ldrb	r3, [r1, #0]
{
 8006360:	460d      	mov	r5, r1
 8006362:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006364:	065a      	lsls	r2, r3, #25
 8006366:	d50c      	bpl.n	8006382 <USBD_StdItfReq+0x26>
 8006368:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800636c:	2a40      	cmp	r2, #64	@ 0x40
 800636e:	d008      	beq.n	8006382 <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006370:	2180      	movs	r1, #128	@ 0x80
 8006372:	f000 fbd1 	bl	8006b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006376:	2100      	movs	r1, #0
 8006378:	4620      	mov	r0, r4
 800637a:	f000 fbcd 	bl	8006b18 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800637e:	2000      	movs	r0, #0
}
 8006380:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8006382:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006386:	3b01      	subs	r3, #1
 8006388:	2b02      	cmp	r3, #2
 800638a:	d802      	bhi.n	8006392 <USBD_StdItfReq+0x36>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800638c:	7929      	ldrb	r1, [r5, #4]
 800638e:	2901      	cmp	r1, #1
 8006390:	d908      	bls.n	80063a4 <USBD_StdItfReq+0x48>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006392:	2180      	movs	r1, #128	@ 0x80
 8006394:	4620      	mov	r0, r4
 8006396:	f000 fbbf 	bl	8006b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800639a:	2100      	movs	r1, #0
 800639c:	4620      	mov	r0, r4
 800639e:	f000 fbbb 	bl	8006b18 <USBD_LL_StallEP>
}
 80063a2:	e7ec      	b.n	800637e <USBD_StdItfReq+0x22>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7ff fe01 	bl	8005fac <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063aa:	b988      	cbnz	r0, 80063d0 <USBD_StdItfReq+0x74>
              if (pdev->pClass[idx]->Setup != NULL)
 80063ac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	b16b      	cbz	r3, 80063d0 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80063b4:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063b8:	4629      	mov	r1, r5
 80063ba:	4620      	mov	r0, r4
 80063bc:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063be:	88ea      	ldrh	r2, [r5, #6]
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	d1dd      	bne.n	8006380 <USBD_StdItfReq+0x24>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d1db      	bne.n	8006380 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 f919 	bl	8006600 <USBD_CtlSendStatus>
 80063ce:	e7d6      	b.n	800637e <USBD_StdItfReq+0x22>
                ret = USBD_FAIL;
 80063d0:	2003      	movs	r0, #3
}
 80063d2:	bd38      	pop	{r3, r4, r5, pc}

080063d4 <USBD_StdEPReq>:
{
 80063d4:	b530      	push	{r4, r5, lr}
 80063d6:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 80063d8:	888a      	ldrh	r2, [r1, #4]
{
 80063da:	b083      	sub	sp, #12
 80063dc:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 80063de:	7823      	ldrb	r3, [r4, #0]
 80063e0:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d01f      	beq.n	800642a <USBD_StdEPReq+0x56>
 80063ea:	2b40      	cmp	r3, #64	@ 0x40
 80063ec:	d01d      	beq.n	800642a <USBD_StdEPReq+0x56>
 80063ee:	b373      	cbz	r3, 800644e <USBD_StdEPReq+0x7a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80063f0:	2180      	movs	r1, #128	@ 0x80
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 fb90 	bl	8006b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80063f8:	2100      	movs	r1, #0
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 fb8c 	bl	8006b18 <USBD_LL_StallEP>
}
 8006400:	2000      	movs	r0, #0
 8006402:	b003      	add	sp, #12
 8006404:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 8006406:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800640a:	2b02      	cmp	r3, #2
 800640c:	b2da      	uxtb	r2, r3
 800640e:	d05b      	beq.n	80064c8 <USBD_StdEPReq+0xf4>
 8006410:	2a03      	cmp	r2, #3
 8006412:	d1ed      	bne.n	80063f0 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006414:	8863      	ldrh	r3, [r4, #2]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f2      	bne.n	8006400 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800641a:	064b      	lsls	r3, r1, #25
 800641c:	f040 8081 	bne.w	8006522 <USBD_StdEPReq+0x14e>
                (void)USBD_CtlSendStatus(pdev);
 8006420:	4628      	mov	r0, r5
 8006422:	9101      	str	r1, [sp, #4]
 8006424:	f000 f8ec 	bl	8006600 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006428:	9901      	ldr	r1, [sp, #4]
 800642a:	4628      	mov	r0, r5
 800642c:	f7ff fdc0 	bl	8005fb0 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006430:	2800      	cmp	r0, #0
 8006432:	d1e5      	bne.n	8006400 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 8006434:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
                  pdev->classId = idx;
 8006438:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0de      	beq.n	8006400 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006442:	4621      	mov	r1, r4
 8006444:	4628      	mov	r0, r5
}
 8006446:	b003      	add	sp, #12
 8006448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800644c:	4718      	bx	r3
      switch (req->bRequest)
 800644e:	7863      	ldrb	r3, [r4, #1]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d0d8      	beq.n	8006406 <USBD_StdEPReq+0x32>
 8006454:	2b03      	cmp	r3, #3
 8006456:	d025      	beq.n	80064a4 <USBD_StdEPReq+0xd0>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1c9      	bne.n	80063f0 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800645c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006460:	2b02      	cmp	r3, #2
 8006462:	b2d8      	uxtb	r0, r3
 8006464:	d039      	beq.n	80064da <USBD_StdEPReq+0x106>
 8006466:	2803      	cmp	r0, #3
 8006468:	d1c2      	bne.n	80063f0 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800646a:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800646e:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006470:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006474:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8006478:	d440      	bmi.n	80064fc <USBD_StdEPReq+0x128>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800647a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0b6      	beq.n	80063f0 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006482:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8006486:	2414      	movs	r4, #20
 8006488:	fb04 5403 	mla	r4, r4, r3, r5
 800648c:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006490:	2b00      	cmp	r3, #0
 8006492:	d13f      	bne.n	8006514 <USBD_StdEPReq+0x140>
{
 8006494:	2300      	movs	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006496:	2202      	movs	r2, #2
 8006498:	4621      	mov	r1, r4
 800649a:	4628      	mov	r0, r5
                pep->status = 0x0000U;
 800649c:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800649e:	f000 f88d 	bl	80065bc <USBD_CtlSendData>
              break;
 80064a2:	e7ad      	b.n	8006400 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80064a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	d00c      	beq.n	80064c8 <USBD_StdEPReq+0xf4>
 80064ae:	2a03      	cmp	r2, #3
 80064b0:	d19e      	bne.n	80063f0 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064b2:	8863      	ldrh	r3, [r4, #2]
 80064b4:	b923      	cbnz	r3, 80064c0 <USBD_StdEPReq+0xec>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064b6:	0648      	lsls	r0, r1, #25
 80064b8:	d002      	beq.n	80064c0 <USBD_StdEPReq+0xec>
 80064ba:	88e3      	ldrh	r3, [r4, #6]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d035      	beq.n	800652c <USBD_StdEPReq+0x158>
              (void)USBD_CtlSendStatus(pdev);
 80064c0:	4628      	mov	r0, r5
 80064c2:	f000 f89d 	bl	8006600 <USBD_CtlSendStatus>
              break;
 80064c6:	e79b      	b.n	8006400 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064c8:	064a      	lsls	r2, r1, #25
 80064ca:	d091      	beq.n	80063f0 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064cc:	f000 fb24 	bl	8006b18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064d0:	2180      	movs	r1, #128	@ 0x80
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 fb20 	bl	8006b18 <USBD_LL_StallEP>
 80064d8:	e792      	b.n	8006400 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064da:	0648      	lsls	r0, r1, #25
 80064dc:	d188      	bne.n	80063f0 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064de:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 80064e0:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064e4:	f04f 0202 	mov.w	r2, #2
 80064e8:	4628      	mov	r0, r5
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ea:	bf4c      	ite	mi
 80064ec:	f105 0114 	addmi.w	r1, r5, #20
 80064f0:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 80064f4:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064f6:	f000 f861 	bl	80065bc <USBD_CtlSendData>
              break;
 80064fa:	e781      	b.n	8006400 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f43f af76 	beq.w	80063f0 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006504:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8006508:	1c5c      	adds	r4, r3, #1
 800650a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800650e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8006512:	e7bd      	b.n	8006490 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006514:	4628      	mov	r0, r5
 8006516:	f000 fb17 	bl	8006b48 <USBD_LL_IsStallEP>
 800651a:	2800      	cmp	r0, #0
 800651c:	d0ba      	beq.n	8006494 <USBD_StdEPReq+0xc0>
 800651e:	2301      	movs	r3, #1
 8006520:	e7b9      	b.n	8006496 <USBD_StdEPReq+0xc2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006522:	9101      	str	r1, [sp, #4]
 8006524:	f000 fb04 	bl	8006b30 <USBD_LL_ClearStallEP>
 8006528:	9901      	ldr	r1, [sp, #4]
 800652a:	e779      	b.n	8006420 <USBD_StdEPReq+0x4c>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800652c:	4628      	mov	r0, r5
 800652e:	f000 faf3 	bl	8006b18 <USBD_LL_StallEP>
 8006532:	e7c5      	b.n	80064c0 <USBD_StdEPReq+0xec>

08006534 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8006534:	780b      	ldrb	r3, [r1, #0]
 8006536:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8006538:	784b      	ldrb	r3, [r1, #1]
 800653a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 800653c:	884b      	ldrh	r3, [r1, #2]
 800653e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8006540:	888b      	ldrh	r3, [r1, #4]
 8006542:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8006544:	88cb      	ldrh	r3, [r1, #6]
 8006546:	80c3      	strh	r3, [r0, #6]
}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop

0800654c <USBD_CtlError>:
{
 800654c:	b510      	push	{r4, lr}
 800654e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006550:	2180      	movs	r1, #128	@ 0x80
 8006552:	f000 fae1 	bl	8006b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006556:	2100      	movs	r1, #0
 8006558:	4620      	mov	r0, r4
}
 800655a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800655e:	f000 badb 	b.w	8006b18 <USBD_LL_StallEP>
 8006562:	bf00      	nop

08006564 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8006564:	b330      	cbz	r0, 80065b4 <USBD_GetString+0x50>
{
 8006566:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8006568:	7803      	ldrb	r3, [r0, #0]
 800656a:	460e      	mov	r6, r1
 800656c:	4605      	mov	r5, r0
 800656e:	4614      	mov	r4, r2
 8006570:	b30b      	cbz	r3, 80065b6 <USBD_GetString+0x52>
 8006572:	4603      	mov	r3, r0
 8006574:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006578:	2900      	cmp	r1, #0
 800657a:	d1fb      	bne.n	8006574 <USBD_GetString+0x10>
 800657c:	1c68      	adds	r0, r5, #1
 800657e:	f7f9 fec7 	bl	8000310 <strlen>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	3301      	adds	r3, #1
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	b2da      	uxtb	r2, r3
 800658c:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800658e:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8006590:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006592:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 8006594:	782c      	ldrb	r4, [r5, #0]
 8006596:	b164      	cbz	r4, 80065b2 <USBD_GetString+0x4e>
 8006598:	4628      	mov	r0, r5
  idx++;
 800659a:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800659c:	2100      	movs	r1, #0
    idx++;
 800659e:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 80065a0:	54f4      	strb	r4, [r6, r3]
    idx++;
 80065a2:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80065a4:	b2d2      	uxtb	r2, r2
    idx++;
 80065a6:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 80065a8:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 80065aa:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80065ae:	2c00      	cmp	r4, #0
 80065b0:	d1f5      	bne.n	800659e <USBD_GetString+0x3a>
}
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80065b6:	2202      	movs	r2, #2
 80065b8:	4613      	mov	r3, r2
 80065ba:	e7e7      	b.n	800658c <USBD_GetString+0x28>

080065bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80065bc:	b510      	push	{r4, lr}
 80065be:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065c0:	2402      	movs	r4, #2
{
 80065c2:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065c4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065c6:	f8c0 4294 	str.w	r4, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80065ca:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065ce:	f000 fadb 	bl	8006b88 <USBD_LL_Transmit>

  return USBD_OK;
}
 80065d2:	2000      	movs	r0, #0
 80065d4:	bd10      	pop	{r4, pc}
 80065d6:	bf00      	nop

080065d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80065d8:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065da:	2100      	movs	r1, #0
{
 80065dc:	b508      	push	{r3, lr}
 80065de:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065e0:	4662      	mov	r2, ip
 80065e2:	f000 fad1 	bl	8006b88 <USBD_LL_Transmit>

  return USBD_OK;
}
 80065e6:	2000      	movs	r0, #0
 80065e8:	bd08      	pop	{r3, pc}
 80065ea:	bf00      	nop

080065ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80065ec:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065ee:	2100      	movs	r1, #0
{
 80065f0:	b508      	push	{r3, lr}
 80065f2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065f4:	4662      	mov	r2, ip
 80065f6:	f000 fad3 	bl	8006ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80065fa:	2000      	movs	r0, #0
 80065fc:	bd08      	pop	{r3, pc}
 80065fe:	bf00      	nop

08006600 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006600:	2300      	movs	r3, #0
{
 8006602:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006604:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006606:	461a      	mov	r2, r3
 8006608:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800660a:	f8c0 4294 	str.w	r4, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800660e:	f000 fabb 	bl	8006b88 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006612:	2000      	movs	r0, #0
 8006614:	bd10      	pop	{r4, pc}
 8006616:	bf00      	nop

08006618 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006618:	2300      	movs	r3, #0
{
 800661a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800661c:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800661e:	461a      	mov	r2, r3
 8006620:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006622:	f8c0 4294 	str.w	r4, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006626:	f000 fabb 	bl	8006ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800662a:	2000      	movs	r0, #0
 800662c:	bd10      	pop	{r4, pc}
 800662e:	bf00      	nop

08006630 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006630:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8006632:	2201      	movs	r2, #1
 8006634:	4913      	ldr	r1, [pc, #76]	@ (8006684 <MX_USB_DEVICE_Init+0x54>)
 8006636:	4814      	ldr	r0, [pc, #80]	@ (8006688 <MX_USB_DEVICE_Init+0x58>)
 8006638:	f7ff fb0c 	bl	8005c54 <USBD_Init>
 800663c:	b960      	cbnz	r0, 8006658 <MX_USB_DEVICE_Init+0x28>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800663e:	4913      	ldr	r1, [pc, #76]	@ (800668c <MX_USB_DEVICE_Init+0x5c>)
 8006640:	4811      	ldr	r0, [pc, #68]	@ (8006688 <MX_USB_DEVICE_Init+0x58>)
 8006642:	f7ff fb1b 	bl	8005c7c <USBD_RegisterClass>
 8006646:	b978      	cbnz	r0, 8006668 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8006648:	480f      	ldr	r0, [pc, #60]	@ (8006688 <MX_USB_DEVICE_Init+0x58>)
 800664a:	f7ff fb33 	bl	8005cb4 <USBD_Start>
 800664e:	b990      	cbnz	r0, 8006676 <MX_USB_DEVICE_Init+0x46>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 8006654:	f7fc b86e 	b.w	8002734 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 8006658:	f7fa fada 	bl	8000c10 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800665c:	490b      	ldr	r1, [pc, #44]	@ (800668c <MX_USB_DEVICE_Init+0x5c>)
 800665e:	480a      	ldr	r0, [pc, #40]	@ (8006688 <MX_USB_DEVICE_Init+0x58>)
 8006660:	f7ff fb0c 	bl	8005c7c <USBD_RegisterClass>
 8006664:	2800      	cmp	r0, #0
 8006666:	d0ef      	beq.n	8006648 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006668:	f7fa fad2 	bl	8000c10 <Error_Handler>
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800666c:	4806      	ldr	r0, [pc, #24]	@ (8006688 <MX_USB_DEVICE_Init+0x58>)
 800666e:	f7ff fb21 	bl	8005cb4 <USBD_Start>
 8006672:	2800      	cmp	r0, #0
 8006674:	d0ec      	beq.n	8006650 <MX_USB_DEVICE_Init+0x20>
    Error_Handler();
 8006676:	f7fa facb 	bl	8000c10 <Error_Handler>
}
 800667a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800667e:	f7fc b859 	b.w	8002734 <HAL_PWREx_EnableUSBVoltageDetector>
 8006682:	bf00      	nop
 8006684:	240000f8 	.word	0x240000f8
 8006688:	2400024c 	.word	0x2400024c
 800668c:	2400008c 	.word	0x2400008c

08006690 <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8006690:	2312      	movs	r3, #18
  return USBD_HS_DeviceDesc;
}
 8006692:	4801      	ldr	r0, [pc, #4]	@ (8006698 <USBD_HS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_HS_DeviceDesc);
 8006694:	800b      	strh	r3, [r1, #0]
}
 8006696:	4770      	bx	lr
 8006698:	240000e4 	.word	0x240000e4

0800669c <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800669c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800669e:	4801      	ldr	r0, [pc, #4]	@ (80066a4 <USBD_HS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80066a0:	800b      	strh	r3, [r1, #0]
}
 80066a2:	4770      	bx	lr
 80066a4:	240000e0 	.word	0x240000e0

080066a8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066a8:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066aa:	4c04      	ldr	r4, [pc, #16]	@ (80066bc <USBD_HS_ManufacturerStrDescriptor+0x14>)
{
 80066ac:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066ae:	4804      	ldr	r0, [pc, #16]	@ (80066c0 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 80066b0:	4621      	mov	r1, r4
 80066b2:	f7ff ff57 	bl	8006564 <USBD_GetString>
  return USBD_StrDesc;
}
 80066b6:	4620      	mov	r0, r4
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	bf00      	nop
 80066bc:	24000528 	.word	0x24000528
 80066c0:	08007674 	.word	0x08007674

080066c4 <USBD_HS_ProductStrDescriptor>:
{
 80066c4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80066c6:	4c04      	ldr	r4, [pc, #16]	@ (80066d8 <USBD_HS_ProductStrDescriptor+0x14>)
{
 80066c8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80066ca:	4804      	ldr	r0, [pc, #16]	@ (80066dc <USBD_HS_ProductStrDescriptor+0x18>)
 80066cc:	4621      	mov	r1, r4
 80066ce:	f7ff ff49 	bl	8006564 <USBD_GetString>
}
 80066d2:	4620      	mov	r0, r4
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	bf00      	nop
 80066d8:	24000528 	.word	0x24000528
 80066dc:	08007688 	.word	0x08007688

080066e0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066e0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80066e2:	4c04      	ldr	r4, [pc, #16]	@ (80066f4 <USBD_HS_ConfigStrDescriptor+0x14>)
{
 80066e4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80066e6:	4804      	ldr	r0, [pc, #16]	@ (80066f8 <USBD_HS_ConfigStrDescriptor+0x18>)
 80066e8:	4621      	mov	r1, r4
 80066ea:	f7ff ff3b 	bl	8006564 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80066ee:	4620      	mov	r0, r4
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	bf00      	nop
 80066f4:	24000528 	.word	0x24000528
 80066f8:	080076a0 	.word	0x080076a0

080066fc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066fc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80066fe:	4c04      	ldr	r4, [pc, #16]	@ (8006710 <USBD_HS_InterfaceStrDescriptor+0x14>)
{
 8006700:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8006702:	4804      	ldr	r0, [pc, #16]	@ (8006714 <USBD_HS_InterfaceStrDescriptor+0x18>)
 8006704:	4621      	mov	r1, r4
 8006706:	f7ff ff2d 	bl	8006564 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800670a:	4620      	mov	r0, r4
 800670c:	bd10      	pop	{r4, pc}
 800670e:	bf00      	nop
 8006710:	24000528 	.word	0x24000528
 8006714:	080076ac 	.word	0x080076ac

08006718 <USBD_HS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006718:	4a52      	ldr	r2, [pc, #328]	@ (8006864 <USBD_HS_SerialStrDescriptor+0x14c>)
  *length = USB_SIZ_STRING_SERIAL;
 800671a:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800671e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8006722:	f8d2 0808 	ldr.w	r0, [r2, #2056]	@ 0x808
  *length = USB_SIZ_STRING_SERIAL;
 8006726:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800672a:	181b      	adds	r3, r3, r0
 800672c:	d101      	bne.n	8006732 <USBD_HS_SerialStrDescriptor+0x1a>
}
 800672e:	484e      	ldr	r0, [pc, #312]	@ (8006868 <USBD_HS_SerialStrDescriptor+0x150>)
 8006730:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006732:	f8d2 1804 	ldr.w	r1, [r2, #2052]	@ 0x804

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006736:	0f18      	lsrs	r0, r3, #28
 8006738:	4a4b      	ldr	r2, [pc, #300]	@ (8006868 <USBD_HS_SerialStrDescriptor+0x150>)
    if (((value >> 28)) < 0xA)
 800673a:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800673e:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006742:	bf2c      	ite	cs
 8006744:	3037      	addcs	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006746:	3030      	addcc	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006748:	f882 c003 	strb.w	ip, [r2, #3]
    if (((value >> 28)) < 0xA)
 800674c:	f3c3 6c03 	ubfx	ip, r3, #24, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8006750:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8006752:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006756:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 8006758:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800675c:	bf8c      	ite	hi
 800675e:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006760:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006762:	f882 c005 	strb.w	ip, [r2, #5]
    if (((value >> 28)) < 0xA)
 8006766:	f3c3 5c03 	ubfx	ip, r3, #20, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800676a:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800676c:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006770:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 8006772:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006776:	bf8c      	ite	hi
 8006778:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800677a:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800677c:	f882 c007 	strb.w	ip, [r2, #7]
    if (((value >> 28)) < 0xA)
 8006780:	f3c3 4c03 	ubfx	ip, r3, #16, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8006784:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 8006786:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800678a:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800678c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006790:	bf8c      	ite	hi
 8006792:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006794:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006796:	f882 c009 	strb.w	ip, [r2, #9]
    if (((value >> 28)) < 0xA)
 800679a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800679e:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 80067a0:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80067a4:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 80067a6:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067aa:	bf8c      	ite	hi
 80067ac:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80067ae:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 80067b0:	f882 c00b 	strb.w	ip, [r2, #11]
    if (((value >> 28)) < 0xA)
 80067b4:	f3c3 2c03 	ubfx	ip, r3, #8, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 80067b8:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 80067ba:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80067be:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 80067c0:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067c4:	bf8c      	ite	hi
 80067c6:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80067c8:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 80067ca:	f882 c00d 	strb.w	ip, [r2, #13]
    if (((value >> 28)) < 0xA)
 80067ce:	f3c3 1c03 	ubfx	ip, r3, #4, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 80067d2:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80067d4:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80067d8:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 80067da:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067de:	bf8c      	ite	hi
 80067e0:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80067e2:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 80067e4:	f882 c00f 	strb.w	ip, [r2, #15]
 80067e8:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80067ec:	7390      	strb	r0, [r2, #14]
    if (((value >> 28)) < 0xA)
 80067ee:	f003 000f 	and.w	r0, r3, #15
    pbuf[2 * idx + 1] = 0;
 80067f2:	f882 c013 	strb.w	ip, [r2, #19]
 80067f6:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80067fa:	4603      	mov	r3, r0
    if (((value >> 28)) < 0xA)
 80067fc:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80067fe:	f04f 0000 	mov.w	r0, #0
 8006802:	f882 c015 	strb.w	ip, [r2, #21]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006806:	bf94      	ite	ls
 8006808:	3330      	addls	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800680a:	3337      	addhi	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 800680c:	f1b1 4f20 	cmp.w	r1, #2684354560	@ 0xa0000000
    pbuf[2 * idx + 1] = 0;
 8006810:	7450      	strb	r0, [r2, #17]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006812:	7413      	strb	r3, [r2, #16]
 8006814:	ea4f 7311 	mov.w	r3, r1, lsr #28
    if (((value >> 28)) < 0xA)
 8006818:	f3c1 6003 	ubfx	r0, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800681c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006820:	bf2c      	ite	cs
 8006822:	3337      	addcs	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006824:	3330      	addcc	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006826:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006828:	f882 c017 	strb.w	ip, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800682c:	7493      	strb	r3, [r2, #18]
 800682e:	4603      	mov	r3, r0
    if (((value >> 28)) < 0xA)
 8006830:	f3c1 5003 	ubfx	r0, r1, #20, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006834:	bf8c      	ite	hi
 8006836:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006838:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 800683a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800683c:	7513      	strb	r3, [r2, #20]
 800683e:	4603      	mov	r3, r0
    if (((value >> 28)) < 0xA)
 8006840:	f3c1 4003 	ubfx	r0, r1, #16, #4
    pbuf[2 * idx + 1] = 0;
 8006844:	f04f 0100 	mov.w	r1, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006848:	bf8c      	ite	hi
 800684a:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800684c:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 800684e:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006850:	7651      	strb	r1, [r2, #25]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006852:	7593      	strb	r3, [r2, #22]
 8006854:	4603      	mov	r3, r0
}
 8006856:	4804      	ldr	r0, [pc, #16]	@ (8006868 <USBD_HS_SerialStrDescriptor+0x150>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8006858:	bf94      	ite	ls
 800685a:	3330      	addls	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800685c:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800685e:	7613      	strb	r3, [r2, #24]
}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	1ff1e000 	.word	0x1ff1e000
 8006868:	240000c4 	.word	0x240000c4

0800686c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	b0bb      	sub	sp, #236	@ 0xec
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006870:	2100      	movs	r1, #0
{
 8006872:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006874:	22b8      	movs	r2, #184	@ 0xb8
 8006876:	a80c      	add	r0, sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006878:	910a      	str	r1, [sp, #40]	@ 0x28
 800687a:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800687e:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006882:	f000 f9bf 	bl	8006c04 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8006886:	4b42      	ldr	r3, [pc, #264]	@ (8006990 <HAL_PCD_MspInit+0x124>)
 8006888:	6822      	ldr	r2, [r4, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d001      	beq.n	8006892 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800688e:	b03b      	add	sp, #236	@ 0xec
 8006890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006892:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 8006896:	2500      	movs	r5, #0
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006898:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800689c:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800689e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80068a2:	932d      	str	r3, [sp, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068a4:	f7fc fdd2 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d16d      	bne.n	8006988 <HAL_PCD_MspInit+0x11c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ac:	4c39      	ldr	r4, [pc, #228]	@ (8006994 <HAL_PCD_MspInit+0x128>)
    HAL_PWREx_EnableUSBVoltageDetector();
 80068ae:	f7fb ff41 	bl	8002734 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80068b2:	200d      	movs	r0, #13
 80068b4:	2102      	movs	r1, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068b6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80068ba:	250a      	movs	r5, #10
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80068bc:	2600      	movs	r6, #0
 80068be:	2702      	movs	r7, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068c0:	f043 0304 	orr.w	r3, r3, #4
 80068c4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80068c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80068e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	9302      	str	r3, [sp, #8]
 80068ea:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80068f0:	f043 0302 	orr.w	r3, r3, #2
 80068f4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80068f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80068fc:	950a      	str	r5, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068fe:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8006902:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006906:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006908:	a906      	add	r1, sp, #24
 800690a:	4823      	ldr	r0, [pc, #140]	@ (8006998 <HAL_PCD_MspInit+0x12c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800690c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800690e:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006912:	f7fa fbfb 	bl	800110c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8006916:	2228      	movs	r2, #40	@ 0x28
 8006918:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800691a:	a906      	add	r1, sp, #24
 800691c:	481f      	ldr	r0, [pc, #124]	@ (800699c <HAL_PCD_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800691e:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8006920:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006924:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006928:	f7fa fbf0 	bl	800110c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800692c:	f643 4223 	movw	r2, #15395	@ 0x3c23
 8006930:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006932:	a906      	add	r1, sp, #24
 8006934:	481a      	ldr	r0, [pc, #104]	@ (80069a0 <HAL_PCD_MspInit+0x134>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8006936:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8006938:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800693c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006940:	f7fa fbe4 	bl	800110c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006944:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8006948:	2200      	movs	r2, #0
 800694a:	204d      	movs	r0, #77	@ 0x4d
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800694c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8006950:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006952:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 8006956:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800695a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695e:	9304      	str	r3, [sp, #16]
 8006960:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8006962:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8006966:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800696a:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 800696e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8006972:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006976:	9305      	str	r3, [sp, #20]
 8006978:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800697a:	f7fa fb19 	bl	8000fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800697e:	204d      	movs	r0, #77	@ 0x4d
 8006980:	f7fa fb52 	bl	8001028 <HAL_NVIC_EnableIRQ>
}
 8006984:	b03b      	add	sp, #236	@ 0xec
 8006986:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8006988:	f7fa f942 	bl	8000c10 <Error_Handler>
 800698c:	e78e      	b.n	80068ac <HAL_PCD_MspInit+0x40>
 800698e:	bf00      	nop
 8006990:	40040000 	.word	0x40040000
 8006994:	58024400 	.word	0x58024400
 8006998:	58020800 	.word	0x58020800
 800699c:	58020000 	.word	0x58020000
 80069a0:	58020400 	.word	0x58020400

080069a4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069a4:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80069a8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80069ac:	f7ff b996 	b.w	8005cdc <USBD_LL_SetupStage>

080069b0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80069b0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80069b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80069b8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80069bc:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80069c0:	f7ff b9bc 	b.w	8005d3c <USBD_LL_DataOutStage>

080069c4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069c4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80069c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80069cc:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	f7ff b9ed 	b.w	8005db0 <USBD_LL_DataInStage>
 80069d6:	bf00      	nop

080069d8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069d8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80069dc:	f7ff ba96 	b.w	8005f0c <USBD_LL_SOF>

080069e0 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069e0:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80069e2:	79c1      	ldrb	r1, [r0, #7]
{
 80069e4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80069e6:	b111      	cbz	r1, 80069ee <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80069e8:	2902      	cmp	r1, #2
 80069ea:	d10a      	bne.n	8006a02 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 80069ec:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80069ee:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 80069f2:	f7ff fa6b 	bl	8005ecc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80069f6:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 80069fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80069fe:	f7ff ba37 	b.w	8005e70 <USBD_LL_Reset>
    Error_Handler();
 8006a02:	f7fa f905 	bl	8000c10 <Error_Handler>
    speed = USBD_SPEED_FULL;
 8006a06:	2101      	movs	r1, #1
 8006a08:	e7f1      	b.n	80069ee <HAL_PCD_ResetCallback+0xe>
 8006a0a:	bf00      	nop

08006a0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a10:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a14:	f7ff fa5e 	bl	8005ed4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a18:	6822      	ldr	r2, [r4, #0]
 8006a1a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8006a1e:	f043 0301 	orr.w	r3, r3, #1
 8006a22:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a26:	7ae3      	ldrb	r3, [r4, #11]
 8006a28:	b123      	cbz	r3, 8006a34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a2a:	4a03      	ldr	r2, [pc, #12]	@ (8006a38 <HAL_PCD_SuspendCallback+0x2c>)
 8006a2c:	6913      	ldr	r3, [r2, #16]
 8006a2e:	f043 0306 	orr.w	r3, r3, #6
 8006a32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a34:	bd10      	pop	{r4, pc}
 8006a36:	bf00      	nop
 8006a38:	e000ed00 	.word	0xe000ed00

08006a3c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a3c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a40:	f7ff ba58 	b.w	8005ef4 <USBD_LL_Resume>

08006a44 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a44:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a48:	f7ff ba86 	b.w	8005f58 <USBD_LL_IsoOUTIncomplete>

08006a4c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a4c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a50:	f7ff ba6c 	b.w	8005f2c <USBD_LL_IsoINIncomplete>

08006a54 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a54:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a58:	f7ff ba94 	b.w	8005f84 <USBD_LL_DevConnected>

08006a5c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a5c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a60:	f7ff ba92 	b.w	8005f88 <USBD_LL_DevDisconnected>

08006a64 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8006a64:	7803      	ldrb	r3, [r0, #0]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d001      	beq.n	8006a6e <USBD_LL_Init+0xa>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
}
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	4770      	bx	lr
  hpcd_USB_OTG_HS.pData = pdev;
 8006a6e:	4a15      	ldr	r2, [pc, #84]	@ (8006ac4 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006a70:	2100      	movs	r1, #0
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8006a72:	f04f 0c09 	mov.w	ip, #9
{
 8006a76:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006a78:	4c13      	ldr	r4, [pc, #76]	@ (8006ac8 <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_HS.pData = pdev;
 8006a7a:	f8c2 04e0 	str.w	r0, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8006a7e:	f8c0 22c8 	str.w	r2, [r0, #712]	@ 0x2c8
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8006a82:	4610      	mov	r0, r2
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006a84:	6014      	str	r4, [r2, #0]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006a86:	80d1      	strh	r1, [r2, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8006a88:	f8c2 3009 	str.w	r3, [r2, #9]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8006a8c:	f882 c004 	strb.w	ip, [r2, #4]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8006a90:	81d1      	strh	r1, [r2, #14]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8006a92:	7411      	strb	r1, [r2, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8006a94:	f7fa fc6e 	bl	8001374 <HAL_PCD_Init>
 8006a98:	b988      	cbnz	r0, 8006abe <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8006a9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006a9e:	4809      	ldr	r0, [pc, #36]	@ (8006ac4 <USBD_LL_Init+0x60>)
 8006aa0:	f7fb fe04 	bl	80026ac <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8006aa4:	2280      	movs	r2, #128	@ 0x80
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4806      	ldr	r0, [pc, #24]	@ (8006ac4 <USBD_LL_Init+0x60>)
 8006aaa:	f7fb fd7d 	bl	80025a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8006aae:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4803      	ldr	r0, [pc, #12]	@ (8006ac4 <USBD_LL_Init+0x60>)
 8006ab6:	f7fb fd77 	bl	80025a8 <HAL_PCDEx_SetTxFiFo>
}
 8006aba:	2000      	movs	r0, #0
 8006abc:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006abe:	f7fa f8a7 	bl	8000c10 <Error_Handler>
 8006ac2:	e7ea      	b.n	8006a9a <USBD_LL_Init+0x36>
 8006ac4:	2400073c 	.word	0x2400073c
 8006ac8:	40040000 	.word	0x40040000

08006acc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006acc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8006ace:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006ad2:	f7fa fe57 	bl	8001784 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006ad6:	b118      	cbz	r0, 8006ae0 <USBD_LL_Start+0x14>
 8006ad8:	2802      	cmp	r0, #2
 8006ada:	bf0c      	ite	eq
 8006adc:	2001      	moveq	r0, #1
 8006ade:	2003      	movne	r0, #3
}
 8006ae0:	bd08      	pop	{r3, pc}
 8006ae2:	bf00      	nop

08006ae4 <USBD_LL_OpenEP>:
{
 8006ae4:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ae6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
{
 8006aea:	461a      	mov	r2, r3
 8006aec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006aee:	4663      	mov	r3, ip
 8006af0:	f7fb fc1e 	bl	8002330 <HAL_PCD_EP_Open>
  switch (hal_status)
 8006af4:	b118      	cbz	r0, 8006afe <USBD_LL_OpenEP+0x1a>
 8006af6:	2802      	cmp	r0, #2
 8006af8:	bf0c      	ite	eq
 8006afa:	2001      	moveq	r0, #1
 8006afc:	2003      	movne	r0, #3
}
 8006afe:	bd08      	pop	{r3, pc}

08006b00 <USBD_LL_CloseEP>:
{
 8006b00:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b02:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006b06:	f7fb fc53 	bl	80023b0 <HAL_PCD_EP_Close>
  switch (hal_status)
 8006b0a:	b118      	cbz	r0, 8006b14 <USBD_LL_CloseEP+0x14>
 8006b0c:	2802      	cmp	r0, #2
 8006b0e:	bf0c      	ite	eq
 8006b10:	2001      	moveq	r0, #1
 8006b12:	2003      	movne	r0, #3
}
 8006b14:	bd08      	pop	{r3, pc}
 8006b16:	bf00      	nop

08006b18 <USBD_LL_StallEP>:
{
 8006b18:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b1a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006b1e:	f7fb fcc3 	bl	80024a8 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8006b22:	b118      	cbz	r0, 8006b2c <USBD_LL_StallEP+0x14>
 8006b24:	2802      	cmp	r0, #2
 8006b26:	bf0c      	ite	eq
 8006b28:	2001      	moveq	r0, #1
 8006b2a:	2003      	movne	r0, #3
}
 8006b2c:	bd08      	pop	{r3, pc}
 8006b2e:	bf00      	nop

08006b30 <USBD_LL_ClearStallEP>:
{
 8006b30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b32:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006b36:	f7fb fcfb 	bl	8002530 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8006b3a:	b118      	cbz	r0, 8006b44 <USBD_LL_ClearStallEP+0x14>
 8006b3c:	2802      	cmp	r0, #2
 8006b3e:	bf0c      	ite	eq
 8006b40:	2001      	moveq	r0, #1
 8006b42:	2003      	movne	r0, #3
}
 8006b44:	bd08      	pop	{r3, pc}
 8006b46:	bf00      	nop

08006b48 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006b48:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b4a:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8006b4e:	d406      	bmi.n	8006b5e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b50:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006b54:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006b58:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
}
 8006b5c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b5e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006b62:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006b66:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006b6a:	7d98      	ldrb	r0, [r3, #22]
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop

08006b70 <USBD_LL_SetUSBAddress>:
{
 8006b70:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b72:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006b76:	f7fb fbc7 	bl	8002308 <HAL_PCD_SetAddress>
  switch (hal_status)
 8006b7a:	b118      	cbz	r0, 8006b84 <USBD_LL_SetUSBAddress+0x14>
 8006b7c:	2802      	cmp	r0, #2
 8006b7e:	bf0c      	ite	eq
 8006b80:	2001      	moveq	r0, #1
 8006b82:	2003      	movne	r0, #3
}
 8006b84:	bd08      	pop	{r3, pc}
 8006b86:	bf00      	nop

08006b88 <USBD_LL_Transmit>:
{
 8006b88:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b8a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006b8e:	f7fb fc69 	bl	8002464 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8006b92:	b118      	cbz	r0, 8006b9c <USBD_LL_Transmit+0x14>
 8006b94:	2802      	cmp	r0, #2
 8006b96:	bf0c      	ite	eq
 8006b98:	2001      	moveq	r0, #1
 8006b9a:	2003      	movne	r0, #3
}
 8006b9c:	bd08      	pop	{r3, pc}
 8006b9e:	bf00      	nop

08006ba0 <USBD_LL_PrepareReceive>:
{
 8006ba0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ba2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006ba6:	f7fb fc3b 	bl	8002420 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8006baa:	b118      	cbz	r0, 8006bb4 <USBD_LL_PrepareReceive+0x14>
 8006bac:	2802      	cmp	r0, #2
 8006bae:	bf0c      	ite	eq
 8006bb0:	2001      	moveq	r0, #1
 8006bb2:	2003      	movne	r0, #3
}
 8006bb4:	bd08      	pop	{r3, pc}
 8006bb6:	bf00      	nop

08006bb8 <USBD_static_malloc>:
}
 8006bb8:	4800      	ldr	r0, [pc, #0]	@ (8006bbc <USBD_static_malloc+0x4>)
 8006bba:	4770      	bx	lr
 8006bbc:	24000728 	.word	0x24000728

08006bc0 <USBD_static_free>:
}
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop

08006bc4 <siprintf>:
 8006bc4:	b40e      	push	{r1, r2, r3}
 8006bc6:	b500      	push	{lr}
 8006bc8:	b09c      	sub	sp, #112	@ 0x70
 8006bca:	ab1d      	add	r3, sp, #116	@ 0x74
 8006bcc:	9002      	str	r0, [sp, #8]
 8006bce:	9006      	str	r0, [sp, #24]
 8006bd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006bd4:	4809      	ldr	r0, [pc, #36]	@ (8006bfc <siprintf+0x38>)
 8006bd6:	9107      	str	r1, [sp, #28]
 8006bd8:	9104      	str	r1, [sp, #16]
 8006bda:	4909      	ldr	r1, [pc, #36]	@ (8006c00 <siprintf+0x3c>)
 8006bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be0:	9105      	str	r1, [sp, #20]
 8006be2:	6800      	ldr	r0, [r0, #0]
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	a902      	add	r1, sp, #8
 8006be8:	f000 f994 	bl	8006f14 <_svfiprintf_r>
 8006bec:	9b02      	ldr	r3, [sp, #8]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	b01c      	add	sp, #112	@ 0x70
 8006bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bf8:	b003      	add	sp, #12
 8006bfa:	4770      	bx	lr
 8006bfc:	24000118 	.word	0x24000118
 8006c00:	ffff0208 	.word	0xffff0208

08006c04 <memset>:
 8006c04:	4402      	add	r2, r0
 8006c06:	4603      	mov	r3, r0
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d100      	bne.n	8006c0e <memset+0xa>
 8006c0c:	4770      	bx	lr
 8006c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c12:	e7f9      	b.n	8006c08 <memset+0x4>

08006c14 <__errno>:
 8006c14:	4b01      	ldr	r3, [pc, #4]	@ (8006c1c <__errno+0x8>)
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	24000118 	.word	0x24000118

08006c20 <__libc_init_array>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4d0d      	ldr	r5, [pc, #52]	@ (8006c58 <__libc_init_array+0x38>)
 8006c24:	4c0d      	ldr	r4, [pc, #52]	@ (8006c5c <__libc_init_array+0x3c>)
 8006c26:	1b64      	subs	r4, r4, r5
 8006c28:	10a4      	asrs	r4, r4, #2
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	42a6      	cmp	r6, r4
 8006c2e:	d109      	bne.n	8006c44 <__libc_init_array+0x24>
 8006c30:	4d0b      	ldr	r5, [pc, #44]	@ (8006c60 <__libc_init_array+0x40>)
 8006c32:	4c0c      	ldr	r4, [pc, #48]	@ (8006c64 <__libc_init_array+0x44>)
 8006c34:	f000 fc66 	bl	8007504 <_init>
 8006c38:	1b64      	subs	r4, r4, r5
 8006c3a:	10a4      	asrs	r4, r4, #2
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	42a6      	cmp	r6, r4
 8006c40:	d105      	bne.n	8006c4e <__libc_init_array+0x2e>
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c48:	4798      	blx	r3
 8006c4a:	3601      	adds	r6, #1
 8006c4c:	e7ee      	b.n	8006c2c <__libc_init_array+0xc>
 8006c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c52:	4798      	blx	r3
 8006c54:	3601      	adds	r6, #1
 8006c56:	e7f2      	b.n	8006c3e <__libc_init_array+0x1e>
 8006c58:	080076f8 	.word	0x080076f8
 8006c5c:	080076f8 	.word	0x080076f8
 8006c60:	080076f8 	.word	0x080076f8
 8006c64:	080076fc 	.word	0x080076fc

08006c68 <__retarget_lock_acquire_recursive>:
 8006c68:	4770      	bx	lr

08006c6a <__retarget_lock_release_recursive>:
 8006c6a:	4770      	bx	lr

08006c6c <_free_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4605      	mov	r5, r0
 8006c70:	2900      	cmp	r1, #0
 8006c72:	d041      	beq.n	8006cf8 <_free_r+0x8c>
 8006c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c78:	1f0c      	subs	r4, r1, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfb8      	it	lt
 8006c7e:	18e4      	addlt	r4, r4, r3
 8006c80:	f000 f8e0 	bl	8006e44 <__malloc_lock>
 8006c84:	4a1d      	ldr	r2, [pc, #116]	@ (8006cfc <_free_r+0x90>)
 8006c86:	6813      	ldr	r3, [r2, #0]
 8006c88:	b933      	cbnz	r3, 8006c98 <_free_r+0x2c>
 8006c8a:	6063      	str	r3, [r4, #4]
 8006c8c:	6014      	str	r4, [r2, #0]
 8006c8e:	4628      	mov	r0, r5
 8006c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c94:	f000 b8dc 	b.w	8006e50 <__malloc_unlock>
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	d908      	bls.n	8006cae <_free_r+0x42>
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	1821      	adds	r1, r4, r0
 8006ca0:	428b      	cmp	r3, r1
 8006ca2:	bf01      	itttt	eq
 8006ca4:	6819      	ldreq	r1, [r3, #0]
 8006ca6:	685b      	ldreq	r3, [r3, #4]
 8006ca8:	1809      	addeq	r1, r1, r0
 8006caa:	6021      	streq	r1, [r4, #0]
 8006cac:	e7ed      	b.n	8006c8a <_free_r+0x1e>
 8006cae:	461a      	mov	r2, r3
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b10b      	cbz	r3, 8006cb8 <_free_r+0x4c>
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	d9fa      	bls.n	8006cae <_free_r+0x42>
 8006cb8:	6811      	ldr	r1, [r2, #0]
 8006cba:	1850      	adds	r0, r2, r1
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d10b      	bne.n	8006cd8 <_free_r+0x6c>
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	1850      	adds	r0, r2, r1
 8006cc6:	4283      	cmp	r3, r0
 8006cc8:	6011      	str	r1, [r2, #0]
 8006cca:	d1e0      	bne.n	8006c8e <_free_r+0x22>
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	6053      	str	r3, [r2, #4]
 8006cd2:	4408      	add	r0, r1
 8006cd4:	6010      	str	r0, [r2, #0]
 8006cd6:	e7da      	b.n	8006c8e <_free_r+0x22>
 8006cd8:	d902      	bls.n	8006ce0 <_free_r+0x74>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	602b      	str	r3, [r5, #0]
 8006cde:	e7d6      	b.n	8006c8e <_free_r+0x22>
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	1821      	adds	r1, r4, r0
 8006ce4:	428b      	cmp	r3, r1
 8006ce6:	bf04      	itt	eq
 8006ce8:	6819      	ldreq	r1, [r3, #0]
 8006cea:	685b      	ldreq	r3, [r3, #4]
 8006cec:	6063      	str	r3, [r4, #4]
 8006cee:	bf04      	itt	eq
 8006cf0:	1809      	addeq	r1, r1, r0
 8006cf2:	6021      	streq	r1, [r4, #0]
 8006cf4:	6054      	str	r4, [r2, #4]
 8006cf6:	e7ca      	b.n	8006c8e <_free_r+0x22>
 8006cf8:	bd38      	pop	{r3, r4, r5, pc}
 8006cfa:	bf00      	nop
 8006cfc:	24000d64 	.word	0x24000d64

08006d00 <sbrk_aligned>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	4e0f      	ldr	r6, [pc, #60]	@ (8006d40 <sbrk_aligned+0x40>)
 8006d04:	460c      	mov	r4, r1
 8006d06:	6831      	ldr	r1, [r6, #0]
 8006d08:	4605      	mov	r5, r0
 8006d0a:	b911      	cbnz	r1, 8006d12 <sbrk_aligned+0x12>
 8006d0c:	f000 fba6 	bl	800745c <_sbrk_r>
 8006d10:	6030      	str	r0, [r6, #0]
 8006d12:	4621      	mov	r1, r4
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 fba1 	bl	800745c <_sbrk_r>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	d103      	bne.n	8006d26 <sbrk_aligned+0x26>
 8006d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8006d22:	4620      	mov	r0, r4
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	1cc4      	adds	r4, r0, #3
 8006d28:	f024 0403 	bic.w	r4, r4, #3
 8006d2c:	42a0      	cmp	r0, r4
 8006d2e:	d0f8      	beq.n	8006d22 <sbrk_aligned+0x22>
 8006d30:	1a21      	subs	r1, r4, r0
 8006d32:	4628      	mov	r0, r5
 8006d34:	f000 fb92 	bl	800745c <_sbrk_r>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d1f2      	bne.n	8006d22 <sbrk_aligned+0x22>
 8006d3c:	e7ef      	b.n	8006d1e <sbrk_aligned+0x1e>
 8006d3e:	bf00      	nop
 8006d40:	24000d60 	.word	0x24000d60

08006d44 <_malloc_r>:
 8006d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d48:	1ccd      	adds	r5, r1, #3
 8006d4a:	f025 0503 	bic.w	r5, r5, #3
 8006d4e:	3508      	adds	r5, #8
 8006d50:	2d0c      	cmp	r5, #12
 8006d52:	bf38      	it	cc
 8006d54:	250c      	movcc	r5, #12
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	4606      	mov	r6, r0
 8006d5a:	db01      	blt.n	8006d60 <_malloc_r+0x1c>
 8006d5c:	42a9      	cmp	r1, r5
 8006d5e:	d904      	bls.n	8006d6a <_malloc_r+0x26>
 8006d60:	230c      	movs	r3, #12
 8006d62:	6033      	str	r3, [r6, #0]
 8006d64:	2000      	movs	r0, #0
 8006d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e40 <_malloc_r+0xfc>
 8006d6e:	f000 f869 	bl	8006e44 <__malloc_lock>
 8006d72:	f8d8 3000 	ldr.w	r3, [r8]
 8006d76:	461c      	mov	r4, r3
 8006d78:	bb44      	cbnz	r4, 8006dcc <_malloc_r+0x88>
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff ffbf 	bl	8006d00 <sbrk_aligned>
 8006d82:	1c43      	adds	r3, r0, #1
 8006d84:	4604      	mov	r4, r0
 8006d86:	d158      	bne.n	8006e3a <_malloc_r+0xf6>
 8006d88:	f8d8 4000 	ldr.w	r4, [r8]
 8006d8c:	4627      	mov	r7, r4
 8006d8e:	2f00      	cmp	r7, #0
 8006d90:	d143      	bne.n	8006e1a <_malloc_r+0xd6>
 8006d92:	2c00      	cmp	r4, #0
 8006d94:	d04b      	beq.n	8006e2e <_malloc_r+0xea>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	4639      	mov	r1, r7
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	eb04 0903 	add.w	r9, r4, r3
 8006da0:	f000 fb5c 	bl	800745c <_sbrk_r>
 8006da4:	4581      	cmp	r9, r0
 8006da6:	d142      	bne.n	8006e2e <_malloc_r+0xea>
 8006da8:	6821      	ldr	r1, [r4, #0]
 8006daa:	1a6d      	subs	r5, r5, r1
 8006dac:	4629      	mov	r1, r5
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7ff ffa6 	bl	8006d00 <sbrk_aligned>
 8006db4:	3001      	adds	r0, #1
 8006db6:	d03a      	beq.n	8006e2e <_malloc_r+0xea>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	442b      	add	r3, r5
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	bb62      	cbnz	r2, 8006e20 <_malloc_r+0xdc>
 8006dc6:	f8c8 7000 	str.w	r7, [r8]
 8006dca:	e00f      	b.n	8006dec <_malloc_r+0xa8>
 8006dcc:	6822      	ldr	r2, [r4, #0]
 8006dce:	1b52      	subs	r2, r2, r5
 8006dd0:	d420      	bmi.n	8006e14 <_malloc_r+0xd0>
 8006dd2:	2a0b      	cmp	r2, #11
 8006dd4:	d917      	bls.n	8006e06 <_malloc_r+0xc2>
 8006dd6:	1961      	adds	r1, r4, r5
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	6025      	str	r5, [r4, #0]
 8006ddc:	bf18      	it	ne
 8006dde:	6059      	strne	r1, [r3, #4]
 8006de0:	6863      	ldr	r3, [r4, #4]
 8006de2:	bf08      	it	eq
 8006de4:	f8c8 1000 	streq.w	r1, [r8]
 8006de8:	5162      	str	r2, [r4, r5]
 8006dea:	604b      	str	r3, [r1, #4]
 8006dec:	4630      	mov	r0, r6
 8006dee:	f000 f82f 	bl	8006e50 <__malloc_unlock>
 8006df2:	f104 000b 	add.w	r0, r4, #11
 8006df6:	1d23      	adds	r3, r4, #4
 8006df8:	f020 0007 	bic.w	r0, r0, #7
 8006dfc:	1ac2      	subs	r2, r0, r3
 8006dfe:	bf1c      	itt	ne
 8006e00:	1a1b      	subne	r3, r3, r0
 8006e02:	50a3      	strne	r3, [r4, r2]
 8006e04:	e7af      	b.n	8006d66 <_malloc_r+0x22>
 8006e06:	6862      	ldr	r2, [r4, #4]
 8006e08:	42a3      	cmp	r3, r4
 8006e0a:	bf0c      	ite	eq
 8006e0c:	f8c8 2000 	streq.w	r2, [r8]
 8006e10:	605a      	strne	r2, [r3, #4]
 8006e12:	e7eb      	b.n	8006dec <_malloc_r+0xa8>
 8006e14:	4623      	mov	r3, r4
 8006e16:	6864      	ldr	r4, [r4, #4]
 8006e18:	e7ae      	b.n	8006d78 <_malloc_r+0x34>
 8006e1a:	463c      	mov	r4, r7
 8006e1c:	687f      	ldr	r7, [r7, #4]
 8006e1e:	e7b6      	b.n	8006d8e <_malloc_r+0x4a>
 8006e20:	461a      	mov	r2, r3
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d1fb      	bne.n	8006e20 <_malloc_r+0xdc>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	6053      	str	r3, [r2, #4]
 8006e2c:	e7de      	b.n	8006dec <_malloc_r+0xa8>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	6033      	str	r3, [r6, #0]
 8006e32:	4630      	mov	r0, r6
 8006e34:	f000 f80c 	bl	8006e50 <__malloc_unlock>
 8006e38:	e794      	b.n	8006d64 <_malloc_r+0x20>
 8006e3a:	6005      	str	r5, [r0, #0]
 8006e3c:	e7d6      	b.n	8006dec <_malloc_r+0xa8>
 8006e3e:	bf00      	nop
 8006e40:	24000d64 	.word	0x24000d64

08006e44 <__malloc_lock>:
 8006e44:	4801      	ldr	r0, [pc, #4]	@ (8006e4c <__malloc_lock+0x8>)
 8006e46:	f7ff bf0f 	b.w	8006c68 <__retarget_lock_acquire_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	24000d5c 	.word	0x24000d5c

08006e50 <__malloc_unlock>:
 8006e50:	4801      	ldr	r0, [pc, #4]	@ (8006e58 <__malloc_unlock+0x8>)
 8006e52:	f7ff bf0a 	b.w	8006c6a <__retarget_lock_release_recursive>
 8006e56:	bf00      	nop
 8006e58:	24000d5c 	.word	0x24000d5c

08006e5c <__ssputs_r>:
 8006e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	688e      	ldr	r6, [r1, #8]
 8006e62:	461f      	mov	r7, r3
 8006e64:	42be      	cmp	r6, r7
 8006e66:	680b      	ldr	r3, [r1, #0]
 8006e68:	4682      	mov	sl, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	4690      	mov	r8, r2
 8006e6e:	d82d      	bhi.n	8006ecc <__ssputs_r+0x70>
 8006e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e78:	d026      	beq.n	8006ec8 <__ssputs_r+0x6c>
 8006e7a:	6965      	ldr	r5, [r4, #20]
 8006e7c:	6909      	ldr	r1, [r1, #16]
 8006e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e82:	eba3 0901 	sub.w	r9, r3, r1
 8006e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e8a:	1c7b      	adds	r3, r7, #1
 8006e8c:	444b      	add	r3, r9
 8006e8e:	106d      	asrs	r5, r5, #1
 8006e90:	429d      	cmp	r5, r3
 8006e92:	bf38      	it	cc
 8006e94:	461d      	movcc	r5, r3
 8006e96:	0553      	lsls	r3, r2, #21
 8006e98:	d527      	bpl.n	8006eea <__ssputs_r+0x8e>
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	f7ff ff52 	bl	8006d44 <_malloc_r>
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	b360      	cbz	r0, 8006efe <__ssputs_r+0xa2>
 8006ea4:	6921      	ldr	r1, [r4, #16]
 8006ea6:	464a      	mov	r2, r9
 8006ea8:	f000 fae8 	bl	800747c <memcpy>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	6126      	str	r6, [r4, #16]
 8006eba:	6165      	str	r5, [r4, #20]
 8006ebc:	444e      	add	r6, r9
 8006ebe:	eba5 0509 	sub.w	r5, r5, r9
 8006ec2:	6026      	str	r6, [r4, #0]
 8006ec4:	60a5      	str	r5, [r4, #8]
 8006ec6:	463e      	mov	r6, r7
 8006ec8:	42be      	cmp	r6, r7
 8006eca:	d900      	bls.n	8006ece <__ssputs_r+0x72>
 8006ecc:	463e      	mov	r6, r7
 8006ece:	6820      	ldr	r0, [r4, #0]
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	f000 faa8 	bl	8007428 <memmove>
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	1b9b      	subs	r3, r3, r6
 8006edc:	60a3      	str	r3, [r4, #8]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	4433      	add	r3, r6
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eea:	462a      	mov	r2, r5
 8006eec:	f000 fad4 	bl	8007498 <_realloc_r>
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d1e0      	bne.n	8006eb8 <__ssputs_r+0x5c>
 8006ef6:	6921      	ldr	r1, [r4, #16]
 8006ef8:	4650      	mov	r0, sl
 8006efa:	f7ff feb7 	bl	8006c6c <_free_r>
 8006efe:	230c      	movs	r3, #12
 8006f00:	f8ca 3000 	str.w	r3, [sl]
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	e7e9      	b.n	8006ee6 <__ssputs_r+0x8a>
	...

08006f14 <_svfiprintf_r>:
 8006f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	4698      	mov	r8, r3
 8006f1a:	898b      	ldrh	r3, [r1, #12]
 8006f1c:	061b      	lsls	r3, r3, #24
 8006f1e:	b09d      	sub	sp, #116	@ 0x74
 8006f20:	4607      	mov	r7, r0
 8006f22:	460d      	mov	r5, r1
 8006f24:	4614      	mov	r4, r2
 8006f26:	d510      	bpl.n	8006f4a <_svfiprintf_r+0x36>
 8006f28:	690b      	ldr	r3, [r1, #16]
 8006f2a:	b973      	cbnz	r3, 8006f4a <_svfiprintf_r+0x36>
 8006f2c:	2140      	movs	r1, #64	@ 0x40
 8006f2e:	f7ff ff09 	bl	8006d44 <_malloc_r>
 8006f32:	6028      	str	r0, [r5, #0]
 8006f34:	6128      	str	r0, [r5, #16]
 8006f36:	b930      	cbnz	r0, 8006f46 <_svfiprintf_r+0x32>
 8006f38:	230c      	movs	r3, #12
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	b01d      	add	sp, #116	@ 0x74
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	2340      	movs	r3, #64	@ 0x40
 8006f48:	616b      	str	r3, [r5, #20]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f4e:	2320      	movs	r3, #32
 8006f50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f58:	2330      	movs	r3, #48	@ 0x30
 8006f5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80070f8 <_svfiprintf_r+0x1e4>
 8006f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f62:	f04f 0901 	mov.w	r9, #1
 8006f66:	4623      	mov	r3, r4
 8006f68:	469a      	mov	sl, r3
 8006f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f6e:	b10a      	cbz	r2, 8006f74 <_svfiprintf_r+0x60>
 8006f70:	2a25      	cmp	r2, #37	@ 0x25
 8006f72:	d1f9      	bne.n	8006f68 <_svfiprintf_r+0x54>
 8006f74:	ebba 0b04 	subs.w	fp, sl, r4
 8006f78:	d00b      	beq.n	8006f92 <_svfiprintf_r+0x7e>
 8006f7a:	465b      	mov	r3, fp
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	4629      	mov	r1, r5
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff ff6b 	bl	8006e5c <__ssputs_r>
 8006f86:	3001      	adds	r0, #1
 8006f88:	f000 80a7 	beq.w	80070da <_svfiprintf_r+0x1c6>
 8006f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f8e:	445a      	add	r2, fp
 8006f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f92:	f89a 3000 	ldrb.w	r3, [sl]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 809f 	beq.w	80070da <_svfiprintf_r+0x1c6>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fa6:	f10a 0a01 	add.w	sl, sl, #1
 8006faa:	9304      	str	r3, [sp, #16]
 8006fac:	9307      	str	r3, [sp, #28]
 8006fae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fb4:	4654      	mov	r4, sl
 8006fb6:	2205      	movs	r2, #5
 8006fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbc:	484e      	ldr	r0, [pc, #312]	@ (80070f8 <_svfiprintf_r+0x1e4>)
 8006fbe:	f7f9 f9af 	bl	8000320 <memchr>
 8006fc2:	9a04      	ldr	r2, [sp, #16]
 8006fc4:	b9d8      	cbnz	r0, 8006ffe <_svfiprintf_r+0xea>
 8006fc6:	06d0      	lsls	r0, r2, #27
 8006fc8:	bf44      	itt	mi
 8006fca:	2320      	movmi	r3, #32
 8006fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fd0:	0711      	lsls	r1, r2, #28
 8006fd2:	bf44      	itt	mi
 8006fd4:	232b      	movmi	r3, #43	@ 0x2b
 8006fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fda:	f89a 3000 	ldrb.w	r3, [sl]
 8006fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe0:	d015      	beq.n	800700e <_svfiprintf_r+0xfa>
 8006fe2:	9a07      	ldr	r2, [sp, #28]
 8006fe4:	4654      	mov	r4, sl
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	f04f 0c0a 	mov.w	ip, #10
 8006fec:	4621      	mov	r1, r4
 8006fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff2:	3b30      	subs	r3, #48	@ 0x30
 8006ff4:	2b09      	cmp	r3, #9
 8006ff6:	d94b      	bls.n	8007090 <_svfiprintf_r+0x17c>
 8006ff8:	b1b0      	cbz	r0, 8007028 <_svfiprintf_r+0x114>
 8006ffa:	9207      	str	r2, [sp, #28]
 8006ffc:	e014      	b.n	8007028 <_svfiprintf_r+0x114>
 8006ffe:	eba0 0308 	sub.w	r3, r0, r8
 8007002:	fa09 f303 	lsl.w	r3, r9, r3
 8007006:	4313      	orrs	r3, r2
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	46a2      	mov	sl, r4
 800700c:	e7d2      	b.n	8006fb4 <_svfiprintf_r+0xa0>
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	1d19      	adds	r1, r3, #4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	9103      	str	r1, [sp, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfbb      	ittet	lt
 800701a:	425b      	neglt	r3, r3
 800701c:	f042 0202 	orrlt.w	r2, r2, #2
 8007020:	9307      	strge	r3, [sp, #28]
 8007022:	9307      	strlt	r3, [sp, #28]
 8007024:	bfb8      	it	lt
 8007026:	9204      	strlt	r2, [sp, #16]
 8007028:	7823      	ldrb	r3, [r4, #0]
 800702a:	2b2e      	cmp	r3, #46	@ 0x2e
 800702c:	d10a      	bne.n	8007044 <_svfiprintf_r+0x130>
 800702e:	7863      	ldrb	r3, [r4, #1]
 8007030:	2b2a      	cmp	r3, #42	@ 0x2a
 8007032:	d132      	bne.n	800709a <_svfiprintf_r+0x186>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	1d1a      	adds	r2, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	9203      	str	r2, [sp, #12]
 800703c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007040:	3402      	adds	r4, #2
 8007042:	9305      	str	r3, [sp, #20]
 8007044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007108 <_svfiprintf_r+0x1f4>
 8007048:	7821      	ldrb	r1, [r4, #0]
 800704a:	2203      	movs	r2, #3
 800704c:	4650      	mov	r0, sl
 800704e:	f7f9 f967 	bl	8000320 <memchr>
 8007052:	b138      	cbz	r0, 8007064 <_svfiprintf_r+0x150>
 8007054:	9b04      	ldr	r3, [sp, #16]
 8007056:	eba0 000a 	sub.w	r0, r0, sl
 800705a:	2240      	movs	r2, #64	@ 0x40
 800705c:	4082      	lsls	r2, r0
 800705e:	4313      	orrs	r3, r2
 8007060:	3401      	adds	r4, #1
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007068:	4824      	ldr	r0, [pc, #144]	@ (80070fc <_svfiprintf_r+0x1e8>)
 800706a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800706e:	2206      	movs	r2, #6
 8007070:	f7f9 f956 	bl	8000320 <memchr>
 8007074:	2800      	cmp	r0, #0
 8007076:	d036      	beq.n	80070e6 <_svfiprintf_r+0x1d2>
 8007078:	4b21      	ldr	r3, [pc, #132]	@ (8007100 <_svfiprintf_r+0x1ec>)
 800707a:	bb1b      	cbnz	r3, 80070c4 <_svfiprintf_r+0x1b0>
 800707c:	9b03      	ldr	r3, [sp, #12]
 800707e:	3307      	adds	r3, #7
 8007080:	f023 0307 	bic.w	r3, r3, #7
 8007084:	3308      	adds	r3, #8
 8007086:	9303      	str	r3, [sp, #12]
 8007088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708a:	4433      	add	r3, r6
 800708c:	9309      	str	r3, [sp, #36]	@ 0x24
 800708e:	e76a      	b.n	8006f66 <_svfiprintf_r+0x52>
 8007090:	fb0c 3202 	mla	r2, ip, r2, r3
 8007094:	460c      	mov	r4, r1
 8007096:	2001      	movs	r0, #1
 8007098:	e7a8      	b.n	8006fec <_svfiprintf_r+0xd8>
 800709a:	2300      	movs	r3, #0
 800709c:	3401      	adds	r4, #1
 800709e:	9305      	str	r3, [sp, #20]
 80070a0:	4619      	mov	r1, r3
 80070a2:	f04f 0c0a 	mov.w	ip, #10
 80070a6:	4620      	mov	r0, r4
 80070a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ac:	3a30      	subs	r2, #48	@ 0x30
 80070ae:	2a09      	cmp	r2, #9
 80070b0:	d903      	bls.n	80070ba <_svfiprintf_r+0x1a6>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0c6      	beq.n	8007044 <_svfiprintf_r+0x130>
 80070b6:	9105      	str	r1, [sp, #20]
 80070b8:	e7c4      	b.n	8007044 <_svfiprintf_r+0x130>
 80070ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80070be:	4604      	mov	r4, r0
 80070c0:	2301      	movs	r3, #1
 80070c2:	e7f0      	b.n	80070a6 <_svfiprintf_r+0x192>
 80070c4:	ab03      	add	r3, sp, #12
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	462a      	mov	r2, r5
 80070ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007104 <_svfiprintf_r+0x1f0>)
 80070cc:	a904      	add	r1, sp, #16
 80070ce:	4638      	mov	r0, r7
 80070d0:	f3af 8000 	nop.w
 80070d4:	1c42      	adds	r2, r0, #1
 80070d6:	4606      	mov	r6, r0
 80070d8:	d1d6      	bne.n	8007088 <_svfiprintf_r+0x174>
 80070da:	89ab      	ldrh	r3, [r5, #12]
 80070dc:	065b      	lsls	r3, r3, #25
 80070de:	f53f af2d 	bmi.w	8006f3c <_svfiprintf_r+0x28>
 80070e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070e4:	e72c      	b.n	8006f40 <_svfiprintf_r+0x2c>
 80070e6:	ab03      	add	r3, sp, #12
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	462a      	mov	r2, r5
 80070ec:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <_svfiprintf_r+0x1f0>)
 80070ee:	a904      	add	r1, sp, #16
 80070f0:	4638      	mov	r0, r7
 80070f2:	f000 f879 	bl	80071e8 <_printf_i>
 80070f6:	e7ed      	b.n	80070d4 <_svfiprintf_r+0x1c0>
 80070f8:	080076ba 	.word	0x080076ba
 80070fc:	080076c4 	.word	0x080076c4
 8007100:	00000000 	.word	0x00000000
 8007104:	08006e5d 	.word	0x08006e5d
 8007108:	080076c0 	.word	0x080076c0

0800710c <_printf_common>:
 800710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	4616      	mov	r6, r2
 8007112:	4698      	mov	r8, r3
 8007114:	688a      	ldr	r2, [r1, #8]
 8007116:	690b      	ldr	r3, [r1, #16]
 8007118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800711c:	4293      	cmp	r3, r2
 800711e:	bfb8      	it	lt
 8007120:	4613      	movlt	r3, r2
 8007122:	6033      	str	r3, [r6, #0]
 8007124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007128:	4607      	mov	r7, r0
 800712a:	460c      	mov	r4, r1
 800712c:	b10a      	cbz	r2, 8007132 <_printf_common+0x26>
 800712e:	3301      	adds	r3, #1
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	0699      	lsls	r1, r3, #26
 8007136:	bf42      	ittt	mi
 8007138:	6833      	ldrmi	r3, [r6, #0]
 800713a:	3302      	addmi	r3, #2
 800713c:	6033      	strmi	r3, [r6, #0]
 800713e:	6825      	ldr	r5, [r4, #0]
 8007140:	f015 0506 	ands.w	r5, r5, #6
 8007144:	d106      	bne.n	8007154 <_printf_common+0x48>
 8007146:	f104 0a19 	add.w	sl, r4, #25
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	6832      	ldr	r2, [r6, #0]
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	42ab      	cmp	r3, r5
 8007152:	dc26      	bgt.n	80071a2 <_printf_common+0x96>
 8007154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007158:	6822      	ldr	r2, [r4, #0]
 800715a:	3b00      	subs	r3, #0
 800715c:	bf18      	it	ne
 800715e:	2301      	movne	r3, #1
 8007160:	0692      	lsls	r2, r2, #26
 8007162:	d42b      	bmi.n	80071bc <_printf_common+0xb0>
 8007164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007168:	4641      	mov	r1, r8
 800716a:	4638      	mov	r0, r7
 800716c:	47c8      	blx	r9
 800716e:	3001      	adds	r0, #1
 8007170:	d01e      	beq.n	80071b0 <_printf_common+0xa4>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	f003 0306 	and.w	r3, r3, #6
 800717a:	2b04      	cmp	r3, #4
 800717c:	bf02      	ittt	eq
 800717e:	68e5      	ldreq	r5, [r4, #12]
 8007180:	6833      	ldreq	r3, [r6, #0]
 8007182:	1aed      	subeq	r5, r5, r3
 8007184:	68a3      	ldr	r3, [r4, #8]
 8007186:	bf0c      	ite	eq
 8007188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800718c:	2500      	movne	r5, #0
 800718e:	4293      	cmp	r3, r2
 8007190:	bfc4      	itt	gt
 8007192:	1a9b      	subgt	r3, r3, r2
 8007194:	18ed      	addgt	r5, r5, r3
 8007196:	2600      	movs	r6, #0
 8007198:	341a      	adds	r4, #26
 800719a:	42b5      	cmp	r5, r6
 800719c:	d11a      	bne.n	80071d4 <_printf_common+0xc8>
 800719e:	2000      	movs	r0, #0
 80071a0:	e008      	b.n	80071b4 <_printf_common+0xa8>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4652      	mov	r2, sl
 80071a6:	4641      	mov	r1, r8
 80071a8:	4638      	mov	r0, r7
 80071aa:	47c8      	blx	r9
 80071ac:	3001      	adds	r0, #1
 80071ae:	d103      	bne.n	80071b8 <_printf_common+0xac>
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	3501      	adds	r5, #1
 80071ba:	e7c6      	b.n	800714a <_printf_common+0x3e>
 80071bc:	18e1      	adds	r1, r4, r3
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	2030      	movs	r0, #48	@ 0x30
 80071c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071c6:	4422      	add	r2, r4
 80071c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071d0:	3302      	adds	r3, #2
 80071d2:	e7c7      	b.n	8007164 <_printf_common+0x58>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4622      	mov	r2, r4
 80071d8:	4641      	mov	r1, r8
 80071da:	4638      	mov	r0, r7
 80071dc:	47c8      	blx	r9
 80071de:	3001      	adds	r0, #1
 80071e0:	d0e6      	beq.n	80071b0 <_printf_common+0xa4>
 80071e2:	3601      	adds	r6, #1
 80071e4:	e7d9      	b.n	800719a <_printf_common+0x8e>
	...

080071e8 <_printf_i>:
 80071e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	7e0f      	ldrb	r7, [r1, #24]
 80071ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071f0:	2f78      	cmp	r7, #120	@ 0x78
 80071f2:	4691      	mov	r9, r2
 80071f4:	4680      	mov	r8, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	469a      	mov	sl, r3
 80071fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071fe:	d807      	bhi.n	8007210 <_printf_i+0x28>
 8007200:	2f62      	cmp	r7, #98	@ 0x62
 8007202:	d80a      	bhi.n	800721a <_printf_i+0x32>
 8007204:	2f00      	cmp	r7, #0
 8007206:	f000 80d2 	beq.w	80073ae <_printf_i+0x1c6>
 800720a:	2f58      	cmp	r7, #88	@ 0x58
 800720c:	f000 80b9 	beq.w	8007382 <_printf_i+0x19a>
 8007210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007218:	e03a      	b.n	8007290 <_printf_i+0xa8>
 800721a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800721e:	2b15      	cmp	r3, #21
 8007220:	d8f6      	bhi.n	8007210 <_printf_i+0x28>
 8007222:	a101      	add	r1, pc, #4	@ (adr r1, 8007228 <_printf_i+0x40>)
 8007224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007228:	08007281 	.word	0x08007281
 800722c:	08007295 	.word	0x08007295
 8007230:	08007211 	.word	0x08007211
 8007234:	08007211 	.word	0x08007211
 8007238:	08007211 	.word	0x08007211
 800723c:	08007211 	.word	0x08007211
 8007240:	08007295 	.word	0x08007295
 8007244:	08007211 	.word	0x08007211
 8007248:	08007211 	.word	0x08007211
 800724c:	08007211 	.word	0x08007211
 8007250:	08007211 	.word	0x08007211
 8007254:	08007395 	.word	0x08007395
 8007258:	080072bf 	.word	0x080072bf
 800725c:	0800734f 	.word	0x0800734f
 8007260:	08007211 	.word	0x08007211
 8007264:	08007211 	.word	0x08007211
 8007268:	080073b7 	.word	0x080073b7
 800726c:	08007211 	.word	0x08007211
 8007270:	080072bf 	.word	0x080072bf
 8007274:	08007211 	.word	0x08007211
 8007278:	08007211 	.word	0x08007211
 800727c:	08007357 	.word	0x08007357
 8007280:	6833      	ldr	r3, [r6, #0]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6032      	str	r2, [r6, #0]
 8007288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800728c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007290:	2301      	movs	r3, #1
 8007292:	e09d      	b.n	80073d0 <_printf_i+0x1e8>
 8007294:	6833      	ldr	r3, [r6, #0]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	6031      	str	r1, [r6, #0]
 800729c:	0606      	lsls	r6, r0, #24
 800729e:	d501      	bpl.n	80072a4 <_printf_i+0xbc>
 80072a0:	681d      	ldr	r5, [r3, #0]
 80072a2:	e003      	b.n	80072ac <_printf_i+0xc4>
 80072a4:	0645      	lsls	r5, r0, #25
 80072a6:	d5fb      	bpl.n	80072a0 <_printf_i+0xb8>
 80072a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072ac:	2d00      	cmp	r5, #0
 80072ae:	da03      	bge.n	80072b8 <_printf_i+0xd0>
 80072b0:	232d      	movs	r3, #45	@ 0x2d
 80072b2:	426d      	negs	r5, r5
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b8:	4859      	ldr	r0, [pc, #356]	@ (8007420 <_printf_i+0x238>)
 80072ba:	230a      	movs	r3, #10
 80072bc:	e011      	b.n	80072e2 <_printf_i+0xfa>
 80072be:	6821      	ldr	r1, [r4, #0]
 80072c0:	6833      	ldr	r3, [r6, #0]
 80072c2:	0608      	lsls	r0, r1, #24
 80072c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80072c8:	d402      	bmi.n	80072d0 <_printf_i+0xe8>
 80072ca:	0649      	lsls	r1, r1, #25
 80072cc:	bf48      	it	mi
 80072ce:	b2ad      	uxthmi	r5, r5
 80072d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80072d2:	4853      	ldr	r0, [pc, #332]	@ (8007420 <_printf_i+0x238>)
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	bf14      	ite	ne
 80072d8:	230a      	movne	r3, #10
 80072da:	2308      	moveq	r3, #8
 80072dc:	2100      	movs	r1, #0
 80072de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072e2:	6866      	ldr	r6, [r4, #4]
 80072e4:	60a6      	str	r6, [r4, #8]
 80072e6:	2e00      	cmp	r6, #0
 80072e8:	bfa2      	ittt	ge
 80072ea:	6821      	ldrge	r1, [r4, #0]
 80072ec:	f021 0104 	bicge.w	r1, r1, #4
 80072f0:	6021      	strge	r1, [r4, #0]
 80072f2:	b90d      	cbnz	r5, 80072f8 <_printf_i+0x110>
 80072f4:	2e00      	cmp	r6, #0
 80072f6:	d04b      	beq.n	8007390 <_printf_i+0x1a8>
 80072f8:	4616      	mov	r6, r2
 80072fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80072fe:	fb03 5711 	mls	r7, r3, r1, r5
 8007302:	5dc7      	ldrb	r7, [r0, r7]
 8007304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007308:	462f      	mov	r7, r5
 800730a:	42bb      	cmp	r3, r7
 800730c:	460d      	mov	r5, r1
 800730e:	d9f4      	bls.n	80072fa <_printf_i+0x112>
 8007310:	2b08      	cmp	r3, #8
 8007312:	d10b      	bne.n	800732c <_printf_i+0x144>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	07df      	lsls	r7, r3, #31
 8007318:	d508      	bpl.n	800732c <_printf_i+0x144>
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	6861      	ldr	r1, [r4, #4]
 800731e:	4299      	cmp	r1, r3
 8007320:	bfde      	ittt	le
 8007322:	2330      	movle	r3, #48	@ 0x30
 8007324:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007328:	f106 36ff 	addle.w	r6, r6, #4294967295
 800732c:	1b92      	subs	r2, r2, r6
 800732e:	6122      	str	r2, [r4, #16]
 8007330:	f8cd a000 	str.w	sl, [sp]
 8007334:	464b      	mov	r3, r9
 8007336:	aa03      	add	r2, sp, #12
 8007338:	4621      	mov	r1, r4
 800733a:	4640      	mov	r0, r8
 800733c:	f7ff fee6 	bl	800710c <_printf_common>
 8007340:	3001      	adds	r0, #1
 8007342:	d14a      	bne.n	80073da <_printf_i+0x1f2>
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	b004      	add	sp, #16
 800734a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	f043 0320 	orr.w	r3, r3, #32
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	4833      	ldr	r0, [pc, #204]	@ (8007424 <_printf_i+0x23c>)
 8007358:	2778      	movs	r7, #120	@ 0x78
 800735a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	6831      	ldr	r1, [r6, #0]
 8007362:	061f      	lsls	r7, r3, #24
 8007364:	f851 5b04 	ldr.w	r5, [r1], #4
 8007368:	d402      	bmi.n	8007370 <_printf_i+0x188>
 800736a:	065f      	lsls	r7, r3, #25
 800736c:	bf48      	it	mi
 800736e:	b2ad      	uxthmi	r5, r5
 8007370:	6031      	str	r1, [r6, #0]
 8007372:	07d9      	lsls	r1, r3, #31
 8007374:	bf44      	itt	mi
 8007376:	f043 0320 	orrmi.w	r3, r3, #32
 800737a:	6023      	strmi	r3, [r4, #0]
 800737c:	b11d      	cbz	r5, 8007386 <_printf_i+0x19e>
 800737e:	2310      	movs	r3, #16
 8007380:	e7ac      	b.n	80072dc <_printf_i+0xf4>
 8007382:	4827      	ldr	r0, [pc, #156]	@ (8007420 <_printf_i+0x238>)
 8007384:	e7e9      	b.n	800735a <_printf_i+0x172>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	f023 0320 	bic.w	r3, r3, #32
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	e7f6      	b.n	800737e <_printf_i+0x196>
 8007390:	4616      	mov	r6, r2
 8007392:	e7bd      	b.n	8007310 <_printf_i+0x128>
 8007394:	6833      	ldr	r3, [r6, #0]
 8007396:	6825      	ldr	r5, [r4, #0]
 8007398:	6961      	ldr	r1, [r4, #20]
 800739a:	1d18      	adds	r0, r3, #4
 800739c:	6030      	str	r0, [r6, #0]
 800739e:	062e      	lsls	r6, r5, #24
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	d501      	bpl.n	80073a8 <_printf_i+0x1c0>
 80073a4:	6019      	str	r1, [r3, #0]
 80073a6:	e002      	b.n	80073ae <_printf_i+0x1c6>
 80073a8:	0668      	lsls	r0, r5, #25
 80073aa:	d5fb      	bpl.n	80073a4 <_printf_i+0x1bc>
 80073ac:	8019      	strh	r1, [r3, #0]
 80073ae:	2300      	movs	r3, #0
 80073b0:	6123      	str	r3, [r4, #16]
 80073b2:	4616      	mov	r6, r2
 80073b4:	e7bc      	b.n	8007330 <_printf_i+0x148>
 80073b6:	6833      	ldr	r3, [r6, #0]
 80073b8:	1d1a      	adds	r2, r3, #4
 80073ba:	6032      	str	r2, [r6, #0]
 80073bc:	681e      	ldr	r6, [r3, #0]
 80073be:	6862      	ldr	r2, [r4, #4]
 80073c0:	2100      	movs	r1, #0
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7f8 ffac 	bl	8000320 <memchr>
 80073c8:	b108      	cbz	r0, 80073ce <_printf_i+0x1e6>
 80073ca:	1b80      	subs	r0, r0, r6
 80073cc:	6060      	str	r0, [r4, #4]
 80073ce:	6863      	ldr	r3, [r4, #4]
 80073d0:	6123      	str	r3, [r4, #16]
 80073d2:	2300      	movs	r3, #0
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073d8:	e7aa      	b.n	8007330 <_printf_i+0x148>
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	4632      	mov	r2, r6
 80073de:	4649      	mov	r1, r9
 80073e0:	4640      	mov	r0, r8
 80073e2:	47d0      	blx	sl
 80073e4:	3001      	adds	r0, #1
 80073e6:	d0ad      	beq.n	8007344 <_printf_i+0x15c>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	079b      	lsls	r3, r3, #30
 80073ec:	d413      	bmi.n	8007416 <_printf_i+0x22e>
 80073ee:	68e0      	ldr	r0, [r4, #12]
 80073f0:	9b03      	ldr	r3, [sp, #12]
 80073f2:	4298      	cmp	r0, r3
 80073f4:	bfb8      	it	lt
 80073f6:	4618      	movlt	r0, r3
 80073f8:	e7a6      	b.n	8007348 <_printf_i+0x160>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4632      	mov	r2, r6
 80073fe:	4649      	mov	r1, r9
 8007400:	4640      	mov	r0, r8
 8007402:	47d0      	blx	sl
 8007404:	3001      	adds	r0, #1
 8007406:	d09d      	beq.n	8007344 <_printf_i+0x15c>
 8007408:	3501      	adds	r5, #1
 800740a:	68e3      	ldr	r3, [r4, #12]
 800740c:	9903      	ldr	r1, [sp, #12]
 800740e:	1a5b      	subs	r3, r3, r1
 8007410:	42ab      	cmp	r3, r5
 8007412:	dcf2      	bgt.n	80073fa <_printf_i+0x212>
 8007414:	e7eb      	b.n	80073ee <_printf_i+0x206>
 8007416:	2500      	movs	r5, #0
 8007418:	f104 0619 	add.w	r6, r4, #25
 800741c:	e7f5      	b.n	800740a <_printf_i+0x222>
 800741e:	bf00      	nop
 8007420:	080076cb 	.word	0x080076cb
 8007424:	080076dc 	.word	0x080076dc

08007428 <memmove>:
 8007428:	4288      	cmp	r0, r1
 800742a:	b510      	push	{r4, lr}
 800742c:	eb01 0402 	add.w	r4, r1, r2
 8007430:	d902      	bls.n	8007438 <memmove+0x10>
 8007432:	4284      	cmp	r4, r0
 8007434:	4623      	mov	r3, r4
 8007436:	d807      	bhi.n	8007448 <memmove+0x20>
 8007438:	1e43      	subs	r3, r0, #1
 800743a:	42a1      	cmp	r1, r4
 800743c:	d008      	beq.n	8007450 <memmove+0x28>
 800743e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007446:	e7f8      	b.n	800743a <memmove+0x12>
 8007448:	4402      	add	r2, r0
 800744a:	4601      	mov	r1, r0
 800744c:	428a      	cmp	r2, r1
 800744e:	d100      	bne.n	8007452 <memmove+0x2a>
 8007450:	bd10      	pop	{r4, pc}
 8007452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800745a:	e7f7      	b.n	800744c <memmove+0x24>

0800745c <_sbrk_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d06      	ldr	r5, [pc, #24]	@ (8007478 <_sbrk_r+0x1c>)
 8007460:	2300      	movs	r3, #0
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7f9 fc54 	bl	8000d14 <_sbrk>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_sbrk_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_sbrk_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	24000d58 	.word	0x24000d58

0800747c <memcpy>:
 800747c:	440a      	add	r2, r1
 800747e:	4291      	cmp	r1, r2
 8007480:	f100 33ff 	add.w	r3, r0, #4294967295
 8007484:	d100      	bne.n	8007488 <memcpy+0xc>
 8007486:	4770      	bx	lr
 8007488:	b510      	push	{r4, lr}
 800748a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007492:	4291      	cmp	r1, r2
 8007494:	d1f9      	bne.n	800748a <memcpy+0xe>
 8007496:	bd10      	pop	{r4, pc}

08007498 <_realloc_r>:
 8007498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	4680      	mov	r8, r0
 800749e:	4615      	mov	r5, r2
 80074a0:	460c      	mov	r4, r1
 80074a2:	b921      	cbnz	r1, 80074ae <_realloc_r+0x16>
 80074a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074a8:	4611      	mov	r1, r2
 80074aa:	f7ff bc4b 	b.w	8006d44 <_malloc_r>
 80074ae:	b92a      	cbnz	r2, 80074bc <_realloc_r+0x24>
 80074b0:	f7ff fbdc 	bl	8006c6c <_free_r>
 80074b4:	2400      	movs	r4, #0
 80074b6:	4620      	mov	r0, r4
 80074b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074bc:	f000 f81a 	bl	80074f4 <_malloc_usable_size_r>
 80074c0:	4285      	cmp	r5, r0
 80074c2:	4606      	mov	r6, r0
 80074c4:	d802      	bhi.n	80074cc <_realloc_r+0x34>
 80074c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80074ca:	d8f4      	bhi.n	80074b6 <_realloc_r+0x1e>
 80074cc:	4629      	mov	r1, r5
 80074ce:	4640      	mov	r0, r8
 80074d0:	f7ff fc38 	bl	8006d44 <_malloc_r>
 80074d4:	4607      	mov	r7, r0
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d0ec      	beq.n	80074b4 <_realloc_r+0x1c>
 80074da:	42b5      	cmp	r5, r6
 80074dc:	462a      	mov	r2, r5
 80074de:	4621      	mov	r1, r4
 80074e0:	bf28      	it	cs
 80074e2:	4632      	movcs	r2, r6
 80074e4:	f7ff ffca 	bl	800747c <memcpy>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4640      	mov	r0, r8
 80074ec:	f7ff fbbe 	bl	8006c6c <_free_r>
 80074f0:	463c      	mov	r4, r7
 80074f2:	e7e0      	b.n	80074b6 <_realloc_r+0x1e>

080074f4 <_malloc_usable_size_r>:
 80074f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f8:	1f18      	subs	r0, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bfbc      	itt	lt
 80074fe:	580b      	ldrlt	r3, [r1, r0]
 8007500:	18c0      	addlt	r0, r0, r3
 8007502:	4770      	bx	lr

08007504 <_init>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	bf00      	nop
 8007508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750a:	bc08      	pop	{r3}
 800750c:	469e      	mov	lr, r3
 800750e:	4770      	bx	lr

08007510 <_fini>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr
