
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b544  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800b814  0800b814  0000c814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b9a4  0800b9a4  0000c9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b9ac  0800b9ac  0000c9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b9b0  0800b9b0  0000c9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000318  24000000  0800b9b4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d9c  24000318  0800bccc  0000d318  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240010b4  0800bccc  0000e0b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY
 10 .debug_info   000192b0  00000000  00000000  0000d346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003695  00000000  00000000  000265f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001190  00000000  00000000  00029c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d5c  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000105b7  00000000  00000000  0002bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000064e2  00000000  00000000  0003c133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00042615  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004dc0  00000000  00000000  00042658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  00047418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000318 	.word	0x24000318
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b7fc 	.word	0x0800b7fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400031c 	.word	0x2400031c
 800030c:	0800b7fc 	.word	0x0800b7fc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:
extern USBD_HandleTypeDef hUsbDeviceHS;



MatrixScanResult MatrixScan()
{
 80006b0:	b480      	push	{r7}
 80006b2:	b0a5      	sub	sp, #148	@ 0x94
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	uint32_t Last_gpioA_state = gpioA_state;
 80006b8:	4b94      	ldr	r3, [pc, #592]	@ (800090c <MatrixScan+0x25c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	667b      	str	r3, [r7, #100]	@ 0x64
	uint32_t Last_gpioB_state = gpioB_state;
 80006be:	4b94      	ldr	r3, [pc, #592]	@ (8000910 <MatrixScan+0x260>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	663b      	str	r3, [r7, #96]	@ 0x60
	uint32_t Last_gpioC_state = gpioC_state;
 80006c4:	4b93      	ldr	r3, [pc, #588]	@ (8000914 <MatrixScan+0x264>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint32_t Last_gpioD_state = gpioD_state;
 80006ca:	4b93      	ldr	r3, [pc, #588]	@ (8000918 <MatrixScan+0x268>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint32_t Last_gpioE_state = gpioE_state;
 80006d0:	4b92      	ldr	r3, [pc, #584]	@ (800091c <MatrixScan+0x26c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54

    uint32_t gpioA_state = GPIOA->IDR; // GPIOA의 모든 핀 상태
 80006d6:	4b92      	ldr	r3, [pc, #584]	@ (8000920 <MatrixScan+0x270>)
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	653b      	str	r3, [r7, #80]	@ 0x50
    uint32_t gpioB_state = GPIOB->IDR; // GPIOB의 모든 핀 상태
 80006dc:	4b91      	ldr	r3, [pc, #580]	@ (8000924 <MatrixScan+0x274>)
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    uint32_t gpioC_state = GPIOC->IDR; // GPIOC의 모든 핀 상태
 80006e2:	4b91      	ldr	r3, [pc, #580]	@ (8000928 <MatrixScan+0x278>)
 80006e4:	691b      	ldr	r3, [r3, #16]
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t gpioD_state = GPIOD->IDR; // GPIOD의 모든 핀 상태
 80006e8:	4b90      	ldr	r3, [pc, #576]	@ (800092c <MatrixScan+0x27c>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t gpioE_state = GPIOE->IDR; // GPIOE의 모든 핀 상태
 80006ee:	4b90      	ldr	r3, [pc, #576]	@ (8000930 <MatrixScan+0x280>)
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40

    uint32_t changedPinA = gpioA_state ^ Last_gpioA_state;
 80006f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80006f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006f8:	4053      	eors	r3, r2
 80006fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t changedPinB = gpioB_state ^ Last_gpioB_state;
 80006fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000702:	4053      	eors	r3, r2
 8000704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t changedPinC = gpioC_state ^ Last_gpioC_state;
 8000708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800070a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800070c:	4053      	eors	r3, r2
 800070e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 8000712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000714:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000716:	4053      	eors	r3, r2
 8000718:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 800071c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800071e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000720:	4053      	eors	r3, r2
 8000722:	67fb      	str	r3, [r7, #124]	@ 0x7c

    if ( changedPinA != 0 )
 8000724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000728:	2b00      	cmp	r3, #0
 800072a:	d028      	beq.n	800077e <MatrixScan+0xce>
    {
        int WhereIsOne = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	67bb      	str	r3, [r7, #120]	@ 0x78
        while ((changedPinA & 1) == 0)
 8000730:	e007      	b.n	8000742 <MatrixScan+0x92>
        {
        	changedPinA = changedPinA >> 1;
 8000732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000736:	085b      	lsrs	r3, r3, #1
 8000738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            WhereIsOne++;
 800073c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800073e:	3301      	adds	r3, #1
 8000740:	67bb      	str	r3, [r7, #120]	@ 0x78
        while ((changedPinA & 1) == 0)
 8000742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0f1      	beq.n	8000732 <MatrixScan+0x82>
        }

        MatrixScanResult result;

        uint8_t bitValue = (changedPinA >> WhereIsOne) & 1;
 800074e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000752:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000754:	fa22 f303 	lsr.w	r3, r2, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        result.WhereIsOne = WhereIsOne;
 8000762:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
        result.PinState = bitValue;
 8000766:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        return result;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	461a      	mov	r2, r3
 8000770:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000774:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000778:	e882 0003 	stmia.w	r2, {r0, r1}

    result.WhereIsOne = -1;
    result.PinState = -1;

    return result;
}
 800077c:	e0c0      	b.n	8000900 <MatrixScan+0x250>
    else if ( changedPinB != 0)
 800077e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000782:	2b00      	cmp	r3, #0
 8000784:	d029      	beq.n	80007da <MatrixScan+0x12a>
        int WhereIsOne = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	677b      	str	r3, [r7, #116]	@ 0x74
        while ((changedPinB & 1) == 0)
 800078a:	e007      	b.n	800079c <MatrixScan+0xec>
        	changedPinB = changedPinB >> 1;
 800078c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            WhereIsOne++;
 8000796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000798:	3301      	adds	r3, #1
 800079a:	677b      	str	r3, [r7, #116]	@ 0x74
        while ((changedPinB & 1) == 0)
 800079c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0f1      	beq.n	800078c <MatrixScan+0xdc>
        uint8_t bitValue = (changedPinB >> WhereIsOne) & 1;
 80007a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80007ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007ae:	fa22 f303 	lsr.w	r3, r2, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        result.WhereIsOne = WhereIsOne+16;
 80007bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007be:	3310      	adds	r3, #16
 80007c0:	623b      	str	r3, [r7, #32]
        result.PinState = bitValue;
 80007c2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
        return result;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	461a      	mov	r2, r3
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007d4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80007d8:	e092      	b.n	8000900 <MatrixScan+0x250>
    else if ( changedPinC != 0)
 80007da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d029      	beq.n	8000836 <MatrixScan+0x186>
        int WhereIsOne = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	673b      	str	r3, [r7, #112]	@ 0x70
        while ((changedPinC & 1) == 0)
 80007e6:	e007      	b.n	80007f8 <MatrixScan+0x148>
        	changedPinC = changedPinC >> 1;
 80007e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            WhereIsOne++;
 80007f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007f4:	3301      	adds	r3, #1
 80007f6:	673b      	str	r3, [r7, #112]	@ 0x70
        while ((changedPinC & 1) == 0)
 80007f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f1      	beq.n	80007e8 <MatrixScan+0x138>
        uint8_t bitValue = (changedPinC >> WhereIsOne) & 1;
 8000804:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000808:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800080a:	fa22 f303 	lsr.w	r3, r2, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        result.WhereIsOne = WhereIsOne + 32;
 8000818:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800081a:	3320      	adds	r3, #32
 800081c:	61bb      	str	r3, [r7, #24]
        result.PinState = bitValue;
 800081e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000822:	61fb      	str	r3, [r7, #28]
        return result;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	461a      	mov	r2, r3
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000830:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000834:	e064      	b.n	8000900 <MatrixScan+0x250>
    else if ( changedPinD != 0)
 8000836:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800083a:	2b00      	cmp	r3, #0
 800083c:	d029      	beq.n	8000892 <MatrixScan+0x1e2>
        int WhereIsOne = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	66fb      	str	r3, [r7, #108]	@ 0x6c
        while ((changedPinD & 1) == 0)
 8000842:	e007      	b.n	8000854 <MatrixScan+0x1a4>
        	changedPinD = changedPinD >> 1;
 8000844:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            WhereIsOne++;
 800084e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000850:	3301      	adds	r3, #1
 8000852:	66fb      	str	r3, [r7, #108]	@ 0x6c
        while ((changedPinD & 1) == 0)
 8000854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0f1      	beq.n	8000844 <MatrixScan+0x194>
        uint8_t bitValue = (changedPinD >> WhereIsOne) & 1;
 8000860:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000866:	fa22 f303 	lsr.w	r3, r2, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        result.WhereIsOne = WhereIsOne + 48;
 8000874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000876:	3330      	adds	r3, #48	@ 0x30
 8000878:	613b      	str	r3, [r7, #16]
        result.PinState = bitValue;
 800087a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800087e:	617b      	str	r3, [r7, #20]
        return result;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	461a      	mov	r2, r3
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	e893 0003 	ldmia.w	r3, {r0, r1}
 800088c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000890:	e036      	b.n	8000900 <MatrixScan+0x250>
    else if ( changedPinE != 0)
 8000892:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000894:	2b00      	cmp	r3, #0
 8000896:	d025      	beq.n	80008e4 <MatrixScan+0x234>
        int WhereIsOne = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	66bb      	str	r3, [r7, #104]	@ 0x68
        while ((changedPinE & 1) == 0)
 800089c:	e005      	b.n	80008aa <MatrixScan+0x1fa>
        	changedPinE = changedPinE >> 1;
 800089e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
            WhereIsOne++;
 80008a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008a6:	3301      	adds	r3, #1
 80008a8:	66bb      	str	r3, [r7, #104]	@ 0x68
        while ((changedPinE & 1) == 0)
 80008aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f4      	beq.n	800089e <MatrixScan+0x1ee>
        uint8_t bitValue = (changedPinE >> WhereIsOne) & 1;
 80008b4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80008b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008b8:	fa22 f303 	lsr.w	r3, r2, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        result.WhereIsOne = WhereIsOne + 64;
 80008c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008c8:	3340      	adds	r3, #64	@ 0x40
 80008ca:	60bb      	str	r3, [r7, #8]
        result.PinState = bitValue;
 80008cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008d0:	60fb      	str	r3, [r7, #12]
        return result;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	461a      	mov	r2, r3
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008e2:	e00d      	b.n	8000900 <MatrixScan+0x250>
    result.WhereIsOne = -1;
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	633b      	str	r3, [r7, #48]	@ 0x30
    result.PinState = -1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	637b      	str	r3, [r7, #52]	@ 0x34
    return result;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	461a      	mov	r2, r3
 80008f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008fc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	3794      	adds	r7, #148	@ 0x94
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	24000578 	.word	0x24000578
 8000910:	2400057c 	.word	0x2400057c
 8000914:	24000580 	.word	0x24000580
 8000918:	24000584 	.word	0x24000584
 800091c:	24000588 	.word	0x24000588
 8000920:	58020000 	.word	0x58020000
 8000924:	58020400 	.word	0x58020400
 8000928:	58020800 	.word	0x58020800
 800092c:	58020c00 	.word	0x58020c00
 8000930:	58021000 	.word	0x58021000

08000934 <SetKeycode>:




void SetKeycode(int keycode)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == 0x00)
 800093c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a68 <SetKeycode+0x134>)
 800093e:	789b      	ldrb	r3, [r3, #2]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d104      	bne.n	800094e <SetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = keycode;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b47      	ldr	r3, [pc, #284]	@ (8000a68 <SetKeycode+0x134>)
 800094a:	709a      	strb	r2, [r3, #2]
    }
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
    {
        keyboardReport.Keycode6 = keycode;
    }
}
 800094c:	e086      	b.n	8000a5c <SetKeycode+0x128>
    else if (keyboardReport.Keycode2 == 0x00 && keycode != keyboardReport.Keycode1)
 800094e:	4b46      	ldr	r3, [pc, #280]	@ (8000a68 <SetKeycode+0x134>)
 8000950:	78db      	ldrb	r3, [r3, #3]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10a      	bne.n	800096c <SetKeycode+0x38>
 8000956:	4b44      	ldr	r3, [pc, #272]	@ (8000a68 <SetKeycode+0x134>)
 8000958:	789b      	ldrb	r3, [r3, #2]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4293      	cmp	r3, r2
 8000960:	d004      	beq.n	800096c <SetKeycode+0x38>
        keyboardReport.Keycode2 = keycode;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b40      	ldr	r3, [pc, #256]	@ (8000a68 <SetKeycode+0x134>)
 8000968:	70da      	strb	r2, [r3, #3]
 800096a:	e077      	b.n	8000a5c <SetKeycode+0x128>
    else if (keyboardReport.Keycode3 == 0x00 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 800096c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a68 <SetKeycode+0x134>)
 800096e:	791b      	ldrb	r3, [r3, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d110      	bne.n	8000996 <SetKeycode+0x62>
 8000974:	4b3c      	ldr	r3, [pc, #240]	@ (8000a68 <SetKeycode+0x134>)
 8000976:	78db      	ldrb	r3, [r3, #3]
 8000978:	461a      	mov	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4293      	cmp	r3, r2
 800097e:	d00a      	beq.n	8000996 <SetKeycode+0x62>
 8000980:	4b39      	ldr	r3, [pc, #228]	@ (8000a68 <SetKeycode+0x134>)
 8000982:	789b      	ldrb	r3, [r3, #2]
 8000984:	461a      	mov	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4293      	cmp	r3, r2
 800098a:	d004      	beq.n	8000996 <SetKeycode+0x62>
        keyboardReport.Keycode3 = keycode;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b35      	ldr	r3, [pc, #212]	@ (8000a68 <SetKeycode+0x134>)
 8000992:	711a      	strb	r2, [r3, #4]
 8000994:	e062      	b.n	8000a5c <SetKeycode+0x128>
    else if (keyboardReport.Keycode4 == 0x00 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000996:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <SetKeycode+0x134>)
 8000998:	795b      	ldrb	r3, [r3, #5]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d116      	bne.n	80009cc <SetKeycode+0x98>
 800099e:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <SetKeycode+0x134>)
 80009a0:	791b      	ldrb	r3, [r3, #4]
 80009a2:	461a      	mov	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d010      	beq.n	80009cc <SetKeycode+0x98>
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <SetKeycode+0x134>)
 80009ac:	78db      	ldrb	r3, [r3, #3]
 80009ae:	461a      	mov	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d00a      	beq.n	80009cc <SetKeycode+0x98>
 80009b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <SetKeycode+0x134>)
 80009b8:	789b      	ldrb	r3, [r3, #2]
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4293      	cmp	r3, r2
 80009c0:	d004      	beq.n	80009cc <SetKeycode+0x98>
        keyboardReport.Keycode4 = keycode;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <SetKeycode+0x134>)
 80009c8:	715a      	strb	r2, [r3, #5]
 80009ca:	e047      	b.n	8000a5c <SetKeycode+0x128>
    else if (keyboardReport.Keycode5 == 0x00 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <SetKeycode+0x134>)
 80009ce:	799b      	ldrb	r3, [r3, #6]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d11c      	bne.n	8000a0e <SetKeycode+0xda>
 80009d4:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <SetKeycode+0x134>)
 80009d6:	795b      	ldrb	r3, [r3, #5]
 80009d8:	461a      	mov	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4293      	cmp	r3, r2
 80009de:	d016      	beq.n	8000a0e <SetKeycode+0xda>
 80009e0:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <SetKeycode+0x134>)
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d010      	beq.n	8000a0e <SetKeycode+0xda>
 80009ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <SetKeycode+0x134>)
 80009ee:	78db      	ldrb	r3, [r3, #3]
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d00a      	beq.n	8000a0e <SetKeycode+0xda>
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <SetKeycode+0x134>)
 80009fa:	789b      	ldrb	r3, [r3, #2]
 80009fc:	461a      	mov	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d004      	beq.n	8000a0e <SetKeycode+0xda>
        keyboardReport.Keycode5 = keycode;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <SetKeycode+0x134>)
 8000a0a:	719a      	strb	r2, [r3, #6]
 8000a0c:	e026      	b.n	8000a5c <SetKeycode+0x128>
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <SetKeycode+0x134>)
 8000a10:	79db      	ldrb	r3, [r3, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d122      	bne.n	8000a5c <SetKeycode+0x128>
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <SetKeycode+0x134>)
 8000a18:	799b      	ldrb	r3, [r3, #6]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d01c      	beq.n	8000a5c <SetKeycode+0x128>
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <SetKeycode+0x134>)
 8000a24:	795b      	ldrb	r3, [r3, #5]
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d016      	beq.n	8000a5c <SetKeycode+0x128>
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <SetKeycode+0x134>)
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d010      	beq.n	8000a5c <SetKeycode+0x128>
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <SetKeycode+0x134>)
 8000a3c:	78db      	ldrb	r3, [r3, #3]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d00a      	beq.n	8000a5c <SetKeycode+0x128>
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <SetKeycode+0x134>)
 8000a48:	789b      	ldrb	r3, [r3, #2]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d004      	beq.n	8000a5c <SetKeycode+0x128>
        keyboardReport.Keycode6 = keycode;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SetKeycode+0x134>)
 8000a58:	71da      	strb	r2, [r3, #7]
}
 8000a5a:	e7ff      	b.n	8000a5c <SetKeycode+0x128>
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	24000334 	.word	0x24000334

08000a6c <ResetKeycode>:

void ResetKeycode(int keycode)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == keycode)
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <ResetKeycode+0x80>)
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d102      	bne.n	8000a86 <ResetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = 0x00;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <ResetKeycode+0x80>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	709a      	strb	r2, [r3, #2]
    }
    if (keyboardReport.Keycode2 == keycode)
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <ResetKeycode+0x80>)
 8000a88:	78db      	ldrb	r3, [r3, #3]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d102      	bne.n	8000a98 <ResetKeycode+0x2c>
    {
        keyboardReport.Keycode2 = 0x00;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <ResetKeycode+0x80>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	70da      	strb	r2, [r3, #3]
    }
    if (keyboardReport.Keycode3 == keycode)
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <ResetKeycode+0x80>)
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d102      	bne.n	8000aaa <ResetKeycode+0x3e>
    {
        keyboardReport.Keycode3 = 0x00;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <ResetKeycode+0x80>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	711a      	strb	r2, [r3, #4]
    }
    if (keyboardReport.Keycode4 == keycode)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <ResetKeycode+0x80>)
 8000aac:	795b      	ldrb	r3, [r3, #5]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d102      	bne.n	8000abc <ResetKeycode+0x50>
    {
        keyboardReport.Keycode4 = 0x00;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <ResetKeycode+0x80>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	715a      	strb	r2, [r3, #5]
    }
    if (keyboardReport.Keycode5 == keycode)
 8000abc:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <ResetKeycode+0x80>)
 8000abe:	799b      	ldrb	r3, [r3, #6]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d102      	bne.n	8000ace <ResetKeycode+0x62>
    {
        keyboardReport.Keycode5 = 0x00;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <ResetKeycode+0x80>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	719a      	strb	r2, [r3, #6]
    }
    if (keyboardReport.Keycode6 == keycode)
 8000ace:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <ResetKeycode+0x80>)
 8000ad0:	79db      	ldrb	r3, [r3, #7]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d102      	bne.n	8000ae0 <ResetKeycode+0x74>
    {
        keyboardReport.Keycode6 = 0x00;
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <ResetKeycode+0x80>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	71da      	strb	r2, [r3, #7]
    }
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	24000334 	.word	0x24000334

08000af0 <KeycodeSend>:

void KeycodeSend()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b09a      	sub	sp, #104	@ 0x68
 8000af4:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t *)&keyboardReport, sizeof(keyboardReport));
 8000af6:	2208      	movs	r2, #8
 8000af8:	490c      	ldr	r1, [pc, #48]	@ (8000b2c <KeycodeSend+0x3c>)
 8000afa:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <KeycodeSend+0x40>)
 8000afc:	f008 f96e 	bl	8008ddc <USBD_HID_SendReport>

    char message[100];
    sprintf(message, "KeycodeSend");
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	490c      	ldr	r1, [pc, #48]	@ (8000b34 <KeycodeSend+0x44>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00a f9d9 	bl	800aebc <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fbff 	bl	8000310 <strlen>
 8000b12:	4603      	mov	r3, r0
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	1d39      	adds	r1, r7, #4
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1c:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <KeycodeSend+0x48>)
 8000b1e:	f005 fa31 	bl	8005f84 <HAL_UART_Transmit>
}
 8000b22:	bf00      	nop
 8000b24:	3768      	adds	r7, #104	@ 0x68
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000334 	.word	0x24000334
 8000b30:	24000598 	.word	0x24000598
 8000b34:	0800b814 	.word	0x0800b814
 8000b38:	2400033c 	.word	0x2400033c

08000b3c <PressKeycodes>:

void PressKeycodes(int i)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	@ 0x70
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

	if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000b44:	4b89      	ldr	r3, [pc, #548]	@ (8000d6c <PressKeycodes+0x230>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4989      	ldr	r1, [pc, #548]	@ (8000d70 <PressKeycodes+0x234>)
 8000b4a:	2264      	movs	r2, #100	@ 0x64
 8000b4c:	fb03 f202 	mul.w	r2, r3, r2
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b58:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d925      	bls.n	8000bac <PressKeycodes+0x70>
	{
		KeyTimer = HAL_GetTick();
 8000b60:	f000 fe66 	bl	8001830 <HAL_GetTick>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b82      	ldr	r3, [pc, #520]	@ (8000d74 <PressKeycodes+0x238>)
 8000b6a:	601a      	str	r2, [r3, #0]

		char message5[100];
		sprintf(message5, "HoldTapPress = %d \n\r", Keycode[LayerState][i]);
 8000b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8000d6c <PressKeycodes+0x230>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	497f      	ldr	r1, [pc, #508]	@ (8000d70 <PressKeycodes+0x234>)
 8000b72:	2264      	movs	r2, #100	@ 0x64
 8000b74:	fb03 f202 	mul.w	r2, r3, r2
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b80:	461a      	mov	r2, r3
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	497c      	ldr	r1, [pc, #496]	@ (8000d78 <PressKeycodes+0x23c>)
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f00a f997 	bl	800aebc <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fbbc 	bl	8000310 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	f107 010c 	add.w	r1, r7, #12
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	4875      	ldr	r0, [pc, #468]	@ (8000d7c <PressKeycodes+0x240>)
 8000ba6:	f005 f9ed 	bl	8005f84 <HAL_UART_Transmit>

		char message4[100];
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
	}
}
 8000baa:	e0db      	b.n	8000d64 <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 10000)
 8000bac:	4b6f      	ldr	r3, [pc, #444]	@ (8000d6c <PressKeycodes+0x230>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	496f      	ldr	r1, [pc, #444]	@ (8000d70 <PressKeycodes+0x234>)
 8000bb2:	2264      	movs	r2, #100	@ 0x64
 8000bb4:	fb03 f202 	mul.w	r2, r3, r2
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bc0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d941      	bls.n	8000c4c <PressKeycodes+0x110>
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i] - 10000];
 8000bc8:	4b68      	ldr	r3, [pc, #416]	@ (8000d6c <PressKeycodes+0x230>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4968      	ldr	r1, [pc, #416]	@ (8000d70 <PressKeycodes+0x234>)
 8000bce:	2264      	movs	r2, #100	@ 0x64
 8000bd0:	fb03 f202 	mul.w	r2, r3, r2
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b68      	ldr	r3, [pc, #416]	@ (8000d80 <PressKeycodes+0x244>)
 8000be0:	4413      	add	r3, r2
 8000be2:	4a68      	ldr	r2, [pc, #416]	@ (8000d84 <PressKeycodes+0x248>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	b25a      	sxtb	r2, r3
 8000bea:	4b67      	ldr	r3, [pc, #412]	@ (8000d88 <PressKeycodes+0x24c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b64      	ldr	r3, [pc, #400]	@ (8000d88 <PressKeycodes+0x24c>)
 8000bf8:	701a      	strb	r2, [r3, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 8000bfa:	4b63      	ldr	r3, [pc, #396]	@ (8000d88 <PressKeycodes+0x24c>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	4b63      	ldr	r3, [pc, #396]	@ (8000d8c <PressKeycodes+0x250>)
 8000c00:	701a      	strb	r2, [r3, #0]
		sprintf(message1, "ModifierPress = %d \n\r", Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8000c02:	4b5a      	ldr	r3, [pc, #360]	@ (8000d6c <PressKeycodes+0x230>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	495a      	ldr	r1, [pc, #360]	@ (8000d70 <PressKeycodes+0x234>)
 8000c08:	2264      	movs	r2, #100	@ 0x64
 8000c0a:	fb03 f202 	mul.w	r2, r3, r2
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b59      	ldr	r3, [pc, #356]	@ (8000d80 <PressKeycodes+0x244>)
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a59      	ldr	r2, [pc, #356]	@ (8000d84 <PressKeycodes+0x248>)
 8000c1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	495a      	ldr	r1, [pc, #360]	@ (8000d90 <PressKeycodes+0x254>)
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f00a f947 	bl	800aebc <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fb6c 	bl	8000310 <strlen>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	f107 010c 	add.w	r1, r7, #12
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	484d      	ldr	r0, [pc, #308]	@ (8000d7c <PressKeycodes+0x240>)
 8000c46:	f005 f99d 	bl	8005f84 <HAL_UART_Transmit>
}
 8000c4a:	e08b      	b.n	8000d64 <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 5000)
 8000c4c:	4b47      	ldr	r3, [pc, #284]	@ (8000d6c <PressKeycodes+0x230>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4947      	ldr	r1, [pc, #284]	@ (8000d70 <PressKeycodes+0x234>)
 8000c52:	2264      	movs	r2, #100	@ 0x64
 8000c54:	fb03 f202 	mul.w	r2, r3, r2
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c60:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d94b      	bls.n	8000d00 <PressKeycodes+0x1c4>
		if ( Keycode[LayerState][i] == KC_FN1)
 8000c68:	4b40      	ldr	r3, [pc, #256]	@ (8000d6c <PressKeycodes+0x230>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4940      	ldr	r1, [pc, #256]	@ (8000d70 <PressKeycodes+0x234>)
 8000c6e:	2264      	movs	r2, #100	@ 0x64
 8000c70:	fb03 f202 	mul.w	r2, r3, r2
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d103      	bne.n	8000c8c <PressKeycodes+0x150>
			LayerState = 1; // Layer1 when pressed
 8000c84:	4b39      	ldr	r3, [pc, #228]	@ (8000d6c <PressKeycodes+0x230>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e022      	b.n	8000cd2 <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD0)
 8000c8c:	4b37      	ldr	r3, [pc, #220]	@ (8000d6c <PressKeycodes+0x230>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4937      	ldr	r1, [pc, #220]	@ (8000d70 <PressKeycodes+0x234>)
 8000c92:	2264      	movs	r2, #100	@ 0x64
 8000c94:	fb03 f202 	mul.w	r2, r3, r2
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ca0:	f241 3289 	movw	r2, #5001	@ 0x1389
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d103      	bne.n	8000cb0 <PressKeycodes+0x174>
			LayerState = 0;
 8000ca8:	4b30      	ldr	r3, [pc, #192]	@ (8000d6c <PressKeycodes+0x230>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e010      	b.n	8000cd2 <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD1)
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <PressKeycodes+0x230>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	492e      	ldr	r1, [pc, #184]	@ (8000d70 <PressKeycodes+0x234>)
 8000cb6:	2264      	movs	r2, #100	@ 0x64
 8000cb8:	fb03 f202 	mul.w	r2, r3, r2
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000cc4:	f241 328a 	movw	r2, #5002	@ 0x138a
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d102      	bne.n	8000cd2 <PressKeycodes+0x196>
			LayerState = 1;
 8000ccc:	4b27      	ldr	r3, [pc, #156]	@ (8000d6c <PressKeycodes+0x230>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
		sprintf(message1, "Current Layer = %d \n\r", LayerState);
 8000cd2:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <PressKeycodes+0x230>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	492e      	ldr	r1, [pc, #184]	@ (8000d94 <PressKeycodes+0x258>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00a f8ed 	bl	800aebc <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fb12 	bl	8000310 <strlen>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	f107 010c 	add.w	r1, r7, #12
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	4820      	ldr	r0, [pc, #128]	@ (8000d7c <PressKeycodes+0x240>)
 8000cfa:	f005 f943 	bl	8005f84 <HAL_UART_Transmit>
}
 8000cfe:	e031      	b.n	8000d64 <PressKeycodes+0x228>
		SetKeycode(Keycode[LayerState][i]);
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <PressKeycodes+0x230>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	491a      	ldr	r1, [pc, #104]	@ (8000d70 <PressKeycodes+0x234>)
 8000d06:	2264      	movs	r2, #100	@ 0x64
 8000d08:	fb03 f202 	mul.w	r2, r3, r2
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe0d 	bl	8000934 <SetKeycode>
		WhichLayer[i] = LayerState;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <PressKeycodes+0x230>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	491e      	ldr	r1, [pc, #120]	@ (8000d98 <PressKeycodes+0x25c>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <PressKeycodes+0x230>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4911      	ldr	r1, [pc, #68]	@ (8000d70 <PressKeycodes+0x234>)
 8000d2c:	2264      	movs	r2, #100	@ 0x64
 8000d2e:	fb03 f202 	mul.w	r2, r3, r2
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4916      	ldr	r1, [pc, #88]	@ (8000d9c <PressKeycodes+0x260>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00a f8ba 	bl	800aebc <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fadf 	bl	8000310 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	f107 010c 	add.w	r1, r7, #12
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	4807      	ldr	r0, [pc, #28]	@ (8000d7c <PressKeycodes+0x240>)
 8000d60:	f005 f910 	bl	8005f84 <HAL_UART_Transmit>
}
 8000d64:	bf00      	nop
 8000d66:	3770      	adds	r7, #112	@ 0x70
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	240003dc 	.word	0x240003dc
 8000d70:	24000000 	.word	0x24000000
 8000d74:	24000574 	.word	0x24000574
 8000d78:	0800b820 	.word	0x0800b820
 8000d7c:	2400033c 	.word	0x2400033c
 8000d80:	ffffd8f0 	.word	0xffffd8f0
 8000d84:	24000190 	.word	0x24000190
 8000d88:	240003d8 	.word	0x240003d8
 8000d8c:	24000334 	.word	0x24000334
 8000d90:	0800b838 	.word	0x0800b838
 8000d94:	0800b850 	.word	0x0800b850
 8000d98:	240003e0 	.word	0x240003e0
 8000d9c:	0800b868 	.word	0x0800b868

08000da0 <ReleaseKeycodes>:

void ReleaseKeycodes(int i)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09c      	sub	sp, #112	@ 0x70
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000da8:	4b8c      	ldr	r3, [pc, #560]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	498c      	ldr	r1, [pc, #560]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000dae:	2264      	movs	r2, #100	@ 0x64
 8000db0:	fb03 f202 	mul.w	r2, r3, r2
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dbc:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d959      	bls.n	8000e78 <ReleaseKeycodes+0xd8>
    {
        if (HAL_GetTick() - KeyTimer > HOLD_TIME)
 8000dc4:	f000 fd34 	bl	8001830 <HAL_GetTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a86      	ldr	r2, [pc, #536]	@ (8000fe4 <ReleaseKeycodes+0x244>)
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	2bfa      	cmp	r3, #250	@ 0xfa
 8000dd2:	d90e      	bls.n	8000df2 <ReleaseKeycodes+0x52>
        {
            TempKeycode = Keycode[LayerState + 1][i]; // Hold 작동시 다음 레이어에 있는 키코드 전송
 8000dd4:	4b81      	ldr	r3, [pc, #516]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4981      	ldr	r1, [pc, #516]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000ddc:	2264      	movs	r2, #100	@ 0x64
 8000dde:	fb03 f202 	mul.w	r2, r3, r2
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b7e      	ldr	r3, [pc, #504]	@ (8000fe8 <ReleaseKeycodes+0x248>)
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	e00e      	b.n	8000e10 <ReleaseKeycodes+0x70>
        }
        else
        {
            TempKeycode = Keycode[LayerState][i] - 30000; // Tap 작동시 현재 레이어에 있는 키코드 -30000 전송
 8000df2:	4b7a      	ldr	r3, [pc, #488]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	497a      	ldr	r1, [pc, #488]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000df8:	2264      	movs	r2, #100	@ 0x64
 8000dfa:	fb03 f202 	mul.w	r2, r3, r2
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b78      	ldr	r3, [pc, #480]	@ (8000fec <ReleaseKeycodes+0x24c>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a76      	ldr	r2, [pc, #472]	@ (8000fe8 <ReleaseKeycodes+0x248>)
 8000e0e:	6013      	str	r3, [r2, #0]
        }
        SetKeycode(TempKeycode);
 8000e10:	4b75      	ldr	r3, [pc, #468]	@ (8000fe8 <ReleaseKeycodes+0x248>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fd8d 	bl	8000934 <SetKeycode>
        KeycodeSend();
 8000e1a:	f7ff fe69 	bl	8000af0 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 8000e1e:	2032      	movs	r0, #50	@ 0x32
 8000e20:	f000 fd12 	bl	8001848 <HAL_Delay>
        ResetKeycode(TempKeycode);
 8000e24:	4b70      	ldr	r3, [pc, #448]	@ (8000fe8 <ReleaseKeycodes+0x248>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fe1f 	bl	8000a6c <ResetKeycode>
        KeycodeSend();
 8000e2e:	f7ff fe5f 	bl	8000af0 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 8000e32:	2032      	movs	r0, #50	@ 0x32
 8000e34:	f000 fd08 	bl	8001848 <HAL_Delay>

        char message5[100];
        sprintf(message5, "HoldTapRelease = %d \n\r", Keycode[LayerState][i]);
 8000e38:	4b68      	ldr	r3, [pc, #416]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4968      	ldr	r1, [pc, #416]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000e3e:	2264      	movs	r2, #100	@ 0x64
 8000e40:	fb03 f202 	mul.w	r2, r3, r2
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4967      	ldr	r1, [pc, #412]	@ (8000ff0 <ReleaseKeycodes+0x250>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f00a f831 	bl	800aebc <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fa56 	bl	8000310 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	f107 010c 	add.w	r1, r7, #12
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	4860      	ldr	r0, [pc, #384]	@ (8000ff4 <ReleaseKeycodes+0x254>)
 8000e72:	f005 f887 	bl	8005f84 <HAL_UART_Transmit>
        char message5[100];
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
    }

}
 8000e76:	e0ac      	b.n	8000fd2 <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 10000)
 8000e78:	4b58      	ldr	r3, [pc, #352]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4958      	ldr	r1, [pc, #352]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000e7e:	2264      	movs	r2, #100	@ 0x64
 8000e80:	fb03 f202 	mul.w	r2, r3, r2
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e8c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d93e      	bls.n	8000f12 <ReleaseKeycodes+0x172>
        Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8000e94:	4b51      	ldr	r3, [pc, #324]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4951      	ldr	r1, [pc, #324]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000e9a:	2264      	movs	r2, #100	@ 0x64
 8000e9c:	fb03 f202 	mul.w	r2, r3, r2
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b53      	ldr	r3, [pc, #332]	@ (8000ff8 <ReleaseKeycodes+0x258>)
 8000eac:	4413      	add	r3, r2
 8000eae:	4a53      	ldr	r2, [pc, #332]	@ (8000ffc <ReleaseKeycodes+0x25c>)
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	b25a      	sxtb	r2, r3
 8000eba:	4b51      	ldr	r3, [pc, #324]	@ (8001000 <ReleaseKeycodes+0x260>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b4e      	ldr	r3, [pc, #312]	@ (8001000 <ReleaseKeycodes+0x260>)
 8000ec8:	701a      	strb	r2, [r3, #0]
        keyboardReport.MODIFIER = Modifier_Sum;
 8000eca:	4b4d      	ldr	r3, [pc, #308]	@ (8001000 <ReleaseKeycodes+0x260>)
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	4b4d      	ldr	r3, [pc, #308]	@ (8001004 <ReleaseKeycodes+0x264>)
 8000ed0:	701a      	strb	r2, [r3, #0]
        sprintf(message2, "ModifierRelease = %d\n\r", Keycode[LayerState][i]);
 8000ed2:	4b42      	ldr	r3, [pc, #264]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4942      	ldr	r1, [pc, #264]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000ed8:	2264      	movs	r2, #100	@ 0x64
 8000eda:	fb03 f202 	mul.w	r2, r3, r2
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4946      	ldr	r1, [pc, #280]	@ (8001008 <ReleaseKeycodes+0x268>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f009 ffe4 	bl	800aebc <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message2, strlen(message2), HAL_MAX_DELAY);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fa09 	bl	8000310 <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	f107 010c 	add.w	r1, r7, #12
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	483a      	ldr	r0, [pc, #232]	@ (8000ff4 <ReleaseKeycodes+0x254>)
 8000f0c:	f005 f83a 	bl	8005f84 <HAL_UART_Transmit>
}
 8000f10:	e05f      	b.n	8000fd2 <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 5000 )
 8000f12:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4932      	ldr	r1, [pc, #200]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000f18:	2264      	movs	r2, #100	@ 0x64
 8000f1a:	fb03 f202 	mul.w	r2, r3, r2
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f26:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d927      	bls.n	8000f7e <ReleaseKeycodes+0x1de>
    	if ( Keycode[LayerState][i] == KC_FN1 )
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	492b      	ldr	r1, [pc, #172]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000f34:	2264      	movs	r2, #100	@ 0x64
 8000f36:	fb03 f202 	mul.w	r2, r3, r2
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d143      	bne.n	8000fd2 <ReleaseKeycodes+0x232>
            LayerState = 0; // Layer0 when released
 8000f4a:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
            sprintf(message1, "Current Layer = %d \n\r", LayerState);
 8000f50:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <ReleaseKeycodes+0x23c>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	492c      	ldr	r1, [pc, #176]	@ (800100c <ReleaseKeycodes+0x26c>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f009 ffae 	bl	800aebc <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff f9d3 	bl	8000310 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f107 010c 	add.w	r1, r7, #12
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	481f      	ldr	r0, [pc, #124]	@ (8000ff4 <ReleaseKeycodes+0x254>)
 8000f78:	f005 f804 	bl	8005f84 <HAL_UART_Transmit>
}
 8000f7c:	e029      	b.n	8000fd2 <ReleaseKeycodes+0x232>
        TempKeycode = Keycode[WhichLayer[i]][i];
 8000f7e:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <ReleaseKeycodes+0x270>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	4916      	ldr	r1, [pc, #88]	@ (8000fe0 <ReleaseKeycodes+0x240>)
 8000f88:	2264      	movs	r2, #100	@ 0x64
 8000f8a:	fb03 f202 	mul.w	r2, r3, r2
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <ReleaseKeycodes+0x248>)
 8000f9a:	601a      	str	r2, [r3, #0]
        ResetKeycode(TempKeycode);
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <ReleaseKeycodes+0x248>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fd63 	bl	8000a6c <ResetKeycode>
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <ReleaseKeycodes+0x248>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4919      	ldr	r1, [pc, #100]	@ (8001014 <ReleaseKeycodes+0x274>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f009 ff83 	bl	800aebc <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f9a8 	bl	8000310 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f107 010c 	add.w	r1, r7, #12
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <ReleaseKeycodes+0x254>)
 8000fce:	f004 ffd9 	bl	8005f84 <HAL_UART_Transmit>
}
 8000fd2:	bf00      	nop
 8000fd4:	3770      	adds	r7, #112	@ 0x70
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	240003dc 	.word	0x240003dc
 8000fe0:	24000000 	.word	0x24000000
 8000fe4:	24000574 	.word	0x24000574
 8000fe8:	24000570 	.word	0x24000570
 8000fec:	ffff8ad0 	.word	0xffff8ad0
 8000ff0:	0800b880 	.word	0x0800b880
 8000ff4:	2400033c 	.word	0x2400033c
 8000ff8:	ffffd8f0 	.word	0xffffd8f0
 8000ffc:	24000190 	.word	0x24000190
 8001000:	240003d8 	.word	0x240003d8
 8001004:	24000334 	.word	0x24000334
 8001008:	0800b898 	.word	0x0800b898
 800100c:	0800b850 	.word	0x0800b850
 8001010:	240003e0 	.word	0x240003e0
 8001014:	0800b8b0 	.word	0x0800b8b0

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09c      	sub	sp, #112	@ 0x70
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800101e:	f000 f989 	bl	8001334 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001022:	f000 fb7f 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f85d 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 f917 	bl	800125c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800102e:	f009 fa89 	bl	800a544 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8001032:	f000 f8c7 	bl	80011c4 <MX_UART4_Init>
    {
        //Timer = HAL_GetTick(); // Get Current Time

    	//CheckScanrate();

        if (HAL_GetTick() - LastTimer >= 10000)
 8001036:	f000 fbfb 	bl	8001830 <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	4a24      	ldr	r2, [pc, #144]	@ (80010d0 <main+0xb8>)
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001046:	4293      	cmp	r3, r2
 8001048:	d924      	bls.n	8001094 <main+0x7c>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", HAL_GetTick(), Scanrate / 10);
 800104a:	f000 fbf1 	bl	8001830 <HAL_GetTick>
 800104e:	4601      	mov	r1, r0
 8001050:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <main+0xbc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a20      	ldr	r2, [pc, #128]	@ (80010d8 <main+0xc0>)
 8001056:	fb82 0203 	smull	r0, r2, r2, r3
 800105a:	1092      	asrs	r2, r2, #2
 800105c:	17db      	asrs	r3, r3, #31
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	1d38      	adds	r0, r7, #4
 8001062:	460a      	mov	r2, r1
 8001064:	491d      	ldr	r1, [pc, #116]	@ (80010dc <main+0xc4>)
 8001066:	f009 ff29 	bl	800aebc <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f94f 	bl	8000310 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	1d39      	adds	r1, r7, #4
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	4818      	ldr	r0, [pc, #96]	@ (80010e0 <main+0xc8>)
 800107e:	f004 ff81 	bl	8005f84 <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 8001082:	f000 fbd5 	bl	8001830 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <main+0xb8>)
 800108c:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <main+0xbc>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <main+0xbc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <main+0xbc>)
 800109c:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


        MatrixScanResult Matrix = MatrixScan();
 800109e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb04 	bl	80006b0 <MatrixScan>



        if ( Matrix.WhereIsOne != -1 )
 80010a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ae:	d0c2      	beq.n	8001036 <main+0x1e>
        {
			if ( Matrix.PinState == 0)
 80010b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d104      	bne.n	80010c0 <main+0xa8>
			{
				PressKeycodes(Matrix.WhereIsOne);
 80010b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fd3f 	bl	8000b3c <PressKeycodes>
 80010be:	e003      	b.n	80010c8 <main+0xb0>
			}
			else
			{
				ReleaseKeycodes(Matrix.WhereIsOne);
 80010c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fe6c 	bl	8000da0 <ReleaseKeycodes>
			}
        	KeycodeSend();
 80010c8:	f7ff fd12 	bl	8000af0 <KeycodeSend>
    {
 80010cc:	e7b3      	b.n	8001036 <main+0x1e>
 80010ce:	bf00      	nop
 80010d0:	240003d4 	.word	0x240003d4
 80010d4:	240003d0 	.word	0x240003d0
 80010d8:	66666667 	.word	0x66666667
 80010dc:	0800b8c8 	.word	0x0800b8c8
 80010e0:	2400033c 	.word	0x2400033c

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b09c      	sub	sp, #112	@ 0x70
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ee:	224c      	movs	r2, #76	@ 0x4c
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f009 ff02 	bl	800aefc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2220      	movs	r2, #32
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fefc 	bl	800aefc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001104:	2002      	movs	r0, #2
 8001106:	f002 f97b 	bl	8003400 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b2c      	ldr	r3, [pc, #176]	@ (80011c0 <SystemClock_Config+0xdc>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a2b      	ldr	r2, [pc, #172]	@ (80011c0 <SystemClock_Config+0xdc>)
 8001114:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <SystemClock_Config+0xdc>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001126:	bf00      	nop
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <SystemClock_Config+0xdc>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001134:	d1f8      	bne.n	8001128 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001136:	2321      	movs	r3, #33	@ 0x21
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001148:	2302      	movs	r3, #2
 800114a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800114c:	2305      	movs	r3, #5
 800114e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8001150:	236e      	movs	r3, #110	@ 0x6e
 8001152:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800115c:	2302      	movs	r3, #2
 800115e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001160:	2308      	movs	r3, #8
 8001162:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001164:	2300      	movs	r3, #0
 8001166:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001170:	4618      	mov	r0, r3
 8001172:	f002 f98f 	bl	8003494 <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800117c:	f000 f906 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	233f      	movs	r3, #63	@ 0x3f
 8001182:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2303      	movs	r3, #3
 8001186:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800118c:	2308      	movs	r3, #8
 800118e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001190:	2340      	movs	r3, #64	@ 0x40
 8001192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001194:	2340      	movs	r3, #64	@ 0x40
 8001196:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001198:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800119c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 800119e:	2350      	movs	r3, #80	@ 0x50
 80011a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2103      	movs	r1, #3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fd4e 	bl	8003c48 <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011b2:	f000 f8eb 	bl	800138c <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3770      	adds	r7, #112	@ 0x70
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	58024800 	.word	0x58024800

080011c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <MX_UART4_Init+0x90>)
 80011ca:	4a23      	ldr	r2, [pc, #140]	@ (8001258 <MX_UART4_Init+0x94>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011ce:	4b21      	ldr	r3, [pc, #132]	@ (8001254 <MX_UART4_Init+0x90>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <MX_UART4_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <MX_UART4_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <MX_UART4_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_UART4_Init+0x90>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <MX_UART4_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <MX_UART4_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <MX_UART4_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <MX_UART4_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001206:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <MX_UART4_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800120c:	4811      	ldr	r0, [pc, #68]	@ (8001254 <MX_UART4_Init+0x90>)
 800120e:	f004 fe69 	bl	8005ee4 <HAL_UART_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001218:	f000 f8b8 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	480d      	ldr	r0, [pc, #52]	@ (8001254 <MX_UART4_Init+0x90>)
 8001220:	f006 f803 	bl	800722a <HAL_UARTEx_SetTxFifoThreshold>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800122a:	f000 f8af 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122e:	2100      	movs	r1, #0
 8001230:	4808      	ldr	r0, [pc, #32]	@ (8001254 <MX_UART4_Init+0x90>)
 8001232:	f006 f838 	bl	80072a6 <HAL_UARTEx_SetRxFifoThreshold>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800123c:	f000 f8a6 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <MX_UART4_Init+0x90>)
 8001242:	f005 ffb9 	bl	80071b8 <HAL_UARTEx_DisableFifoMode>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800124c:	f000 f89e 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2400033c 	.word	0x2400033c
 8001258:	40004c00 	.word	0x40004c00

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	4b2e      	ldr	r3, [pc, #184]	@ (800132c <MX_GPIO_Init+0xd0>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	4a2c      	ldr	r2, [pc, #176]	@ (800132c <MX_GPIO_Init+0xd0>)
 800127a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001282:	4b2a      	ldr	r3, [pc, #168]	@ (800132c <MX_GPIO_Init+0xd0>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b26      	ldr	r3, [pc, #152]	@ (800132c <MX_GPIO_Init+0xd0>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001296:	4a25      	ldr	r2, [pc, #148]	@ (800132c <MX_GPIO_Init+0xd0>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a0:	4b22      	ldr	r3, [pc, #136]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b4:	4a1d      	ldr	r2, [pc, #116]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d2:	4a16      	ldr	r2, [pc, #88]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f0:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_GPIO_Init+0xd0>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001308:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800130c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001312:	2301      	movs	r3, #1
 8001314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <MX_GPIO_Init+0xd4>)
 800131e:	f000 fc3f 	bl	8001ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	@ 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	58024400 	.word	0x58024400
 8001330:	58020c00 	.word	0x58020c00

08001334 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001346:	f000 fbb3 	bl	8001ab0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800134a:	2301      	movs	r3, #1
 800134c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800134e:	2300      	movs	r3, #0
 8001350:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001356:	231f      	movs	r3, #31
 8001358:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800135a:	2387      	movs	r3, #135	@ 0x87
 800135c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800135e:	2300      	movs	r3, #0
 8001360:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001362:	2300      	movs	r3, #0
 8001364:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001366:	2301      	movs	r3, #1
 8001368:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800136a:	2301      	movs	r3, #1
 800136c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001376:	463b      	mov	r3, r7
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fbd1 	bl	8001b20 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800137e:	2004      	movs	r0, #4
 8001380:	f000 fbae 	bl	8001ae0 <HAL_MPU_Enable>

}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <Error_Handler+0x8>

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_MspInit+0x30>)
 80013a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013a4:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_MspInit+0x30>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_MspInit+0x30>)
 80013b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	58024400 	.word	0x58024400

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0b8      	sub	sp, #224	@ 0xe0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	22b8      	movs	r2, #184	@ 0xb8
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f009 fd85 	bl	800aefc <memset>
  if(huart->Instance==UART4)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <HAL_UART_MspInit+0xc4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d145      	bne.n	8001488 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013fc:	f04f 0202 	mov.w	r2, #2
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4618      	mov	r0, r3
 8001414:	f002 ffa4 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800141e:	f7ff ffb5 	bl	800138c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <HAL_UART_MspInit+0xc8>)
 8001424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001428:	4a1a      	ldr	r2, [pc, #104]	@ (8001494 <HAL_UART_MspInit+0xc8>)
 800142a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800142e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_UART_MspInit+0xc8>)
 8001434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <HAL_UART_MspInit+0xc8>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <HAL_UART_MspInit+0xc8>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001450:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <HAL_UART_MspInit+0xc8>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800145e:	2303      	movs	r3, #3
 8001460:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001476:	2308      	movs	r3, #8
 8001478:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <HAL_UART_MspInit+0xcc>)
 8001484:	f000 fb8c 	bl	8001ba0 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001488:	bf00      	nop
 800148a:	37e0      	adds	r7, #224	@ 0xe0
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40004c00 	.word	0x40004c00
 8001494:	58024400 	.word	0x58024400
 8001498:	58020000 	.word	0x58020000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <NMI_Handler+0x4>

080014a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <MemManage_Handler+0x4>

080014b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f2:	f000 f989 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <OTG_HS_IRQHandler+0x10>)
 8001502:	f000 fe36 	bl	8002172 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000a74 	.word	0x24000a74

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	@ (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f009 fce4 	bl	800af0c <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	24050000 	.word	0x24050000
 8001570:	00000400 	.word	0x00000400
 8001574:	2400058c 	.word	0x2400058c
 8001578:	240010b8 	.word	0x240010b8

0800157c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001580:	4b3e      	ldr	r3, [pc, #248]	@ (800167c <SystemInit+0x100>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001586:	4a3d      	ldr	r2, [pc, #244]	@ (800167c <SystemInit+0x100>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001590:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <SystemInit+0x104>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	2b06      	cmp	r3, #6
 800159a:	d807      	bhi.n	80015ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800159c:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <SystemInit+0x104>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 030f 	bic.w	r3, r3, #15
 80015a4:	4a36      	ldr	r2, [pc, #216]	@ (8001680 <SystemInit+0x104>)
 80015a6:	f043 0307 	orr.w	r3, r3, #7
 80015aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015ac:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <SystemInit+0x108>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a34      	ldr	r2, [pc, #208]	@ (8001684 <SystemInit+0x108>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b8:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <SystemInit+0x108>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015be:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <SystemInit+0x108>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4930      	ldr	r1, [pc, #192]	@ (8001684 <SystemInit+0x108>)
 80015c4:	4b30      	ldr	r3, [pc, #192]	@ (8001688 <SystemInit+0x10c>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <SystemInit+0x104>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d007      	beq.n	80015e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <SystemInit+0x104>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 030f 	bic.w	r3, r3, #15
 80015de:	4a28      	ldr	r2, [pc, #160]	@ (8001680 <SystemInit+0x104>)
 80015e0:	f043 0307 	orr.w	r3, r3, #7
 80015e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015e6:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <SystemInit+0x108>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015ec:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <SystemInit+0x108>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015f2:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <SystemInit+0x108>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <SystemInit+0x108>)
 80015fa:	4a24      	ldr	r2, [pc, #144]	@ (800168c <SystemInit+0x110>)
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015fe:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <SystemInit+0x108>)
 8001600:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <SystemInit+0x114>)
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001604:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <SystemInit+0x108>)
 8001606:	4a23      	ldr	r2, [pc, #140]	@ (8001694 <SystemInit+0x118>)
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800160a:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <SystemInit+0x108>)
 800160c:	2200      	movs	r2, #0
 800160e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001610:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <SystemInit+0x108>)
 8001612:	4a20      	ldr	r2, [pc, #128]	@ (8001694 <SystemInit+0x118>)
 8001614:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001616:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <SystemInit+0x108>)
 8001618:	2200      	movs	r2, #0
 800161a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <SystemInit+0x108>)
 800161e:	4a1d      	ldr	r2, [pc, #116]	@ (8001694 <SystemInit+0x118>)
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <SystemInit+0x108>)
 8001624:	2200      	movs	r2, #0
 8001626:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <SystemInit+0x108>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a15      	ldr	r2, [pc, #84]	@ (8001684 <SystemInit+0x108>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001632:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <SystemInit+0x108>)
 8001636:	2200      	movs	r2, #0
 8001638:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <SystemInit+0x108>)
 800163c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d113      	bne.n	8001670 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <SystemInit+0x108>)
 800164a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800164e:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <SystemInit+0x108>)
 8001650:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001654:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <SystemInit+0x11c>)
 800165a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800165e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <SystemInit+0x108>)
 8001662:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001666:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <SystemInit+0x108>)
 8001668:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800166c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	52002000 	.word	0x52002000
 8001684:	58024400 	.word	0x58024400
 8001688:	eaf6ed7f 	.word	0xeaf6ed7f
 800168c:	02020200 	.word	0x02020200
 8001690:	01ff0000 	.word	0x01ff0000
 8001694:	01010280 	.word	0x01010280
 8001698:	52004000 	.word	0x52004000

0800169c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <ExitRun0Mode+0x2c>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <ExitRun0Mode+0x2c>)
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80016ac:	bf00      	nop
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <ExitRun0Mode+0x2c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f9      	beq.n	80016ae <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	58024800 	.word	0x58024800

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016cc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001708 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80016d0:	f7ff ffe4 	bl	800169c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016d4:	f7ff ff52 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	@ (8001710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	@ (800171c <LoopFillZerobss+0x22>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f009 fc0b 	bl	800af18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7ff fc89 	bl	8001018 <main>
  bx  lr
 8001706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001708:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800170c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001710:	24000318 	.word	0x24000318
  ldr r2, =_sidata
 8001714:	0800b9b4 	.word	0x0800b9b4
  ldr r2, =_sbss
 8001718:	24000318 	.word	0x24000318
  ldr r4, =_ebss
 800171c:	240010b4 	.word	0x240010b4

08001720 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC3_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172a:	2003      	movs	r0, #3
 800172c:	f000 f980 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001730:	f002 fc40 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_Init+0x68>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	0a1b      	lsrs	r3, r3, #8
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	4913      	ldr	r1, [pc, #76]	@ (8001790 <HAL_Init+0x6c>)
 8001742:	5ccb      	ldrb	r3, [r1, r3]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_Init+0x68>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <HAL_Init+0x6c>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <HAL_Init+0x70>)
 8001766:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001768:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_Init+0x74>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	200f      	movs	r0, #15
 8001770:	f000 f814 	bl	800179c <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e002      	b.n	8001784 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800177e:	f7ff fe0b 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58024400 	.word	0x58024400
 8001790:	0800b938 	.word	0x0800b938
 8001794:	240001b4 	.word	0x240001b4
 8001798:	240001b0 	.word	0x240001b0

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_InitTick+0x60>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e021      	b.n	80017f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017b0:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <HAL_InitTick+0x64>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_InitTick+0x60>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017be:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f965 	bl	8001a96 <HAL_SYSTICK_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00e      	b.n	80017f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80a      	bhi.n	80017f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017dc:	2200      	movs	r2, #0
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f000 f92f 	bl	8001a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e8:	4a06      	ldr	r2, [pc, #24]	@ (8001804 <HAL_InitTick+0x68>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	240001bc 	.word	0x240001bc
 8001800:	240001b0 	.word	0x240001b0
 8001804:	240001b8 	.word	0x240001b8

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	@ (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	240001bc 	.word	0x240001bc
 800182c:	24000590 	.word	0x24000590

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	@ (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	24000590 	.word	0x24000590

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff ffee 	bl	8001830 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffde 	bl	8001830 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	240001bc 	.word	0x240001bc

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x40>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x40>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00
 80018d4:	05fa0000 	.word	0x05fa0000

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4907      	ldr	r1, [pc, #28]	@ (800192c <__NVIC_EnableIRQ+0x38>)
 800190e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	@ (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	@ (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	@ 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff8e 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff29 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff40 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff90 	bl	8001984 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5f 	bl	8001930 <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff33 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa4 	bl	80019ec <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ab4:	f3bf 8f5f 	dmb	sy
}
 8001ab8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_MPU_Disable+0x28>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	4a06      	ldr	r2, [pc, #24]	@ (8001ad8 <HAL_MPU_Disable+0x28>)
 8001ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ac6:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_MPU_Disable+0x2c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00
 8001adc:	e000ed90 	.word	0xe000ed90

08001ae0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b18 <HAL_MPU_Enable+0x38>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001af2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <HAL_MPU_Enable+0x3c>)
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	4a09      	ldr	r2, [pc, #36]	@ (8001b1c <HAL_MPU_Enable+0x3c>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001afe:	f3bf 8f4f 	dsb	sy
}
 8001b02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b04:	f3bf 8f6f 	isb	sy
}
 8001b08:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed90 	.word	0xe000ed90
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	785a      	ldrb	r2, [r3, #1]
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <HAL_MPU_ConfigRegion+0x7c>)
 8001b2e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b30:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <HAL_MPU_ConfigRegion+0x7c>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	4a19      	ldr	r2, [pc, #100]	@ (8001b9c <HAL_MPU_ConfigRegion+0x7c>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b3c:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_MPU_ConfigRegion+0x7c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7b1b      	ldrb	r3, [r3, #12]
 8001b48:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7adb      	ldrb	r3, [r3, #11]
 8001b4e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7a9b      	ldrb	r3, [r3, #10]
 8001b56:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7b5b      	ldrb	r3, [r3, #13]
 8001b5e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7b9b      	ldrb	r3, [r3, #14]
 8001b66:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7bdb      	ldrb	r3, [r3, #15]
 8001b6e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7a5b      	ldrb	r3, [r3, #9]
 8001b76:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7a1b      	ldrb	r3, [r3, #8]
 8001b7e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b80:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b8a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b8c:	6113      	str	r3, [r2, #16]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed90 	.word	0xe000ed90

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bae:	4b86      	ldr	r3, [pc, #536]	@ (8001dc8 <HAL_GPIO_Init+0x228>)
 8001bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bb2:	e18c      	b.n	8001ece <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 817e 	beq.w	8001ec8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d005      	beq.n	8001be4 <HAL_GPIO_Init+0x44>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d130      	bne.n	8001c46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 0201 	and.w	r2, r3, #1
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d017      	beq.n	8001c82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d123      	bne.n	8001cd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3208      	adds	r2, #8
 8001cd0:	69b9      	ldr	r1, [r7, #24]
 8001cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0203 	and.w	r2, r3, #3
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80d8 	beq.w	8001ec8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d18:	4b2c      	ldr	r3, [pc, #176]	@ (8001dcc <HAL_GPIO_Init+0x22c>)
 8001d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8001dcc <HAL_GPIO_Init+0x22c>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d28:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <HAL_GPIO_Init+0x22c>)
 8001d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d36:	4a26      	ldr	r2, [pc, #152]	@ (8001dd0 <HAL_GPIO_Init+0x230>)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <HAL_GPIO_Init+0x234>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d04a      	beq.n	8001df8 <HAL_GPIO_Init+0x258>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd8 <HAL_GPIO_Init+0x238>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x222>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ddc <HAL_GPIO_Init+0x23c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x21e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1a      	ldr	r2, [pc, #104]	@ (8001de0 <HAL_GPIO_Init+0x240>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x21a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <HAL_GPIO_Init+0x244>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x216>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a18      	ldr	r2, [pc, #96]	@ (8001de8 <HAL_GPIO_Init+0x248>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x212>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <HAL_GPIO_Init+0x24c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x20e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a16      	ldr	r2, [pc, #88]	@ (8001df0 <HAL_GPIO_Init+0x250>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x20a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a15      	ldr	r2, [pc, #84]	@ (8001df4 <HAL_GPIO_Init+0x254>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x206>
 8001da2:	2309      	movs	r3, #9
 8001da4:	e029      	b.n	8001dfa <HAL_GPIO_Init+0x25a>
 8001da6:	230a      	movs	r3, #10
 8001da8:	e027      	b.n	8001dfa <HAL_GPIO_Init+0x25a>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e025      	b.n	8001dfa <HAL_GPIO_Init+0x25a>
 8001dae:	2306      	movs	r3, #6
 8001db0:	e023      	b.n	8001dfa <HAL_GPIO_Init+0x25a>
 8001db2:	2305      	movs	r3, #5
 8001db4:	e021      	b.n	8001dfa <HAL_GPIO_Init+0x25a>
 8001db6:	2304      	movs	r3, #4
 8001db8:	e01f      	b.n	8001dfa <HAL_GPIO_Init+0x25a>
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e01d      	b.n	8001dfa <HAL_GPIO_Init+0x25a>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e01b      	b.n	8001dfa <HAL_GPIO_Init+0x25a>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e019      	b.n	8001dfa <HAL_GPIO_Init+0x25a>
 8001dc6:	bf00      	nop
 8001dc8:	58000080 	.word	0x58000080
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	58000400 	.word	0x58000400
 8001dd4:	58020000 	.word	0x58020000
 8001dd8:	58020400 	.word	0x58020400
 8001ddc:	58020800 	.word	0x58020800
 8001de0:	58020c00 	.word	0x58020c00
 8001de4:	58021000 	.word	0x58021000
 8001de8:	58021400 	.word	0x58021400
 8001dec:	58021800 	.word	0x58021800
 8001df0:	58021c00 	.word	0x58021c00
 8001df4:	58022400 	.word	0x58022400
 8001df8:	2300      	movs	r3, #0
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e0a:	4938      	ldr	r1, [pc, #224]	@ (8001eec <HAL_GPIO_Init+0x34c>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f47f ae6b 	bne.w	8001bb4 <HAL_GPIO_Init+0x14>
  }
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	3724      	adds	r7, #36	@ 0x24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	58000400 	.word	0x58000400

08001ef0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0fe      	b.n	8002100 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f008 fc4c 	bl	800a7b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2203      	movs	r2, #3
 8001f20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f005 fb6e 	bl	800760a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7c1a      	ldrb	r2, [r3, #16]
 8001f36:	f88d 2000 	strb.w	r2, [sp]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f3e:	f005 fa3f 	bl	80073c0 <USB_CoreInit>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0d5      	b.n	8002100 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 fb66 	bl	800762c <USB_SetCurrentMode>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0c6      	b.n	8002100 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e04a      	b.n	800200e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	3315      	adds	r3, #21
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3314      	adds	r3, #20
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	b298      	uxth	r0, r3
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	332e      	adds	r3, #46	@ 0x2e
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3318      	adds	r3, #24
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	331c      	adds	r3, #28
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3320      	adds	r3, #32
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	3324      	adds	r3, #36	@ 0x24
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3301      	adds	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	791b      	ldrb	r3, [r3, #4]
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3af      	bcc.n	8001f78 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e044      	b.n	80020a8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	3301      	adds	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	791b      	ldrb	r3, [r3, #4]
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d3b5      	bcc.n	800201e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7c1a      	ldrb	r2, [r3, #16]
 80020ba:	f88d 2000 	strb.w	r2, [sp]
 80020be:	3304      	adds	r3, #4
 80020c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c2:	f005 faff 	bl	80076c4 <USB_DevInit>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e013      	b.n	8002100 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7b1b      	ldrb	r3, [r3, #12]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d102      	bne.n	80020f4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f001 f956 	bl	80033a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f006 fb42 	bl	8008782 <USB_DevDisconnect>

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_PCD_Start+0x1c>
 8002120:	2302      	movs	r3, #2
 8002122:	e022      	b.n	800216a <HAL_PCD_Start+0x62>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002144:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f005 fa49 	bl	80075e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f006 faf0 	bl	8008740 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002172:	b590      	push	{r4, r7, lr}
 8002174:	b08d      	sub	sp, #52	@ 0x34
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f006 fbae 	bl	80088ea <USB_GetMode>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	f040 84b9 	bne.w	8002b08 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f006 fb12 	bl	80087c4 <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 84af 	beq.w	8002b06 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f006 faff 	bl	80087c4 <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d107      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f002 0202 	and.w	r2, r2, #2
 80021de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f006 faed 	bl	80087c4 <USB_ReadInterrupts>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d161      	bne.n	80022b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0210 	bic.w	r2, r2, #16
 8002202:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	3304      	adds	r3, #4
 8002222:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	0c5b      	lsrs	r3, r3, #17
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	2b02      	cmp	r3, #2
 800222e:	d124      	bne.n	800227a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d035      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800224a:	b29b      	uxth	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	6a38      	ldr	r0, [r7, #32]
 8002250:	f006 f924 	bl	800849c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002260:	441a      	add	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002272:	441a      	add	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	615a      	str	r2, [r3, #20]
 8002278:	e016      	b.n	80022a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	0c5b      	lsrs	r3, r3, #17
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	2b06      	cmp	r3, #6
 8002284:	d110      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800228c:	2208      	movs	r2, #8
 800228e:	4619      	mov	r1, r3
 8002290:	6a38      	ldr	r0, [r7, #32]
 8002292:	f006 f903 	bl	800849c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a2:	441a      	add	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0210 	orr.w	r2, r2, #16
 80022b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f006 fa81 	bl	80087c4 <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80022cc:	f040 80a7 	bne.w	800241e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f006 fa86 	bl	80087ea <USB_ReadDevAllOutEpInterrupt>
 80022de:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80022e0:	e099      	b.n	8002416 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 808e 	beq.w	800240a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f006 faaa 	bl	8008852 <USB_ReadDevOutEPInterrupt>
 80022fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00c      	beq.n	8002324 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002316:	461a      	mov	r2, r3
 8002318:	2301      	movs	r3, #1
 800231a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800231c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 feb8 	bl	8003094 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800233a:	461a      	mov	r2, r3
 800233c:	2308      	movs	r3, #8
 800233e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 ff8e 	bl	8003264 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800235e:	461a      	mov	r2, r3
 8002360:	2310      	movs	r3, #16
 8002362:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d030      	beq.n	80023d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002376:	2b80      	cmp	r3, #128	@ 0x80
 8002378:	d109      	bne.n	800238e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002388:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800238c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800238e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	78db      	ldrb	r3, [r3, #3]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d108      	bne.n	80023be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2200      	movs	r2, #0
 80023b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f008 fb7d 	bl	800aab8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ca:	461a      	mov	r2, r3
 80023cc:	2302      	movs	r3, #2
 80023ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e6:	461a      	mov	r2, r3
 80023e8:	2320      	movs	r3, #32
 80023ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002402:	461a      	mov	r2, r3
 8002404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002408:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	3301      	adds	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	f47f af62 	bne.w	80022e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f006 f9ce 	bl	80087c4 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002432:	f040 80db 	bne.w	80025ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f006 f9ef 	bl	800881e <USB_ReadDevAllInEpInterrupt>
 8002440:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002446:	e0cd      	b.n	80025e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80c2 	beq.w	80025d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f006 fa15 	bl	800888e <USB_ReadDevInEPInterrupt>
 8002464:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d057      	beq.n	8002520 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	2201      	movs	r2, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	69f9      	ldr	r1, [r7, #28]
 800248c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002490:	4013      	ands	r3, r2
 8002492:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024a0:	461a      	mov	r2, r3
 80024a2:	2301      	movs	r3, #1
 80024a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	799b      	ldrb	r3, [r3, #6]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d132      	bne.n	8002514 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3320      	adds	r3, #32
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4403      	add	r3, r0
 80024ce:	331c      	adds	r3, #28
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4419      	add	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4403      	add	r3, r0
 80024e2:	3320      	adds	r3, #32
 80024e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d113      	bne.n	8002514 <HAL_PCD_IRQHandler+0x3a2>
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3324      	adds	r3, #36	@ 0x24
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d108      	bne.n	8002514 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800250c:	461a      	mov	r2, r3
 800250e:	2101      	movs	r1, #1
 8002510:	f006 fa1e 	bl	8008950 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f008 fa47 	bl	800a9ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002536:	461a      	mov	r2, r3
 8002538:	2308      	movs	r3, #8
 800253a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002552:	461a      	mov	r2, r3
 8002554:	2310      	movs	r3, #16
 8002556:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800256e:	461a      	mov	r2, r3
 8002570:	2340      	movs	r3, #64	@ 0x40
 8002572:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d023      	beq.n	80025c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800257e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002580:	6a38      	ldr	r0, [r7, #32]
 8002582:	f005 f9fd 	bl	8007980 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	3310      	adds	r3, #16
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	3304      	adds	r3, #4
 8002598:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	78db      	ldrb	r3, [r3, #3]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2200      	movs	r2, #0
 80025a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f008 fa94 	bl	800aadc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025c0:	461a      	mov	r2, r3
 80025c2:	2302      	movs	r3, #2
 80025c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fcd2 	bl	8002f7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	3301      	adds	r3, #1
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f47f af2e 	bne.w	8002448 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f006 f8e7 	bl	80087c4 <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002600:	d122      	bne.n	8002648 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800261c:	2b01      	cmp	r3, #1
 800261e:	d108      	bne.n	8002632 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002628:	2100      	movs	r1, #0
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fedc 	bl	80033e8 <HAL_PCDEx_LPM_Callback>
 8002630:	e002      	b.n	8002638 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f008 fa32 	bl	800aa9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f006 f8b9 	bl	80087c4 <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800265c:	d112      	bne.n	8002684 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f008 f9ee 	bl	800aa50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002682:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f006 f89b 	bl	80087c4 <USB_ReadInterrupts>
 800268e:	4603      	mov	r3, r0
 8002690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002698:	d121      	bne.n	80026de <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80026a8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d111      	bne.n	80026d8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	f003 020f 	and.w	r2, r3, #15
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026ce:	2101      	movs	r1, #1
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fe89 	bl	80033e8 <HAL_PCDEx_LPM_Callback>
 80026d6:	e002      	b.n	80026de <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f008 f9b9 	bl	800aa50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f006 f86e 	bl	80087c4 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026f2:	f040 80b7 	bne.w	8002864 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2110      	movs	r1, #16
 8002710:	4618      	mov	r0, r3
 8002712:	f005 f935 	bl	8007980 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800271a:	e046      	b.n	80027aa <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002728:	461a      	mov	r2, r3
 800272a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800272e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002740:	0151      	lsls	r1, r2, #5
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	440a      	add	r2, r1
 8002746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800274a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800274e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002762:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	440a      	add	r2, r1
 800277a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800277e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002782:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002794:	0151      	lsls	r1, r2, #5
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	440a      	add	r2, r1
 800279a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800279e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a6:	3301      	adds	r3, #1
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	791b      	ldrb	r3, [r3, #4]
 80027ae:	461a      	mov	r2, r3
 80027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d3b2      	bcc.n	800271c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027c4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80027c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7bdb      	ldrb	r3, [r3, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027e2:	f043 030b 	orr.w	r3, r3, #11
 80027e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027f8:	f043 030b 	orr.w	r3, r3, #11
 80027fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027fe:	e015      	b.n	800282c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800280e:	4619      	mov	r1, r3
 8002810:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002814:	4313      	orrs	r3, r2
 8002816:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002826:	f043 030b 	orr.w	r3, r3, #11
 800282a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800283a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800283e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800284e:	461a      	mov	r2, r3
 8002850:	f006 f87e 	bl	8008950 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f005 ffab 	bl	80087c4 <USB_ReadInterrupts>
 800286e:	4603      	mov	r3, r0
 8002870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002878:	d123      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f006 f842 	bl	8008908 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f005 f8f2 	bl	8007a72 <USB_GetDevSpeed>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681c      	ldr	r4, [r3, #0]
 800289a:	f001 fd05 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 800289e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028a4:	461a      	mov	r2, r3
 80028a6:	4620      	mov	r0, r4
 80028a8:	f004 fdfc 	bl	80074a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f008 f8a6 	bl	800a9fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80028c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f005 ff7c 	bl	80087c4 <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d10a      	bne.n	80028ec <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f008 f883 	bl	800a9e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f002 0208 	and.w	r2, r2, #8
 80028ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f005 ff67 	bl	80087c4 <USB_ReadInterrupts>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fc:	2b80      	cmp	r3, #128	@ 0x80
 80028fe:	d123      	bne.n	8002948 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002910:	e014      	b.n	800293c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 faf2 	bl	8002f1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	3301      	adds	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	791b      	ldrb	r3, [r3, #4]
 8002940:	461a      	mov	r2, r3
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	4293      	cmp	r3, r2
 8002946:	d3e4      	bcc.n	8002912 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f005 ff39 	bl	80087c4 <USB_ReadInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002958:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800295c:	d13c      	bne.n	80029d8 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800295e:	2301      	movs	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
 8002962:	e02b      	b.n	80029bc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3318      	adds	r3, #24
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d115      	bne.n	80029b6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800298a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	da12      	bge.n	80029b6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3317      	adds	r3, #23
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fab2 	bl	8002f1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	3301      	adds	r3, #1
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	791b      	ldrb	r3, [r3, #4]
 80029c0:	461a      	mov	r2, r3
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d3cd      	bcc.n	8002964 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80029d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f005 fef1 	bl	80087c4 <USB_ReadInterrupts>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029ec:	d156      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ee:	2301      	movs	r3, #1
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f2:	e045      	b.n	8002a80 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d12e      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	da2b      	bge.n	8002a7a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	0c1a      	lsrs	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a2c:	4053      	eors	r3, r2
 8002a2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d121      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a76:	6053      	str	r3, [r2, #4]
            break;
 8002a78:	e008      	b.n	8002a8c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	791b      	ldrb	r3, [r3, #4]
 8002a84:	461a      	mov	r2, r3
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d3b3      	bcc.n	80029f4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f005 fe8f 	bl	80087c4 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f008 f824 	bl	800ab00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f005 fe79 	bl	80087c4 <USB_ReadInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d115      	bne.n	8002b08 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f008 f814 	bl	800ab1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	e000      	b.n	8002b08 <HAL_PCD_IRQHandler+0x996>
      return;
 8002b06:	bf00      	nop
    }
  }
}
 8002b08:	3734      	adds	r7, #52	@ 0x34
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd90      	pop	{r4, r7, pc}

08002b0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_PCD_SetAddress+0x1a>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e012      	b.n	8002b4e <HAL_PCD_SetAddress+0x40>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f005 fdd8 	bl	80086f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	4608      	mov	r0, r1
 8002b60:	4611      	mov	r1, r2
 8002b62:	461a      	mov	r2, r3
 8002b64:	4603      	mov	r3, r0
 8002b66:	70fb      	strb	r3, [r7, #3]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	803b      	strh	r3, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	da0f      	bge.n	8002b9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3310      	adds	r3, #16
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	3304      	adds	r3, #4
 8002b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	705a      	strb	r2, [r3, #1]
 8002b9a:	e00f      	b.n	8002bbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	f003 020f 	and.w	r2, r3, #15
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002bc8:	883b      	ldrh	r3, [r7, #0]
 8002bca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	78ba      	ldrb	r2, [r7, #2]
 8002bd6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	785b      	ldrb	r3, [r3, #1]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bea:	78bb      	ldrb	r3, [r7, #2]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d102      	bne.n	8002bf6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_PCD_EP_Open+0xae>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e00e      	b.n	8002c22 <HAL_PCD_EP_Open+0xcc>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 ff52 	bl	8007abc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002c20:	7afb      	ldrb	r3, [r7, #11]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	da0f      	bge.n	8002c5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	3310      	adds	r3, #16
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	705a      	strb	r2, [r3, #1]
 8002c5c:	e00f      	b.n	8002c7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	3304      	adds	r3, #4
 8002c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_PCD_EP_Close+0x6e>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e00e      	b.n	8002cb6 <HAL_PCD_EP_Close+0x8c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68f9      	ldr	r1, [r7, #12]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 ff90 	bl	8007bcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cce:	7afb      	ldrb	r3, [r7, #11]
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d00:	7afb      	ldrb	r3, [r7, #11]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	799b      	ldrb	r3, [r3, #6]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d102      	bne.n	8002d1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	799b      	ldrb	r3, [r3, #6]
 8002d22:	461a      	mov	r2, r3
 8002d24:	6979      	ldr	r1, [r7, #20]
 8002d26:	f005 f82d 	bl	8007d84 <USB_EPStartXfer>

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	460b      	mov	r3, r1
 8002d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d44:	7afb      	ldrb	r3, [r7, #11]
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	3310      	adds	r3, #16
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2201      	movs	r2, #1
 8002d72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d74:	7afb      	ldrb	r3, [r7, #11]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	799b      	ldrb	r3, [r3, #6]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d102      	bne.n	8002d8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	799b      	ldrb	r3, [r3, #6]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6979      	ldr	r1, [r7, #20]
 8002d9a:	f004 fff3 	bl	8007d84 <USB_EPStartXfer>

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	7912      	ldrb	r2, [r2, #4]
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e04f      	b.n	8002e66 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	da0f      	bge.n	8002dee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	f003 020f 	and.w	r2, r3, #15
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	3310      	adds	r3, #16
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	3304      	adds	r3, #4
 8002de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	705a      	strb	r2, [r3, #1]
 8002dec:	e00d      	b.n	8002e0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	4413      	add	r3, r2
 8002e00:	3304      	adds	r3, #4
 8002e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_PCD_EP_SetStall+0x82>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e01d      	b.n	8002e66 <HAL_PCD_EP_SetStall+0xbe>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68f9      	ldr	r1, [r7, #12]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f005 fb87 	bl	800854c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7999      	ldrb	r1, [r3, #6]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e56:	461a      	mov	r2, r3
 8002e58:	f005 fd7a 	bl	8008950 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	7912      	ldrb	r2, [r2, #4]
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e042      	b.n	8002f12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da0f      	bge.n	8002eb4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	3310      	adds	r3, #16
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	705a      	strb	r2, [r3, #1]
 8002eb2:	e00f      	b.n	8002ed4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_PCD_EP_ClrStall+0x86>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e00e      	b.n	8002f12 <HAL_PCD_EP_ClrStall+0xa4>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68f9      	ldr	r1, [r7, #12]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f005 fb90 	bl	8008628 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	da0c      	bge.n	8002f48 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 020f 	and.w	r2, r3, #15
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	3310      	adds	r3, #16
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e00c      	b.n	8002f62 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f005 f9af 	bl	80082cc <USB_EPStopXfer>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f72:	7afb      	ldrb	r3, [r7, #11]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	3310      	adds	r3, #16
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d901      	bls.n	8002fb4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e06b      	b.n	800308c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d902      	bls.n	8002fd0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	3303      	adds	r3, #3
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fd8:	e02a      	b.n	8003030 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d902      	bls.n	8002ff6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3303      	adds	r3, #3
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	68d9      	ldr	r1, [r3, #12]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4603      	mov	r3, r0
 8003012:	6978      	ldr	r0, [r7, #20]
 8003014:	f005 fa04 	bl	8008420 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	441a      	add	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	441a      	add	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	429a      	cmp	r2, r3
 8003044:	d809      	bhi.n	800305a <PCD_WriteEmptyTxFifo+0xde>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800304e:	429a      	cmp	r2, r3
 8003050:	d203      	bcs.n	800305a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1bf      	bne.n	8002fda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	429a      	cmp	r2, r3
 8003064:	d811      	bhi.n	800308a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	2201      	movs	r2, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800307a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	43db      	mvns	r3, r3
 8003080:	6939      	ldr	r1, [r7, #16]
 8003082:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003086:	4013      	ands	r3, r2
 8003088:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	333c      	adds	r3, #60	@ 0x3c
 80030ac:	3304      	adds	r3, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	799b      	ldrb	r3, [r3, #6]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d17b      	bne.n	80031c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d015      	beq.n	8003100 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	4a61      	ldr	r2, [pc, #388]	@ (800325c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	f240 80b9 	bls.w	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80b3 	beq.w	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030fc:	6093      	str	r3, [r2, #8]
 80030fe:	e0a7      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003116:	461a      	mov	r2, r3
 8003118:	2320      	movs	r3, #32
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	e098      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 8093 	bne.w	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	4a4b      	ldr	r2, [pc, #300]	@ (800325c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d90f      	bls.n	8003152 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003148:	461a      	mov	r2, r3
 800314a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800314e:	6093      	str	r3, [r2, #8]
 8003150:	e07e      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4413      	add	r3, r2
 8003164:	3304      	adds	r3, #4
 8003166:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1a      	ldr	r2, [r3, #32]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	0159      	lsls	r1, r3, #5
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	440b      	add	r3, r1
 8003174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317e:	1ad2      	subs	r2, r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d114      	bne.n	80031b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800319c:	461a      	mov	r2, r3
 800319e:	2101      	movs	r1, #1
 80031a0:	f005 fbd6 	bl	8008950 <USB_EP0_OutStart>
 80031a4:	e006      	b.n	80031b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	441a      	add	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f007 fbdc 	bl	800a978 <HAL_PCD_DataOutStageCallback>
 80031c0:	e046      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	4a26      	ldr	r2, [pc, #152]	@ (8003260 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d124      	bne.n	8003214 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031e0:	461a      	mov	r2, r3
 80031e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031e6:	6093      	str	r3, [r2, #8]
 80031e8:	e032      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003200:	461a      	mov	r2, r3
 8003202:	2320      	movs	r3, #32
 8003204:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4619      	mov	r1, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f007 fbb3 	bl	800a978 <HAL_PCD_DataOutStageCallback>
 8003212:	e01d      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d114      	bne.n	8003244 <PCD_EP_OutXfrComplete_int+0x1b0>
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800323c:	461a      	mov	r2, r3
 800323e:	2100      	movs	r1, #0
 8003240:	f005 fb86 	bl	8008950 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f007 fb94 	bl	800a978 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	4f54300a 	.word	0x4f54300a
 8003260:	4f54310a 	.word	0x4f54310a

08003264 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	333c      	adds	r3, #60	@ 0x3c
 800327c:	3304      	adds	r3, #4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <PCD_EP_OutSetupPacket_int+0x88>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d90e      	bls.n	80032b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b0:	461a      	mov	r2, r3
 80032b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f007 fb4b 	bl	800a954 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <PCD_EP_OutSetupPacket_int+0x88>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d90c      	bls.n	80032e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	799b      	ldrb	r3, [r3, #6]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d108      	bne.n	80032e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032d8:	461a      	mov	r2, r3
 80032da:	2101      	movs	r1, #1
 80032dc:	f005 fb38 	bl	8008950 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	4f54300a 	.word	0x4f54300a

080032f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
 80032fc:	4613      	mov	r3, r2
 80032fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800330e:	883b      	ldrh	r3, [r7, #0]
 8003310:	0419      	lsls	r1, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	430a      	orrs	r2, r1
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28
 800331c:	e028      	b.n	8003370 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4413      	add	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e00d      	b.n	800334e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	3340      	adds	r3, #64	@ 0x40
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	4413      	add	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	3301      	adds	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	3b01      	subs	r3, #1
 8003354:	429a      	cmp	r2, r3
 8003356:	d3ec      	bcc.n	8003332 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003358:	883b      	ldrh	r3, [r7, #0]
 800335a:	0418      	lsls	r0, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	3b01      	subs	r3, #1
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	4302      	orrs	r2, r0
 8003368:	3340      	adds	r3, #64	@ 0x40
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033ce:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	10000003 	.word	0x10000003

080033e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_PWREx_ConfigSupply+0x70>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d00a      	beq.n	800342a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003414:	4b16      	ldr	r3, [pc, #88]	@ (8003470 <HAL_PWREx_ConfigSupply+0x70>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	d001      	beq.n	8003426 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e01f      	b.n	8003466 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e01d      	b.n	8003466 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800342a:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <HAL_PWREx_ConfigSupply+0x70>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	490f      	ldr	r1, [pc, #60]	@ (8003470 <HAL_PWREx_ConfigSupply+0x70>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4313      	orrs	r3, r2
 8003438:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800343a:	f7fe f9f9 	bl	8001830 <HAL_GetTick>
 800343e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003440:	e009      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003442:	f7fe f9f5 	bl	8001830 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003450:	d901      	bls.n	8003456 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e007      	b.n	8003466 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <HAL_PWREx_ConfigSupply+0x70>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800345e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003462:	d1ee      	bne.n	8003442 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	58024800 	.word	0x58024800

08003474 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003482:	60d3      	str	r3, [r2, #12]
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	58024800 	.word	0x58024800

08003494 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08c      	sub	sp, #48	@ 0x30
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e3c8      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8087 	beq.w	80035c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b4:	4b88      	ldr	r3, [pc, #544]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034be:	4b86      	ldr	r3, [pc, #536]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c6:	2b10      	cmp	r3, #16
 80034c8:	d007      	beq.n	80034da <HAL_RCC_OscConfig+0x46>
 80034ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034cc:	2b18      	cmp	r3, #24
 80034ce:	d110      	bne.n	80034f2 <HAL_RCC_OscConfig+0x5e>
 80034d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d10b      	bne.n	80034f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034da:	4b7f      	ldr	r3, [pc, #508]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d06c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x12c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d168      	bne.n	80035c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e3a2      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x76>
 80034fc:	4b76      	ldr	r3, [pc, #472]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a75      	ldr	r2, [pc, #468]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	e02e      	b.n	8003568 <HAL_RCC_OscConfig+0xd4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x98>
 8003512:	4b71      	ldr	r3, [pc, #452]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a70      	ldr	r2, [pc, #448]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b6e      	ldr	r3, [pc, #440]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6d      	ldr	r2, [pc, #436]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003524:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <HAL_RCC_OscConfig+0xd4>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0xbc>
 8003536:	4b68      	ldr	r3, [pc, #416]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a67      	ldr	r2, [pc, #412]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 800353c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b65      	ldr	r3, [pc, #404]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a64      	ldr	r2, [pc, #400]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0xd4>
 8003550:	4b61      	ldr	r3, [pc, #388]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a60      	ldr	r2, [pc, #384]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b5e      	ldr	r3, [pc, #376]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5d      	ldr	r2, [pc, #372]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe f95e 	bl	8001830 <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe f95a 	bl	8001830 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e356      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800358a:	4b53      	ldr	r3, [pc, #332]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0xe4>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe f94a 	bl	8001830 <HAL_GetTick>
 800359c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe f946 	bl	8001830 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e342      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035b2:	4b49      	ldr	r3, [pc, #292]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x10c>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 808c 	beq.w	80036e8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d0:	4b41      	ldr	r3, [pc, #260]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035da:	4b3f      	ldr	r3, [pc, #252]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80035dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <HAL_RCC_OscConfig+0x162>
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2b18      	cmp	r3, #24
 80035ea:	d137      	bne.n	800365c <HAL_RCC_OscConfig+0x1c8>
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d132      	bne.n	800365c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f6:	4b38      	ldr	r3, [pc, #224]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_RCC_OscConfig+0x17a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e314      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800360e:	4b32      	ldr	r3, [pc, #200]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 0219 	bic.w	r2, r3, #25
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	492f      	ldr	r1, [pc, #188]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe f906 	bl	8001830 <HAL_GetTick>
 8003624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fe f902 	bl	8001830 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e2fe      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800363a:	4b27      	ldr	r3, [pc, #156]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	061b      	lsls	r3, r3, #24
 8003654:	4920      	ldr	r1, [pc, #128]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800365a:	e045      	b.n	80036e8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d026      	beq.n	80036b2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003664:	4b1c      	ldr	r3, [pc, #112]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 0219 	bic.w	r2, r3, #25
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4919      	ldr	r1, [pc, #100]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fe f8db 	bl	8001830 <HAL_GetTick>
 800367a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367e:	f7fe f8d7 	bl	8001830 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e2d3      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003690:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369c:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	490b      	ldr	r1, [pc, #44]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
 80036b0:	e01a      	b.n	80036e8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a08      	ldr	r2, [pc, #32]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fe f8b7 	bl	8001830 <HAL_GetTick>
 80036c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c6:	f7fe f8b3 	bl	8001830 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d903      	bls.n	80036dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e2af      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
 80036d8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036dc:	4b96      	ldr	r3, [pc, #600]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ee      	bne.n	80036c6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d06a      	beq.n	80037ca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f4:	4b90      	ldr	r3, [pc, #576]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036fc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036fe:	4b8e      	ldr	r3, [pc, #568]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b08      	cmp	r3, #8
 8003708:	d007      	beq.n	800371a <HAL_RCC_OscConfig+0x286>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b18      	cmp	r3, #24
 800370e:	d11b      	bne.n	8003748 <HAL_RCC_OscConfig+0x2b4>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d116      	bne.n	8003748 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800371a:	4b87      	ldr	r3, [pc, #540]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x29e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	2b80      	cmp	r3, #128	@ 0x80
 800372c:	d001      	beq.n	8003732 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e282      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003732:	4b81      	ldr	r3, [pc, #516]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	061b      	lsls	r3, r3, #24
 8003740:	497d      	ldr	r1, [pc, #500]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003746:	e040      	b.n	80037ca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d023      	beq.n	8003798 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003750:	4b79      	ldr	r3, [pc, #484]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a78      	ldr	r2, [pc, #480]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800375a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe f868 	bl	8001830 <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003764:	f7fe f864 	bl	8001830 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e260      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003776:	4b70      	ldr	r3, [pc, #448]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003782:	4b6d      	ldr	r3, [pc, #436]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	061b      	lsls	r3, r3, #24
 8003790:	4969      	ldr	r1, [pc, #420]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	60cb      	str	r3, [r1, #12]
 8003796:	e018      	b.n	80037ca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003798:	4b67      	ldr	r3, [pc, #412]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a66      	ldr	r2, [pc, #408]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800379e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fe f844 	bl	8001830 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80037ac:	f7fe f840 	bl	8001830 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e23c      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037be:	4b5e      	ldr	r3, [pc, #376]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d036      	beq.n	8003844 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d019      	beq.n	8003812 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037de:	4b56      	ldr	r3, [pc, #344]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 80037e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e2:	4a55      	ldr	r2, [pc, #340]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ea:	f7fe f821 	bl	8001830 <HAL_GetTick>
 80037ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f2:	f7fe f81d 	bl	8001830 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e219      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003804:	4b4c      	ldr	r3, [pc, #304]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x35e>
 8003810:	e018      	b.n	8003844 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003812:	4b49      	ldr	r3, [pc, #292]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003816:	4a48      	ldr	r2, [pc, #288]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fe f807 	bl	8001830 <HAL_GetTick>
 8003822:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003826:	f7fe f803 	bl	8001830 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e1ff      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003838:	4b3f      	ldr	r3, [pc, #252]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800383a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b00      	cmp	r3, #0
 800384e:	d036      	beq.n	80038be <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d019      	beq.n	800388c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003858:	4b37      	ldr	r3, [pc, #220]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a36      	ldr	r2, [pc, #216]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800385e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003862:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003864:	f7fd ffe4 	bl	8001830 <HAL_GetTick>
 8003868:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800386c:	f7fd ffe0 	bl	8001830 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e1dc      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800387e:	4b2e      	ldr	r3, [pc, #184]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x3d8>
 800388a:	e018      	b.n	80038be <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800388c:	4b2a      	ldr	r3, [pc, #168]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a29      	ldr	r2, [pc, #164]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003896:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003898:	f7fd ffca 	bl	8001830 <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a0:	f7fd ffc6 	bl	8001830 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e1c2      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038b2:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8086 	beq.w	80039d8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038cc:	4b1b      	ldr	r3, [pc, #108]	@ (800393c <HAL_RCC_OscConfig+0x4a8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1a      	ldr	r2, [pc, #104]	@ (800393c <HAL_RCC_OscConfig+0x4a8>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038d8:	f7fd ffaa 	bl	8001830 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e0:	f7fd ffa6 	bl	8001830 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	@ 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e1a2      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f2:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_RCC_OscConfig+0x4a8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d106      	bne.n	8003914 <HAL_RCC_OscConfig+0x480>
 8003906:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	4a0b      	ldr	r2, [pc, #44]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6713      	str	r3, [r2, #112]	@ 0x70
 8003912:	e032      	b.n	800397a <HAL_RCC_OscConfig+0x4e6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d111      	bne.n	8003940 <HAL_RCC_OscConfig+0x4ac>
 800391c:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	4a05      	ldr	r2, [pc, #20]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	6713      	str	r3, [r2, #112]	@ 0x70
 8003928:	4b03      	ldr	r3, [pc, #12]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392c:	4a02      	ldr	r2, [pc, #8]	@ (8003938 <HAL_RCC_OscConfig+0x4a4>)
 800392e:	f023 0304 	bic.w	r3, r3, #4
 8003932:	6713      	str	r3, [r2, #112]	@ 0x70
 8003934:	e021      	b.n	800397a <HAL_RCC_OscConfig+0x4e6>
 8003936:	bf00      	nop
 8003938:	58024400 	.word	0x58024400
 800393c:	58024800 	.word	0x58024800
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b05      	cmp	r3, #5
 8003946:	d10c      	bne.n	8003962 <HAL_RCC_OscConfig+0x4ce>
 8003948:	4b83      	ldr	r3, [pc, #524]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394c:	4a82      	ldr	r2, [pc, #520]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	6713      	str	r3, [r2, #112]	@ 0x70
 8003954:	4b80      	ldr	r3, [pc, #512]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003958:	4a7f      	ldr	r2, [pc, #508]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003960:	e00b      	b.n	800397a <HAL_RCC_OscConfig+0x4e6>
 8003962:	4b7d      	ldr	r3, [pc, #500]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	4a7c      	ldr	r2, [pc, #496]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6713      	str	r3, [r2, #112]	@ 0x70
 800396e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a79      	ldr	r2, [pc, #484]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003974:	f023 0304 	bic.w	r3, r3, #4
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d015      	beq.n	80039ae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fd ff55 	bl	8001830 <HAL_GetTick>
 8003986:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7fd ff51 	bl	8001830 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003998:	4293      	cmp	r3, r2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e14b      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ee      	beq.n	800398a <HAL_RCC_OscConfig+0x4f6>
 80039ac:	e014      	b.n	80039d8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd ff3f 	bl	8001830 <HAL_GetTick>
 80039b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fd ff3b 	bl	8001830 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e135      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039cc:	4b62      	ldr	r3, [pc, #392]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ee      	bne.n	80039b6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 812a 	beq.w	8003c36 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039ea:	2b18      	cmp	r3, #24
 80039ec:	f000 80ba 	beq.w	8003b64 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	f040 8095 	bne.w	8003b24 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b57      	ldr	r3, [pc, #348]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a56      	ldr	r2, [pc, #344]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fd ff13 	bl	8001830 <HAL_GetTick>
 8003a0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fd ff0f 	bl	8001830 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e10b      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a20:	4b4d      	ldr	r3, [pc, #308]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a30:	4b4a      	ldr	r3, [pc, #296]	@ (8003b5c <HAL_RCC_OscConfig+0x6c8>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	4945      	ldr	r1, [pc, #276]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a54:	3b01      	subs	r3, #1
 8003a56:	025b      	lsls	r3, r3, #9
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	3b01      	subs	r3, #1
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a76:	4938      	ldr	r1, [pc, #224]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a7c:	4b36      	ldr	r3, [pc, #216]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	4a35      	ldr	r2, [pc, #212]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a88:	4b33      	ldr	r3, [pc, #204]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a8c:	4b34      	ldr	r3, [pc, #208]	@ (8003b60 <HAL_RCC_OscConfig+0x6cc>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a94:	00d2      	lsls	r2, r2, #3
 8003a96:	4930      	ldr	r1, [pc, #192]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	f023 020c 	bic.w	r2, r3, #12
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	492b      	ldr	r1, [pc, #172]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003aae:	4b2a      	ldr	r3, [pc, #168]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	f023 0202 	bic.w	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	4927      	ldr	r1, [pc, #156]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ac0:	4b25      	ldr	r3, [pc, #148]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	4a24      	ldr	r2, [pc, #144]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003acc:	4b22      	ldr	r3, [pc, #136]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad0:	4a21      	ldr	r2, [pc, #132]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003ade:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b19      	ldr	r3, [pc, #100]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a18      	ldr	r2, [pc, #96]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd fe98 	bl	8001830 <HAL_GetTick>
 8003b00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fd fe94 	bl	8001830 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e090      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x670>
 8003b22:	e088      	b.n	8003c36 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b24:	4b0c      	ldr	r3, [pc, #48]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0b      	ldr	r2, [pc, #44]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd fe7e 	bl	8001830 <HAL_GetTick>
 8003b34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fd fe7a 	bl	8001830 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e076      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b4a:	4b03      	ldr	r3, [pc, #12]	@ (8003b58 <HAL_RCC_OscConfig+0x6c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x6a4>
 8003b56:	e06e      	b.n	8003c36 <HAL_RCC_OscConfig+0x7a2>
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	fffffc0c 	.word	0xfffffc0c
 8003b60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b64:	4b36      	ldr	r3, [pc, #216]	@ (8003c40 <HAL_RCC_OscConfig+0x7ac>)
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b6a:	4b35      	ldr	r3, [pc, #212]	@ (8003c40 <HAL_RCC_OscConfig+0x7ac>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d031      	beq.n	8003bdc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f003 0203 	and.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d12a      	bne.n	8003bdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d122      	bne.n	8003bdc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d11a      	bne.n	8003bdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	0a5b      	lsrs	r3, r3, #9
 8003baa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d111      	bne.n	8003bdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d108      	bne.n	8003bdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e02b      	b.n	8003c38 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003be0:	4b17      	ldr	r3, [pc, #92]	@ (8003c40 <HAL_RCC_OscConfig+0x7ac>)
 8003be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be4:	08db      	lsrs	r3, r3, #3
 8003be6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d01f      	beq.n	8003c36 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003bf6:	4b12      	ldr	r3, [pc, #72]	@ (8003c40 <HAL_RCC_OscConfig+0x7ac>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	4a11      	ldr	r2, [pc, #68]	@ (8003c40 <HAL_RCC_OscConfig+0x7ac>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c02:	f7fd fe15 	bl	8001830 <HAL_GetTick>
 8003c06:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003c08:	bf00      	nop
 8003c0a:	f7fd fe11 	bl	8001830 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d0f9      	beq.n	8003c0a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c16:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <HAL_RCC_OscConfig+0x7ac>)
 8003c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c44 <HAL_RCC_OscConfig+0x7b0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c22:	00d2      	lsls	r2, r2, #3
 8003c24:	4906      	ldr	r1, [pc, #24]	@ (8003c40 <HAL_RCC_OscConfig+0x7ac>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c2a:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <HAL_RCC_OscConfig+0x7ac>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <HAL_RCC_OscConfig+0x7ac>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3730      	adds	r7, #48	@ 0x30
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	58024400 	.word	0x58024400
 8003c44:	ffff0007 	.word	0xffff0007

08003c48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e19c      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b8a      	ldr	r3, [pc, #552]	@ (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d910      	bls.n	8003c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b87      	ldr	r3, [pc, #540]	@ (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 020f 	bic.w	r2, r3, #15
 8003c72:	4985      	ldr	r1, [pc, #532]	@ (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b83      	ldr	r3, [pc, #524]	@ (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e184      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d010      	beq.n	8003cba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d908      	bls.n	8003cba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ca8:	4b78      	ldr	r3, [pc, #480]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	4975      	ldr	r1, [pc, #468]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d010      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	4b70      	ldr	r3, [pc, #448]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d908      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	496a      	ldr	r1, [pc, #424]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	4b64      	ldr	r3, [pc, #400]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d908      	bls.n	8003d16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d04:	4b61      	ldr	r3, [pc, #388]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	495e      	ldr	r1, [pc, #376]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d010      	beq.n	8003d44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	4b59      	ldr	r3, [pc, #356]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d908      	bls.n	8003d44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d32:	4b56      	ldr	r3, [pc, #344]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4953      	ldr	r1, [pc, #332]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d010      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	4b4d      	ldr	r3, [pc, #308]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d908      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d60:	4b4a      	ldr	r3, [pc, #296]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f023 020f 	bic.w	r2, r3, #15
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4947      	ldr	r1, [pc, #284]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d055      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d7e:	4b43      	ldr	r3, [pc, #268]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4940      	ldr	r1, [pc, #256]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d98:	4b3c      	ldr	r3, [pc, #240]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d121      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0f6      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db0:	4b36      	ldr	r3, [pc, #216]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d115      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0ea      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dc8:	4b30      	ldr	r3, [pc, #192]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0de      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0d6      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003de8:	4b28      	ldr	r3, [pc, #160]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f023 0207 	bic.w	r2, r3, #7
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4925      	ldr	r1, [pc, #148]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfa:	f7fd fd19 	bl	8001830 <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e02:	f7fd fd15 	bl	8001830 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0be      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e18:	4b1c      	ldr	r3, [pc, #112]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d1eb      	bne.n	8003e02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	4b14      	ldr	r3, [pc, #80]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d208      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e46:	4b11      	ldr	r3, [pc, #68]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f023 020f 	bic.w	r2, r3, #15
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	490e      	ldr	r1, [pc, #56]	@ (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d214      	bcs.n	8003e90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b08      	ldr	r3, [pc, #32]	@ (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 020f 	bic.w	r2, r3, #15
 8003e6e:	4906      	ldr	r1, [pc, #24]	@ (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e086      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
 8003e88:	52002000 	.word	0x52002000
 8003e8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d010      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d208      	bcs.n	8003ebe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003eac:	4b3c      	ldr	r3, [pc, #240]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4939      	ldr	r1, [pc, #228]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	4b34      	ldr	r3, [pc, #208]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d208      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eda:	4b31      	ldr	r3, [pc, #196]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	492e      	ldr	r1, [pc, #184]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d208      	bcs.n	8003f1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f08:	4b25      	ldr	r3, [pc, #148]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	4922      	ldr	r1, [pc, #136]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d208      	bcs.n	8003f48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f36:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4917      	ldr	r1, [pc, #92]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f48:	f000 f834 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b14      	ldr	r3, [pc, #80]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	4912      	ldr	r1, [pc, #72]	@ (8003fa4 <HAL_RCC_ClockConfig+0x35c>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
 8003f64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f66:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa4 <HAL_RCC_ClockConfig+0x35c>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa8 <HAL_RCC_ClockConfig+0x360>)
 8003f7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f80:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <HAL_RCC_ClockConfig+0x364>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f86:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <HAL_RCC_ClockConfig+0x368>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd fc06 	bl	800179c <HAL_InitTick>
 8003f90:	4603      	mov	r3, r0
 8003f92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	0800b938 	.word	0x0800b938
 8003fa8:	240001b4 	.word	0x240001b4
 8003fac:	240001b0 	.word	0x240001b0
 8003fb0:	240001b8 	.word	0x240001b8

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	@ 0x24
 8003fb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fba:	4bb3      	ldr	r3, [pc, #716]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fc2:	2b18      	cmp	r3, #24
 8003fc4:	f200 8155 	bhi.w	8004272 <HAL_RCC_GetSysClockFreq+0x2be>
 8003fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fce:	bf00      	nop
 8003fd0:	08004035 	.word	0x08004035
 8003fd4:	08004273 	.word	0x08004273
 8003fd8:	08004273 	.word	0x08004273
 8003fdc:	08004273 	.word	0x08004273
 8003fe0:	08004273 	.word	0x08004273
 8003fe4:	08004273 	.word	0x08004273
 8003fe8:	08004273 	.word	0x08004273
 8003fec:	08004273 	.word	0x08004273
 8003ff0:	0800405b 	.word	0x0800405b
 8003ff4:	08004273 	.word	0x08004273
 8003ff8:	08004273 	.word	0x08004273
 8003ffc:	08004273 	.word	0x08004273
 8004000:	08004273 	.word	0x08004273
 8004004:	08004273 	.word	0x08004273
 8004008:	08004273 	.word	0x08004273
 800400c:	08004273 	.word	0x08004273
 8004010:	08004061 	.word	0x08004061
 8004014:	08004273 	.word	0x08004273
 8004018:	08004273 	.word	0x08004273
 800401c:	08004273 	.word	0x08004273
 8004020:	08004273 	.word	0x08004273
 8004024:	08004273 	.word	0x08004273
 8004028:	08004273 	.word	0x08004273
 800402c:	08004273 	.word	0x08004273
 8004030:	08004067 	.word	0x08004067
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004034:	4b94      	ldr	r3, [pc, #592]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004040:	4b91      	ldr	r3, [pc, #580]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	4a90      	ldr	r2, [pc, #576]	@ (800428c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
 8004050:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004052:	e111      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004054:	4b8d      	ldr	r3, [pc, #564]	@ (800428c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004056:	61bb      	str	r3, [r7, #24]
      break;
 8004058:	e10e      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800405a:	4b8d      	ldr	r3, [pc, #564]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800405c:	61bb      	str	r3, [r7, #24]
      break;
 800405e:	e10b      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004060:	4b8c      	ldr	r3, [pc, #560]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004062:	61bb      	str	r3, [r7, #24]
      break;
 8004064:	e108      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004066:	4b88      	ldr	r3, [pc, #544]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004070:	4b85      	ldr	r3, [pc, #532]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800407a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800407c:	4b82      	ldr	r3, [pc, #520]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004086:	4b80      	ldr	r3, [pc, #512]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	08db      	lsrs	r3, r3, #3
 800408c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80e1 	beq.w	800426c <HAL_RCC_GetSysClockFreq+0x2b8>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	f000 8083 	beq.w	80041b8 <HAL_RCC_GetSysClockFreq+0x204>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	f200 80a1 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x248>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x114>
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d056      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x1c0>
 80040c6:	e099      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d02d      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	08db      	lsrs	r3, r3, #3
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	4a6b      	ldr	r2, [pc, #428]	@ (800428c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
 80040e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fe:	4b62      	ldr	r3, [pc, #392]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004112:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800412e:	e087      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800429c <HAL_RCC_GetSysClockFreq+0x2e8>
 800413e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004142:	4b51      	ldr	r3, [pc, #324]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004152:	ed97 6a02 	vldr	s12, [r7, #8]
 8004156:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 800415a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800415e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004172:	e065      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80042a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004186:	4b40      	ldr	r3, [pc, #256]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004196:	ed97 6a02 	vldr	s12, [r7, #8]
 800419a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 800419e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041b6:	e043      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80042a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80041c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041da:	ed97 6a02 	vldr	s12, [r7, #8]
 80041de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041fa:	e021      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80042a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800420a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800420e:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004222:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800422e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800423e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004240:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	0a5b      	lsrs	r3, r3, #9
 8004246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800424a:	3301      	adds	r3, #1
 800424c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	ee07 3a90 	vmov	s15, r3
 8004254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004258:	edd7 6a07 	vldr	s13, [r7, #28]
 800425c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004264:	ee17 3a90 	vmov	r3, s15
 8004268:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800426a:	e005      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]
      break;
 8004270:	e002      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004272:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004274:	61bb      	str	r3, [r7, #24]
      break;
 8004276:	bf00      	nop
  }

  return sysclockfreq;
 8004278:	69bb      	ldr	r3, [r7, #24]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3724      	adds	r7, #36	@ 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	58024400 	.word	0x58024400
 800428c:	03d09000 	.word	0x03d09000
 8004290:	003d0900 	.word	0x003d0900
 8004294:	017d7840 	.word	0x017d7840
 8004298:	46000000 	.word	0x46000000
 800429c:	4c742400 	.word	0x4c742400
 80042a0:	4a742400 	.word	0x4a742400
 80042a4:	4bbebc20 	.word	0x4bbebc20

080042a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042ae:	f7ff fe81 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b10      	ldr	r3, [pc, #64]	@ (80042f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	490f      	ldr	r1, [pc, #60]	@ (80042fc <HAL_RCC_GetHCLKFreq+0x54>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042cc:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	4a09      	ldr	r2, [pc, #36]	@ (80042fc <HAL_RCC_GetHCLKFreq+0x54>)
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	4a07      	ldr	r2, [pc, #28]	@ (8004300 <HAL_RCC_GetHCLKFreq+0x58>)
 80042e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042e6:	4a07      	ldr	r2, [pc, #28]	@ (8004304 <HAL_RCC_GetHCLKFreq+0x5c>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042ec:	4b04      	ldr	r3, [pc, #16]	@ (8004300 <HAL_RCC_GetHCLKFreq+0x58>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	58024400 	.word	0x58024400
 80042fc:	0800b938 	.word	0x0800b938
 8004300:	240001b4 	.word	0x240001b4
 8004304:	240001b0 	.word	0x240001b0

08004308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800430c:	f7ff ffcc 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4904      	ldr	r1, [pc, #16]	@ (8004330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	58024400 	.word	0x58024400
 8004330:	0800b938 	.word	0x0800b938

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004338:	f7ff ffb6 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4904      	ldr	r1, [pc, #16]	@ (800435c <HAL_RCC_GetPCLK2Freq+0x28>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	58024400 	.word	0x58024400
 800435c:	0800b938 	.word	0x0800b938

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004364:	b0c6      	sub	sp, #280	@ 0x118
 8004366:	af00      	add	r7, sp, #0
 8004368:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004372:	2300      	movs	r3, #0
 8004374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004384:	2500      	movs	r5, #0
 8004386:	ea54 0305 	orrs.w	r3, r4, r5
 800438a:	d049      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800438c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004392:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004396:	d02f      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004398:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800439c:	d828      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800439e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043a2:	d01a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80043a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043a8:	d822      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043b2:	d007      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043b4:	e01c      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b6:	4bab      	ldr	r3, [pc, #684]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	4aaa      	ldr	r2, [pc, #680]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043c2:	e01a      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c8:	3308      	adds	r3, #8
 80043ca:	2102      	movs	r1, #2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fc25 	bl	8005c1c <RCCEx_PLL2_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043d8:	e00f      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043de:	3328      	adds	r3, #40	@ 0x28
 80043e0:	2102      	movs	r1, #2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 fccc 	bl	8005d80 <RCCEx_PLL3_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043ee:	e004      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80043f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004402:	4b98      	ldr	r3, [pc, #608]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004406:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800440a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800440e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004410:	4a94      	ldr	r2, [pc, #592]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004412:	430b      	orrs	r3, r1
 8004414:	6513      	str	r3, [r2, #80]	@ 0x50
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800441c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800442c:	f04f 0900 	mov.w	r9, #0
 8004430:	ea58 0309 	orrs.w	r3, r8, r9
 8004434:	d047      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443c:	2b04      	cmp	r3, #4
 800443e:	d82a      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004440:	a201      	add	r2, pc, #4	@ (adr r2, 8004448 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	0800445d 	.word	0x0800445d
 800444c:	0800446b 	.word	0x0800446b
 8004450:	08004481 	.word	0x08004481
 8004454:	0800449f 	.word	0x0800449f
 8004458:	0800449f 	.word	0x0800449f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445c:	4b81      	ldr	r3, [pc, #516]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	4a80      	ldr	r2, [pc, #512]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004468:	e01a      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800446a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446e:	3308      	adds	r3, #8
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f001 fbd2 	bl	8005c1c <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800447e:	e00f      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004484:	3328      	adds	r3, #40	@ 0x28
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f001 fc79 	bl	8005d80 <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004494:	e004      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800449e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a8:	4b6e      	ldr	r3, [pc, #440]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ac:	f023 0107 	bic.w	r1, r3, #7
 80044b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b6:	4a6b      	ldr	r2, [pc, #428]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80044d2:	f04f 0b00 	mov.w	fp, #0
 80044d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80044da:	d05b      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80044dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044e4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80044e8:	d03b      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80044ea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80044ee:	d834      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80044f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044f4:	d037      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80044f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044fa:	d82e      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80044fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004500:	d033      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004502:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004506:	d828      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800450c:	d01a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800450e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004512:	d822      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004518:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800451c:	d007      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800451e:	e01c      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004520:	4b50      	ldr	r3, [pc, #320]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	4a4f      	ldr	r2, [pc, #316]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800452a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800452c:	e01e      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800452e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004532:	3308      	adds	r3, #8
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f001 fb70 	bl	8005c1c <RCCEx_PLL2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004542:	e013      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004548:	3328      	adds	r3, #40	@ 0x28
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f001 fc17 	bl	8005d80 <RCCEx_PLL3_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004558:	e008      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004560:	e004      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004562:	bf00      	nop
 8004564:	e002      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800456a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004574:	4b3b      	ldr	r3, [pc, #236]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004578:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800457c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004580:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004584:	4a37      	ldr	r2, [pc, #220]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004586:	430b      	orrs	r3, r1
 8004588:	6593      	str	r3, [r2, #88]	@ 0x58
 800458a:	e003      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80045a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80045aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	d05d      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80045b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80045bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80045c0:	d03b      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80045c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80045c6:	d834      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045cc:	d037      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80045ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045d2:	d82e      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045d8:	d033      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80045da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045de:	d828      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045e4:	d01a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80045e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045ea:	d822      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80045f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045f4:	d007      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80045f6:	e01c      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004604:	e01e      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460a:	3308      	adds	r3, #8
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f001 fb04 	bl	8005c1c <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800461a:	e013      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800461c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004620:	3328      	adds	r3, #40	@ 0x28
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fbab 	bl	8005d80 <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004630:	e008      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004638:	e004      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800463a:	bf00      	nop
 800463c:	e002      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800463e:	bf00      	nop
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10d      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004650:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004658:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800465c:	4a01      	ldr	r2, [pc, #4]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800465e:	430b      	orrs	r3, r1
 8004660:	6593      	str	r3, [r2, #88]	@ 0x58
 8004662:	e005      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800466c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800467c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004686:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d03a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004696:	2b30      	cmp	r3, #48	@ 0x30
 8004698:	d01f      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800469a:	2b30      	cmp	r3, #48	@ 0x30
 800469c:	d819      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d00c      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d815      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d019      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d111      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ae:	4baa      	ldr	r3, [pc, #680]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	4aa9      	ldr	r2, [pc, #676]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80046ba:	e011      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c0:	3308      	adds	r3, #8
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 faa9 	bl	8005c1c <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80046d0:	e006      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046d8:	e002      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80046de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80046e8:	4b9b      	ldr	r3, [pc, #620]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f6:	4a98      	ldr	r2, [pc, #608]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046f8:	430b      	orrs	r3, r1
 80046fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046fc:	e003      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004702:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004712:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004716:	2300      	movs	r3, #0
 8004718:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800471c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004720:	460b      	mov	r3, r1
 8004722:	4313      	orrs	r3, r2
 8004724:	d051      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800472a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004730:	d035      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004736:	d82e      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004738:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800473c:	d031      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800473e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004742:	d828      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004748:	d01a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800474e:	d822      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004758:	d007      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800475a:	e01c      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475c:	4b7e      	ldr	r3, [pc, #504]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	4a7d      	ldr	r2, [pc, #500]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004768:	e01c      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800476e:	3308      	adds	r3, #8
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f001 fa52 	bl	8005c1c <RCCEx_PLL2_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800477e:	e011      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004784:	3328      	adds	r3, #40	@ 0x28
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f001 faf9 	bl	8005d80 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004794:	e006      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800479c:	e002      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80047a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80047b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	4a67      	ldr	r2, [pc, #412]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047bc:	430b      	orrs	r3, r1
 80047be:	6513      	str	r3, [r2, #80]	@ 0x50
 80047c0:	e003      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047da:	2300      	movs	r3, #0
 80047dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047e0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4313      	orrs	r3, r2
 80047e8:	d053      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80047ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047f4:	d033      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80047f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047fa:	d82c      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80047fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004800:	d02f      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004802:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004806:	d826      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004808:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800480c:	d02b      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800480e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004812:	d820      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004818:	d012      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800481a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800481e:	d81a      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d022      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004828:	d115      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800482a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800482e:	3308      	adds	r3, #8
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f001 f9f2 	bl	8005c1c <RCCEx_PLL2_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800483e:	e015      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004844:	3328      	adds	r3, #40	@ 0x28
 8004846:	2101      	movs	r1, #1
 8004848:	4618      	mov	r0, r3
 800484a:	f001 fa99 	bl	8005d80 <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004854:	e00a      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800485c:	e006      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800485e:	bf00      	nop
 8004860:	e004      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004862:	bf00      	nop
 8004864:	e002      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004866:	bf00      	nop
 8004868:	e000      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800486a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004874:	4b38      	ldr	r3, [pc, #224]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800487c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004882:	4a35      	ldr	r2, [pc, #212]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004884:	430b      	orrs	r3, r1
 8004886:	6513      	str	r3, [r2, #80]	@ 0x50
 8004888:	e003      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800488e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800489e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80048a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d058      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80048b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048be:	d033      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80048c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048c4:	d82c      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ca:	d02f      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d0:	d826      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048d6:	d02b      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80048d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048dc:	d820      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048e2:	d012      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80048e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048e8:	d81a      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d022      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80048ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048f2:	d115      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f8:	3308      	adds	r3, #8
 80048fa:	2101      	movs	r1, #1
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 f98d 	bl	8005c1c <RCCEx_PLL2_Config>
 8004902:	4603      	mov	r3, r0
 8004904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004908:	e015      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800490a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800490e:	3328      	adds	r3, #40	@ 0x28
 8004910:	2101      	movs	r1, #1
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fa34 	bl	8005d80 <RCCEx_PLL3_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800491e:	e00a      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004926:	e006      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004928:	bf00      	nop
 800492a:	e004      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800492c:	bf00      	nop
 800492e:	e002      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004930:	bf00      	nop
 8004932:	e000      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10e      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800493e:	4b06      	ldr	r3, [pc, #24]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004942:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800494e:	4a02      	ldr	r2, [pc, #8]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004950:	430b      	orrs	r3, r1
 8004952:	6593      	str	r3, [r2, #88]	@ 0x58
 8004954:	e006      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004956:	bf00      	nop
 8004958:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004960:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004974:	2300      	movs	r3, #0
 8004976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800497a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d037      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800498a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800498e:	d00e      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004994:	d816      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d018      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800499a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800499e:	d111      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a0:	4bc4      	ldr	r3, [pc, #784]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	4ac3      	ldr	r2, [pc, #780]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80049ac:	e00f      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b2:	3308      	adds	r3, #8
 80049b4:	2101      	movs	r1, #1
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 f930 	bl	8005c1c <RCCEx_PLL2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80049c2:	e004      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049ca:	e000      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80049cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049d6:	4bb7      	ldr	r3, [pc, #732]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049e4:	4ab3      	ldr	r2, [pc, #716]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049e6:	430b      	orrs	r3, r1
 80049e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80049ea:	e003      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004a00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4313      	orrs	r3, r2
 8004a12:	d039      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d81c      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a61 	.word	0x08004a61
 8004a28:	08004a35 	.word	0x08004a35
 8004a2c:	08004a43 	.word	0x08004a43
 8004a30:	08004a61 	.word	0x08004a61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a34:	4b9f      	ldr	r3, [pc, #636]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	4a9e      	ldr	r2, [pc, #632]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a40:	e00f      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a46:	3308      	adds	r3, #8
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 f8e6 	bl	8005c1c <RCCEx_PLL2_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a56:	e004      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a6a:	4b92      	ldr	r3, [pc, #584]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6e:	f023 0103 	bic.w	r1, r3, #3
 8004a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a78:	4a8e      	ldr	r2, [pc, #568]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a7e:	e003      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f000 8099 	beq.w	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aaa:	4b83      	ldr	r3, [pc, #524]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a82      	ldr	r2, [pc, #520]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ab4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab6:	f7fc febb 	bl	8001830 <HAL_GetTick>
 8004aba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac0:	f7fc feb6 	bl	8001830 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b64      	cmp	r3, #100	@ 0x64
 8004ace:	d903      	bls.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad8:	4b77      	ldr	r3, [pc, #476]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ed      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d173      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004aec:	4b71      	ldr	r3, [pc, #452]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004af8:	4053      	eors	r3, r2
 8004afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d015      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b02:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b0e:	4b69      	ldr	r3, [pc, #420]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b12:	4a68      	ldr	r2, [pc, #416]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b1a:	4b66      	ldr	r3, [pc, #408]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1e:	4a65      	ldr	r2, [pc, #404]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b26:	4a63      	ldr	r2, [pc, #396]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b3a:	d118      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fc fe78 	bl	8001830 <HAL_GetTick>
 8004b40:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b44:	e00d      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fc fe73 	bl	8001830 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d903      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004b60:	e005      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b62:	4b54      	ldr	r3, [pc, #336]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0eb      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d129      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b86:	d10e      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004b88:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b98:	091a      	lsrs	r2, r3, #4
 8004b9a:	4b48      	ldr	r3, [pc, #288]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	4a45      	ldr	r2, [pc, #276]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6113      	str	r3, [r2, #16]
 8004ba4:	e005      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004ba6:	4b43      	ldr	r3, [pc, #268]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	4a42      	ldr	r2, [pc, #264]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bb0:	6113      	str	r3, [r2, #16]
 8004bb2:	4b40      	ldr	r3, [pc, #256]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bb4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc2:	4a3c      	ldr	r2, [pc, #240]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc8:	e008      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004bd2:	e003      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f002 0301 	and.w	r3, r2, #1
 8004be8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004bf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f000 808f 	beq.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c04:	2b28      	cmp	r3, #40	@ 0x28
 8004c06:	d871      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004c08:	a201      	add	r2, pc, #4	@ (adr r2, 8004c10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004cf5 	.word	0x08004cf5
 8004c14:	08004ced 	.word	0x08004ced
 8004c18:	08004ced 	.word	0x08004ced
 8004c1c:	08004ced 	.word	0x08004ced
 8004c20:	08004ced 	.word	0x08004ced
 8004c24:	08004ced 	.word	0x08004ced
 8004c28:	08004ced 	.word	0x08004ced
 8004c2c:	08004ced 	.word	0x08004ced
 8004c30:	08004cc1 	.word	0x08004cc1
 8004c34:	08004ced 	.word	0x08004ced
 8004c38:	08004ced 	.word	0x08004ced
 8004c3c:	08004ced 	.word	0x08004ced
 8004c40:	08004ced 	.word	0x08004ced
 8004c44:	08004ced 	.word	0x08004ced
 8004c48:	08004ced 	.word	0x08004ced
 8004c4c:	08004ced 	.word	0x08004ced
 8004c50:	08004cd7 	.word	0x08004cd7
 8004c54:	08004ced 	.word	0x08004ced
 8004c58:	08004ced 	.word	0x08004ced
 8004c5c:	08004ced 	.word	0x08004ced
 8004c60:	08004ced 	.word	0x08004ced
 8004c64:	08004ced 	.word	0x08004ced
 8004c68:	08004ced 	.word	0x08004ced
 8004c6c:	08004ced 	.word	0x08004ced
 8004c70:	08004cf5 	.word	0x08004cf5
 8004c74:	08004ced 	.word	0x08004ced
 8004c78:	08004ced 	.word	0x08004ced
 8004c7c:	08004ced 	.word	0x08004ced
 8004c80:	08004ced 	.word	0x08004ced
 8004c84:	08004ced 	.word	0x08004ced
 8004c88:	08004ced 	.word	0x08004ced
 8004c8c:	08004ced 	.word	0x08004ced
 8004c90:	08004cf5 	.word	0x08004cf5
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004ced 	.word	0x08004ced
 8004c9c:	08004ced 	.word	0x08004ced
 8004ca0:	08004ced 	.word	0x08004ced
 8004ca4:	08004ced 	.word	0x08004ced
 8004ca8:	08004ced 	.word	0x08004ced
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004cf5 	.word	0x08004cf5
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	58024800 	.word	0x58024800
 8004cbc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 ffa7 	bl	8005c1c <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cd4:	e00f      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cda:	3328      	adds	r3, #40	@ 0x28
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 f84e 	bl	8005d80 <RCCEx_PLL3_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cea:	e004      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10a      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cfe:	4bbf      	ldr	r3, [pc, #764]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d0c:	4abb      	ldr	r2, [pc, #748]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d12:	e003      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f002 0302 	and.w	r3, r2, #2
 8004d28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	d041      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d824      	bhi.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d99 	.word	0x08004d99
 8004d50:	08004d65 	.word	0x08004d65
 8004d54:	08004d7b 	.word	0x08004d7b
 8004d58:	08004d99 	.word	0x08004d99
 8004d5c:	08004d99 	.word	0x08004d99
 8004d60:	08004d99 	.word	0x08004d99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d68:	3308      	adds	r3, #8
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 ff55 	bl	8005c1c <RCCEx_PLL2_Config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d78:	e00f      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d7e:	3328      	adds	r3, #40	@ 0x28
 8004d80:	2101      	movs	r1, #1
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fffc 	bl	8005d80 <RCCEx_PLL3_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d8e:	e004      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d96:	e000      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004da2:	4b96      	ldr	r3, [pc, #600]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da6:	f023 0107 	bic.w	r1, r3, #7
 8004daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db0:	4a92      	ldr	r2, [pc, #584]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004db2:	430b      	orrs	r3, r1
 8004db4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004db6:	e003      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f002 0304 	and.w	r3, r2, #4
 8004dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dd6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	d044      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de8:	2b05      	cmp	r3, #5
 8004dea:	d825      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004dec:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e41 	.word	0x08004e41
 8004df8:	08004e0d 	.word	0x08004e0d
 8004dfc:	08004e23 	.word	0x08004e23
 8004e00:	08004e41 	.word	0x08004e41
 8004e04:	08004e41 	.word	0x08004e41
 8004e08:	08004e41 	.word	0x08004e41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e10:	3308      	adds	r3, #8
 8004e12:	2101      	movs	r1, #1
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 ff01 	bl	8005c1c <RCCEx_PLL2_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e20:	e00f      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e26:	3328      	adds	r3, #40	@ 0x28
 8004e28:	2101      	movs	r1, #1
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 ffa8 	bl	8005d80 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e36:	e004      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e3e:	e000      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e4a:	4b6c      	ldr	r3, [pc, #432]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4e:	f023 0107 	bic.w	r1, r3, #7
 8004e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	4a68      	ldr	r2, [pc, #416]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e60:	e003      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f002 0320 	and.w	r3, r2, #32
 8004e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	d055      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e96:	d033      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e9c:	d82c      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea2:	d02f      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea8:	d826      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004eaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004eae:	d02b      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004eb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004eb4:	d820      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eba:	d012      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ec0:	d81a      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d022      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004ec6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eca:	d115      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fea1 	bl	8005c1c <RCCEx_PLL2_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ee0:	e015      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee6:	3328      	adds	r3, #40	@ 0x28
 8004ee8:	2102      	movs	r1, #2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 ff48 	bl	8005d80 <RCCEx_PLL3_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004efe:	e006      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f00:	bf00      	nop
 8004f02:	e004      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f04:	bf00      	nop
 8004f06:	e002      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f08:	bf00      	nop
 8004f0a:	e000      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f16:	4b39      	ldr	r3, [pc, #228]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f26:	4a35      	ldr	r2, [pc, #212]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f2c:	e003      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f46:	2300      	movs	r3, #0
 8004f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f4c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004f50:	460b      	mov	r3, r1
 8004f52:	4313      	orrs	r3, r2
 8004f54:	d058      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f62:	d033      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004f64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f68:	d82c      	bhi.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6e:	d02f      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f74:	d826      	bhi.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f7a:	d02b      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f80:	d820      	bhi.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f86:	d012      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f8c:	d81a      	bhi.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d022      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f96:	d115      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fe3b 	bl	8005c1c <RCCEx_PLL2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004fac:	e015      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb2:	3328      	adds	r3, #40	@ 0x28
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fee2 	bl	8005d80 <RCCEx_PLL3_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004fc2:	e00a      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fca:	e006      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004fcc:	bf00      	nop
 8004fce:	e004      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004fd0:	bf00      	nop
 8004fd2:	e002      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004fd4:	bf00      	nop
 8004fd6:	e000      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10e      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fe2:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ff2:	4a02      	ldr	r2, [pc, #8]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff8:	e006      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004ffa:	bf00      	nop
 8004ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005004:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005018:	2300      	movs	r3, #0
 800501a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800501e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005022:	460b      	mov	r3, r1
 8005024:	4313      	orrs	r3, r2
 8005026:	d055      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005030:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005034:	d033      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005036:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800503a:	d82c      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005040:	d02f      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005046:	d826      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005048:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800504c:	d02b      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800504e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005052:	d820      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005058:	d012      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800505a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800505e:	d81a      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d022      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005068:	d115      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506e:	3308      	adds	r3, #8
 8005070:	2100      	movs	r1, #0
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fdd2 	bl	8005c1c <RCCEx_PLL2_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800507e:	e015      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005084:	3328      	adds	r3, #40	@ 0x28
 8005086:	2102      	movs	r1, #2
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fe79 	bl	8005d80 <RCCEx_PLL3_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005094:	e00a      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800509c:	e006      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800509e:	bf00      	nop
 80050a0:	e004      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80050a2:	bf00      	nop
 80050a4:	e002      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80050aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050b4:	4ba0      	ldr	r3, [pc, #640]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80050bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050c4:	4a9c      	ldr	r2, [pc, #624]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050c6:	430b      	orrs	r3, r1
 80050c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ca:	e003      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f002 0308 	and.w	r3, r2, #8
 80050e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80050ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	d01e      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80050f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005100:	d10c      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005106:	3328      	adds	r3, #40	@ 0x28
 8005108:	2102      	movs	r1, #2
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fe38 	bl	8005d80 <RCCEx_PLL3_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800511c:	4b86      	ldr	r3, [pc, #536]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005120:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800512c:	4a82      	ldr	r2, [pc, #520]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800512e:	430b      	orrs	r3, r1
 8005130:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f002 0310 	and.w	r3, r2, #16
 800513e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005142:	2300      	movs	r3, #0
 8005144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005148:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800514c:	460b      	mov	r3, r1
 800514e:	4313      	orrs	r3, r2
 8005150:	d01e      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800515a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800515e:	d10c      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005164:	3328      	adds	r3, #40	@ 0x28
 8005166:	2102      	movs	r1, #2
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fe09 	bl	8005d80 <RCCEx_PLL3_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800517a:	4b6f      	ldr	r3, [pc, #444]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005186:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800518a:	4a6b      	ldr	r2, [pc, #428]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800518c:	430b      	orrs	r3, r1
 800518e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800519c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800519e:	2300      	movs	r3, #0
 80051a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80051a6:	460b      	mov	r3, r1
 80051a8:	4313      	orrs	r3, r2
 80051aa:	d03e      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051b8:	d022      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80051ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051be:	d81b      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c8:	d00b      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80051ca:	e015      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d0:	3308      	adds	r3, #8
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fd21 	bl	8005c1c <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051e0:	e00f      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e6:	3328      	adds	r3, #40	@ 0x28
 80051e8:	2102      	movs	r1, #2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fdc8 	bl	8005d80 <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051f6:	e004      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051fe:	e000      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005202:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800520a:	4b4b      	ldr	r3, [pc, #300]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800520c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005216:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800521a:	4a47      	ldr	r2, [pc, #284]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800521c:	430b      	orrs	r3, r1
 800521e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005220:	e003      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005222:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005226:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800522a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005236:	673b      	str	r3, [r7, #112]	@ 0x70
 8005238:	2300      	movs	r3, #0
 800523a:	677b      	str	r3, [r7, #116]	@ 0x74
 800523c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005240:	460b      	mov	r3, r1
 8005242:	4313      	orrs	r3, r2
 8005244:	d03b      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800524e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005252:	d01f      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005254:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005258:	d818      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800525a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800525e:	d003      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005264:	d007      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005266:	e011      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005268:	4b33      	ldr	r3, [pc, #204]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	4a32      	ldr	r2, [pc, #200]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800526e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005274:	e00f      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527a:	3328      	adds	r3, #40	@ 0x28
 800527c:	2101      	movs	r1, #1
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fd7e 	bl	8005d80 <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800528a:	e004      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10b      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800529e:	4b26      	ldr	r3, [pc, #152]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ae:	4a22      	ldr	r2, [pc, #136]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80052b4:	e003      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80052ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052cc:	2300      	movs	r3, #0
 80052ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80052d4:	460b      	mov	r3, r1
 80052d6:	4313      	orrs	r3, r2
 80052d8:	d034      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e8:	d007      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80052ea:	e011      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ec:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	4a11      	ldr	r2, [pc, #68]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052f8:	e00e      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fe:	3308      	adds	r3, #8
 8005300:	2102      	movs	r1, #2
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fc8a 	bl	8005c1c <RCCEx_PLL2_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800530e:	e003      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10d      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005324:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532e:	4a02      	ldr	r2, [pc, #8]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005330:	430b      	orrs	r3, r1
 8005332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005336:	bf00      	nop
 8005338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005350:	663b      	str	r3, [r7, #96]	@ 0x60
 8005352:	2300      	movs	r3, #0
 8005354:	667b      	str	r3, [r7, #100]	@ 0x64
 8005356:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800535a:	460b      	mov	r3, r1
 800535c:	4313      	orrs	r3, r2
 800535e:	d00c      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005364:	3328      	adds	r3, #40	@ 0x28
 8005366:	2102      	movs	r1, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fd09 	bl	8005d80 <RCCEx_PLL3_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800537a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005386:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005388:	2300      	movs	r3, #0
 800538a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800538c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005390:	460b      	mov	r3, r1
 8005392:	4313      	orrs	r3, r2
 8005394:	d036      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800539a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800539c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053a0:	d018      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80053a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053a6:	d811      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80053a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ac:	d014      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80053ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b2:	d80b      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d011      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80053b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053bc:	d106      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053be:	4bb7      	ldr	r3, [pc, #732]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	4ab6      	ldr	r2, [pc, #728]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80053ca:	e008      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053d2:	e004      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80053d4:	bf00      	nop
 80053d6:	e002      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80053d8:	bf00      	nop
 80053da:	e000      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80053dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053e6:	4bad      	ldr	r3, [pc, #692]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053f4:	4aa9      	ldr	r2, [pc, #676]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053f6:	430b      	orrs	r3, r1
 80053f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80053fa:	e003      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005400:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005410:	653b      	str	r3, [r7, #80]	@ 0x50
 8005412:	2300      	movs	r3, #0
 8005414:	657b      	str	r3, [r7, #84]	@ 0x54
 8005416:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005420:	4b9e      	ldr	r3, [pc, #632]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005424:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542e:	4a9b      	ldr	r2, [pc, #620]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005430:	430b      	orrs	r3, r1
 8005432:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005442:	2300      	movs	r3, #0
 8005444:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005446:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800544a:	460b      	mov	r3, r1
 800544c:	4313      	orrs	r3, r2
 800544e:	d009      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005450:	4b92      	ldr	r3, [pc, #584]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005454:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800545e:	4a8f      	ldr	r2, [pc, #572]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005460:	430b      	orrs	r3, r1
 8005462:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005470:	643b      	str	r3, [r7, #64]	@ 0x40
 8005472:	2300      	movs	r3, #0
 8005474:	647b      	str	r3, [r7, #68]	@ 0x44
 8005476:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800547a:	460b      	mov	r3, r1
 800547c:	4313      	orrs	r3, r2
 800547e:	d00e      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005480:	4b86      	ldr	r3, [pc, #536]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	4a85      	ldr	r2, [pc, #532]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005486:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800548a:	6113      	str	r3, [r2, #16]
 800548c:	4b83      	ldr	r3, [pc, #524]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800548e:	6919      	ldr	r1, [r3, #16]
 8005490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005498:	4a80      	ldr	r2, [pc, #512]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800549a:	430b      	orrs	r3, r1
 800549c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80054aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80054b4:	460b      	mov	r3, r1
 80054b6:	4313      	orrs	r3, r2
 80054b8:	d009      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054ba:	4b78      	ldr	r3, [pc, #480]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c8:	4a74      	ldr	r2, [pc, #464]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054ca:	430b      	orrs	r3, r1
 80054cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80054da:	633b      	str	r3, [r7, #48]	@ 0x30
 80054dc:	2300      	movs	r3, #0
 80054de:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80054e4:	460b      	mov	r3, r1
 80054e6:	4313      	orrs	r3, r2
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054ea:	4b6c      	ldr	r3, [pc, #432]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	4a68      	ldr	r2, [pc, #416]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	2100      	movs	r1, #0
 800550a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005512:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005516:	460b      	mov	r3, r1
 8005518:	4313      	orrs	r3, r2
 800551a:	d011      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005520:	3308      	adds	r3, #8
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fb79 	bl	8005c1c <RCCEx_PLL2_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800553c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	2100      	movs	r1, #0
 800554a:	6239      	str	r1, [r7, #32]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
 8005552:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005556:	460b      	mov	r3, r1
 8005558:	4313      	orrs	r3, r2
 800555a:	d011      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005560:	3308      	adds	r3, #8
 8005562:	2101      	movs	r1, #1
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fb59 	bl	8005c1c <RCCEx_PLL2_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800557c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	2100      	movs	r1, #0
 800558a:	61b9      	str	r1, [r7, #24]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005596:	460b      	mov	r3, r1
 8005598:	4313      	orrs	r3, r2
 800559a:	d011      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800559c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a0:	3308      	adds	r3, #8
 80055a2:	2102      	movs	r1, #2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fb39 	bl	8005c1c <RCCEx_PLL2_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80055b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80055c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	2100      	movs	r1, #0
 80055ca:	6139      	str	r1, [r7, #16]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d011      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e0:	3328      	adds	r3, #40	@ 0x28
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fbcb 	bl	8005d80 <RCCEx_PLL3_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80055f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	2100      	movs	r1, #0
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005616:	460b      	mov	r3, r1
 8005618:	4313      	orrs	r3, r2
 800561a:	d011      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005620:	3328      	adds	r3, #40	@ 0x28
 8005622:	2101      	movs	r1, #1
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fbab 	bl	8005d80 <RCCEx_PLL3_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800563c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	2100      	movs	r1, #0
 800564a:	6039      	str	r1, [r7, #0]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005656:	460b      	mov	r3, r1
 8005658:	4313      	orrs	r3, r2
 800565a:	d011      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	3328      	adds	r3, #40	@ 0x28
 8005662:	2102      	movs	r1, #2
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fb8b 	bl	8005d80 <RCCEx_PLL3_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800567c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005680:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	e000      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
}
 800568e:	4618      	mov	r0, r3
 8005690:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005694:	46bd      	mov	sp, r7
 8005696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800569a:	bf00      	nop
 800569c:	58024400 	.word	0x58024400

080056a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80056a4:	f7fe fe00 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4904      	ldr	r1, [pc, #16]	@ (80056c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	58024400 	.word	0x58024400
 80056c8:	0800b938 	.word	0x0800b938

080056cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b089      	sub	sp, #36	@ 0x24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056d4:	4ba1      	ldr	r3, [pc, #644]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80056de:	4b9f      	ldr	r3, [pc, #636]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	0b1b      	lsrs	r3, r3, #12
 80056e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80056ea:	4b9c      	ldr	r3, [pc, #624]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	091b      	lsrs	r3, r3, #4
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80056f6:	4b99      	ldr	r3, [pc, #612]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	08db      	lsrs	r3, r3, #3
 80056fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8111 	beq.w	800593c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b02      	cmp	r3, #2
 800571e:	f000 8083 	beq.w	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b02      	cmp	r3, #2
 8005726:	f200 80a1 	bhi.w	800586c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d056      	beq.n	80057e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005736:	e099      	b.n	800586c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005738:	4b88      	ldr	r3, [pc, #544]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d02d      	beq.n	80057a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005744:	4b85      	ldr	r3, [pc, #532]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	08db      	lsrs	r3, r3, #3
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	4a84      	ldr	r2, [pc, #528]	@ (8005960 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
 8005754:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576e:	4b7b      	ldr	r3, [pc, #492]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005782:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800579e:	e087      	b.n	80058b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b2:	4b6a      	ldr	r3, [pc, #424]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057e2:	e065      	b.n	80058b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800596c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f6:	4b59      	ldr	r3, [pc, #356]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005806:	ed97 6a03 	vldr	s12, [r7, #12]
 800580a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800580e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800581a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005826:	e043      	b.n	80058b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583a:	4b48      	ldr	r3, [pc, #288]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800583c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584a:	ed97 6a03 	vldr	s12, [r7, #12]
 800584e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800586a:	e021      	b.n	80058b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800596c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800587a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587e:	4b37      	ldr	r3, [pc, #220]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005892:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80058b0:	4b2a      	ldr	r3, [pc, #168]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	0a5b      	lsrs	r3, r3, #9
 80058b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d6:	ee17 2a90 	vmov	r2, s15
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80058de:	4b1f      	ldr	r3, [pc, #124]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005904:	ee17 2a90 	vmov	r2, s15
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800590c:	4b13      	ldr	r3, [pc, #76]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	0e1b      	lsrs	r3, r3, #24
 8005912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005926:	edd7 6a07 	vldr	s13, [r7, #28]
 800592a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800592e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005932:	ee17 2a90 	vmov	r2, s15
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800593a:	e008      	b.n	800594e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
}
 800594e:	bf00      	nop
 8005950:	3724      	adds	r7, #36	@ 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	58024400 	.word	0x58024400
 8005960:	03d09000 	.word	0x03d09000
 8005964:	46000000 	.word	0x46000000
 8005968:	4c742400 	.word	0x4c742400
 800596c:	4a742400 	.word	0x4a742400
 8005970:	4bbebc20 	.word	0x4bbebc20

08005974 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	@ 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800597c:	4ba1      	ldr	r3, [pc, #644]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005986:	4b9f      	ldr	r3, [pc, #636]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598a:	0d1b      	lsrs	r3, r3, #20
 800598c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005990:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005992:	4b9c      	ldr	r3, [pc, #624]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800599e:	4b99      	ldr	r3, [pc, #612]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 8111 	beq.w	8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f000 8083 	beq.w	8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	f200 80a1 	bhi.w	8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d056      	beq.n	8005a8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059de:	e099      	b.n	8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e0:	4b88      	ldr	r3, [pc, #544]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02d      	beq.n	8005a48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059ec:	4b85      	ldr	r3, [pc, #532]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	08db      	lsrs	r3, r3, #3
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	4a84      	ldr	r2, [pc, #528]	@ (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a16:	4b7b      	ldr	r3, [pc, #492]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a46:	e087      	b.n	8005b58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a8a:	e065      	b.n	8005b58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a9e:	4b59      	ldr	r3, [pc, #356]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ab2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ace:	e043      	b.n	8005b58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae2:	4b48      	ldr	r3, [pc, #288]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005af6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b12:	e021      	b.n	8005b58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b26:	4b37      	ldr	r3, [pc, #220]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005b58:	4b2a      	ldr	r3, [pc, #168]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5c:	0a5b      	lsrs	r3, r3, #9
 8005b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b7e:	ee17 2a90 	vmov	r2, s15
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005b86:	4b1f      	ldr	r3, [pc, #124]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	0c1b      	lsrs	r3, r3, #16
 8005b8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bac:	ee17 2a90 	vmov	r2, s15
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005bb4:	4b13      	ldr	r3, [pc, #76]	@ (8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb8:	0e1b      	lsrs	r3, r3, #24
 8005bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bda:	ee17 2a90 	vmov	r2, s15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005be2:	e008      	b.n	8005bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	609a      	str	r2, [r3, #8]
}
 8005bf6:	bf00      	nop
 8005bf8:	3724      	adds	r7, #36	@ 0x24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	58024400 	.word	0x58024400
 8005c08:	03d09000 	.word	0x03d09000
 8005c0c:	46000000 	.word	0x46000000
 8005c10:	4c742400 	.word	0x4c742400
 8005c14:	4a742400 	.word	0x4a742400
 8005c18:	4bbebc20 	.word	0x4bbebc20

08005c1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c2a:	4b53      	ldr	r3, [pc, #332]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d101      	bne.n	8005c3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e099      	b.n	8005d6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005c40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c46:	f7fb fdf3 	bl	8001830 <HAL_GetTick>
 8005c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c4c:	e008      	b.n	8005c60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c4e:	f7fb fdef 	bl	8001830 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e086      	b.n	8005d6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c60:	4b45      	ldr	r3, [pc, #276]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f0      	bne.n	8005c4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c6c:	4b42      	ldr	r3, [pc, #264]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	493f      	ldr	r1, [pc, #252]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	025b      	lsls	r3, r3, #9
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	041b      	lsls	r3, r3, #16
 8005c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	061b      	lsls	r3, r3, #24
 8005cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005cb0:	4931      	ldr	r1, [pc, #196]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cb6:	4b30      	ldr	r3, [pc, #192]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	492d      	ldr	r1, [pc, #180]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	f023 0220 	bic.w	r2, r3, #32
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	4928      	ldr	r1, [pc, #160]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005cda:	4b27      	ldr	r3, [pc, #156]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	4a26      	ldr	r2, [pc, #152]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005ce0:	f023 0310 	bic.w	r3, r3, #16
 8005ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ce6:	4b24      	ldr	r3, [pc, #144]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005ce8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cea:	4b24      	ldr	r3, [pc, #144]	@ (8005d7c <RCCEx_PLL2_Config+0x160>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	69d2      	ldr	r2, [r2, #28]
 8005cf2:	00d2      	lsls	r2, r2, #3
 8005cf4:	4920      	ldr	r1, [pc, #128]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d00:	f043 0310 	orr.w	r3, r3, #16
 8005d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	4a19      	ldr	r2, [pc, #100]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d18:	e00f      	b.n	8005d3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d106      	bne.n	8005d2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d20:	4b15      	ldr	r3, [pc, #84]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	4a14      	ldr	r2, [pc, #80]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d2c:	e005      	b.n	8005d3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d2e:	4b12      	ldr	r3, [pc, #72]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	4a11      	ldr	r2, [pc, #68]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d46:	f7fb fd73 	bl	8001830 <HAL_GetTick>
 8005d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d4c:	e008      	b.n	8005d60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d4e:	f7fb fd6f 	bl	8001830 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e006      	b.n	8005d6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d60:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <RCCEx_PLL2_Config+0x15c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	ffff0007 	.word	0xffff0007

08005d80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d8e:	4b53      	ldr	r3, [pc, #332]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d101      	bne.n	8005d9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e099      	b.n	8005ed2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4e      	ldr	r2, [pc, #312]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005daa:	f7fb fd41 	bl	8001830 <HAL_GetTick>
 8005dae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005db0:	e008      	b.n	8005dc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005db2:	f7fb fd3d 	bl	8001830 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e086      	b.n	8005ed2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dc4:	4b45      	ldr	r3, [pc, #276]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f0      	bne.n	8005db2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005dd0:	4b42      	ldr	r3, [pc, #264]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	051b      	lsls	r3, r3, #20
 8005dde:	493f      	ldr	r1, [pc, #252]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	025b      	lsls	r3, r3, #9
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	041b      	lsls	r3, r3, #16
 8005e02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	061b      	lsls	r3, r3, #24
 8005e10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e14:	4931      	ldr	r1, [pc, #196]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e1a:	4b30      	ldr	r3, [pc, #192]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	492d      	ldr	r1, [pc, #180]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	4928      	ldr	r1, [pc, #160]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e3e:	4b27      	ldr	r3, [pc, #156]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e42:	4a26      	ldr	r2, [pc, #152]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e4a:	4b24      	ldr	r3, [pc, #144]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e4e:	4b24      	ldr	r3, [pc, #144]	@ (8005ee0 <RCCEx_PLL3_Config+0x160>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	69d2      	ldr	r2, [r2, #28]
 8005e56:	00d2      	lsls	r2, r2, #3
 8005e58:	4920      	ldr	r1, [pc, #128]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e62:	4a1e      	ldr	r2, [pc, #120]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d106      	bne.n	8005e7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e70:	4b1a      	ldr	r3, [pc, #104]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	4a19      	ldr	r2, [pc, #100]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e7c:	e00f      	b.n	8005e9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d106      	bne.n	8005e92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e84:	4b15      	ldr	r3, [pc, #84]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e88:	4a14      	ldr	r2, [pc, #80]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e90:	e005      	b.n	8005e9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e92:	4b12      	ldr	r3, [pc, #72]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e96:	4a11      	ldr	r2, [pc, #68]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005e98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eaa:	f7fb fcc1 	bl	8001830 <HAL_GetTick>
 8005eae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005eb0:	e008      	b.n	8005ec4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005eb2:	f7fb fcbd 	bl	8001830 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e006      	b.n	8005ed2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ec4:	4b05      	ldr	r3, [pc, #20]	@ (8005edc <RCCEx_PLL3_Config+0x15c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f0      	beq.n	8005eb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	ffff0007 	.word	0xffff0007

08005ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e042      	b.n	8005f7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7fb fa5f 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2224      	movs	r2, #36	@ 0x24
 8005f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0201 	bic.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 ff22 	bl	8006d78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8b3 	bl	80060a0 <UART_SetConfig>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e01b      	b.n	8005f7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 ffa1 	bl	8006ebc <UART_CheckIdleState>
 8005f7a:	4603      	mov	r3, r0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	@ 0x28
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d17b      	bne.n	8006096 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <HAL_UART_Transmit+0x26>
 8005fa4:	88fb      	ldrh	r3, [r7, #6]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e074      	b.n	8006098 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2221      	movs	r2, #33	@ 0x21
 8005fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fbe:	f7fb fc37 	bl	8001830 <HAL_GetTick>
 8005fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fdc:	d108      	bne.n	8005ff0 <HAL_UART_Transmit+0x6c>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d104      	bne.n	8005ff0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	e003      	b.n	8005ff8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ff8:	e030      	b.n	800605c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2200      	movs	r2, #0
 8006002:	2180      	movs	r1, #128	@ 0x80
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f001 f803 	bl	8007010 <UART_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e03d      	b.n	8006098 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006030:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	3302      	adds	r3, #2
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	e007      	b.n	800604a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	3301      	adds	r3, #1
 8006048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1c8      	bne.n	8005ffa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	2140      	movs	r1, #64	@ 0x40
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 ffcc 	bl	8007010 <UART_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e006      	b.n	8006098 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2220      	movs	r2, #32
 800608e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	e000      	b.n	8006098 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006096:	2302      	movs	r3, #2
  }
}
 8006098:	4618      	mov	r0, r3
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a4:	b092      	sub	sp, #72	@ 0x48
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	431a      	orrs	r2, r3
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	431a      	orrs	r2, r3
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4bbe      	ldr	r3, [pc, #760]	@ (80063c8 <UART_SetConfig+0x328>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	6812      	ldr	r2, [r2, #0]
 80060d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060d8:	430b      	orrs	r3, r1
 80060da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4ab3      	ldr	r2, [pc, #716]	@ (80063cc <UART_SetConfig+0x32c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006108:	4313      	orrs	r3, r2
 800610a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	4baf      	ldr	r3, [pc, #700]	@ (80063d0 <UART_SetConfig+0x330>)
 8006114:	4013      	ands	r3, r2
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800611c:	430b      	orrs	r3, r1
 800611e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	f023 010f 	bic.w	r1, r3, #15
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4aa6      	ldr	r2, [pc, #664]	@ (80063d4 <UART_SetConfig+0x334>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d177      	bne.n	8006230 <UART_SetConfig+0x190>
 8006140:	4ba5      	ldr	r3, [pc, #660]	@ (80063d8 <UART_SetConfig+0x338>)
 8006142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006144:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006148:	2b28      	cmp	r3, #40	@ 0x28
 800614a:	d86d      	bhi.n	8006228 <UART_SetConfig+0x188>
 800614c:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <UART_SetConfig+0xb4>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	080061f9 	.word	0x080061f9
 8006158:	08006229 	.word	0x08006229
 800615c:	08006229 	.word	0x08006229
 8006160:	08006229 	.word	0x08006229
 8006164:	08006229 	.word	0x08006229
 8006168:	08006229 	.word	0x08006229
 800616c:	08006229 	.word	0x08006229
 8006170:	08006229 	.word	0x08006229
 8006174:	08006201 	.word	0x08006201
 8006178:	08006229 	.word	0x08006229
 800617c:	08006229 	.word	0x08006229
 8006180:	08006229 	.word	0x08006229
 8006184:	08006229 	.word	0x08006229
 8006188:	08006229 	.word	0x08006229
 800618c:	08006229 	.word	0x08006229
 8006190:	08006229 	.word	0x08006229
 8006194:	08006209 	.word	0x08006209
 8006198:	08006229 	.word	0x08006229
 800619c:	08006229 	.word	0x08006229
 80061a0:	08006229 	.word	0x08006229
 80061a4:	08006229 	.word	0x08006229
 80061a8:	08006229 	.word	0x08006229
 80061ac:	08006229 	.word	0x08006229
 80061b0:	08006229 	.word	0x08006229
 80061b4:	08006211 	.word	0x08006211
 80061b8:	08006229 	.word	0x08006229
 80061bc:	08006229 	.word	0x08006229
 80061c0:	08006229 	.word	0x08006229
 80061c4:	08006229 	.word	0x08006229
 80061c8:	08006229 	.word	0x08006229
 80061cc:	08006229 	.word	0x08006229
 80061d0:	08006229 	.word	0x08006229
 80061d4:	08006219 	.word	0x08006219
 80061d8:	08006229 	.word	0x08006229
 80061dc:	08006229 	.word	0x08006229
 80061e0:	08006229 	.word	0x08006229
 80061e4:	08006229 	.word	0x08006229
 80061e8:	08006229 	.word	0x08006229
 80061ec:	08006229 	.word	0x08006229
 80061f0:	08006229 	.word	0x08006229
 80061f4:	08006221 	.word	0x08006221
 80061f8:	2301      	movs	r3, #1
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e326      	b.n	800684e <UART_SetConfig+0x7ae>
 8006200:	2304      	movs	r3, #4
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e322      	b.n	800684e <UART_SetConfig+0x7ae>
 8006208:	2308      	movs	r3, #8
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e31e      	b.n	800684e <UART_SetConfig+0x7ae>
 8006210:	2310      	movs	r3, #16
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e31a      	b.n	800684e <UART_SetConfig+0x7ae>
 8006218:	2320      	movs	r3, #32
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e316      	b.n	800684e <UART_SetConfig+0x7ae>
 8006220:	2340      	movs	r3, #64	@ 0x40
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e312      	b.n	800684e <UART_SetConfig+0x7ae>
 8006228:	2380      	movs	r3, #128	@ 0x80
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e30e      	b.n	800684e <UART_SetConfig+0x7ae>
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a69      	ldr	r2, [pc, #420]	@ (80063dc <UART_SetConfig+0x33c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d130      	bne.n	800629c <UART_SetConfig+0x1fc>
 800623a:	4b67      	ldr	r3, [pc, #412]	@ (80063d8 <UART_SetConfig+0x338>)
 800623c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	2b05      	cmp	r3, #5
 8006244:	d826      	bhi.n	8006294 <UART_SetConfig+0x1f4>
 8006246:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <UART_SetConfig+0x1ac>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	08006265 	.word	0x08006265
 8006250:	0800626d 	.word	0x0800626d
 8006254:	08006275 	.word	0x08006275
 8006258:	0800627d 	.word	0x0800627d
 800625c:	08006285 	.word	0x08006285
 8006260:	0800628d 	.word	0x0800628d
 8006264:	2300      	movs	r3, #0
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e2f0      	b.n	800684e <UART_SetConfig+0x7ae>
 800626c:	2304      	movs	r3, #4
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e2ec      	b.n	800684e <UART_SetConfig+0x7ae>
 8006274:	2308      	movs	r3, #8
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e2e8      	b.n	800684e <UART_SetConfig+0x7ae>
 800627c:	2310      	movs	r3, #16
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006282:	e2e4      	b.n	800684e <UART_SetConfig+0x7ae>
 8006284:	2320      	movs	r3, #32
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628a:	e2e0      	b.n	800684e <UART_SetConfig+0x7ae>
 800628c:	2340      	movs	r3, #64	@ 0x40
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e2dc      	b.n	800684e <UART_SetConfig+0x7ae>
 8006294:	2380      	movs	r3, #128	@ 0x80
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e2d8      	b.n	800684e <UART_SetConfig+0x7ae>
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a4f      	ldr	r2, [pc, #316]	@ (80063e0 <UART_SetConfig+0x340>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d130      	bne.n	8006308 <UART_SetConfig+0x268>
 80062a6:	4b4c      	ldr	r3, [pc, #304]	@ (80063d8 <UART_SetConfig+0x338>)
 80062a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	d826      	bhi.n	8006300 <UART_SetConfig+0x260>
 80062b2:	a201      	add	r2, pc, #4	@ (adr r2, 80062b8 <UART_SetConfig+0x218>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062d1 	.word	0x080062d1
 80062bc:	080062d9 	.word	0x080062d9
 80062c0:	080062e1 	.word	0x080062e1
 80062c4:	080062e9 	.word	0x080062e9
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	080062f9 	.word	0x080062f9
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e2ba      	b.n	800684e <UART_SetConfig+0x7ae>
 80062d8:	2304      	movs	r3, #4
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062de:	e2b6      	b.n	800684e <UART_SetConfig+0x7ae>
 80062e0:	2308      	movs	r3, #8
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e6:	e2b2      	b.n	800684e <UART_SetConfig+0x7ae>
 80062e8:	2310      	movs	r3, #16
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ee:	e2ae      	b.n	800684e <UART_SetConfig+0x7ae>
 80062f0:	2320      	movs	r3, #32
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e2aa      	b.n	800684e <UART_SetConfig+0x7ae>
 80062f8:	2340      	movs	r3, #64	@ 0x40
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fe:	e2a6      	b.n	800684e <UART_SetConfig+0x7ae>
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006306:	e2a2      	b.n	800684e <UART_SetConfig+0x7ae>
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a35      	ldr	r2, [pc, #212]	@ (80063e4 <UART_SetConfig+0x344>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d130      	bne.n	8006374 <UART_SetConfig+0x2d4>
 8006312:	4b31      	ldr	r3, [pc, #196]	@ (80063d8 <UART_SetConfig+0x338>)
 8006314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	2b05      	cmp	r3, #5
 800631c:	d826      	bhi.n	800636c <UART_SetConfig+0x2cc>
 800631e:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <UART_SetConfig+0x284>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	0800633d 	.word	0x0800633d
 8006328:	08006345 	.word	0x08006345
 800632c:	0800634d 	.word	0x0800634d
 8006330:	08006355 	.word	0x08006355
 8006334:	0800635d 	.word	0x0800635d
 8006338:	08006365 	.word	0x08006365
 800633c:	2300      	movs	r3, #0
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e284      	b.n	800684e <UART_SetConfig+0x7ae>
 8006344:	2304      	movs	r3, #4
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634a:	e280      	b.n	800684e <UART_SetConfig+0x7ae>
 800634c:	2308      	movs	r3, #8
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006352:	e27c      	b.n	800684e <UART_SetConfig+0x7ae>
 8006354:	2310      	movs	r3, #16
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800635a:	e278      	b.n	800684e <UART_SetConfig+0x7ae>
 800635c:	2320      	movs	r3, #32
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006362:	e274      	b.n	800684e <UART_SetConfig+0x7ae>
 8006364:	2340      	movs	r3, #64	@ 0x40
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800636a:	e270      	b.n	800684e <UART_SetConfig+0x7ae>
 800636c:	2380      	movs	r3, #128	@ 0x80
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006372:	e26c      	b.n	800684e <UART_SetConfig+0x7ae>
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1b      	ldr	r2, [pc, #108]	@ (80063e8 <UART_SetConfig+0x348>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d142      	bne.n	8006404 <UART_SetConfig+0x364>
 800637e:	4b16      	ldr	r3, [pc, #88]	@ (80063d8 <UART_SetConfig+0x338>)
 8006380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	2b05      	cmp	r3, #5
 8006388:	d838      	bhi.n	80063fc <UART_SetConfig+0x35c>
 800638a:	a201      	add	r2, pc, #4	@ (adr r2, 8006390 <UART_SetConfig+0x2f0>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	080063a9 	.word	0x080063a9
 8006394:	080063b1 	.word	0x080063b1
 8006398:	080063b9 	.word	0x080063b9
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063ed 	.word	0x080063ed
 80063a4:	080063f5 	.word	0x080063f5
 80063a8:	2300      	movs	r3, #0
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ae:	e24e      	b.n	800684e <UART_SetConfig+0x7ae>
 80063b0:	2304      	movs	r3, #4
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b6:	e24a      	b.n	800684e <UART_SetConfig+0x7ae>
 80063b8:	2308      	movs	r3, #8
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063be:	e246      	b.n	800684e <UART_SetConfig+0x7ae>
 80063c0:	2310      	movs	r3, #16
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c6:	e242      	b.n	800684e <UART_SetConfig+0x7ae>
 80063c8:	cfff69f3 	.word	0xcfff69f3
 80063cc:	58000c00 	.word	0x58000c00
 80063d0:	11fff4ff 	.word	0x11fff4ff
 80063d4:	40011000 	.word	0x40011000
 80063d8:	58024400 	.word	0x58024400
 80063dc:	40004400 	.word	0x40004400
 80063e0:	40004800 	.word	0x40004800
 80063e4:	40004c00 	.word	0x40004c00
 80063e8:	40005000 	.word	0x40005000
 80063ec:	2320      	movs	r3, #32
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f2:	e22c      	b.n	800684e <UART_SetConfig+0x7ae>
 80063f4:	2340      	movs	r3, #64	@ 0x40
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fa:	e228      	b.n	800684e <UART_SetConfig+0x7ae>
 80063fc:	2380      	movs	r3, #128	@ 0x80
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006402:	e224      	b.n	800684e <UART_SetConfig+0x7ae>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4ab1      	ldr	r2, [pc, #708]	@ (80066d0 <UART_SetConfig+0x630>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d176      	bne.n	80064fc <UART_SetConfig+0x45c>
 800640e:	4bb1      	ldr	r3, [pc, #708]	@ (80066d4 <UART_SetConfig+0x634>)
 8006410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006412:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006416:	2b28      	cmp	r3, #40	@ 0x28
 8006418:	d86c      	bhi.n	80064f4 <UART_SetConfig+0x454>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <UART_SetConfig+0x380>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	080064c5 	.word	0x080064c5
 8006424:	080064f5 	.word	0x080064f5
 8006428:	080064f5 	.word	0x080064f5
 800642c:	080064f5 	.word	0x080064f5
 8006430:	080064f5 	.word	0x080064f5
 8006434:	080064f5 	.word	0x080064f5
 8006438:	080064f5 	.word	0x080064f5
 800643c:	080064f5 	.word	0x080064f5
 8006440:	080064cd 	.word	0x080064cd
 8006444:	080064f5 	.word	0x080064f5
 8006448:	080064f5 	.word	0x080064f5
 800644c:	080064f5 	.word	0x080064f5
 8006450:	080064f5 	.word	0x080064f5
 8006454:	080064f5 	.word	0x080064f5
 8006458:	080064f5 	.word	0x080064f5
 800645c:	080064f5 	.word	0x080064f5
 8006460:	080064d5 	.word	0x080064d5
 8006464:	080064f5 	.word	0x080064f5
 8006468:	080064f5 	.word	0x080064f5
 800646c:	080064f5 	.word	0x080064f5
 8006470:	080064f5 	.word	0x080064f5
 8006474:	080064f5 	.word	0x080064f5
 8006478:	080064f5 	.word	0x080064f5
 800647c:	080064f5 	.word	0x080064f5
 8006480:	080064dd 	.word	0x080064dd
 8006484:	080064f5 	.word	0x080064f5
 8006488:	080064f5 	.word	0x080064f5
 800648c:	080064f5 	.word	0x080064f5
 8006490:	080064f5 	.word	0x080064f5
 8006494:	080064f5 	.word	0x080064f5
 8006498:	080064f5 	.word	0x080064f5
 800649c:	080064f5 	.word	0x080064f5
 80064a0:	080064e5 	.word	0x080064e5
 80064a4:	080064f5 	.word	0x080064f5
 80064a8:	080064f5 	.word	0x080064f5
 80064ac:	080064f5 	.word	0x080064f5
 80064b0:	080064f5 	.word	0x080064f5
 80064b4:	080064f5 	.word	0x080064f5
 80064b8:	080064f5 	.word	0x080064f5
 80064bc:	080064f5 	.word	0x080064f5
 80064c0:	080064ed 	.word	0x080064ed
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ca:	e1c0      	b.n	800684e <UART_SetConfig+0x7ae>
 80064cc:	2304      	movs	r3, #4
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d2:	e1bc      	b.n	800684e <UART_SetConfig+0x7ae>
 80064d4:	2308      	movs	r3, #8
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e1b8      	b.n	800684e <UART_SetConfig+0x7ae>
 80064dc:	2310      	movs	r3, #16
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e1b4      	b.n	800684e <UART_SetConfig+0x7ae>
 80064e4:	2320      	movs	r3, #32
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e1b0      	b.n	800684e <UART_SetConfig+0x7ae>
 80064ec:	2340      	movs	r3, #64	@ 0x40
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e1ac      	b.n	800684e <UART_SetConfig+0x7ae>
 80064f4:	2380      	movs	r3, #128	@ 0x80
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e1a8      	b.n	800684e <UART_SetConfig+0x7ae>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a75      	ldr	r2, [pc, #468]	@ (80066d8 <UART_SetConfig+0x638>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d130      	bne.n	8006568 <UART_SetConfig+0x4c8>
 8006506:	4b73      	ldr	r3, [pc, #460]	@ (80066d4 <UART_SetConfig+0x634>)
 8006508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	2b05      	cmp	r3, #5
 8006510:	d826      	bhi.n	8006560 <UART_SetConfig+0x4c0>
 8006512:	a201      	add	r2, pc, #4	@ (adr r2, 8006518 <UART_SetConfig+0x478>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006531 	.word	0x08006531
 800651c:	08006539 	.word	0x08006539
 8006520:	08006541 	.word	0x08006541
 8006524:	08006549 	.word	0x08006549
 8006528:	08006551 	.word	0x08006551
 800652c:	08006559 	.word	0x08006559
 8006530:	2300      	movs	r3, #0
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006536:	e18a      	b.n	800684e <UART_SetConfig+0x7ae>
 8006538:	2304      	movs	r3, #4
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653e:	e186      	b.n	800684e <UART_SetConfig+0x7ae>
 8006540:	2308      	movs	r3, #8
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e182      	b.n	800684e <UART_SetConfig+0x7ae>
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e17e      	b.n	800684e <UART_SetConfig+0x7ae>
 8006550:	2320      	movs	r3, #32
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e17a      	b.n	800684e <UART_SetConfig+0x7ae>
 8006558:	2340      	movs	r3, #64	@ 0x40
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e176      	b.n	800684e <UART_SetConfig+0x7ae>
 8006560:	2380      	movs	r3, #128	@ 0x80
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e172      	b.n	800684e <UART_SetConfig+0x7ae>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a5b      	ldr	r2, [pc, #364]	@ (80066dc <UART_SetConfig+0x63c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d130      	bne.n	80065d4 <UART_SetConfig+0x534>
 8006572:	4b58      	ldr	r3, [pc, #352]	@ (80066d4 <UART_SetConfig+0x634>)
 8006574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	2b05      	cmp	r3, #5
 800657c:	d826      	bhi.n	80065cc <UART_SetConfig+0x52c>
 800657e:	a201      	add	r2, pc, #4	@ (adr r2, 8006584 <UART_SetConfig+0x4e4>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	0800659d 	.word	0x0800659d
 8006588:	080065a5 	.word	0x080065a5
 800658c:	080065ad 	.word	0x080065ad
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065c5 	.word	0x080065c5
 800659c:	2300      	movs	r3, #0
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a2:	e154      	b.n	800684e <UART_SetConfig+0x7ae>
 80065a4:	2304      	movs	r3, #4
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e150      	b.n	800684e <UART_SetConfig+0x7ae>
 80065ac:	2308      	movs	r3, #8
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e14c      	b.n	800684e <UART_SetConfig+0x7ae>
 80065b4:	2310      	movs	r3, #16
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e148      	b.n	800684e <UART_SetConfig+0x7ae>
 80065bc:	2320      	movs	r3, #32
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c2:	e144      	b.n	800684e <UART_SetConfig+0x7ae>
 80065c4:	2340      	movs	r3, #64	@ 0x40
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ca:	e140      	b.n	800684e <UART_SetConfig+0x7ae>
 80065cc:	2380      	movs	r3, #128	@ 0x80
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d2:	e13c      	b.n	800684e <UART_SetConfig+0x7ae>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a41      	ldr	r2, [pc, #260]	@ (80066e0 <UART_SetConfig+0x640>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	f040 8082 	bne.w	80066e4 <UART_SetConfig+0x644>
 80065e0:	4b3c      	ldr	r3, [pc, #240]	@ (80066d4 <UART_SetConfig+0x634>)
 80065e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065e8:	2b28      	cmp	r3, #40	@ 0x28
 80065ea:	d86d      	bhi.n	80066c8 <UART_SetConfig+0x628>
 80065ec:	a201      	add	r2, pc, #4	@ (adr r2, 80065f4 <UART_SetConfig+0x554>)
 80065ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f2:	bf00      	nop
 80065f4:	08006699 	.word	0x08006699
 80065f8:	080066c9 	.word	0x080066c9
 80065fc:	080066c9 	.word	0x080066c9
 8006600:	080066c9 	.word	0x080066c9
 8006604:	080066c9 	.word	0x080066c9
 8006608:	080066c9 	.word	0x080066c9
 800660c:	080066c9 	.word	0x080066c9
 8006610:	080066c9 	.word	0x080066c9
 8006614:	080066a1 	.word	0x080066a1
 8006618:	080066c9 	.word	0x080066c9
 800661c:	080066c9 	.word	0x080066c9
 8006620:	080066c9 	.word	0x080066c9
 8006624:	080066c9 	.word	0x080066c9
 8006628:	080066c9 	.word	0x080066c9
 800662c:	080066c9 	.word	0x080066c9
 8006630:	080066c9 	.word	0x080066c9
 8006634:	080066a9 	.word	0x080066a9
 8006638:	080066c9 	.word	0x080066c9
 800663c:	080066c9 	.word	0x080066c9
 8006640:	080066c9 	.word	0x080066c9
 8006644:	080066c9 	.word	0x080066c9
 8006648:	080066c9 	.word	0x080066c9
 800664c:	080066c9 	.word	0x080066c9
 8006650:	080066c9 	.word	0x080066c9
 8006654:	080066b1 	.word	0x080066b1
 8006658:	080066c9 	.word	0x080066c9
 800665c:	080066c9 	.word	0x080066c9
 8006660:	080066c9 	.word	0x080066c9
 8006664:	080066c9 	.word	0x080066c9
 8006668:	080066c9 	.word	0x080066c9
 800666c:	080066c9 	.word	0x080066c9
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066b9 	.word	0x080066b9
 8006678:	080066c9 	.word	0x080066c9
 800667c:	080066c9 	.word	0x080066c9
 8006680:	080066c9 	.word	0x080066c9
 8006684:	080066c9 	.word	0x080066c9
 8006688:	080066c9 	.word	0x080066c9
 800668c:	080066c9 	.word	0x080066c9
 8006690:	080066c9 	.word	0x080066c9
 8006694:	080066c1 	.word	0x080066c1
 8006698:	2301      	movs	r3, #1
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669e:	e0d6      	b.n	800684e <UART_SetConfig+0x7ae>
 80066a0:	2304      	movs	r3, #4
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a6:	e0d2      	b.n	800684e <UART_SetConfig+0x7ae>
 80066a8:	2308      	movs	r3, #8
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ae:	e0ce      	b.n	800684e <UART_SetConfig+0x7ae>
 80066b0:	2310      	movs	r3, #16
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b6:	e0ca      	b.n	800684e <UART_SetConfig+0x7ae>
 80066b8:	2320      	movs	r3, #32
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066be:	e0c6      	b.n	800684e <UART_SetConfig+0x7ae>
 80066c0:	2340      	movs	r3, #64	@ 0x40
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e0c2      	b.n	800684e <UART_SetConfig+0x7ae>
 80066c8:	2380      	movs	r3, #128	@ 0x80
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e0be      	b.n	800684e <UART_SetConfig+0x7ae>
 80066d0:	40011400 	.word	0x40011400
 80066d4:	58024400 	.word	0x58024400
 80066d8:	40007800 	.word	0x40007800
 80066dc:	40007c00 	.word	0x40007c00
 80066e0:	40011800 	.word	0x40011800
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4aad      	ldr	r2, [pc, #692]	@ (80069a0 <UART_SetConfig+0x900>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d176      	bne.n	80067dc <UART_SetConfig+0x73c>
 80066ee:	4bad      	ldr	r3, [pc, #692]	@ (80069a4 <UART_SetConfig+0x904>)
 80066f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066f6:	2b28      	cmp	r3, #40	@ 0x28
 80066f8:	d86c      	bhi.n	80067d4 <UART_SetConfig+0x734>
 80066fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006700 <UART_SetConfig+0x660>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	080067a5 	.word	0x080067a5
 8006704:	080067d5 	.word	0x080067d5
 8006708:	080067d5 	.word	0x080067d5
 800670c:	080067d5 	.word	0x080067d5
 8006710:	080067d5 	.word	0x080067d5
 8006714:	080067d5 	.word	0x080067d5
 8006718:	080067d5 	.word	0x080067d5
 800671c:	080067d5 	.word	0x080067d5
 8006720:	080067ad 	.word	0x080067ad
 8006724:	080067d5 	.word	0x080067d5
 8006728:	080067d5 	.word	0x080067d5
 800672c:	080067d5 	.word	0x080067d5
 8006730:	080067d5 	.word	0x080067d5
 8006734:	080067d5 	.word	0x080067d5
 8006738:	080067d5 	.word	0x080067d5
 800673c:	080067d5 	.word	0x080067d5
 8006740:	080067b5 	.word	0x080067b5
 8006744:	080067d5 	.word	0x080067d5
 8006748:	080067d5 	.word	0x080067d5
 800674c:	080067d5 	.word	0x080067d5
 8006750:	080067d5 	.word	0x080067d5
 8006754:	080067d5 	.word	0x080067d5
 8006758:	080067d5 	.word	0x080067d5
 800675c:	080067d5 	.word	0x080067d5
 8006760:	080067bd 	.word	0x080067bd
 8006764:	080067d5 	.word	0x080067d5
 8006768:	080067d5 	.word	0x080067d5
 800676c:	080067d5 	.word	0x080067d5
 8006770:	080067d5 	.word	0x080067d5
 8006774:	080067d5 	.word	0x080067d5
 8006778:	080067d5 	.word	0x080067d5
 800677c:	080067d5 	.word	0x080067d5
 8006780:	080067c5 	.word	0x080067c5
 8006784:	080067d5 	.word	0x080067d5
 8006788:	080067d5 	.word	0x080067d5
 800678c:	080067d5 	.word	0x080067d5
 8006790:	080067d5 	.word	0x080067d5
 8006794:	080067d5 	.word	0x080067d5
 8006798:	080067d5 	.word	0x080067d5
 800679c:	080067d5 	.word	0x080067d5
 80067a0:	080067cd 	.word	0x080067cd
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e050      	b.n	800684e <UART_SetConfig+0x7ae>
 80067ac:	2304      	movs	r3, #4
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b2:	e04c      	b.n	800684e <UART_SetConfig+0x7ae>
 80067b4:	2308      	movs	r3, #8
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e048      	b.n	800684e <UART_SetConfig+0x7ae>
 80067bc:	2310      	movs	r3, #16
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e044      	b.n	800684e <UART_SetConfig+0x7ae>
 80067c4:	2320      	movs	r3, #32
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e040      	b.n	800684e <UART_SetConfig+0x7ae>
 80067cc:	2340      	movs	r3, #64	@ 0x40
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d2:	e03c      	b.n	800684e <UART_SetConfig+0x7ae>
 80067d4:	2380      	movs	r3, #128	@ 0x80
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067da:	e038      	b.n	800684e <UART_SetConfig+0x7ae>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a71      	ldr	r2, [pc, #452]	@ (80069a8 <UART_SetConfig+0x908>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d130      	bne.n	8006848 <UART_SetConfig+0x7a8>
 80067e6:	4b6f      	ldr	r3, [pc, #444]	@ (80069a4 <UART_SetConfig+0x904>)
 80067e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	2b05      	cmp	r3, #5
 80067f0:	d826      	bhi.n	8006840 <UART_SetConfig+0x7a0>
 80067f2:	a201      	add	r2, pc, #4	@ (adr r2, 80067f8 <UART_SetConfig+0x758>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	08006811 	.word	0x08006811
 80067fc:	08006819 	.word	0x08006819
 8006800:	08006821 	.word	0x08006821
 8006804:	08006829 	.word	0x08006829
 8006808:	08006831 	.word	0x08006831
 800680c:	08006839 	.word	0x08006839
 8006810:	2302      	movs	r3, #2
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e01a      	b.n	800684e <UART_SetConfig+0x7ae>
 8006818:	2304      	movs	r3, #4
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681e:	e016      	b.n	800684e <UART_SetConfig+0x7ae>
 8006820:	2308      	movs	r3, #8
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006826:	e012      	b.n	800684e <UART_SetConfig+0x7ae>
 8006828:	2310      	movs	r3, #16
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682e:	e00e      	b.n	800684e <UART_SetConfig+0x7ae>
 8006830:	2320      	movs	r3, #32
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006836:	e00a      	b.n	800684e <UART_SetConfig+0x7ae>
 8006838:	2340      	movs	r3, #64	@ 0x40
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683e:	e006      	b.n	800684e <UART_SetConfig+0x7ae>
 8006840:	2380      	movs	r3, #128	@ 0x80
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006846:	e002      	b.n	800684e <UART_SetConfig+0x7ae>
 8006848:	2380      	movs	r3, #128	@ 0x80
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a55      	ldr	r2, [pc, #340]	@ (80069a8 <UART_SetConfig+0x908>)
 8006854:	4293      	cmp	r3, r2
 8006856:	f040 80f8 	bne.w	8006a4a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800685a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800685e:	2b20      	cmp	r3, #32
 8006860:	dc46      	bgt.n	80068f0 <UART_SetConfig+0x850>
 8006862:	2b02      	cmp	r3, #2
 8006864:	db75      	blt.n	8006952 <UART_SetConfig+0x8b2>
 8006866:	3b02      	subs	r3, #2
 8006868:	2b1e      	cmp	r3, #30
 800686a:	d872      	bhi.n	8006952 <UART_SetConfig+0x8b2>
 800686c:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <UART_SetConfig+0x7d4>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	080068f7 	.word	0x080068f7
 8006878:	08006953 	.word	0x08006953
 800687c:	080068ff 	.word	0x080068ff
 8006880:	08006953 	.word	0x08006953
 8006884:	08006953 	.word	0x08006953
 8006888:	08006953 	.word	0x08006953
 800688c:	0800690f 	.word	0x0800690f
 8006890:	08006953 	.word	0x08006953
 8006894:	08006953 	.word	0x08006953
 8006898:	08006953 	.word	0x08006953
 800689c:	08006953 	.word	0x08006953
 80068a0:	08006953 	.word	0x08006953
 80068a4:	08006953 	.word	0x08006953
 80068a8:	08006953 	.word	0x08006953
 80068ac:	0800691f 	.word	0x0800691f
 80068b0:	08006953 	.word	0x08006953
 80068b4:	08006953 	.word	0x08006953
 80068b8:	08006953 	.word	0x08006953
 80068bc:	08006953 	.word	0x08006953
 80068c0:	08006953 	.word	0x08006953
 80068c4:	08006953 	.word	0x08006953
 80068c8:	08006953 	.word	0x08006953
 80068cc:	08006953 	.word	0x08006953
 80068d0:	08006953 	.word	0x08006953
 80068d4:	08006953 	.word	0x08006953
 80068d8:	08006953 	.word	0x08006953
 80068dc:	08006953 	.word	0x08006953
 80068e0:	08006953 	.word	0x08006953
 80068e4:	08006953 	.word	0x08006953
 80068e8:	08006953 	.word	0x08006953
 80068ec:	08006945 	.word	0x08006945
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d02a      	beq.n	800694a <UART_SetConfig+0x8aa>
 80068f4:	e02d      	b.n	8006952 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068f6:	f7fe fed3 	bl	80056a0 <HAL_RCCEx_GetD3PCLK1Freq>
 80068fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068fc:	e02f      	b.n	800695e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fee2 	bl	80056cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690c:	e027      	b.n	800695e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800690e:	f107 0318 	add.w	r3, r7, #24
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff f82e 	bl	8005974 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800691c:	e01f      	b.n	800695e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800691e:	4b21      	ldr	r3, [pc, #132]	@ (80069a4 <UART_SetConfig+0x904>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d009      	beq.n	800693e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800692a:	4b1e      	ldr	r3, [pc, #120]	@ (80069a4 <UART_SetConfig+0x904>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	08db      	lsrs	r3, r3, #3
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	4a1d      	ldr	r2, [pc, #116]	@ (80069ac <UART_SetConfig+0x90c>)
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800693c:	e00f      	b.n	800695e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800693e:	4b1b      	ldr	r3, [pc, #108]	@ (80069ac <UART_SetConfig+0x90c>)
 8006940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006942:	e00c      	b.n	800695e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006944:	4b1a      	ldr	r3, [pc, #104]	@ (80069b0 <UART_SetConfig+0x910>)
 8006946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006948:	e009      	b.n	800695e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006950:	e005      	b.n	800695e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800695c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800695e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 81ee 	beq.w	8006d42 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696a:	4a12      	ldr	r2, [pc, #72]	@ (80069b4 <UART_SetConfig+0x914>)
 800696c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006970:	461a      	mov	r2, r3
 8006972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006974:	fbb3 f3f2 	udiv	r3, r3, r2
 8006978:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	4413      	add	r3, r2
 8006984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006986:	429a      	cmp	r2, r3
 8006988:	d305      	bcc.n	8006996 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006992:	429a      	cmp	r2, r3
 8006994:	d910      	bls.n	80069b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800699c:	e1d1      	b.n	8006d42 <UART_SetConfig+0xca2>
 800699e:	bf00      	nop
 80069a0:	40011c00 	.word	0x40011c00
 80069a4:	58024400 	.word	0x58024400
 80069a8:	58000c00 	.word	0x58000c00
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	003d0900 	.word	0x003d0900
 80069b4:	0800b948 	.word	0x0800b948
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ba:	2200      	movs	r2, #0
 80069bc:	60bb      	str	r3, [r7, #8]
 80069be:	60fa      	str	r2, [r7, #12]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	4ac0      	ldr	r2, [pc, #768]	@ (8006cc8 <UART_SetConfig+0xc28>)
 80069c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2200      	movs	r2, #0
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	607a      	str	r2, [r7, #4]
 80069d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069da:	f7f9 fcf1 	bl	80003c0 <__aeabi_uldivmod>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	020b      	lsls	r3, r1, #8
 80069f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069f4:	0202      	lsls	r2, r0, #8
 80069f6:	6979      	ldr	r1, [r7, #20]
 80069f8:	6849      	ldr	r1, [r1, #4]
 80069fa:	0849      	lsrs	r1, r1, #1
 80069fc:	2000      	movs	r0, #0
 80069fe:	460c      	mov	r4, r1
 8006a00:	4605      	mov	r5, r0
 8006a02:	eb12 0804 	adds.w	r8, r2, r4
 8006a06:	eb43 0905 	adc.w	r9, r3, r5
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	469a      	mov	sl, r3
 8006a12:	4693      	mov	fp, r2
 8006a14:	4652      	mov	r2, sl
 8006a16:	465b      	mov	r3, fp
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7f9 fcd0 	bl	80003c0 <__aeabi_uldivmod>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4613      	mov	r3, r2
 8006a26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a2e:	d308      	bcc.n	8006a42 <UART_SetConfig+0x9a2>
 8006a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a36:	d204      	bcs.n	8006a42 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a3e:	60da      	str	r2, [r3, #12]
 8006a40:	e17f      	b.n	8006d42 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a48:	e17b      	b.n	8006d42 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a52:	f040 80bd 	bne.w	8006bd0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006a56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	dc48      	bgt.n	8006af0 <UART_SetConfig+0xa50>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	db7b      	blt.n	8006b5a <UART_SetConfig+0xaba>
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d879      	bhi.n	8006b5a <UART_SetConfig+0xaba>
 8006a66:	a201      	add	r2, pc, #4	@ (adr r2, 8006a6c <UART_SetConfig+0x9cc>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006af7 	.word	0x08006af7
 8006a70:	08006aff 	.word	0x08006aff
 8006a74:	08006b5b 	.word	0x08006b5b
 8006a78:	08006b5b 	.word	0x08006b5b
 8006a7c:	08006b07 	.word	0x08006b07
 8006a80:	08006b5b 	.word	0x08006b5b
 8006a84:	08006b5b 	.word	0x08006b5b
 8006a88:	08006b5b 	.word	0x08006b5b
 8006a8c:	08006b17 	.word	0x08006b17
 8006a90:	08006b5b 	.word	0x08006b5b
 8006a94:	08006b5b 	.word	0x08006b5b
 8006a98:	08006b5b 	.word	0x08006b5b
 8006a9c:	08006b5b 	.word	0x08006b5b
 8006aa0:	08006b5b 	.word	0x08006b5b
 8006aa4:	08006b5b 	.word	0x08006b5b
 8006aa8:	08006b5b 	.word	0x08006b5b
 8006aac:	08006b27 	.word	0x08006b27
 8006ab0:	08006b5b 	.word	0x08006b5b
 8006ab4:	08006b5b 	.word	0x08006b5b
 8006ab8:	08006b5b 	.word	0x08006b5b
 8006abc:	08006b5b 	.word	0x08006b5b
 8006ac0:	08006b5b 	.word	0x08006b5b
 8006ac4:	08006b5b 	.word	0x08006b5b
 8006ac8:	08006b5b 	.word	0x08006b5b
 8006acc:	08006b5b 	.word	0x08006b5b
 8006ad0:	08006b5b 	.word	0x08006b5b
 8006ad4:	08006b5b 	.word	0x08006b5b
 8006ad8:	08006b5b 	.word	0x08006b5b
 8006adc:	08006b5b 	.word	0x08006b5b
 8006ae0:	08006b5b 	.word	0x08006b5b
 8006ae4:	08006b5b 	.word	0x08006b5b
 8006ae8:	08006b5b 	.word	0x08006b5b
 8006aec:	08006b4d 	.word	0x08006b4d
 8006af0:	2b40      	cmp	r3, #64	@ 0x40
 8006af2:	d02e      	beq.n	8006b52 <UART_SetConfig+0xab2>
 8006af4:	e031      	b.n	8006b5a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af6:	f7fd fc07 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8006afa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006afc:	e033      	b.n	8006b66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006afe:	f7fd fc19 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8006b02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b04:	e02f      	b.n	8006b66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe fdde 	bl	80056cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b14:	e027      	b.n	8006b66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b16:	f107 0318 	add.w	r3, r7, #24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe ff2a 	bl	8005974 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b24:	e01f      	b.n	8006b66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b26:	4b69      	ldr	r3, [pc, #420]	@ (8006ccc <UART_SetConfig+0xc2c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b32:	4b66      	ldr	r3, [pc, #408]	@ (8006ccc <UART_SetConfig+0xc2c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	08db      	lsrs	r3, r3, #3
 8006b38:	f003 0303 	and.w	r3, r3, #3
 8006b3c:	4a64      	ldr	r2, [pc, #400]	@ (8006cd0 <UART_SetConfig+0xc30>)
 8006b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b44:	e00f      	b.n	8006b66 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006b46:	4b62      	ldr	r3, [pc, #392]	@ (8006cd0 <UART_SetConfig+0xc30>)
 8006b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b4a:	e00c      	b.n	8006b66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b4c:	4b61      	ldr	r3, [pc, #388]	@ (8006cd4 <UART_SetConfig+0xc34>)
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b50:	e009      	b.n	8006b66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b58:	e005      	b.n	8006b66 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80ea 	beq.w	8006d42 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b72:	4a55      	ldr	r2, [pc, #340]	@ (8006cc8 <UART_SetConfig+0xc28>)
 8006b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b80:	005a      	lsls	r2, r3, #1
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	441a      	add	r2, r3
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d916      	bls.n	8006bc8 <UART_SetConfig+0xb28>
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba0:	d212      	bcs.n	8006bc8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f023 030f 	bic.w	r3, r3, #15
 8006baa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006bc4:	60da      	str	r2, [r3, #12]
 8006bc6:	e0bc      	b.n	8006d42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bce:	e0b8      	b.n	8006d42 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	dc4b      	bgt.n	8006c70 <UART_SetConfig+0xbd0>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f2c0 8087 	blt.w	8006cec <UART_SetConfig+0xc4c>
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f200 8084 	bhi.w	8006cec <UART_SetConfig+0xc4c>
 8006be4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bec <UART_SetConfig+0xb4c>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c77 	.word	0x08006c77
 8006bf0:	08006c7f 	.word	0x08006c7f
 8006bf4:	08006ced 	.word	0x08006ced
 8006bf8:	08006ced 	.word	0x08006ced
 8006bfc:	08006c87 	.word	0x08006c87
 8006c00:	08006ced 	.word	0x08006ced
 8006c04:	08006ced 	.word	0x08006ced
 8006c08:	08006ced 	.word	0x08006ced
 8006c0c:	08006c97 	.word	0x08006c97
 8006c10:	08006ced 	.word	0x08006ced
 8006c14:	08006ced 	.word	0x08006ced
 8006c18:	08006ced 	.word	0x08006ced
 8006c1c:	08006ced 	.word	0x08006ced
 8006c20:	08006ced 	.word	0x08006ced
 8006c24:	08006ced 	.word	0x08006ced
 8006c28:	08006ced 	.word	0x08006ced
 8006c2c:	08006ca7 	.word	0x08006ca7
 8006c30:	08006ced 	.word	0x08006ced
 8006c34:	08006ced 	.word	0x08006ced
 8006c38:	08006ced 	.word	0x08006ced
 8006c3c:	08006ced 	.word	0x08006ced
 8006c40:	08006ced 	.word	0x08006ced
 8006c44:	08006ced 	.word	0x08006ced
 8006c48:	08006ced 	.word	0x08006ced
 8006c4c:	08006ced 	.word	0x08006ced
 8006c50:	08006ced 	.word	0x08006ced
 8006c54:	08006ced 	.word	0x08006ced
 8006c58:	08006ced 	.word	0x08006ced
 8006c5c:	08006ced 	.word	0x08006ced
 8006c60:	08006ced 	.word	0x08006ced
 8006c64:	08006ced 	.word	0x08006ced
 8006c68:	08006ced 	.word	0x08006ced
 8006c6c:	08006cdf 	.word	0x08006cdf
 8006c70:	2b40      	cmp	r3, #64	@ 0x40
 8006c72:	d037      	beq.n	8006ce4 <UART_SetConfig+0xc44>
 8006c74:	e03a      	b.n	8006cec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c76:	f7fd fb47 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8006c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c7c:	e03c      	b.n	8006cf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c7e:	f7fd fb59 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8006c82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c84:	e038      	b.n	8006cf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fd1e 	bl	80056cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c94:	e030      	b.n	8006cf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c96:	f107 0318 	add.w	r3, r7, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fe6a 	bl	8005974 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca4:	e028      	b.n	8006cf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca6:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <UART_SetConfig+0xc2c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d012      	beq.n	8006cd8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cb2:	4b06      	ldr	r3, [pc, #24]	@ (8006ccc <UART_SetConfig+0xc2c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	08db      	lsrs	r3, r3, #3
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	4a04      	ldr	r2, [pc, #16]	@ (8006cd0 <UART_SetConfig+0xc30>)
 8006cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cc4:	e018      	b.n	8006cf8 <UART_SetConfig+0xc58>
 8006cc6:	bf00      	nop
 8006cc8:	0800b948 	.word	0x0800b948
 8006ccc:	58024400 	.word	0x58024400
 8006cd0:	03d09000 	.word	0x03d09000
 8006cd4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006cd8:	4b24      	ldr	r3, [pc, #144]	@ (8006d6c <UART_SetConfig+0xccc>)
 8006cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cdc:	e00c      	b.n	8006cf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cde:	4b24      	ldr	r3, [pc, #144]	@ (8006d70 <UART_SetConfig+0xcd0>)
 8006ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce2:	e009      	b.n	8006cf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cea:	e005      	b.n	8006cf8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006cf6:	bf00      	nop
    }

    if (pclk != 0U)
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d021      	beq.n	8006d42 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	4a1c      	ldr	r2, [pc, #112]	@ (8006d74 <UART_SetConfig+0xcd4>)
 8006d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	441a      	add	r2, r3
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d20:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	2b0f      	cmp	r3, #15
 8006d26:	d909      	bls.n	8006d3c <UART_SetConfig+0xc9c>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2e:	d205      	bcs.n	8006d3c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60da      	str	r2, [r3, #12]
 8006d3a:	e002      	b.n	8006d42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2200      	movs	r2, #0
 8006d56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d5e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3748      	adds	r7, #72	@ 0x48
 8006d66:	46bd      	mov	sp, r7
 8006d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d6c:	03d09000 	.word	0x03d09000
 8006d70:	003d0900 	.word	0x003d0900
 8006d74:	0800b948 	.word	0x0800b948

08006d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e76:	d10a      	bne.n	8006e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b098      	sub	sp, #96	@ 0x60
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ecc:	f7fa fcb0 	bl	8001830 <HAL_GetTick>
 8006ed0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d12f      	bne.n	8006f40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f88e 	bl	8007010 <UART_WaitOnFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d022      	beq.n	8006f40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	461a      	mov	r2, r3
 8006f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e6      	bne.n	8006efa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e063      	b.n	8007008 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d149      	bne.n	8006fe2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f56:	2200      	movs	r2, #0
 8006f58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f857 	bl	8007010 <UART_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d03c      	beq.n	8006fe2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	623b      	str	r3, [r7, #32]
   return(result);
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e6      	bne.n	8006f68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f023 0301 	bic.w	r3, r3, #1
 8006fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fba:	61fa      	str	r2, [r7, #28]
 8006fbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	69b9      	ldr	r1, [r7, #24]
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e5      	bne.n	8006f9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e012      	b.n	8007008 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3758      	adds	r7, #88	@ 0x58
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	4613      	mov	r3, r2
 800701e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007020:	e04f      	b.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007028:	d04b      	beq.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702a:	f7fa fc01 	bl	8001830 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	429a      	cmp	r2, r3
 8007038:	d302      	bcc.n	8007040 <UART_WaitOnFlagUntilTimeout+0x30>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e04e      	b.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d037      	beq.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b80      	cmp	r3, #128	@ 0x80
 8007056:	d034      	beq.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b40      	cmp	r3, #64	@ 0x40
 800705c:	d031      	beq.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b08      	cmp	r3, #8
 800706a:	d110      	bne.n	800708e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2208      	movs	r2, #8
 8007072:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 f839 	bl	80070ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2208      	movs	r2, #8
 800707e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e029      	b.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800709c:	d111      	bne.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f81f 	bl	80070ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e00f      	b.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4013      	ands	r3, r2
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	bf0c      	ite	eq
 80070d2:	2301      	moveq	r3, #1
 80070d4:	2300      	movne	r3, #0
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	461a      	mov	r2, r3
 80070da:	79fb      	ldrb	r3, [r7, #7]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d0a0      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b095      	sub	sp, #84	@ 0x54
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007112:	643b      	str	r3, [r7, #64]	@ 0x40
 8007114:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007118:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e6      	bne.n	80070f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	61fb      	str	r3, [r7, #28]
   return(result);
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	4b1e      	ldr	r3, [pc, #120]	@ (80071b4 <UART_EndRxTransfer+0xc8>)
 800713a:	4013      	ands	r3, r2
 800713c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3308      	adds	r3, #8
 8007144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007148:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800714c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e5      	bne.n	8007126 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800715e:	2b01      	cmp	r3, #1
 8007160:	d118      	bne.n	8007194 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f023 0310 	bic.w	r3, r3, #16
 8007176:	647b      	str	r3, [r7, #68]	@ 0x44
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6979      	ldr	r1, [r7, #20]
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	613b      	str	r3, [r7, #16]
   return(result);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e6      	bne.n	8007162 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071a8:	bf00      	nop
 80071aa:	3754      	adds	r7, #84	@ 0x54
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	effffffe 	.word	0xeffffffe

080071b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d101      	bne.n	80071ce <HAL_UARTEx_DisableFifoMode+0x16>
 80071ca:	2302      	movs	r3, #2
 80071cc:	e027      	b.n	800721e <HAL_UARTEx_DisableFifoMode+0x66>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2224      	movs	r2, #36	@ 0x24
 80071da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0201 	bic.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800723e:	2302      	movs	r3, #2
 8007240:	e02d      	b.n	800729e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2224      	movs	r2, #36	@ 0x24
 800724e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0201 	bic.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f850 	bl	8007324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072ba:	2302      	movs	r3, #2
 80072bc:	e02d      	b.n	800731a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2224      	movs	r2, #36	@ 0x24
 80072ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0201 	bic.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f812 	bl	8007324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007330:	2b00      	cmp	r3, #0
 8007332:	d108      	bne.n	8007346 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007344:	e031      	b.n	80073aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007346:	2310      	movs	r3, #16
 8007348:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800734a:	2310      	movs	r3, #16
 800734c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	0e5b      	lsrs	r3, r3, #25
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	0f5b      	lsrs	r3, r3, #29
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	7b3a      	ldrb	r2, [r7, #12]
 8007372:	4911      	ldr	r1, [pc, #68]	@ (80073b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007374:	5c8a      	ldrb	r2, [r1, r2]
 8007376:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800737a:	7b3a      	ldrb	r2, [r7, #12]
 800737c:	490f      	ldr	r1, [pc, #60]	@ (80073bc <UARTEx_SetNbDataToProcess+0x98>)
 800737e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007380:	fb93 f3f2 	sdiv	r3, r3, r2
 8007384:	b29a      	uxth	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	7b7a      	ldrb	r2, [r7, #13]
 8007390:	4909      	ldr	r1, [pc, #36]	@ (80073b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007392:	5c8a      	ldrb	r2, [r1, r2]
 8007394:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007398:	7b7a      	ldrb	r2, [r7, #13]
 800739a:	4908      	ldr	r1, [pc, #32]	@ (80073bc <UARTEx_SetNbDataToProcess+0x98>)
 800739c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800739e:	fb93 f3f2 	sdiv	r3, r3, r2
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	0800b960 	.word	0x0800b960
 80073bc:	0800b968 	.word	0x0800b968

080073c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073c0:	b084      	sub	sp, #16
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	f107 001c 	add.w	r0, r7, #28
 80073ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d121      	bne.n	800741e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	4b2c      	ldr	r3, [pc, #176]	@ (800749c <USB_CoreInit+0xdc>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007402:	2b01      	cmp	r3, #1
 8007404:	d105      	bne.n	8007412 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fafa 	bl	8008a0c <USB_CoreReset>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]
 800741c:	e01b      	b.n	8007456 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 faee 	bl	8008a0c <USB_CoreReset>
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007434:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007440:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	639a      	str	r2, [r3, #56]	@ 0x38
 8007448:	e005      	b.n	8007456 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007456:	7fbb      	ldrb	r3, [r7, #30]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d116      	bne.n	800748a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007460:	b29a      	uxth	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800746a:	4b0d      	ldr	r3, [pc, #52]	@ (80074a0 <USB_CoreInit+0xe0>)
 800746c:	4313      	orrs	r3, r2
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f043 0206 	orr.w	r2, r3, #6
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f043 0220 	orr.w	r2, r3, #32
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007496:	b004      	add	sp, #16
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	ffbdffbf 	.word	0xffbdffbf
 80074a0:	03ee0000 	.word	0x03ee0000

080074a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	4613      	mov	r3, r2
 80074b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d165      	bne.n	8007584 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4a41      	ldr	r2, [pc, #260]	@ (80075c0 <USB_SetTurnaroundTime+0x11c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d906      	bls.n	80074ce <USB_SetTurnaroundTime+0x2a>
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4a40      	ldr	r2, [pc, #256]	@ (80075c4 <USB_SetTurnaroundTime+0x120>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d202      	bcs.n	80074ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80074c8:	230f      	movs	r3, #15
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	e062      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	4a3c      	ldr	r2, [pc, #240]	@ (80075c4 <USB_SetTurnaroundTime+0x120>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d306      	bcc.n	80074e4 <USB_SetTurnaroundTime+0x40>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	4a3b      	ldr	r2, [pc, #236]	@ (80075c8 <USB_SetTurnaroundTime+0x124>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d202      	bcs.n	80074e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80074de:	230e      	movs	r3, #14
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e057      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4a38      	ldr	r2, [pc, #224]	@ (80075c8 <USB_SetTurnaroundTime+0x124>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d306      	bcc.n	80074fa <USB_SetTurnaroundTime+0x56>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	4a37      	ldr	r2, [pc, #220]	@ (80075cc <USB_SetTurnaroundTime+0x128>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d202      	bcs.n	80074fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80074f4:	230d      	movs	r3, #13
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	e04c      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	4a33      	ldr	r2, [pc, #204]	@ (80075cc <USB_SetTurnaroundTime+0x128>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d306      	bcc.n	8007510 <USB_SetTurnaroundTime+0x6c>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	4a32      	ldr	r2, [pc, #200]	@ (80075d0 <USB_SetTurnaroundTime+0x12c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d802      	bhi.n	8007510 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800750a:	230c      	movs	r3, #12
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	e041      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4a2f      	ldr	r2, [pc, #188]	@ (80075d0 <USB_SetTurnaroundTime+0x12c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d906      	bls.n	8007526 <USB_SetTurnaroundTime+0x82>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4a2e      	ldr	r2, [pc, #184]	@ (80075d4 <USB_SetTurnaroundTime+0x130>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d802      	bhi.n	8007526 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007520:	230b      	movs	r3, #11
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e036      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4a2a      	ldr	r2, [pc, #168]	@ (80075d4 <USB_SetTurnaroundTime+0x130>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d906      	bls.n	800753c <USB_SetTurnaroundTime+0x98>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4a29      	ldr	r2, [pc, #164]	@ (80075d8 <USB_SetTurnaroundTime+0x134>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d802      	bhi.n	800753c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007536:	230a      	movs	r3, #10
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e02b      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	4a26      	ldr	r2, [pc, #152]	@ (80075d8 <USB_SetTurnaroundTime+0x134>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d906      	bls.n	8007552 <USB_SetTurnaroundTime+0xae>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4a25      	ldr	r2, [pc, #148]	@ (80075dc <USB_SetTurnaroundTime+0x138>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d202      	bcs.n	8007552 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800754c:	2309      	movs	r3, #9
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	e020      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	4a21      	ldr	r2, [pc, #132]	@ (80075dc <USB_SetTurnaroundTime+0x138>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d306      	bcc.n	8007568 <USB_SetTurnaroundTime+0xc4>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	4a20      	ldr	r2, [pc, #128]	@ (80075e0 <USB_SetTurnaroundTime+0x13c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d802      	bhi.n	8007568 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007562:	2308      	movs	r3, #8
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	e015      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4a1d      	ldr	r2, [pc, #116]	@ (80075e0 <USB_SetTurnaroundTime+0x13c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d906      	bls.n	800757e <USB_SetTurnaroundTime+0xda>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4a1c      	ldr	r2, [pc, #112]	@ (80075e4 <USB_SetTurnaroundTime+0x140>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d202      	bcs.n	800757e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007578:	2307      	movs	r3, #7
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	e00a      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800757e:	2306      	movs	r3, #6
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e007      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800758a:	2309      	movs	r3, #9
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e001      	b.n	8007594 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007590:	2309      	movs	r3, #9
 8007592:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	029b      	lsls	r3, r3, #10
 80075a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80075ac:	431a      	orrs	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	00d8acbf 	.word	0x00d8acbf
 80075c4:	00e4e1c0 	.word	0x00e4e1c0
 80075c8:	00f42400 	.word	0x00f42400
 80075cc:	01067380 	.word	0x01067380
 80075d0:	011a499f 	.word	0x011a499f
 80075d4:	01312cff 	.word	0x01312cff
 80075d8:	014ca43f 	.word	0x014ca43f
 80075dc:	016e3600 	.word	0x016e3600
 80075e0:	01a6ab1f 	.word	0x01a6ab1f
 80075e4:	01e84800 	.word	0x01e84800

080075e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f043 0201 	orr.w	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f023 0201 	bic.w	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007648:	78fb      	ldrb	r3, [r7, #3]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d115      	bne.n	800767a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800765a:	200a      	movs	r0, #10
 800765c:	f7fa f8f4 	bl	8001848 <HAL_Delay>
      ms += 10U;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	330a      	adds	r3, #10
 8007664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 f93f 	bl	80088ea <USB_GetMode>
 800766c:	4603      	mov	r3, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	d01e      	beq.n	80076b0 <USB_SetCurrentMode+0x84>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2bc7      	cmp	r3, #199	@ 0xc7
 8007676:	d9f0      	bls.n	800765a <USB_SetCurrentMode+0x2e>
 8007678:	e01a      	b.n	80076b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d115      	bne.n	80076ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800768c:	200a      	movs	r0, #10
 800768e:	f7fa f8db 	bl	8001848 <HAL_Delay>
      ms += 10U;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	330a      	adds	r3, #10
 8007696:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 f926 	bl	80088ea <USB_GetMode>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <USB_SetCurrentMode+0x84>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80076a8:	d9f0      	bls.n	800768c <USB_SetCurrentMode+0x60>
 80076aa:	e001      	b.n	80076b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e005      	b.n	80076bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80076b4:	d101      	bne.n	80076ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e000      	b.n	80076bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076c4:	b084      	sub	sp, #16
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b086      	sub	sp, #24
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	e009      	b.n	80076f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	3340      	adds	r3, #64	@ 0x40
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	2200      	movs	r2, #0
 80076f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	3301      	adds	r3, #1
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b0e      	cmp	r3, #14
 80076fc:	d9f2      	bls.n	80076e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007702:	2b00      	cmp	r3, #0
 8007704:	d11c      	bne.n	8007740 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007714:	f043 0302 	orr.w	r3, r3, #2
 8007718:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	e005      	b.n	800774c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007744:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007752:	461a      	mov	r2, r3
 8007754:	2300      	movs	r3, #0
 8007756:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007758:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800775c:	2b01      	cmp	r3, #1
 800775e:	d10d      	bne.n	800777c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007768:	2100      	movs	r1, #0
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f968 	bl	8007a40 <USB_SetDevSpeed>
 8007770:	e008      	b.n	8007784 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007772:	2101      	movs	r1, #1
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f963 	bl	8007a40 <USB_SetDevSpeed>
 800777a:	e003      	b.n	8007784 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800777c:	2103      	movs	r1, #3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f95e 	bl	8007a40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007784:	2110      	movs	r1, #16
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f8fa 	bl	8007980 <USB_FlushTxFifo>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f924 	bl	80079e4 <USB_FlushRxFifo>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ac:	461a      	mov	r2, r3
 80077ae:	2300      	movs	r3, #0
 80077b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b8:	461a      	mov	r2, r3
 80077ba:	2300      	movs	r3, #0
 80077bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c4:	461a      	mov	r2, r3
 80077c6:	2300      	movs	r3, #0
 80077c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	e043      	b.n	8007858 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077e6:	d118      	bne.n	800781a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fa:	461a      	mov	r2, r3
 80077fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e013      	b.n	800782c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007810:	461a      	mov	r2, r3
 8007812:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	e008      	b.n	800782c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007826:	461a      	mov	r2, r3
 8007828:	2300      	movs	r3, #0
 800782a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007838:	461a      	mov	r2, r3
 800783a:	2300      	movs	r3, #0
 800783c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800784a:	461a      	mov	r2, r3
 800784c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007850:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	3301      	adds	r3, #1
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800785c:	461a      	mov	r2, r3
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4293      	cmp	r3, r2
 8007862:	d3b5      	bcc.n	80077d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007864:	2300      	movs	r3, #0
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	e043      	b.n	80078f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800787c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007880:	d118      	bne.n	80078b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007894:	461a      	mov	r2, r3
 8007896:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	e013      	b.n	80078c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078aa:	461a      	mov	r2, r3
 80078ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	e008      	b.n	80078c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c0:	461a      	mov	r2, r3
 80078c2:	2300      	movs	r3, #0
 80078c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d2:	461a      	mov	r2, r3
 80078d4:	2300      	movs	r3, #0
 80078d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e4:	461a      	mov	r2, r3
 80078e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3301      	adds	r3, #1
 80078f0:	613b      	str	r3, [r7, #16]
 80078f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80078f6:	461a      	mov	r2, r3
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d3b5      	bcc.n	800786a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800790c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007910:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800791e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007920:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f043 0210 	orr.w	r2, r3, #16
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699a      	ldr	r2, [r3, #24]
 8007938:	4b0f      	ldr	r3, [pc, #60]	@ (8007978 <USB_DevInit+0x2b4>)
 800793a:	4313      	orrs	r3, r2
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007940:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	f043 0208 	orr.w	r2, r3, #8
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007954:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007958:	2b01      	cmp	r3, #1
 800795a:	d105      	bne.n	8007968 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699a      	ldr	r2, [r3, #24]
 8007960:	4b06      	ldr	r3, [pc, #24]	@ (800797c <USB_DevInit+0x2b8>)
 8007962:	4313      	orrs	r3, r2
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007974:	b004      	add	sp, #16
 8007976:	4770      	bx	lr
 8007978:	803c3800 	.word	0x803c3800
 800797c:	40000004 	.word	0x40000004

08007980 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800799a:	d901      	bls.n	80079a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e01b      	b.n	80079d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	daf2      	bge.n	800798e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	019b      	lsls	r3, r3, #6
 80079b0:	f043 0220 	orr.w	r2, r3, #32
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079c4:	d901      	bls.n	80079ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e006      	b.n	80079d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d0f0      	beq.n	80079b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079fc:	d901      	bls.n	8007a02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e018      	b.n	8007a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	daf2      	bge.n	80079f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2210      	movs	r2, #16
 8007a12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3301      	adds	r3, #1
 8007a18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a20:	d901      	bls.n	8007a26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e006      	b.n	8007a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f003 0310 	and.w	r3, r3, #16
 8007a2e:	2b10      	cmp	r3, #16
 8007a30:	d0f0      	beq.n	8007a14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a60:	4313      	orrs	r3, r2
 8007a62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b087      	sub	sp, #28
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 0306 	and.w	r3, r3, #6
 8007a8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a92:	2300      	movs	r3, #0
 8007a94:	75fb      	strb	r3, [r7, #23]
 8007a96:	e00a      	b.n	8007aae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d002      	beq.n	8007aa4 <USB_GetDevSpeed+0x32>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b06      	cmp	r3, #6
 8007aa2:	d102      	bne.n	8007aaa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	75fb      	strb	r3, [r7, #23]
 8007aa8:	e001      	b.n	8007aae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007aaa:	230f      	movs	r3, #15
 8007aac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d139      	bne.n	8007b4c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 030f 	and.w	r3, r3, #15
 8007ae8:	2101      	movs	r1, #1
 8007aea:	fa01 f303 	lsl.w	r3, r1, r3
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	68f9      	ldr	r1, [r7, #12]
 8007af2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007af6:	4313      	orrs	r3, r2
 8007af8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d153      	bne.n	8007bb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	791b      	ldrb	r3, [r3, #4]
 8007b2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	059b      	lsls	r3, r3, #22
 8007b32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	0159      	lsls	r1, r3, #5
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	440b      	add	r3, r1
 8007b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b42:	4619      	mov	r1, r3
 8007b44:	4b20      	ldr	r3, [pc, #128]	@ (8007bc8 <USB_ActivateEndpoint+0x10c>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	600b      	str	r3, [r1, #0]
 8007b4a:	e035      	b.n	8007bb8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	f003 030f 	and.w	r3, r3, #15
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b62:	041b      	lsls	r3, r3, #16
 8007b64:	68f9      	ldr	r1, [r7, #12]
 8007b66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d119      	bne.n	8007bb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	791b      	ldrb	r3, [r3, #4]
 8007b9e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	0159      	lsls	r1, r3, #5
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	440b      	add	r3, r1
 8007bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4b05      	ldr	r3, [pc, #20]	@ (8007bc8 <USB_ActivateEndpoint+0x10c>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	10008000 	.word	0x10008000

08007bcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	785b      	ldrb	r3, [r3, #1]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d161      	bne.n	8007cac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bfe:	d11f      	bne.n	8007c40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	0151      	lsls	r1, r2, #5
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	440a      	add	r2, r1
 8007c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	2101      	movs	r1, #1
 8007c52:	fa01 f303 	lsl.w	r3, r1, r3
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	43db      	mvns	r3, r3
 8007c5a:	68f9      	ldr	r1, [r7, #12]
 8007c5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c60:	4013      	ands	r3, r2
 8007c62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c6a:	69da      	ldr	r2, [r3, #28]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	f003 030f 	and.w	r3, r3, #15
 8007c74:	2101      	movs	r1, #1
 8007c76:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	43db      	mvns	r3, r3
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c84:	4013      	ands	r3, r2
 8007c86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	0159      	lsls	r1, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	440b      	add	r3, r1
 8007c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4b35      	ldr	r3, [pc, #212]	@ (8007d7c <USB_DeactivateEndpoint+0x1b0>)
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	600b      	str	r3, [r1, #0]
 8007caa:	e060      	b.n	8007d6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cc2:	d11f      	bne.n	8007d04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	0151      	lsls	r1, r2, #5
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	440a      	add	r2, r1
 8007cda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ce2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	0151      	lsls	r1, r2, #5
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	440a      	add	r2, r1
 8007cfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f003 030f 	and.w	r3, r3, #15
 8007d14:	2101      	movs	r1, #1
 8007d16:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1a:	041b      	lsls	r3, r3, #16
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	68f9      	ldr	r1, [r7, #12]
 8007d20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d24:	4013      	ands	r3, r2
 8007d26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2e:	69da      	ldr	r2, [r3, #28]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	2101      	movs	r1, #1
 8007d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3e:	041b      	lsls	r3, r3, #16
 8007d40:	43db      	mvns	r3, r3
 8007d42:	68f9      	ldr	r1, [r7, #12]
 8007d44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d48:	4013      	ands	r3, r2
 8007d4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	0159      	lsls	r1, r3, #5
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	440b      	add	r3, r1
 8007d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d66:	4619      	mov	r1, r3
 8007d68:	4b05      	ldr	r3, [pc, #20]	@ (8007d80 <USB_DeactivateEndpoint+0x1b4>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	ec337800 	.word	0xec337800
 8007d80:	eff37800 	.word	0xeff37800

08007d84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08a      	sub	sp, #40	@ 0x28
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	f040 8185 	bne.w	80080b0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d132      	bne.n	8007e14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dba:	691a      	ldr	r2, [r3, #16]
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	0159      	lsls	r1, r3, #5
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	440b      	add	r3, r1
 8007dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4ba7      	ldr	r3, [pc, #668]	@ (8008068 <USB_EPStartXfer+0x2e4>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dfc:	691a      	ldr	r2, [r3, #16]
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	0159      	lsls	r1, r3, #5
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	440b      	add	r3, r1
 8007e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4b97      	ldr	r3, [pc, #604]	@ (800806c <USB_EPStartXfer+0x2e8>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	610b      	str	r3, [r1, #16]
 8007e12:	e097      	b.n	8007f44 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	0159      	lsls	r1, r3, #5
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	440b      	add	r3, r1
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4b8e      	ldr	r3, [pc, #568]	@ (800806c <USB_EPStartXfer+0x2e8>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	0159      	lsls	r1, r3, #5
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	440b      	add	r3, r1
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e50:	4619      	mov	r1, r3
 8007e52:	4b85      	ldr	r3, [pc, #532]	@ (8008068 <USB_EPStartXfer+0x2e4>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d11a      	bne.n	8007e94 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d903      	bls.n	8007e72 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	0151      	lsls	r1, r2, #5
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	440a      	add	r2, r1
 8007e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e90:	6113      	str	r3, [r2, #16]
 8007e92:	e044      	b.n	8007f1e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	1e5a      	subs	r2, r3, #1
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	8afb      	ldrh	r3, [r7, #22]
 8007eba:	04d9      	lsls	r1, r3, #19
 8007ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8008070 <USB_EPStartXfer+0x2ec>)
 8007ebe:	400b      	ands	r3, r1
 8007ec0:	69b9      	ldr	r1, [r7, #24]
 8007ec2:	0148      	lsls	r0, r1, #5
 8007ec4:	69f9      	ldr	r1, [r7, #28]
 8007ec6:	4401      	add	r1, r0
 8007ec8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d122      	bne.n	8007f1e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	0151      	lsls	r1, r2, #5
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	440a      	add	r2, r1
 8007eee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ef2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007ef6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	8afb      	ldrh	r3, [r7, #22]
 8007f08:	075b      	lsls	r3, r3, #29
 8007f0a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007f0e:	69b9      	ldr	r1, [r7, #24]
 8007f10:	0148      	lsls	r0, r1, #5
 8007f12:	69f9      	ldr	r1, [r7, #28]
 8007f14:	4401      	add	r1, r0
 8007f16:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f34:	69b9      	ldr	r1, [r7, #24]
 8007f36:	0148      	lsls	r0, r1, #5
 8007f38:	69f9      	ldr	r1, [r7, #28]
 8007f3a:	4401      	add	r1, r0
 8007f3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f40:	4313      	orrs	r3, r2
 8007f42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d14b      	bne.n	8007fe2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d009      	beq.n	8007f66 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	791b      	ldrb	r3, [r3, #4]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d128      	bne.n	8007fc0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d110      	bne.n	8007fa0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	e00f      	b.n	8007fc0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	0151      	lsls	r1, r2, #5
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	440a      	add	r2, r1
 8007fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fbe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fda:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	e169      	b.n	80082b6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	0151      	lsls	r1, r2, #5
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	440a      	add	r2, r1
 8007ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ffc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008000:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	791b      	ldrb	r3, [r3, #4]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d015      	beq.n	8008036 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8151 	beq.w	80082b6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800801a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	f003 030f 	and.w	r3, r3, #15
 8008024:	2101      	movs	r1, #1
 8008026:	fa01 f303 	lsl.w	r3, r1, r3
 800802a:	69f9      	ldr	r1, [r7, #28]
 800802c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008030:	4313      	orrs	r3, r2
 8008032:	634b      	str	r3, [r1, #52]	@ 0x34
 8008034:	e13f      	b.n	80082b6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008042:	2b00      	cmp	r3, #0
 8008044:	d116      	bne.n	8008074 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	0151      	lsls	r1, r2, #5
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	440a      	add	r2, r1
 800805c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008060:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	e015      	b.n	8008094 <USB_EPStartXfer+0x310>
 8008068:	e007ffff 	.word	0xe007ffff
 800806c:	fff80000 	.word	0xfff80000
 8008070:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	0151      	lsls	r1, r2, #5
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	440a      	add	r2, r1
 800808a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800808e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008092:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	68d9      	ldr	r1, [r3, #12]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	781a      	ldrb	r2, [r3, #0]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	b298      	uxth	r0, r3
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	4603      	mov	r3, r0
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 f9b9 	bl	8008420 <USB_WritePacket>
 80080ae:	e102      	b.n	80082b6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080bc:	691a      	ldr	r2, [r3, #16]
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	0159      	lsls	r1, r3, #5
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	440b      	add	r3, r1
 80080c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ca:	4619      	mov	r1, r3
 80080cc:	4b7c      	ldr	r3, [pc, #496]	@ (80082c0 <USB_EPStartXfer+0x53c>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	0159      	lsls	r1, r3, #5
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	440b      	add	r3, r1
 80080e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ec:	4619      	mov	r1, r3
 80080ee:	4b75      	ldr	r3, [pc, #468]	@ (80082c4 <USB_EPStartXfer+0x540>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d12f      	bne.n	800815a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	689a      	ldr	r2, [r3, #8]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008128:	69b9      	ldr	r1, [r7, #24]
 800812a:	0148      	lsls	r0, r1, #5
 800812c:	69f9      	ldr	r1, [r7, #28]
 800812e:	4401      	add	r1, r0
 8008130:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008134:	4313      	orrs	r3, r2
 8008136:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	0151      	lsls	r1, r2, #5
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	440a      	add	r2, r1
 800814e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008152:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008156:	6113      	str	r3, [r2, #16]
 8008158:	e05f      	b.n	800821a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d123      	bne.n	80081aa <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008178:	69b9      	ldr	r1, [r7, #24]
 800817a:	0148      	lsls	r0, r1, #5
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	4401      	add	r1, r0
 8008180:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008184:	4313      	orrs	r3, r2
 8008186:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	0151      	lsls	r1, r2, #5
 800819a:	69fa      	ldr	r2, [r7, #28]
 800819c:	440a      	add	r2, r1
 800819e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081a6:	6113      	str	r3, [r2, #16]
 80081a8:	e037      	b.n	800821a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	691a      	ldr	r2, [r3, #16]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	4413      	add	r3, r2
 80081b4:	1e5a      	subs	r2, r3, #1
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80081be:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	8afa      	ldrh	r2, [r7, #22]
 80081c6:	fb03 f202 	mul.w	r2, r3, r2
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	8afb      	ldrh	r3, [r7, #22]
 80081de:	04d9      	lsls	r1, r3, #19
 80081e0:	4b39      	ldr	r3, [pc, #228]	@ (80082c8 <USB_EPStartXfer+0x544>)
 80081e2:	400b      	ands	r3, r1
 80081e4:	69b9      	ldr	r1, [r7, #24]
 80081e6:	0148      	lsls	r0, r1, #5
 80081e8:	69f9      	ldr	r1, [r7, #28]
 80081ea:	4401      	add	r1, r0
 80081ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081f0:	4313      	orrs	r3, r2
 80081f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800820a:	69b9      	ldr	r1, [r7, #24]
 800820c:	0148      	lsls	r0, r1, #5
 800820e:	69f9      	ldr	r1, [r7, #28]
 8008210:	4401      	add	r1, r0
 8008212:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008216:	4313      	orrs	r3, r2
 8008218:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d10d      	bne.n	800823c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d009      	beq.n	800823c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	68d9      	ldr	r1, [r3, #12]
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008238:	460a      	mov	r2, r1
 800823a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	791b      	ldrb	r3, [r3, #4]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d128      	bne.n	8008296 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008250:	2b00      	cmp	r3, #0
 8008252:	d110      	bne.n	8008276 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	0151      	lsls	r1, r2, #5
 8008266:	69fa      	ldr	r2, [r7, #28]
 8008268:	440a      	add	r2, r1
 800826a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800826e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	e00f      	b.n	8008296 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	440a      	add	r2, r1
 800828c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008294:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	0151      	lsls	r1, r2, #5
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	440a      	add	r2, r1
 80082ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80082b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	fff80000 	.word	0xfff80000
 80082c4:	e007ffff 	.word	0xe007ffff
 80082c8:	1ff80000 	.word	0x1ff80000

080082cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d14a      	bne.n	8008380 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008302:	f040 8086 	bne.w	8008412 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	7812      	ldrb	r2, [r2, #0]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	440a      	add	r2, r1
 8008320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008324:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008328:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	7812      	ldrb	r2, [r2, #0]
 800833e:	0151      	lsls	r1, r2, #5
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	440a      	add	r2, r1
 8008344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008348:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800834c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f242 7210 	movw	r2, #10000	@ 0x2710
 800835a:	4293      	cmp	r3, r2
 800835c:	d902      	bls.n	8008364 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	75fb      	strb	r3, [r7, #23]
          break;
 8008362:	e056      	b.n	8008412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800837c:	d0e7      	beq.n	800834e <USB_EPStopXfer+0x82>
 800837e:	e048      	b.n	8008412 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008398:	d13b      	bne.n	8008412 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	7812      	ldrb	r2, [r2, #0]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80083bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	0151      	lsls	r1, r2, #5
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	440a      	add	r2, r1
 80083d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d902      	bls.n	80083f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
          break;
 80083f6:	e00c      	b.n	8008412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800840c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008410:	d0e7      	beq.n	80083e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
}
 8008414:	4618      	mov	r0, r3
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008420:	b480      	push	{r7}
 8008422:	b089      	sub	sp, #36	@ 0x24
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4611      	mov	r1, r2
 800842c:	461a      	mov	r2, r3
 800842e:	460b      	mov	r3, r1
 8008430:	71fb      	strb	r3, [r7, #7]
 8008432:	4613      	mov	r3, r2
 8008434:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800843e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008442:	2b00      	cmp	r3, #0
 8008444:	d123      	bne.n	800848e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008446:	88bb      	ldrh	r3, [r7, #4]
 8008448:	3303      	adds	r3, #3
 800844a:	089b      	lsrs	r3, r3, #2
 800844c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800844e:	2300      	movs	r3, #0
 8008450:	61bb      	str	r3, [r7, #24]
 8008452:	e018      	b.n	8008486 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	031a      	lsls	r2, r3, #12
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	4413      	add	r3, r2
 800845c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008460:	461a      	mov	r2, r3
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	3301      	adds	r3, #1
 800846c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	3301      	adds	r3, #1
 8008472:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	3301      	adds	r3, #1
 8008478:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	3301      	adds	r3, #1
 800847e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	3301      	adds	r3, #1
 8008484:	61bb      	str	r3, [r7, #24]
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	429a      	cmp	r2, r3
 800848c:	d3e2      	bcc.n	8008454 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3724      	adds	r7, #36	@ 0x24
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800849c:	b480      	push	{r7}
 800849e:	b08b      	sub	sp, #44	@ 0x2c
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	089b      	lsrs	r3, r3, #2
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80084ba:	88fb      	ldrh	r3, [r7, #6]
 80084bc:	f003 0303 	and.w	r3, r3, #3
 80084c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80084c2:	2300      	movs	r3, #0
 80084c4:	623b      	str	r3, [r7, #32]
 80084c6:	e014      	b.n	80084f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	3301      	adds	r3, #1
 80084d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	3301      	adds	r3, #1
 80084de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	3301      	adds	r3, #1
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	3301      	adds	r3, #1
 80084ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	3301      	adds	r3, #1
 80084f0:	623b      	str	r3, [r7, #32]
 80084f2:	6a3a      	ldr	r2, [r7, #32]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d3e6      	bcc.n	80084c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084fa:	8bfb      	ldrh	r3, [r7, #30]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01e      	beq.n	800853e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800850a:	461a      	mov	r2, r3
 800850c:	f107 0310 	add.w	r3, r7, #16
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	b2db      	uxtb	r3, r3
 800851a:	00db      	lsls	r3, r3, #3
 800851c:	fa22 f303 	lsr.w	r3, r2, r3
 8008520:	b2da      	uxtb	r2, r3
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	701a      	strb	r2, [r3, #0]
      i++;
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	3301      	adds	r3, #1
 800852a:	623b      	str	r3, [r7, #32]
      pDest++;
 800852c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852e:	3301      	adds	r3, #1
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008532:	8bfb      	ldrh	r3, [r7, #30]
 8008534:	3b01      	subs	r3, #1
 8008536:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008538:	8bfb      	ldrh	r3, [r7, #30]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1ea      	bne.n	8008514 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008540:	4618      	mov	r0, r3
 8008542:	372c      	adds	r7, #44	@ 0x2c
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d12c      	bne.n	80085c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	db12      	blt.n	80085a0 <USB_EPSetStall+0x54>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00f      	beq.n	80085a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800859a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800859e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	0151      	lsls	r1, r2, #5
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	440a      	add	r2, r1
 80085b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	e02b      	b.n	800861a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	db12      	blt.n	80085fa <USB_EPSetStall+0xae>
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00f      	beq.n	80085fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	0151      	lsls	r1, r2, #5
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	440a      	add	r2, r1
 80085f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	440a      	add	r2, r1
 8008610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008614:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008618:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d128      	bne.n	8008696 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	440a      	add	r2, r1
 800865a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800865e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008662:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	791b      	ldrb	r3, [r3, #4]
 8008668:	2b03      	cmp	r3, #3
 800866a:	d003      	beq.n	8008674 <USB_EPClearStall+0x4c>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	791b      	ldrb	r3, [r3, #4]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d138      	bne.n	80086e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	440a      	add	r2, r1
 800868a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800868e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	e027      	b.n	80086e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	0151      	lsls	r1, r2, #5
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	440a      	add	r2, r1
 80086ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	791b      	ldrb	r3, [r3, #4]
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d003      	beq.n	80086c6 <USB_EPClearStall+0x9e>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	791b      	ldrb	r3, [r3, #4]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d10f      	bne.n	80086e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	0151      	lsls	r1, r2, #5
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	440a      	add	r2, r1
 80086dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008712:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008716:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008728:	68f9      	ldr	r1, [r7, #12]
 800872a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800872e:	4313      	orrs	r3, r2
 8008730:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800876e:	f023 0302 	bic.w	r3, r3, #2
 8008772:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800879c:	f023 0303 	bic.w	r3, r3, #3
 80087a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087b0:	f043 0302 	orr.w	r3, r3, #2
 80087b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	4013      	ands	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087dc:	68fb      	ldr	r3, [r7, #12]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b085      	sub	sp, #20
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	4013      	ands	r3, r2
 800880c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	0c1b      	lsrs	r3, r3, #16
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800881e:	b480      	push	{r7}
 8008820:	b085      	sub	sp, #20
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	4013      	ands	r3, r2
 8008840:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	b29b      	uxth	r3, r3
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008852:	b480      	push	{r7}
 8008854:	b085      	sub	sp, #20
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	4013      	ands	r3, r2
 800887e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008880:	68bb      	ldr	r3, [r7, #8]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800888e:	b480      	push	{r7}
 8008890:	b087      	sub	sp, #28
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	f003 030f 	and.w	r3, r3, #15
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	fa22 f303 	lsr.w	r3, r2, r3
 80088be:	01db      	lsls	r3, r3, #7
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4013      	ands	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088dc:	68bb      	ldr	r3, [r7, #8]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	371c      	adds	r7, #28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0301 	and.w	r3, r3, #1
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
	...

08008908 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008922:	4619      	mov	r1, r3
 8008924:	4b09      	ldr	r3, [pc, #36]	@ (800894c <USB_ActivateSetup+0x44>)
 8008926:	4013      	ands	r3, r2
 8008928:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800893c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	fffff800 	.word	0xfffff800

08008950 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	460b      	mov	r3, r1
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	333c      	adds	r3, #60	@ 0x3c
 8008966:	3304      	adds	r3, #4
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	4a26      	ldr	r2, [pc, #152]	@ (8008a08 <USB_EP0_OutStart+0xb8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d90a      	bls.n	800898a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008984:	d101      	bne.n	800898a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	e037      	b.n	80089fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008990:	461a      	mov	r2, r3
 8008992:	2300      	movs	r3, #0
 8008994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089b8:	f043 0318 	orr.w	r3, r3, #24
 80089bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80089d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089d2:	7afb      	ldrb	r3, [r7, #11]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d10f      	bne.n	80089f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089de:	461a      	mov	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80089f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	4f54300a 	.word	0x4f54300a

08008a0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a24:	d901      	bls.n	8008a2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e01b      	b.n	8008a62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	daf2      	bge.n	8008a18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f043 0201 	orr.w	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3301      	adds	r3, #1
 8008a46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a4e:	d901      	bls.n	8008a54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e006      	b.n	8008a62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d0f0      	beq.n	8008a42 <USB_CoreReset+0x36>

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008a7c:	2010      	movs	r0, #16
 8008a7e:	f002 f9d9 	bl	800ae34 <USBD_static_malloc>
 8008a82:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	32b0      	adds	r2, #176	@ 0xb0
 8008a94:	2100      	movs	r1, #0
 8008a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	e048      	b.n	8008b30 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	32b0      	adds	r2, #176	@ 0xb0
 8008aa8:	68f9      	ldr	r1, [r7, #12]
 8008aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	32b0      	adds	r2, #176	@ 0xb0
 8008ab8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7c1b      	ldrb	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10d      	bne.n	8008ae6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008aca:	4b1b      	ldr	r3, [pc, #108]	@ (8008b38 <USBD_HID_Init+0xc8>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	f003 020f 	and.w	r2, r3, #15
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	440b      	add	r3, r1
 8008ade:	3326      	adds	r3, #38	@ 0x26
 8008ae0:	2207      	movs	r2, #7
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	e00c      	b.n	8008b00 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008ae6:	4b14      	ldr	r3, [pc, #80]	@ (8008b38 <USBD_HID_Init+0xc8>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f003 020f 	and.w	r2, r3, #15
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	4613      	mov	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	3326      	adds	r3, #38	@ 0x26
 8008afc:	220a      	movs	r2, #10
 8008afe:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008b00:	4b0d      	ldr	r3, [pc, #52]	@ (8008b38 <USBD_HID_Init+0xc8>)
 8008b02:	7819      	ldrb	r1, [r3, #0]
 8008b04:	2304      	movs	r3, #4
 8008b06:	2203      	movs	r2, #3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f002 f882 	bl	800ac12 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b38 <USBD_HID_Init+0xc8>)
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	f003 020f 	and.w	r2, r3, #15
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	440b      	add	r3, r1
 8008b22:	3324      	adds	r3, #36	@ 0x24
 8008b24:	2201      	movs	r2, #1
 8008b26:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	24000273 	.word	0x24000273

08008b3c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008b48:	4b1f      	ldr	r3, [pc, #124]	@ (8008bc8 <USBD_HID_DeInit+0x8c>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f002 f885 	bl	800ac5e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008b54:	4b1c      	ldr	r3, [pc, #112]	@ (8008bc8 <USBD_HID_DeInit+0x8c>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f003 020f 	and.w	r2, r3, #15
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	440b      	add	r3, r1
 8008b68:	3324      	adds	r3, #36	@ 0x24
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008b6e:	4b16      	ldr	r3, [pc, #88]	@ (8008bc8 <USBD_HID_DeInit+0x8c>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	f003 020f 	and.w	r2, r3, #15
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	440b      	add	r3, r1
 8008b82:	3326      	adds	r3, #38	@ 0x26
 8008b84:	2200      	movs	r2, #0
 8008b86:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	32b0      	adds	r2, #176	@ 0xb0
 8008b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d011      	beq.n	8008bbe <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	32b0      	adds	r2, #176	@ 0xb0
 8008ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f002 f951 	bl	800ae50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	32b0      	adds	r2, #176	@ 0xb0
 8008bb8:	2100      	movs	r1, #0
 8008bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	24000273 	.word	0x24000273

08008bcc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	32b0      	adds	r2, #176	@ 0xb0
 8008be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e0e8      	b.n	8008dca <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d046      	beq.n	8008c92 <USBD_HID_Setup+0xc6>
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	f040 80d8 	bne.w	8008dba <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	785b      	ldrb	r3, [r3, #1]
 8008c0e:	3b02      	subs	r3, #2
 8008c10:	2b09      	cmp	r3, #9
 8008c12:	d836      	bhi.n	8008c82 <USBD_HID_Setup+0xb6>
 8008c14:	a201      	add	r2, pc, #4	@ (adr r2, 8008c1c <USBD_HID_Setup+0x50>)
 8008c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1a:	bf00      	nop
 8008c1c:	08008c73 	.word	0x08008c73
 8008c20:	08008c53 	.word	0x08008c53
 8008c24:	08008c83 	.word	0x08008c83
 8008c28:	08008c83 	.word	0x08008c83
 8008c2c:	08008c83 	.word	0x08008c83
 8008c30:	08008c83 	.word	0x08008c83
 8008c34:	08008c83 	.word	0x08008c83
 8008c38:	08008c83 	.word	0x08008c83
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008c45 	.word	0x08008c45
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	885b      	ldrh	r3, [r3, #2]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	601a      	str	r2, [r3, #0]
          break;
 8008c50:	e01e      	b.n	8008c90 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2201      	movs	r2, #1
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 fc0f 	bl	800a47c <USBD_CtlSendData>
          break;
 8008c5e:	e017      	b.n	8008c90 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	885b      	ldrh	r3, [r3, #2]
 8008c64:	0a1b      	lsrs	r3, r3, #8
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	605a      	str	r2, [r3, #4]
          break;
 8008c70:	e00e      	b.n	8008c90 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3304      	adds	r3, #4
 8008c76:	2201      	movs	r2, #1
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fbfe 	bl	800a47c <USBD_CtlSendData>
          break;
 8008c80:	e006      	b.n	8008c90 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 fb7c 	bl	800a382 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c8e:	bf00      	nop
      }
      break;
 8008c90:	e09a      	b.n	8008dc8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	2b0b      	cmp	r3, #11
 8008c98:	f200 8086 	bhi.w	8008da8 <USBD_HID_Setup+0x1dc>
 8008c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca4 <USBD_HID_Setup+0xd8>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008cd5 	.word	0x08008cd5
 8008ca8:	08008db7 	.word	0x08008db7
 8008cac:	08008da9 	.word	0x08008da9
 8008cb0:	08008da9 	.word	0x08008da9
 8008cb4:	08008da9 	.word	0x08008da9
 8008cb8:	08008da9 	.word	0x08008da9
 8008cbc:	08008cff 	.word	0x08008cff
 8008cc0:	08008da9 	.word	0x08008da9
 8008cc4:	08008da9 	.word	0x08008da9
 8008cc8:	08008da9 	.word	0x08008da9
 8008ccc:	08008d57 	.word	0x08008d57
 8008cd0:	08008d81 	.word	0x08008d81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d107      	bne.n	8008cf0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ce0:	f107 030a 	add.w	r3, r7, #10
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 fbc7 	bl	800a47c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cee:	e063      	b.n	8008db8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 fb45 	bl	800a382 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	75fb      	strb	r3, [r7, #23]
          break;
 8008cfc:	e05c      	b.n	8008db8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	885b      	ldrh	r3, [r3, #2]
 8008d02:	0a1b      	lsrs	r3, r3, #8
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b22      	cmp	r3, #34	@ 0x22
 8008d08:	d108      	bne.n	8008d1c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	88db      	ldrh	r3, [r3, #6]
 8008d0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008d10:	bf28      	it	cs
 8008d12:	233f      	movcs	r3, #63	@ 0x3f
 8008d14:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008d16:	4b2f      	ldr	r3, [pc, #188]	@ (8008dd4 <USBD_HID_Setup+0x208>)
 8008d18:	613b      	str	r3, [r7, #16]
 8008d1a:	e015      	b.n	8008d48 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	885b      	ldrh	r3, [r3, #2]
 8008d20:	0a1b      	lsrs	r3, r3, #8
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	2b21      	cmp	r3, #33	@ 0x21
 8008d26:	d108      	bne.n	8008d3a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8008d28:	4b2b      	ldr	r3, [pc, #172]	@ (8008dd8 <USBD_HID_Setup+0x20c>)
 8008d2a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	88db      	ldrh	r3, [r3, #6]
 8008d30:	2b09      	cmp	r3, #9
 8008d32:	bf28      	it	cs
 8008d34:	2309      	movcs	r3, #9
 8008d36:	82bb      	strh	r3, [r7, #20]
 8008d38:	e006      	b.n	8008d48 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 fb20 	bl	800a382 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d42:	2303      	movs	r3, #3
 8008d44:	75fb      	strb	r3, [r7, #23]
            break;
 8008d46:	e037      	b.n	8008db8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d48:	8abb      	ldrh	r3, [r7, #20]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6939      	ldr	r1, [r7, #16]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fb94 	bl	800a47c <USBD_CtlSendData>
          break;
 8008d54:	e030      	b.n	8008db8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d107      	bne.n	8008d72 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3308      	adds	r3, #8
 8008d66:	2201      	movs	r2, #1
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 fb86 	bl	800a47c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d70:	e022      	b.n	8008db8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fb04 	bl	800a382 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d7e:	e01b      	b.n	8008db8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d106      	bne.n	8008d9a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	885b      	ldrh	r3, [r3, #2]
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	461a      	mov	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d98:	e00e      	b.n	8008db8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 faf0 	bl	800a382 <USBD_CtlError>
            ret = USBD_FAIL;
 8008da2:	2303      	movs	r3, #3
 8008da4:	75fb      	strb	r3, [r7, #23]
          break;
 8008da6:	e007      	b.n	8008db8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 fae9 	bl	800a382 <USBD_CtlError>
          ret = USBD_FAIL;
 8008db0:	2303      	movs	r3, #3
 8008db2:	75fb      	strb	r3, [r7, #23]
          break;
 8008db4:	e000      	b.n	8008db8 <USBD_HID_Setup+0x1ec>
          break;
 8008db6:	bf00      	nop
      }
      break;
 8008db8:	e006      	b.n	8008dc8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 fae0 	bl	800a382 <USBD_CtlError>
      ret = USBD_FAIL;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc6:	bf00      	nop
  }

  return (uint8_t)ret;
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	24000234 	.word	0x24000234
 8008dd8:	2400021c 	.word	0x2400021c

08008ddc <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	32b0      	adds	r2, #176	@ 0xb0
 8008df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e014      	b.n	8008e2e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d10d      	bne.n	8008e2c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	7b1b      	ldrb	r3, [r3, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d109      	bne.n	8008e2c <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8008e1e:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <USBD_HID_SendReport+0x5c>)
 8008e20:	7819      	ldrb	r1, [r3, #0]
 8008e22:	88fb      	ldrh	r3, [r7, #6]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f001 ffc1 	bl	800adae <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	24000273 	.word	0x24000273

08008e3c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008e44:	2181      	movs	r1, #129	@ 0x81
 8008e46:	4809      	ldr	r0, [pc, #36]	@ (8008e6c <USBD_HID_GetFSCfgDesc+0x30>)
 8008e48:	f000 fc3b 	bl	80096c2 <USBD_GetEpDesc>
 8008e4c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	220a      	movs	r2, #10
 8008e58:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2222      	movs	r2, #34	@ 0x22
 8008e5e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008e60:	4b02      	ldr	r3, [pc, #8]	@ (8008e6c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	240001f8 	.word	0x240001f8

08008e70 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008e78:	2181      	movs	r1, #129	@ 0x81
 8008e7a:	4809      	ldr	r0, [pc, #36]	@ (8008ea0 <USBD_HID_GetHSCfgDesc+0x30>)
 8008e7c:	f000 fc21 	bl	80096c2 <USBD_GetEpDesc>
 8008e80:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2207      	movs	r2, #7
 8008e8c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2222      	movs	r2, #34	@ 0x22
 8008e92:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008e94:	4b02      	ldr	r3, [pc, #8]	@ (8008ea0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	240001f8 	.word	0x240001f8

08008ea4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008eac:	2181      	movs	r1, #129	@ 0x81
 8008eae:	4809      	ldr	r0, [pc, #36]	@ (8008ed4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008eb0:	f000 fc07 	bl	80096c2 <USBD_GetEpDesc>
 8008eb4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	220a      	movs	r2, #10
 8008ec0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2222      	movs	r2, #34	@ 0x22
 8008ec6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008ec8:	4b02      	ldr	r3, [pc, #8]	@ (8008ed4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	240001f8 	.word	0x240001f8

08008ed8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	32b0      	adds	r2, #176	@ 0xb0
 8008eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	220a      	movs	r2, #10
 8008f10:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008f12:	4b03      	ldr	r3, [pc, #12]	@ (8008f20 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	24000228 	.word	0x24000228

08008f24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e01f      	b.n	8008f7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	79fa      	ldrb	r2, [r7, #7]
 8008f6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f001 fde1 	bl	800ab38 <USBD_LL_Init>
 8008f76:	4603      	mov	r3, r0
 8008f78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e025      	b.n	8008fe8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	32ae      	adds	r2, #174	@ 0xae
 8008fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00f      	beq.n	8008fd8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	32ae      	adds	r2, #174	@ 0xae
 8008fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc8:	f107 020e 	add.w	r2, r7, #14
 8008fcc:	4610      	mov	r0, r2
 8008fce:	4798      	blx	r3
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 fdef 	bl	800abdc <USBD_LL_Start>
 8008ffe:	4603      	mov	r3, r0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009010:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009012:	4618      	mov	r0, r3
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	460b      	mov	r3, r1
 8009028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009034:	2b00      	cmp	r3, #0
 8009036:	d009      	beq.n	800904c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	4611      	mov	r1, r2
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	4798      	blx	r3
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	460b      	mov	r3, r1
 8009060:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	4611      	mov	r1, r2
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800907c:	2303      	movs	r3, #3
 800907e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009080:	7bfb      	ldrb	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	4618      	mov	r0, r3
 800909e:	f001 f936 	bl	800a30e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80090b0:	461a      	mov	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80090be:	f003 031f 	and.w	r3, r3, #31
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d01a      	beq.n	80090fc <USBD_LL_SetupStage+0x72>
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d822      	bhi.n	8009110 <USBD_LL_SetupStage+0x86>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <USBD_LL_SetupStage+0x4a>
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d00a      	beq.n	80090e8 <USBD_LL_SetupStage+0x5e>
 80090d2:	e01d      	b.n	8009110 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fb63 	bl	80097a8 <USBD_StdDevReq>
 80090e2:	4603      	mov	r3, r0
 80090e4:	73fb      	strb	r3, [r7, #15]
      break;
 80090e6:	e020      	b.n	800912a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fbcb 	bl	800988c <USBD_StdItfReq>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]
      break;
 80090fa:	e016      	b.n	800912a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fc2d 	bl	8009964 <USBD_StdEPReq>
 800910a:	4603      	mov	r3, r0
 800910c:	73fb      	strb	r3, [r7, #15]
      break;
 800910e:	e00c      	b.n	800912a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009116:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800911a:	b2db      	uxtb	r3, r3
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fdbc 	bl	800ac9c <USBD_LL_StallEP>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]
      break;
 8009128:	bf00      	nop
  }

  return ret;
 800912a:	7bfb      	ldrb	r3, [r7, #15]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	460b      	mov	r3, r1
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009146:	7afb      	ldrb	r3, [r7, #11]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d16e      	bne.n	800922a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009152:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800915a:	2b03      	cmp	r3, #3
 800915c:	f040 8098 	bne.w	8009290 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	429a      	cmp	r2, r3
 800916a:	d913      	bls.n	8009194 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	689a      	ldr	r2, [r3, #8]
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	1ad2      	subs	r2, r2, r3
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	4293      	cmp	r3, r2
 8009184:	bf28      	it	cs
 8009186:	4613      	movcs	r3, r2
 8009188:	461a      	mov	r2, r3
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f001 f9a1 	bl	800a4d4 <USBD_CtlContinueRx>
 8009192:	e07d      	b.n	8009290 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800919a:	f003 031f 	and.w	r3, r3, #31
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d014      	beq.n	80091cc <USBD_LL_DataOutStage+0x98>
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d81d      	bhi.n	80091e2 <USBD_LL_DataOutStage+0xae>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <USBD_LL_DataOutStage+0x7c>
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d003      	beq.n	80091b6 <USBD_LL_DataOutStage+0x82>
 80091ae:	e018      	b.n	80091e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	75bb      	strb	r3, [r7, #22]
            break;
 80091b4:	e018      	b.n	80091e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	4619      	mov	r1, r3
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 fa64 	bl	800968e <USBD_CoreFindIF>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75bb      	strb	r3, [r7, #22]
            break;
 80091ca:	e00d      	b.n	80091e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	4619      	mov	r1, r3
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 fa66 	bl	80096a8 <USBD_CoreFindEP>
 80091dc:	4603      	mov	r3, r0
 80091de:	75bb      	strb	r3, [r7, #22]
            break;
 80091e0:	e002      	b.n	80091e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	75bb      	strb	r3, [r7, #22]
            break;
 80091e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80091e8:	7dbb      	ldrb	r3, [r7, #22]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d119      	bne.n	8009222 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d113      	bne.n	8009222 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80091fa:	7dba      	ldrb	r2, [r7, #22]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	32ae      	adds	r2, #174	@ 0xae
 8009200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800920a:	7dba      	ldrb	r2, [r7, #22]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009212:	7dba      	ldrb	r2, [r7, #22]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	32ae      	adds	r2, #174	@ 0xae
 8009218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f001 f967 	bl	800a4f6 <USBD_CtlSendStatus>
 8009228:	e032      	b.n	8009290 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800922a:	7afb      	ldrb	r3, [r7, #11]
 800922c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009230:	b2db      	uxtb	r3, r3
 8009232:	4619      	mov	r1, r3
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fa37 	bl	80096a8 <USBD_CoreFindEP>
 800923a:	4603      	mov	r3, r0
 800923c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800923e:	7dbb      	ldrb	r3, [r7, #22]
 8009240:	2bff      	cmp	r3, #255	@ 0xff
 8009242:	d025      	beq.n	8009290 <USBD_LL_DataOutStage+0x15c>
 8009244:	7dbb      	ldrb	r3, [r7, #22]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d122      	bne.n	8009290 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b03      	cmp	r3, #3
 8009254:	d117      	bne.n	8009286 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009256:	7dba      	ldrb	r2, [r7, #22]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	32ae      	adds	r2, #174	@ 0xae
 800925c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00f      	beq.n	8009286 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009266:	7dba      	ldrb	r2, [r7, #22]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800926e:	7dba      	ldrb	r2, [r7, #22]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	32ae      	adds	r2, #174	@ 0xae
 8009274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	7afa      	ldrb	r2, [r7, #11]
 800927c:	4611      	mov	r1, r2
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	4798      	blx	r3
 8009282:	4603      	mov	r3, r0
 8009284:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800928c:	7dfb      	ldrb	r3, [r7, #23]
 800928e:	e000      	b.n	8009292 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b086      	sub	sp, #24
 800929e:	af00      	add	r7, sp, #0
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	460b      	mov	r3, r1
 80092a4:	607a      	str	r2, [r7, #4]
 80092a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80092a8:	7afb      	ldrb	r3, [r7, #11]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d16f      	bne.n	800938e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3314      	adds	r3, #20
 80092b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d15a      	bne.n	8009374 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d914      	bls.n	80092f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	689a      	ldr	r2, [r3, #8]
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	1ad2      	subs	r2, r2, r3
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	461a      	mov	r2, r3
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f001 f8e6 	bl	800a4b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e6:	2300      	movs	r3, #0
 80092e8:	2200      	movs	r2, #0
 80092ea:	2100      	movs	r1, #0
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f001 fd7f 	bl	800adf0 <USBD_LL_PrepareReceive>
 80092f2:	e03f      	b.n	8009374 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	68da      	ldr	r2, [r3, #12]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d11c      	bne.n	800933a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009308:	429a      	cmp	r2, r3
 800930a:	d316      	bcc.n	800933a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009316:	429a      	cmp	r2, r3
 8009318:	d20f      	bcs.n	800933a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800931a:	2200      	movs	r2, #0
 800931c:	2100      	movs	r1, #0
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f001 f8c7 	bl	800a4b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800932c:	2300      	movs	r3, #0
 800932e:	2200      	movs	r2, #0
 8009330:	2100      	movs	r1, #0
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f001 fd5c 	bl	800adf0 <USBD_LL_PrepareReceive>
 8009338:	e01c      	b.n	8009374 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b03      	cmp	r3, #3
 8009344:	d10f      	bne.n	8009366 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d009      	beq.n	8009366 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009366:	2180      	movs	r1, #128	@ 0x80
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f001 fc97 	bl	800ac9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f001 f8d4 	bl	800a51c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d03a      	beq.n	80093f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f7ff fe42 	bl	8009008 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800938c:	e032      	b.n	80093f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009394:	b2db      	uxtb	r3, r3
 8009396:	4619      	mov	r1, r3
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 f985 	bl	80096a8 <USBD_CoreFindEP>
 800939e:	4603      	mov	r3, r0
 80093a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	2bff      	cmp	r3, #255	@ 0xff
 80093a6:	d025      	beq.n	80093f4 <USBD_LL_DataInStage+0x15a>
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d122      	bne.n	80093f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d11c      	bne.n	80093f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80093ba:	7dfa      	ldrb	r2, [r7, #23]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	32ae      	adds	r2, #174	@ 0xae
 80093c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d014      	beq.n	80093f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80093ca:	7dfa      	ldrb	r2, [r7, #23]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80093d2:	7dfa      	ldrb	r2, [r7, #23]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	32ae      	adds	r2, #174	@ 0xae
 80093d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	7afa      	ldrb	r2, [r7, #11]
 80093e0:	4611      	mov	r1, r2
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	4798      	blx	r3
 80093e6:	4603      	mov	r3, r0
 80093e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80093ea:	7dbb      	ldrb	r3, [r7, #22]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80093f0:	7dbb      	ldrb	r3, [r7, #22]
 80093f2:	e000      	b.n	80093f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009436:	2b00      	cmp	r3, #0
 8009438:	d014      	beq.n	8009464 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00e      	beq.n	8009464 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	6852      	ldr	r2, [r2, #4]
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	4611      	mov	r1, r2
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	4798      	blx	r3
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009460:	2303      	movs	r3, #3
 8009462:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009464:	2340      	movs	r3, #64	@ 0x40
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 fbd1 	bl	800ac12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2240      	movs	r2, #64	@ 0x40
 800947c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009480:	2340      	movs	r3, #64	@ 0x40
 8009482:	2200      	movs	r2, #0
 8009484:	2180      	movs	r1, #128	@ 0x80
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fbc3 	bl	800ac12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2240      	movs	r2, #64	@ 0x40
 8009496:	621a      	str	r2, [r3, #32]

  return ret;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d006      	beq.n	80094e4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2204      	movs	r2, #4
 80094e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b04      	cmp	r3, #4
 800950c:	d106      	bne.n	800951c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009514:	b2da      	uxtb	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b03      	cmp	r3, #3
 800953c:	d110      	bne.n	8009560 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00b      	beq.n	8009560 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800954e:	69db      	ldr	r3, [r3, #28]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	460b      	mov	r3, r1
 8009574:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	32ae      	adds	r2, #174	@ 0xae
 8009580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009588:	2303      	movs	r3, #3
 800958a:	e01c      	b.n	80095c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b03      	cmp	r3, #3
 8009596:	d115      	bne.n	80095c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	32ae      	adds	r2, #174	@ 0xae
 80095a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	32ae      	adds	r2, #174	@ 0xae
 80095b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	4611      	mov	r1, r2
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	32ae      	adds	r2, #174	@ 0xae
 80095e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e01c      	b.n	800962a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d115      	bne.n	8009628 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	32ae      	adds	r2, #174	@ 0xae
 8009606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00b      	beq.n	8009628 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	32ae      	adds	r2, #174	@ 0xae
 800961a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009620:	78fa      	ldrb	r2, [r7, #3]
 8009622:	4611      	mov	r1, r2
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009632:	b480      	push	{r7}
 8009634:	b083      	sub	sp, #12
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00e      	beq.n	8009684 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6852      	ldr	r2, [r2, #4]
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	4611      	mov	r1, r2
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009680:	2303      	movs	r3, #3
 8009682:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	460b      	mov	r3, r1
 8009698:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800969a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	460b      	mov	r3, r1
 80096cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80096d6:	2300      	movs	r3, #0
 80096d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	885b      	ldrh	r3, [r3, #2]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	7812      	ldrb	r2, [r2, #0]
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d91f      	bls.n	8009728 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80096ee:	e013      	b.n	8009718 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80096f0:	f107 030a 	add.w	r3, r7, #10
 80096f4:	4619      	mov	r1, r3
 80096f6:	6978      	ldr	r0, [r7, #20]
 80096f8:	f000 f81b 	bl	8009732 <USBD_GetNextDesc>
 80096fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	785b      	ldrb	r3, [r3, #1]
 8009702:	2b05      	cmp	r3, #5
 8009704:	d108      	bne.n	8009718 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	789b      	ldrb	r3, [r3, #2]
 800970e:	78fa      	ldrb	r2, [r7, #3]
 8009710:	429a      	cmp	r2, r3
 8009712:	d008      	beq.n	8009726 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009714:	2300      	movs	r3, #0
 8009716:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	885b      	ldrh	r3, [r3, #2]
 800971c:	b29a      	uxth	r2, r3
 800971e:	897b      	ldrh	r3, [r7, #10]
 8009720:	429a      	cmp	r2, r3
 8009722:	d8e5      	bhi.n	80096f0 <USBD_GetEpDesc+0x2e>
 8009724:	e000      	b.n	8009728 <USBD_GetEpDesc+0x66>
          break;
 8009726:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009728:	693b      	ldr	r3, [r7, #16]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	7812      	ldrb	r2, [r2, #0]
 8009748:	4413      	add	r3, r2
 800974a:	b29a      	uxth	r2, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	461a      	mov	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800975c:	68fb      	ldr	r3, [r7, #12]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800976a:	b480      	push	{r7}
 800976c:	b087      	sub	sp, #28
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	3301      	adds	r3, #1
 8009780:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009788:	8a3b      	ldrh	r3, [r7, #16]
 800978a:	021b      	lsls	r3, r3, #8
 800978c:	b21a      	sxth	r2, r3
 800978e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009792:	4313      	orrs	r3, r2
 8009794:	b21b      	sxth	r3, r3
 8009796:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009798:	89fb      	ldrh	r3, [r7, #14]
}
 800979a:	4618      	mov	r0, r3
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
	...

080097a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097be:	2b40      	cmp	r3, #64	@ 0x40
 80097c0:	d005      	beq.n	80097ce <USBD_StdDevReq+0x26>
 80097c2:	2b40      	cmp	r3, #64	@ 0x40
 80097c4:	d857      	bhi.n	8009876 <USBD_StdDevReq+0xce>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00f      	beq.n	80097ea <USBD_StdDevReq+0x42>
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d153      	bne.n	8009876 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	32ae      	adds	r2, #174	@ 0xae
 80097d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	4798      	blx	r3
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]
      break;
 80097e8:	e04a      	b.n	8009880 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	785b      	ldrb	r3, [r3, #1]
 80097ee:	2b09      	cmp	r3, #9
 80097f0:	d83b      	bhi.n	800986a <USBD_StdDevReq+0xc2>
 80097f2:	a201      	add	r2, pc, #4	@ (adr r2, 80097f8 <USBD_StdDevReq+0x50>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	0800984d 	.word	0x0800984d
 80097fc:	08009861 	.word	0x08009861
 8009800:	0800986b 	.word	0x0800986b
 8009804:	08009857 	.word	0x08009857
 8009808:	0800986b 	.word	0x0800986b
 800980c:	0800982b 	.word	0x0800982b
 8009810:	08009821 	.word	0x08009821
 8009814:	0800986b 	.word	0x0800986b
 8009818:	08009843 	.word	0x08009843
 800981c:	08009835 	.word	0x08009835
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fa3c 	bl	8009ca0 <USBD_GetDescriptor>
          break;
 8009828:	e024      	b.n	8009874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fbcb 	bl	8009fc8 <USBD_SetAddress>
          break;
 8009832:	e01f      	b.n	8009874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fc0a 	bl	800a050 <USBD_SetConfig>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
          break;
 8009840:	e018      	b.n	8009874 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fcad 	bl	800a1a4 <USBD_GetConfig>
          break;
 800984a:	e013      	b.n	8009874 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fcde 	bl	800a210 <USBD_GetStatus>
          break;
 8009854:	e00e      	b.n	8009874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fd0d 	bl	800a278 <USBD_SetFeature>
          break;
 800985e:	e009      	b.n	8009874 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fd31 	bl	800a2ca <USBD_ClrFeature>
          break;
 8009868:	e004      	b.n	8009874 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fd88 	bl	800a382 <USBD_CtlError>
          break;
 8009872:	bf00      	nop
      }
      break;
 8009874:	e004      	b.n	8009880 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fd82 	bl	800a382 <USBD_CtlError>
      break;
 800987e:	bf00      	nop
  }

  return ret;
 8009880:	7bfb      	ldrb	r3, [r7, #15]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop

0800988c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098a2:	2b40      	cmp	r3, #64	@ 0x40
 80098a4:	d005      	beq.n	80098b2 <USBD_StdItfReq+0x26>
 80098a6:	2b40      	cmp	r3, #64	@ 0x40
 80098a8:	d852      	bhi.n	8009950 <USBD_StdItfReq+0xc4>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <USBD_StdItfReq+0x26>
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	d14e      	bne.n	8009950 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	3b01      	subs	r3, #1
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d840      	bhi.n	8009942 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	889b      	ldrh	r3, [r3, #4]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d836      	bhi.n	8009938 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	889b      	ldrh	r3, [r3, #4]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff fedb 	bl	800968e <USBD_CoreFindIF>
 80098d8:	4603      	mov	r3, r0
 80098da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2bff      	cmp	r3, #255	@ 0xff
 80098e0:	d01d      	beq.n	800991e <USBD_StdItfReq+0x92>
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d11a      	bne.n	800991e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80098e8:	7bba      	ldrb	r2, [r7, #14]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	32ae      	adds	r2, #174	@ 0xae
 80098ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00f      	beq.n	8009918 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80098f8:	7bba      	ldrb	r2, [r7, #14]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009900:	7bba      	ldrb	r2, [r7, #14]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	32ae      	adds	r2, #174	@ 0xae
 8009906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
 8009912:	4603      	mov	r3, r0
 8009914:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009916:	e004      	b.n	8009922 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009918:	2303      	movs	r3, #3
 800991a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800991c:	e001      	b.n	8009922 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800991e:	2303      	movs	r3, #3
 8009920:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	88db      	ldrh	r3, [r3, #6]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d110      	bne.n	800994c <USBD_StdItfReq+0xc0>
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10d      	bne.n	800994c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fde0 	bl	800a4f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009936:	e009      	b.n	800994c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fd21 	bl	800a382 <USBD_CtlError>
          break;
 8009940:	e004      	b.n	800994c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fd1c 	bl	800a382 <USBD_CtlError>
          break;
 800994a:	e000      	b.n	800994e <USBD_StdItfReq+0xc2>
          break;
 800994c:	bf00      	nop
      }
      break;
 800994e:	e004      	b.n	800995a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fd15 	bl	800a382 <USBD_CtlError>
      break;
 8009958:	bf00      	nop
  }

  return ret;
 800995a:	7bfb      	ldrb	r3, [r7, #15]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	889b      	ldrh	r3, [r3, #4]
 8009976:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009980:	2b40      	cmp	r3, #64	@ 0x40
 8009982:	d007      	beq.n	8009994 <USBD_StdEPReq+0x30>
 8009984:	2b40      	cmp	r3, #64	@ 0x40
 8009986:	f200 817f 	bhi.w	8009c88 <USBD_StdEPReq+0x324>
 800998a:	2b00      	cmp	r3, #0
 800998c:	d02a      	beq.n	80099e4 <USBD_StdEPReq+0x80>
 800998e:	2b20      	cmp	r3, #32
 8009990:	f040 817a 	bne.w	8009c88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	4619      	mov	r1, r3
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7ff fe85 	bl	80096a8 <USBD_CoreFindEP>
 800999e:	4603      	mov	r3, r0
 80099a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099a2:	7b7b      	ldrb	r3, [r7, #13]
 80099a4:	2bff      	cmp	r3, #255	@ 0xff
 80099a6:	f000 8174 	beq.w	8009c92 <USBD_StdEPReq+0x32e>
 80099aa:	7b7b      	ldrb	r3, [r7, #13]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f040 8170 	bne.w	8009c92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099b2:	7b7a      	ldrb	r2, [r7, #13]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80099ba:	7b7a      	ldrb	r2, [r7, #13]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	32ae      	adds	r2, #174	@ 0xae
 80099c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 8163 	beq.w	8009c92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80099cc:	7b7a      	ldrb	r2, [r7, #13]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	32ae      	adds	r2, #174	@ 0xae
 80099d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099e2:	e156      	b.n	8009c92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	785b      	ldrb	r3, [r3, #1]
 80099e8:	2b03      	cmp	r3, #3
 80099ea:	d008      	beq.n	80099fe <USBD_StdEPReq+0x9a>
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	f300 8145 	bgt.w	8009c7c <USBD_StdEPReq+0x318>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 809b 	beq.w	8009b2e <USBD_StdEPReq+0x1ca>
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d03c      	beq.n	8009a76 <USBD_StdEPReq+0x112>
 80099fc:	e13e      	b.n	8009c7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d002      	beq.n	8009a10 <USBD_StdEPReq+0xac>
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d016      	beq.n	8009a3c <USBD_StdEPReq+0xd8>
 8009a0e:	e02c      	b.n	8009a6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00d      	beq.n	8009a32 <USBD_StdEPReq+0xce>
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	2b80      	cmp	r3, #128	@ 0x80
 8009a1a:	d00a      	beq.n	8009a32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a1c:	7bbb      	ldrb	r3, [r7, #14]
 8009a1e:	4619      	mov	r1, r3
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 f93b 	bl	800ac9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a26:	2180      	movs	r1, #128	@ 0x80
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 f937 	bl	800ac9c <USBD_LL_StallEP>
 8009a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a30:	e020      	b.n	8009a74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fca4 	bl	800a382 <USBD_CtlError>
              break;
 8009a3a:	e01b      	b.n	8009a74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	885b      	ldrh	r3, [r3, #2]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10e      	bne.n	8009a62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00b      	beq.n	8009a62 <USBD_StdEPReq+0xfe>
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
 8009a4c:	2b80      	cmp	r3, #128	@ 0x80
 8009a4e:	d008      	beq.n	8009a62 <USBD_StdEPReq+0xfe>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	88db      	ldrh	r3, [r3, #6]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d104      	bne.n	8009a62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 f91d 	bl	800ac9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fd47 	bl	800a4f6 <USBD_CtlSendStatus>

              break;
 8009a68:	e004      	b.n	8009a74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fc88 	bl	800a382 <USBD_CtlError>
              break;
 8009a72:	bf00      	nop
          }
          break;
 8009a74:	e107      	b.n	8009c86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d002      	beq.n	8009a88 <USBD_StdEPReq+0x124>
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d016      	beq.n	8009ab4 <USBD_StdEPReq+0x150>
 8009a86:	e04b      	b.n	8009b20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00d      	beq.n	8009aaa <USBD_StdEPReq+0x146>
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
 8009a90:	2b80      	cmp	r3, #128	@ 0x80
 8009a92:	d00a      	beq.n	8009aaa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 f8ff 	bl	800ac9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a9e:	2180      	movs	r1, #128	@ 0x80
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f001 f8fb 	bl	800ac9c <USBD_LL_StallEP>
 8009aa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009aa8:	e040      	b.n	8009b2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fc68 	bl	800a382 <USBD_CtlError>
              break;
 8009ab2:	e03b      	b.n	8009b2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	885b      	ldrh	r3, [r3, #2]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d136      	bne.n	8009b2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d004      	beq.n	8009ad0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 f905 	bl	800acda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fd10 	bl	800a4f6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff fde4 	bl	80096a8 <USBD_CoreFindEP>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ae4:	7b7b      	ldrb	r3, [r7, #13]
 8009ae6:	2bff      	cmp	r3, #255	@ 0xff
 8009ae8:	d01f      	beq.n	8009b2a <USBD_StdEPReq+0x1c6>
 8009aea:	7b7b      	ldrb	r3, [r7, #13]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d11c      	bne.n	8009b2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009af0:	7b7a      	ldrb	r2, [r7, #13]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009af8:	7b7a      	ldrb	r2, [r7, #13]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	32ae      	adds	r2, #174	@ 0xae
 8009afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d010      	beq.n	8009b2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b08:	7b7a      	ldrb	r2, [r7, #13]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	32ae      	adds	r2, #174	@ 0xae
 8009b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	4798      	blx	r3
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b1e:	e004      	b.n	8009b2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fc2d 	bl	800a382 <USBD_CtlError>
              break;
 8009b28:	e000      	b.n	8009b2c <USBD_StdEPReq+0x1c8>
              break;
 8009b2a:	bf00      	nop
          }
          break;
 8009b2c:	e0ab      	b.n	8009c86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d002      	beq.n	8009b40 <USBD_StdEPReq+0x1dc>
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d032      	beq.n	8009ba4 <USBD_StdEPReq+0x240>
 8009b3e:	e097      	b.n	8009c70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d007      	beq.n	8009b56 <USBD_StdEPReq+0x1f2>
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	2b80      	cmp	r3, #128	@ 0x80
 8009b4a:	d004      	beq.n	8009b56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fc17 	bl	800a382 <USBD_CtlError>
                break;
 8009b54:	e091      	b.n	8009c7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	da0b      	bge.n	8009b76 <USBD_StdEPReq+0x212>
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
 8009b60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	3310      	adds	r3, #16
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	4413      	add	r3, r2
 8009b72:	3304      	adds	r3, #4
 8009b74:	e00b      	b.n	8009b8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2202      	movs	r2, #2
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fc6d 	bl	800a47c <USBD_CtlSendData>
              break;
 8009ba2:	e06a      	b.n	8009c7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	da11      	bge.n	8009bd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	f003 020f 	and.w	r2, r3, #15
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	440b      	add	r3, r1
 8009bbe:	3324      	adds	r3, #36	@ 0x24
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d117      	bne.n	8009bf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fbda 	bl	800a382 <USBD_CtlError>
                  break;
 8009bce:	e054      	b.n	8009c7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	f003 020f 	and.w	r2, r3, #15
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	440b      	add	r3, r1
 8009be2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d104      	bne.n	8009bf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fbc7 	bl	800a382 <USBD_CtlError>
                  break;
 8009bf4:	e041      	b.n	8009c7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da0b      	bge.n	8009c16 <USBD_StdEPReq+0x2b2>
 8009bfe:	7bbb      	ldrb	r3, [r7, #14]
 8009c00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c04:	4613      	mov	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	3310      	adds	r3, #16
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	4413      	add	r3, r2
 8009c12:	3304      	adds	r3, #4
 8009c14:	e00b      	b.n	8009c2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <USBD_StdEPReq+0x2d8>
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	2b80      	cmp	r3, #128	@ 0x80
 8009c3a:	d103      	bne.n	8009c44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e00e      	b.n	8009c62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c44:	7bbb      	ldrb	r3, [r7, #14]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 f865 	bl	800ad18 <USBD_LL_IsStallEP>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2201      	movs	r2, #1
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	e002      	b.n	8009c62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2202      	movs	r2, #2
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fc07 	bl	800a47c <USBD_CtlSendData>
              break;
 8009c6e:	e004      	b.n	8009c7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fb85 	bl	800a382 <USBD_CtlError>
              break;
 8009c78:	bf00      	nop
          }
          break;
 8009c7a:	e004      	b.n	8009c86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fb7f 	bl	800a382 <USBD_CtlError>
          break;
 8009c84:	bf00      	nop
      }
      break;
 8009c86:	e005      	b.n	8009c94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fb79 	bl	800a382 <USBD_CtlError>
      break;
 8009c90:	e000      	b.n	8009c94 <USBD_StdEPReq+0x330>
      break;
 8009c92:	bf00      	nop
  }

  return ret;
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
	...

08009ca0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	885b      	ldrh	r3, [r3, #2]
 8009cba:	0a1b      	lsrs	r3, r3, #8
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	2b0e      	cmp	r3, #14
 8009cc2:	f200 8152 	bhi.w	8009f6a <USBD_GetDescriptor+0x2ca>
 8009cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ccc <USBD_GetDescriptor+0x2c>)
 8009cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ccc:	08009d3d 	.word	0x08009d3d
 8009cd0:	08009d55 	.word	0x08009d55
 8009cd4:	08009d95 	.word	0x08009d95
 8009cd8:	08009f6b 	.word	0x08009f6b
 8009cdc:	08009f6b 	.word	0x08009f6b
 8009ce0:	08009f0b 	.word	0x08009f0b
 8009ce4:	08009f37 	.word	0x08009f37
 8009ce8:	08009f6b 	.word	0x08009f6b
 8009cec:	08009f6b 	.word	0x08009f6b
 8009cf0:	08009f6b 	.word	0x08009f6b
 8009cf4:	08009f6b 	.word	0x08009f6b
 8009cf8:	08009f6b 	.word	0x08009f6b
 8009cfc:	08009f6b 	.word	0x08009f6b
 8009d00:	08009f6b 	.word	0x08009f6b
 8009d04:	08009d09 	.word	0x08009d09
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00b      	beq.n	8009d2c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	7c12      	ldrb	r2, [r2, #16]
 8009d20:	f107 0108 	add.w	r1, r7, #8
 8009d24:	4610      	mov	r0, r2
 8009d26:	4798      	blx	r3
 8009d28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d2a:	e126      	b.n	8009f7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fb27 	bl	800a382 <USBD_CtlError>
        err++;
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	3301      	adds	r3, #1
 8009d38:	72fb      	strb	r3, [r7, #11]
      break;
 8009d3a:	e11e      	b.n	8009f7a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	7c12      	ldrb	r2, [r2, #16]
 8009d48:	f107 0108 	add.w	r1, r7, #8
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	4798      	blx	r3
 8009d50:	60f8      	str	r0, [r7, #12]
      break;
 8009d52:	e112      	b.n	8009f7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	7c1b      	ldrb	r3, [r3, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10d      	bne.n	8009d78 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d64:	f107 0208 	add.w	r2, r7, #8
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3301      	adds	r3, #1
 8009d72:	2202      	movs	r2, #2
 8009d74:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d76:	e100      	b.n	8009f7a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d80:	f107 0208 	add.w	r2, r7, #8
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3
 8009d88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	2202      	movs	r2, #2
 8009d90:	701a      	strb	r2, [r3, #0]
      break;
 8009d92:	e0f2      	b.n	8009f7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	885b      	ldrh	r3, [r3, #2]
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b05      	cmp	r3, #5
 8009d9c:	f200 80ac 	bhi.w	8009ef8 <USBD_GetDescriptor+0x258>
 8009da0:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <USBD_GetDescriptor+0x108>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009dc1 	.word	0x08009dc1
 8009dac:	08009df5 	.word	0x08009df5
 8009db0:	08009e29 	.word	0x08009e29
 8009db4:	08009e5d 	.word	0x08009e5d
 8009db8:	08009e91 	.word	0x08009e91
 8009dbc:	08009ec5 	.word	0x08009ec5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00b      	beq.n	8009de4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	7c12      	ldrb	r2, [r2, #16]
 8009dd8:	f107 0108 	add.w	r1, r7, #8
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
 8009de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009de2:	e091      	b.n	8009f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 facb 	bl	800a382 <USBD_CtlError>
            err++;
 8009dec:	7afb      	ldrb	r3, [r7, #11]
 8009dee:	3301      	adds	r3, #1
 8009df0:	72fb      	strb	r3, [r7, #11]
          break;
 8009df2:	e089      	b.n	8009f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	7c12      	ldrb	r2, [r2, #16]
 8009e0c:	f107 0108 	add.w	r1, r7, #8
 8009e10:	4610      	mov	r0, r2
 8009e12:	4798      	blx	r3
 8009e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e16:	e077      	b.n	8009f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fab1 	bl	800a382 <USBD_CtlError>
            err++;
 8009e20:	7afb      	ldrb	r3, [r7, #11]
 8009e22:	3301      	adds	r3, #1
 8009e24:	72fb      	strb	r3, [r7, #11]
          break;
 8009e26:	e06f      	b.n	8009f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	7c12      	ldrb	r2, [r2, #16]
 8009e40:	f107 0108 	add.w	r1, r7, #8
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
 8009e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e4a:	e05d      	b.n	8009f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fa97 	bl	800a382 <USBD_CtlError>
            err++;
 8009e54:	7afb      	ldrb	r3, [r7, #11]
 8009e56:	3301      	adds	r3, #1
 8009e58:	72fb      	strb	r3, [r7, #11]
          break;
 8009e5a:	e055      	b.n	8009f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00b      	beq.n	8009e80 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	7c12      	ldrb	r2, [r2, #16]
 8009e74:	f107 0108 	add.w	r1, r7, #8
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
 8009e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7e:	e043      	b.n	8009f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa7d 	bl	800a382 <USBD_CtlError>
            err++;
 8009e88:	7afb      	ldrb	r3, [r7, #11]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e8e:	e03b      	b.n	8009f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00b      	beq.n	8009eb4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	7c12      	ldrb	r2, [r2, #16]
 8009ea8:	f107 0108 	add.w	r1, r7, #8
 8009eac:	4610      	mov	r0, r2
 8009eae:	4798      	blx	r3
 8009eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eb2:	e029      	b.n	8009f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fa63 	bl	800a382 <USBD_CtlError>
            err++;
 8009ebc:	7afb      	ldrb	r3, [r7, #11]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ec2:	e021      	b.n	8009f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00b      	beq.n	8009ee8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	7c12      	ldrb	r2, [r2, #16]
 8009edc:	f107 0108 	add.w	r1, r7, #8
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	4798      	blx	r3
 8009ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ee6:	e00f      	b.n	8009f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa49 	bl	800a382 <USBD_CtlError>
            err++;
 8009ef0:	7afb      	ldrb	r3, [r7, #11]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ef6:	e007      	b.n	8009f08 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fa41 	bl	800a382 <USBD_CtlError>
          err++;
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	3301      	adds	r3, #1
 8009f04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f06:	bf00      	nop
      }
      break;
 8009f08:	e037      	b.n	8009f7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	7c1b      	ldrb	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d109      	bne.n	8009f26 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1a:	f107 0208 	add.w	r2, r7, #8
 8009f1e:	4610      	mov	r0, r2
 8009f20:	4798      	blx	r3
 8009f22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f24:	e029      	b.n	8009f7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fa2a 	bl	800a382 <USBD_CtlError>
        err++;
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	3301      	adds	r3, #1
 8009f32:	72fb      	strb	r3, [r7, #11]
      break;
 8009f34:	e021      	b.n	8009f7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	7c1b      	ldrb	r3, [r3, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10d      	bne.n	8009f5a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f46:	f107 0208 	add.w	r2, r7, #8
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	4798      	blx	r3
 8009f4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3301      	adds	r3, #1
 8009f54:	2207      	movs	r2, #7
 8009f56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f58:	e00f      	b.n	8009f7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fa10 	bl	800a382 <USBD_CtlError>
        err++;
 8009f62:	7afb      	ldrb	r3, [r7, #11]
 8009f64:	3301      	adds	r3, #1
 8009f66:	72fb      	strb	r3, [r7, #11]
      break;
 8009f68:	e007      	b.n	8009f7a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fa08 	bl	800a382 <USBD_CtlError>
      err++;
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	3301      	adds	r3, #1
 8009f76:	72fb      	strb	r3, [r7, #11]
      break;
 8009f78:	bf00      	nop
  }

  if (err != 0U)
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d11e      	bne.n	8009fbe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	88db      	ldrh	r3, [r3, #6]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d016      	beq.n	8009fb6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009f88:	893b      	ldrh	r3, [r7, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00e      	beq.n	8009fac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	88da      	ldrh	r2, [r3, #6]
 8009f92:	893b      	ldrh	r3, [r7, #8]
 8009f94:	4293      	cmp	r3, r2
 8009f96:	bf28      	it	cs
 8009f98:	4613      	movcs	r3, r2
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f9e:	893b      	ldrh	r3, [r7, #8]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	68f9      	ldr	r1, [r7, #12]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fa69 	bl	800a47c <USBD_CtlSendData>
 8009faa:	e009      	b.n	8009fc0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f9e7 	bl	800a382 <USBD_CtlError>
 8009fb4:	e004      	b.n	8009fc0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fa9d 	bl	800a4f6 <USBD_CtlSendStatus>
 8009fbc:	e000      	b.n	8009fc0 <USBD_GetDescriptor+0x320>
    return;
 8009fbe:	bf00      	nop
  }
}
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop

08009fc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	889b      	ldrh	r3, [r3, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d131      	bne.n	800a03e <USBD_SetAddress+0x76>
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	88db      	ldrh	r3, [r3, #6]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d12d      	bne.n	800a03e <USBD_SetAddress+0x76>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	885b      	ldrh	r3, [r3, #2]
 8009fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fe8:	d829      	bhi.n	800a03e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	885b      	ldrh	r3, [r3, #2]
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ff4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d104      	bne.n	800a00c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f9bc 	bl	800a382 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a00a:	e01d      	b.n	800a048 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	7bfa      	ldrb	r2, [r7, #15]
 800a010:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a014:	7bfb      	ldrb	r3, [r7, #15]
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fea9 	bl	800ad70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fa69 	bl	800a4f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d004      	beq.n	800a034 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2202      	movs	r2, #2
 800a02e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a032:	e009      	b.n	800a048 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03c:	e004      	b.n	800a048 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f99e 	bl	800a382 <USBD_CtlError>
  }
}
 800a046:	bf00      	nop
 800a048:	bf00      	nop
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	885b      	ldrh	r3, [r3, #2]
 800a062:	b2da      	uxtb	r2, r3
 800a064:	4b4e      	ldr	r3, [pc, #312]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a066:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a068:	4b4d      	ldr	r3, [pc, #308]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d905      	bls.n	800a07c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f985 	bl	800a382 <USBD_CtlError>
    return USBD_FAIL;
 800a078:	2303      	movs	r3, #3
 800a07a:	e08c      	b.n	800a196 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b02      	cmp	r3, #2
 800a086:	d002      	beq.n	800a08e <USBD_SetConfig+0x3e>
 800a088:	2b03      	cmp	r3, #3
 800a08a:	d029      	beq.n	800a0e0 <USBD_SetConfig+0x90>
 800a08c:	e075      	b.n	800a17a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a08e:	4b44      	ldr	r3, [pc, #272]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d020      	beq.n	800a0d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a096:	4b42      	ldr	r3, [pc, #264]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0a0:	4b3f      	ldr	r3, [pc, #252]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7fe ffb9 	bl	800901e <USBD_SetClassConfig>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d008      	beq.n	800a0c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f962 	bl	800a382 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0c6:	e065      	b.n	800a194 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fa14 	bl	800a4f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2203      	movs	r2, #3
 800a0d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a0d6:	e05d      	b.n	800a194 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fa0c 	bl	800a4f6 <USBD_CtlSendStatus>
      break;
 800a0de:	e059      	b.n	800a194 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0e0:	4b2f      	ldr	r3, [pc, #188]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d112      	bne.n	800a10e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a0f0:	4b2b      	ldr	r3, [pc, #172]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0fa:	4b29      	ldr	r3, [pc, #164]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7fe ffa8 	bl	8009056 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f9f5 	bl	800a4f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a10c:	e042      	b.n	800a194 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a10e:	4b24      	ldr	r3, [pc, #144]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d02a      	beq.n	800a172 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7fe ff96 	bl	8009056 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a12a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a134:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fe ff6f 	bl	800901e <USBD_SetClassConfig>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00f      	beq.n	800a16a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f918 	bl	800a382 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7fe ff7b 	bl	8009056 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2202      	movs	r2, #2
 800a164:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a168:	e014      	b.n	800a194 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f9c3 	bl	800a4f6 <USBD_CtlSendStatus>
      break;
 800a170:	e010      	b.n	800a194 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f9bf 	bl	800a4f6 <USBD_CtlSendStatus>
      break;
 800a178:	e00c      	b.n	800a194 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f900 	bl	800a382 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a182:	4b07      	ldr	r3, [pc, #28]	@ (800a1a0 <USBD_SetConfig+0x150>)
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f7fe ff64 	bl	8009056 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a18e:	2303      	movs	r3, #3
 800a190:	73fb      	strb	r3, [r7, #15]
      break;
 800a192:	bf00      	nop
  }

  return ret;
 800a194:	7bfb      	ldrb	r3, [r7, #15]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	24000594 	.word	0x24000594

0800a1a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	88db      	ldrh	r3, [r3, #6]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d004      	beq.n	800a1c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f8e2 	bl	800a382 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1be:	e023      	b.n	800a208 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	dc02      	bgt.n	800a1d2 <USBD_GetConfig+0x2e>
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dc03      	bgt.n	800a1d8 <USBD_GetConfig+0x34>
 800a1d0:	e015      	b.n	800a1fe <USBD_GetConfig+0x5a>
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d00b      	beq.n	800a1ee <USBD_GetConfig+0x4a>
 800a1d6:	e012      	b.n	800a1fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f948 	bl	800a47c <USBD_CtlSendData>
        break;
 800a1ec:	e00c      	b.n	800a208 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f940 	bl	800a47c <USBD_CtlSendData>
        break;
 800a1fc:	e004      	b.n	800a208 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f8be 	bl	800a382 <USBD_CtlError>
        break;
 800a206:	bf00      	nop
}
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a220:	b2db      	uxtb	r3, r3
 800a222:	3b01      	subs	r3, #1
 800a224:	2b02      	cmp	r3, #2
 800a226:	d81e      	bhi.n	800a266 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	88db      	ldrh	r3, [r3, #6]
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d004      	beq.n	800a23a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f8a5 	bl	800a382 <USBD_CtlError>
        break;
 800a238:	e01a      	b.n	800a270 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f043 0202 	orr.w	r2, r3, #2
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	330c      	adds	r3, #12
 800a25a:	2202      	movs	r2, #2
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f90c 	bl	800a47c <USBD_CtlSendData>
      break;
 800a264:	e004      	b.n	800a270 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f88a 	bl	800a382 <USBD_CtlError>
      break;
 800a26e:	bf00      	nop
  }
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	885b      	ldrh	r3, [r3, #2]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d107      	bne.n	800a29a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f92f 	bl	800a4f6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a298:	e013      	b.n	800a2c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	885b      	ldrh	r3, [r3, #2]
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d10b      	bne.n	800a2ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	889b      	ldrh	r3, [r3, #4]
 800a2a6:	0a1b      	lsrs	r3, r3, #8
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f91f 	bl	800a4f6 <USBD_CtlSendStatus>
}
 800a2b8:	e003      	b.n	800a2c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f860 	bl	800a382 <USBD_CtlError>
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d80b      	bhi.n	800a2fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	885b      	ldrh	r3, [r3, #2]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d10c      	bne.n	800a304 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f8ff 	bl	800a4f6 <USBD_CtlSendStatus>
      }
      break;
 800a2f8:	e004      	b.n	800a304 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f840 	bl	800a382 <USBD_CtlError>
      break;
 800a302:	e000      	b.n	800a306 <USBD_ClrFeature+0x3c>
      break;
 800a304:	bf00      	nop
  }
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3301      	adds	r3, #1
 800a328:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	781a      	ldrb	r2, [r3, #0]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3301      	adds	r3, #1
 800a336:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f7ff fa16 	bl	800976a <SWAPBYTE>
 800a33e:	4603      	mov	r3, r0
 800a340:	461a      	mov	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3301      	adds	r3, #1
 800a34a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3301      	adds	r3, #1
 800a350:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f7ff fa09 	bl	800976a <SWAPBYTE>
 800a358:	4603      	mov	r3, r0
 800a35a:	461a      	mov	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3301      	adds	r3, #1
 800a364:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3301      	adds	r3, #1
 800a36a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f7ff f9fc 	bl	800976a <SWAPBYTE>
 800a372:	4603      	mov	r3, r0
 800a374:	461a      	mov	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	80da      	strh	r2, [r3, #6]
}
 800a37a:	bf00      	nop
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b082      	sub	sp, #8
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a38c:	2180      	movs	r1, #128	@ 0x80
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fc84 	bl	800ac9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a394:	2100      	movs	r1, #0
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fc80 	bl	800ac9c <USBD_LL_StallEP>
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d042      	beq.n	800a440 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a3be:	6938      	ldr	r0, [r7, #16]
 800a3c0:	f000 f842 	bl	800a448 <USBD_GetLen>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3ce:	d808      	bhi.n	800a3e2 <USBD_GetString+0x3e>
 800a3d0:	6938      	ldr	r0, [r7, #16]
 800a3d2:	f000 f839 	bl	800a448 <USBD_GetLen>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	3301      	adds	r3, #1
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	e001      	b.n	800a3e6 <USBD_GetString+0x42>
 800a3e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	7812      	ldrb	r2, [r2, #0]
 800a3f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	4413      	add	r3, r2
 800a402:	2203      	movs	r2, #3
 800a404:	701a      	strb	r2, [r3, #0]
  idx++;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	3301      	adds	r3, #1
 800a40a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a40c:	e013      	b.n	800a436 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	4413      	add	r3, r2
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	7812      	ldrb	r2, [r2, #0]
 800a418:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	3301      	adds	r3, #1
 800a41e:	613b      	str	r3, [r7, #16]
    idx++;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	3301      	adds	r3, #1
 800a424:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	4413      	add	r3, r2
 800a42c:	2200      	movs	r2, #0
 800a42e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	3301      	adds	r3, #1
 800a434:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e7      	bne.n	800a40e <USBD_GetString+0x6a>
 800a43e:	e000      	b.n	800a442 <USBD_GetString+0x9e>
    return;
 800a440:	bf00      	nop
  }
}
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a458:	e005      	b.n	800a466 <USBD_GetLen+0x1e>
  {
    len++;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	3301      	adds	r3, #1
 800a45e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	3301      	adds	r3, #1
 800a464:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1f5      	bne.n	800a45a <USBD_GetLen+0x12>
  }

  return len;
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2202      	movs	r2, #2
 800a48c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 fc83 	bl	800adae <USBD_LL_Transmit>

  return USBD_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	60f8      	str	r0, [r7, #12]
 800a4ba:	60b9      	str	r1, [r7, #8]
 800a4bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 fc72 	bl	800adae <USBD_LL_Transmit>

  return USBD_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 fc82 	bl	800adf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2204      	movs	r2, #4
 800a502:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a506:	2300      	movs	r3, #0
 800a508:	2200      	movs	r2, #0
 800a50a:	2100      	movs	r1, #0
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fc4e 	bl	800adae <USBD_LL_Transmit>

  return USBD_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2205      	movs	r2, #5
 800a528:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a52c:	2300      	movs	r3, #0
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fc5c 	bl	800adf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a548:	2201      	movs	r2, #1
 800a54a:	490f      	ldr	r1, [pc, #60]	@ (800a588 <MX_USB_DEVICE_Init+0x44>)
 800a54c:	480f      	ldr	r0, [pc, #60]	@ (800a58c <MX_USB_DEVICE_Init+0x48>)
 800a54e:	f7fe fce9 	bl	8008f24 <USBD_Init>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a558:	f7f6 ff18 	bl	800138c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800a55c:	490c      	ldr	r1, [pc, #48]	@ (800a590 <MX_USB_DEVICE_Init+0x4c>)
 800a55e:	480b      	ldr	r0, [pc, #44]	@ (800a58c <MX_USB_DEVICE_Init+0x48>)
 800a560:	f7fe fd10 	bl	8008f84 <USBD_RegisterClass>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a56a:	f7f6 ff0f 	bl	800138c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a56e:	4807      	ldr	r0, [pc, #28]	@ (800a58c <MX_USB_DEVICE_Init+0x48>)
 800a570:	f7fe fd3e 	bl	8008ff0 <USBD_Start>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a57a:	f7f6 ff07 	bl	800138c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a57e:	f7f8 ff79 	bl	8003474 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a582:	bf00      	nop
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	24000274 	.word	0x24000274
 800a58c:	24000598 	.word	0x24000598
 800a590:	240001c0 	.word	0x240001c0

0800a594 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4603      	mov	r3, r0
 800a59c:	6039      	str	r1, [r7, #0]
 800a59e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2212      	movs	r2, #18
 800a5a4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a5a6:	4b03      	ldr	r3, [pc, #12]	@ (800a5b4 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	24000294 	.word	0x24000294

0800a5b8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	6039      	str	r1, [r7, #0]
 800a5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2204      	movs	r2, #4
 800a5c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5ca:	4b03      	ldr	r3, [pc, #12]	@ (800a5d8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	240002a8 	.word	0x240002a8

0800a5dc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d105      	bne.n	800a5fa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	4907      	ldr	r1, [pc, #28]	@ (800a610 <USBD_HS_ProductStrDescriptor+0x34>)
 800a5f2:	4808      	ldr	r0, [pc, #32]	@ (800a614 <USBD_HS_ProductStrDescriptor+0x38>)
 800a5f4:	f7ff fed6 	bl	800a3a4 <USBD_GetString>
 800a5f8:	e004      	b.n	800a604 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	4904      	ldr	r1, [pc, #16]	@ (800a610 <USBD_HS_ProductStrDescriptor+0x34>)
 800a5fe:	4805      	ldr	r0, [pc, #20]	@ (800a614 <USBD_HS_ProductStrDescriptor+0x38>)
 800a600:	f7ff fed0 	bl	800a3a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a604:	4b02      	ldr	r3, [pc, #8]	@ (800a610 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a606:	4618      	mov	r0, r3
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	24000874 	.word	0x24000874
 800a614:	0800b8f0 	.word	0x0800b8f0

0800a618 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	6039      	str	r1, [r7, #0]
 800a622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	4904      	ldr	r1, [pc, #16]	@ (800a638 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a628:	4804      	ldr	r0, [pc, #16]	@ (800a63c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a62a:	f7ff febb 	bl	800a3a4 <USBD_GetString>
  return USBD_StrDesc;
 800a62e:	4b02      	ldr	r3, [pc, #8]	@ (800a638 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	24000874 	.word	0x24000874
 800a63c:	0800b908 	.word	0x0800b908

0800a640 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	6039      	str	r1, [r7, #0]
 800a64a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	221a      	movs	r2, #26
 800a650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a652:	f000 f843 	bl	800a6dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a656:	4b02      	ldr	r3, [pc, #8]	@ (800a660 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	240002ac 	.word	0x240002ac

0800a664 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	6039      	str	r1, [r7, #0]
 800a66e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a670:	79fb      	ldrb	r3, [r7, #7]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d105      	bne.n	800a682 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	4907      	ldr	r1, [pc, #28]	@ (800a698 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a67a:	4808      	ldr	r0, [pc, #32]	@ (800a69c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a67c:	f7ff fe92 	bl	800a3a4 <USBD_GetString>
 800a680:	e004      	b.n	800a68c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	4904      	ldr	r1, [pc, #16]	@ (800a698 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a686:	4805      	ldr	r0, [pc, #20]	@ (800a69c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a688:	f7ff fe8c 	bl	800a3a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a68c:	4b02      	ldr	r3, [pc, #8]	@ (800a698 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	24000874 	.word	0x24000874
 800a69c:	0800b91c 	.word	0x0800b91c

0800a6a0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	6039      	str	r1, [r7, #0]
 800a6aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d105      	bne.n	800a6be <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4907      	ldr	r1, [pc, #28]	@ (800a6d4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a6b6:	4808      	ldr	r0, [pc, #32]	@ (800a6d8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a6b8:	f7ff fe74 	bl	800a3a4 <USBD_GetString>
 800a6bc:	e004      	b.n	800a6c8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	4904      	ldr	r1, [pc, #16]	@ (800a6d4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a6c2:	4805      	ldr	r0, [pc, #20]	@ (800a6d8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a6c4:	f7ff fe6e 	bl	800a3a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6c8:	4b02      	ldr	r3, [pc, #8]	@ (800a6d4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	24000874 	.word	0x24000874
 800a6d8:	0800b928 	.word	0x0800b928

0800a6dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a720 <Get_SerialNum+0x44>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a724 <Get_SerialNum+0x48>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a728 <Get_SerialNum+0x4c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d009      	beq.n	800a716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a702:	2208      	movs	r2, #8
 800a704:	4909      	ldr	r1, [pc, #36]	@ (800a72c <Get_SerialNum+0x50>)
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 f814 	bl	800a734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a70c:	2204      	movs	r2, #4
 800a70e:	4908      	ldr	r1, [pc, #32]	@ (800a730 <Get_SerialNum+0x54>)
 800a710:	68b8      	ldr	r0, [r7, #8]
 800a712:	f000 f80f 	bl	800a734 <IntToUnicode>
  }
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	1ff1e800 	.word	0x1ff1e800
 800a724:	1ff1e804 	.word	0x1ff1e804
 800a728:	1ff1e808 	.word	0x1ff1e808
 800a72c:	240002ae 	.word	0x240002ae
 800a730:	240002be 	.word	0x240002be

0800a734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	4613      	mov	r3, r2
 800a740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a746:	2300      	movs	r3, #0
 800a748:	75fb      	strb	r3, [r7, #23]
 800a74a:	e027      	b.n	800a79c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	0f1b      	lsrs	r3, r3, #28
 800a750:	2b09      	cmp	r3, #9
 800a752:	d80b      	bhi.n	800a76c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	0f1b      	lsrs	r3, r3, #28
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	4619      	mov	r1, r3
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	440b      	add	r3, r1
 800a764:	3230      	adds	r2, #48	@ 0x30
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	701a      	strb	r2, [r3, #0]
 800a76a:	e00a      	b.n	800a782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	0f1b      	lsrs	r3, r3, #28
 800a770:	b2da      	uxtb	r2, r3
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	4619      	mov	r1, r3
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	440b      	add	r3, r1
 800a77c:	3237      	adds	r2, #55	@ 0x37
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	011b      	lsls	r3, r3, #4
 800a786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	3301      	adds	r3, #1
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	4413      	add	r3, r2
 800a792:	2200      	movs	r2, #0
 800a794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	3301      	adds	r3, #1
 800a79a:	75fb      	strb	r3, [r7, #23]
 800a79c:	7dfa      	ldrb	r2, [r7, #23]
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d3d3      	bcc.n	800a74c <IntToUnicode+0x18>
  }
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b0bc      	sub	sp, #240	@ 0xf0
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	605a      	str	r2, [r3, #4]
 800a7c6:	609a      	str	r2, [r3, #8]
 800a7c8:	60da      	str	r2, [r3, #12]
 800a7ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a7cc:	f107 0320 	add.w	r3, r7, #32
 800a7d0:	22b8      	movs	r2, #184	@ 0xb8
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 fb91 	bl	800aefc <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a58      	ldr	r2, [pc, #352]	@ (800a940 <HAL_PCD_MspInit+0x18c>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	f040 80a9 	bne.w	800a938 <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a7e6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a7ea:	f04f 0300 	mov.w	r3, #0
 800a7ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a7f2:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a7f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a7fa:	f107 0320 	add.w	r3, r7, #32
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f9 fdae 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800a80a:	f7f6 fdbf 	bl	800138c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a80e:	f7f8 fe31 	bl	8003474 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a812:	4b4c      	ldr	r3, [pc, #304]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a818:	4a4a      	ldr	r2, [pc, #296]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a81a:	f043 0304 	orr.w	r3, r3, #4
 800a81e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a822:	4b48      	ldr	r3, [pc, #288]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	61fb      	str	r3, [r7, #28]
 800a82e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a830:	4b44      	ldr	r3, [pc, #272]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a836:	4a43      	ldr	r2, [pc, #268]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a838:	f043 0301 	orr.w	r3, r3, #1
 800a83c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a840:	4b40      	ldr	r3, [pc, #256]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	61bb      	str	r3, [r7, #24]
 800a84c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a84e:	4b3d      	ldr	r3, [pc, #244]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a854:	4a3b      	ldr	r2, [pc, #236]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a856:	f043 0302 	orr.w	r3, r3, #2
 800a85a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a85e:	4b39      	ldr	r3, [pc, #228]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	617b      	str	r3, [r7, #20]
 800a86a:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800a86c:	230d      	movs	r3, #13
 800a86e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a872:	2302      	movs	r3, #2
 800a874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a87e:	2302      	movs	r3, #2
 800a880:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a884:	230a      	movs	r3, #10
 800a886:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a88a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a88e:	4619      	mov	r1, r3
 800a890:	482d      	ldr	r0, [pc, #180]	@ (800a948 <HAL_PCD_MspInit+0x194>)
 800a892:	f7f7 f985 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800a896:	2328      	movs	r3, #40	@ 0x28
 800a898:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a89c:	2302      	movs	r3, #2
 800a89e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a8ae:	230a      	movs	r3, #10
 800a8b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4824      	ldr	r0, [pc, #144]	@ (800a94c <HAL_PCD_MspInit+0x198>)
 800a8bc:	f7f7 f970 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800a8c0:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800a8c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a8da:	230a      	movs	r3, #10
 800a8dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	481a      	ldr	r0, [pc, #104]	@ (800a950 <HAL_PCD_MspInit+0x19c>)
 800a8e8:	f7f7 f95a 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a8ec:	4b15      	ldr	r3, [pc, #84]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a8ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a8f2:	4a14      	ldr	r2, [pc, #80]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a8f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a8f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a8fc:	4b11      	ldr	r3, [pc, #68]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a8fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a906:	613b      	str	r3, [r7, #16]
 800a908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800a90a:	4b0e      	ldr	r3, [pc, #56]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a90c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a910:	4a0c      	ldr	r2, [pc, #48]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a912:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a916:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a91a:	4b0a      	ldr	r3, [pc, #40]	@ (800a944 <HAL_PCD_MspInit+0x190>)
 800a91c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a920:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a928:	2200      	movs	r2, #0
 800a92a:	2100      	movs	r1, #0
 800a92c:	204d      	movs	r0, #77	@ 0x4d
 800a92e:	f7f7 f88a 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a932:	204d      	movs	r0, #77	@ 0x4d
 800a934:	f7f7 f8a1 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a938:	bf00      	nop
 800a93a:	37f0      	adds	r7, #240	@ 0xf0
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	40040000 	.word	0x40040000
 800a944:	58024400 	.word	0x58024400
 800a948:	58020800 	.word	0x58020800
 800a94c:	58020000 	.word	0x58020000
 800a950:	58020400 	.word	0x58020400

0800a954 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a968:	4619      	mov	r1, r3
 800a96a:	4610      	mov	r0, r2
 800a96c:	f7fe fb8d 	bl	800908a <USBD_LL_SetupStage>
}
 800a970:	bf00      	nop
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a98a:	78fa      	ldrb	r2, [r7, #3]
 800a98c:	6879      	ldr	r1, [r7, #4]
 800a98e:	4613      	mov	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	4413      	add	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	440b      	add	r3, r1
 800a998:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	78fb      	ldrb	r3, [r7, #3]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f7fe fbc7 	bl	8009134 <USBD_LL_DataOutStage>
}
 800a9a6:	bf00      	nop
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	00db      	lsls	r3, r3, #3
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	440b      	add	r3, r1
 800a9ce:	3320      	adds	r3, #32
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	78fb      	ldrb	r3, [r7, #3]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f7fe fc60 	bl	800929a <USBD_LL_DataInStage>
}
 800a9da:	bf00      	nop
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b082      	sub	sp, #8
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe fd9a 	bl	800952a <USBD_LL_SOF>
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa06:	2301      	movs	r3, #1
 800aa08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	79db      	ldrb	r3, [r3, #7]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d102      	bne.n	800aa18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa12:	2300      	movs	r3, #0
 800aa14:	73fb      	strb	r3, [r7, #15]
 800aa16:	e008      	b.n	800aa2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	79db      	ldrb	r3, [r3, #7]
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d102      	bne.n	800aa26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa20:	2301      	movs	r3, #1
 800aa22:	73fb      	strb	r3, [r7, #15]
 800aa24:	e001      	b.n	800aa2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa26:	f7f6 fcb1 	bl	800138c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa30:	7bfa      	ldrb	r2, [r7, #15]
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fd34 	bl	80094a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe fcdc 	bl	80093fe <USBD_LL_Reset>
}
 800aa46:	bf00      	nop
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fe fd2f 	bl	80094c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	6812      	ldr	r2, [r2, #0]
 800aa72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa76:	f043 0301 	orr.w	r3, r3, #1
 800aa7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	7adb      	ldrb	r3, [r3, #11]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d005      	beq.n	800aa90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa84:	4b04      	ldr	r3, [pc, #16]	@ (800aa98 <HAL_PCD_SuspendCallback+0x48>)
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	4a03      	ldr	r2, [pc, #12]	@ (800aa98 <HAL_PCD_SuspendCallback+0x48>)
 800aa8a:	f043 0306 	orr.w	r3, r3, #6
 800aa8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	e000ed00 	.word	0xe000ed00

0800aa9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fe fd25 	bl	80094fa <USBD_LL_Resume>
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaca:	78fa      	ldrb	r2, [r7, #3]
 800aacc:	4611      	mov	r1, r2
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fe fd7d 	bl	80095ce <USBD_LL_IsoOUTIncomplete>
}
 800aad4:	bf00      	nop
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	460b      	mov	r3, r1
 800aae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaee:	78fa      	ldrb	r2, [r7, #3]
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe fd39 	bl	800956a <USBD_LL_IsoINIncomplete>
}
 800aaf8:	bf00      	nop
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fe fd8f 	bl	8009632 <USBD_LL_DevConnected>
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fd8c 	bl	8009648 <USBD_LL_DevDisconnected>
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d140      	bne.n	800abca <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ab48:	4a22      	ldr	r2, [pc, #136]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a20      	ldr	r2, [pc, #128]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ab58:	4b1e      	ldr	r3, [pc, #120]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab5a:	4a1f      	ldr	r2, [pc, #124]	@ (800abd8 <USBD_LL_Init+0xa0>)
 800ab5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800ab5e:	4b1d      	ldr	r3, [pc, #116]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab60:	2209      	movs	r2, #9
 800ab62:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800ab64:	4b1b      	ldr	r3, [pc, #108]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ab6a:	4b1a      	ldr	r3, [pc, #104]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800ab70:	4b18      	ldr	r3, [pc, #96]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab72:	2201      	movs	r2, #1
 800ab74:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ab76:	4b17      	ldr	r3, [pc, #92]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ab7c:	4b15      	ldr	r3, [pc, #84]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800ab82:	4b14      	ldr	r3, [pc, #80]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ab88:	4b12      	ldr	r3, [pc, #72]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ab8e:	4b11      	ldr	r3, [pc, #68]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ab94:	4b0f      	ldr	r3, [pc, #60]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ab9a:	480e      	ldr	r0, [pc, #56]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800ab9c:	f7f7 f9a8 	bl	8001ef0 <HAL_PCD_Init>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800aba6:	f7f6 fbf1 	bl	800138c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800abaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800abae:	4809      	ldr	r0, [pc, #36]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800abb0:	f7f8 fbe5 	bl	800337e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800abb4:	2280      	movs	r2, #128	@ 0x80
 800abb6:	2100      	movs	r1, #0
 800abb8:	4806      	ldr	r0, [pc, #24]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800abba:	f7f8 fb99 	bl	80032f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800abbe:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800abc2:	2101      	movs	r1, #1
 800abc4:	4803      	ldr	r0, [pc, #12]	@ (800abd4 <USBD_LL_Init+0x9c>)
 800abc6:	f7f8 fb93 	bl	80032f0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	24000a74 	.word	0x24000a74
 800abd8:	40040000 	.word	0x40040000

0800abdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f7 fa88 	bl	8002108 <HAL_PCD_Start>
 800abf8:	4603      	mov	r3, r0
 800abfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 f930 	bl	800ae64 <USBD_Get_USB_Status>
 800ac04:	4603      	mov	r3, r0
 800ac06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	4608      	mov	r0, r1
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	461a      	mov	r2, r3
 800ac20:	4603      	mov	r3, r0
 800ac22:	70fb      	strb	r3, [r7, #3]
 800ac24:	460b      	mov	r3, r1
 800ac26:	70bb      	strb	r3, [r7, #2]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac3a:	78bb      	ldrb	r3, [r7, #2]
 800ac3c:	883a      	ldrh	r2, [r7, #0]
 800ac3e:	78f9      	ldrb	r1, [r7, #3]
 800ac40:	f7f7 ff89 	bl	8002b56 <HAL_PCD_EP_Open>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 f90a 	bl	800ae64 <USBD_Get_USB_Status>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac78:	78fa      	ldrb	r2, [r7, #3]
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7f7 ffd4 	bl	8002c2a <HAL_PCD_EP_Close>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 f8eb 	bl	800ae64 <USBD_Get_USB_Status>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acb6:	78fa      	ldrb	r2, [r7, #3]
 800acb8:	4611      	mov	r1, r2
 800acba:	4618      	mov	r0, r3
 800acbc:	f7f8 f874 	bl	8002da8 <HAL_PCD_EP_SetStall>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 f8cc 	bl	800ae64 <USBD_Get_USB_Status>
 800accc:	4603      	mov	r3, r0
 800acce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	460b      	mov	r3, r1
 800ace4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acf4:	78fa      	ldrb	r2, [r7, #3]
 800acf6:	4611      	mov	r1, r2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7f8 f8b8 	bl	8002e6e <HAL_PCD_EP_ClrStall>
 800acfe:	4603      	mov	r3, r0
 800ad00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 f8ad 	bl	800ae64 <USBD_Get_USB_Status>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	da0b      	bge.n	800ad4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad34:	78fb      	ldrb	r3, [r7, #3]
 800ad36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad3a:	68f9      	ldr	r1, [r7, #12]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	4413      	add	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	440b      	add	r3, r1
 800ad46:	3316      	adds	r3, #22
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	e00b      	b.n	800ad64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	4613      	mov	r3, r2
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	4413      	add	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	440b      	add	r3, r1
 800ad5e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ad62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad8a:	78fa      	ldrb	r2, [r7, #3]
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f7 febd 	bl	8002b0e <HAL_PCD_SetAddress>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 f862 	bl	800ae64 <USBD_Get_USB_Status>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b086      	sub	sp, #24
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
 800adba:	460b      	mov	r3, r1
 800adbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800adcc:	7af9      	ldrb	r1, [r7, #11]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	f7f7 ffaf 	bl	8002d34 <HAL_PCD_EP_Transmit>
 800add6:	4603      	mov	r3, r0
 800add8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	4618      	mov	r0, r3
 800adde:	f000 f841 	bl	800ae64 <USBD_Get_USB_Status>
 800ade2:	4603      	mov	r3, r0
 800ade4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ade6:	7dbb      	ldrb	r3, [r7, #22]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	607a      	str	r2, [r7, #4]
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	460b      	mov	r3, r1
 800adfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae0e:	7af9      	ldrb	r1, [r7, #11]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	f7f7 ff53 	bl	8002cbe <HAL_PCD_EP_Receive>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 f820 	bl	800ae64 <USBD_Get_USB_Status>
 800ae24:	4603      	mov	r3, r0
 800ae26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae28:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
	...

0800ae34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae3c:	4b03      	ldr	r3, [pc, #12]	@ (800ae4c <USBD_static_malloc+0x18>)
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	24000f58 	.word	0x24000f58

0800ae50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae72:	79fb      	ldrb	r3, [r7, #7]
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d817      	bhi.n	800aea8 <USBD_Get_USB_Status+0x44>
 800ae78:	a201      	add	r2, pc, #4	@ (adr r2, 800ae80 <USBD_Get_USB_Status+0x1c>)
 800ae7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7e:	bf00      	nop
 800ae80:	0800ae91 	.word	0x0800ae91
 800ae84:	0800ae97 	.word	0x0800ae97
 800ae88:	0800ae9d 	.word	0x0800ae9d
 800ae8c:	0800aea3 	.word	0x0800aea3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	73fb      	strb	r3, [r7, #15]
    break;
 800ae94:	e00b      	b.n	800aeae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae96:	2303      	movs	r3, #3
 800ae98:	73fb      	strb	r3, [r7, #15]
    break;
 800ae9a:	e008      	b.n	800aeae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aea0:	e005      	b.n	800aeae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aea2:	2303      	movs	r3, #3
 800aea4:	73fb      	strb	r3, [r7, #15]
    break;
 800aea6:	e002      	b.n	800aeae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	73fb      	strb	r3, [r7, #15]
    break;
 800aeac:	bf00      	nop
  }
  return usb_status;
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <siprintf>:
 800aebc:	b40e      	push	{r1, r2, r3}
 800aebe:	b500      	push	{lr}
 800aec0:	b09c      	sub	sp, #112	@ 0x70
 800aec2:	ab1d      	add	r3, sp, #116	@ 0x74
 800aec4:	9002      	str	r0, [sp, #8]
 800aec6:	9006      	str	r0, [sp, #24]
 800aec8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aecc:	4809      	ldr	r0, [pc, #36]	@ (800aef4 <siprintf+0x38>)
 800aece:	9107      	str	r1, [sp, #28]
 800aed0:	9104      	str	r1, [sp, #16]
 800aed2:	4909      	ldr	r1, [pc, #36]	@ (800aef8 <siprintf+0x3c>)
 800aed4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed8:	9105      	str	r1, [sp, #20]
 800aeda:	6800      	ldr	r0, [r0, #0]
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	a902      	add	r1, sp, #8
 800aee0:	f000 f994 	bl	800b20c <_svfiprintf_r>
 800aee4:	9b02      	ldr	r3, [sp, #8]
 800aee6:	2200      	movs	r2, #0
 800aee8:	701a      	strb	r2, [r3, #0]
 800aeea:	b01c      	add	sp, #112	@ 0x70
 800aeec:	f85d eb04 	ldr.w	lr, [sp], #4
 800aef0:	b003      	add	sp, #12
 800aef2:	4770      	bx	lr
 800aef4:	240002c8 	.word	0x240002c8
 800aef8:	ffff0208 	.word	0xffff0208

0800aefc <memset>:
 800aefc:	4402      	add	r2, r0
 800aefe:	4603      	mov	r3, r0
 800af00:	4293      	cmp	r3, r2
 800af02:	d100      	bne.n	800af06 <memset+0xa>
 800af04:	4770      	bx	lr
 800af06:	f803 1b01 	strb.w	r1, [r3], #1
 800af0a:	e7f9      	b.n	800af00 <memset+0x4>

0800af0c <__errno>:
 800af0c:	4b01      	ldr	r3, [pc, #4]	@ (800af14 <__errno+0x8>)
 800af0e:	6818      	ldr	r0, [r3, #0]
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	240002c8 	.word	0x240002c8

0800af18 <__libc_init_array>:
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	4d0d      	ldr	r5, [pc, #52]	@ (800af50 <__libc_init_array+0x38>)
 800af1c:	4c0d      	ldr	r4, [pc, #52]	@ (800af54 <__libc_init_array+0x3c>)
 800af1e:	1b64      	subs	r4, r4, r5
 800af20:	10a4      	asrs	r4, r4, #2
 800af22:	2600      	movs	r6, #0
 800af24:	42a6      	cmp	r6, r4
 800af26:	d109      	bne.n	800af3c <__libc_init_array+0x24>
 800af28:	4d0b      	ldr	r5, [pc, #44]	@ (800af58 <__libc_init_array+0x40>)
 800af2a:	4c0c      	ldr	r4, [pc, #48]	@ (800af5c <__libc_init_array+0x44>)
 800af2c:	f000 fc66 	bl	800b7fc <_init>
 800af30:	1b64      	subs	r4, r4, r5
 800af32:	10a4      	asrs	r4, r4, #2
 800af34:	2600      	movs	r6, #0
 800af36:	42a6      	cmp	r6, r4
 800af38:	d105      	bne.n	800af46 <__libc_init_array+0x2e>
 800af3a:	bd70      	pop	{r4, r5, r6, pc}
 800af3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af40:	4798      	blx	r3
 800af42:	3601      	adds	r6, #1
 800af44:	e7ee      	b.n	800af24 <__libc_init_array+0xc>
 800af46:	f855 3b04 	ldr.w	r3, [r5], #4
 800af4a:	4798      	blx	r3
 800af4c:	3601      	adds	r6, #1
 800af4e:	e7f2      	b.n	800af36 <__libc_init_array+0x1e>
 800af50:	0800b9ac 	.word	0x0800b9ac
 800af54:	0800b9ac 	.word	0x0800b9ac
 800af58:	0800b9ac 	.word	0x0800b9ac
 800af5c:	0800b9b0 	.word	0x0800b9b0

0800af60 <__retarget_lock_acquire_recursive>:
 800af60:	4770      	bx	lr

0800af62 <__retarget_lock_release_recursive>:
 800af62:	4770      	bx	lr

0800af64 <_free_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4605      	mov	r5, r0
 800af68:	2900      	cmp	r1, #0
 800af6a:	d041      	beq.n	800aff0 <_free_r+0x8c>
 800af6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af70:	1f0c      	subs	r4, r1, #4
 800af72:	2b00      	cmp	r3, #0
 800af74:	bfb8      	it	lt
 800af76:	18e4      	addlt	r4, r4, r3
 800af78:	f000 f8e0 	bl	800b13c <__malloc_lock>
 800af7c:	4a1d      	ldr	r2, [pc, #116]	@ (800aff4 <_free_r+0x90>)
 800af7e:	6813      	ldr	r3, [r2, #0]
 800af80:	b933      	cbnz	r3, 800af90 <_free_r+0x2c>
 800af82:	6063      	str	r3, [r4, #4]
 800af84:	6014      	str	r4, [r2, #0]
 800af86:	4628      	mov	r0, r5
 800af88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af8c:	f000 b8dc 	b.w	800b148 <__malloc_unlock>
 800af90:	42a3      	cmp	r3, r4
 800af92:	d908      	bls.n	800afa6 <_free_r+0x42>
 800af94:	6820      	ldr	r0, [r4, #0]
 800af96:	1821      	adds	r1, r4, r0
 800af98:	428b      	cmp	r3, r1
 800af9a:	bf01      	itttt	eq
 800af9c:	6819      	ldreq	r1, [r3, #0]
 800af9e:	685b      	ldreq	r3, [r3, #4]
 800afa0:	1809      	addeq	r1, r1, r0
 800afa2:	6021      	streq	r1, [r4, #0]
 800afa4:	e7ed      	b.n	800af82 <_free_r+0x1e>
 800afa6:	461a      	mov	r2, r3
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	b10b      	cbz	r3, 800afb0 <_free_r+0x4c>
 800afac:	42a3      	cmp	r3, r4
 800afae:	d9fa      	bls.n	800afa6 <_free_r+0x42>
 800afb0:	6811      	ldr	r1, [r2, #0]
 800afb2:	1850      	adds	r0, r2, r1
 800afb4:	42a0      	cmp	r0, r4
 800afb6:	d10b      	bne.n	800afd0 <_free_r+0x6c>
 800afb8:	6820      	ldr	r0, [r4, #0]
 800afba:	4401      	add	r1, r0
 800afbc:	1850      	adds	r0, r2, r1
 800afbe:	4283      	cmp	r3, r0
 800afc0:	6011      	str	r1, [r2, #0]
 800afc2:	d1e0      	bne.n	800af86 <_free_r+0x22>
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	6053      	str	r3, [r2, #4]
 800afca:	4408      	add	r0, r1
 800afcc:	6010      	str	r0, [r2, #0]
 800afce:	e7da      	b.n	800af86 <_free_r+0x22>
 800afd0:	d902      	bls.n	800afd8 <_free_r+0x74>
 800afd2:	230c      	movs	r3, #12
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	e7d6      	b.n	800af86 <_free_r+0x22>
 800afd8:	6820      	ldr	r0, [r4, #0]
 800afda:	1821      	adds	r1, r4, r0
 800afdc:	428b      	cmp	r3, r1
 800afde:	bf04      	itt	eq
 800afe0:	6819      	ldreq	r1, [r3, #0]
 800afe2:	685b      	ldreq	r3, [r3, #4]
 800afe4:	6063      	str	r3, [r4, #4]
 800afe6:	bf04      	itt	eq
 800afe8:	1809      	addeq	r1, r1, r0
 800afea:	6021      	streq	r1, [r4, #0]
 800afec:	6054      	str	r4, [r2, #4]
 800afee:	e7ca      	b.n	800af86 <_free_r+0x22>
 800aff0:	bd38      	pop	{r3, r4, r5, pc}
 800aff2:	bf00      	nop
 800aff4:	240010b0 	.word	0x240010b0

0800aff8 <sbrk_aligned>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	4e0f      	ldr	r6, [pc, #60]	@ (800b038 <sbrk_aligned+0x40>)
 800affc:	460c      	mov	r4, r1
 800affe:	6831      	ldr	r1, [r6, #0]
 800b000:	4605      	mov	r5, r0
 800b002:	b911      	cbnz	r1, 800b00a <sbrk_aligned+0x12>
 800b004:	f000 fba6 	bl	800b754 <_sbrk_r>
 800b008:	6030      	str	r0, [r6, #0]
 800b00a:	4621      	mov	r1, r4
 800b00c:	4628      	mov	r0, r5
 800b00e:	f000 fba1 	bl	800b754 <_sbrk_r>
 800b012:	1c43      	adds	r3, r0, #1
 800b014:	d103      	bne.n	800b01e <sbrk_aligned+0x26>
 800b016:	f04f 34ff 	mov.w	r4, #4294967295
 800b01a:	4620      	mov	r0, r4
 800b01c:	bd70      	pop	{r4, r5, r6, pc}
 800b01e:	1cc4      	adds	r4, r0, #3
 800b020:	f024 0403 	bic.w	r4, r4, #3
 800b024:	42a0      	cmp	r0, r4
 800b026:	d0f8      	beq.n	800b01a <sbrk_aligned+0x22>
 800b028:	1a21      	subs	r1, r4, r0
 800b02a:	4628      	mov	r0, r5
 800b02c:	f000 fb92 	bl	800b754 <_sbrk_r>
 800b030:	3001      	adds	r0, #1
 800b032:	d1f2      	bne.n	800b01a <sbrk_aligned+0x22>
 800b034:	e7ef      	b.n	800b016 <sbrk_aligned+0x1e>
 800b036:	bf00      	nop
 800b038:	240010ac 	.word	0x240010ac

0800b03c <_malloc_r>:
 800b03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b040:	1ccd      	adds	r5, r1, #3
 800b042:	f025 0503 	bic.w	r5, r5, #3
 800b046:	3508      	adds	r5, #8
 800b048:	2d0c      	cmp	r5, #12
 800b04a:	bf38      	it	cc
 800b04c:	250c      	movcc	r5, #12
 800b04e:	2d00      	cmp	r5, #0
 800b050:	4606      	mov	r6, r0
 800b052:	db01      	blt.n	800b058 <_malloc_r+0x1c>
 800b054:	42a9      	cmp	r1, r5
 800b056:	d904      	bls.n	800b062 <_malloc_r+0x26>
 800b058:	230c      	movs	r3, #12
 800b05a:	6033      	str	r3, [r6, #0]
 800b05c:	2000      	movs	r0, #0
 800b05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b062:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b138 <_malloc_r+0xfc>
 800b066:	f000 f869 	bl	800b13c <__malloc_lock>
 800b06a:	f8d8 3000 	ldr.w	r3, [r8]
 800b06e:	461c      	mov	r4, r3
 800b070:	bb44      	cbnz	r4, 800b0c4 <_malloc_r+0x88>
 800b072:	4629      	mov	r1, r5
 800b074:	4630      	mov	r0, r6
 800b076:	f7ff ffbf 	bl	800aff8 <sbrk_aligned>
 800b07a:	1c43      	adds	r3, r0, #1
 800b07c:	4604      	mov	r4, r0
 800b07e:	d158      	bne.n	800b132 <_malloc_r+0xf6>
 800b080:	f8d8 4000 	ldr.w	r4, [r8]
 800b084:	4627      	mov	r7, r4
 800b086:	2f00      	cmp	r7, #0
 800b088:	d143      	bne.n	800b112 <_malloc_r+0xd6>
 800b08a:	2c00      	cmp	r4, #0
 800b08c:	d04b      	beq.n	800b126 <_malloc_r+0xea>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	4639      	mov	r1, r7
 800b092:	4630      	mov	r0, r6
 800b094:	eb04 0903 	add.w	r9, r4, r3
 800b098:	f000 fb5c 	bl	800b754 <_sbrk_r>
 800b09c:	4581      	cmp	r9, r0
 800b09e:	d142      	bne.n	800b126 <_malloc_r+0xea>
 800b0a0:	6821      	ldr	r1, [r4, #0]
 800b0a2:	1a6d      	subs	r5, r5, r1
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f7ff ffa6 	bl	800aff8 <sbrk_aligned>
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	d03a      	beq.n	800b126 <_malloc_r+0xea>
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	442b      	add	r3, r5
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	bb62      	cbnz	r2, 800b118 <_malloc_r+0xdc>
 800b0be:	f8c8 7000 	str.w	r7, [r8]
 800b0c2:	e00f      	b.n	800b0e4 <_malloc_r+0xa8>
 800b0c4:	6822      	ldr	r2, [r4, #0]
 800b0c6:	1b52      	subs	r2, r2, r5
 800b0c8:	d420      	bmi.n	800b10c <_malloc_r+0xd0>
 800b0ca:	2a0b      	cmp	r2, #11
 800b0cc:	d917      	bls.n	800b0fe <_malloc_r+0xc2>
 800b0ce:	1961      	adds	r1, r4, r5
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	6025      	str	r5, [r4, #0]
 800b0d4:	bf18      	it	ne
 800b0d6:	6059      	strne	r1, [r3, #4]
 800b0d8:	6863      	ldr	r3, [r4, #4]
 800b0da:	bf08      	it	eq
 800b0dc:	f8c8 1000 	streq.w	r1, [r8]
 800b0e0:	5162      	str	r2, [r4, r5]
 800b0e2:	604b      	str	r3, [r1, #4]
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f000 f82f 	bl	800b148 <__malloc_unlock>
 800b0ea:	f104 000b 	add.w	r0, r4, #11
 800b0ee:	1d23      	adds	r3, r4, #4
 800b0f0:	f020 0007 	bic.w	r0, r0, #7
 800b0f4:	1ac2      	subs	r2, r0, r3
 800b0f6:	bf1c      	itt	ne
 800b0f8:	1a1b      	subne	r3, r3, r0
 800b0fa:	50a3      	strne	r3, [r4, r2]
 800b0fc:	e7af      	b.n	800b05e <_malloc_r+0x22>
 800b0fe:	6862      	ldr	r2, [r4, #4]
 800b100:	42a3      	cmp	r3, r4
 800b102:	bf0c      	ite	eq
 800b104:	f8c8 2000 	streq.w	r2, [r8]
 800b108:	605a      	strne	r2, [r3, #4]
 800b10a:	e7eb      	b.n	800b0e4 <_malloc_r+0xa8>
 800b10c:	4623      	mov	r3, r4
 800b10e:	6864      	ldr	r4, [r4, #4]
 800b110:	e7ae      	b.n	800b070 <_malloc_r+0x34>
 800b112:	463c      	mov	r4, r7
 800b114:	687f      	ldr	r7, [r7, #4]
 800b116:	e7b6      	b.n	800b086 <_malloc_r+0x4a>
 800b118:	461a      	mov	r2, r3
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	42a3      	cmp	r3, r4
 800b11e:	d1fb      	bne.n	800b118 <_malloc_r+0xdc>
 800b120:	2300      	movs	r3, #0
 800b122:	6053      	str	r3, [r2, #4]
 800b124:	e7de      	b.n	800b0e4 <_malloc_r+0xa8>
 800b126:	230c      	movs	r3, #12
 800b128:	6033      	str	r3, [r6, #0]
 800b12a:	4630      	mov	r0, r6
 800b12c:	f000 f80c 	bl	800b148 <__malloc_unlock>
 800b130:	e794      	b.n	800b05c <_malloc_r+0x20>
 800b132:	6005      	str	r5, [r0, #0]
 800b134:	e7d6      	b.n	800b0e4 <_malloc_r+0xa8>
 800b136:	bf00      	nop
 800b138:	240010b0 	.word	0x240010b0

0800b13c <__malloc_lock>:
 800b13c:	4801      	ldr	r0, [pc, #4]	@ (800b144 <__malloc_lock+0x8>)
 800b13e:	f7ff bf0f 	b.w	800af60 <__retarget_lock_acquire_recursive>
 800b142:	bf00      	nop
 800b144:	240010a8 	.word	0x240010a8

0800b148 <__malloc_unlock>:
 800b148:	4801      	ldr	r0, [pc, #4]	@ (800b150 <__malloc_unlock+0x8>)
 800b14a:	f7ff bf0a 	b.w	800af62 <__retarget_lock_release_recursive>
 800b14e:	bf00      	nop
 800b150:	240010a8 	.word	0x240010a8

0800b154 <__ssputs_r>:
 800b154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b158:	688e      	ldr	r6, [r1, #8]
 800b15a:	461f      	mov	r7, r3
 800b15c:	42be      	cmp	r6, r7
 800b15e:	680b      	ldr	r3, [r1, #0]
 800b160:	4682      	mov	sl, r0
 800b162:	460c      	mov	r4, r1
 800b164:	4690      	mov	r8, r2
 800b166:	d82d      	bhi.n	800b1c4 <__ssputs_r+0x70>
 800b168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b16c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b170:	d026      	beq.n	800b1c0 <__ssputs_r+0x6c>
 800b172:	6965      	ldr	r5, [r4, #20]
 800b174:	6909      	ldr	r1, [r1, #16]
 800b176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b17a:	eba3 0901 	sub.w	r9, r3, r1
 800b17e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b182:	1c7b      	adds	r3, r7, #1
 800b184:	444b      	add	r3, r9
 800b186:	106d      	asrs	r5, r5, #1
 800b188:	429d      	cmp	r5, r3
 800b18a:	bf38      	it	cc
 800b18c:	461d      	movcc	r5, r3
 800b18e:	0553      	lsls	r3, r2, #21
 800b190:	d527      	bpl.n	800b1e2 <__ssputs_r+0x8e>
 800b192:	4629      	mov	r1, r5
 800b194:	f7ff ff52 	bl	800b03c <_malloc_r>
 800b198:	4606      	mov	r6, r0
 800b19a:	b360      	cbz	r0, 800b1f6 <__ssputs_r+0xa2>
 800b19c:	6921      	ldr	r1, [r4, #16]
 800b19e:	464a      	mov	r2, r9
 800b1a0:	f000 fae8 	bl	800b774 <memcpy>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1ae:	81a3      	strh	r3, [r4, #12]
 800b1b0:	6126      	str	r6, [r4, #16]
 800b1b2:	6165      	str	r5, [r4, #20]
 800b1b4:	444e      	add	r6, r9
 800b1b6:	eba5 0509 	sub.w	r5, r5, r9
 800b1ba:	6026      	str	r6, [r4, #0]
 800b1bc:	60a5      	str	r5, [r4, #8]
 800b1be:	463e      	mov	r6, r7
 800b1c0:	42be      	cmp	r6, r7
 800b1c2:	d900      	bls.n	800b1c6 <__ssputs_r+0x72>
 800b1c4:	463e      	mov	r6, r7
 800b1c6:	6820      	ldr	r0, [r4, #0]
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	4641      	mov	r1, r8
 800b1cc:	f000 faa8 	bl	800b720 <memmove>
 800b1d0:	68a3      	ldr	r3, [r4, #8]
 800b1d2:	1b9b      	subs	r3, r3, r6
 800b1d4:	60a3      	str	r3, [r4, #8]
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	4433      	add	r3, r6
 800b1da:	6023      	str	r3, [r4, #0]
 800b1dc:	2000      	movs	r0, #0
 800b1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	f000 fad4 	bl	800b790 <_realloc_r>
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d1e0      	bne.n	800b1b0 <__ssputs_r+0x5c>
 800b1ee:	6921      	ldr	r1, [r4, #16]
 800b1f0:	4650      	mov	r0, sl
 800b1f2:	f7ff feb7 	bl	800af64 <_free_r>
 800b1f6:	230c      	movs	r3, #12
 800b1f8:	f8ca 3000 	str.w	r3, [sl]
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b202:	81a3      	strh	r3, [r4, #12]
 800b204:	f04f 30ff 	mov.w	r0, #4294967295
 800b208:	e7e9      	b.n	800b1de <__ssputs_r+0x8a>
	...

0800b20c <_svfiprintf_r>:
 800b20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b210:	4698      	mov	r8, r3
 800b212:	898b      	ldrh	r3, [r1, #12]
 800b214:	061b      	lsls	r3, r3, #24
 800b216:	b09d      	sub	sp, #116	@ 0x74
 800b218:	4607      	mov	r7, r0
 800b21a:	460d      	mov	r5, r1
 800b21c:	4614      	mov	r4, r2
 800b21e:	d510      	bpl.n	800b242 <_svfiprintf_r+0x36>
 800b220:	690b      	ldr	r3, [r1, #16]
 800b222:	b973      	cbnz	r3, 800b242 <_svfiprintf_r+0x36>
 800b224:	2140      	movs	r1, #64	@ 0x40
 800b226:	f7ff ff09 	bl	800b03c <_malloc_r>
 800b22a:	6028      	str	r0, [r5, #0]
 800b22c:	6128      	str	r0, [r5, #16]
 800b22e:	b930      	cbnz	r0, 800b23e <_svfiprintf_r+0x32>
 800b230:	230c      	movs	r3, #12
 800b232:	603b      	str	r3, [r7, #0]
 800b234:	f04f 30ff 	mov.w	r0, #4294967295
 800b238:	b01d      	add	sp, #116	@ 0x74
 800b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23e:	2340      	movs	r3, #64	@ 0x40
 800b240:	616b      	str	r3, [r5, #20]
 800b242:	2300      	movs	r3, #0
 800b244:	9309      	str	r3, [sp, #36]	@ 0x24
 800b246:	2320      	movs	r3, #32
 800b248:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b24c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b250:	2330      	movs	r3, #48	@ 0x30
 800b252:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3f0 <_svfiprintf_r+0x1e4>
 800b256:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b25a:	f04f 0901 	mov.w	r9, #1
 800b25e:	4623      	mov	r3, r4
 800b260:	469a      	mov	sl, r3
 800b262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b266:	b10a      	cbz	r2, 800b26c <_svfiprintf_r+0x60>
 800b268:	2a25      	cmp	r2, #37	@ 0x25
 800b26a:	d1f9      	bne.n	800b260 <_svfiprintf_r+0x54>
 800b26c:	ebba 0b04 	subs.w	fp, sl, r4
 800b270:	d00b      	beq.n	800b28a <_svfiprintf_r+0x7e>
 800b272:	465b      	mov	r3, fp
 800b274:	4622      	mov	r2, r4
 800b276:	4629      	mov	r1, r5
 800b278:	4638      	mov	r0, r7
 800b27a:	f7ff ff6b 	bl	800b154 <__ssputs_r>
 800b27e:	3001      	adds	r0, #1
 800b280:	f000 80a7 	beq.w	800b3d2 <_svfiprintf_r+0x1c6>
 800b284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b286:	445a      	add	r2, fp
 800b288:	9209      	str	r2, [sp, #36]	@ 0x24
 800b28a:	f89a 3000 	ldrb.w	r3, [sl]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f000 809f 	beq.w	800b3d2 <_svfiprintf_r+0x1c6>
 800b294:	2300      	movs	r3, #0
 800b296:	f04f 32ff 	mov.w	r2, #4294967295
 800b29a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b29e:	f10a 0a01 	add.w	sl, sl, #1
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	9307      	str	r3, [sp, #28]
 800b2a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2ac:	4654      	mov	r4, sl
 800b2ae:	2205      	movs	r2, #5
 800b2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b4:	484e      	ldr	r0, [pc, #312]	@ (800b3f0 <_svfiprintf_r+0x1e4>)
 800b2b6:	f7f5 f833 	bl	8000320 <memchr>
 800b2ba:	9a04      	ldr	r2, [sp, #16]
 800b2bc:	b9d8      	cbnz	r0, 800b2f6 <_svfiprintf_r+0xea>
 800b2be:	06d0      	lsls	r0, r2, #27
 800b2c0:	bf44      	itt	mi
 800b2c2:	2320      	movmi	r3, #32
 800b2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2c8:	0711      	lsls	r1, r2, #28
 800b2ca:	bf44      	itt	mi
 800b2cc:	232b      	movmi	r3, #43	@ 0x2b
 800b2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d8:	d015      	beq.n	800b306 <_svfiprintf_r+0xfa>
 800b2da:	9a07      	ldr	r2, [sp, #28]
 800b2dc:	4654      	mov	r4, sl
 800b2de:	2000      	movs	r0, #0
 800b2e0:	f04f 0c0a 	mov.w	ip, #10
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2ea:	3b30      	subs	r3, #48	@ 0x30
 800b2ec:	2b09      	cmp	r3, #9
 800b2ee:	d94b      	bls.n	800b388 <_svfiprintf_r+0x17c>
 800b2f0:	b1b0      	cbz	r0, 800b320 <_svfiprintf_r+0x114>
 800b2f2:	9207      	str	r2, [sp, #28]
 800b2f4:	e014      	b.n	800b320 <_svfiprintf_r+0x114>
 800b2f6:	eba0 0308 	sub.w	r3, r0, r8
 800b2fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b2fe:	4313      	orrs	r3, r2
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	46a2      	mov	sl, r4
 800b304:	e7d2      	b.n	800b2ac <_svfiprintf_r+0xa0>
 800b306:	9b03      	ldr	r3, [sp, #12]
 800b308:	1d19      	adds	r1, r3, #4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	9103      	str	r1, [sp, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	bfbb      	ittet	lt
 800b312:	425b      	neglt	r3, r3
 800b314:	f042 0202 	orrlt.w	r2, r2, #2
 800b318:	9307      	strge	r3, [sp, #28]
 800b31a:	9307      	strlt	r3, [sp, #28]
 800b31c:	bfb8      	it	lt
 800b31e:	9204      	strlt	r2, [sp, #16]
 800b320:	7823      	ldrb	r3, [r4, #0]
 800b322:	2b2e      	cmp	r3, #46	@ 0x2e
 800b324:	d10a      	bne.n	800b33c <_svfiprintf_r+0x130>
 800b326:	7863      	ldrb	r3, [r4, #1]
 800b328:	2b2a      	cmp	r3, #42	@ 0x2a
 800b32a:	d132      	bne.n	800b392 <_svfiprintf_r+0x186>
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	1d1a      	adds	r2, r3, #4
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	9203      	str	r2, [sp, #12]
 800b334:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b338:	3402      	adds	r4, #2
 800b33a:	9305      	str	r3, [sp, #20]
 800b33c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b400 <_svfiprintf_r+0x1f4>
 800b340:	7821      	ldrb	r1, [r4, #0]
 800b342:	2203      	movs	r2, #3
 800b344:	4650      	mov	r0, sl
 800b346:	f7f4 ffeb 	bl	8000320 <memchr>
 800b34a:	b138      	cbz	r0, 800b35c <_svfiprintf_r+0x150>
 800b34c:	9b04      	ldr	r3, [sp, #16]
 800b34e:	eba0 000a 	sub.w	r0, r0, sl
 800b352:	2240      	movs	r2, #64	@ 0x40
 800b354:	4082      	lsls	r2, r0
 800b356:	4313      	orrs	r3, r2
 800b358:	3401      	adds	r4, #1
 800b35a:	9304      	str	r3, [sp, #16]
 800b35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b360:	4824      	ldr	r0, [pc, #144]	@ (800b3f4 <_svfiprintf_r+0x1e8>)
 800b362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b366:	2206      	movs	r2, #6
 800b368:	f7f4 ffda 	bl	8000320 <memchr>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d036      	beq.n	800b3de <_svfiprintf_r+0x1d2>
 800b370:	4b21      	ldr	r3, [pc, #132]	@ (800b3f8 <_svfiprintf_r+0x1ec>)
 800b372:	bb1b      	cbnz	r3, 800b3bc <_svfiprintf_r+0x1b0>
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	3307      	adds	r3, #7
 800b378:	f023 0307 	bic.w	r3, r3, #7
 800b37c:	3308      	adds	r3, #8
 800b37e:	9303      	str	r3, [sp, #12]
 800b380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b382:	4433      	add	r3, r6
 800b384:	9309      	str	r3, [sp, #36]	@ 0x24
 800b386:	e76a      	b.n	800b25e <_svfiprintf_r+0x52>
 800b388:	fb0c 3202 	mla	r2, ip, r2, r3
 800b38c:	460c      	mov	r4, r1
 800b38e:	2001      	movs	r0, #1
 800b390:	e7a8      	b.n	800b2e4 <_svfiprintf_r+0xd8>
 800b392:	2300      	movs	r3, #0
 800b394:	3401      	adds	r4, #1
 800b396:	9305      	str	r3, [sp, #20]
 800b398:	4619      	mov	r1, r3
 800b39a:	f04f 0c0a 	mov.w	ip, #10
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3a4:	3a30      	subs	r2, #48	@ 0x30
 800b3a6:	2a09      	cmp	r2, #9
 800b3a8:	d903      	bls.n	800b3b2 <_svfiprintf_r+0x1a6>
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d0c6      	beq.n	800b33c <_svfiprintf_r+0x130>
 800b3ae:	9105      	str	r1, [sp, #20]
 800b3b0:	e7c4      	b.n	800b33c <_svfiprintf_r+0x130>
 800b3b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e7f0      	b.n	800b39e <_svfiprintf_r+0x192>
 800b3bc:	ab03      	add	r3, sp, #12
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	462a      	mov	r2, r5
 800b3c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b3fc <_svfiprintf_r+0x1f0>)
 800b3c4:	a904      	add	r1, sp, #16
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	f3af 8000 	nop.w
 800b3cc:	1c42      	adds	r2, r0, #1
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	d1d6      	bne.n	800b380 <_svfiprintf_r+0x174>
 800b3d2:	89ab      	ldrh	r3, [r5, #12]
 800b3d4:	065b      	lsls	r3, r3, #25
 800b3d6:	f53f af2d 	bmi.w	800b234 <_svfiprintf_r+0x28>
 800b3da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3dc:	e72c      	b.n	800b238 <_svfiprintf_r+0x2c>
 800b3de:	ab03      	add	r3, sp, #12
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	462a      	mov	r2, r5
 800b3e4:	4b05      	ldr	r3, [pc, #20]	@ (800b3fc <_svfiprintf_r+0x1f0>)
 800b3e6:	a904      	add	r1, sp, #16
 800b3e8:	4638      	mov	r0, r7
 800b3ea:	f000 f879 	bl	800b4e0 <_printf_i>
 800b3ee:	e7ed      	b.n	800b3cc <_svfiprintf_r+0x1c0>
 800b3f0:	0800b970 	.word	0x0800b970
 800b3f4:	0800b97a 	.word	0x0800b97a
 800b3f8:	00000000 	.word	0x00000000
 800b3fc:	0800b155 	.word	0x0800b155
 800b400:	0800b976 	.word	0x0800b976

0800b404 <_printf_common>:
 800b404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b408:	4616      	mov	r6, r2
 800b40a:	4698      	mov	r8, r3
 800b40c:	688a      	ldr	r2, [r1, #8]
 800b40e:	690b      	ldr	r3, [r1, #16]
 800b410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b414:	4293      	cmp	r3, r2
 800b416:	bfb8      	it	lt
 800b418:	4613      	movlt	r3, r2
 800b41a:	6033      	str	r3, [r6, #0]
 800b41c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b420:	4607      	mov	r7, r0
 800b422:	460c      	mov	r4, r1
 800b424:	b10a      	cbz	r2, 800b42a <_printf_common+0x26>
 800b426:	3301      	adds	r3, #1
 800b428:	6033      	str	r3, [r6, #0]
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	0699      	lsls	r1, r3, #26
 800b42e:	bf42      	ittt	mi
 800b430:	6833      	ldrmi	r3, [r6, #0]
 800b432:	3302      	addmi	r3, #2
 800b434:	6033      	strmi	r3, [r6, #0]
 800b436:	6825      	ldr	r5, [r4, #0]
 800b438:	f015 0506 	ands.w	r5, r5, #6
 800b43c:	d106      	bne.n	800b44c <_printf_common+0x48>
 800b43e:	f104 0a19 	add.w	sl, r4, #25
 800b442:	68e3      	ldr	r3, [r4, #12]
 800b444:	6832      	ldr	r2, [r6, #0]
 800b446:	1a9b      	subs	r3, r3, r2
 800b448:	42ab      	cmp	r3, r5
 800b44a:	dc26      	bgt.n	800b49a <_printf_common+0x96>
 800b44c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b450:	6822      	ldr	r2, [r4, #0]
 800b452:	3b00      	subs	r3, #0
 800b454:	bf18      	it	ne
 800b456:	2301      	movne	r3, #1
 800b458:	0692      	lsls	r2, r2, #26
 800b45a:	d42b      	bmi.n	800b4b4 <_printf_common+0xb0>
 800b45c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b460:	4641      	mov	r1, r8
 800b462:	4638      	mov	r0, r7
 800b464:	47c8      	blx	r9
 800b466:	3001      	adds	r0, #1
 800b468:	d01e      	beq.n	800b4a8 <_printf_common+0xa4>
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	6922      	ldr	r2, [r4, #16]
 800b46e:	f003 0306 	and.w	r3, r3, #6
 800b472:	2b04      	cmp	r3, #4
 800b474:	bf02      	ittt	eq
 800b476:	68e5      	ldreq	r5, [r4, #12]
 800b478:	6833      	ldreq	r3, [r6, #0]
 800b47a:	1aed      	subeq	r5, r5, r3
 800b47c:	68a3      	ldr	r3, [r4, #8]
 800b47e:	bf0c      	ite	eq
 800b480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b484:	2500      	movne	r5, #0
 800b486:	4293      	cmp	r3, r2
 800b488:	bfc4      	itt	gt
 800b48a:	1a9b      	subgt	r3, r3, r2
 800b48c:	18ed      	addgt	r5, r5, r3
 800b48e:	2600      	movs	r6, #0
 800b490:	341a      	adds	r4, #26
 800b492:	42b5      	cmp	r5, r6
 800b494:	d11a      	bne.n	800b4cc <_printf_common+0xc8>
 800b496:	2000      	movs	r0, #0
 800b498:	e008      	b.n	800b4ac <_printf_common+0xa8>
 800b49a:	2301      	movs	r3, #1
 800b49c:	4652      	mov	r2, sl
 800b49e:	4641      	mov	r1, r8
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	47c8      	blx	r9
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	d103      	bne.n	800b4b0 <_printf_common+0xac>
 800b4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b0:	3501      	adds	r5, #1
 800b4b2:	e7c6      	b.n	800b442 <_printf_common+0x3e>
 800b4b4:	18e1      	adds	r1, r4, r3
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	2030      	movs	r0, #48	@ 0x30
 800b4ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4be:	4422      	add	r2, r4
 800b4c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4c8:	3302      	adds	r3, #2
 800b4ca:	e7c7      	b.n	800b45c <_printf_common+0x58>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	4622      	mov	r2, r4
 800b4d0:	4641      	mov	r1, r8
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	47c8      	blx	r9
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	d0e6      	beq.n	800b4a8 <_printf_common+0xa4>
 800b4da:	3601      	adds	r6, #1
 800b4dc:	e7d9      	b.n	800b492 <_printf_common+0x8e>
	...

0800b4e0 <_printf_i>:
 800b4e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e4:	7e0f      	ldrb	r7, [r1, #24]
 800b4e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4e8:	2f78      	cmp	r7, #120	@ 0x78
 800b4ea:	4691      	mov	r9, r2
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	469a      	mov	sl, r3
 800b4f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4f6:	d807      	bhi.n	800b508 <_printf_i+0x28>
 800b4f8:	2f62      	cmp	r7, #98	@ 0x62
 800b4fa:	d80a      	bhi.n	800b512 <_printf_i+0x32>
 800b4fc:	2f00      	cmp	r7, #0
 800b4fe:	f000 80d2 	beq.w	800b6a6 <_printf_i+0x1c6>
 800b502:	2f58      	cmp	r7, #88	@ 0x58
 800b504:	f000 80b9 	beq.w	800b67a <_printf_i+0x19a>
 800b508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b50c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b510:	e03a      	b.n	800b588 <_printf_i+0xa8>
 800b512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b516:	2b15      	cmp	r3, #21
 800b518:	d8f6      	bhi.n	800b508 <_printf_i+0x28>
 800b51a:	a101      	add	r1, pc, #4	@ (adr r1, 800b520 <_printf_i+0x40>)
 800b51c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b520:	0800b579 	.word	0x0800b579
 800b524:	0800b58d 	.word	0x0800b58d
 800b528:	0800b509 	.word	0x0800b509
 800b52c:	0800b509 	.word	0x0800b509
 800b530:	0800b509 	.word	0x0800b509
 800b534:	0800b509 	.word	0x0800b509
 800b538:	0800b58d 	.word	0x0800b58d
 800b53c:	0800b509 	.word	0x0800b509
 800b540:	0800b509 	.word	0x0800b509
 800b544:	0800b509 	.word	0x0800b509
 800b548:	0800b509 	.word	0x0800b509
 800b54c:	0800b68d 	.word	0x0800b68d
 800b550:	0800b5b7 	.word	0x0800b5b7
 800b554:	0800b647 	.word	0x0800b647
 800b558:	0800b509 	.word	0x0800b509
 800b55c:	0800b509 	.word	0x0800b509
 800b560:	0800b6af 	.word	0x0800b6af
 800b564:	0800b509 	.word	0x0800b509
 800b568:	0800b5b7 	.word	0x0800b5b7
 800b56c:	0800b509 	.word	0x0800b509
 800b570:	0800b509 	.word	0x0800b509
 800b574:	0800b64f 	.word	0x0800b64f
 800b578:	6833      	ldr	r3, [r6, #0]
 800b57a:	1d1a      	adds	r2, r3, #4
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	6032      	str	r2, [r6, #0]
 800b580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b588:	2301      	movs	r3, #1
 800b58a:	e09d      	b.n	800b6c8 <_printf_i+0x1e8>
 800b58c:	6833      	ldr	r3, [r6, #0]
 800b58e:	6820      	ldr	r0, [r4, #0]
 800b590:	1d19      	adds	r1, r3, #4
 800b592:	6031      	str	r1, [r6, #0]
 800b594:	0606      	lsls	r6, r0, #24
 800b596:	d501      	bpl.n	800b59c <_printf_i+0xbc>
 800b598:	681d      	ldr	r5, [r3, #0]
 800b59a:	e003      	b.n	800b5a4 <_printf_i+0xc4>
 800b59c:	0645      	lsls	r5, r0, #25
 800b59e:	d5fb      	bpl.n	800b598 <_printf_i+0xb8>
 800b5a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b5a4:	2d00      	cmp	r5, #0
 800b5a6:	da03      	bge.n	800b5b0 <_printf_i+0xd0>
 800b5a8:	232d      	movs	r3, #45	@ 0x2d
 800b5aa:	426d      	negs	r5, r5
 800b5ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5b0:	4859      	ldr	r0, [pc, #356]	@ (800b718 <_printf_i+0x238>)
 800b5b2:	230a      	movs	r3, #10
 800b5b4:	e011      	b.n	800b5da <_printf_i+0xfa>
 800b5b6:	6821      	ldr	r1, [r4, #0]
 800b5b8:	6833      	ldr	r3, [r6, #0]
 800b5ba:	0608      	lsls	r0, r1, #24
 800b5bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5c0:	d402      	bmi.n	800b5c8 <_printf_i+0xe8>
 800b5c2:	0649      	lsls	r1, r1, #25
 800b5c4:	bf48      	it	mi
 800b5c6:	b2ad      	uxthmi	r5, r5
 800b5c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5ca:	4853      	ldr	r0, [pc, #332]	@ (800b718 <_printf_i+0x238>)
 800b5cc:	6033      	str	r3, [r6, #0]
 800b5ce:	bf14      	ite	ne
 800b5d0:	230a      	movne	r3, #10
 800b5d2:	2308      	moveq	r3, #8
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5da:	6866      	ldr	r6, [r4, #4]
 800b5dc:	60a6      	str	r6, [r4, #8]
 800b5de:	2e00      	cmp	r6, #0
 800b5e0:	bfa2      	ittt	ge
 800b5e2:	6821      	ldrge	r1, [r4, #0]
 800b5e4:	f021 0104 	bicge.w	r1, r1, #4
 800b5e8:	6021      	strge	r1, [r4, #0]
 800b5ea:	b90d      	cbnz	r5, 800b5f0 <_printf_i+0x110>
 800b5ec:	2e00      	cmp	r6, #0
 800b5ee:	d04b      	beq.n	800b688 <_printf_i+0x1a8>
 800b5f0:	4616      	mov	r6, r2
 800b5f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5f6:	fb03 5711 	mls	r7, r3, r1, r5
 800b5fa:	5dc7      	ldrb	r7, [r0, r7]
 800b5fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b600:	462f      	mov	r7, r5
 800b602:	42bb      	cmp	r3, r7
 800b604:	460d      	mov	r5, r1
 800b606:	d9f4      	bls.n	800b5f2 <_printf_i+0x112>
 800b608:	2b08      	cmp	r3, #8
 800b60a:	d10b      	bne.n	800b624 <_printf_i+0x144>
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	07df      	lsls	r7, r3, #31
 800b610:	d508      	bpl.n	800b624 <_printf_i+0x144>
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	6861      	ldr	r1, [r4, #4]
 800b616:	4299      	cmp	r1, r3
 800b618:	bfde      	ittt	le
 800b61a:	2330      	movle	r3, #48	@ 0x30
 800b61c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b620:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b624:	1b92      	subs	r2, r2, r6
 800b626:	6122      	str	r2, [r4, #16]
 800b628:	f8cd a000 	str.w	sl, [sp]
 800b62c:	464b      	mov	r3, r9
 800b62e:	aa03      	add	r2, sp, #12
 800b630:	4621      	mov	r1, r4
 800b632:	4640      	mov	r0, r8
 800b634:	f7ff fee6 	bl	800b404 <_printf_common>
 800b638:	3001      	adds	r0, #1
 800b63a:	d14a      	bne.n	800b6d2 <_printf_i+0x1f2>
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	b004      	add	sp, #16
 800b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	f043 0320 	orr.w	r3, r3, #32
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	4833      	ldr	r0, [pc, #204]	@ (800b71c <_printf_i+0x23c>)
 800b650:	2778      	movs	r7, #120	@ 0x78
 800b652:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	6831      	ldr	r1, [r6, #0]
 800b65a:	061f      	lsls	r7, r3, #24
 800b65c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b660:	d402      	bmi.n	800b668 <_printf_i+0x188>
 800b662:	065f      	lsls	r7, r3, #25
 800b664:	bf48      	it	mi
 800b666:	b2ad      	uxthmi	r5, r5
 800b668:	6031      	str	r1, [r6, #0]
 800b66a:	07d9      	lsls	r1, r3, #31
 800b66c:	bf44      	itt	mi
 800b66e:	f043 0320 	orrmi.w	r3, r3, #32
 800b672:	6023      	strmi	r3, [r4, #0]
 800b674:	b11d      	cbz	r5, 800b67e <_printf_i+0x19e>
 800b676:	2310      	movs	r3, #16
 800b678:	e7ac      	b.n	800b5d4 <_printf_i+0xf4>
 800b67a:	4827      	ldr	r0, [pc, #156]	@ (800b718 <_printf_i+0x238>)
 800b67c:	e7e9      	b.n	800b652 <_printf_i+0x172>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	f023 0320 	bic.w	r3, r3, #32
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	e7f6      	b.n	800b676 <_printf_i+0x196>
 800b688:	4616      	mov	r6, r2
 800b68a:	e7bd      	b.n	800b608 <_printf_i+0x128>
 800b68c:	6833      	ldr	r3, [r6, #0]
 800b68e:	6825      	ldr	r5, [r4, #0]
 800b690:	6961      	ldr	r1, [r4, #20]
 800b692:	1d18      	adds	r0, r3, #4
 800b694:	6030      	str	r0, [r6, #0]
 800b696:	062e      	lsls	r6, r5, #24
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	d501      	bpl.n	800b6a0 <_printf_i+0x1c0>
 800b69c:	6019      	str	r1, [r3, #0]
 800b69e:	e002      	b.n	800b6a6 <_printf_i+0x1c6>
 800b6a0:	0668      	lsls	r0, r5, #25
 800b6a2:	d5fb      	bpl.n	800b69c <_printf_i+0x1bc>
 800b6a4:	8019      	strh	r1, [r3, #0]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	4616      	mov	r6, r2
 800b6ac:	e7bc      	b.n	800b628 <_printf_i+0x148>
 800b6ae:	6833      	ldr	r3, [r6, #0]
 800b6b0:	1d1a      	adds	r2, r3, #4
 800b6b2:	6032      	str	r2, [r6, #0]
 800b6b4:	681e      	ldr	r6, [r3, #0]
 800b6b6:	6862      	ldr	r2, [r4, #4]
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7f4 fe30 	bl	8000320 <memchr>
 800b6c0:	b108      	cbz	r0, 800b6c6 <_printf_i+0x1e6>
 800b6c2:	1b80      	subs	r0, r0, r6
 800b6c4:	6060      	str	r0, [r4, #4]
 800b6c6:	6863      	ldr	r3, [r4, #4]
 800b6c8:	6123      	str	r3, [r4, #16]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6d0:	e7aa      	b.n	800b628 <_printf_i+0x148>
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	4640      	mov	r0, r8
 800b6da:	47d0      	blx	sl
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d0ad      	beq.n	800b63c <_printf_i+0x15c>
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	079b      	lsls	r3, r3, #30
 800b6e4:	d413      	bmi.n	800b70e <_printf_i+0x22e>
 800b6e6:	68e0      	ldr	r0, [r4, #12]
 800b6e8:	9b03      	ldr	r3, [sp, #12]
 800b6ea:	4298      	cmp	r0, r3
 800b6ec:	bfb8      	it	lt
 800b6ee:	4618      	movlt	r0, r3
 800b6f0:	e7a6      	b.n	800b640 <_printf_i+0x160>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	4632      	mov	r2, r6
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	47d0      	blx	sl
 800b6fc:	3001      	adds	r0, #1
 800b6fe:	d09d      	beq.n	800b63c <_printf_i+0x15c>
 800b700:	3501      	adds	r5, #1
 800b702:	68e3      	ldr	r3, [r4, #12]
 800b704:	9903      	ldr	r1, [sp, #12]
 800b706:	1a5b      	subs	r3, r3, r1
 800b708:	42ab      	cmp	r3, r5
 800b70a:	dcf2      	bgt.n	800b6f2 <_printf_i+0x212>
 800b70c:	e7eb      	b.n	800b6e6 <_printf_i+0x206>
 800b70e:	2500      	movs	r5, #0
 800b710:	f104 0619 	add.w	r6, r4, #25
 800b714:	e7f5      	b.n	800b702 <_printf_i+0x222>
 800b716:	bf00      	nop
 800b718:	0800b981 	.word	0x0800b981
 800b71c:	0800b992 	.word	0x0800b992

0800b720 <memmove>:
 800b720:	4288      	cmp	r0, r1
 800b722:	b510      	push	{r4, lr}
 800b724:	eb01 0402 	add.w	r4, r1, r2
 800b728:	d902      	bls.n	800b730 <memmove+0x10>
 800b72a:	4284      	cmp	r4, r0
 800b72c:	4623      	mov	r3, r4
 800b72e:	d807      	bhi.n	800b740 <memmove+0x20>
 800b730:	1e43      	subs	r3, r0, #1
 800b732:	42a1      	cmp	r1, r4
 800b734:	d008      	beq.n	800b748 <memmove+0x28>
 800b736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b73a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b73e:	e7f8      	b.n	800b732 <memmove+0x12>
 800b740:	4402      	add	r2, r0
 800b742:	4601      	mov	r1, r0
 800b744:	428a      	cmp	r2, r1
 800b746:	d100      	bne.n	800b74a <memmove+0x2a>
 800b748:	bd10      	pop	{r4, pc}
 800b74a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b74e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b752:	e7f7      	b.n	800b744 <memmove+0x24>

0800b754 <_sbrk_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d06      	ldr	r5, [pc, #24]	@ (800b770 <_sbrk_r+0x1c>)
 800b758:	2300      	movs	r3, #0
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	602b      	str	r3, [r5, #0]
 800b760:	f7f5 fed6 	bl	8001510 <_sbrk>
 800b764:	1c43      	adds	r3, r0, #1
 800b766:	d102      	bne.n	800b76e <_sbrk_r+0x1a>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	b103      	cbz	r3, 800b76e <_sbrk_r+0x1a>
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	240010a4 	.word	0x240010a4

0800b774 <memcpy>:
 800b774:	440a      	add	r2, r1
 800b776:	4291      	cmp	r1, r2
 800b778:	f100 33ff 	add.w	r3, r0, #4294967295
 800b77c:	d100      	bne.n	800b780 <memcpy+0xc>
 800b77e:	4770      	bx	lr
 800b780:	b510      	push	{r4, lr}
 800b782:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b78a:	4291      	cmp	r1, r2
 800b78c:	d1f9      	bne.n	800b782 <memcpy+0xe>
 800b78e:	bd10      	pop	{r4, pc}

0800b790 <_realloc_r>:
 800b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	4680      	mov	r8, r0
 800b796:	4615      	mov	r5, r2
 800b798:	460c      	mov	r4, r1
 800b79a:	b921      	cbnz	r1, 800b7a6 <_realloc_r+0x16>
 800b79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	f7ff bc4b 	b.w	800b03c <_malloc_r>
 800b7a6:	b92a      	cbnz	r2, 800b7b4 <_realloc_r+0x24>
 800b7a8:	f7ff fbdc 	bl	800af64 <_free_r>
 800b7ac:	2400      	movs	r4, #0
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b4:	f000 f81a 	bl	800b7ec <_malloc_usable_size_r>
 800b7b8:	4285      	cmp	r5, r0
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	d802      	bhi.n	800b7c4 <_realloc_r+0x34>
 800b7be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b7c2:	d8f4      	bhi.n	800b7ae <_realloc_r+0x1e>
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	f7ff fc38 	bl	800b03c <_malloc_r>
 800b7cc:	4607      	mov	r7, r0
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d0ec      	beq.n	800b7ac <_realloc_r+0x1c>
 800b7d2:	42b5      	cmp	r5, r6
 800b7d4:	462a      	mov	r2, r5
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	bf28      	it	cs
 800b7da:	4632      	movcs	r2, r6
 800b7dc:	f7ff ffca 	bl	800b774 <memcpy>
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f7ff fbbe 	bl	800af64 <_free_r>
 800b7e8:	463c      	mov	r4, r7
 800b7ea:	e7e0      	b.n	800b7ae <_realloc_r+0x1e>

0800b7ec <_malloc_usable_size_r>:
 800b7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f0:	1f18      	subs	r0, r3, #4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	bfbc      	itt	lt
 800b7f6:	580b      	ldrlt	r3, [r1, r0]
 800b7f8:	18c0      	addlt	r0, r0, r3
 800b7fa:	4770      	bx	lr

0800b7fc <_init>:
 800b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fe:	bf00      	nop
 800b800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b802:	bc08      	pop	{r3}
 800b804:	469e      	mov	lr, r3
 800b806:	4770      	bx	lr

0800b808 <_fini>:
 800b808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80a:	bf00      	nop
 800b80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80e:	bc08      	pop	{r3}
 800b810:	469e      	mov	lr, r3
 800b812:	4770      	bx	lr
