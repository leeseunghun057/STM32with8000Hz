
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b534  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800b804  0800b804  0000c804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b994  0800b994  0000c994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b99c  0800b99c  0000c99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b9a0  0800b9a0  0000c9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001c4  24000000  0800b9a4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cc8  240001c4  0800bb68  0000d1c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e8c  0800bb68  0000de8c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000190a4  00000000  00000000  0000d1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003716  00000000  00000000  00026296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001198  00000000  00000000  000299b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d63  00000000  00000000  0002ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010589  00000000  00000000  0002b8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0000644f  00000000  00000000  0003be34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00042283  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004ddc  00000000  00000000  000422c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  000470a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001c4 	.word	0x240001c4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b7ec 	.word	0x0800b7ec

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001c8 	.word	0x240001c8
 800030c:	0800b7ec 	.word	0x0800b7ec

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern USBD_HandleTypeDef hUsbDeviceHS;

int MatrixScan()
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
    for (int i = 0; i < KEY_NUMBER; ++i)
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	e038      	b.n	800072e <MatrixScan+0x7e>
    {
        // Pin State High 1, Low 0
        if(MatrixState[i]!=HAL_GPIO_ReadPin(GPIO_ABC[i], GPIO_Num[i]))
 80006bc:	4a20      	ldr	r2, [pc, #128]	@ (8000740 <MatrixScan+0x90>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80006c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000744 <MatrixScan+0x94>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006cc:	491e      	ldr	r1, [pc, #120]	@ (8000748 <MatrixScan+0x98>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	4619      	mov	r1, r3
 80006d8:	4610      	mov	r0, r2
 80006da:	f001 fbe9 	bl	8001eb0 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	429c      	cmp	r4, r3
 80006e2:	d021      	beq.n	8000728 <MatrixScan+0x78>
        {
        	if ( HAL_GetTick() - DebounceTimer[i] > DEBOUNCE_TIME)
 80006e4:	f001 f884 	bl	80017f0 <HAL_GetTick>
 80006e8:	4602      	mov	r2, r0
 80006ea:	4918      	ldr	r1, [pc, #96]	@ (800074c <MatrixScan+0x9c>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	2b64      	cmp	r3, #100	@ 0x64
 80006f6:	d917      	bls.n	8000728 <MatrixScan+0x78>
        	{
                MatrixState[i]= !MatrixState[i];
 80006f8:	4a11      	ldr	r2, [pc, #68]	@ (8000740 <MatrixScan+0x90>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf0c      	ite	eq
 8000704:	2301      	moveq	r3, #1
 8000706:	2300      	movne	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <MatrixScan+0x90>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                DebounceTimer[i] = HAL_GetTick();
 8000714:	f001 f86c 	bl	80017f0 <HAL_GetTick>
 8000718:	4603      	mov	r3, r0
 800071a:	4619      	mov	r1, r3
 800071c:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <MatrixScan+0x9c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                return i;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	e007      	b.n	8000738 <MatrixScan+0x88>
    for (int i = 0; i < KEY_NUMBER; ++i)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3301      	adds	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b04      	cmp	r3, #4
 8000732:	ddc3      	ble.n	80006bc <MatrixScan+0xc>
        	}
        }
    }
    return -1;
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	2400031c 	.word	0x2400031c
 8000744:	24000000 	.word	0x24000000
 8000748:	24000014 	.word	0x24000014
 800074c:	24000350 	.word	0x24000350

08000750 <SetKeycode>:

void SetKeycode(int keycode)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == 0x00)
 8000758:	4b4a      	ldr	r3, [pc, #296]	@ (8000884 <SetKeycode+0x134>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d104      	bne.n	800076a <SetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = keycode;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b47      	ldr	r3, [pc, #284]	@ (8000884 <SetKeycode+0x134>)
 8000766:	709a      	strb	r2, [r3, #2]
    }
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
    {
        keyboardReport.Keycode6 = keycode;
    }
}
 8000768:	e086      	b.n	8000878 <SetKeycode+0x128>
    else if (keyboardReport.Keycode2 == 0x00 && keycode != keyboardReport.Keycode1)
 800076a:	4b46      	ldr	r3, [pc, #280]	@ (8000884 <SetKeycode+0x134>)
 800076c:	78db      	ldrb	r3, [r3, #3]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10a      	bne.n	8000788 <SetKeycode+0x38>
 8000772:	4b44      	ldr	r3, [pc, #272]	@ (8000884 <SetKeycode+0x134>)
 8000774:	789b      	ldrb	r3, [r3, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4293      	cmp	r3, r2
 800077c:	d004      	beq.n	8000788 <SetKeycode+0x38>
        keyboardReport.Keycode2 = keycode;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b40      	ldr	r3, [pc, #256]	@ (8000884 <SetKeycode+0x134>)
 8000784:	70da      	strb	r2, [r3, #3]
 8000786:	e077      	b.n	8000878 <SetKeycode+0x128>
    else if (keyboardReport.Keycode3 == 0x00 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000788:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <SetKeycode+0x134>)
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d110      	bne.n	80007b2 <SetKeycode+0x62>
 8000790:	4b3c      	ldr	r3, [pc, #240]	@ (8000884 <SetKeycode+0x134>)
 8000792:	78db      	ldrb	r3, [r3, #3]
 8000794:	461a      	mov	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4293      	cmp	r3, r2
 800079a:	d00a      	beq.n	80007b2 <SetKeycode+0x62>
 800079c:	4b39      	ldr	r3, [pc, #228]	@ (8000884 <SetKeycode+0x134>)
 800079e:	789b      	ldrb	r3, [r3, #2]
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d004      	beq.n	80007b2 <SetKeycode+0x62>
        keyboardReport.Keycode3 = keycode;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <SetKeycode+0x134>)
 80007ae:	711a      	strb	r2, [r3, #4]
 80007b0:	e062      	b.n	8000878 <SetKeycode+0x128>
    else if (keyboardReport.Keycode4 == 0x00 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 80007b2:	4b34      	ldr	r3, [pc, #208]	@ (8000884 <SetKeycode+0x134>)
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d116      	bne.n	80007e8 <SetKeycode+0x98>
 80007ba:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <SetKeycode+0x134>)
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d010      	beq.n	80007e8 <SetKeycode+0x98>
 80007c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000884 <SetKeycode+0x134>)
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	461a      	mov	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d00a      	beq.n	80007e8 <SetKeycode+0x98>
 80007d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <SetKeycode+0x134>)
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4293      	cmp	r3, r2
 80007dc:	d004      	beq.n	80007e8 <SetKeycode+0x98>
        keyboardReport.Keycode4 = keycode;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <SetKeycode+0x134>)
 80007e4:	715a      	strb	r2, [r3, #5]
 80007e6:	e047      	b.n	8000878 <SetKeycode+0x128>
    else if (keyboardReport.Keycode5 == 0x00 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 80007e8:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <SetKeycode+0x134>)
 80007ea:	799b      	ldrb	r3, [r3, #6]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d11c      	bne.n	800082a <SetKeycode+0xda>
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <SetKeycode+0x134>)
 80007f2:	795b      	ldrb	r3, [r3, #5]
 80007f4:	461a      	mov	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d016      	beq.n	800082a <SetKeycode+0xda>
 80007fc:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <SetKeycode+0x134>)
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4293      	cmp	r3, r2
 8000806:	d010      	beq.n	800082a <SetKeycode+0xda>
 8000808:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <SetKeycode+0x134>)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	461a      	mov	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4293      	cmp	r3, r2
 8000812:	d00a      	beq.n	800082a <SetKeycode+0xda>
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <SetKeycode+0x134>)
 8000816:	789b      	ldrb	r3, [r3, #2]
 8000818:	461a      	mov	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4293      	cmp	r3, r2
 800081e:	d004      	beq.n	800082a <SetKeycode+0xda>
        keyboardReport.Keycode5 = keycode;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <SetKeycode+0x134>)
 8000826:	719a      	strb	r2, [r3, #6]
 8000828:	e026      	b.n	8000878 <SetKeycode+0x128>
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <SetKeycode+0x134>)
 800082c:	79db      	ldrb	r3, [r3, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d122      	bne.n	8000878 <SetKeycode+0x128>
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <SetKeycode+0x134>)
 8000834:	799b      	ldrb	r3, [r3, #6]
 8000836:	461a      	mov	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4293      	cmp	r3, r2
 800083c:	d01c      	beq.n	8000878 <SetKeycode+0x128>
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <SetKeycode+0x134>)
 8000840:	795b      	ldrb	r3, [r3, #5]
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4293      	cmp	r3, r2
 8000848:	d016      	beq.n	8000878 <SetKeycode+0x128>
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <SetKeycode+0x134>)
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	461a      	mov	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4293      	cmp	r3, r2
 8000854:	d010      	beq.n	8000878 <SetKeycode+0x128>
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <SetKeycode+0x134>)
 8000858:	78db      	ldrb	r3, [r3, #3]
 800085a:	461a      	mov	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4293      	cmp	r3, r2
 8000860:	d00a      	beq.n	8000878 <SetKeycode+0x128>
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <SetKeycode+0x134>)
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	461a      	mov	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4293      	cmp	r3, r2
 800086c:	d004      	beq.n	8000878 <SetKeycode+0x128>
        keyboardReport.Keycode6 = keycode;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <SetKeycode+0x134>)
 8000874:	71da      	strb	r2, [r3, #7]
}
 8000876:	e7ff      	b.n	8000878 <SetKeycode+0x128>
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	240001e0 	.word	0x240001e0

08000888 <ResetKeycode>:

void ResetKeycode(int keycode)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == keycode)
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <ResetKeycode+0x80>)
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	461a      	mov	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4293      	cmp	r3, r2
 800089a:	d102      	bne.n	80008a2 <ResetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = 0x00;
 800089c:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <ResetKeycode+0x80>)
 800089e:	2200      	movs	r2, #0
 80008a0:	709a      	strb	r2, [r3, #2]
    }
    if (keyboardReport.Keycode2 == keycode)
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <ResetKeycode+0x80>)
 80008a4:	78db      	ldrb	r3, [r3, #3]
 80008a6:	461a      	mov	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d102      	bne.n	80008b4 <ResetKeycode+0x2c>
    {
        keyboardReport.Keycode2 = 0x00;
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <ResetKeycode+0x80>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	70da      	strb	r2, [r3, #3]
    }
    if (keyboardReport.Keycode3 == keycode)
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <ResetKeycode+0x80>)
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4293      	cmp	r3, r2
 80008be:	d102      	bne.n	80008c6 <ResetKeycode+0x3e>
    {
        keyboardReport.Keycode3 = 0x00;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <ResetKeycode+0x80>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	711a      	strb	r2, [r3, #4]
    }
    if (keyboardReport.Keycode4 == keycode)
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <ResetKeycode+0x80>)
 80008c8:	795b      	ldrb	r3, [r3, #5]
 80008ca:	461a      	mov	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d102      	bne.n	80008d8 <ResetKeycode+0x50>
    {
        keyboardReport.Keycode4 = 0x00;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <ResetKeycode+0x80>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	715a      	strb	r2, [r3, #5]
    }
    if (keyboardReport.Keycode5 == keycode)
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <ResetKeycode+0x80>)
 80008da:	799b      	ldrb	r3, [r3, #6]
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d102      	bne.n	80008ea <ResetKeycode+0x62>
    {
        keyboardReport.Keycode5 = 0x00;
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <ResetKeycode+0x80>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	719a      	strb	r2, [r3, #6]
    }
    if (keyboardReport.Keycode6 == keycode)
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <ResetKeycode+0x80>)
 80008ec:	79db      	ldrb	r3, [r3, #7]
 80008ee:	461a      	mov	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d102      	bne.n	80008fc <ResetKeycode+0x74>
    {
        keyboardReport.Keycode6 = 0x00;
 80008f6:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <ResetKeycode+0x80>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	71da      	strb	r2, [r3, #7]
    }
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	240001e0 	.word	0x240001e0

0800090c <KeycodeSend>:

void KeycodeSend()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09a      	sub	sp, #104	@ 0x68
 8000910:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t *)&keyboardReport, sizeof(keyboardReport));
 8000912:	2208      	movs	r2, #8
 8000914:	490c      	ldr	r1, [pc, #48]	@ (8000948 <KeycodeSend+0x3c>)
 8000916:	480d      	ldr	r0, [pc, #52]	@ (800094c <KeycodeSend+0x40>)
 8000918:	f008 fa58 	bl	8008dcc <USBD_HID_SendReport>

    char message[100];
    sprintf(message, "KeycodeSend");
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	490c      	ldr	r1, [pc, #48]	@ (8000950 <KeycodeSend+0x44>)
 8000920:	4618      	mov	r0, r3
 8000922:	f00a fac3 	bl	800aeac <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fcf1 	bl	8000310 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	b29a      	uxth	r2, r3
 8000932:	1d39      	adds	r1, r7, #4
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <KeycodeSend+0x48>)
 800093a:	f005 fb1b 	bl	8005f74 <HAL_UART_Transmit>
}
 800093e:	bf00      	nop
 8000940:	3768      	adds	r7, #104	@ 0x68
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	240001e0 	.word	0x240001e0
 800094c:	24000370 	.word	0x24000370
 8000950:	0800b804 	.word	0x0800b804
 8000954:	240001e8 	.word	0x240001e8

08000958 <PressKeycodes>:

void PressKeycodes(int i)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	@ 0x70
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

	if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000960:	4b89      	ldr	r3, [pc, #548]	@ (8000b88 <PressKeycodes+0x230>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4989      	ldr	r1, [pc, #548]	@ (8000b8c <PressKeycodes+0x234>)
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	4413      	add	r3, r2
 8000970:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000974:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000978:	4293      	cmp	r3, r2
 800097a:	d925      	bls.n	80009c8 <PressKeycodes+0x70>
	{
		KeyTimer = HAL_GetTick();
 800097c:	f000 ff38 	bl	80017f0 <HAL_GetTick>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	4b82      	ldr	r3, [pc, #520]	@ (8000b90 <PressKeycodes+0x238>)
 8000986:	601a      	str	r2, [r3, #0]

		char message5[100];
		sprintf(message5, "HoldTapPress = %d \n\r", Keycode[LayerState][i]);
 8000988:	4b7f      	ldr	r3, [pc, #508]	@ (8000b88 <PressKeycodes+0x230>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	497f      	ldr	r1, [pc, #508]	@ (8000b8c <PressKeycodes+0x234>)
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800099c:	461a      	mov	r2, r3
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	497c      	ldr	r1, [pc, #496]	@ (8000b94 <PressKeycodes+0x23c>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00a fa81 	bl	800aeac <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fcae 	bl	8000310 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	f107 010c 	add.w	r1, r7, #12
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	4875      	ldr	r0, [pc, #468]	@ (8000b98 <PressKeycodes+0x240>)
 80009c2:	f005 fad7 	bl	8005f74 <HAL_UART_Transmit>

		char message4[100];
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
	}
}
 80009c6:	e0db      	b.n	8000b80 <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 10000)
 80009c8:	4b6f      	ldr	r3, [pc, #444]	@ (8000b88 <PressKeycodes+0x230>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	496f      	ldr	r1, [pc, #444]	@ (8000b8c <PressKeycodes+0x234>)
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d941      	bls.n	8000a68 <PressKeycodes+0x110>
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i] - 10000];
 80009e4:	4b68      	ldr	r3, [pc, #416]	@ (8000b88 <PressKeycodes+0x230>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4968      	ldr	r1, [pc, #416]	@ (8000b8c <PressKeycodes+0x234>)
 80009ea:	4613      	mov	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	4413      	add	r3, r2
 80009f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b68      	ldr	r3, [pc, #416]	@ (8000b9c <PressKeycodes+0x244>)
 80009fc:	4413      	add	r3, r2
 80009fe:	4a68      	ldr	r2, [pc, #416]	@ (8000ba0 <PressKeycodes+0x248>)
 8000a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a04:	b25a      	sxtb	r2, r3
 8000a06:	4b67      	ldr	r3, [pc, #412]	@ (8000ba4 <PressKeycodes+0x24c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b25b      	sxtb	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b64      	ldr	r3, [pc, #400]	@ (8000ba4 <PressKeycodes+0x24c>)
 8000a14:	701a      	strb	r2, [r3, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 8000a16:	4b63      	ldr	r3, [pc, #396]	@ (8000ba4 <PressKeycodes+0x24c>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b63      	ldr	r3, [pc, #396]	@ (8000ba8 <PressKeycodes+0x250>)
 8000a1c:	701a      	strb	r2, [r3, #0]
		sprintf(message1, "ModifierPress = %d \n\r", Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8000a1e:	4b5a      	ldr	r3, [pc, #360]	@ (8000b88 <PressKeycodes+0x230>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	495a      	ldr	r1, [pc, #360]	@ (8000b8c <PressKeycodes+0x234>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b59      	ldr	r3, [pc, #356]	@ (8000b9c <PressKeycodes+0x244>)
 8000a36:	4413      	add	r3, r2
 8000a38:	4a59      	ldr	r2, [pc, #356]	@ (8000ba0 <PressKeycodes+0x248>)
 8000a3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	495a      	ldr	r1, [pc, #360]	@ (8000bac <PressKeycodes+0x254>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00a fa31 	bl	800aeac <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fc5e 	bl	8000310 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	f107 010c 	add.w	r1, r7, #12
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	484d      	ldr	r0, [pc, #308]	@ (8000b98 <PressKeycodes+0x240>)
 8000a62:	f005 fa87 	bl	8005f74 <HAL_UART_Transmit>
}
 8000a66:	e08b      	b.n	8000b80 <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 5000)
 8000a68:	4b47      	ldr	r3, [pc, #284]	@ (8000b88 <PressKeycodes+0x230>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4947      	ldr	r1, [pc, #284]	@ (8000b8c <PressKeycodes+0x234>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a7c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d94b      	bls.n	8000b1c <PressKeycodes+0x1c4>
		if ( Keycode[LayerState][i] == KC_FN1)
 8000a84:	4b40      	ldr	r3, [pc, #256]	@ (8000b88 <PressKeycodes+0x230>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4940      	ldr	r1, [pc, #256]	@ (8000b8c <PressKeycodes+0x234>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d103      	bne.n	8000aa8 <PressKeycodes+0x150>
			LayerState = 1; // Layer1 when pressed
 8000aa0:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <PressKeycodes+0x230>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e022      	b.n	8000aee <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD0)
 8000aa8:	4b37      	ldr	r3, [pc, #220]	@ (8000b88 <PressKeycodes+0x230>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4937      	ldr	r1, [pc, #220]	@ (8000b8c <PressKeycodes+0x234>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000abc:	f241 3289 	movw	r2, #5001	@ 0x1389
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d103      	bne.n	8000acc <PressKeycodes+0x174>
			LayerState = 0;
 8000ac4:	4b30      	ldr	r3, [pc, #192]	@ (8000b88 <PressKeycodes+0x230>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	e010      	b.n	8000aee <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD1)
 8000acc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b88 <PressKeycodes+0x230>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	492e      	ldr	r1, [pc, #184]	@ (8000b8c <PressKeycodes+0x234>)
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ae0:	f241 328a 	movw	r2, #5002	@ 0x138a
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d102      	bne.n	8000aee <PressKeycodes+0x196>
			LayerState = 1;
 8000ae8:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <PressKeycodes+0x230>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
		sprintf(message1, "Current Layer = %d \n\r", LayerState);
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <PressKeycodes+0x230>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	492e      	ldr	r1, [pc, #184]	@ (8000bb0 <PressKeycodes+0x258>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f00a f9d7 	bl	800aeac <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fc04 	bl	8000310 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f107 010c 	add.w	r1, r7, #12
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	4820      	ldr	r0, [pc, #128]	@ (8000b98 <PressKeycodes+0x240>)
 8000b16:	f005 fa2d 	bl	8005f74 <HAL_UART_Transmit>
}
 8000b1a:	e031      	b.n	8000b80 <PressKeycodes+0x228>
		SetKeycode(Keycode[LayerState][i]);
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <PressKeycodes+0x230>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	491a      	ldr	r1, [pc, #104]	@ (8000b8c <PressKeycodes+0x234>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe0d 	bl	8000750 <SetKeycode>
		WhichLayer[i] = LayerState;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <PressKeycodes+0x230>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	491e      	ldr	r1, [pc, #120]	@ (8000bb4 <PressKeycodes+0x25c>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <PressKeycodes+0x230>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4911      	ldr	r1, [pc, #68]	@ (8000b8c <PressKeycodes+0x234>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b56:	461a      	mov	r2, r3
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4916      	ldr	r1, [pc, #88]	@ (8000bb8 <PressKeycodes+0x260>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00a f9a4 	bl	800aeac <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fbd1 	bl	8000310 <strlen>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f107 010c 	add.w	r1, r7, #12
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <PressKeycodes+0x240>)
 8000b7c:	f005 f9fa 	bl	8005f74 <HAL_UART_Transmit>
}
 8000b80:	bf00      	nop
 8000b82:	3770      	adds	r7, #112	@ 0x70
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	24000330 	.word	0x24000330
 8000b8c:	24000028 	.word	0x24000028
 8000b90:	2400034c 	.word	0x2400034c
 8000b94:	0800b810 	.word	0x0800b810
 8000b98:	240001e8 	.word	0x240001e8
 8000b9c:	ffffd8f0 	.word	0xffffd8f0
 8000ba0:	2400003c 	.word	0x2400003c
 8000ba4:	24000318 	.word	0x24000318
 8000ba8:	240001e0 	.word	0x240001e0
 8000bac:	0800b828 	.word	0x0800b828
 8000bb0:	0800b840 	.word	0x0800b840
 8000bb4:	24000334 	.word	0x24000334
 8000bb8:	0800b858 	.word	0x0800b858

08000bbc <ReleaseKeycodes>:

void ReleaseKeycodes(int i)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b09c      	sub	sp, #112	@ 0x70
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000bc4:	4b8c      	ldr	r3, [pc, #560]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	498c      	ldr	r1, [pc, #560]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bd8:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d959      	bls.n	8000c94 <ReleaseKeycodes+0xd8>
    {
        if (HAL_GetTick() - KeyTimer > HOLD_TIME)
 8000be0:	f000 fe06 	bl	80017f0 <HAL_GetTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4a86      	ldr	r2, [pc, #536]	@ (8000e00 <ReleaseKeycodes+0x244>)
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	2bfa      	cmp	r3, #250	@ 0xfa
 8000bee:	d90e      	bls.n	8000c0e <ReleaseKeycodes+0x52>
        {
            TempKeycode = Keycode[LayerState + 1][i]; // Hold 작동시 다음 레이어에 있는 키코드 전송
 8000bf0:	4b81      	ldr	r3, [pc, #516]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	4981      	ldr	r1, [pc, #516]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b7e      	ldr	r3, [pc, #504]	@ (8000e04 <ReleaseKeycodes+0x248>)
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	e00e      	b.n	8000c2c <ReleaseKeycodes+0x70>
        }
        else
        {
            TempKeycode = Keycode[LayerState][i] - 30000; // Tap 작동시 현재 레이어에 있는 키코드 -30000 전송
 8000c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	497a      	ldr	r1, [pc, #488]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b78      	ldr	r3, [pc, #480]	@ (8000e08 <ReleaseKeycodes+0x24c>)
 8000c26:	4413      	add	r3, r2
 8000c28:	4a76      	ldr	r2, [pc, #472]	@ (8000e04 <ReleaseKeycodes+0x248>)
 8000c2a:	6013      	str	r3, [r2, #0]
        }
        SetKeycode(TempKeycode);
 8000c2c:	4b75      	ldr	r3, [pc, #468]	@ (8000e04 <ReleaseKeycodes+0x248>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fd8d 	bl	8000750 <SetKeycode>
        KeycodeSend();
 8000c36:	f7ff fe69 	bl	800090c <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 8000c3a:	2032      	movs	r0, #50	@ 0x32
 8000c3c:	f000 fde4 	bl	8001808 <HAL_Delay>
        ResetKeycode(TempKeycode);
 8000c40:	4b70      	ldr	r3, [pc, #448]	@ (8000e04 <ReleaseKeycodes+0x248>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fe1f 	bl	8000888 <ResetKeycode>
        KeycodeSend();
 8000c4a:	f7ff fe5f 	bl	800090c <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 8000c4e:	2032      	movs	r0, #50	@ 0x32
 8000c50:	f000 fdda 	bl	8001808 <HAL_Delay>

        char message5[100];
        sprintf(message5, "HoldTapRelease = %d \n\r", Keycode[LayerState][i]);
 8000c54:	4b68      	ldr	r3, [pc, #416]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4968      	ldr	r1, [pc, #416]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4967      	ldr	r1, [pc, #412]	@ (8000e0c <ReleaseKeycodes+0x250>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f00a f91b 	bl	800aeac <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fb48 	bl	8000310 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	f107 010c 	add.w	r1, r7, #12
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	4860      	ldr	r0, [pc, #384]	@ (8000e10 <ReleaseKeycodes+0x254>)
 8000c8e:	f005 f971 	bl	8005f74 <HAL_UART_Transmit>
        char message5[100];
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
    }

}
 8000c92:	e0ac      	b.n	8000dee <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 10000)
 8000c94:	4b58      	ldr	r3, [pc, #352]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4958      	ldr	r1, [pc, #352]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ca8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d93e      	bls.n	8000d2e <ReleaseKeycodes+0x172>
        Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8000cb0:	4b51      	ldr	r3, [pc, #324]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4951      	ldr	r1, [pc, #324]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b53      	ldr	r3, [pc, #332]	@ (8000e14 <ReleaseKeycodes+0x258>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a53      	ldr	r2, [pc, #332]	@ (8000e18 <ReleaseKeycodes+0x25c>)
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	b25a      	sxtb	r2, r3
 8000cd6:	4b51      	ldr	r3, [pc, #324]	@ (8000e1c <ReleaseKeycodes+0x260>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8000e1c <ReleaseKeycodes+0x260>)
 8000ce4:	701a      	strb	r2, [r3, #0]
        keyboardReport.MODIFIER = Modifier_Sum;
 8000ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8000e1c <ReleaseKeycodes+0x260>)
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	4b4d      	ldr	r3, [pc, #308]	@ (8000e20 <ReleaseKeycodes+0x264>)
 8000cec:	701a      	strb	r2, [r3, #0]
        sprintf(message2, "ModifierRelease = %d\n\r", Keycode[LayerState][i]);
 8000cee:	4b42      	ldr	r3, [pc, #264]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4942      	ldr	r1, [pc, #264]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d02:	461a      	mov	r2, r3
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4946      	ldr	r1, [pc, #280]	@ (8000e24 <ReleaseKeycodes+0x268>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00a f8ce 	bl	800aeac <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message2, strlen(message2), HAL_MAX_DELAY);
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fafb 	bl	8000310 <strlen>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	f107 010c 	add.w	r1, r7, #12
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	483a      	ldr	r0, [pc, #232]	@ (8000e10 <ReleaseKeycodes+0x254>)
 8000d28:	f005 f924 	bl	8005f74 <HAL_UART_Transmit>
}
 8000d2c:	e05f      	b.n	8000dee <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 5000 )
 8000d2e:	4b32      	ldr	r3, [pc, #200]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4932      	ldr	r1, [pc, #200]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d42:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d927      	bls.n	8000d9a <ReleaseKeycodes+0x1de>
    	if ( Keycode[LayerState][i] == KC_FN1 )
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	492b      	ldr	r1, [pc, #172]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d143      	bne.n	8000dee <ReleaseKeycodes+0x232>
            LayerState = 0; // Layer0 when released
 8000d66:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
            sprintf(message1, "Current Layer = %d \n\r", LayerState);
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <ReleaseKeycodes+0x23c>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	492c      	ldr	r1, [pc, #176]	@ (8000e28 <ReleaseKeycodes+0x26c>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f00a f898 	bl	800aeac <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fac5 	bl	8000310 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	f107 010c 	add.w	r1, r7, #12
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	481f      	ldr	r0, [pc, #124]	@ (8000e10 <ReleaseKeycodes+0x254>)
 8000d94:	f005 f8ee 	bl	8005f74 <HAL_UART_Transmit>
}
 8000d98:	e029      	b.n	8000dee <ReleaseKeycodes+0x232>
        TempKeycode = Keycode[WhichLayer[i]][i];
 8000d9a:	4a24      	ldr	r2, [pc, #144]	@ (8000e2c <ReleaseKeycodes+0x270>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000da2:	4916      	ldr	r1, [pc, #88]	@ (8000dfc <ReleaseKeycodes+0x240>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <ReleaseKeycodes+0x248>)
 8000db6:	601a      	str	r2, [r3, #0]
        ResetKeycode(TempKeycode);
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <ReleaseKeycodes+0x248>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fd63 	bl	8000888 <ResetKeycode>
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <ReleaseKeycodes+0x248>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	4919      	ldr	r1, [pc, #100]	@ (8000e30 <ReleaseKeycodes+0x274>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00a f86d 	bl	800aeac <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fa9a 	bl	8000310 <strlen>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	f107 010c 	add.w	r1, r7, #12
 8000de4:	f04f 33ff 	mov.w	r3, #4294967295
 8000de8:	4809      	ldr	r0, [pc, #36]	@ (8000e10 <ReleaseKeycodes+0x254>)
 8000dea:	f005 f8c3 	bl	8005f74 <HAL_UART_Transmit>
}
 8000dee:	bf00      	nop
 8000df0:	3770      	adds	r7, #112	@ 0x70
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	24000330 	.word	0x24000330
 8000dfc:	24000028 	.word	0x24000028
 8000e00:	2400034c 	.word	0x2400034c
 8000e04:	24000348 	.word	0x24000348
 8000e08:	ffff8ad0 	.word	0xffff8ad0
 8000e0c:	0800b870 	.word	0x0800b870
 8000e10:	240001e8 	.word	0x240001e8
 8000e14:	ffffd8f0 	.word	0xffffd8f0
 8000e18:	2400003c 	.word	0x2400003c
 8000e1c:	24000318 	.word	0x24000318
 8000e20:	240001e0 	.word	0x240001e0
 8000e24:	0800b888 	.word	0x0800b888
 8000e28:	0800b840 	.word	0x0800b840
 8000e2c:	24000334 	.word	0x24000334
 8000e30:	0800b8a0 	.word	0x0800b8a0

08000e34 <main>:
 * @brief  The application entry point.
 * @retval int
 */
//__attribute__((optimize("Ofast")))
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09a      	sub	sp, #104	@ 0x68
 8000e38:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */

    /* MPU Configuration--------------------------------------------------------*/
    MPU_Config();
 8000e3a:	f000 f9e3 	bl	8001204 <MPU_Config>

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000e3e:	f000 fc51 	bl	80016e4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000e42:	f000 f85f 	bl	8000f04 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000e46:	f000 f965 	bl	8001114 <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 8000e4a:	f009 fb73 	bl	800a534 <MX_USB_DEVICE_Init>
    MX_UART4_Init();
 8000e4e:	f000 f8c9 	bl	8000fe4 <MX_UART4_Init>
    MX_UART5_Init();
 8000e52:	f000 f913 	bl	800107c <MX_UART5_Init>
    {
        //Timer = HAL_GetTick(); // Get Current Time

    	//CheckScanrate();

        if (HAL_GetTick() - LastTimer >= 10000)
 8000e56:	f000 fccb 	bl	80017f0 <HAL_GetTick>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <main+0xb8>)
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d924      	bls.n	8000eb4 <main+0x80>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", HAL_GetTick(), Scanrate / 10);
 8000e6a:	f000 fcc1 	bl	80017f0 <HAL_GetTick>
 8000e6e:	4601      	mov	r1, r0
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <main+0xbc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef4 <main+0xc0>)
 8000e76:	fb82 0203 	smull	r0, r2, r2, r3
 8000e7a:	1092      	asrs	r2, r2, #2
 8000e7c:	17db      	asrs	r3, r3, #31
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	4638      	mov	r0, r7
 8000e82:	460a      	mov	r2, r1
 8000e84:	491c      	ldr	r1, [pc, #112]	@ (8000ef8 <main+0xc4>)
 8000e86:	f00a f811 	bl	800aeac <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fa3f 	bl	8000310 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4639      	mov	r1, r7
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	4817      	ldr	r0, [pc, #92]	@ (8000efc <main+0xc8>)
 8000e9e:	f005 f869 	bl	8005f74 <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 8000ea2:	f000 fca5 	bl	80017f0 <HAL_GetTick>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <main+0xb8>)
 8000eac:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <main+0xbc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <main+0xbc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <main+0xbc>)
 8000ebc:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

        int Temp = MatrixScan();
 8000ebe:	f7ff fbf7 	bl	80006b0 <MatrixScan>
 8000ec2:	6678      	str	r0, [r7, #100]	@ 0x64

        if ( Temp != -1 )
 8000ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eca:	d0c4      	beq.n	8000e56 <main+0x22>
        {
			if (MatrixState[Temp] == 0)
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <main+0xcc>)
 8000ece:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d103      	bne.n	8000ee0 <main+0xac>
			{
				PressKeycodes(Temp);
 8000ed8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000eda:	f7ff fd3d 	bl	8000958 <PressKeycodes>
 8000ede:	e002      	b.n	8000ee6 <main+0xb2>
			}
			else
			{
				ReleaseKeycodes(Temp);
 8000ee0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000ee2:	f7ff fe6b 	bl	8000bbc <ReleaseKeycodes>
			}
        	KeycodeSend();
 8000ee6:	f7ff fd11 	bl	800090c <KeycodeSend>
    {
 8000eea:	e7b4      	b.n	8000e56 <main+0x22>
 8000eec:	24000314 	.word	0x24000314
 8000ef0:	24000310 	.word	0x24000310
 8000ef4:	66666667 	.word	0x66666667
 8000ef8:	0800b8b8 	.word	0x0800b8b8
 8000efc:	240001e8 	.word	0x240001e8
 8000f00:	2400031c 	.word	0x2400031c

08000f04 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09c      	sub	sp, #112	@ 0x70
 8000f08:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0e:	224c      	movs	r2, #76	@ 0x4c
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f009 ffea 	bl	800aeec <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f009 ffe4 	bl	800aeec <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f24:	2002      	movs	r0, #2
 8000f26:	f002 fa63 	bl	80033f0 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <SystemClock_Config+0xdc>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe0 <SystemClock_Config+0xdc>)
 8000f34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f38:	6193      	str	r3, [r2, #24]
 8000f3a:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <SystemClock_Config+0xdc>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000f46:	bf00      	nop
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <SystemClock_Config+0xdc>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f54:	d1f8      	bne.n	8000f48 <SystemClock_Config+0x44>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
 8000f56:	2321      	movs	r3, #33	@ 0x21
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLM = 5;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLN = 110;
 8000f70:	236e      	movs	r3, #110	@ 0x6e
 8000f72:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLP = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_OscInitStruct.PLL.PLLQ = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f80:	2308      	movs	r3, #8
 8000f82:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fa77 	bl	8003484 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x9c>
    {
        Error_Handler();
 8000f9c:	f000 f95e 	bl	800125c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000fa0:	233f      	movs	r3, #63	@ 0x3f
 8000fa2:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fac:	2308      	movs	r3, #8
 8000fae:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fb0:	2340      	movs	r3, #64	@ 0x40
 8000fb2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fb4:	2340      	movs	r3, #64	@ 0x40
 8000fb6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fbc:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000fbe:	2350      	movs	r3, #80	@ 0x50
 8000fc0:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fe36 	bl	8003c38 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xd2>
    {
        Error_Handler();
 8000fd2:	f000 f943 	bl	800125c <Error_Handler>
    }
}
 8000fd6:	bf00      	nop
 8000fd8:	3770      	adds	r7, #112	@ 0x70
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	58024800 	.word	0x58024800

08000fe4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    /* USER CODE END UART4_Init 0 */

    /* USER CODE BEGIN UART4_Init 1 */

    /* USER CODE END UART4_Init 1 */
    huart4.Instance = UART4;
 8000fe8:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <MX_UART4_Init+0x90>)
 8000fea:	4a23      	ldr	r2, [pc, #140]	@ (8001078 <MX_UART4_Init+0x94>)
 8000fec:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 115200;
 8000fee:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <MX_UART4_Init+0x90>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <MX_UART4_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <MX_UART4_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 8001002:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <MX_UART4_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <MX_UART4_Init+0x90>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <MX_UART4_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <MX_UART4_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101a:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <MX_UART4_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
    huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <MX_UART4_Init+0x90>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	@ 0x24
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <MX_UART4_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart4) != HAL_OK)
 800102c:	4811      	ldr	r0, [pc, #68]	@ (8001074 <MX_UART4_Init+0x90>)
 800102e:	f004 ff51 	bl	8005ed4 <HAL_UART_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_UART4_Init+0x58>
    {
        Error_Handler();
 8001038:	f000 f910 	bl	800125c <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800103c:	2100      	movs	r1, #0
 800103e:	480d      	ldr	r0, [pc, #52]	@ (8001074 <MX_UART4_Init+0x90>)
 8001040:	f006 f8eb 	bl	800721a <HAL_UARTEx_SetTxFifoThreshold>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_UART4_Init+0x6a>
    {
        Error_Handler();
 800104a:	f000 f907 	bl	800125c <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104e:	2100      	movs	r1, #0
 8001050:	4808      	ldr	r0, [pc, #32]	@ (8001074 <MX_UART4_Init+0x90>)
 8001052:	f006 f920 	bl	8007296 <HAL_UARTEx_SetRxFifoThreshold>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_UART4_Init+0x7c>
    {
        Error_Handler();
 800105c:	f000 f8fe 	bl	800125c <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	@ (8001074 <MX_UART4_Init+0x90>)
 8001062:	f006 f8a1 	bl	80071a8 <HAL_UARTEx_DisableFifoMode>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_UART4_Init+0x8c>
    {
        Error_Handler();
 800106c:	f000 f8f6 	bl	800125c <Error_Handler>
    }
    /* USER CODE BEGIN UART4_Init 2 */

    /* USER CODE END UART4_Init 2 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	240001e8 	.word	0x240001e8
 8001078:	40004c00 	.word	0x40004c00

0800107c <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    /* USER CODE END UART5_Init 0 */

    /* USER CODE BEGIN UART5_Init 1 */

    /* USER CODE END UART5_Init 1 */
    huart5.Instance = UART5;
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <MX_UART5_Init+0x90>)
 8001082:	4a23      	ldr	r2, [pc, #140]	@ (8001110 <MX_UART5_Init+0x94>)
 8001084:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 115200;
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <MX_UART5_Init+0x90>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <MX_UART5_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <MX_UART5_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 800109a:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <MX_UART5_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <MX_UART5_Init+0x90>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b19      	ldr	r3, [pc, #100]	@ (800110c <MX_UART5_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <MX_UART5_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
    huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b16      	ldr	r3, [pc, #88]	@ (800110c <MX_UART5_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
    huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_UART5_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
    huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <MX_UART5_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart5) != HAL_OK)
 80010c4:	4811      	ldr	r0, [pc, #68]	@ (800110c <MX_UART5_Init+0x90>)
 80010c6:	f004 ff05 	bl	8005ed4 <HAL_UART_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_UART5_Init+0x58>
    {
        Error_Handler();
 80010d0:	f000 f8c4 	bl	800125c <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	480d      	ldr	r0, [pc, #52]	@ (800110c <MX_UART5_Init+0x90>)
 80010d8:	f006 f89f 	bl	800721a <HAL_UARTEx_SetTxFifoThreshold>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_UART5_Init+0x6a>
    {
        Error_Handler();
 80010e2:	f000 f8bb 	bl	800125c <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4808      	ldr	r0, [pc, #32]	@ (800110c <MX_UART5_Init+0x90>)
 80010ea:	f006 f8d4 	bl	8007296 <HAL_UARTEx_SetRxFifoThreshold>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_UART5_Init+0x7c>
    {
        Error_Handler();
 80010f4:	f000 f8b2 	bl	800125c <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <MX_UART5_Init+0x90>)
 80010fa:	f006 f855 	bl	80071a8 <HAL_UARTEx_DisableFifoMode>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_UART5_Init+0x8c>
    {
        Error_Handler();
 8001104:	f000 f8aa 	bl	800125c <Error_Handler>
    }
    /* USER CODE BEGIN UART5_Init 2 */

    /* USER CODE END UART5_Init 2 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2400027c 	.word	0x2400027c
 8001110:	40005000 	.word	0x40005000

08001114 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001130:	4a31      	ldr	r2, [pc, #196]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 8001132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113a:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114e:	4a2a      	ldr	r2, [pc, #168]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001158:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116c:	4a22      	ldr	r2, [pc, #136]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118a:	4a1b      	ldr	r2, [pc, #108]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <MX_GPIO_Init+0xe4>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : PC1 */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011c0:	2302      	movs	r3, #2
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	480a      	ldr	r0, [pc, #40]	@ (80011fc <MX_GPIO_Init+0xe8>)
 80011d4:	f000 fcc4 	bl	8001b60 <HAL_GPIO_Init>

    /*Configure GPIO pins : PD0 PD1 PD3 PD4
                             PD5 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80011d8:	233b      	movs	r3, #59	@ 0x3b
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_GPIO_Init+0xec>)
 80011ec:	f000 fcb8 	bl	8001b60 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020800 	.word	0x58020800
 8001200:	58020c00 	.word	0x58020c00

08001204 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 8001216:	f000 fc2b 	bl	8001a70 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800121a:	2301      	movs	r3, #1
 800121c:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800121e:	2300      	movs	r3, #0
 8001220:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x0;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001226:	231f      	movs	r3, #31
 8001228:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 800122a:	2387      	movs	r3, #135	@ 0x87
 800122c:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800122e:	2300      	movs	r3, #0
 8001230:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001232:	2300      	movs	r3, #0
 8001234:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001236:	2301      	movs	r3, #1
 8001238:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800123a:	2301      	movs	r3, #1
 800123c:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001246:	463b      	mov	r3, r7
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fc49 	bl	8001ae0 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800124e:	2004      	movs	r0, #4
 8001250:	f000 fc26 	bl	8001aa0 <HAL_MPU_Enable>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <Error_Handler+0x8>

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_MspInit+0x30>)
 8001270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001274:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <HAL_MspInit+0x30>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_MspInit+0x30>)
 8001280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	58024400 	.word	0x58024400

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0bc      	sub	sp, #240	@ 0xf0
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	22b8      	movs	r2, #184	@ 0xb8
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f009 fe15 	bl	800aeec <memset>
  if(huart->Instance==UART4)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001444 <HAL_UART_MspInit+0x1a8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d146      	bne.n	800135a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80012cc:	f04f 0202 	mov.w	r2, #2
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 f834 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012ee:	f7ff ffb5 	bl	800125c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012f2:	4b55      	ldr	r3, [pc, #340]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 80012f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f8:	4a53      	ldr	r2, [pc, #332]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 80012fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80012fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001302:	4b51      	ldr	r3, [pc, #324]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 8001304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001316:	4a4c      	ldr	r2, [pc, #304]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001320:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800132e:	2303      	movs	r3, #3
 8001330:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001346:	2308      	movs	r3, #8
 8001348:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001350:	4619      	mov	r1, r3
 8001352:	483e      	ldr	r0, [pc, #248]	@ (800144c <HAL_UART_MspInit+0x1b0>)
 8001354:	f000 fc04 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001358:	e06f      	b.n	800143a <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==UART5)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a3c      	ldr	r2, [pc, #240]	@ (8001450 <HAL_UART_MspInit+0x1b4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d16a      	bne.n	800143a <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001364:	f04f 0202 	mov.w	r2, #2
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	4618      	mov	r0, r3
 800137c:	f002 ffe8 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001386:	f7ff ff69 	bl	800125c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800138a:	4b2f      	ldr	r3, [pc, #188]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 800138c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001390:	4a2d      	ldr	r2, [pc, #180]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 8001392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001396:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800139a:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 800139c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a8:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ae:	4a26      	ldr	r2, [pc, #152]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b8:	4b23      	ldr	r3, [pc, #140]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	4b20      	ldr	r3, [pc, #128]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <HAL_UART_MspInit+0x1ac>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013fe:	2308      	movs	r3, #8
 8001400:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001408:	4619      	mov	r1, r3
 800140a:	4812      	ldr	r0, [pc, #72]	@ (8001454 <HAL_UART_MspInit+0x1b8>)
 800140c:	f000 fba8 	bl	8001b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001410:	2304      	movs	r3, #4
 8001412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001428:	2308      	movs	r3, #8
 800142a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001432:	4619      	mov	r1, r3
 8001434:	4808      	ldr	r0, [pc, #32]	@ (8001458 <HAL_UART_MspInit+0x1bc>)
 8001436:	f000 fb93 	bl	8001b60 <HAL_GPIO_Init>
}
 800143a:	bf00      	nop
 800143c:	37f0      	adds	r7, #240	@ 0xf0
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40004c00 	.word	0x40004c00
 8001448:	58024400 	.word	0x58024400
 800144c:	58020000 	.word	0x58020000
 8001450:	40005000 	.word	0x40005000
 8001454:	58020800 	.word	0x58020800
 8001458:	58020c00 	.word	0x58020c00

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f989 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <OTG_HS_IRQHandler+0x10>)
 80014c2:	f000 fe4e 	bl	8002162 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2400084c 	.word	0x2400084c

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	@ (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f009 fcfc 	bl	800aefc <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	24050000 	.word	0x24050000
 8001530:	00000400 	.word	0x00000400
 8001534:	24000364 	.word	0x24000364
 8001538:	24000e90 	.word	0x24000e90

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001540:	4b3e      	ldr	r3, [pc, #248]	@ (800163c <SystemInit+0x100>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a3d      	ldr	r2, [pc, #244]	@ (800163c <SystemInit+0x100>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001550:	4b3b      	ldr	r3, [pc, #236]	@ (8001640 <SystemInit+0x104>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	2b06      	cmp	r3, #6
 800155a:	d807      	bhi.n	800156c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155c:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <SystemInit+0x104>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 030f 	bic.w	r3, r3, #15
 8001564:	4a36      	ldr	r2, [pc, #216]	@ (8001640 <SystemInit+0x104>)
 8001566:	f043 0307 	orr.w	r3, r3, #7
 800156a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800156c:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <SystemInit+0x108>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a34      	ldr	r2, [pc, #208]	@ (8001644 <SystemInit+0x108>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001578:	4b32      	ldr	r3, [pc, #200]	@ (8001644 <SystemInit+0x108>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800157e:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <SystemInit+0x108>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4930      	ldr	r1, [pc, #192]	@ (8001644 <SystemInit+0x108>)
 8001584:	4b30      	ldr	r3, [pc, #192]	@ (8001648 <SystemInit+0x10c>)
 8001586:	4013      	ands	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158a:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <SystemInit+0x104>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <SystemInit+0x104>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 030f 	bic.w	r3, r3, #15
 800159e:	4a28      	ldr	r2, [pc, #160]	@ (8001640 <SystemInit+0x104>)
 80015a0:	f043 0307 	orr.w	r3, r3, #7
 80015a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015a6:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <SystemInit+0x108>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015ac:	4b25      	ldr	r3, [pc, #148]	@ (8001644 <SystemInit+0x108>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <SystemInit+0x108>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b8:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <SystemInit+0x108>)
 80015ba:	4a24      	ldr	r2, [pc, #144]	@ (800164c <SystemInit+0x110>)
 80015bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <SystemInit+0x108>)
 80015c0:	4a23      	ldr	r2, [pc, #140]	@ (8001650 <SystemInit+0x114>)
 80015c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <SystemInit+0x108>)
 80015c6:	4a23      	ldr	r2, [pc, #140]	@ (8001654 <SystemInit+0x118>)
 80015c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <SystemInit+0x108>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <SystemInit+0x108>)
 80015d2:	4a20      	ldr	r2, [pc, #128]	@ (8001654 <SystemInit+0x118>)
 80015d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <SystemInit+0x108>)
 80015d8:	2200      	movs	r2, #0
 80015da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <SystemInit+0x108>)
 80015de:	4a1d      	ldr	r2, [pc, #116]	@ (8001654 <SystemInit+0x118>)
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <SystemInit+0x108>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e8:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <SystemInit+0x108>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a15      	ldr	r2, [pc, #84]	@ (8001644 <SystemInit+0x108>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <SystemInit+0x108>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <SystemInit+0x108>)
 80015fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d113      	bne.n	8001630 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001608:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <SystemInit+0x108>)
 800160a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800160e:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <SystemInit+0x108>)
 8001610:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001614:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <SystemInit+0x11c>)
 800161a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800161e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <SystemInit+0x108>)
 8001622:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001626:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <SystemInit+0x108>)
 8001628:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800162c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	52002000 	.word	0x52002000
 8001644:	58024400 	.word	0x58024400
 8001648:	eaf6ed7f 	.word	0xeaf6ed7f
 800164c:	02020200 	.word	0x02020200
 8001650:	01ff0000 	.word	0x01ff0000
 8001654:	01010280 	.word	0x01010280
 8001658:	52004000 	.word	0x52004000

0800165c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <ExitRun0Mode+0x2c>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <ExitRun0Mode+0x2c>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800166c:	bf00      	nop
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <ExitRun0Mode+0x2c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f9      	beq.n	800166e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	58024800 	.word	0x58024800

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80016c8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001690:	f7ff ffe4 	bl	800165c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001694:	f7ff ff52 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	@ (80016d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	@ (80016dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016be:	f009 fc23 	bl	800af08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fbb7 	bl	8000e34 <main>
  bx  lr
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80016cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016d0:	240001c4 	.word	0x240001c4
  ldr r2, =_sidata
 80016d4:	0800b9a4 	.word	0x0800b9a4
  ldr r2, =_sbss
 80016d8:	240001c4 	.word	0x240001c4
  ldr r4, =_ebss
 80016dc:	24000e8c 	.word	0x24000e8c

080016e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC3_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ea:	2003      	movs	r0, #3
 80016ec:	f000 f980 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016f0:	f002 fc58 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_Init+0x68>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	4913      	ldr	r1, [pc, #76]	@ (8001750 <HAL_Init+0x6c>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_Init+0x68>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_Init+0x6c>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_Init+0x70>)
 8001726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001728:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <HAL_Init+0x74>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	200f      	movs	r0, #15
 8001730:	f000 f814 	bl	800175c <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e002      	b.n	8001744 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800173e:	f7ff fd93 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	58024400 	.word	0x58024400
 8001750:	0800b928 	.word	0x0800b928
 8001754:	24000060 	.word	0x24000060
 8001758:	2400005c 	.word	0x2400005c

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001764:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_InitTick+0x60>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e021      	b.n	80017b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <HAL_InitTick+0x64>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <HAL_InitTick+0x60>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f965 	bl	8001a56 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f92f 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	@ (80017c4 <HAL_InitTick+0x68>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	24000068 	.word	0x24000068
 80017c0:	2400005c 	.word	0x2400005c
 80017c4:	24000064 	.word	0x24000064

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	24000068 	.word	0x24000068
 80017ec:	24000368 	.word	0x24000368

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	24000368 	.word	0x24000368

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000068 	.word	0x24000068

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	4313      	orrs	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	05fa0000 	.word	0x05fa0000

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	@ (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff40 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff33 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa4 	bl	80019ac <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a74:	f3bf 8f5f 	dmb	sy
}
 8001a78:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <HAL_MPU_Disable+0x28>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	4a06      	ldr	r2, [pc, #24]	@ (8001a98 <HAL_MPU_Disable+0x28>)
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a84:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_MPU_Disable+0x2c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	605a      	str	r2, [r3, #4]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00
 8001a9c:	e000ed90 	.word	0xe000ed90

08001aa0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad8 <HAL_MPU_Enable+0x38>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_MPU_Enable+0x3c>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <HAL_MPU_Enable+0x3c>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001abc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001abe:	f3bf 8f4f 	dsb	sy
}
 8001ac2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ac4:	f3bf 8f6f 	isb	sy
}
 8001ac8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed90 	.word	0xe000ed90
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	785a      	ldrb	r2, [r3, #1]
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_MPU_ConfigRegion+0x7c>)
 8001aee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_MPU_ConfigRegion+0x7c>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4a19      	ldr	r2, [pc, #100]	@ (8001b5c <HAL_MPU_ConfigRegion+0x7c>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001afc:	4a17      	ldr	r2, [pc, #92]	@ (8001b5c <HAL_MPU_ConfigRegion+0x7c>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7b1b      	ldrb	r3, [r3, #12]
 8001b08:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7adb      	ldrb	r3, [r3, #11]
 8001b0e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7a9b      	ldrb	r3, [r3, #10]
 8001b16:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7b5b      	ldrb	r3, [r3, #13]
 8001b1e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7b9b      	ldrb	r3, [r3, #14]
 8001b26:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7bdb      	ldrb	r3, [r3, #15]
 8001b2e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7a5b      	ldrb	r3, [r3, #9]
 8001b36:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7a1b      	ldrb	r3, [r3, #8]
 8001b3e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b40:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b48:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b4a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b4c:	6113      	str	r3, [r2, #16]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed90 	.word	0xe000ed90

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b6e:	4b86      	ldr	r3, [pc, #536]	@ (8001d88 <HAL_GPIO_Init+0x228>)
 8001b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b72:	e18c      	b.n	8001e8e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 817e 	beq.w	8001e88 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d005      	beq.n	8001ba4 <HAL_GPIO_Init+0x44>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d130      	bne.n	8001c06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bda:	2201      	movs	r2, #1
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 0201 	and.w	r2, r3, #1
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d017      	beq.n	8001c42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d123      	bne.n	8001c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	69b9      	ldr	r1, [r7, #24]
 8001c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0203 	and.w	r2, r3, #3
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80d8 	beq.w	8001e88 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <HAL_GPIO_Init+0x22c>)
 8001cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cde:	4a2b      	ldr	r2, [pc, #172]	@ (8001d8c <HAL_GPIO_Init+0x22c>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ce8:	4b28      	ldr	r3, [pc, #160]	@ (8001d8c <HAL_GPIO_Init+0x22c>)
 8001cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf6:	4a26      	ldr	r2, [pc, #152]	@ (8001d90 <HAL_GPIO_Init+0x230>)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d94 <HAL_GPIO_Init+0x234>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d04a      	beq.n	8001db8 <HAL_GPIO_Init+0x258>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1c      	ldr	r2, [pc, #112]	@ (8001d98 <HAL_GPIO_Init+0x238>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d02b      	beq.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <HAL_GPIO_Init+0x23c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d025      	beq.n	8001d7e <HAL_GPIO_Init+0x21e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1a      	ldr	r2, [pc, #104]	@ (8001da0 <HAL_GPIO_Init+0x240>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01f      	beq.n	8001d7a <HAL_GPIO_Init+0x21a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_GPIO_Init+0x244>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d019      	beq.n	8001d76 <HAL_GPIO_Init+0x216>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a18      	ldr	r2, [pc, #96]	@ (8001da8 <HAL_GPIO_Init+0x248>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x212>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a17      	ldr	r2, [pc, #92]	@ (8001dac <HAL_GPIO_Init+0x24c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x20e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a16      	ldr	r2, [pc, #88]	@ (8001db0 <HAL_GPIO_Init+0x250>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x20a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a15      	ldr	r2, [pc, #84]	@ (8001db4 <HAL_GPIO_Init+0x254>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x206>
 8001d62:	2309      	movs	r3, #9
 8001d64:	e029      	b.n	8001dba <HAL_GPIO_Init+0x25a>
 8001d66:	230a      	movs	r3, #10
 8001d68:	e027      	b.n	8001dba <HAL_GPIO_Init+0x25a>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e025      	b.n	8001dba <HAL_GPIO_Init+0x25a>
 8001d6e:	2306      	movs	r3, #6
 8001d70:	e023      	b.n	8001dba <HAL_GPIO_Init+0x25a>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e021      	b.n	8001dba <HAL_GPIO_Init+0x25a>
 8001d76:	2304      	movs	r3, #4
 8001d78:	e01f      	b.n	8001dba <HAL_GPIO_Init+0x25a>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e01d      	b.n	8001dba <HAL_GPIO_Init+0x25a>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e01b      	b.n	8001dba <HAL_GPIO_Init+0x25a>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e019      	b.n	8001dba <HAL_GPIO_Init+0x25a>
 8001d86:	bf00      	nop
 8001d88:	58000080 	.word	0x58000080
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	58000400 	.word	0x58000400
 8001d94:	58020000 	.word	0x58020000
 8001d98:	58020400 	.word	0x58020400
 8001d9c:	58020800 	.word	0x58020800
 8001da0:	58020c00 	.word	0x58020c00
 8001da4:	58021000 	.word	0x58021000
 8001da8:	58021400 	.word	0x58021400
 8001dac:	58021800 	.word	0x58021800
 8001db0:	58021c00 	.word	0x58021c00
 8001db4:	58022400 	.word	0x58022400
 8001db8:	2300      	movs	r3, #0
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	f002 0203 	and.w	r2, r2, #3
 8001dc0:	0092      	lsls	r2, r2, #2
 8001dc2:	4093      	lsls	r3, r2
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dca:	4938      	ldr	r1, [pc, #224]	@ (8001eac <HAL_GPIO_Init+0x34c>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f47f ae6b 	bne.w	8001b74 <HAL_GPIO_Init+0x14>
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	3724      	adds	r7, #36	@ 0x24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	58000400 	.word	0x58000400

08001eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	887b      	ldrh	r3, [r7, #2]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	e001      	b.n	8001ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0fe      	b.n	80020f0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f008 fc4c 	bl	800a7a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f005 fb6e 	bl	80075fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7c1a      	ldrb	r2, [r3, #16]
 8001f26:	f88d 2000 	strb.w	r2, [sp]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f2e:	f005 fa3f 	bl	80073b0 <USB_CoreInit>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0d5      	b.n	80020f0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f005 fb66 	bl	800761c <USB_SetCurrentMode>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0c6      	b.n	80020f0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e04a      	b.n	8001ffe <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3315      	adds	r3, #21
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3314      	adds	r3, #20
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	b298      	uxth	r0, r3
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	332e      	adds	r3, #46	@ 0x2e
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3318      	adds	r3, #24
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	331c      	adds	r3, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	3320      	adds	r3, #32
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3324      	adds	r3, #36	@ 0x24
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	791b      	ldrb	r3, [r3, #4]
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	429a      	cmp	r2, r3
 8002006:	d3af      	bcc.n	8001f68 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e044      	b.n	8002098 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	3301      	adds	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	791b      	ldrb	r3, [r3, #4]
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3b5      	bcc.n	800200e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7c1a      	ldrb	r2, [r3, #16]
 80020aa:	f88d 2000 	strb.w	r2, [sp]
 80020ae:	3304      	adds	r3, #4
 80020b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b2:	f005 faff 	bl	80076b4 <USB_DevInit>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e013      	b.n	80020f0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7b1b      	ldrb	r3, [r3, #12]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f001 f956 	bl	8003390 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f006 fb42 	bl	8008772 <USB_DevDisconnect>

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_PCD_Start+0x1c>
 8002110:	2302      	movs	r3, #2
 8002112:	e022      	b.n	800215a <HAL_PCD_Start+0x62>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d009      	beq.n	800213c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002134:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f005 fa49 	bl	80075d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f006 faf0 	bl	8008730 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002162:	b590      	push	{r4, r7, lr}
 8002164:	b08d      	sub	sp, #52	@ 0x34
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f006 fbae 	bl	80088da <USB_GetMode>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 84b9 	bne.w	8002af8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f006 fb12 	bl	80087b4 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 84af 	beq.w	8002af6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f006 faff 	bl	80087b4 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d107      	bne.n	80021d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f002 0202 	and.w	r2, r2, #2
 80021ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f006 faed 	bl	80087b4 <USB_ReadInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d161      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0210 	bic.w	r2, r2, #16
 80021f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f003 020f 	and.w	r2, r3, #15
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	0c5b      	lsrs	r3, r3, #17
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	2b02      	cmp	r3, #2
 800221e:	d124      	bne.n	800226a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d035      	beq.n	8002298 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6a38      	ldr	r0, [r7, #32]
 8002240:	f006 f924 	bl	800848c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002250:	441a      	add	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002262:	441a      	add	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	615a      	str	r2, [r3, #20]
 8002268:	e016      	b.n	8002298 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	0c5b      	lsrs	r3, r3, #17
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	2b06      	cmp	r3, #6
 8002274:	d110      	bne.n	8002298 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800227c:	2208      	movs	r2, #8
 800227e:	4619      	mov	r1, r3
 8002280:	6a38      	ldr	r0, [r7, #32]
 8002282:	f006 f903 	bl	800848c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002292:	441a      	add	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0210 	orr.w	r2, r2, #16
 80022a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f006 fa81 	bl	80087b4 <USB_ReadInterrupts>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80022bc:	f040 80a7 	bne.w	800240e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f006 fa86 	bl	80087da <USB_ReadDevAllOutEpInterrupt>
 80022ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80022d0:	e099      	b.n	8002406 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 808e 	beq.w	80023fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f006 faaa 	bl	8008842 <USB_ReadDevOutEPInterrupt>
 80022ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002306:	461a      	mov	r2, r3
 8002308:	2301      	movs	r3, #1
 800230a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800230c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 feb8 	bl	8003084 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00c      	beq.n	8002338 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800232a:	461a      	mov	r2, r3
 800232c:	2308      	movs	r3, #8
 800232e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002330:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 ff8e 	bl	8003254 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234e:	461a      	mov	r2, r3
 8002350:	2310      	movs	r3, #16
 8002352:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d030      	beq.n	80023c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002366:	2b80      	cmp	r3, #128	@ 0x80
 8002368:	d109      	bne.n	800237e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002378:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800237c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800237e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	3304      	adds	r3, #4
 8002392:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	78db      	ldrb	r3, [r3, #3]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d108      	bne.n	80023ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2200      	movs	r2, #0
 80023a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f008 fb7d 	bl	800aaa8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ba:	461a      	mov	r2, r3
 80023bc:	2302      	movs	r3, #2
 80023be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d6:	461a      	mov	r2, r3
 80023d8:	2320      	movs	r3, #32
 80023da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f2:	461a      	mov	r2, r3
 80023f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	3301      	adds	r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	f47f af62 	bne.w	80022d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f006 f9ce 	bl	80087b4 <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800241e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002422:	f040 80db 	bne.w	80025dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f006 f9ef 	bl	800880e <USB_ReadDevAllInEpInterrupt>
 8002430:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002436:	e0cd      	b.n	80025d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80c2 	beq.w	80025c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f006 fa15 	bl	800887e <USB_ReadDevInEPInterrupt>
 8002454:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d057      	beq.n	8002510 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	2201      	movs	r2, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43db      	mvns	r3, r3
 800247a:	69f9      	ldr	r1, [r7, #28]
 800247c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002480:	4013      	ands	r3, r2
 8002482:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002490:	461a      	mov	r2, r3
 8002492:	2301      	movs	r3, #1
 8002494:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	799b      	ldrb	r3, [r3, #6]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d132      	bne.n	8002504 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3320      	adds	r3, #32
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4403      	add	r3, r0
 80024be:	331c      	adds	r3, #28
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4419      	add	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4403      	add	r3, r0
 80024d2:	3320      	adds	r3, #32
 80024d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d113      	bne.n	8002504 <HAL_PCD_IRQHandler+0x3a2>
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3324      	adds	r3, #36	@ 0x24
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024fc:	461a      	mov	r2, r3
 80024fe:	2101      	movs	r1, #1
 8002500:	f006 fa1e 	bl	8008940 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f008 fa47 	bl	800a99e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002526:	461a      	mov	r2, r3
 8002528:	2308      	movs	r3, #8
 800252a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002542:	461a      	mov	r2, r3
 8002544:	2310      	movs	r3, #16
 8002546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800255e:	461a      	mov	r2, r3
 8002560:	2340      	movs	r3, #64	@ 0x40
 8002562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d023      	beq.n	80025b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800256e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002570:	6a38      	ldr	r0, [r7, #32]
 8002572:	f005 f9fd 	bl	8007970 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	3310      	adds	r3, #16
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	3304      	adds	r3, #4
 8002588:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	78db      	ldrb	r3, [r3, #3]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d108      	bne.n	80025a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2200      	movs	r2, #0
 8002596:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4619      	mov	r1, r3
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f008 fa94 	bl	800aacc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025b0:	461a      	mov	r2, r3
 80025b2:	2302      	movs	r3, #2
 80025b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fcd2 	bl	8002f6c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	3301      	adds	r3, #1
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f47f af2e 	bne.w	8002438 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f006 f8e7 	bl	80087b4 <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025f0:	d122      	bne.n	8002638 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800260c:	2b01      	cmp	r3, #1
 800260e:	d108      	bne.n	8002622 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002618:	2100      	movs	r1, #0
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fedc 	bl	80033d8 <HAL_PCDEx_LPM_Callback>
 8002620:	e002      	b.n	8002628 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f008 fa32 	bl	800aa8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f006 f8b9 	bl	80087b4 <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800264c:	d112      	bne.n	8002674 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f008 f9ee 	bl	800aa40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002672:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f006 f89b 	bl	80087b4 <USB_ReadInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002688:	d121      	bne.n	80026ce <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002698:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	f003 020f 	and.w	r2, r3, #15
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026be:	2101      	movs	r1, #1
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fe89 	bl	80033d8 <HAL_PCDEx_LPM_Callback>
 80026c6:	e002      	b.n	80026ce <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f008 f9b9 	bl	800aa40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f006 f86e 	bl	80087b4 <USB_ReadInterrupts>
 80026d8:	4603      	mov	r3, r0
 80026da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e2:	f040 80b7 	bne.w	8002854 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2110      	movs	r1, #16
 8002700:	4618      	mov	r0, r3
 8002702:	f005 f935 	bl	8007970 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002706:	2300      	movs	r3, #0
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800270a:	e046      	b.n	800279a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002718:	461a      	mov	r2, r3
 800271a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800271e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002730:	0151      	lsls	r1, r2, #5
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	440a      	add	r2, r1
 8002736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800273a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800273e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800274c:	461a      	mov	r2, r3
 800274e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002752:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002764:	0151      	lsls	r1, r2, #5
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	440a      	add	r2, r1
 800276a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800276e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002772:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002784:	0151      	lsls	r1, r2, #5
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	440a      	add	r2, r1
 800278a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800278e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002792:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002796:	3301      	adds	r3, #1
 8002798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	791b      	ldrb	r3, [r3, #4]
 800279e:	461a      	mov	r2, r3
 80027a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d3b2      	bcc.n	800270c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027b4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80027b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7bdb      	ldrb	r3, [r3, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027d2:	f043 030b 	orr.w	r3, r3, #11
 80027d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027e8:	f043 030b 	orr.w	r3, r3, #11
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ee:	e015      	b.n	800281c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027fe:	4619      	mov	r1, r3
 8002800:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002804:	4313      	orrs	r3, r2
 8002806:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002816:	f043 030b 	orr.w	r3, r3, #11
 800281a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800282a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800282e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800283e:	461a      	mov	r2, r3
 8002840:	f006 f87e 	bl	8008940 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f005 ffab 	bl	80087b4 <USB_ReadInterrupts>
 800285e:	4603      	mov	r3, r0
 8002860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002868:	d123      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f006 f842 	bl	80088f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f005 f8f2 	bl	8007a62 <USB_GetDevSpeed>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681c      	ldr	r4, [r3, #0]
 800288a:	f001 fd05 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 800288e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002894:	461a      	mov	r2, r3
 8002896:	4620      	mov	r0, r4
 8002898:	f004 fdfc 	bl	8007494 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f008 f8a6 	bl	800a9ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80028b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f005 ff7c 	bl	80087b4 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d10a      	bne.n	80028dc <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f008 f883 	bl	800a9d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f002 0208 	and.w	r2, r2, #8
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f005 ff67 	bl	80087b4 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ec:	2b80      	cmp	r3, #128	@ 0x80
 80028ee:	d123      	bne.n	8002938 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028fc:	2301      	movs	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002900:	e014      	b.n	800292c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4619      	mov	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 faf2 	bl	8002f0a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	3301      	adds	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	791b      	ldrb	r3, [r3, #4]
 8002930:	461a      	mov	r2, r3
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	4293      	cmp	r3, r2
 8002936:	d3e4      	bcc.n	8002902 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f005 ff39 	bl	80087b4 <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002948:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800294c:	d13c      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800294e:	2301      	movs	r3, #1
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
 8002952:	e02b      	b.n	80029ac <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3318      	adds	r3, #24
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d115      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800297a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	da12      	bge.n	80029a6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3317      	adds	r3, #23
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fab2 	bl	8002f0a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	3301      	adds	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	791b      	ldrb	r3, [r3, #4]
 80029b0:	461a      	mov	r2, r3
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d3cd      	bcc.n	8002954 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80029c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f005 fef1 	bl	80087b4 <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029dc:	d156      	bne.n	8002a8c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029de:	2301      	movs	r3, #1
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e2:	e045      	b.n	8002a70 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d12e      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da2b      	bge.n	8002a6a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	0c1a      	lsrs	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a1c:	4053      	eors	r3, r2
 8002a1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d121      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a66:	6053      	str	r3, [r2, #4]
            break;
 8002a68:	e008      	b.n	8002a7c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	791b      	ldrb	r3, [r3, #4]
 8002a74:	461a      	mov	r2, r3
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d3b3      	bcc.n	80029e4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f005 fe8f 	bl	80087b4 <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f008 f824 	bl	800aaf0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f005 fe79 	bl	80087b4 <USB_ReadInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d115      	bne.n	8002af8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f008 f814 	bl	800ab0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	e000      	b.n	8002af8 <HAL_PCD_IRQHandler+0x996>
      return;
 8002af6:	bf00      	nop
    }
  }
}
 8002af8:	3734      	adds	r7, #52	@ 0x34
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}

08002afe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_PCD_SetAddress+0x1a>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e012      	b.n	8002b3e <HAL_PCD_SetAddress+0x40>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f005 fdd8 	bl	80086e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	4608      	mov	r0, r1
 8002b50:	4611      	mov	r1, r2
 8002b52:	461a      	mov	r2, r3
 8002b54:	4603      	mov	r3, r0
 8002b56:	70fb      	strb	r3, [r7, #3]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	803b      	strh	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	da0f      	bge.n	8002b8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	f003 020f 	and.w	r2, r3, #15
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	3310      	adds	r3, #16
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	3304      	adds	r3, #4
 8002b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	705a      	strb	r2, [r3, #1]
 8002b8a:	e00f      	b.n	8002bac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002bb8:	883b      	ldrh	r3, [r7, #0]
 8002bba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	78ba      	ldrb	r2, [r7, #2]
 8002bc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	785b      	ldrb	r3, [r3, #1]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bda:	78bb      	ldrb	r3, [r7, #2]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d102      	bne.n	8002be6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_PCD_EP_Open+0xae>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e00e      	b.n	8002c12 <HAL_PCD_EP_Open+0xcc>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 ff52 	bl	8007aac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002c10:	7afb      	ldrb	r3, [r7, #11]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	da0f      	bge.n	8002c4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	f003 020f 	and.w	r2, r3, #15
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	3304      	adds	r3, #4
 8002c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	705a      	strb	r2, [r3, #1]
 8002c4c:	e00f      	b.n	8002c6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 020f 	and.w	r2, r3, #15
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	3304      	adds	r3, #4
 8002c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_PCD_EP_Close+0x6e>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e00e      	b.n	8002ca6 <HAL_PCD_EP_Close+0x8c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68f9      	ldr	r1, [r7, #12]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 ff90 	bl	8007bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cbe:	7afb      	ldrb	r3, [r7, #11]
 8002cc0:	f003 020f 	and.w	r2, r3, #15
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf0:	7afb      	ldrb	r3, [r7, #11]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	799b      	ldrb	r3, [r3, #6]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d102      	bne.n	8002d0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	799b      	ldrb	r3, [r3, #6]
 8002d12:	461a      	mov	r2, r3
 8002d14:	6979      	ldr	r1, [r7, #20]
 8002d16:	f005 f82d 	bl	8007d74 <USB_EPStartXfer>

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	460b      	mov	r3, r1
 8002d32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3310      	adds	r3, #16
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2201      	movs	r2, #1
 8002d62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d64:	7afb      	ldrb	r3, [r7, #11]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	799b      	ldrb	r3, [r3, #6]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d102      	bne.n	8002d7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	799b      	ldrb	r3, [r3, #6]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6979      	ldr	r1, [r7, #20]
 8002d8a:	f004 fff3 	bl	8007d74 <USB_EPStartXfer>

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	7912      	ldrb	r2, [r2, #4]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e04f      	b.n	8002e56 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002db6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	da0f      	bge.n	8002dde <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 020f 	and.w	r2, r3, #15
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	3310      	adds	r3, #16
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	705a      	strb	r2, [r3, #1]
 8002ddc:	e00d      	b.n	8002dfa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4413      	add	r3, r2
 8002df0:	3304      	adds	r3, #4
 8002df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_PCD_EP_SetStall+0x82>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e01d      	b.n	8002e56 <HAL_PCD_EP_SetStall+0xbe>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68f9      	ldr	r1, [r7, #12]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f005 fb87 	bl	800853c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7999      	ldrb	r1, [r3, #6]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e46:	461a      	mov	r2, r3
 8002e48:	f005 fd7a 	bl	8008940 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	7912      	ldrb	r2, [r2, #4]
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e042      	b.n	8002f02 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da0f      	bge.n	8002ea4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	3310      	adds	r3, #16
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	705a      	strb	r2, [r3, #1]
 8002ea2:	e00f      	b.n	8002ec4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	f003 020f 	and.w	r2, r3, #15
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	3304      	adds	r3, #4
 8002ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_PCD_EP_ClrStall+0x86>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e00e      	b.n	8002f02 <HAL_PCD_EP_ClrStall+0xa4>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f005 fb90 	bl	8008618 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da0c      	bge.n	8002f38 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 020f 	and.w	r2, r3, #15
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	3310      	adds	r3, #16
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	3304      	adds	r3, #4
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	e00c      	b.n	8002f52 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3304      	adds	r3, #4
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f005 f9af 	bl	80082bc <USB_EPStopXfer>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f62:	7afb      	ldrb	r3, [r7, #11]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	3310      	adds	r3, #16
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d901      	bls.n	8002fa4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e06b      	b.n	800307c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d902      	bls.n	8002fc0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	3303      	adds	r3, #3
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fc8:	e02a      	b.n	8003020 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d902      	bls.n	8002fe6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3303      	adds	r3, #3
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	68d9      	ldr	r1, [r3, #12]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	4603      	mov	r3, r0
 8003002:	6978      	ldr	r0, [r7, #20]
 8003004:	f005 fa04 	bl	8008410 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	441a      	add	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	441a      	add	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	429a      	cmp	r2, r3
 8003034:	d809      	bhi.n	800304a <PCD_WriteEmptyTxFifo+0xde>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800303e:	429a      	cmp	r2, r3
 8003040:	d203      	bcs.n	800304a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1bf      	bne.n	8002fca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	429a      	cmp	r2, r3
 8003054:	d811      	bhi.n	800307a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	2201      	movs	r2, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800306a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	43db      	mvns	r3, r3
 8003070:	6939      	ldr	r1, [r7, #16]
 8003072:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003076:	4013      	ands	r3, r2
 8003078:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	333c      	adds	r3, #60	@ 0x3c
 800309c:	3304      	adds	r3, #4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	799b      	ldrb	r3, [r3, #6]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d17b      	bne.n	80031b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d015      	beq.n	80030f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	4a61      	ldr	r2, [pc, #388]	@ (800324c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	f240 80b9 	bls.w	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80b3 	beq.w	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e6:	461a      	mov	r2, r3
 80030e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ec:	6093      	str	r3, [r2, #8]
 80030ee:	e0a7      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003106:	461a      	mov	r2, r3
 8003108:	2320      	movs	r3, #32
 800310a:	6093      	str	r3, [r2, #8]
 800310c:	e098      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 8093 	bne.w	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	4a4b      	ldr	r2, [pc, #300]	@ (800324c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d90f      	bls.n	8003142 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003138:	461a      	mov	r2, r3
 800313a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800313e:	6093      	str	r3, [r2, #8]
 8003140:	e07e      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a1a      	ldr	r2, [r3, #32]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	0159      	lsls	r1, r3, #5
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	440b      	add	r3, r1
 8003164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d114      	bne.n	80031a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800318c:	461a      	mov	r2, r3
 800318e:	2101      	movs	r1, #1
 8003190:	f005 fbd6 	bl	8008940 <USB_EP0_OutStart>
 8003194:	e006      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f007 fbdc 	bl	800a968 <HAL_PCD_DataOutStageCallback>
 80031b0:	e046      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	4a26      	ldr	r2, [pc, #152]	@ (8003250 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d124      	bne.n	8003204 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d0:	461a      	mov	r2, r3
 80031d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031d6:	6093      	str	r3, [r2, #8]
 80031d8:	e032      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f0:	461a      	mov	r2, r3
 80031f2:	2320      	movs	r3, #32
 80031f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f007 fbb3 	bl	800a968 <HAL_PCD_DataOutStageCallback>
 8003202:	e01d      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d114      	bne.n	8003234 <PCD_EP_OutXfrComplete_int+0x1b0>
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d108      	bne.n	8003234 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800322c:	461a      	mov	r2, r3
 800322e:	2100      	movs	r1, #0
 8003230:	f005 fb86 	bl	8008940 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f007 fb94 	bl	800a968 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	4f54300a 	.word	0x4f54300a
 8003250:	4f54310a 	.word	0x4f54310a

08003254 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	333c      	adds	r3, #60	@ 0x3c
 800326c:	3304      	adds	r3, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a15      	ldr	r2, [pc, #84]	@ (80032dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d90e      	bls.n	80032a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a0:	461a      	mov	r2, r3
 80032a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f007 fb4b 	bl	800a944 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <PCD_EP_OutSetupPacket_int+0x88>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d90c      	bls.n	80032d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	799b      	ldrb	r3, [r3, #6]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032c8:	461a      	mov	r2, r3
 80032ca:	2101      	movs	r1, #1
 80032cc:	f005 fb38 	bl	8008940 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	4f54300a 	.word	0x4f54300a

080032e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
 80032ec:	4613      	mov	r3, r2
 80032ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032fe:	883b      	ldrh	r3, [r7, #0]
 8003300:	0419      	lsls	r1, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	430a      	orrs	r2, r1
 800330a:	629a      	str	r2, [r3, #40]	@ 0x28
 800330c:	e028      	b.n	8003360 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e00d      	b.n	800333e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3340      	adds	r3, #64	@ 0x40
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	3301      	adds	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	3b01      	subs	r3, #1
 8003344:	429a      	cmp	r2, r3
 8003346:	d3ec      	bcc.n	8003322 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003348:	883b      	ldrh	r3, [r7, #0]
 800334a:	0418      	lsls	r0, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	3b01      	subs	r3, #1
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	4302      	orrs	r2, r0
 8003358:	3340      	adds	r3, #64	@ 0x40
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033be:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	10000003 	.word	0x10000003

080033d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d00a      	beq.n	800341a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003404:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e01f      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e01d      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800341a:	4b11      	ldr	r3, [pc, #68]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	490f      	ldr	r1, [pc, #60]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4313      	orrs	r3, r2
 8003428:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800342a:	f7fe f9e1 	bl	80017f0 <HAL_GetTick>
 800342e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003430:	e009      	b.n	8003446 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003432:	f7fe f9dd 	bl	80017f0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003440:	d901      	bls.n	8003446 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800344e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003452:	d1ee      	bne.n	8003432 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	58024800 	.word	0x58024800

08003464 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003472:	60d3      	str	r3, [r2, #12]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	58024800 	.word	0x58024800

08003484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08c      	sub	sp, #48	@ 0x30
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e3c8      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8087 	beq.w	80035b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034a4:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034ae:	4b86      	ldr	r3, [pc, #536]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80034b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d007      	beq.n	80034ca <HAL_RCC_OscConfig+0x46>
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	2b18      	cmp	r3, #24
 80034be:	d110      	bne.n	80034e2 <HAL_RCC_OscConfig+0x5e>
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d10b      	bne.n	80034e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ca:	4b7f      	ldr	r3, [pc, #508]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d06c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x12c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d168      	bne.n	80035b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e3a2      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x76>
 80034ec:	4b76      	ldr	r3, [pc, #472]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a75      	ldr	r2, [pc, #468]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	e02e      	b.n	8003558 <HAL_RCC_OscConfig+0xd4>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x98>
 8003502:	4b71      	ldr	r3, [pc, #452]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a70      	ldr	r2, [pc, #448]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b6e      	ldr	r3, [pc, #440]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6d      	ldr	r2, [pc, #436]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003514:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e01d      	b.n	8003558 <HAL_RCC_OscConfig+0xd4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0xbc>
 8003526:	4b68      	ldr	r3, [pc, #416]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a67      	ldr	r2, [pc, #412]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 800352c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b65      	ldr	r3, [pc, #404]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a64      	ldr	r2, [pc, #400]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0xd4>
 8003540:	4b61      	ldr	r3, [pc, #388]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a60      	ldr	r2, [pc, #384]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b5e      	ldr	r3, [pc, #376]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a5d      	ldr	r2, [pc, #372]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe f946 	bl	80017f0 <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003568:	f7fe f942 	bl	80017f0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	@ 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e356      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800357a:	4b53      	ldr	r3, [pc, #332]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0xe4>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe f932 	bl	80017f0 <HAL_GetTick>
 800358c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003590:	f7fe f92e 	bl	80017f0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	@ 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e342      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035a2:	4b49      	ldr	r3, [pc, #292]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x10c>
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 808c 	beq.w	80036d8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c0:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035ca:	4b3f      	ldr	r3, [pc, #252]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_RCC_OscConfig+0x162>
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	2b18      	cmp	r3, #24
 80035da:	d137      	bne.n	800364c <HAL_RCC_OscConfig+0x1c8>
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d132      	bne.n	800364c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e6:	4b38      	ldr	r3, [pc, #224]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_RCC_OscConfig+0x17a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e314      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035fe:	4b32      	ldr	r3, [pc, #200]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0219 	bic.w	r2, r3, #25
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	492f      	ldr	r1, [pc, #188]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe f8ee 	bl	80017f0 <HAL_GetTick>
 8003614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003618:	f7fe f8ea 	bl	80017f0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e2fe      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800362a:	4b27      	ldr	r3, [pc, #156]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b24      	ldr	r3, [pc, #144]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	061b      	lsls	r3, r3, #24
 8003644:	4920      	ldr	r1, [pc, #128]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364a:	e045      	b.n	80036d8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d026      	beq.n	80036a2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003654:	4b1c      	ldr	r3, [pc, #112]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 0219 	bic.w	r2, r3, #25
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4919      	ldr	r1, [pc, #100]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fe f8c3 	bl	80017f0 <HAL_GetTick>
 800366a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366e:	f7fe f8bf 	bl	80017f0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e2d3      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003680:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b0e      	ldr	r3, [pc, #56]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	490b      	ldr	r1, [pc, #44]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
 80036a0:	e01a      	b.n	80036d8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a08      	ldr	r2, [pc, #32]	@ (80036c8 <HAL_RCC_OscConfig+0x244>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fe f89f 	bl	80017f0 <HAL_GetTick>
 80036b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fe f89b 	bl	80017f0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d903      	bls.n	80036cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e2af      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
 80036c8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036cc:	4b96      	ldr	r3, [pc, #600]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ee      	bne.n	80036b6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d06a      	beq.n	80037ba <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e4:	4b90      	ldr	r3, [pc, #576]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036ec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ee:	4b8e      	ldr	r3, [pc, #568]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d007      	beq.n	800370a <HAL_RCC_OscConfig+0x286>
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b18      	cmp	r3, #24
 80036fe:	d11b      	bne.n	8003738 <HAL_RCC_OscConfig+0x2b4>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d116      	bne.n	8003738 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800370a:	4b87      	ldr	r3, [pc, #540]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x29e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b80      	cmp	r3, #128	@ 0x80
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e282      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003722:	4b81      	ldr	r3, [pc, #516]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	497d      	ldr	r1, [pc, #500]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003736:	e040      	b.n	80037ba <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d023      	beq.n	8003788 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003740:	4b79      	ldr	r3, [pc, #484]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a78      	ldr	r2, [pc, #480]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800374a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fe f850 	bl	80017f0 <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003754:	f7fe f84c 	bl	80017f0 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e260      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003766:	4b70      	ldr	r3, [pc, #448]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003772:	4b6d      	ldr	r3, [pc, #436]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	061b      	lsls	r3, r3, #24
 8003780:	4969      	ldr	r1, [pc, #420]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	60cb      	str	r3, [r1, #12]
 8003786:	e018      	b.n	80037ba <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003788:	4b67      	ldr	r3, [pc, #412]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a66      	ldr	r2, [pc, #408]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800378e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe f82c 	bl	80017f0 <HAL_GetTick>
 8003798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800379c:	f7fe f828 	bl	80017f0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e23c      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d036      	beq.n	8003834 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d019      	beq.n	8003802 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ce:	4b56      	ldr	r3, [pc, #344]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80037d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d2:	4a55      	ldr	r2, [pc, #340]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037da:	f7fe f809 	bl	80017f0 <HAL_GetTick>
 80037de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e2:	f7fe f805 	bl	80017f0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e219      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80037f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x35e>
 8003800:	e018      	b.n	8003834 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003802:	4b49      	ldr	r3, [pc, #292]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003806:	4a48      	ldr	r2, [pc, #288]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fd ffef 	bl	80017f0 <HAL_GetTick>
 8003812:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003816:	f7fd ffeb 	bl	80017f0 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1ff      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003828:	4b3f      	ldr	r3, [pc, #252]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800382a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d036      	beq.n	80038ae <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d019      	beq.n	800387c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003848:	4b37      	ldr	r3, [pc, #220]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a36      	ldr	r2, [pc, #216]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800384e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003852:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003854:	f7fd ffcc 	bl	80017f0 <HAL_GetTick>
 8003858:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800385c:	f7fd ffc8 	bl	80017f0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1dc      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800386e:	4b2e      	ldr	r3, [pc, #184]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x3d8>
 800387a:	e018      	b.n	80038ae <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800387c:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a29      	ldr	r2, [pc, #164]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003882:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003886:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003888:	f7fd ffb2 	bl	80017f0 <HAL_GetTick>
 800388c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003890:	f7fd ffae 	bl	80017f0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1c2      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038a2:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8086 	beq.w	80039c8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038bc:	4b1b      	ldr	r3, [pc, #108]	@ (800392c <HAL_RCC_OscConfig+0x4a8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	@ (800392c <HAL_RCC_OscConfig+0x4a8>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038c8:	f7fd ff92 	bl	80017f0 <HAL_GetTick>
 80038cc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d0:	f7fd ff8e 	bl	80017f0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	@ 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1a2      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e2:	4b12      	ldr	r3, [pc, #72]	@ (800392c <HAL_RCC_OscConfig+0x4a8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d106      	bne.n	8003904 <HAL_RCC_OscConfig+0x480>
 80038f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	@ 0x70
 8003902:	e032      	b.n	800396a <HAL_RCC_OscConfig+0x4e6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d111      	bne.n	8003930 <HAL_RCC_OscConfig+0x4ac>
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003910:	4a05      	ldr	r2, [pc, #20]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	6713      	str	r3, [r2, #112]	@ 0x70
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391c:	4a02      	ldr	r2, [pc, #8]	@ (8003928 <HAL_RCC_OscConfig+0x4a4>)
 800391e:	f023 0304 	bic.w	r3, r3, #4
 8003922:	6713      	str	r3, [r2, #112]	@ 0x70
 8003924:	e021      	b.n	800396a <HAL_RCC_OscConfig+0x4e6>
 8003926:	bf00      	nop
 8003928:	58024400 	.word	0x58024400
 800392c:	58024800 	.word	0x58024800
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b05      	cmp	r3, #5
 8003936:	d10c      	bne.n	8003952 <HAL_RCC_OscConfig+0x4ce>
 8003938:	4b83      	ldr	r3, [pc, #524]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	4a82      	ldr	r2, [pc, #520]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 800393e:	f043 0304 	orr.w	r3, r3, #4
 8003942:	6713      	str	r3, [r2, #112]	@ 0x70
 8003944:	4b80      	ldr	r3, [pc, #512]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003948:	4a7f      	ldr	r2, [pc, #508]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003950:	e00b      	b.n	800396a <HAL_RCC_OscConfig+0x4e6>
 8003952:	4b7d      	ldr	r3, [pc, #500]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	4a7c      	ldr	r2, [pc, #496]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	6713      	str	r3, [r2, #112]	@ 0x70
 800395e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003962:	4a79      	ldr	r2, [pc, #484]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003964:	f023 0304 	bic.w	r3, r3, #4
 8003968:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d015      	beq.n	800399e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fd ff3d 	bl	80017f0 <HAL_GetTick>
 8003976:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fd ff39 	bl	80017f0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e14b      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003990:	4b6d      	ldr	r3, [pc, #436]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ee      	beq.n	800397a <HAL_RCC_OscConfig+0x4f6>
 800399c:	e014      	b.n	80039c8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fd ff27 	bl	80017f0 <HAL_GetTick>
 80039a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fd ff23 	bl	80017f0 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e135      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039bc:	4b62      	ldr	r3, [pc, #392]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ee      	bne.n	80039a6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 812a 	beq.w	8003c26 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039da:	2b18      	cmp	r3, #24
 80039dc:	f000 80ba 	beq.w	8003b54 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	f040 8095 	bne.w	8003b14 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b57      	ldr	r3, [pc, #348]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a56      	ldr	r2, [pc, #344]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 80039f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd fefb 	bl	80017f0 <HAL_GetTick>
 80039fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fd fef7 	bl	80017f0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e10b      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a10:	4b4d      	ldr	r3, [pc, #308]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a20:	4b4a      	ldr	r3, [pc, #296]	@ (8003b4c <HAL_RCC_OscConfig+0x6c8>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	4945      	ldr	r1, [pc, #276]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a44:	3b01      	subs	r3, #1
 8003a46:	025b      	lsls	r3, r3, #9
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	3b01      	subs	r3, #1
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a66:	4938      	ldr	r1, [pc, #224]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a6c:	4b36      	ldr	r3, [pc, #216]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	4a35      	ldr	r2, [pc, #212]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a78:	4b33      	ldr	r3, [pc, #204]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a7c:	4b34      	ldr	r3, [pc, #208]	@ (8003b50 <HAL_RCC_OscConfig+0x6cc>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a84:	00d2      	lsls	r2, r2, #3
 8003a86:	4930      	ldr	r1, [pc, #192]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	f023 020c 	bic.w	r2, r3, #12
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	492b      	ldr	r1, [pc, #172]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	f023 0202 	bic.w	r2, r3, #2
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	4927      	ldr	r1, [pc, #156]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ab0:	4b25      	ldr	r3, [pc, #148]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	4a24      	ldr	r2, [pc, #144]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003abc:	4b22      	ldr	r3, [pc, #136]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	4a21      	ldr	r2, [pc, #132]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003ace:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae0:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a18      	ldr	r2, [pc, #96]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd fe80 	bl	80017f0 <HAL_GetTick>
 8003af0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd fe7c 	bl	80017f0 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e090      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x670>
 8003b12:	e088      	b.n	8003c26 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b14:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0b      	ldr	r2, [pc, #44]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fe66 	bl	80017f0 <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fe62 	bl	80017f0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e076      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b3a:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <HAL_RCC_OscConfig+0x6c4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x6a4>
 8003b46:	e06e      	b.n	8003c26 <HAL_RCC_OscConfig+0x7a2>
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	fffffc0c 	.word	0xfffffc0c
 8003b50:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b54:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <HAL_RCC_OscConfig+0x7ac>)
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b5a:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <HAL_RCC_OscConfig+0x7ac>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d031      	beq.n	8003bcc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0203 	and.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d12a      	bne.n	8003bcc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d122      	bne.n	8003bcc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d11a      	bne.n	8003bcc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	0a5b      	lsrs	r3, r3, #9
 8003b9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d111      	bne.n	8003bcc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d108      	bne.n	8003bcc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	0e1b      	lsrs	r3, r3, #24
 8003bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e02b      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003bd0:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <HAL_RCC_OscConfig+0x7ac>)
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd4:	08db      	lsrs	r3, r3, #3
 8003bd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bda:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d01f      	beq.n	8003c26 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003be6:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <HAL_RCC_OscConfig+0x7ac>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bea:	4a11      	ldr	r2, [pc, #68]	@ (8003c30 <HAL_RCC_OscConfig+0x7ac>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bf2:	f7fd fdfd 	bl	80017f0 <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003bf8:	bf00      	nop
 8003bfa:	f7fd fdf9 	bl	80017f0 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d0f9      	beq.n	8003bfa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c06:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <HAL_RCC_OscConfig+0x7ac>)
 8003c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <HAL_RCC_OscConfig+0x7b0>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c12:	00d2      	lsls	r2, r2, #3
 8003c14:	4906      	ldr	r1, [pc, #24]	@ (8003c30 <HAL_RCC_OscConfig+0x7ac>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c1a:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <HAL_RCC_OscConfig+0x7ac>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1e:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <HAL_RCC_OscConfig+0x7ac>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3730      	adds	r7, #48	@ 0x30
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	58024400 	.word	0x58024400
 8003c34:	ffff0007 	.word	0xffff0007

08003c38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e19c      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b8a      	ldr	r3, [pc, #552]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d910      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b87      	ldr	r3, [pc, #540]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 020f 	bic.w	r2, r3, #15
 8003c62:	4985      	ldr	r1, [pc, #532]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b83      	ldr	r3, [pc, #524]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e184      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d010      	beq.n	8003caa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d908      	bls.n	8003caa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c98:	4b78      	ldr	r3, [pc, #480]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	4975      	ldr	r1, [pc, #468]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d010      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	4b70      	ldr	r3, [pc, #448]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d908      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	496a      	ldr	r1, [pc, #424]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d010      	beq.n	8003d06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	4b64      	ldr	r3, [pc, #400]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d908      	bls.n	8003d06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cf4:	4b61      	ldr	r3, [pc, #388]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	495e      	ldr	r1, [pc, #376]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d010      	beq.n	8003d34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	4b59      	ldr	r3, [pc, #356]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d908      	bls.n	8003d34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d22:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4953      	ldr	r1, [pc, #332]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	4b4d      	ldr	r3, [pc, #308]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d908      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	4b4a      	ldr	r3, [pc, #296]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f023 020f 	bic.w	r2, r3, #15
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4947      	ldr	r1, [pc, #284]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d055      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d6e:	4b43      	ldr	r3, [pc, #268]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4940      	ldr	r1, [pc, #256]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d88:	4b3c      	ldr	r3, [pc, #240]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d121      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0f6      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003da0:	4b36      	ldr	r3, [pc, #216]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d115      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0ea      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003db8:	4b30      	ldr	r3, [pc, #192]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0de      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0d6      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dd8:	4b28      	ldr	r3, [pc, #160]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f023 0207 	bic.w	r2, r3, #7
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4925      	ldr	r1, [pc, #148]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dea:	f7fd fd01 	bl	80017f0 <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df2:	f7fd fcfd 	bl	80017f0 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0be      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e08:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d1eb      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d010      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	4b14      	ldr	r3, [pc, #80]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d208      	bcs.n	8003e48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e36:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f023 020f 	bic.w	r2, r3, #15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	490e      	ldr	r1, [pc, #56]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e48:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d214      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b08      	ldr	r3, [pc, #32]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 020f 	bic.w	r2, r3, #15
 8003e5e:	4906      	ldr	r1, [pc, #24]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e086      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
 8003e78:	52002000 	.word	0x52002000
 8003e7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	4b3f      	ldr	r3, [pc, #252]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d208      	bcs.n	8003eae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	4939      	ldr	r1, [pc, #228]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	4b34      	ldr	r3, [pc, #208]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d208      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eca:	4b31      	ldr	r3, [pc, #196]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	492e      	ldr	r1, [pc, #184]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	4b28      	ldr	r3, [pc, #160]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d208      	bcs.n	8003f0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ef8:	4b25      	ldr	r3, [pc, #148]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4922      	ldr	r1, [pc, #136]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d010      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d208      	bcs.n	8003f38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f26:	4b1a      	ldr	r3, [pc, #104]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4917      	ldr	r1, [pc, #92]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f38:	f000 f834 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	4912      	ldr	r1, [pc, #72]	@ (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f56:	4b0e      	ldr	r3, [pc, #56]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f98 <HAL_RCC_ClockConfig+0x360>)
 8003f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f70:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <HAL_RCC_ClockConfig+0x364>)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f76:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_RCC_ClockConfig+0x368>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd fbee 	bl	800175c <HAL_InitTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	58024400 	.word	0x58024400
 8003f94:	0800b928 	.word	0x0800b928
 8003f98:	24000060 	.word	0x24000060
 8003f9c:	2400005c 	.word	0x2400005c
 8003fa0:	24000064 	.word	0x24000064

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	@ 0x24
 8003fa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003faa:	4bb3      	ldr	r3, [pc, #716]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fb2:	2b18      	cmp	r3, #24
 8003fb4:	f200 8155 	bhi.w	8004262 <HAL_RCC_GetSysClockFreq+0x2be>
 8003fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	08004263 	.word	0x08004263
 8003fc8:	08004263 	.word	0x08004263
 8003fcc:	08004263 	.word	0x08004263
 8003fd0:	08004263 	.word	0x08004263
 8003fd4:	08004263 	.word	0x08004263
 8003fd8:	08004263 	.word	0x08004263
 8003fdc:	08004263 	.word	0x08004263
 8003fe0:	0800404b 	.word	0x0800404b
 8003fe4:	08004263 	.word	0x08004263
 8003fe8:	08004263 	.word	0x08004263
 8003fec:	08004263 	.word	0x08004263
 8003ff0:	08004263 	.word	0x08004263
 8003ff4:	08004263 	.word	0x08004263
 8003ff8:	08004263 	.word	0x08004263
 8003ffc:	08004263 	.word	0x08004263
 8004000:	08004051 	.word	0x08004051
 8004004:	08004263 	.word	0x08004263
 8004008:	08004263 	.word	0x08004263
 800400c:	08004263 	.word	0x08004263
 8004010:	08004263 	.word	0x08004263
 8004014:	08004263 	.word	0x08004263
 8004018:	08004263 	.word	0x08004263
 800401c:	08004263 	.word	0x08004263
 8004020:	08004057 	.word	0x08004057
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004024:	4b94      	ldr	r3, [pc, #592]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004030:	4b91      	ldr	r3, [pc, #580]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	4a90      	ldr	r2, [pc, #576]	@ (800427c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
 8004040:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004042:	e111      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004044:	4b8d      	ldr	r3, [pc, #564]	@ (800427c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004046:	61bb      	str	r3, [r7, #24]
      break;
 8004048:	e10e      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800404a:	4b8d      	ldr	r3, [pc, #564]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800404c:	61bb      	str	r3, [r7, #24]
      break;
 800404e:	e10b      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004050:	4b8c      	ldr	r3, [pc, #560]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004052:	61bb      	str	r3, [r7, #24]
      break;
 8004054:	e108      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004056:	4b88      	ldr	r3, [pc, #544]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004060:	4b85      	ldr	r3, [pc, #532]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800406a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800406c:	4b82      	ldr	r3, [pc, #520]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004076:	4b80      	ldr	r3, [pc, #512]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407a:	08db      	lsrs	r3, r3, #3
 800407c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80e1 	beq.w	800425c <HAL_RCC_GetSysClockFreq+0x2b8>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b02      	cmp	r3, #2
 800409e:	f000 8083 	beq.w	80041a8 <HAL_RCC_GetSysClockFreq+0x204>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	f200 80a1 	bhi.w	80041ec <HAL_RCC_GetSysClockFreq+0x248>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x114>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d056      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x1c0>
 80040b6:	e099      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02d      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	08db      	lsrs	r3, r3, #3
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	4a6b      	ldr	r2, [pc, #428]	@ (800427c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	ee07 3a90 	vmov	s15, r3
 80040dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ee:	4b62      	ldr	r3, [pc, #392]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004102:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800411e:	e087      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800428c <HAL_RCC_GetSysClockFreq+0x2e8>
 800412e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004132:	4b51      	ldr	r3, [pc, #324]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004142:	ed97 6a02 	vldr	s12, [r7, #8]
 8004146:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800414a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004162:	e065      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004290 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004176:	4b40      	ldr	r3, [pc, #256]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004186:	ed97 6a02 	vldr	s12, [r7, #8]
 800418a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041a6:	e043      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004294 <HAL_RCC_GetSysClockFreq+0x2f0>
 80041b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041ea:	e021      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004290 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004212:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800422e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	0a5b      	lsrs	r3, r3, #9
 8004236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800423a:	3301      	adds	r3, #1
 800423c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004248:	edd7 6a07 	vldr	s13, [r7, #28]
 800424c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004254:	ee17 3a90 	vmov	r3, s15
 8004258:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800425a:	e005      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
      break;
 8004260:	e002      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004262:	4b07      	ldr	r3, [pc, #28]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004264:	61bb      	str	r3, [r7, #24]
      break;
 8004266:	bf00      	nop
  }

  return sysclockfreq;
 8004268:	69bb      	ldr	r3, [r7, #24]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	@ 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
 800427c:	03d09000 	.word	0x03d09000
 8004280:	003d0900 	.word	0x003d0900
 8004284:	017d7840 	.word	0x017d7840
 8004288:	46000000 	.word	0x46000000
 800428c:	4c742400 	.word	0x4c742400
 8004290:	4a742400 	.word	0x4a742400
 8004294:	4bbebc20 	.word	0x4bbebc20

08004298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800429e:	f7ff fe81 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490f      	ldr	r1, [pc, #60]	@ (80042ec <HAL_RCC_GetHCLKFreq+0x54>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042bc:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	4a09      	ldr	r2, [pc, #36]	@ (80042ec <HAL_RCC_GetHCLKFreq+0x54>)
 80042c6:	5cd3      	ldrb	r3, [r2, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a07      	ldr	r2, [pc, #28]	@ (80042f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80042d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042d6:	4a07      	ldr	r2, [pc, #28]	@ (80042f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042dc:	4b04      	ldr	r3, [pc, #16]	@ (80042f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	58024400 	.word	0x58024400
 80042ec:	0800b928 	.word	0x0800b928
 80042f0:	24000060 	.word	0x24000060
 80042f4:	2400005c 	.word	0x2400005c

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80042fc:	f7ff ffcc 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b06      	ldr	r3, [pc, #24]	@ (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4904      	ldr	r1, [pc, #16]	@ (8004320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	58024400 	.word	0x58024400
 8004320:	0800b928 	.word	0x0800b928

08004324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004328:	f7ff ffb6 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	@ (800434c <HAL_RCC_GetPCLK2Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	58024400 	.word	0x58024400
 800434c:	0800b928 	.word	0x0800b928

08004350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004354:	b0c6      	sub	sp, #280	@ 0x118
 8004356:	af00      	add	r7, sp, #0
 8004358:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004362:	2300      	movs	r3, #0
 8004364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004374:	2500      	movs	r5, #0
 8004376:	ea54 0305 	orrs.w	r3, r4, r5
 800437a:	d049      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800437c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004382:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004386:	d02f      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004388:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800438c:	d828      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800438e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004392:	d01a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004394:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004398:	d822      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043a2:	d007      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043a4:	e01c      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a6:	4bab      	ldr	r3, [pc, #684]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	4aaa      	ldr	r2, [pc, #680]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043b2:	e01a      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b8:	3308      	adds	r3, #8
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fc25 	bl	8005c0c <RCCEx_PLL2_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043c8:	e00f      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ce:	3328      	adds	r3, #40	@ 0x28
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 fccc 	bl	8005d70 <RCCEx_PLL3_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043de:	e004      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043e6:	e000      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80043e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043f2:	4b98      	ldr	r3, [pc, #608]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004400:	4a94      	ldr	r2, [pc, #592]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004402:	430b      	orrs	r3, r1
 8004404:	6513      	str	r3, [r2, #80]	@ 0x50
 8004406:	e003      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800440c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800441c:	f04f 0900 	mov.w	r9, #0
 8004420:	ea58 0309 	orrs.w	r3, r8, r9
 8004424:	d047      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442c:	2b04      	cmp	r3, #4
 800442e:	d82a      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004430:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	0800444d 	.word	0x0800444d
 800443c:	0800445b 	.word	0x0800445b
 8004440:	08004471 	.word	0x08004471
 8004444:	0800448f 	.word	0x0800448f
 8004448:	0800448f 	.word	0x0800448f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444c:	4b81      	ldr	r3, [pc, #516]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	4a80      	ldr	r2, [pc, #512]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004458:	e01a      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800445a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445e:	3308      	adds	r3, #8
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f001 fbd2 	bl	8005c0c <RCCEx_PLL2_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800446e:	e00f      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004474:	3328      	adds	r3, #40	@ 0x28
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f001 fc79 	bl	8005d70 <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004484:	e004      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800448e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004498:	4b6e      	ldr	r3, [pc, #440]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	f023 0107 	bic.w	r1, r3, #7
 80044a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80044ac:	e003      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80044c2:	f04f 0b00 	mov.w	fp, #0
 80044c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80044ca:	d05b      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044d4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80044d8:	d03b      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80044da:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80044de:	d834      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80044e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044e4:	d037      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80044e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044ea:	d82e      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80044ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80044f0:	d033      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80044f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80044f6:	d828      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80044f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044fc:	d01a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80044fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004502:	d822      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004508:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800450c:	d007      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800450e:	e01c      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004510:	4b50      	ldr	r3, [pc, #320]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	4a4f      	ldr	r2, [pc, #316]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800451a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800451c:	e01e      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800451e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004522:	3308      	adds	r3, #8
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f001 fb70 	bl	8005c0c <RCCEx_PLL2_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004532:	e013      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004538:	3328      	adds	r3, #40	@ 0x28
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f001 fc17 	bl	8005d70 <RCCEx_PLL3_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004548:	e008      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004550:	e004      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800455a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004564:	4b3b      	ldr	r3, [pc, #236]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004568:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800456c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004570:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004574:	4a37      	ldr	r2, [pc, #220]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004576:	430b      	orrs	r3, r1
 8004578:	6593      	str	r3, [r2, #88]	@ 0x58
 800457a:	e003      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004580:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004590:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004594:	2300      	movs	r3, #0
 8004596:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800459a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800459e:	460b      	mov	r3, r1
 80045a0:	4313      	orrs	r3, r2
 80045a2:	d05d      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80045a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80045ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80045b0:	d03b      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80045b2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80045b6:	d834      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045bc:	d037      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80045be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045c2:	d82e      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045c8:	d033      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80045ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045ce:	d828      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045d4:	d01a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80045d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045da:	d822      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80045e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045e4:	d007      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80045e6:	e01c      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ec:	4a19      	ldr	r2, [pc, #100]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045f4:	e01e      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045fa:	3308      	adds	r3, #8
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 fb04 	bl	8005c0c <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800460a:	e013      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004610:	3328      	adds	r3, #40	@ 0x28
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f001 fbab 	bl	8005d70 <RCCEx_PLL3_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004620:	e008      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004628:	e004      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10d      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800463c:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004640:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004648:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800464c:	4a01      	ldr	r2, [pc, #4]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800464e:	430b      	orrs	r3, r1
 8004650:	6593      	str	r3, [r2, #88]	@ 0x58
 8004652:	e005      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004654:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800465c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800466c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004676:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800467a:	460b      	mov	r3, r1
 800467c:	4313      	orrs	r3, r2
 800467e:	d03a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004686:	2b30      	cmp	r3, #48	@ 0x30
 8004688:	d01f      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800468a:	2b30      	cmp	r3, #48	@ 0x30
 800468c:	d819      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800468e:	2b20      	cmp	r3, #32
 8004690:	d00c      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004692:	2b20      	cmp	r3, #32
 8004694:	d815      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d019      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800469a:	2b10      	cmp	r3, #16
 800469c:	d111      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800469e:	4baa      	ldr	r3, [pc, #680]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a2:	4aa9      	ldr	r2, [pc, #676]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80046aa:	e011      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b0:	3308      	adds	r3, #8
 80046b2:	2102      	movs	r1, #2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 faa9 	bl	8005c0c <RCCEx_PLL2_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046c8:	e002      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80046ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80046d8:	4b9b      	ldr	r3, [pc, #620]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80046e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e6:	4a98      	ldr	r2, [pc, #608]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004702:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800470c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004710:	460b      	mov	r3, r1
 8004712:	4313      	orrs	r3, r2
 8004714:	d051      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004720:	d035      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004726:	d82e      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004728:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800472c:	d031      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800472e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004732:	d828      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004738:	d01a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800473e:	d822      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004748:	d007      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800474a:	e01c      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800474c:	4b7e      	ldr	r3, [pc, #504]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	4a7d      	ldr	r2, [pc, #500]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004758:	e01c      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800475a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475e:	3308      	adds	r3, #8
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f001 fa52 	bl	8005c0c <RCCEx_PLL2_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800476e:	e011      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004774:	3328      	adds	r3, #40	@ 0x28
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f001 faf9 	bl	8005d70 <RCCEx_PLL3_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004784:	e006      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800478c:	e002      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800479c:	4b6a      	ldr	r3, [pc, #424]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800479e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80047a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047aa:	4a67      	ldr	r2, [pc, #412]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80047b0:	e003      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047d0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4313      	orrs	r3, r2
 80047d8:	d053      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80047da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047e4:	d033      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80047e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047ea:	d82c      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80047ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047f0:	d02f      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80047f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047f6:	d826      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80047f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047fc:	d02b      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80047fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004802:	d820      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004808:	d012      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800480a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800480e:	d81a      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d022      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004818:	d115      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800481a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800481e:	3308      	adds	r3, #8
 8004820:	2101      	movs	r1, #1
 8004822:	4618      	mov	r0, r3
 8004824:	f001 f9f2 	bl	8005c0c <RCCEx_PLL2_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800482e:	e015      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004834:	3328      	adds	r3, #40	@ 0x28
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fa99 	bl	8005d70 <RCCEx_PLL3_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004844:	e00a      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800484c:	e006      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800484e:	bf00      	nop
 8004850:	e004      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004852:	bf00      	nop
 8004854:	e002      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800485a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004864:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004868:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004872:	4a35      	ldr	r2, [pc, #212]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004874:	430b      	orrs	r3, r1
 8004876:	6513      	str	r3, [r2, #80]	@ 0x50
 8004878:	e003      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800487e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800488e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004892:	2300      	movs	r3, #0
 8004894:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004898:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800489c:	460b      	mov	r3, r1
 800489e:	4313      	orrs	r3, r2
 80048a0:	d058      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80048a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048ae:	d033      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80048b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048b4:	d82c      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ba:	d02f      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c0:	d826      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048c6:	d02b      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80048c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048cc:	d820      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048d2:	d012      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80048d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048d8:	d81a      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d022      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80048de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048e2:	d115      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e8:	3308      	adds	r3, #8
 80048ea:	2101      	movs	r1, #1
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 f98d 	bl	8005c0c <RCCEx_PLL2_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80048f8:	e015      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048fe:	3328      	adds	r3, #40	@ 0x28
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fa34 	bl	8005d70 <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800490e:	e00a      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004916:	e006      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004918:	bf00      	nop
 800491a:	e004      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800491c:	bf00      	nop
 800491e:	e002      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004920:	bf00      	nop
 8004922:	e000      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004926:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10e      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004932:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800493a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800493e:	4a02      	ldr	r2, [pc, #8]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004940:	430b      	orrs	r3, r1
 8004942:	6593      	str	r3, [r2, #88]	@ 0x58
 8004944:	e006      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004950:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800496a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d037      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800497a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800497e:	d00e      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004984:	d816      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800498a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800498e:	d111      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004990:	4bc4      	ldr	r3, [pc, #784]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	4ac3      	ldr	r2, [pc, #780]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800499c:	e00f      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a2:	3308      	adds	r3, #8
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 f930 	bl	8005c0c <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80049b2:	e004      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049ba:	e000      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80049bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049c6:	4bb7      	ldr	r3, [pc, #732]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049d4:	4ab3      	ldr	r2, [pc, #716]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80049da:	e003      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80049f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d039      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d81c      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a51 	.word	0x08004a51
 8004a18:	08004a25 	.word	0x08004a25
 8004a1c:	08004a33 	.word	0x08004a33
 8004a20:	08004a51 	.word	0x08004a51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a24:	4b9f      	ldr	r3, [pc, #636]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	4a9e      	ldr	r2, [pc, #632]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a30:	e00f      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a36:	3308      	adds	r3, #8
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 f8e6 	bl	8005c0c <RCCEx_PLL2_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a46:	e004      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a4e:	e000      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a5a:	4b92      	ldr	r3, [pc, #584]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5e:	f023 0103 	bic.w	r1, r3, #3
 8004a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a68:	4a8e      	ldr	r2, [pc, #568]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a6e:	e003      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f000 8099 	beq.w	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a9a:	4b83      	ldr	r3, [pc, #524]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a82      	ldr	r2, [pc, #520]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aa6:	f7fc fea3 	bl	80017f0 <HAL_GetTick>
 8004aaa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aae:	e00b      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fc fe9e 	bl	80017f0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b64      	cmp	r3, #100	@ 0x64
 8004abe:	d903      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ac6:	e005      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ac8:	4b77      	ldr	r3, [pc, #476]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0ed      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004ad4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d173      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004adc:	4b71      	ldr	r3, [pc, #452]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ade:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ae8:	4053      	eors	r3, r2
 8004aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d015      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004af2:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004afe:	4b69      	ldr	r3, [pc, #420]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b02:	4a68      	ldr	r2, [pc, #416]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b08:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b0a:	4b66      	ldr	r3, [pc, #408]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0e:	4a65      	ldr	r2, [pc, #404]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b14:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b16:	4a63      	ldr	r2, [pc, #396]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b1c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b2a:	d118      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fc fe60 	bl	80017f0 <HAL_GetTick>
 8004b30:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b34:	e00d      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fc fe5b 	bl	80017f0 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004b40:	1ad2      	subs	r2, r2, r3
 8004b42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d903      	bls.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004b50:	e005      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b52:	4b54      	ldr	r3, [pc, #336]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0eb      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d129      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b76:	d10e      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004b78:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b88:	091a      	lsrs	r2, r3, #4
 8004b8a:	4b48      	ldr	r3, [pc, #288]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	4a45      	ldr	r2, [pc, #276]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6113      	str	r3, [r2, #16]
 8004b94:	e005      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004b96:	4b43      	ldr	r3, [pc, #268]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	4a42      	ldr	r2, [pc, #264]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ba0:	6113      	str	r3, [r2, #16]
 8004ba2:	4b40      	ldr	r3, [pc, #256]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ba4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004baa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb8:	e008      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004bc2:	e003      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f002 0301 	and.w	r3, r2, #1
 8004bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004be2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004be6:	460b      	mov	r3, r1
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f000 808f 	beq.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bf4:	2b28      	cmp	r3, #40	@ 0x28
 8004bf6:	d871      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8004c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004ce5 	.word	0x08004ce5
 8004c04:	08004cdd 	.word	0x08004cdd
 8004c08:	08004cdd 	.word	0x08004cdd
 8004c0c:	08004cdd 	.word	0x08004cdd
 8004c10:	08004cdd 	.word	0x08004cdd
 8004c14:	08004cdd 	.word	0x08004cdd
 8004c18:	08004cdd 	.word	0x08004cdd
 8004c1c:	08004cdd 	.word	0x08004cdd
 8004c20:	08004cb1 	.word	0x08004cb1
 8004c24:	08004cdd 	.word	0x08004cdd
 8004c28:	08004cdd 	.word	0x08004cdd
 8004c2c:	08004cdd 	.word	0x08004cdd
 8004c30:	08004cdd 	.word	0x08004cdd
 8004c34:	08004cdd 	.word	0x08004cdd
 8004c38:	08004cdd 	.word	0x08004cdd
 8004c3c:	08004cdd 	.word	0x08004cdd
 8004c40:	08004cc7 	.word	0x08004cc7
 8004c44:	08004cdd 	.word	0x08004cdd
 8004c48:	08004cdd 	.word	0x08004cdd
 8004c4c:	08004cdd 	.word	0x08004cdd
 8004c50:	08004cdd 	.word	0x08004cdd
 8004c54:	08004cdd 	.word	0x08004cdd
 8004c58:	08004cdd 	.word	0x08004cdd
 8004c5c:	08004cdd 	.word	0x08004cdd
 8004c60:	08004ce5 	.word	0x08004ce5
 8004c64:	08004cdd 	.word	0x08004cdd
 8004c68:	08004cdd 	.word	0x08004cdd
 8004c6c:	08004cdd 	.word	0x08004cdd
 8004c70:	08004cdd 	.word	0x08004cdd
 8004c74:	08004cdd 	.word	0x08004cdd
 8004c78:	08004cdd 	.word	0x08004cdd
 8004c7c:	08004cdd 	.word	0x08004cdd
 8004c80:	08004ce5 	.word	0x08004ce5
 8004c84:	08004cdd 	.word	0x08004cdd
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004cdd 	.word	0x08004cdd
 8004c90:	08004cdd 	.word	0x08004cdd
 8004c94:	08004cdd 	.word	0x08004cdd
 8004c98:	08004cdd 	.word	0x08004cdd
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	08004ce5 	.word	0x08004ce5
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	58024800 	.word	0x58024800
 8004cac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 ffa7 	bl	8005c0c <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cc4:	e00f      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cca:	3328      	adds	r3, #40	@ 0x28
 8004ccc:	2101      	movs	r1, #1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f84e 	bl	8005d70 <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cda:	e004      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cee:	4bbf      	ldr	r3, [pc, #764]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cfc:	4abb      	ldr	r2, [pc, #748]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f002 0302 	and.w	r3, r2, #2
 8004d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	d041      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d824      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004d36:	a201      	add	r2, pc, #4	@ (adr r2, 8004d3c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d89 	.word	0x08004d89
 8004d40:	08004d55 	.word	0x08004d55
 8004d44:	08004d6b 	.word	0x08004d6b
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d89 	.word	0x08004d89
 8004d50:	08004d89 	.word	0x08004d89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d58:	3308      	adds	r3, #8
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 ff55 	bl	8005c0c <RCCEx_PLL2_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d68:	e00f      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6e:	3328      	adds	r3, #40	@ 0x28
 8004d70:	2101      	movs	r1, #1
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fffc 	bl	8005d70 <RCCEx_PLL3_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d7e:	e004      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d86:	e000      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d92:	4b96      	ldr	r3, [pc, #600]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d96:	f023 0107 	bic.w	r1, r3, #7
 8004d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da0:	4a92      	ldr	r2, [pc, #584]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004da6:	e003      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f002 0304 	and.w	r3, r2, #4
 8004dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dc6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d044      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd8:	2b05      	cmp	r3, #5
 8004dda:	d825      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e31 	.word	0x08004e31
 8004de8:	08004dfd 	.word	0x08004dfd
 8004dec:	08004e13 	.word	0x08004e13
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e31 	.word	0x08004e31
 8004df8:	08004e31 	.word	0x08004e31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e00:	3308      	adds	r3, #8
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 ff01 	bl	8005c0c <RCCEx_PLL2_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e10:	e00f      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e16:	3328      	adds	r3, #40	@ 0x28
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 ffa8 	bl	8005d70 <RCCEx_PLL3_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e26:	e004      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e2e:	e000      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3e:	f023 0107 	bic.w	r1, r3, #7
 8004e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	4a68      	ldr	r2, [pc, #416]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e50:	e003      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f002 0320 	and.w	r3, r2, #32
 8004e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	d055      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e86:	d033      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e8c:	d82c      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e92:	d02f      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e98:	d826      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004e9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e9e:	d02b      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004ea0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ea4:	d820      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eaa:	d012      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eb0:	d81a      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d022      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eba:	d115      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fea1 	bl	8005c0c <RCCEx_PLL2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ed0:	e015      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed6:	3328      	adds	r3, #40	@ 0x28
 8004ed8:	2102      	movs	r1, #2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 ff48 	bl	8005d70 <RCCEx_PLL3_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ee6:	e00a      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004eee:	e006      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ef0:	bf00      	nop
 8004ef2:	e004      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ef4:	bf00      	nop
 8004ef6:	e002      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ef8:	bf00      	nop
 8004efa:	e000      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004efe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f06:	4b39      	ldr	r3, [pc, #228]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f16:	4a35      	ldr	r2, [pc, #212]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f1c:	e003      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f3c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004f40:	460b      	mov	r3, r1
 8004f42:	4313      	orrs	r3, r2
 8004f44:	d058      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f52:	d033      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004f54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f58:	d82c      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5e:	d02f      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f64:	d826      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f6a:	d02b      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004f6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f70:	d820      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f76:	d012      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f7c:	d81a      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d022      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f86:	d115      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fe3b 	bl	8005c0c <RCCEx_PLL2_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f9c:	e015      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa2:	3328      	adds	r3, #40	@ 0x28
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fee2 	bl	8005d70 <RCCEx_PLL3_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004fb2:	e00a      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fba:	e006      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004fbc:	bf00      	nop
 8004fbe:	e004      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004fc0:	bf00      	nop
 8004fc2:	e002      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004fc4:	bf00      	nop
 8004fc6:	e000      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fd2:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fe2:	4a02      	ldr	r2, [pc, #8]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fe8:	e006      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004fea:	bf00      	nop
 8004fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005004:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800500e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005012:	460b      	mov	r3, r1
 8005014:	4313      	orrs	r3, r2
 8005016:	d055      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005020:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005024:	d033      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005026:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800502a:	d82c      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800502c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005030:	d02f      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005036:	d826      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005038:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800503c:	d02b      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800503e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005042:	d820      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005048:	d012      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800504a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800504e:	d81a      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d022      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005058:	d115      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800505a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505e:	3308      	adds	r3, #8
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fdd2 	bl	8005c0c <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800506e:	e015      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005074:	3328      	adds	r3, #40	@ 0x28
 8005076:	2102      	movs	r1, #2
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fe79 	bl	8005d70 <RCCEx_PLL3_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005084:	e00a      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800508e:	bf00      	nop
 8005090:	e004      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005092:	bf00      	nop
 8005094:	e002      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800509a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050a4:	4ba0      	ldr	r3, [pc, #640]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80050ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050b4:	4a9c      	ldr	r2, [pc, #624]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ba:	e003      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f002 0308 	and.w	r3, r2, #8
 80050d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80050da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d01e      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80050e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f0:	d10c      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f6:	3328      	adds	r3, #40	@ 0x28
 80050f8:	2102      	movs	r1, #2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fe38 	bl	8005d70 <RCCEx_PLL3_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800510c:	4b86      	ldr	r3, [pc, #536]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800510e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005110:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800511c:	4a82      	ldr	r2, [pc, #520]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800511e:	430b      	orrs	r3, r1
 8005120:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	f002 0310 	and.w	r3, r2, #16
 800512e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005132:	2300      	movs	r3, #0
 8005134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005138:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800513c:	460b      	mov	r3, r1
 800513e:	4313      	orrs	r3, r2
 8005140:	d01e      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800514a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800514e:	d10c      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005154:	3328      	adds	r3, #40	@ 0x28
 8005156:	2102      	movs	r1, #2
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fe09 	bl	8005d70 <RCCEx_PLL3_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800516a:	4b6f      	ldr	r3, [pc, #444]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517a:	4a6b      	ldr	r2, [pc, #428]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800517c:	430b      	orrs	r3, r1
 800517e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800518c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800518e:	2300      	movs	r3, #0
 8005190:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005192:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005196:	460b      	mov	r3, r1
 8005198:	4313      	orrs	r3, r2
 800519a:	d03e      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800519c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051a8:	d022      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80051aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ae:	d81b      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051b8:	d00b      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80051ba:	e015      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c0:	3308      	adds	r3, #8
 80051c2:	2100      	movs	r1, #0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fd21 	bl	8005c0c <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051d0:	e00f      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d6:	3328      	adds	r3, #40	@ 0x28
 80051d8:	2102      	movs	r1, #2
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fdc8 	bl	8005d70 <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051e6:	e004      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80051f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005206:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800520a:	4a47      	ldr	r2, [pc, #284]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800520c:	430b      	orrs	r3, r1
 800520e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005210:	e003      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005212:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005216:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800521a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005226:	673b      	str	r3, [r7, #112]	@ 0x70
 8005228:	2300      	movs	r3, #0
 800522a:	677b      	str	r3, [r7, #116]	@ 0x74
 800522c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005230:	460b      	mov	r3, r1
 8005232:	4313      	orrs	r3, r2
 8005234:	d03b      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800523a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800523e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005242:	d01f      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005244:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005248:	d818      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800524a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800524e:	d003      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005254:	d007      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005256:	e011      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005258:	4b33      	ldr	r3, [pc, #204]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	4a32      	ldr	r2, [pc, #200]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005264:	e00f      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526a:	3328      	adds	r3, #40	@ 0x28
 800526c:	2101      	movs	r1, #1
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fd7e 	bl	8005d70 <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800527a:	e004      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005286:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800528e:	4b26      	ldr	r3, [pc, #152]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800529e:	4a22      	ldr	r2, [pc, #136]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80052ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052bc:	2300      	movs	r3, #0
 80052be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80052c4:	460b      	mov	r3, r1
 80052c6:	4313      	orrs	r3, r2
 80052c8:	d034      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80052ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d8:	d007      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80052da:	e011      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052dc:	4b12      	ldr	r3, [pc, #72]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	4a11      	ldr	r2, [pc, #68]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052e8:	e00e      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ee:	3308      	adds	r3, #8
 80052f0:	2102      	movs	r1, #2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fc8a 	bl	8005c0c <RCCEx_PLL2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052fe:	e003      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005314:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531e:	4a02      	ldr	r2, [pc, #8]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005320:	430b      	orrs	r3, r1
 8005322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005324:	e006      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005326:	bf00      	nop
 8005328:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005330:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005340:	663b      	str	r3, [r7, #96]	@ 0x60
 8005342:	2300      	movs	r3, #0
 8005344:	667b      	str	r3, [r7, #100]	@ 0x64
 8005346:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800534a:	460b      	mov	r3, r1
 800534c:	4313      	orrs	r3, r2
 800534e:	d00c      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005354:	3328      	adds	r3, #40	@ 0x28
 8005356:	2102      	movs	r1, #2
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fd09 	bl	8005d70 <RCCEx_PLL3_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005376:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005378:	2300      	movs	r3, #0
 800537a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800537c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005380:	460b      	mov	r3, r1
 8005382:	4313      	orrs	r3, r2
 8005384:	d036      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800538c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005390:	d018      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005396:	d811      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800539c:	d014      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800539e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053a2:	d80b      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d011      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80053a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ac:	d106      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ae:	4bb7      	ldr	r3, [pc, #732]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	4ab6      	ldr	r2, [pc, #728]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80053ba:	e008      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053c2:	e004      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80053c4:	bf00      	nop
 80053c6:	e002      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80053c8:	bf00      	nop
 80053ca:	e000      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80053cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053d6:	4bad      	ldr	r3, [pc, #692]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053e4:	4aa9      	ldr	r2, [pc, #676]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053e6:	430b      	orrs	r3, r1
 80053e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80053ea:	e003      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005400:	653b      	str	r3, [r7, #80]	@ 0x50
 8005402:	2300      	movs	r3, #0
 8005404:	657b      	str	r3, [r7, #84]	@ 0x54
 8005406:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800540a:	460b      	mov	r3, r1
 800540c:	4313      	orrs	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005410:	4b9e      	ldr	r3, [pc, #632]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005414:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541e:	4a9b      	ldr	r2, [pc, #620]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005420:	430b      	orrs	r3, r1
 8005422:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005432:	2300      	movs	r3, #0
 8005434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005436:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800543a:	460b      	mov	r3, r1
 800543c:	4313      	orrs	r3, r2
 800543e:	d009      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005440:	4b92      	ldr	r3, [pc, #584]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005444:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800544e:	4a8f      	ldr	r2, [pc, #572]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005450:	430b      	orrs	r3, r1
 8005452:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005460:	643b      	str	r3, [r7, #64]	@ 0x40
 8005462:	2300      	movs	r3, #0
 8005464:	647b      	str	r3, [r7, #68]	@ 0x44
 8005466:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	d00e      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005470:	4b86      	ldr	r3, [pc, #536]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	4a85      	ldr	r2, [pc, #532]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005476:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800547a:	6113      	str	r3, [r2, #16]
 800547c:	4b83      	ldr	r3, [pc, #524]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800547e:	6919      	ldr	r1, [r3, #16]
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005484:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005488:	4a80      	ldr	r2, [pc, #512]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800548a:	430b      	orrs	r3, r1
 800548c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800548e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800549a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800549c:	2300      	movs	r3, #0
 800549e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054aa:	4b78      	ldr	r3, [pc, #480]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b8:	4a74      	ldr	r2, [pc, #464]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054ba:	430b      	orrs	r3, r1
 80054bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80054ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80054cc:	2300      	movs	r3, #0
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80054d4:	460b      	mov	r3, r1
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054da:	4b6c      	ldr	r3, [pc, #432]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054de:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80054e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ea:	4a68      	ldr	r2, [pc, #416]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054ec:	430b      	orrs	r3, r1
 80054ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	2100      	movs	r1, #0
 80054fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005502:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d011      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005510:	3308      	adds	r3, #8
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fb79 	bl	8005c0c <RCCEx_PLL2_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800552c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	2100      	movs	r1, #0
 800553a:	6239      	str	r1, [r7, #32]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
 8005542:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005546:	460b      	mov	r3, r1
 8005548:	4313      	orrs	r3, r2
 800554a:	d011      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800554c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005550:	3308      	adds	r3, #8
 8005552:	2101      	movs	r1, #1
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fb59 	bl	8005c0c <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800556c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	2100      	movs	r1, #0
 800557a:	61b9      	str	r1, [r7, #24]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005586:	460b      	mov	r3, r1
 8005588:	4313      	orrs	r3, r2
 800558a:	d011      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005590:	3308      	adds	r3, #8
 8005592:	2102      	movs	r1, #2
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fb39 	bl	8005c0c <RCCEx_PLL2_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80055a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80055b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	2100      	movs	r1, #0
 80055ba:	6139      	str	r1, [r7, #16]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055c6:	460b      	mov	r3, r1
 80055c8:	4313      	orrs	r3, r2
 80055ca:	d011      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d0:	3328      	adds	r3, #40	@ 0x28
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fbcb 	bl	8005d70 <RCCEx_PLL3_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80055e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	2100      	movs	r1, #0
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005606:	460b      	mov	r3, r1
 8005608:	4313      	orrs	r3, r2
 800560a:	d011      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005610:	3328      	adds	r3, #40	@ 0x28
 8005612:	2101      	movs	r1, #1
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fbab 	bl	8005d70 <RCCEx_PLL3_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800562c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	2100      	movs	r1, #0
 800563a:	6039      	str	r1, [r7, #0]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005646:	460b      	mov	r3, r1
 8005648:	4313      	orrs	r3, r2
 800564a:	d011      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005650:	3328      	adds	r3, #40	@ 0x28
 8005652:	2102      	movs	r1, #2
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fb8b 	bl	8005d70 <RCCEx_PLL3_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800566c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005670:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
}
 800567e:	4618      	mov	r0, r3
 8005680:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005684:	46bd      	mov	sp, r7
 8005686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800568a:	bf00      	nop
 800568c:	58024400 	.word	0x58024400

08005690 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005694:	f7fe fe00 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 8005698:	4602      	mov	r2, r0
 800569a:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	4904      	ldr	r1, [pc, #16]	@ (80056b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056a6:	5ccb      	ldrb	r3, [r1, r3]
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	58024400 	.word	0x58024400
 80056b8:	0800b928 	.word	0x0800b928

080056bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80056bc:	b480      	push	{r7}
 80056be:	b089      	sub	sp, #36	@ 0x24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056c4:	4ba1      	ldr	r3, [pc, #644]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80056ce:	4b9f      	ldr	r3, [pc, #636]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	0b1b      	lsrs	r3, r3, #12
 80056d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80056da:	4b9c      	ldr	r3, [pc, #624]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80056e6:	4b99      	ldr	r3, [pc, #612]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ea:	08db      	lsrs	r3, r3, #3
 80056ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	fb02 f303 	mul.w	r3, r2, r3
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8111 	beq.w	800592c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b02      	cmp	r3, #2
 800570e:	f000 8083 	beq.w	8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b02      	cmp	r3, #2
 8005716:	f200 80a1 	bhi.w	800585c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d056      	beq.n	80057d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005726:	e099      	b.n	800585c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005728:	4b88      	ldr	r3, [pc, #544]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b00      	cmp	r3, #0
 8005732:	d02d      	beq.n	8005790 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005734:	4b85      	ldr	r3, [pc, #532]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	08db      	lsrs	r3, r3, #3
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	4a84      	ldr	r2, [pc, #528]	@ (8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
 8005744:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800575e:	4b7b      	ldr	r3, [pc, #492]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005772:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800577a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800578e:	e087      	b.n	80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005958 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800579e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a2:	4b6a      	ldr	r3, [pc, #424]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057d2:	e065      	b.n	80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e6:	4b59      	ldr	r3, [pc, #356]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005816:	e043      	b.n	80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005822:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582a:	4b48      	ldr	r3, [pc, #288]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800582c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583a:	ed97 6a03 	vldr	s12, [r7, #12]
 800583e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800584e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800585a:	e021      	b.n	80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005866:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800586a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800586e:	4b37      	ldr	r3, [pc, #220]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005882:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800588a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800589e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80058a0:	4b2a      	ldr	r3, [pc, #168]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a4:	0a5b      	lsrs	r3, r3, #9
 80058a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80058be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c6:	ee17 2a90 	vmov	r2, s15
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80058ce:	4b1f      	ldr	r3, [pc, #124]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f4:	ee17 2a90 	vmov	r2, s15
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80058fc:	4b13      	ldr	r3, [pc, #76]	@ (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005900:	0e1b      	lsrs	r3, r3, #24
 8005902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005916:	edd7 6a07 	vldr	s13, [r7, #28]
 800591a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800591e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005922:	ee17 2a90 	vmov	r2, s15
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800592a:	e008      	b.n	800593e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	609a      	str	r2, [r3, #8]
}
 800593e:	bf00      	nop
 8005940:	3724      	adds	r7, #36	@ 0x24
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	58024400 	.word	0x58024400
 8005950:	03d09000 	.word	0x03d09000
 8005954:	46000000 	.word	0x46000000
 8005958:	4c742400 	.word	0x4c742400
 800595c:	4a742400 	.word	0x4a742400
 8005960:	4bbebc20 	.word	0x4bbebc20

08005964 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005964:	b480      	push	{r7}
 8005966:	b089      	sub	sp, #36	@ 0x24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800596c:	4ba1      	ldr	r3, [pc, #644]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005976:	4b9f      	ldr	r3, [pc, #636]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597a:	0d1b      	lsrs	r3, r3, #20
 800597c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005980:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005982:	4b9c      	ldr	r3, [pc, #624]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800598e:	4b99      	ldr	r3, [pc, #612]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	08db      	lsrs	r3, r3, #3
 8005994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	fb02 f303 	mul.w	r3, r2, r3
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8111 	beq.w	8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	f000 8083 	beq.w	8005ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	f200 80a1 	bhi.w	8005b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d056      	beq.n	8005a7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059ce:	e099      	b.n	8005b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059d0:	4b88      	ldr	r3, [pc, #544]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d02d      	beq.n	8005a38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059dc:	4b85      	ldr	r3, [pc, #532]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	08db      	lsrs	r3, r3, #3
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	4a84      	ldr	r2, [pc, #528]	@ (8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80059e8:	fa22 f303 	lsr.w	r3, r2, r3
 80059ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a06:	4b7b      	ldr	r3, [pc, #492]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005bfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a36:	e087      	b.n	8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005c00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005bfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a7a:	e065      	b.n	8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8e:	4b59      	ldr	r3, [pc, #356]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aa2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005bfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005abe:	e043      	b.n	8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad2:	4b48      	ldr	r3, [pc, #288]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005bfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b02:	e021      	b.n	8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b16:	4b37      	ldr	r3, [pc, #220]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005bfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005b48:	4b2a      	ldr	r3, [pc, #168]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4c:	0a5b      	lsrs	r3, r3, #9
 8005b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b6e:	ee17 2a90 	vmov	r2, s15
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005b76:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	0c1b      	lsrs	r3, r3, #16
 8005b7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b80:	ee07 3a90 	vmov	s15, r3
 8005b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9c:	ee17 2a90 	vmov	r2, s15
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba8:	0e1b      	lsrs	r3, r3, #24
 8005baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bca:	ee17 2a90 	vmov	r2, s15
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bd2:	e008      	b.n	8005be6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	609a      	str	r2, [r3, #8]
}
 8005be6:	bf00      	nop
 8005be8:	3724      	adds	r7, #36	@ 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	03d09000 	.word	0x03d09000
 8005bfc:	46000000 	.word	0x46000000
 8005c00:	4c742400 	.word	0x4c742400
 8005c04:	4a742400 	.word	0x4a742400
 8005c08:	4bbebc20 	.word	0x4bbebc20

08005c0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c1a:	4b53      	ldr	r3, [pc, #332]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d101      	bne.n	8005c2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e099      	b.n	8005d5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a4e      	ldr	r2, [pc, #312]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005c30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c36:	f7fb fddb 	bl	80017f0 <HAL_GetTick>
 8005c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c3c:	e008      	b.n	8005c50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c3e:	f7fb fdd7 	bl	80017f0 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e086      	b.n	8005d5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c50:	4b45      	ldr	r3, [pc, #276]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f0      	bne.n	8005c3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c5c:	4b42      	ldr	r3, [pc, #264]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	031b      	lsls	r3, r3, #12
 8005c6a:	493f      	ldr	r1, [pc, #252]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	025b      	lsls	r3, r3, #9
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	061b      	lsls	r3, r3, #24
 8005c9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005ca0:	4931      	ldr	r1, [pc, #196]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ca6:	4b30      	ldr	r3, [pc, #192]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	492d      	ldr	r1, [pc, #180]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	f023 0220 	bic.w	r2, r3, #32
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	4928      	ldr	r1, [pc, #160]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005cca:	4b27      	ldr	r3, [pc, #156]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cce:	4a26      	ldr	r2, [pc, #152]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005cd0:	f023 0310 	bic.w	r3, r3, #16
 8005cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005cd6:	4b24      	ldr	r3, [pc, #144]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005cd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cda:	4b24      	ldr	r3, [pc, #144]	@ (8005d6c <RCCEx_PLL2_Config+0x160>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	69d2      	ldr	r2, [r2, #28]
 8005ce2:	00d2      	lsls	r2, r2, #3
 8005ce4:	4920      	ldr	r1, [pc, #128]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005cea:	4b1f      	ldr	r3, [pc, #124]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cee:	4a1e      	ldr	r2, [pc, #120]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005cf0:	f043 0310 	orr.w	r3, r3, #16
 8005cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d106      	bne.n	8005d0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	4a19      	ldr	r2, [pc, #100]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005d02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d08:	e00f      	b.n	8005d2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d106      	bne.n	8005d1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d10:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	4a14      	ldr	r2, [pc, #80]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d1c:	e005      	b.n	8005d2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d1e:	4b12      	ldr	r3, [pc, #72]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d22:	4a11      	ldr	r2, [pc, #68]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005d24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005d30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d36:	f7fb fd5b 	bl	80017f0 <HAL_GetTick>
 8005d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d3c:	e008      	b.n	8005d50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d3e:	f7fb fd57 	bl	80017f0 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e006      	b.n	8005d5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d50:	4b05      	ldr	r3, [pc, #20]	@ (8005d68 <RCCEx_PLL2_Config+0x15c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	ffff0007 	.word	0xffff0007

08005d70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d7e:	4b53      	ldr	r3, [pc, #332]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d101      	bne.n	8005d8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e099      	b.n	8005ec2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d8e:	4b4f      	ldr	r3, [pc, #316]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a4e      	ldr	r2, [pc, #312]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d9a:	f7fb fd29 	bl	80017f0 <HAL_GetTick>
 8005d9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005da0:	e008      	b.n	8005db4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005da2:	f7fb fd25 	bl	80017f0 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e086      	b.n	8005ec2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005db4:	4b45      	ldr	r3, [pc, #276]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f0      	bne.n	8005da2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005dc0:	4b42      	ldr	r3, [pc, #264]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	051b      	lsls	r3, r3, #20
 8005dce:	493f      	ldr	r1, [pc, #252]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	025b      	lsls	r3, r3, #9
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	061b      	lsls	r3, r3, #24
 8005e00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e04:	4931      	ldr	r1, [pc, #196]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e0a:	4b30      	ldr	r3, [pc, #192]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	492d      	ldr	r1, [pc, #180]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	4928      	ldr	r1, [pc, #160]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e2e:	4b27      	ldr	r3, [pc, #156]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	4a26      	ldr	r2, [pc, #152]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e3a:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e3e:	4b24      	ldr	r3, [pc, #144]	@ (8005ed0 <RCCEx_PLL3_Config+0x160>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	69d2      	ldr	r2, [r2, #28]
 8005e46:	00d2      	lsls	r2, r2, #3
 8005e48:	4920      	ldr	r1, [pc, #128]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	4a1e      	ldr	r2, [pc, #120]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	4a19      	ldr	r2, [pc, #100]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e6c:	e00f      	b.n	8005e8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d106      	bne.n	8005e82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e74:	4b15      	ldr	r3, [pc, #84]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e78:	4a14      	ldr	r2, [pc, #80]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e80:	e005      	b.n	8005e8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e82:	4b12      	ldr	r3, [pc, #72]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e86:	4a11      	ldr	r2, [pc, #68]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a0e      	ldr	r2, [pc, #56]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e9a:	f7fb fca9 	bl	80017f0 <HAL_GetTick>
 8005e9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ea0:	e008      	b.n	8005eb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ea2:	f7fb fca5 	bl	80017f0 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e006      	b.n	8005ec2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005eb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <RCCEx_PLL3_Config+0x15c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0f0      	beq.n	8005ea2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	58024400 	.word	0x58024400
 8005ed0:	ffff0007 	.word	0xffff0007

08005ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e042      	b.n	8005f6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fb f9cf 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2224      	movs	r2, #36	@ 0x24
 8005f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0201 	bic.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 ff22 	bl	8006d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f8b3 	bl	8006090 <UART_SetConfig>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e01b      	b.n	8005f6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 ffa1 	bl	8006eac <UART_CheckIdleState>
 8005f6a:	4603      	mov	r3, r0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	@ 0x28
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d17b      	bne.n	8006086 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_UART_Transmit+0x26>
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e074      	b.n	8006088 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2221      	movs	r2, #33	@ 0x21
 8005faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fae:	f7fb fc1f 	bl	80017f0 <HAL_GetTick>
 8005fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fcc:	d108      	bne.n	8005fe0 <HAL_UART_Transmit+0x6c>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e003      	b.n	8005fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fe8:	e030      	b.n	800604c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2180      	movs	r1, #128	@ 0x80
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f001 f803 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e03d      	b.n	8006088 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006020:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	3302      	adds	r3, #2
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	e007      	b.n	800603a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1c8      	bne.n	8005fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2200      	movs	r2, #0
 8006060:	2140      	movs	r1, #64	@ 0x40
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 ffcc 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e006      	b.n	8006088 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e000      	b.n	8006088 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
  }
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006094:	b092      	sub	sp, #72	@ 0x48
 8006096:	af00      	add	r7, sp, #0
 8006098:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4bbe      	ldr	r3, [pc, #760]	@ (80063b8 <UART_SetConfig+0x328>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4ab3      	ldr	r2, [pc, #716]	@ (80063bc <UART_SetConfig+0x32c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060f8:	4313      	orrs	r3, r2
 80060fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	4baf      	ldr	r3, [pc, #700]	@ (80063c0 <UART_SetConfig+0x330>)
 8006104:	4013      	ands	r3, r2
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800610c:	430b      	orrs	r3, r1
 800610e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006116:	f023 010f 	bic.w	r1, r3, #15
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4aa6      	ldr	r2, [pc, #664]	@ (80063c4 <UART_SetConfig+0x334>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d177      	bne.n	8006220 <UART_SetConfig+0x190>
 8006130:	4ba5      	ldr	r3, [pc, #660]	@ (80063c8 <UART_SetConfig+0x338>)
 8006132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006134:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006138:	2b28      	cmp	r3, #40	@ 0x28
 800613a:	d86d      	bhi.n	8006218 <UART_SetConfig+0x188>
 800613c:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <UART_SetConfig+0xb4>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	080061e9 	.word	0x080061e9
 8006148:	08006219 	.word	0x08006219
 800614c:	08006219 	.word	0x08006219
 8006150:	08006219 	.word	0x08006219
 8006154:	08006219 	.word	0x08006219
 8006158:	08006219 	.word	0x08006219
 800615c:	08006219 	.word	0x08006219
 8006160:	08006219 	.word	0x08006219
 8006164:	080061f1 	.word	0x080061f1
 8006168:	08006219 	.word	0x08006219
 800616c:	08006219 	.word	0x08006219
 8006170:	08006219 	.word	0x08006219
 8006174:	08006219 	.word	0x08006219
 8006178:	08006219 	.word	0x08006219
 800617c:	08006219 	.word	0x08006219
 8006180:	08006219 	.word	0x08006219
 8006184:	080061f9 	.word	0x080061f9
 8006188:	08006219 	.word	0x08006219
 800618c:	08006219 	.word	0x08006219
 8006190:	08006219 	.word	0x08006219
 8006194:	08006219 	.word	0x08006219
 8006198:	08006219 	.word	0x08006219
 800619c:	08006219 	.word	0x08006219
 80061a0:	08006219 	.word	0x08006219
 80061a4:	08006201 	.word	0x08006201
 80061a8:	08006219 	.word	0x08006219
 80061ac:	08006219 	.word	0x08006219
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006219 	.word	0x08006219
 80061b8:	08006219 	.word	0x08006219
 80061bc:	08006219 	.word	0x08006219
 80061c0:	08006219 	.word	0x08006219
 80061c4:	08006209 	.word	0x08006209
 80061c8:	08006219 	.word	0x08006219
 80061cc:	08006219 	.word	0x08006219
 80061d0:	08006219 	.word	0x08006219
 80061d4:	08006219 	.word	0x08006219
 80061d8:	08006219 	.word	0x08006219
 80061dc:	08006219 	.word	0x08006219
 80061e0:	08006219 	.word	0x08006219
 80061e4:	08006211 	.word	0x08006211
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e326      	b.n	800683e <UART_SetConfig+0x7ae>
 80061f0:	2304      	movs	r3, #4
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e322      	b.n	800683e <UART_SetConfig+0x7ae>
 80061f8:	2308      	movs	r3, #8
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e31e      	b.n	800683e <UART_SetConfig+0x7ae>
 8006200:	2310      	movs	r3, #16
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e31a      	b.n	800683e <UART_SetConfig+0x7ae>
 8006208:	2320      	movs	r3, #32
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e316      	b.n	800683e <UART_SetConfig+0x7ae>
 8006210:	2340      	movs	r3, #64	@ 0x40
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e312      	b.n	800683e <UART_SetConfig+0x7ae>
 8006218:	2380      	movs	r3, #128	@ 0x80
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e30e      	b.n	800683e <UART_SetConfig+0x7ae>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a69      	ldr	r2, [pc, #420]	@ (80063cc <UART_SetConfig+0x33c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d130      	bne.n	800628c <UART_SetConfig+0x1fc>
 800622a:	4b67      	ldr	r3, [pc, #412]	@ (80063c8 <UART_SetConfig+0x338>)
 800622c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	2b05      	cmp	r3, #5
 8006234:	d826      	bhi.n	8006284 <UART_SetConfig+0x1f4>
 8006236:	a201      	add	r2, pc, #4	@ (adr r2, 800623c <UART_SetConfig+0x1ac>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	08006255 	.word	0x08006255
 8006240:	0800625d 	.word	0x0800625d
 8006244:	08006265 	.word	0x08006265
 8006248:	0800626d 	.word	0x0800626d
 800624c:	08006275 	.word	0x08006275
 8006250:	0800627d 	.word	0x0800627d
 8006254:	2300      	movs	r3, #0
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e2f0      	b.n	800683e <UART_SetConfig+0x7ae>
 800625c:	2304      	movs	r3, #4
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e2ec      	b.n	800683e <UART_SetConfig+0x7ae>
 8006264:	2308      	movs	r3, #8
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e2e8      	b.n	800683e <UART_SetConfig+0x7ae>
 800626c:	2310      	movs	r3, #16
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e2e4      	b.n	800683e <UART_SetConfig+0x7ae>
 8006274:	2320      	movs	r3, #32
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e2e0      	b.n	800683e <UART_SetConfig+0x7ae>
 800627c:	2340      	movs	r3, #64	@ 0x40
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006282:	e2dc      	b.n	800683e <UART_SetConfig+0x7ae>
 8006284:	2380      	movs	r3, #128	@ 0x80
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628a:	e2d8      	b.n	800683e <UART_SetConfig+0x7ae>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a4f      	ldr	r2, [pc, #316]	@ (80063d0 <UART_SetConfig+0x340>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d130      	bne.n	80062f8 <UART_SetConfig+0x268>
 8006296:	4b4c      	ldr	r3, [pc, #304]	@ (80063c8 <UART_SetConfig+0x338>)
 8006298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	2b05      	cmp	r3, #5
 80062a0:	d826      	bhi.n	80062f0 <UART_SetConfig+0x260>
 80062a2:	a201      	add	r2, pc, #4	@ (adr r2, 80062a8 <UART_SetConfig+0x218>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062c1 	.word	0x080062c1
 80062ac:	080062c9 	.word	0x080062c9
 80062b0:	080062d1 	.word	0x080062d1
 80062b4:	080062d9 	.word	0x080062d9
 80062b8:	080062e1 	.word	0x080062e1
 80062bc:	080062e9 	.word	0x080062e9
 80062c0:	2300      	movs	r3, #0
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c6:	e2ba      	b.n	800683e <UART_SetConfig+0x7ae>
 80062c8:	2304      	movs	r3, #4
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e2b6      	b.n	800683e <UART_SetConfig+0x7ae>
 80062d0:	2308      	movs	r3, #8
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e2b2      	b.n	800683e <UART_SetConfig+0x7ae>
 80062d8:	2310      	movs	r3, #16
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062de:	e2ae      	b.n	800683e <UART_SetConfig+0x7ae>
 80062e0:	2320      	movs	r3, #32
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e6:	e2aa      	b.n	800683e <UART_SetConfig+0x7ae>
 80062e8:	2340      	movs	r3, #64	@ 0x40
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ee:	e2a6      	b.n	800683e <UART_SetConfig+0x7ae>
 80062f0:	2380      	movs	r3, #128	@ 0x80
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e2a2      	b.n	800683e <UART_SetConfig+0x7ae>
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a35      	ldr	r2, [pc, #212]	@ (80063d4 <UART_SetConfig+0x344>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d130      	bne.n	8006364 <UART_SetConfig+0x2d4>
 8006302:	4b31      	ldr	r3, [pc, #196]	@ (80063c8 <UART_SetConfig+0x338>)
 8006304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b05      	cmp	r3, #5
 800630c:	d826      	bhi.n	800635c <UART_SetConfig+0x2cc>
 800630e:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <UART_SetConfig+0x284>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	0800632d 	.word	0x0800632d
 8006318:	08006335 	.word	0x08006335
 800631c:	0800633d 	.word	0x0800633d
 8006320:	08006345 	.word	0x08006345
 8006324:	0800634d 	.word	0x0800634d
 8006328:	08006355 	.word	0x08006355
 800632c:	2300      	movs	r3, #0
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006332:	e284      	b.n	800683e <UART_SetConfig+0x7ae>
 8006334:	2304      	movs	r3, #4
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e280      	b.n	800683e <UART_SetConfig+0x7ae>
 800633c:	2308      	movs	r3, #8
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e27c      	b.n	800683e <UART_SetConfig+0x7ae>
 8006344:	2310      	movs	r3, #16
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634a:	e278      	b.n	800683e <UART_SetConfig+0x7ae>
 800634c:	2320      	movs	r3, #32
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006352:	e274      	b.n	800683e <UART_SetConfig+0x7ae>
 8006354:	2340      	movs	r3, #64	@ 0x40
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800635a:	e270      	b.n	800683e <UART_SetConfig+0x7ae>
 800635c:	2380      	movs	r3, #128	@ 0x80
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006362:	e26c      	b.n	800683e <UART_SetConfig+0x7ae>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <UART_SetConfig+0x348>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d142      	bne.n	80063f4 <UART_SetConfig+0x364>
 800636e:	4b16      	ldr	r3, [pc, #88]	@ (80063c8 <UART_SetConfig+0x338>)
 8006370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b05      	cmp	r3, #5
 8006378:	d838      	bhi.n	80063ec <UART_SetConfig+0x35c>
 800637a:	a201      	add	r2, pc, #4	@ (adr r2, 8006380 <UART_SetConfig+0x2f0>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	08006399 	.word	0x08006399
 8006384:	080063a1 	.word	0x080063a1
 8006388:	080063a9 	.word	0x080063a9
 800638c:	080063b1 	.word	0x080063b1
 8006390:	080063dd 	.word	0x080063dd
 8006394:	080063e5 	.word	0x080063e5
 8006398:	2300      	movs	r3, #0
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639e:	e24e      	b.n	800683e <UART_SetConfig+0x7ae>
 80063a0:	2304      	movs	r3, #4
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a6:	e24a      	b.n	800683e <UART_SetConfig+0x7ae>
 80063a8:	2308      	movs	r3, #8
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ae:	e246      	b.n	800683e <UART_SetConfig+0x7ae>
 80063b0:	2310      	movs	r3, #16
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b6:	e242      	b.n	800683e <UART_SetConfig+0x7ae>
 80063b8:	cfff69f3 	.word	0xcfff69f3
 80063bc:	58000c00 	.word	0x58000c00
 80063c0:	11fff4ff 	.word	0x11fff4ff
 80063c4:	40011000 	.word	0x40011000
 80063c8:	58024400 	.word	0x58024400
 80063cc:	40004400 	.word	0x40004400
 80063d0:	40004800 	.word	0x40004800
 80063d4:	40004c00 	.word	0x40004c00
 80063d8:	40005000 	.word	0x40005000
 80063dc:	2320      	movs	r3, #32
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e2:	e22c      	b.n	800683e <UART_SetConfig+0x7ae>
 80063e4:	2340      	movs	r3, #64	@ 0x40
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ea:	e228      	b.n	800683e <UART_SetConfig+0x7ae>
 80063ec:	2380      	movs	r3, #128	@ 0x80
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f2:	e224      	b.n	800683e <UART_SetConfig+0x7ae>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4ab1      	ldr	r2, [pc, #708]	@ (80066c0 <UART_SetConfig+0x630>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d176      	bne.n	80064ec <UART_SetConfig+0x45c>
 80063fe:	4bb1      	ldr	r3, [pc, #708]	@ (80066c4 <UART_SetConfig+0x634>)
 8006400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006402:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006406:	2b28      	cmp	r3, #40	@ 0x28
 8006408:	d86c      	bhi.n	80064e4 <UART_SetConfig+0x454>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <UART_SetConfig+0x380>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	080064b5 	.word	0x080064b5
 8006414:	080064e5 	.word	0x080064e5
 8006418:	080064e5 	.word	0x080064e5
 800641c:	080064e5 	.word	0x080064e5
 8006420:	080064e5 	.word	0x080064e5
 8006424:	080064e5 	.word	0x080064e5
 8006428:	080064e5 	.word	0x080064e5
 800642c:	080064e5 	.word	0x080064e5
 8006430:	080064bd 	.word	0x080064bd
 8006434:	080064e5 	.word	0x080064e5
 8006438:	080064e5 	.word	0x080064e5
 800643c:	080064e5 	.word	0x080064e5
 8006440:	080064e5 	.word	0x080064e5
 8006444:	080064e5 	.word	0x080064e5
 8006448:	080064e5 	.word	0x080064e5
 800644c:	080064e5 	.word	0x080064e5
 8006450:	080064c5 	.word	0x080064c5
 8006454:	080064e5 	.word	0x080064e5
 8006458:	080064e5 	.word	0x080064e5
 800645c:	080064e5 	.word	0x080064e5
 8006460:	080064e5 	.word	0x080064e5
 8006464:	080064e5 	.word	0x080064e5
 8006468:	080064e5 	.word	0x080064e5
 800646c:	080064e5 	.word	0x080064e5
 8006470:	080064cd 	.word	0x080064cd
 8006474:	080064e5 	.word	0x080064e5
 8006478:	080064e5 	.word	0x080064e5
 800647c:	080064e5 	.word	0x080064e5
 8006480:	080064e5 	.word	0x080064e5
 8006484:	080064e5 	.word	0x080064e5
 8006488:	080064e5 	.word	0x080064e5
 800648c:	080064e5 	.word	0x080064e5
 8006490:	080064d5 	.word	0x080064d5
 8006494:	080064e5 	.word	0x080064e5
 8006498:	080064e5 	.word	0x080064e5
 800649c:	080064e5 	.word	0x080064e5
 80064a0:	080064e5 	.word	0x080064e5
 80064a4:	080064e5 	.word	0x080064e5
 80064a8:	080064e5 	.word	0x080064e5
 80064ac:	080064e5 	.word	0x080064e5
 80064b0:	080064dd 	.word	0x080064dd
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ba:	e1c0      	b.n	800683e <UART_SetConfig+0x7ae>
 80064bc:	2304      	movs	r3, #4
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c2:	e1bc      	b.n	800683e <UART_SetConfig+0x7ae>
 80064c4:	2308      	movs	r3, #8
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ca:	e1b8      	b.n	800683e <UART_SetConfig+0x7ae>
 80064cc:	2310      	movs	r3, #16
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d2:	e1b4      	b.n	800683e <UART_SetConfig+0x7ae>
 80064d4:	2320      	movs	r3, #32
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e1b0      	b.n	800683e <UART_SetConfig+0x7ae>
 80064dc:	2340      	movs	r3, #64	@ 0x40
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e1ac      	b.n	800683e <UART_SetConfig+0x7ae>
 80064e4:	2380      	movs	r3, #128	@ 0x80
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e1a8      	b.n	800683e <UART_SetConfig+0x7ae>
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a75      	ldr	r2, [pc, #468]	@ (80066c8 <UART_SetConfig+0x638>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d130      	bne.n	8006558 <UART_SetConfig+0x4c8>
 80064f6:	4b73      	ldr	r3, [pc, #460]	@ (80066c4 <UART_SetConfig+0x634>)
 80064f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	2b05      	cmp	r3, #5
 8006500:	d826      	bhi.n	8006550 <UART_SetConfig+0x4c0>
 8006502:	a201      	add	r2, pc, #4	@ (adr r2, 8006508 <UART_SetConfig+0x478>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	08006521 	.word	0x08006521
 800650c:	08006529 	.word	0x08006529
 8006510:	08006531 	.word	0x08006531
 8006514:	08006539 	.word	0x08006539
 8006518:	08006541 	.word	0x08006541
 800651c:	08006549 	.word	0x08006549
 8006520:	2300      	movs	r3, #0
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006526:	e18a      	b.n	800683e <UART_SetConfig+0x7ae>
 8006528:	2304      	movs	r3, #4
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652e:	e186      	b.n	800683e <UART_SetConfig+0x7ae>
 8006530:	2308      	movs	r3, #8
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006536:	e182      	b.n	800683e <UART_SetConfig+0x7ae>
 8006538:	2310      	movs	r3, #16
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653e:	e17e      	b.n	800683e <UART_SetConfig+0x7ae>
 8006540:	2320      	movs	r3, #32
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e17a      	b.n	800683e <UART_SetConfig+0x7ae>
 8006548:	2340      	movs	r3, #64	@ 0x40
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e176      	b.n	800683e <UART_SetConfig+0x7ae>
 8006550:	2380      	movs	r3, #128	@ 0x80
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e172      	b.n	800683e <UART_SetConfig+0x7ae>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a5b      	ldr	r2, [pc, #364]	@ (80066cc <UART_SetConfig+0x63c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d130      	bne.n	80065c4 <UART_SetConfig+0x534>
 8006562:	4b58      	ldr	r3, [pc, #352]	@ (80066c4 <UART_SetConfig+0x634>)
 8006564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	2b05      	cmp	r3, #5
 800656c:	d826      	bhi.n	80065bc <UART_SetConfig+0x52c>
 800656e:	a201      	add	r2, pc, #4	@ (adr r2, 8006574 <UART_SetConfig+0x4e4>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	0800658d 	.word	0x0800658d
 8006578:	08006595 	.word	0x08006595
 800657c:	0800659d 	.word	0x0800659d
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065b5 	.word	0x080065b5
 800658c:	2300      	movs	r3, #0
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006592:	e154      	b.n	800683e <UART_SetConfig+0x7ae>
 8006594:	2304      	movs	r3, #4
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659a:	e150      	b.n	800683e <UART_SetConfig+0x7ae>
 800659c:	2308      	movs	r3, #8
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a2:	e14c      	b.n	800683e <UART_SetConfig+0x7ae>
 80065a4:	2310      	movs	r3, #16
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e148      	b.n	800683e <UART_SetConfig+0x7ae>
 80065ac:	2320      	movs	r3, #32
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e144      	b.n	800683e <UART_SetConfig+0x7ae>
 80065b4:	2340      	movs	r3, #64	@ 0x40
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e140      	b.n	800683e <UART_SetConfig+0x7ae>
 80065bc:	2380      	movs	r3, #128	@ 0x80
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c2:	e13c      	b.n	800683e <UART_SetConfig+0x7ae>
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a41      	ldr	r2, [pc, #260]	@ (80066d0 <UART_SetConfig+0x640>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	f040 8082 	bne.w	80066d4 <UART_SetConfig+0x644>
 80065d0:	4b3c      	ldr	r3, [pc, #240]	@ (80066c4 <UART_SetConfig+0x634>)
 80065d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065d8:	2b28      	cmp	r3, #40	@ 0x28
 80065da:	d86d      	bhi.n	80066b8 <UART_SetConfig+0x628>
 80065dc:	a201      	add	r2, pc, #4	@ (adr r2, 80065e4 <UART_SetConfig+0x554>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	08006689 	.word	0x08006689
 80065e8:	080066b9 	.word	0x080066b9
 80065ec:	080066b9 	.word	0x080066b9
 80065f0:	080066b9 	.word	0x080066b9
 80065f4:	080066b9 	.word	0x080066b9
 80065f8:	080066b9 	.word	0x080066b9
 80065fc:	080066b9 	.word	0x080066b9
 8006600:	080066b9 	.word	0x080066b9
 8006604:	08006691 	.word	0x08006691
 8006608:	080066b9 	.word	0x080066b9
 800660c:	080066b9 	.word	0x080066b9
 8006610:	080066b9 	.word	0x080066b9
 8006614:	080066b9 	.word	0x080066b9
 8006618:	080066b9 	.word	0x080066b9
 800661c:	080066b9 	.word	0x080066b9
 8006620:	080066b9 	.word	0x080066b9
 8006624:	08006699 	.word	0x08006699
 8006628:	080066b9 	.word	0x080066b9
 800662c:	080066b9 	.word	0x080066b9
 8006630:	080066b9 	.word	0x080066b9
 8006634:	080066b9 	.word	0x080066b9
 8006638:	080066b9 	.word	0x080066b9
 800663c:	080066b9 	.word	0x080066b9
 8006640:	080066b9 	.word	0x080066b9
 8006644:	080066a1 	.word	0x080066a1
 8006648:	080066b9 	.word	0x080066b9
 800664c:	080066b9 	.word	0x080066b9
 8006650:	080066b9 	.word	0x080066b9
 8006654:	080066b9 	.word	0x080066b9
 8006658:	080066b9 	.word	0x080066b9
 800665c:	080066b9 	.word	0x080066b9
 8006660:	080066b9 	.word	0x080066b9
 8006664:	080066a9 	.word	0x080066a9
 8006668:	080066b9 	.word	0x080066b9
 800666c:	080066b9 	.word	0x080066b9
 8006670:	080066b9 	.word	0x080066b9
 8006674:	080066b9 	.word	0x080066b9
 8006678:	080066b9 	.word	0x080066b9
 800667c:	080066b9 	.word	0x080066b9
 8006680:	080066b9 	.word	0x080066b9
 8006684:	080066b1 	.word	0x080066b1
 8006688:	2301      	movs	r3, #1
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668e:	e0d6      	b.n	800683e <UART_SetConfig+0x7ae>
 8006690:	2304      	movs	r3, #4
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006696:	e0d2      	b.n	800683e <UART_SetConfig+0x7ae>
 8006698:	2308      	movs	r3, #8
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669e:	e0ce      	b.n	800683e <UART_SetConfig+0x7ae>
 80066a0:	2310      	movs	r3, #16
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a6:	e0ca      	b.n	800683e <UART_SetConfig+0x7ae>
 80066a8:	2320      	movs	r3, #32
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ae:	e0c6      	b.n	800683e <UART_SetConfig+0x7ae>
 80066b0:	2340      	movs	r3, #64	@ 0x40
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b6:	e0c2      	b.n	800683e <UART_SetConfig+0x7ae>
 80066b8:	2380      	movs	r3, #128	@ 0x80
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066be:	e0be      	b.n	800683e <UART_SetConfig+0x7ae>
 80066c0:	40011400 	.word	0x40011400
 80066c4:	58024400 	.word	0x58024400
 80066c8:	40007800 	.word	0x40007800
 80066cc:	40007c00 	.word	0x40007c00
 80066d0:	40011800 	.word	0x40011800
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4aad      	ldr	r2, [pc, #692]	@ (8006990 <UART_SetConfig+0x900>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d176      	bne.n	80067cc <UART_SetConfig+0x73c>
 80066de:	4bad      	ldr	r3, [pc, #692]	@ (8006994 <UART_SetConfig+0x904>)
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066e6:	2b28      	cmp	r3, #40	@ 0x28
 80066e8:	d86c      	bhi.n	80067c4 <UART_SetConfig+0x734>
 80066ea:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <UART_SetConfig+0x660>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006795 	.word	0x08006795
 80066f4:	080067c5 	.word	0x080067c5
 80066f8:	080067c5 	.word	0x080067c5
 80066fc:	080067c5 	.word	0x080067c5
 8006700:	080067c5 	.word	0x080067c5
 8006704:	080067c5 	.word	0x080067c5
 8006708:	080067c5 	.word	0x080067c5
 800670c:	080067c5 	.word	0x080067c5
 8006710:	0800679d 	.word	0x0800679d
 8006714:	080067c5 	.word	0x080067c5
 8006718:	080067c5 	.word	0x080067c5
 800671c:	080067c5 	.word	0x080067c5
 8006720:	080067c5 	.word	0x080067c5
 8006724:	080067c5 	.word	0x080067c5
 8006728:	080067c5 	.word	0x080067c5
 800672c:	080067c5 	.word	0x080067c5
 8006730:	080067a5 	.word	0x080067a5
 8006734:	080067c5 	.word	0x080067c5
 8006738:	080067c5 	.word	0x080067c5
 800673c:	080067c5 	.word	0x080067c5
 8006740:	080067c5 	.word	0x080067c5
 8006744:	080067c5 	.word	0x080067c5
 8006748:	080067c5 	.word	0x080067c5
 800674c:	080067c5 	.word	0x080067c5
 8006750:	080067ad 	.word	0x080067ad
 8006754:	080067c5 	.word	0x080067c5
 8006758:	080067c5 	.word	0x080067c5
 800675c:	080067c5 	.word	0x080067c5
 8006760:	080067c5 	.word	0x080067c5
 8006764:	080067c5 	.word	0x080067c5
 8006768:	080067c5 	.word	0x080067c5
 800676c:	080067c5 	.word	0x080067c5
 8006770:	080067b5 	.word	0x080067b5
 8006774:	080067c5 	.word	0x080067c5
 8006778:	080067c5 	.word	0x080067c5
 800677c:	080067c5 	.word	0x080067c5
 8006780:	080067c5 	.word	0x080067c5
 8006784:	080067c5 	.word	0x080067c5
 8006788:	080067c5 	.word	0x080067c5
 800678c:	080067c5 	.word	0x080067c5
 8006790:	080067bd 	.word	0x080067bd
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e050      	b.n	800683e <UART_SetConfig+0x7ae>
 800679c:	2304      	movs	r3, #4
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e04c      	b.n	800683e <UART_SetConfig+0x7ae>
 80067a4:	2308      	movs	r3, #8
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e048      	b.n	800683e <UART_SetConfig+0x7ae>
 80067ac:	2310      	movs	r3, #16
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b2:	e044      	b.n	800683e <UART_SetConfig+0x7ae>
 80067b4:	2320      	movs	r3, #32
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e040      	b.n	800683e <UART_SetConfig+0x7ae>
 80067bc:	2340      	movs	r3, #64	@ 0x40
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e03c      	b.n	800683e <UART_SetConfig+0x7ae>
 80067c4:	2380      	movs	r3, #128	@ 0x80
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e038      	b.n	800683e <UART_SetConfig+0x7ae>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a71      	ldr	r2, [pc, #452]	@ (8006998 <UART_SetConfig+0x908>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d130      	bne.n	8006838 <UART_SetConfig+0x7a8>
 80067d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006994 <UART_SetConfig+0x904>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d826      	bhi.n	8006830 <UART_SetConfig+0x7a0>
 80067e2:	a201      	add	r2, pc, #4	@ (adr r2, 80067e8 <UART_SetConfig+0x758>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	08006801 	.word	0x08006801
 80067ec:	08006809 	.word	0x08006809
 80067f0:	08006811 	.word	0x08006811
 80067f4:	08006819 	.word	0x08006819
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006829 	.word	0x08006829
 8006800:	2302      	movs	r3, #2
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e01a      	b.n	800683e <UART_SetConfig+0x7ae>
 8006808:	2304      	movs	r3, #4
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e016      	b.n	800683e <UART_SetConfig+0x7ae>
 8006810:	2308      	movs	r3, #8
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e012      	b.n	800683e <UART_SetConfig+0x7ae>
 8006818:	2310      	movs	r3, #16
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681e:	e00e      	b.n	800683e <UART_SetConfig+0x7ae>
 8006820:	2320      	movs	r3, #32
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006826:	e00a      	b.n	800683e <UART_SetConfig+0x7ae>
 8006828:	2340      	movs	r3, #64	@ 0x40
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682e:	e006      	b.n	800683e <UART_SetConfig+0x7ae>
 8006830:	2380      	movs	r3, #128	@ 0x80
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006836:	e002      	b.n	800683e <UART_SetConfig+0x7ae>
 8006838:	2380      	movs	r3, #128	@ 0x80
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a55      	ldr	r2, [pc, #340]	@ (8006998 <UART_SetConfig+0x908>)
 8006844:	4293      	cmp	r3, r2
 8006846:	f040 80f8 	bne.w	8006a3a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800684a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800684e:	2b20      	cmp	r3, #32
 8006850:	dc46      	bgt.n	80068e0 <UART_SetConfig+0x850>
 8006852:	2b02      	cmp	r3, #2
 8006854:	db75      	blt.n	8006942 <UART_SetConfig+0x8b2>
 8006856:	3b02      	subs	r3, #2
 8006858:	2b1e      	cmp	r3, #30
 800685a:	d872      	bhi.n	8006942 <UART_SetConfig+0x8b2>
 800685c:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <UART_SetConfig+0x7d4>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	080068e7 	.word	0x080068e7
 8006868:	08006943 	.word	0x08006943
 800686c:	080068ef 	.word	0x080068ef
 8006870:	08006943 	.word	0x08006943
 8006874:	08006943 	.word	0x08006943
 8006878:	08006943 	.word	0x08006943
 800687c:	080068ff 	.word	0x080068ff
 8006880:	08006943 	.word	0x08006943
 8006884:	08006943 	.word	0x08006943
 8006888:	08006943 	.word	0x08006943
 800688c:	08006943 	.word	0x08006943
 8006890:	08006943 	.word	0x08006943
 8006894:	08006943 	.word	0x08006943
 8006898:	08006943 	.word	0x08006943
 800689c:	0800690f 	.word	0x0800690f
 80068a0:	08006943 	.word	0x08006943
 80068a4:	08006943 	.word	0x08006943
 80068a8:	08006943 	.word	0x08006943
 80068ac:	08006943 	.word	0x08006943
 80068b0:	08006943 	.word	0x08006943
 80068b4:	08006943 	.word	0x08006943
 80068b8:	08006943 	.word	0x08006943
 80068bc:	08006943 	.word	0x08006943
 80068c0:	08006943 	.word	0x08006943
 80068c4:	08006943 	.word	0x08006943
 80068c8:	08006943 	.word	0x08006943
 80068cc:	08006943 	.word	0x08006943
 80068d0:	08006943 	.word	0x08006943
 80068d4:	08006943 	.word	0x08006943
 80068d8:	08006943 	.word	0x08006943
 80068dc:	08006935 	.word	0x08006935
 80068e0:	2b40      	cmp	r3, #64	@ 0x40
 80068e2:	d02a      	beq.n	800693a <UART_SetConfig+0x8aa>
 80068e4:	e02d      	b.n	8006942 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068e6:	f7fe fed3 	bl	8005690 <HAL_RCCEx_GetD3PCLK1Freq>
 80068ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068ec:	e02f      	b.n	800694e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fee2 	bl	80056bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068fc:	e027      	b.n	800694e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068fe:	f107 0318 	add.w	r3, r7, #24
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff f82e 	bl	8005964 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690c:	e01f      	b.n	800694e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800690e:	4b21      	ldr	r3, [pc, #132]	@ (8006994 <UART_SetConfig+0x904>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800691a:	4b1e      	ldr	r3, [pc, #120]	@ (8006994 <UART_SetConfig+0x904>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	08db      	lsrs	r3, r3, #3
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	4a1d      	ldr	r2, [pc, #116]	@ (800699c <UART_SetConfig+0x90c>)
 8006926:	fa22 f303 	lsr.w	r3, r2, r3
 800692a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800692c:	e00f      	b.n	800694e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800692e:	4b1b      	ldr	r3, [pc, #108]	@ (800699c <UART_SetConfig+0x90c>)
 8006930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006932:	e00c      	b.n	800694e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006934:	4b1a      	ldr	r3, [pc, #104]	@ (80069a0 <UART_SetConfig+0x910>)
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006938:	e009      	b.n	800694e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800693a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006940:	e005      	b.n	800694e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800694c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800694e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 81ee 	beq.w	8006d32 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695a:	4a12      	ldr	r2, [pc, #72]	@ (80069a4 <UART_SetConfig+0x914>)
 800695c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006960:	461a      	mov	r2, r3
 8006962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006964:	fbb3 f3f2 	udiv	r3, r3, r2
 8006968:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	4413      	add	r3, r2
 8006974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006976:	429a      	cmp	r2, r3
 8006978:	d305      	bcc.n	8006986 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006982:	429a      	cmp	r2, r3
 8006984:	d910      	bls.n	80069a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800698c:	e1d1      	b.n	8006d32 <UART_SetConfig+0xca2>
 800698e:	bf00      	nop
 8006990:	40011c00 	.word	0x40011c00
 8006994:	58024400 	.word	0x58024400
 8006998:	58000c00 	.word	0x58000c00
 800699c:	03d09000 	.word	0x03d09000
 80069a0:	003d0900 	.word	0x003d0900
 80069a4:	0800b938 	.word	0x0800b938
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069aa:	2200      	movs	r2, #0
 80069ac:	60bb      	str	r3, [r7, #8]
 80069ae:	60fa      	str	r2, [r7, #12]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	4ac0      	ldr	r2, [pc, #768]	@ (8006cb8 <UART_SetConfig+0xc28>)
 80069b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2200      	movs	r2, #0
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069ca:	f7f9 fcf9 	bl	80003c0 <__aeabi_uldivmod>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4610      	mov	r0, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	020b      	lsls	r3, r1, #8
 80069e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069e4:	0202      	lsls	r2, r0, #8
 80069e6:	6979      	ldr	r1, [r7, #20]
 80069e8:	6849      	ldr	r1, [r1, #4]
 80069ea:	0849      	lsrs	r1, r1, #1
 80069ec:	2000      	movs	r0, #0
 80069ee:	460c      	mov	r4, r1
 80069f0:	4605      	mov	r5, r0
 80069f2:	eb12 0804 	adds.w	r8, r2, r4
 80069f6:	eb43 0905 	adc.w	r9, r3, r5
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	469a      	mov	sl, r3
 8006a02:	4693      	mov	fp, r2
 8006a04:	4652      	mov	r2, sl
 8006a06:	465b      	mov	r3, fp
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	f7f9 fcd8 	bl	80003c0 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4613      	mov	r3, r2
 8006a16:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a1e:	d308      	bcc.n	8006a32 <UART_SetConfig+0x9a2>
 8006a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a26:	d204      	bcs.n	8006a32 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	e17f      	b.n	8006d32 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a38:	e17b      	b.n	8006d32 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a42:	f040 80bd 	bne.w	8006bc0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006a46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	dc48      	bgt.n	8006ae0 <UART_SetConfig+0xa50>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	db7b      	blt.n	8006b4a <UART_SetConfig+0xaba>
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d879      	bhi.n	8006b4a <UART_SetConfig+0xaba>
 8006a56:	a201      	add	r2, pc, #4	@ (adr r2, 8006a5c <UART_SetConfig+0x9cc>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006ae7 	.word	0x08006ae7
 8006a60:	08006aef 	.word	0x08006aef
 8006a64:	08006b4b 	.word	0x08006b4b
 8006a68:	08006b4b 	.word	0x08006b4b
 8006a6c:	08006af7 	.word	0x08006af7
 8006a70:	08006b4b 	.word	0x08006b4b
 8006a74:	08006b4b 	.word	0x08006b4b
 8006a78:	08006b4b 	.word	0x08006b4b
 8006a7c:	08006b07 	.word	0x08006b07
 8006a80:	08006b4b 	.word	0x08006b4b
 8006a84:	08006b4b 	.word	0x08006b4b
 8006a88:	08006b4b 	.word	0x08006b4b
 8006a8c:	08006b4b 	.word	0x08006b4b
 8006a90:	08006b4b 	.word	0x08006b4b
 8006a94:	08006b4b 	.word	0x08006b4b
 8006a98:	08006b4b 	.word	0x08006b4b
 8006a9c:	08006b17 	.word	0x08006b17
 8006aa0:	08006b4b 	.word	0x08006b4b
 8006aa4:	08006b4b 	.word	0x08006b4b
 8006aa8:	08006b4b 	.word	0x08006b4b
 8006aac:	08006b4b 	.word	0x08006b4b
 8006ab0:	08006b4b 	.word	0x08006b4b
 8006ab4:	08006b4b 	.word	0x08006b4b
 8006ab8:	08006b4b 	.word	0x08006b4b
 8006abc:	08006b4b 	.word	0x08006b4b
 8006ac0:	08006b4b 	.word	0x08006b4b
 8006ac4:	08006b4b 	.word	0x08006b4b
 8006ac8:	08006b4b 	.word	0x08006b4b
 8006acc:	08006b4b 	.word	0x08006b4b
 8006ad0:	08006b4b 	.word	0x08006b4b
 8006ad4:	08006b4b 	.word	0x08006b4b
 8006ad8:	08006b4b 	.word	0x08006b4b
 8006adc:	08006b3d 	.word	0x08006b3d
 8006ae0:	2b40      	cmp	r3, #64	@ 0x40
 8006ae2:	d02e      	beq.n	8006b42 <UART_SetConfig+0xab2>
 8006ae4:	e031      	b.n	8006b4a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae6:	f7fd fc07 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8006aea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006aec:	e033      	b.n	8006b56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aee:	f7fd fc19 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 8006af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006af4:	e02f      	b.n	8006b56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fdde 	bl	80056bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b04:	e027      	b.n	8006b56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b06:	f107 0318 	add.w	r3, r7, #24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe ff2a 	bl	8005964 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b14:	e01f      	b.n	8006b56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b16:	4b69      	ldr	r3, [pc, #420]	@ (8006cbc <UART_SetConfig+0xc2c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b22:	4b66      	ldr	r3, [pc, #408]	@ (8006cbc <UART_SetConfig+0xc2c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	08db      	lsrs	r3, r3, #3
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	4a64      	ldr	r2, [pc, #400]	@ (8006cc0 <UART_SetConfig+0xc30>)
 8006b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b34:	e00f      	b.n	8006b56 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006b36:	4b62      	ldr	r3, [pc, #392]	@ (8006cc0 <UART_SetConfig+0xc30>)
 8006b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3a:	e00c      	b.n	8006b56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b3c:	4b61      	ldr	r3, [pc, #388]	@ (8006cc4 <UART_SetConfig+0xc34>)
 8006b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b40:	e009      	b.n	8006b56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b48:	e005      	b.n	8006b56 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80ea 	beq.w	8006d32 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	4a55      	ldr	r2, [pc, #340]	@ (8006cb8 <UART_SetConfig+0xc28>)
 8006b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b70:	005a      	lsls	r2, r3, #1
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	441a      	add	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	d916      	bls.n	8006bb8 <UART_SetConfig+0xb28>
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b90:	d212      	bcs.n	8006bb8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	f023 030f 	bic.w	r3, r3, #15
 8006b9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9e:	085b      	lsrs	r3, r3, #1
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006baa:	4313      	orrs	r3, r2
 8006bac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006bb4:	60da      	str	r2, [r3, #12]
 8006bb6:	e0bc      	b.n	8006d32 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bbe:	e0b8      	b.n	8006d32 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bc0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	dc4b      	bgt.n	8006c60 <UART_SetConfig+0xbd0>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f2c0 8087 	blt.w	8006cdc <UART_SetConfig+0xc4c>
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	f200 8084 	bhi.w	8006cdc <UART_SetConfig+0xc4c>
 8006bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <UART_SetConfig+0xb4c>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c67 	.word	0x08006c67
 8006be0:	08006c6f 	.word	0x08006c6f
 8006be4:	08006cdd 	.word	0x08006cdd
 8006be8:	08006cdd 	.word	0x08006cdd
 8006bec:	08006c77 	.word	0x08006c77
 8006bf0:	08006cdd 	.word	0x08006cdd
 8006bf4:	08006cdd 	.word	0x08006cdd
 8006bf8:	08006cdd 	.word	0x08006cdd
 8006bfc:	08006c87 	.word	0x08006c87
 8006c00:	08006cdd 	.word	0x08006cdd
 8006c04:	08006cdd 	.word	0x08006cdd
 8006c08:	08006cdd 	.word	0x08006cdd
 8006c0c:	08006cdd 	.word	0x08006cdd
 8006c10:	08006cdd 	.word	0x08006cdd
 8006c14:	08006cdd 	.word	0x08006cdd
 8006c18:	08006cdd 	.word	0x08006cdd
 8006c1c:	08006c97 	.word	0x08006c97
 8006c20:	08006cdd 	.word	0x08006cdd
 8006c24:	08006cdd 	.word	0x08006cdd
 8006c28:	08006cdd 	.word	0x08006cdd
 8006c2c:	08006cdd 	.word	0x08006cdd
 8006c30:	08006cdd 	.word	0x08006cdd
 8006c34:	08006cdd 	.word	0x08006cdd
 8006c38:	08006cdd 	.word	0x08006cdd
 8006c3c:	08006cdd 	.word	0x08006cdd
 8006c40:	08006cdd 	.word	0x08006cdd
 8006c44:	08006cdd 	.word	0x08006cdd
 8006c48:	08006cdd 	.word	0x08006cdd
 8006c4c:	08006cdd 	.word	0x08006cdd
 8006c50:	08006cdd 	.word	0x08006cdd
 8006c54:	08006cdd 	.word	0x08006cdd
 8006c58:	08006cdd 	.word	0x08006cdd
 8006c5c:	08006ccf 	.word	0x08006ccf
 8006c60:	2b40      	cmp	r3, #64	@ 0x40
 8006c62:	d037      	beq.n	8006cd4 <UART_SetConfig+0xc44>
 8006c64:	e03a      	b.n	8006cdc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c66:	f7fd fb47 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8006c6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c6c:	e03c      	b.n	8006ce8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c6e:	f7fd fb59 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 8006c72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c74:	e038      	b.n	8006ce8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fd1e 	bl	80056bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c84:	e030      	b.n	8006ce8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c86:	f107 0318 	add.w	r3, r7, #24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fe6a 	bl	8005964 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c94:	e028      	b.n	8006ce8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c96:	4b09      	ldr	r3, [pc, #36]	@ (8006cbc <UART_SetConfig+0xc2c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d012      	beq.n	8006cc8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ca2:	4b06      	ldr	r3, [pc, #24]	@ (8006cbc <UART_SetConfig+0xc2c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	08db      	lsrs	r3, r3, #3
 8006ca8:	f003 0303 	and.w	r3, r3, #3
 8006cac:	4a04      	ldr	r2, [pc, #16]	@ (8006cc0 <UART_SetConfig+0xc30>)
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cb4:	e018      	b.n	8006ce8 <UART_SetConfig+0xc58>
 8006cb6:	bf00      	nop
 8006cb8:	0800b938 	.word	0x0800b938
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	03d09000 	.word	0x03d09000
 8006cc4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006cc8:	4b24      	ldr	r3, [pc, #144]	@ (8006d5c <UART_SetConfig+0xccc>)
 8006cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ccc:	e00c      	b.n	8006ce8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cce:	4b24      	ldr	r3, [pc, #144]	@ (8006d60 <UART_SetConfig+0xcd0>)
 8006cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd2:	e009      	b.n	8006ce8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cda:	e005      	b.n	8006ce8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ce6:	bf00      	nop
    }

    if (pclk != 0U)
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d021      	beq.n	8006d32 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <UART_SetConfig+0xcd4>)
 8006cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	085b      	lsrs	r3, r3, #1
 8006d06:	441a      	add	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d10:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d14:	2b0f      	cmp	r3, #15
 8006d16:	d909      	bls.n	8006d2c <UART_SetConfig+0xc9c>
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1e:	d205      	bcs.n	8006d2c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60da      	str	r2, [r3, #12]
 8006d2a:	e002      	b.n	8006d32 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2200      	movs	r2, #0
 8006d46:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d4e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3748      	adds	r7, #72	@ 0x48
 8006d56:	46bd      	mov	sp, r7
 8006d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d5c:	03d09000 	.word	0x03d09000
 8006d60:	003d0900 	.word	0x003d0900
 8006d64:	0800b938 	.word	0x0800b938

08006d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e66:	d10a      	bne.n	8006e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b098      	sub	sp, #96	@ 0x60
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ebc:	f7fa fc98 	bl	80017f0 <HAL_GetTick>
 8006ec0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d12f      	bne.n	8006f30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f88e 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d022      	beq.n	8006f30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e063      	b.n	8006ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d149      	bne.n	8006fd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f46:	2200      	movs	r2, #0
 8006f48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f857 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d03c      	beq.n	8006fd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	623b      	str	r3, [r7, #32]
   return(result);
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e6      	bne.n	8006f58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3308      	adds	r3, #8
 8006f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f023 0301 	bic.w	r3, r3, #1
 8006fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006faa:	61fa      	str	r2, [r7, #28]
 8006fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	69b9      	ldr	r1, [r7, #24]
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e5      	bne.n	8006f8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e012      	b.n	8006ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3758      	adds	r7, #88	@ 0x58
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007010:	e04f      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d04b      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701a:	f7fa fbe9 	bl	80017f0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <UART_WaitOnFlagUntilTimeout+0x30>
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e04e      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d037      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b80      	cmp	r3, #128	@ 0x80
 8007046:	d034      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d031      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d110      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2208      	movs	r2, #8
 8007062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f839 	bl	80070dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2208      	movs	r2, #8
 800706e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e029      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708c:	d111      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f81f 	bl	80070dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e00f      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4013      	ands	r3, r2
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	bf0c      	ite	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	2300      	movne	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d0a0      	beq.n	8007012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b095      	sub	sp, #84	@ 0x54
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007102:	643b      	str	r3, [r7, #64]	@ 0x40
 8007104:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e6      	bne.n	80070e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3308      	adds	r3, #8
 800711c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	61fb      	str	r3, [r7, #28]
   return(result);
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	4b1e      	ldr	r3, [pc, #120]	@ (80071a4 <UART_EndRxTransfer+0xc8>)
 800712a:	4013      	ands	r3, r2
 800712c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007138:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800713c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e5      	bne.n	8007116 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800714e:	2b01      	cmp	r3, #1
 8007150:	d118      	bne.n	8007184 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f023 0310 	bic.w	r3, r3, #16
 8007166:	647b      	str	r3, [r7, #68]	@ 0x44
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6979      	ldr	r1, [r7, #20]
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	613b      	str	r3, [r7, #16]
   return(result);
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e6      	bne.n	8007152 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007198:	bf00      	nop
 800719a:	3754      	adds	r7, #84	@ 0x54
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	effffffe 	.word	0xeffffffe

080071a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_UARTEx_DisableFifoMode+0x16>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e027      	b.n	800720e <HAL_UARTEx_DisableFifoMode+0x66>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2224      	movs	r2, #36	@ 0x24
 80071ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0201 	bic.w	r2, r2, #1
 80071e4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800722e:	2302      	movs	r3, #2
 8007230:	e02d      	b.n	800728e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2224      	movs	r2, #36	@ 0x24
 800723e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0201 	bic.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f850 	bl	8007314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072aa:	2302      	movs	r3, #2
 80072ac:	e02d      	b.n	800730a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2224      	movs	r2, #36	@ 0x24
 80072ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0201 	bic.w	r2, r2, #1
 80072d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f812 	bl	8007314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007320:	2b00      	cmp	r3, #0
 8007322:	d108      	bne.n	8007336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007334:	e031      	b.n	800739a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007336:	2310      	movs	r3, #16
 8007338:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800733a:	2310      	movs	r3, #16
 800733c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	0e5b      	lsrs	r3, r3, #25
 8007346:	b2db      	uxtb	r3, r3
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	0f5b      	lsrs	r3, r3, #29
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	7b3a      	ldrb	r2, [r7, #12]
 8007362:	4911      	ldr	r1, [pc, #68]	@ (80073a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007364:	5c8a      	ldrb	r2, [r1, r2]
 8007366:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800736a:	7b3a      	ldrb	r2, [r7, #12]
 800736c:	490f      	ldr	r1, [pc, #60]	@ (80073ac <UARTEx_SetNbDataToProcess+0x98>)
 800736e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007370:	fb93 f3f2 	sdiv	r3, r3, r2
 8007374:	b29a      	uxth	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	7b7a      	ldrb	r2, [r7, #13]
 8007380:	4909      	ldr	r1, [pc, #36]	@ (80073a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007382:	5c8a      	ldrb	r2, [r1, r2]
 8007384:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007388:	7b7a      	ldrb	r2, [r7, #13]
 800738a:	4908      	ldr	r1, [pc, #32]	@ (80073ac <UARTEx_SetNbDataToProcess+0x98>)
 800738c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800738e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007392:	b29a      	uxth	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	0800b950 	.word	0x0800b950
 80073ac:	0800b958 	.word	0x0800b958

080073b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073b0:	b084      	sub	sp, #16
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	f107 001c 	add.w	r0, r7, #28
 80073be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d121      	bne.n	800740e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	4b2c      	ldr	r3, [pc, #176]	@ (800748c <USB_CoreInit+0xdc>)
 80073dc:	4013      	ands	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d105      	bne.n	8007402 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 fafa 	bl	80089fc <USB_CoreReset>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
 800740c:	e01b      	b.n	8007446 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 faee 	bl	80089fc <USB_CoreReset>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007424:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007430:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	@ 0x38
 8007438:	e005      	b.n	8007446 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007446:	7fbb      	ldrb	r3, [r7, #30]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d116      	bne.n	800747a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007450:	b29a      	uxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800745a:	4b0d      	ldr	r3, [pc, #52]	@ (8007490 <USB_CoreInit+0xe0>)
 800745c:	4313      	orrs	r3, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f043 0206 	orr.w	r2, r3, #6
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f043 0220 	orr.w	r2, r3, #32
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007486:	b004      	add	sp, #16
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	ffbdffbf 	.word	0xffbdffbf
 8007490:	03ee0000 	.word	0x03ee0000

08007494 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	4613      	mov	r3, r2
 80074a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d165      	bne.n	8007574 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4a41      	ldr	r2, [pc, #260]	@ (80075b0 <USB_SetTurnaroundTime+0x11c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d906      	bls.n	80074be <USB_SetTurnaroundTime+0x2a>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4a40      	ldr	r2, [pc, #256]	@ (80075b4 <USB_SetTurnaroundTime+0x120>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d202      	bcs.n	80074be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80074b8:	230f      	movs	r3, #15
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e062      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	4a3c      	ldr	r2, [pc, #240]	@ (80075b4 <USB_SetTurnaroundTime+0x120>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d306      	bcc.n	80074d4 <USB_SetTurnaroundTime+0x40>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	4a3b      	ldr	r2, [pc, #236]	@ (80075b8 <USB_SetTurnaroundTime+0x124>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d202      	bcs.n	80074d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80074ce:	230e      	movs	r3, #14
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e057      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4a38      	ldr	r2, [pc, #224]	@ (80075b8 <USB_SetTurnaroundTime+0x124>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d306      	bcc.n	80074ea <USB_SetTurnaroundTime+0x56>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4a37      	ldr	r2, [pc, #220]	@ (80075bc <USB_SetTurnaroundTime+0x128>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d202      	bcs.n	80074ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80074e4:	230d      	movs	r3, #13
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	e04c      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4a33      	ldr	r2, [pc, #204]	@ (80075bc <USB_SetTurnaroundTime+0x128>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d306      	bcc.n	8007500 <USB_SetTurnaroundTime+0x6c>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	4a32      	ldr	r2, [pc, #200]	@ (80075c0 <USB_SetTurnaroundTime+0x12c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d802      	bhi.n	8007500 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80074fa:	230c      	movs	r3, #12
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	e041      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4a2f      	ldr	r2, [pc, #188]	@ (80075c0 <USB_SetTurnaroundTime+0x12c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d906      	bls.n	8007516 <USB_SetTurnaroundTime+0x82>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4a2e      	ldr	r2, [pc, #184]	@ (80075c4 <USB_SetTurnaroundTime+0x130>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d802      	bhi.n	8007516 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007510:	230b      	movs	r3, #11
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	e036      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4a2a      	ldr	r2, [pc, #168]	@ (80075c4 <USB_SetTurnaroundTime+0x130>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d906      	bls.n	800752c <USB_SetTurnaroundTime+0x98>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4a29      	ldr	r2, [pc, #164]	@ (80075c8 <USB_SetTurnaroundTime+0x134>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d802      	bhi.n	800752c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007526:	230a      	movs	r3, #10
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	e02b      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4a26      	ldr	r2, [pc, #152]	@ (80075c8 <USB_SetTurnaroundTime+0x134>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d906      	bls.n	8007542 <USB_SetTurnaroundTime+0xae>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	4a25      	ldr	r2, [pc, #148]	@ (80075cc <USB_SetTurnaroundTime+0x138>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d202      	bcs.n	8007542 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800753c:	2309      	movs	r3, #9
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e020      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a21      	ldr	r2, [pc, #132]	@ (80075cc <USB_SetTurnaroundTime+0x138>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d306      	bcc.n	8007558 <USB_SetTurnaroundTime+0xc4>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	4a20      	ldr	r2, [pc, #128]	@ (80075d0 <USB_SetTurnaroundTime+0x13c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d802      	bhi.n	8007558 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007552:	2308      	movs	r3, #8
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	e015      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a1d      	ldr	r2, [pc, #116]	@ (80075d0 <USB_SetTurnaroundTime+0x13c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d906      	bls.n	800756e <USB_SetTurnaroundTime+0xda>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4a1c      	ldr	r2, [pc, #112]	@ (80075d4 <USB_SetTurnaroundTime+0x140>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d202      	bcs.n	800756e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007568:	2307      	movs	r3, #7
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	e00a      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800756e:	2306      	movs	r3, #6
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	e007      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800757a:	2309      	movs	r3, #9
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	e001      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007580:	2309      	movs	r3, #9
 8007582:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	029b      	lsls	r3, r3, #10
 8007598:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800759c:	431a      	orrs	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	00d8acbf 	.word	0x00d8acbf
 80075b4:	00e4e1c0 	.word	0x00e4e1c0
 80075b8:	00f42400 	.word	0x00f42400
 80075bc:	01067380 	.word	0x01067380
 80075c0:	011a499f 	.word	0x011a499f
 80075c4:	01312cff 	.word	0x01312cff
 80075c8:	014ca43f 	.word	0x014ca43f
 80075cc:	016e3600 	.word	0x016e3600
 80075d0:	01a6ab1f 	.word	0x01a6ab1f
 80075d4:	01e84800 	.word	0x01e84800

080075d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f043 0201 	orr.w	r2, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f023 0201 	bic.w	r2, r3, #1
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d115      	bne.n	800766a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800764a:	200a      	movs	r0, #10
 800764c:	f7fa f8dc 	bl	8001808 <HAL_Delay>
      ms += 10U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	330a      	adds	r3, #10
 8007654:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f93f 	bl	80088da <USB_GetMode>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d01e      	beq.n	80076a0 <USB_SetCurrentMode+0x84>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2bc7      	cmp	r3, #199	@ 0xc7
 8007666:	d9f0      	bls.n	800764a <USB_SetCurrentMode+0x2e>
 8007668:	e01a      	b.n	80076a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d115      	bne.n	800769c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800767c:	200a      	movs	r0, #10
 800767e:	f7fa f8c3 	bl	8001808 <HAL_Delay>
      ms += 10U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	330a      	adds	r3, #10
 8007686:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 f926 	bl	80088da <USB_GetMode>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d005      	beq.n	80076a0 <USB_SetCurrentMode+0x84>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2bc7      	cmp	r3, #199	@ 0xc7
 8007698:	d9f0      	bls.n	800767c <USB_SetCurrentMode+0x60>
 800769a:	e001      	b.n	80076a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e005      	b.n	80076ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80076a4:	d101      	bne.n	80076aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e000      	b.n	80076ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076b4:	b084      	sub	sp, #16
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	e009      	b.n	80076e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	3340      	adds	r3, #64	@ 0x40
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	2200      	movs	r2, #0
 80076e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	3301      	adds	r3, #1
 80076e6:	613b      	str	r3, [r7, #16]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b0e      	cmp	r3, #14
 80076ec:	d9f2      	bls.n	80076d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d11c      	bne.n	8007730 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	e005      	b.n	800773c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007742:	461a      	mov	r2, r3
 8007744:	2300      	movs	r3, #0
 8007746:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007748:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800774c:	2b01      	cmp	r3, #1
 800774e:	d10d      	bne.n	800776c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007758:	2100      	movs	r1, #0
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f968 	bl	8007a30 <USB_SetDevSpeed>
 8007760:	e008      	b.n	8007774 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007762:	2101      	movs	r1, #1
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f963 	bl	8007a30 <USB_SetDevSpeed>
 800776a:	e003      	b.n	8007774 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800776c:	2103      	movs	r1, #3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f95e 	bl	8007a30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007774:	2110      	movs	r1, #16
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f8fa 	bl	8007970 <USB_FlushTxFifo>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f924 	bl	80079d4 <USB_FlushRxFifo>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800779c:	461a      	mov	r2, r3
 800779e:	2300      	movs	r3, #0
 80077a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077a8:	461a      	mov	r2, r3
 80077aa:	2300      	movs	r3, #0
 80077ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b4:	461a      	mov	r2, r3
 80077b6:	2300      	movs	r3, #0
 80077b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ba:	2300      	movs	r3, #0
 80077bc:	613b      	str	r3, [r7, #16]
 80077be:	e043      	b.n	8007848 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077d6:	d118      	bne.n	800780a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ea:	461a      	mov	r2, r3
 80077ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	e013      	b.n	800781c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007800:	461a      	mov	r2, r3
 8007802:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	e008      	b.n	800781c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007816:	461a      	mov	r2, r3
 8007818:	2300      	movs	r3, #0
 800781a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007828:	461a      	mov	r2, r3
 800782a:	2300      	movs	r3, #0
 800782c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783a:	461a      	mov	r2, r3
 800783c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007840:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3301      	adds	r3, #1
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800784c:	461a      	mov	r2, r3
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	4293      	cmp	r3, r2
 8007852:	d3b5      	bcc.n	80077c0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007854:	2300      	movs	r3, #0
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	e043      	b.n	80078e2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800786c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007870:	d118      	bne.n	80078a4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10a      	bne.n	800788e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007884:	461a      	mov	r2, r3
 8007886:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	e013      	b.n	80078b6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789a:	461a      	mov	r2, r3
 800789c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e008      	b.n	80078b6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b0:	461a      	mov	r2, r3
 80078b2:	2300      	movs	r3, #0
 80078b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c2:	461a      	mov	r2, r3
 80078c4:	2300      	movs	r3, #0
 80078c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d4:	461a      	mov	r2, r3
 80078d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	3301      	adds	r3, #1
 80078e0:	613b      	str	r3, [r7, #16]
 80078e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80078e6:	461a      	mov	r2, r3
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d3b5      	bcc.n	800785a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007900:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800790e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007910:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007914:	2b00      	cmp	r3, #0
 8007916:	d105      	bne.n	8007924 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	f043 0210 	orr.w	r2, r3, #16
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	4b0f      	ldr	r3, [pc, #60]	@ (8007968 <USB_DevInit+0x2b4>)
 800792a:	4313      	orrs	r3, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007930:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	f043 0208 	orr.w	r2, r3, #8
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007944:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007948:	2b01      	cmp	r3, #1
 800794a:	d105      	bne.n	8007958 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699a      	ldr	r2, [r3, #24]
 8007950:	4b06      	ldr	r3, [pc, #24]	@ (800796c <USB_DevInit+0x2b8>)
 8007952:	4313      	orrs	r3, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007958:	7dfb      	ldrb	r3, [r7, #23]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007964:	b004      	add	sp, #16
 8007966:	4770      	bx	lr
 8007968:	803c3800 	.word	0x803c3800
 800796c:	40000004 	.word	0x40000004

08007970 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800798a:	d901      	bls.n	8007990 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e01b      	b.n	80079c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	daf2      	bge.n	800797e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	019b      	lsls	r3, r3, #6
 80079a0:	f043 0220 	orr.w	r2, r3, #32
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079b4:	d901      	bls.n	80079ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e006      	b.n	80079c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	d0f0      	beq.n	80079a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079ec:	d901      	bls.n	80079f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e018      	b.n	8007a24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	daf2      	bge.n	80079e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2210      	movs	r2, #16
 8007a02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a10:	d901      	bls.n	8007a16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e006      	b.n	8007a24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b10      	cmp	r3, #16
 8007a20:	d0f0      	beq.n	8007a04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	68f9      	ldr	r1, [r7, #12]
 8007a4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a50:	4313      	orrs	r3, r2
 8007a52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b087      	sub	sp, #28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f003 0306 	and.w	r3, r3, #6
 8007a7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d102      	bne.n	8007a88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a82:	2300      	movs	r3, #0
 8007a84:	75fb      	strb	r3, [r7, #23]
 8007a86:	e00a      	b.n	8007a9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d002      	beq.n	8007a94 <USB_GetDevSpeed+0x32>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b06      	cmp	r3, #6
 8007a92:	d102      	bne.n	8007a9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007a94:	2302      	movs	r3, #2
 8007a96:	75fb      	strb	r3, [r7, #23]
 8007a98:	e001      	b.n	8007a9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007a9a:	230f      	movs	r3, #15
 8007a9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d139      	bne.n	8007b3c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ace:	69da      	ldr	r2, [r3, #28]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	2101      	movs	r1, #1
 8007ada:	fa01 f303 	lsl.w	r3, r1, r3
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	68f9      	ldr	r1, [r7, #12]
 8007ae2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d153      	bne.n	8007ba8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	791b      	ldrb	r3, [r3, #4]
 8007b1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	059b      	lsls	r3, r3, #22
 8007b22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	0159      	lsls	r1, r3, #5
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	440b      	add	r3, r1
 8007b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b32:	4619      	mov	r1, r3
 8007b34:	4b20      	ldr	r3, [pc, #128]	@ (8007bb8 <USB_ActivateEndpoint+0x10c>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	600b      	str	r3, [r1, #0]
 8007b3a:	e035      	b.n	8007ba8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b42:	69da      	ldr	r2, [r3, #28]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b52:	041b      	lsls	r3, r3, #16
 8007b54:	68f9      	ldr	r1, [r7, #12]
 8007b56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d119      	bne.n	8007ba8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	791b      	ldrb	r3, [r3, #4]
 8007b8e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b90:	430b      	orrs	r3, r1
 8007b92:	431a      	orrs	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	0159      	lsls	r1, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	440b      	add	r3, r1
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4b05      	ldr	r3, [pc, #20]	@ (8007bb8 <USB_ActivateEndpoint+0x10c>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	10008000 	.word	0x10008000

08007bbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	785b      	ldrb	r3, [r3, #1]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d161      	bne.n	8007c9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bee:	d11f      	bne.n	8007c30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	f003 030f 	and.w	r3, r3, #15
 8007c40:	2101      	movs	r1, #1
 8007c42:	fa01 f303 	lsl.w	r3, r1, r3
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	68f9      	ldr	r1, [r7, #12]
 8007c4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c50:	4013      	ands	r3, r2
 8007c52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c5a:	69da      	ldr	r2, [r3, #28]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 030f 	and.w	r3, r3, #15
 8007c64:	2101      	movs	r1, #1
 8007c66:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c74:	4013      	ands	r3, r2
 8007c76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	0159      	lsls	r1, r3, #5
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	440b      	add	r3, r1
 8007c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c92:	4619      	mov	r1, r3
 8007c94:	4b35      	ldr	r3, [pc, #212]	@ (8007d6c <USB_DeactivateEndpoint+0x1b0>)
 8007c96:	4013      	ands	r3, r2
 8007c98:	600b      	str	r3, [r1, #0]
 8007c9a:	e060      	b.n	8007d5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cb2:	d11f      	bne.n	8007cf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007cd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	0151      	lsls	r1, r2, #5
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	440a      	add	r2, r1
 8007cea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	2101      	movs	r1, #1
 8007d06:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0a:	041b      	lsls	r3, r3, #16
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	68f9      	ldr	r1, [r7, #12]
 8007d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d14:	4013      	ands	r3, r2
 8007d16:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d1e:	69da      	ldr	r2, [r3, #28]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	f003 030f 	and.w	r3, r3, #15
 8007d28:	2101      	movs	r1, #1
 8007d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2e:	041b      	lsls	r3, r3, #16
 8007d30:	43db      	mvns	r3, r3
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d38:	4013      	ands	r3, r2
 8007d3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	0159      	lsls	r1, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	440b      	add	r3, r1
 8007d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d56:	4619      	mov	r1, r3
 8007d58:	4b05      	ldr	r3, [pc, #20]	@ (8007d70 <USB_DeactivateEndpoint+0x1b4>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	ec337800 	.word	0xec337800
 8007d70:	eff37800 	.word	0xeff37800

08007d74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	@ 0x28
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	f040 8185 	bne.w	80080a0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d132      	bne.n	8007e04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	0159      	lsls	r1, r3, #5
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	440b      	add	r3, r1
 8007db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db8:	4619      	mov	r1, r3
 8007dba:	4ba7      	ldr	r3, [pc, #668]	@ (8008058 <USB_EPStartXfer+0x2e4>)
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	0151      	lsls	r1, r2, #5
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	440a      	add	r2, r1
 8007dd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	0159      	lsls	r1, r3, #5
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	440b      	add	r3, r1
 8007df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4b97      	ldr	r3, [pc, #604]	@ (800805c <USB_EPStartXfer+0x2e8>)
 8007dfe:	4013      	ands	r3, r2
 8007e00:	610b      	str	r3, [r1, #16]
 8007e02:	e097      	b.n	8007f34 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	0159      	lsls	r1, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	440b      	add	r3, r1
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4b8e      	ldr	r3, [pc, #568]	@ (800805c <USB_EPStartXfer+0x2e8>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	0159      	lsls	r1, r3, #5
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	440b      	add	r3, r1
 8007e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e40:	4619      	mov	r1, r3
 8007e42:	4b85      	ldr	r3, [pc, #532]	@ (8008058 <USB_EPStartXfer+0x2e4>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d11a      	bne.n	8007e84 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691a      	ldr	r2, [r3, #16]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d903      	bls.n	8007e62 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	0151      	lsls	r1, r2, #5
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	440a      	add	r2, r1
 8007e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e80:	6113      	str	r3, [r2, #16]
 8007e82:	e044      	b.n	8007f0e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	1e5a      	subs	r2, r3, #1
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e98:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	8afb      	ldrh	r3, [r7, #22]
 8007eaa:	04d9      	lsls	r1, r3, #19
 8007eac:	4b6c      	ldr	r3, [pc, #432]	@ (8008060 <USB_EPStartXfer+0x2ec>)
 8007eae:	400b      	ands	r3, r1
 8007eb0:	69b9      	ldr	r1, [r7, #24]
 8007eb2:	0148      	lsls	r0, r1, #5
 8007eb4:	69f9      	ldr	r1, [r7, #28]
 8007eb6:	4401      	add	r1, r0
 8007eb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	791b      	ldrb	r3, [r3, #4]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d122      	bne.n	8007f0e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ee2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007ee6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef4:	691a      	ldr	r2, [r3, #16]
 8007ef6:	8afb      	ldrh	r3, [r7, #22]
 8007ef8:	075b      	lsls	r3, r3, #29
 8007efa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007efe:	69b9      	ldr	r1, [r7, #24]
 8007f00:	0148      	lsls	r0, r1, #5
 8007f02:	69f9      	ldr	r1, [r7, #28]
 8007f04:	4401      	add	r1, r0
 8007f06:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f1a:	691a      	ldr	r2, [r3, #16]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f24:	69b9      	ldr	r1, [r7, #24]
 8007f26:	0148      	lsls	r0, r1, #5
 8007f28:	69f9      	ldr	r1, [r7, #28]
 8007f2a:	4401      	add	r1, r0
 8007f2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f30:	4313      	orrs	r3, r2
 8007f32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d14b      	bne.n	8007fd2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f4e:	461a      	mov	r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	791b      	ldrb	r3, [r3, #4]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d128      	bne.n	8007fb0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d110      	bne.n	8007f90 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e00f      	b.n	8007fb0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	e169      	b.n	80082a6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	0151      	lsls	r1, r2, #5
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	440a      	add	r2, r1
 8007fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ff0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d015      	beq.n	8008026 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 8151 	beq.w	80082a6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800800a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	2101      	movs	r1, #1
 8008016:	fa01 f303 	lsl.w	r3, r1, r3
 800801a:	69f9      	ldr	r1, [r7, #28]
 800801c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008020:	4313      	orrs	r3, r2
 8008022:	634b      	str	r3, [r1, #52]	@ 0x34
 8008024:	e13f      	b.n	80082a6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008032:	2b00      	cmp	r3, #0
 8008034:	d116      	bne.n	8008064 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008050:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	e015      	b.n	8008084 <USB_EPStartXfer+0x310>
 8008058:	e007ffff 	.word	0xe007ffff
 800805c:	fff80000 	.word	0xfff80000
 8008060:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	0151      	lsls	r1, r2, #5
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	440a      	add	r2, r1
 800807a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800807e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008082:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	68d9      	ldr	r1, [r3, #12]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	781a      	ldrb	r2, [r3, #0]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	b298      	uxth	r0, r3
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	4603      	mov	r3, r0
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 f9b9 	bl	8008410 <USB_WritePacket>
 800809e:	e102      	b.n	80082a6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	0159      	lsls	r1, r3, #5
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	440b      	add	r3, r1
 80080b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ba:	4619      	mov	r1, r3
 80080bc:	4b7c      	ldr	r3, [pc, #496]	@ (80082b0 <USB_EPStartXfer+0x53c>)
 80080be:	4013      	ands	r3, r2
 80080c0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	0159      	lsls	r1, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	440b      	add	r3, r1
 80080d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080dc:	4619      	mov	r1, r3
 80080de:	4b75      	ldr	r3, [pc, #468]	@ (80082b4 <USB_EPStartXfer+0x540>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d12f      	bne.n	800814a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008118:	69b9      	ldr	r1, [r7, #24]
 800811a:	0148      	lsls	r0, r1, #5
 800811c:	69f9      	ldr	r1, [r7, #28]
 800811e:	4401      	add	r1, r0
 8008120:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008124:	4313      	orrs	r3, r2
 8008126:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	0151      	lsls	r1, r2, #5
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	440a      	add	r2, r1
 800813e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008142:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008146:	6113      	str	r3, [r2, #16]
 8008148:	e05f      	b.n	800820a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d123      	bne.n	800819a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815e:	691a      	ldr	r2, [r3, #16]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008168:	69b9      	ldr	r1, [r7, #24]
 800816a:	0148      	lsls	r0, r1, #5
 800816c:	69f9      	ldr	r1, [r7, #28]
 800816e:	4401      	add	r1, r0
 8008170:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008174:	4313      	orrs	r3, r2
 8008176:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	0151      	lsls	r1, r2, #5
 800818a:	69fa      	ldr	r2, [r7, #28]
 800818c:	440a      	add	r2, r1
 800818e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008192:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008196:	6113      	str	r3, [r2, #16]
 8008198:	e037      	b.n	800820a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	691a      	ldr	r2, [r3, #16]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	4413      	add	r3, r2
 80081a4:	1e5a      	subs	r2, r3, #1
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	8afa      	ldrh	r2, [r7, #22]
 80081b6:	fb03 f202 	mul.w	r2, r3, r2
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	8afb      	ldrh	r3, [r7, #22]
 80081ce:	04d9      	lsls	r1, r3, #19
 80081d0:	4b39      	ldr	r3, [pc, #228]	@ (80082b8 <USB_EPStartXfer+0x544>)
 80081d2:	400b      	ands	r3, r1
 80081d4:	69b9      	ldr	r1, [r7, #24]
 80081d6:	0148      	lsls	r0, r1, #5
 80081d8:	69f9      	ldr	r1, [r7, #28]
 80081da:	4401      	add	r1, r0
 80081dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081e0:	4313      	orrs	r3, r2
 80081e2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f0:	691a      	ldr	r2, [r3, #16]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081fa:	69b9      	ldr	r1, [r7, #24]
 80081fc:	0148      	lsls	r0, r1, #5
 80081fe:	69f9      	ldr	r1, [r7, #28]
 8008200:	4401      	add	r1, r0
 8008202:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008206:	4313      	orrs	r3, r2
 8008208:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800820a:	79fb      	ldrb	r3, [r7, #7]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10d      	bne.n	800822c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	68d9      	ldr	r1, [r3, #12]
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008228:	460a      	mov	r2, r1
 800822a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	791b      	ldrb	r3, [r3, #4]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d128      	bne.n	8008286 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d110      	bne.n	8008266 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	69fa      	ldr	r2, [r7, #28]
 8008258:	440a      	add	r2, r1
 800825a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800825e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	e00f      	b.n	8008286 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	0151      	lsls	r1, r2, #5
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	440a      	add	r2, r1
 800827c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008284:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	440a      	add	r2, r1
 800829c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80082a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	fff80000 	.word	0xfff80000
 80082b4:	e007ffff 	.word	0xe007ffff
 80082b8:	1ff80000 	.word	0x1ff80000

080082bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	785b      	ldrb	r3, [r3, #1]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d14a      	bne.n	8008370 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082f2:	f040 8086 	bne.w	8008402 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	7812      	ldrb	r2, [r2, #0]
 800830a:	0151      	lsls	r1, r2, #5
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	440a      	add	r2, r1
 8008310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008314:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008318:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	7812      	ldrb	r2, [r2, #0]
 800832e:	0151      	lsls	r1, r2, #5
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	440a      	add	r2, r1
 8008334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008338:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800833c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3301      	adds	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f242 7210 	movw	r2, #10000	@ 0x2710
 800834a:	4293      	cmp	r3, r2
 800834c:	d902      	bls.n	8008354 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	75fb      	strb	r3, [r7, #23]
          break;
 8008352:	e056      	b.n	8008402 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800836c:	d0e7      	beq.n	800833e <USB_EPStopXfer+0x82>
 800836e:	e048      	b.n	8008402 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008384:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008388:	d13b      	bne.n	8008402 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	7812      	ldrb	r2, [r2, #0]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80083ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	7812      	ldrb	r2, [r2, #0]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3301      	adds	r3, #1
 80083d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80083de:	4293      	cmp	r3, r2
 80083e0:	d902      	bls.n	80083e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	75fb      	strb	r3, [r7, #23]
          break;
 80083e6:	e00c      	b.n	8008402 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008400:	d0e7      	beq.n	80083d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
}
 8008404:	4618      	mov	r0, r3
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008410:	b480      	push	{r7}
 8008412:	b089      	sub	sp, #36	@ 0x24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	4611      	mov	r1, r2
 800841c:	461a      	mov	r2, r3
 800841e:	460b      	mov	r3, r1
 8008420:	71fb      	strb	r3, [r7, #7]
 8008422:	4613      	mov	r3, r2
 8008424:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800842e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008432:	2b00      	cmp	r3, #0
 8008434:	d123      	bne.n	800847e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008436:	88bb      	ldrh	r3, [r7, #4]
 8008438:	3303      	adds	r3, #3
 800843a:	089b      	lsrs	r3, r3, #2
 800843c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800843e:	2300      	movs	r3, #0
 8008440:	61bb      	str	r3, [r7, #24]
 8008442:	e018      	b.n	8008476 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	031a      	lsls	r2, r3, #12
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	4413      	add	r3, r2
 800844c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008450:	461a      	mov	r2, r3
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	3301      	adds	r3, #1
 800845c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	3301      	adds	r3, #1
 8008462:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	3301      	adds	r3, #1
 8008468:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	3301      	adds	r3, #1
 800846e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	3301      	adds	r3, #1
 8008474:	61bb      	str	r3, [r7, #24]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	d3e2      	bcc.n	8008444 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3724      	adds	r7, #36	@ 0x24
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800848c:	b480      	push	{r7}
 800848e:	b08b      	sub	sp, #44	@ 0x2c
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	089b      	lsrs	r3, r3, #2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80084aa:	88fb      	ldrh	r3, [r7, #6]
 80084ac:	f003 0303 	and.w	r3, r3, #3
 80084b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80084b2:	2300      	movs	r3, #0
 80084b4:	623b      	str	r3, [r7, #32]
 80084b6:	e014      	b.n	80084e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	3301      	adds	r3, #1
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	3301      	adds	r3, #1
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	3301      	adds	r3, #1
 80084d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	3301      	adds	r3, #1
 80084da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	3301      	adds	r3, #1
 80084e0:	623b      	str	r3, [r7, #32]
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3e6      	bcc.n	80084b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084ea:	8bfb      	ldrh	r3, [r7, #30]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01e      	beq.n	800852e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084fa:	461a      	mov	r2, r3
 80084fc:	f107 0310 	add.w	r3, r7, #16
 8008500:	6812      	ldr	r2, [r2, #0]
 8008502:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	fa22 f303 	lsr.w	r3, r2, r3
 8008510:	b2da      	uxtb	r2, r3
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	701a      	strb	r2, [r3, #0]
      i++;
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	3301      	adds	r3, #1
 800851a:	623b      	str	r3, [r7, #32]
      pDest++;
 800851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851e:	3301      	adds	r3, #1
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008522:	8bfb      	ldrh	r3, [r7, #30]
 8008524:	3b01      	subs	r3, #1
 8008526:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008528:	8bfb      	ldrh	r3, [r7, #30]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1ea      	bne.n	8008504 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008530:	4618      	mov	r0, r3
 8008532:	372c      	adds	r7, #44	@ 0x2c
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	785b      	ldrb	r3, [r3, #1]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d12c      	bne.n	80085b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	db12      	blt.n	8008590 <USB_EPSetStall+0x54>
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00f      	beq.n	8008590 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	0151      	lsls	r1, r2, #5
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	440a      	add	r2, r1
 8008586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800858a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800858e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	e02b      	b.n	800860a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	db12      	blt.n	80085ea <USB_EPSetStall+0xae>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00f      	beq.n	80085ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008608:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d128      	bne.n	8008686 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800864e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008652:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	791b      	ldrb	r3, [r3, #4]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d003      	beq.n	8008664 <USB_EPClearStall+0x4c>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	791b      	ldrb	r3, [r3, #4]
 8008660:	2b02      	cmp	r3, #2
 8008662:	d138      	bne.n	80086d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800867e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	e027      	b.n	80086d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	0151      	lsls	r1, r2, #5
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	440a      	add	r2, r1
 800869c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	791b      	ldrb	r3, [r3, #4]
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d003      	beq.n	80086b6 <USB_EPClearStall+0x9e>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	791b      	ldrb	r3, [r3, #4]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d10f      	bne.n	80086d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	0151      	lsls	r1, r2, #5
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	440a      	add	r2, r1
 80086cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008702:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008706:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800871e:	4313      	orrs	r3, r2
 8008720:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800875e:	f023 0302 	bic.w	r3, r3, #2
 8008762:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800878c:	f023 0303 	bic.w	r3, r3, #3
 8008790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087a0:	f043 0302 	orr.w	r3, r3, #2
 80087a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4013      	ands	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087cc:	68fb      	ldr	r3, [r7, #12]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	4013      	ands	r3, r2
 80087fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	0c1b      	lsrs	r3, r3, #16
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800880e:	b480      	push	{r7}
 8008810:	b085      	sub	sp, #20
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	4013      	ands	r3, r2
 8008830:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	b29b      	uxth	r3, r3
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008842:	b480      	push	{r7}
 8008844:	b085      	sub	sp, #20
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	4013      	ands	r3, r2
 800886e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008870:	68bb      	ldr	r3, [r7, #8]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800887e:	b480      	push	{r7}
 8008880:	b087      	sub	sp, #28
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800889e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	fa22 f303 	lsr.w	r3, r2, r3
 80088ae:	01db      	lsls	r3, r3, #7
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4013      	ands	r3, r2
 80088ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088cc:	68bb      	ldr	r3, [r7, #8]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80088da:	b480      	push	{r7}
 80088dc:	b083      	sub	sp, #12
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f003 0301 	and.w	r3, r3, #1
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
	...

080088f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008912:	4619      	mov	r1, r3
 8008914:	4b09      	ldr	r3, [pc, #36]	@ (800893c <USB_ActivateSetup+0x44>)
 8008916:	4013      	ands	r3, r2
 8008918:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800892c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	fffff800 	.word	0xfffff800

08008940 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	460b      	mov	r3, r1
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	333c      	adds	r3, #60	@ 0x3c
 8008956:	3304      	adds	r3, #4
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	4a26      	ldr	r2, [pc, #152]	@ (80089f8 <USB_EP0_OutStart+0xb8>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d90a      	bls.n	800897a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008974:	d101      	bne.n	800897a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	e037      	b.n	80089ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008980:	461a      	mov	r2, r3
 8008982:	2300      	movs	r3, #0
 8008984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008994:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089a8:	f043 0318 	orr.w	r3, r3, #24
 80089ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80089c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089c2:	7afb      	ldrb	r3, [r7, #11]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d10f      	bne.n	80089e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ce:	461a      	mov	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80089e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	4f54300a 	.word	0x4f54300a

080089fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a14:	d901      	bls.n	8008a1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e01b      	b.n	8008a52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	daf2      	bge.n	8008a08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	f043 0201 	orr.w	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3301      	adds	r3, #1
 8008a36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a3e:	d901      	bls.n	8008a44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e006      	b.n	8008a52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d0f0      	beq.n	8008a32 <USB_CoreReset+0x36>

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008a6c:	2010      	movs	r0, #16
 8008a6e:	f002 f9d9 	bl	800ae24 <USBD_static_malloc>
 8008a72:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	32b0      	adds	r2, #176	@ 0xb0
 8008a84:	2100      	movs	r1, #0
 8008a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	e048      	b.n	8008b20 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	32b0      	adds	r2, #176	@ 0xb0
 8008a98:	68f9      	ldr	r1, [r7, #12]
 8008a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	32b0      	adds	r2, #176	@ 0xb0
 8008aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7c1b      	ldrb	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10d      	bne.n	8008ad6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008aba:	4b1b      	ldr	r3, [pc, #108]	@ (8008b28 <USBD_HID_Init+0xc8>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	f003 020f 	and.w	r2, r3, #15
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	3326      	adds	r3, #38	@ 0x26
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	801a      	strh	r2, [r3, #0]
 8008ad4:	e00c      	b.n	8008af0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008ad6:	4b14      	ldr	r3, [pc, #80]	@ (8008b28 <USBD_HID_Init+0xc8>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	f003 020f 	and.w	r2, r3, #15
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	440b      	add	r3, r1
 8008aea:	3326      	adds	r3, #38	@ 0x26
 8008aec:	220a      	movs	r2, #10
 8008aee:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008af0:	4b0d      	ldr	r3, [pc, #52]	@ (8008b28 <USBD_HID_Init+0xc8>)
 8008af2:	7819      	ldrb	r1, [r3, #0]
 8008af4:	2304      	movs	r3, #4
 8008af6:	2203      	movs	r2, #3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f002 f882 	bl	800ac02 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008afe:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <USBD_HID_Init+0xc8>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f003 020f 	and.w	r2, r3, #15
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	3324      	adds	r3, #36	@ 0x24
 8008b14:	2201      	movs	r2, #1
 8008b16:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	2400011f 	.word	0x2400011f

08008b2c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008b38:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb8 <USBD_HID_DeInit+0x8c>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f002 f885 	bl	800ac4e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008b44:	4b1c      	ldr	r3, [pc, #112]	@ (8008bb8 <USBD_HID_DeInit+0x8c>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	f003 020f 	and.w	r2, r3, #15
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	3324      	adds	r3, #36	@ 0x24
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008b5e:	4b16      	ldr	r3, [pc, #88]	@ (8008bb8 <USBD_HID_DeInit+0x8c>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	f003 020f 	and.w	r2, r3, #15
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	3326      	adds	r3, #38	@ 0x26
 8008b74:	2200      	movs	r2, #0
 8008b76:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	32b0      	adds	r2, #176	@ 0xb0
 8008b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d011      	beq.n	8008bae <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	32b0      	adds	r2, #176	@ 0xb0
 8008b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f002 f951 	bl	800ae40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	32b0      	adds	r2, #176	@ 0xb0
 8008ba8:	2100      	movs	r1, #0
 8008baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	2400011f 	.word	0x2400011f

08008bbc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	32b0      	adds	r2, #176	@ 0xb0
 8008bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e0e8      	b.n	8008dba <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d046      	beq.n	8008c82 <USBD_HID_Setup+0xc6>
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	f040 80d8 	bne.w	8008daa <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	785b      	ldrb	r3, [r3, #1]
 8008bfe:	3b02      	subs	r3, #2
 8008c00:	2b09      	cmp	r3, #9
 8008c02:	d836      	bhi.n	8008c72 <USBD_HID_Setup+0xb6>
 8008c04:	a201      	add	r2, pc, #4	@ (adr r2, 8008c0c <USBD_HID_Setup+0x50>)
 8008c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0a:	bf00      	nop
 8008c0c:	08008c63 	.word	0x08008c63
 8008c10:	08008c43 	.word	0x08008c43
 8008c14:	08008c73 	.word	0x08008c73
 8008c18:	08008c73 	.word	0x08008c73
 8008c1c:	08008c73 	.word	0x08008c73
 8008c20:	08008c73 	.word	0x08008c73
 8008c24:	08008c73 	.word	0x08008c73
 8008c28:	08008c73 	.word	0x08008c73
 8008c2c:	08008c51 	.word	0x08008c51
 8008c30:	08008c35 	.word	0x08008c35
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	885b      	ldrh	r3, [r3, #2]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	601a      	str	r2, [r3, #0]
          break;
 8008c40:	e01e      	b.n	8008c80 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 fc0f 	bl	800a46c <USBD_CtlSendData>
          break;
 8008c4e:	e017      	b.n	8008c80 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	885b      	ldrh	r3, [r3, #2]
 8008c54:	0a1b      	lsrs	r3, r3, #8
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	605a      	str	r2, [r3, #4]
          break;
 8008c60:	e00e      	b.n	8008c80 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3304      	adds	r3, #4
 8008c66:	2201      	movs	r2, #1
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 fbfe 	bl	800a46c <USBD_CtlSendData>
          break;
 8008c70:	e006      	b.n	8008c80 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 fb7c 	bl	800a372 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c7e:	bf00      	nop
      }
      break;
 8008c80:	e09a      	b.n	8008db8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	785b      	ldrb	r3, [r3, #1]
 8008c86:	2b0b      	cmp	r3, #11
 8008c88:	f200 8086 	bhi.w	8008d98 <USBD_HID_Setup+0x1dc>
 8008c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c94 <USBD_HID_Setup+0xd8>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008cc5 	.word	0x08008cc5
 8008c98:	08008da7 	.word	0x08008da7
 8008c9c:	08008d99 	.word	0x08008d99
 8008ca0:	08008d99 	.word	0x08008d99
 8008ca4:	08008d99 	.word	0x08008d99
 8008ca8:	08008d99 	.word	0x08008d99
 8008cac:	08008cef 	.word	0x08008cef
 8008cb0:	08008d99 	.word	0x08008d99
 8008cb4:	08008d99 	.word	0x08008d99
 8008cb8:	08008d99 	.word	0x08008d99
 8008cbc:	08008d47 	.word	0x08008d47
 8008cc0:	08008d71 	.word	0x08008d71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d107      	bne.n	8008ce0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cd0:	f107 030a 	add.w	r3, r7, #10
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 fbc7 	bl	800a46c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cde:	e063      	b.n	8008da8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fb45 	bl	800a372 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	75fb      	strb	r3, [r7, #23]
          break;
 8008cec:	e05c      	b.n	8008da8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	885b      	ldrh	r3, [r3, #2]
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b22      	cmp	r3, #34	@ 0x22
 8008cf8:	d108      	bne.n	8008d0c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	88db      	ldrh	r3, [r3, #6]
 8008cfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8008d00:	bf28      	it	cs
 8008d02:	233f      	movcs	r3, #63	@ 0x3f
 8008d04:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008d06:	4b2f      	ldr	r3, [pc, #188]	@ (8008dc4 <USBD_HID_Setup+0x208>)
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	e015      	b.n	8008d38 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	885b      	ldrh	r3, [r3, #2]
 8008d10:	0a1b      	lsrs	r3, r3, #8
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	2b21      	cmp	r3, #33	@ 0x21
 8008d16:	d108      	bne.n	8008d2a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8008d18:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc8 <USBD_HID_Setup+0x20c>)
 8008d1a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	88db      	ldrh	r3, [r3, #6]
 8008d20:	2b09      	cmp	r3, #9
 8008d22:	bf28      	it	cs
 8008d24:	2309      	movcs	r3, #9
 8008d26:	82bb      	strh	r3, [r7, #20]
 8008d28:	e006      	b.n	8008d38 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 fb20 	bl	800a372 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d32:	2303      	movs	r3, #3
 8008d34:	75fb      	strb	r3, [r7, #23]
            break;
 8008d36:	e037      	b.n	8008da8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d38:	8abb      	ldrh	r3, [r7, #20]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	6939      	ldr	r1, [r7, #16]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f001 fb94 	bl	800a46c <USBD_CtlSendData>
          break;
 8008d44:	e030      	b.n	8008da8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d107      	bne.n	8008d62 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3308      	adds	r3, #8
 8008d56:	2201      	movs	r2, #1
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f001 fb86 	bl	800a46c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d60:	e022      	b.n	8008da8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 fb04 	bl	800a372 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d6e:	e01b      	b.n	8008da8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d106      	bne.n	8008d8a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d88:	e00e      	b.n	8008da8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 faf0 	bl	800a372 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d92:	2303      	movs	r3, #3
 8008d94:	75fb      	strb	r3, [r7, #23]
          break;
 8008d96:	e007      	b.n	8008da8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f001 fae9 	bl	800a372 <USBD_CtlError>
          ret = USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	75fb      	strb	r3, [r7, #23]
          break;
 8008da4:	e000      	b.n	8008da8 <USBD_HID_Setup+0x1ec>
          break;
 8008da6:	bf00      	nop
      }
      break;
 8008da8:	e006      	b.n	8008db8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 fae0 	bl	800a372 <USBD_CtlError>
      ret = USBD_FAIL;
 8008db2:	2303      	movs	r3, #3
 8008db4:	75fb      	strb	r3, [r7, #23]
      break;
 8008db6:	bf00      	nop
  }

  return (uint8_t)ret;
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	240000e0 	.word	0x240000e0
 8008dc8:	240000c8 	.word	0x240000c8

08008dcc <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	32b0      	adds	r2, #176	@ 0xb0
 8008de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e014      	b.n	8008e1e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d10d      	bne.n	8008e1c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	7b1b      	ldrb	r3, [r3, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d109      	bne.n	8008e1c <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8008e0e:	4b06      	ldr	r3, [pc, #24]	@ (8008e28 <USBD_HID_SendReport+0x5c>)
 8008e10:	7819      	ldrb	r1, [r3, #0]
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f001 ffc1 	bl	800ad9e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	2400011f 	.word	0x2400011f

08008e2c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008e34:	2181      	movs	r1, #129	@ 0x81
 8008e36:	4809      	ldr	r0, [pc, #36]	@ (8008e5c <USBD_HID_GetFSCfgDesc+0x30>)
 8008e38:	f000 fc3b 	bl	80096b2 <USBD_GetEpDesc>
 8008e3c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	220a      	movs	r2, #10
 8008e48:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2222      	movs	r2, #34	@ 0x22
 8008e4e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008e50:	4b02      	ldr	r3, [pc, #8]	@ (8008e5c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	240000a4 	.word	0x240000a4

08008e60 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008e68:	2181      	movs	r1, #129	@ 0x81
 8008e6a:	4809      	ldr	r0, [pc, #36]	@ (8008e90 <USBD_HID_GetHSCfgDesc+0x30>)
 8008e6c:	f000 fc21 	bl	80096b2 <USBD_GetEpDesc>
 8008e70:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2207      	movs	r2, #7
 8008e7c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2222      	movs	r2, #34	@ 0x22
 8008e82:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008e84:	4b02      	ldr	r3, [pc, #8]	@ (8008e90 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	240000a4 	.word	0x240000a4

08008e94 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008e9c:	2181      	movs	r1, #129	@ 0x81
 8008e9e:	4809      	ldr	r0, [pc, #36]	@ (8008ec4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008ea0:	f000 fc07 	bl	80096b2 <USBD_GetEpDesc>
 8008ea4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	220a      	movs	r2, #10
 8008eb0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2222      	movs	r2, #34	@ 0x22
 8008eb6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008eb8:	4b02      	ldr	r3, [pc, #8]	@ (8008ec4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	240000a4 	.word	0x240000a4

08008ec8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	32b0      	adds	r2, #176	@ 0xb0
 8008ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	220a      	movs	r2, #10
 8008f00:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008f02:	4b03      	ldr	r3, [pc, #12]	@ (8008f10 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	240000d4 	.word	0x240000d4

08008f14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e01f      	b.n	8008f6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	79fa      	ldrb	r2, [r7, #7]
 8008f5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f001 fde1 	bl	800ab28 <USBD_LL_Init>
 8008f66:	4603      	mov	r3, r0
 8008f68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e025      	b.n	8008fd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	32ae      	adds	r2, #174	@ 0xae
 8008f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00f      	beq.n	8008fc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	32ae      	adds	r2, #174	@ 0xae
 8008fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb8:	f107 020e 	add.w	r2, r7, #14
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 fdef 	bl	800abcc <USBD_LL_Start>
 8008fee:	4603      	mov	r3, r0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009000:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009024:	2b00      	cmp	r3, #0
 8009026:	d009      	beq.n	800903c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	78fa      	ldrb	r2, [r7, #3]
 8009032:	4611      	mov	r1, r2
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	460b      	mov	r3, r1
 8009050:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	4611      	mov	r1, r2
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	4798      	blx	r3
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800906c:	2303      	movs	r3, #3
 800906e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009070:	7bfb      	ldrb	r3, [r7, #15]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	f001 f936 	bl	800a2fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80090a0:	461a      	mov	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80090ae:	f003 031f 	and.w	r3, r3, #31
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d01a      	beq.n	80090ec <USBD_LL_SetupStage+0x72>
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d822      	bhi.n	8009100 <USBD_LL_SetupStage+0x86>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <USBD_LL_SetupStage+0x4a>
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d00a      	beq.n	80090d8 <USBD_LL_SetupStage+0x5e>
 80090c2:	e01d      	b.n	8009100 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fb63 	bl	8009798 <USBD_StdDevReq>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]
      break;
 80090d6:	e020      	b.n	800911a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fbcb 	bl	800987c <USBD_StdItfReq>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
      break;
 80090ea:	e016      	b.n	800911a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fc2d 	bl	8009954 <USBD_StdEPReq>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73fb      	strb	r3, [r7, #15]
      break;
 80090fe:	e00c      	b.n	800911a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009106:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800910a:	b2db      	uxtb	r3, r3
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f001 fdbc 	bl	800ac8c <USBD_LL_StallEP>
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]
      break;
 8009118:	bf00      	nop
  }

  return ret;
 800911a:	7bfb      	ldrb	r3, [r7, #15]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	460b      	mov	r3, r1
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d16e      	bne.n	800921a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009142:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800914a:	2b03      	cmp	r3, #3
 800914c:	f040 8098 	bne.w	8009280 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	429a      	cmp	r2, r3
 800915a:	d913      	bls.n	8009184 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	1ad2      	subs	r2, r2, r3
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	4293      	cmp	r3, r2
 8009174:	bf28      	it	cs
 8009176:	4613      	movcs	r3, r2
 8009178:	461a      	mov	r2, r3
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f001 f9a1 	bl	800a4c4 <USBD_CtlContinueRx>
 8009182:	e07d      	b.n	8009280 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800918a:	f003 031f 	and.w	r3, r3, #31
 800918e:	2b02      	cmp	r3, #2
 8009190:	d014      	beq.n	80091bc <USBD_LL_DataOutStage+0x98>
 8009192:	2b02      	cmp	r3, #2
 8009194:	d81d      	bhi.n	80091d2 <USBD_LL_DataOutStage+0xae>
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <USBD_LL_DataOutStage+0x7c>
 800919a:	2b01      	cmp	r3, #1
 800919c:	d003      	beq.n	80091a6 <USBD_LL_DataOutStage+0x82>
 800919e:	e018      	b.n	80091d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	75bb      	strb	r3, [r7, #22]
            break;
 80091a4:	e018      	b.n	80091d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	4619      	mov	r1, r3
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 fa64 	bl	800967e <USBD_CoreFindIF>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75bb      	strb	r3, [r7, #22]
            break;
 80091ba:	e00d      	b.n	80091d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	4619      	mov	r1, r3
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 fa66 	bl	8009698 <USBD_CoreFindEP>
 80091cc:	4603      	mov	r3, r0
 80091ce:	75bb      	strb	r3, [r7, #22]
            break;
 80091d0:	e002      	b.n	80091d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	75bb      	strb	r3, [r7, #22]
            break;
 80091d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80091d8:	7dbb      	ldrb	r3, [r7, #22]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d119      	bne.n	8009212 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d113      	bne.n	8009212 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80091ea:	7dba      	ldrb	r2, [r7, #22]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	32ae      	adds	r2, #174	@ 0xae
 80091f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80091fa:	7dba      	ldrb	r2, [r7, #22]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009202:	7dba      	ldrb	r2, [r7, #22]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	32ae      	adds	r2, #174	@ 0xae
 8009208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f001 f967 	bl	800a4e6 <USBD_CtlSendStatus>
 8009218:	e032      	b.n	8009280 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800921a:	7afb      	ldrb	r3, [r7, #11]
 800921c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009220:	b2db      	uxtb	r3, r3
 8009222:	4619      	mov	r1, r3
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 fa37 	bl	8009698 <USBD_CoreFindEP>
 800922a:	4603      	mov	r3, r0
 800922c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800922e:	7dbb      	ldrb	r3, [r7, #22]
 8009230:	2bff      	cmp	r3, #255	@ 0xff
 8009232:	d025      	beq.n	8009280 <USBD_LL_DataOutStage+0x15c>
 8009234:	7dbb      	ldrb	r3, [r7, #22]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d122      	bne.n	8009280 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b03      	cmp	r3, #3
 8009244:	d117      	bne.n	8009276 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009246:	7dba      	ldrb	r2, [r7, #22]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	32ae      	adds	r2, #174	@ 0xae
 800924c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00f      	beq.n	8009276 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009256:	7dba      	ldrb	r2, [r7, #22]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800925e:	7dba      	ldrb	r2, [r7, #22]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	32ae      	adds	r2, #174	@ 0xae
 8009264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	7afa      	ldrb	r2, [r7, #11]
 800926c:	4611      	mov	r1, r2
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	4798      	blx	r3
 8009272:	4603      	mov	r3, r0
 8009274:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	e000      	b.n	8009282 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	460b      	mov	r3, r1
 8009294:	607a      	str	r2, [r7, #4]
 8009296:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009298:	7afb      	ldrb	r3, [r7, #11]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d16f      	bne.n	800937e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3314      	adds	r3, #20
 80092a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d15a      	bne.n	8009364 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d914      	bls.n	80092e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	689a      	ldr	r2, [r3, #8]
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	1ad2      	subs	r2, r2, r3
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	461a      	mov	r2, r3
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f001 f8e6 	bl	800a4a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092d6:	2300      	movs	r3, #0
 80092d8:	2200      	movs	r2, #0
 80092da:	2100      	movs	r1, #0
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f001 fd7f 	bl	800ade0 <USBD_LL_PrepareReceive>
 80092e2:	e03f      	b.n	8009364 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	68da      	ldr	r2, [r3, #12]
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d11c      	bne.n	800932a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d316      	bcc.n	800932a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009306:	429a      	cmp	r2, r3
 8009308:	d20f      	bcs.n	800932a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800930a:	2200      	movs	r2, #0
 800930c:	2100      	movs	r1, #0
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f001 f8c7 	bl	800a4a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800931c:	2300      	movs	r3, #0
 800931e:	2200      	movs	r2, #0
 8009320:	2100      	movs	r1, #0
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f001 fd5c 	bl	800ade0 <USBD_LL_PrepareReceive>
 8009328:	e01c      	b.n	8009364 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b03      	cmp	r3, #3
 8009334:	d10f      	bne.n	8009356 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d009      	beq.n	8009356 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009356:	2180      	movs	r1, #128	@ 0x80
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f001 fc97 	bl	800ac8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f001 f8d4 	bl	800a50c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d03a      	beq.n	80093e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7ff fe42 	bl	8008ff8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800937c:	e032      	b.n	80093e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800937e:	7afb      	ldrb	r3, [r7, #11]
 8009380:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009384:	b2db      	uxtb	r3, r3
 8009386:	4619      	mov	r1, r3
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 f985 	bl	8009698 <USBD_CoreFindEP>
 800938e:	4603      	mov	r3, r0
 8009390:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	2bff      	cmp	r3, #255	@ 0xff
 8009396:	d025      	beq.n	80093e4 <USBD_LL_DataInStage+0x15a>
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d122      	bne.n	80093e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d11c      	bne.n	80093e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80093aa:	7dfa      	ldrb	r2, [r7, #23]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	32ae      	adds	r2, #174	@ 0xae
 80093b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d014      	beq.n	80093e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80093ba:	7dfa      	ldrb	r2, [r7, #23]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80093c2:	7dfa      	ldrb	r2, [r7, #23]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	32ae      	adds	r2, #174	@ 0xae
 80093c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	7afa      	ldrb	r2, [r7, #11]
 80093d0:	4611      	mov	r1, r2
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	4798      	blx	r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80093da:	7dbb      	ldrb	r3, [r7, #22]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80093e0:	7dbb      	ldrb	r3, [r7, #22]
 80093e2:	e000      	b.n	80093e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009426:	2b00      	cmp	r3, #0
 8009428:	d014      	beq.n	8009454 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00e      	beq.n	8009454 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	6852      	ldr	r2, [r2, #4]
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	4611      	mov	r1, r2
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	4798      	blx	r3
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009450:	2303      	movs	r3, #3
 8009452:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009454:	2340      	movs	r3, #64	@ 0x40
 8009456:	2200      	movs	r2, #0
 8009458:	2100      	movs	r1, #0
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 fbd1 	bl	800ac02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2240      	movs	r2, #64	@ 0x40
 800946c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009470:	2340      	movs	r3, #64	@ 0x40
 8009472:	2200      	movs	r2, #0
 8009474:	2180      	movs	r1, #128	@ 0x80
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f001 fbc3 	bl	800ac02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2240      	movs	r2, #64	@ 0x40
 8009486:	621a      	str	r2, [r3, #32]

  return ret;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	460b      	mov	r3, r1
 800949c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	78fa      	ldrb	r2, [r7, #3]
 80094a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d006      	beq.n	80094d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2204      	movs	r2, #4
 80094d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	d106      	bne.n	800950c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009504:	b2da      	uxtb	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b03      	cmp	r3, #3
 800952c:	d110      	bne.n	8009550 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00b      	beq.n	8009550 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	32ae      	adds	r2, #174	@ 0xae
 8009570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	e01c      	b.n	80095b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b03      	cmp	r3, #3
 8009586:	d115      	bne.n	80095b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	32ae      	adds	r2, #174	@ 0xae
 8009592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00b      	beq.n	80095b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	32ae      	adds	r2, #174	@ 0xae
 80095a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	78fa      	ldrb	r2, [r7, #3]
 80095ae:	4611      	mov	r1, r2
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	460b      	mov	r3, r1
 80095c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	32ae      	adds	r2, #174	@ 0xae
 80095d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d101      	bne.n	80095e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80095dc:	2303      	movs	r3, #3
 80095de:	e01c      	b.n	800961a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d115      	bne.n	8009618 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	32ae      	adds	r2, #174	@ 0xae
 80095f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	32ae      	adds	r2, #174	@ 0xae
 800960a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009610:	78fa      	ldrb	r2, [r7, #3]
 8009612:	4611      	mov	r1, r2
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00e      	beq.n	8009674 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	6852      	ldr	r2, [r2, #4]
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	4611      	mov	r1, r2
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	4798      	blx	r3
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009670:	2303      	movs	r3, #3
 8009672:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800968a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b086      	sub	sp, #24
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	885b      	ldrh	r3, [r3, #2]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	7812      	ldrb	r2, [r2, #0]
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d91f      	bls.n	8009718 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80096de:	e013      	b.n	8009708 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80096e0:	f107 030a 	add.w	r3, r7, #10
 80096e4:	4619      	mov	r1, r3
 80096e6:	6978      	ldr	r0, [r7, #20]
 80096e8:	f000 f81b 	bl	8009722 <USBD_GetNextDesc>
 80096ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d108      	bne.n	8009708 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	789b      	ldrb	r3, [r3, #2]
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	429a      	cmp	r2, r3
 8009702:	d008      	beq.n	8009716 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009704:	2300      	movs	r3, #0
 8009706:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	885b      	ldrh	r3, [r3, #2]
 800970c:	b29a      	uxth	r2, r3
 800970e:	897b      	ldrh	r3, [r7, #10]
 8009710:	429a      	cmp	r2, r3
 8009712:	d8e5      	bhi.n	80096e0 <USBD_GetEpDesc+0x2e>
 8009714:	e000      	b.n	8009718 <USBD_GetEpDesc+0x66>
          break;
 8009716:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009718:	693b      	ldr	r3, [r7, #16]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009722:	b480      	push	{r7}
 8009724:	b085      	sub	sp, #20
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	7812      	ldrb	r2, [r2, #0]
 8009738:	4413      	add	r3, r2
 800973a:	b29a      	uxth	r2, r3
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800974c:	68fb      	ldr	r3, [r7, #12]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800975a:	b480      	push	{r7}
 800975c:	b087      	sub	sp, #28
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	3301      	adds	r3, #1
 8009770:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009778:	8a3b      	ldrh	r3, [r7, #16]
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	b21a      	sxth	r2, r3
 800977e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009782:	4313      	orrs	r3, r2
 8009784:	b21b      	sxth	r3, r3
 8009786:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009788:	89fb      	ldrh	r3, [r7, #14]
}
 800978a:	4618      	mov	r0, r3
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
	...

08009798 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097ae:	2b40      	cmp	r3, #64	@ 0x40
 80097b0:	d005      	beq.n	80097be <USBD_StdDevReq+0x26>
 80097b2:	2b40      	cmp	r3, #64	@ 0x40
 80097b4:	d857      	bhi.n	8009866 <USBD_StdDevReq+0xce>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00f      	beq.n	80097da <USBD_StdDevReq+0x42>
 80097ba:	2b20      	cmp	r3, #32
 80097bc:	d153      	bne.n	8009866 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	32ae      	adds	r2, #174	@ 0xae
 80097c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	4798      	blx	r3
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]
      break;
 80097d8:	e04a      	b.n	8009870 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	785b      	ldrb	r3, [r3, #1]
 80097de:	2b09      	cmp	r3, #9
 80097e0:	d83b      	bhi.n	800985a <USBD_StdDevReq+0xc2>
 80097e2:	a201      	add	r2, pc, #4	@ (adr r2, 80097e8 <USBD_StdDevReq+0x50>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	0800983d 	.word	0x0800983d
 80097ec:	08009851 	.word	0x08009851
 80097f0:	0800985b 	.word	0x0800985b
 80097f4:	08009847 	.word	0x08009847
 80097f8:	0800985b 	.word	0x0800985b
 80097fc:	0800981b 	.word	0x0800981b
 8009800:	08009811 	.word	0x08009811
 8009804:	0800985b 	.word	0x0800985b
 8009808:	08009833 	.word	0x08009833
 800980c:	08009825 	.word	0x08009825
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa3c 	bl	8009c90 <USBD_GetDescriptor>
          break;
 8009818:	e024      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fbcb 	bl	8009fb8 <USBD_SetAddress>
          break;
 8009822:	e01f      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fc0a 	bl	800a040 <USBD_SetConfig>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
          break;
 8009830:	e018      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fcad 	bl	800a194 <USBD_GetConfig>
          break;
 800983a:	e013      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fcde 	bl	800a200 <USBD_GetStatus>
          break;
 8009844:	e00e      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fd0d 	bl	800a268 <USBD_SetFeature>
          break;
 800984e:	e009      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fd31 	bl	800a2ba <USBD_ClrFeature>
          break;
 8009858:	e004      	b.n	8009864 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fd88 	bl	800a372 <USBD_CtlError>
          break;
 8009862:	bf00      	nop
      }
      break;
 8009864:	e004      	b.n	8009870 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fd82 	bl	800a372 <USBD_CtlError>
      break;
 800986e:	bf00      	nop
  }

  return ret;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop

0800987c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009892:	2b40      	cmp	r3, #64	@ 0x40
 8009894:	d005      	beq.n	80098a2 <USBD_StdItfReq+0x26>
 8009896:	2b40      	cmp	r3, #64	@ 0x40
 8009898:	d852      	bhi.n	8009940 <USBD_StdItfReq+0xc4>
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <USBD_StdItfReq+0x26>
 800989e:	2b20      	cmp	r3, #32
 80098a0:	d14e      	bne.n	8009940 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	3b01      	subs	r3, #1
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d840      	bhi.n	8009932 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	889b      	ldrh	r3, [r3, #4]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d836      	bhi.n	8009928 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	889b      	ldrh	r3, [r3, #4]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7ff fedb 	bl	800967e <USBD_CoreFindIF>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
 80098ce:	2bff      	cmp	r3, #255	@ 0xff
 80098d0:	d01d      	beq.n	800990e <USBD_StdItfReq+0x92>
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d11a      	bne.n	800990e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80098d8:	7bba      	ldrb	r2, [r7, #14]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	32ae      	adds	r2, #174	@ 0xae
 80098de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00f      	beq.n	8009908 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80098e8:	7bba      	ldrb	r2, [r7, #14]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80098f0:	7bba      	ldrb	r2, [r7, #14]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	@ 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009906:	e004      	b.n	8009912 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009908:	2303      	movs	r3, #3
 800990a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800990c:	e001      	b.n	8009912 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800990e:	2303      	movs	r3, #3
 8009910:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	88db      	ldrh	r3, [r3, #6]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d110      	bne.n	800993c <USBD_StdItfReq+0xc0>
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10d      	bne.n	800993c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fde0 	bl	800a4e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009926:	e009      	b.n	800993c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fd21 	bl	800a372 <USBD_CtlError>
          break;
 8009930:	e004      	b.n	800993c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fd1c 	bl	800a372 <USBD_CtlError>
          break;
 800993a:	e000      	b.n	800993e <USBD_StdItfReq+0xc2>
          break;
 800993c:	bf00      	nop
      }
      break;
 800993e:	e004      	b.n	800994a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fd15 	bl	800a372 <USBD_CtlError>
      break;
 8009948:	bf00      	nop
  }

  return ret;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	889b      	ldrh	r3, [r3, #4]
 8009966:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009970:	2b40      	cmp	r3, #64	@ 0x40
 8009972:	d007      	beq.n	8009984 <USBD_StdEPReq+0x30>
 8009974:	2b40      	cmp	r3, #64	@ 0x40
 8009976:	f200 817f 	bhi.w	8009c78 <USBD_StdEPReq+0x324>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02a      	beq.n	80099d4 <USBD_StdEPReq+0x80>
 800997e:	2b20      	cmp	r3, #32
 8009980:	f040 817a 	bne.w	8009c78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff fe85 	bl	8009698 <USBD_CoreFindEP>
 800998e:	4603      	mov	r3, r0
 8009990:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009992:	7b7b      	ldrb	r3, [r7, #13]
 8009994:	2bff      	cmp	r3, #255	@ 0xff
 8009996:	f000 8174 	beq.w	8009c82 <USBD_StdEPReq+0x32e>
 800999a:	7b7b      	ldrb	r3, [r7, #13]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f040 8170 	bne.w	8009c82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099a2:	7b7a      	ldrb	r2, [r7, #13]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80099aa:	7b7a      	ldrb	r2, [r7, #13]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	32ae      	adds	r2, #174	@ 0xae
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 8163 	beq.w	8009c82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80099bc:	7b7a      	ldrb	r2, [r7, #13]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	32ae      	adds	r2, #174	@ 0xae
 80099c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	4798      	blx	r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099d2:	e156      	b.n	8009c82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	785b      	ldrb	r3, [r3, #1]
 80099d8:	2b03      	cmp	r3, #3
 80099da:	d008      	beq.n	80099ee <USBD_StdEPReq+0x9a>
 80099dc:	2b03      	cmp	r3, #3
 80099de:	f300 8145 	bgt.w	8009c6c <USBD_StdEPReq+0x318>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 809b 	beq.w	8009b1e <USBD_StdEPReq+0x1ca>
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d03c      	beq.n	8009a66 <USBD_StdEPReq+0x112>
 80099ec:	e13e      	b.n	8009c6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d002      	beq.n	8009a00 <USBD_StdEPReq+0xac>
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d016      	beq.n	8009a2c <USBD_StdEPReq+0xd8>
 80099fe:	e02c      	b.n	8009a5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00d      	beq.n	8009a22 <USBD_StdEPReq+0xce>
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b80      	cmp	r3, #128	@ 0x80
 8009a0a:	d00a      	beq.n	8009a22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 f93b 	bl	800ac8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a16:	2180      	movs	r1, #128	@ 0x80
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 f937 	bl	800ac8c <USBD_LL_StallEP>
 8009a1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a20:	e020      	b.n	8009a64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fca4 	bl	800a372 <USBD_CtlError>
              break;
 8009a2a:	e01b      	b.n	8009a64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10e      	bne.n	8009a52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00b      	beq.n	8009a52 <USBD_StdEPReq+0xfe>
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	2b80      	cmp	r3, #128	@ 0x80
 8009a3e:	d008      	beq.n	8009a52 <USBD_StdEPReq+0xfe>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	88db      	ldrh	r3, [r3, #6]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d104      	bne.n	8009a52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 f91d 	bl	800ac8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fd47 	bl	800a4e6 <USBD_CtlSendStatus>

              break;
 8009a58:	e004      	b.n	8009a64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fc88 	bl	800a372 <USBD_CtlError>
              break;
 8009a62:	bf00      	nop
          }
          break;
 8009a64:	e107      	b.n	8009c76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d002      	beq.n	8009a78 <USBD_StdEPReq+0x124>
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d016      	beq.n	8009aa4 <USBD_StdEPReq+0x150>
 8009a76:	e04b      	b.n	8009b10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00d      	beq.n	8009a9a <USBD_StdEPReq+0x146>
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	2b80      	cmp	r3, #128	@ 0x80
 8009a82:	d00a      	beq.n	8009a9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 f8ff 	bl	800ac8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a8e:	2180      	movs	r1, #128	@ 0x80
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 f8fb 	bl	800ac8c <USBD_LL_StallEP>
 8009a96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a98:	e040      	b.n	8009b1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fc68 	bl	800a372 <USBD_CtlError>
              break;
 8009aa2:	e03b      	b.n	8009b1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	885b      	ldrh	r3, [r3, #2]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d136      	bne.n	8009b1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d004      	beq.n	8009ac0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 f905 	bl	800acca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fd10 	bl	800a4e6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff fde4 	bl	8009698 <USBD_CoreFindEP>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ad4:	7b7b      	ldrb	r3, [r7, #13]
 8009ad6:	2bff      	cmp	r3, #255	@ 0xff
 8009ad8:	d01f      	beq.n	8009b1a <USBD_StdEPReq+0x1c6>
 8009ada:	7b7b      	ldrb	r3, [r7, #13]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d11c      	bne.n	8009b1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ae0:	7b7a      	ldrb	r2, [r7, #13]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ae8:	7b7a      	ldrb	r2, [r7, #13]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32ae      	adds	r2, #174	@ 0xae
 8009aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d010      	beq.n	8009b1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009af8:	7b7a      	ldrb	r2, [r7, #13]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	32ae      	adds	r2, #174	@ 0xae
 8009afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b0e:	e004      	b.n	8009b1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fc2d 	bl	800a372 <USBD_CtlError>
              break;
 8009b18:	e000      	b.n	8009b1c <USBD_StdEPReq+0x1c8>
              break;
 8009b1a:	bf00      	nop
          }
          break;
 8009b1c:	e0ab      	b.n	8009c76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d002      	beq.n	8009b30 <USBD_StdEPReq+0x1dc>
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d032      	beq.n	8009b94 <USBD_StdEPReq+0x240>
 8009b2e:	e097      	b.n	8009c60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <USBD_StdEPReq+0x1f2>
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	2b80      	cmp	r3, #128	@ 0x80
 8009b3a:	d004      	beq.n	8009b46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fc17 	bl	800a372 <USBD_CtlError>
                break;
 8009b44:	e091      	b.n	8009c6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	da0b      	bge.n	8009b66 <USBD_StdEPReq+0x212>
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b54:	4613      	mov	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	3310      	adds	r3, #16
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	4413      	add	r3, r2
 8009b62:	3304      	adds	r3, #4
 8009b64:	e00b      	b.n	8009b7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fc6d 	bl	800a46c <USBD_CtlSendData>
              break;
 8009b92:	e06a      	b.n	8009c6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	da11      	bge.n	8009bc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	f003 020f 	and.w	r2, r3, #15
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	3324      	adds	r3, #36	@ 0x24
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d117      	bne.n	8009be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fbda 	bl	800a372 <USBD_CtlError>
                  break;
 8009bbe:	e054      	b.n	8009c6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	f003 020f 	and.w	r2, r3, #15
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	440b      	add	r3, r1
 8009bd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d104      	bne.n	8009be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fbc7 	bl	800a372 <USBD_CtlError>
                  break;
 8009be4:	e041      	b.n	8009c6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009be6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	da0b      	bge.n	8009c06 <USBD_StdEPReq+0x2b2>
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	3310      	adds	r3, #16
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	4413      	add	r3, r2
 8009c02:	3304      	adds	r3, #4
 8009c04:	e00b      	b.n	8009c1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <USBD_StdEPReq+0x2d8>
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	2b80      	cmp	r3, #128	@ 0x80
 8009c2a:	d103      	bne.n	8009c34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	e00e      	b.n	8009c52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 f865 	bl	800ad08 <USBD_LL_IsStallEP>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2201      	movs	r2, #1
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e002      	b.n	8009c52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2202      	movs	r2, #2
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fc07 	bl	800a46c <USBD_CtlSendData>
              break;
 8009c5e:	e004      	b.n	8009c6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fb85 	bl	800a372 <USBD_CtlError>
              break;
 8009c68:	bf00      	nop
          }
          break;
 8009c6a:	e004      	b.n	8009c76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fb7f 	bl	800a372 <USBD_CtlError>
          break;
 8009c74:	bf00      	nop
      }
      break;
 8009c76:	e005      	b.n	8009c84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fb79 	bl	800a372 <USBD_CtlError>
      break;
 8009c80:	e000      	b.n	8009c84 <USBD_StdEPReq+0x330>
      break;
 8009c82:	bf00      	nop
  }

  return ret;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	885b      	ldrh	r3, [r3, #2]
 8009caa:	0a1b      	lsrs	r3, r3, #8
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	2b0e      	cmp	r3, #14
 8009cb2:	f200 8152 	bhi.w	8009f5a <USBD_GetDescriptor+0x2ca>
 8009cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cbc <USBD_GetDescriptor+0x2c>)
 8009cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbc:	08009d2d 	.word	0x08009d2d
 8009cc0:	08009d45 	.word	0x08009d45
 8009cc4:	08009d85 	.word	0x08009d85
 8009cc8:	08009f5b 	.word	0x08009f5b
 8009ccc:	08009f5b 	.word	0x08009f5b
 8009cd0:	08009efb 	.word	0x08009efb
 8009cd4:	08009f27 	.word	0x08009f27
 8009cd8:	08009f5b 	.word	0x08009f5b
 8009cdc:	08009f5b 	.word	0x08009f5b
 8009ce0:	08009f5b 	.word	0x08009f5b
 8009ce4:	08009f5b 	.word	0x08009f5b
 8009ce8:	08009f5b 	.word	0x08009f5b
 8009cec:	08009f5b 	.word	0x08009f5b
 8009cf0:	08009f5b 	.word	0x08009f5b
 8009cf4:	08009cf9 	.word	0x08009cf9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00b      	beq.n	8009d1c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	7c12      	ldrb	r2, [r2, #16]
 8009d10:	f107 0108 	add.w	r1, r7, #8
 8009d14:	4610      	mov	r0, r2
 8009d16:	4798      	blx	r3
 8009d18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d1a:	e126      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fb27 	bl	800a372 <USBD_CtlError>
        err++;
 8009d24:	7afb      	ldrb	r3, [r7, #11]
 8009d26:	3301      	adds	r3, #1
 8009d28:	72fb      	strb	r3, [r7, #11]
      break;
 8009d2a:	e11e      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	7c12      	ldrb	r2, [r2, #16]
 8009d38:	f107 0108 	add.w	r1, r7, #8
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4798      	blx	r3
 8009d40:	60f8      	str	r0, [r7, #12]
      break;
 8009d42:	e112      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	7c1b      	ldrb	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10d      	bne.n	8009d68 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d54:	f107 0208 	add.w	r2, r7, #8
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3301      	adds	r3, #1
 8009d62:	2202      	movs	r2, #2
 8009d64:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d66:	e100      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d70:	f107 0208 	add.w	r2, r7, #8
 8009d74:	4610      	mov	r0, r2
 8009d76:	4798      	blx	r3
 8009d78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	2202      	movs	r2, #2
 8009d80:	701a      	strb	r2, [r3, #0]
      break;
 8009d82:	e0f2      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	885b      	ldrh	r3, [r3, #2]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b05      	cmp	r3, #5
 8009d8c:	f200 80ac 	bhi.w	8009ee8 <USBD_GetDescriptor+0x258>
 8009d90:	a201      	add	r2, pc, #4	@ (adr r2, 8009d98 <USBD_GetDescriptor+0x108>)
 8009d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d96:	bf00      	nop
 8009d98:	08009db1 	.word	0x08009db1
 8009d9c:	08009de5 	.word	0x08009de5
 8009da0:	08009e19 	.word	0x08009e19
 8009da4:	08009e4d 	.word	0x08009e4d
 8009da8:	08009e81 	.word	0x08009e81
 8009dac:	08009eb5 	.word	0x08009eb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00b      	beq.n	8009dd4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	7c12      	ldrb	r2, [r2, #16]
 8009dc8:	f107 0108 	add.w	r1, r7, #8
 8009dcc:	4610      	mov	r0, r2
 8009dce:	4798      	blx	r3
 8009dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dd2:	e091      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 facb 	bl	800a372 <USBD_CtlError>
            err++;
 8009ddc:	7afb      	ldrb	r3, [r7, #11]
 8009dde:	3301      	adds	r3, #1
 8009de0:	72fb      	strb	r3, [r7, #11]
          break;
 8009de2:	e089      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00b      	beq.n	8009e08 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	7c12      	ldrb	r2, [r2, #16]
 8009dfc:	f107 0108 	add.w	r1, r7, #8
 8009e00:	4610      	mov	r0, r2
 8009e02:	4798      	blx	r3
 8009e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e06:	e077      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fab1 	bl	800a372 <USBD_CtlError>
            err++;
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	3301      	adds	r3, #1
 8009e14:	72fb      	strb	r3, [r7, #11]
          break;
 8009e16:	e06f      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00b      	beq.n	8009e3c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	7c12      	ldrb	r2, [r2, #16]
 8009e30:	f107 0108 	add.w	r1, r7, #8
 8009e34:	4610      	mov	r0, r2
 8009e36:	4798      	blx	r3
 8009e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3a:	e05d      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fa97 	bl	800a372 <USBD_CtlError>
            err++;
 8009e44:	7afb      	ldrb	r3, [r7, #11]
 8009e46:	3301      	adds	r3, #1
 8009e48:	72fb      	strb	r3, [r7, #11]
          break;
 8009e4a:	e055      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00b      	beq.n	8009e70 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	7c12      	ldrb	r2, [r2, #16]
 8009e64:	f107 0108 	add.w	r1, r7, #8
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4798      	blx	r3
 8009e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e6e:	e043      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fa7d 	bl	800a372 <USBD_CtlError>
            err++;
 8009e78:	7afb      	ldrb	r3, [r7, #11]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e7e:	e03b      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	7c12      	ldrb	r2, [r2, #16]
 8009e98:	f107 0108 	add.w	r1, r7, #8
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ea2:	e029      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fa63 	bl	800a372 <USBD_CtlError>
            err++;
 8009eac:	7afb      	ldrb	r3, [r7, #11]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009eb2:	e021      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	7c12      	ldrb	r2, [r2, #16]
 8009ecc:	f107 0108 	add.w	r1, r7, #8
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	4798      	blx	r3
 8009ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ed6:	e00f      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa49 	bl	800a372 <USBD_CtlError>
            err++;
 8009ee0:	7afb      	ldrb	r3, [r7, #11]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ee6:	e007      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa41 	bl	800a372 <USBD_CtlError>
          err++;
 8009ef0:	7afb      	ldrb	r3, [r7, #11]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009ef6:	bf00      	nop
      }
      break;
 8009ef8:	e037      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	7c1b      	ldrb	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0a:	f107 0208 	add.w	r2, r7, #8
 8009f0e:	4610      	mov	r0, r2
 8009f10:	4798      	blx	r3
 8009f12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f14:	e029      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fa2a 	bl	800a372 <USBD_CtlError>
        err++;
 8009f1e:	7afb      	ldrb	r3, [r7, #11]
 8009f20:	3301      	adds	r3, #1
 8009f22:	72fb      	strb	r3, [r7, #11]
      break;
 8009f24:	e021      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	7c1b      	ldrb	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10d      	bne.n	8009f4a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f36:	f107 0208 	add.w	r2, r7, #8
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4798      	blx	r3
 8009f3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3301      	adds	r3, #1
 8009f44:	2207      	movs	r2, #7
 8009f46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f48:	e00f      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fa10 	bl	800a372 <USBD_CtlError>
        err++;
 8009f52:	7afb      	ldrb	r3, [r7, #11]
 8009f54:	3301      	adds	r3, #1
 8009f56:	72fb      	strb	r3, [r7, #11]
      break;
 8009f58:	e007      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fa08 	bl	800a372 <USBD_CtlError>
      err++;
 8009f62:	7afb      	ldrb	r3, [r7, #11]
 8009f64:	3301      	adds	r3, #1
 8009f66:	72fb      	strb	r3, [r7, #11]
      break;
 8009f68:	bf00      	nop
  }

  if (err != 0U)
 8009f6a:	7afb      	ldrb	r3, [r7, #11]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d11e      	bne.n	8009fae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	88db      	ldrh	r3, [r3, #6]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d016      	beq.n	8009fa6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009f78:	893b      	ldrh	r3, [r7, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00e      	beq.n	8009f9c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	88da      	ldrh	r2, [r3, #6]
 8009f82:	893b      	ldrh	r3, [r7, #8]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	bf28      	it	cs
 8009f88:	4613      	movcs	r3, r2
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f8e:	893b      	ldrh	r3, [r7, #8]
 8009f90:	461a      	mov	r2, r3
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fa69 	bl	800a46c <USBD_CtlSendData>
 8009f9a:	e009      	b.n	8009fb0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f9e7 	bl	800a372 <USBD_CtlError>
 8009fa4:	e004      	b.n	8009fb0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fa9d 	bl	800a4e6 <USBD_CtlSendStatus>
 8009fac:	e000      	b.n	8009fb0 <USBD_GetDescriptor+0x320>
    return;
 8009fae:	bf00      	nop
  }
}
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop

08009fb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	889b      	ldrh	r3, [r3, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d131      	bne.n	800a02e <USBD_SetAddress+0x76>
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	88db      	ldrh	r3, [r3, #6]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d12d      	bne.n	800a02e <USBD_SetAddress+0x76>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	885b      	ldrh	r3, [r3, #2]
 8009fd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fd8:	d829      	bhi.n	800a02e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	885b      	ldrh	r3, [r3, #2]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fe4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d104      	bne.n	8009ffc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f9bc 	bl	800a372 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffa:	e01d      	b.n	800a038 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	7bfa      	ldrb	r2, [r7, #15]
 800a000:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fea9 	bl	800ad60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fa69 	bl	800a4e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a014:	7bfb      	ldrb	r3, [r7, #15]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d004      	beq.n	800a024 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2202      	movs	r2, #2
 800a01e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a022:	e009      	b.n	800a038 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a02c:	e004      	b.n	800a038 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f99e 	bl	800a372 <USBD_CtlError>
  }
}
 800a036:	bf00      	nop
 800a038:	bf00      	nop
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	885b      	ldrh	r3, [r3, #2]
 800a052:	b2da      	uxtb	r2, r3
 800a054:	4b4e      	ldr	r3, [pc, #312]	@ (800a190 <USBD_SetConfig+0x150>)
 800a056:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a058:	4b4d      	ldr	r3, [pc, #308]	@ (800a190 <USBD_SetConfig+0x150>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d905      	bls.n	800a06c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f985 	bl	800a372 <USBD_CtlError>
    return USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	e08c      	b.n	800a186 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b02      	cmp	r3, #2
 800a076:	d002      	beq.n	800a07e <USBD_SetConfig+0x3e>
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d029      	beq.n	800a0d0 <USBD_SetConfig+0x90>
 800a07c:	e075      	b.n	800a16a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a07e:	4b44      	ldr	r3, [pc, #272]	@ (800a190 <USBD_SetConfig+0x150>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d020      	beq.n	800a0c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a086:	4b42      	ldr	r3, [pc, #264]	@ (800a190 <USBD_SetConfig+0x150>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a090:	4b3f      	ldr	r3, [pc, #252]	@ (800a190 <USBD_SetConfig+0x150>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7fe ffb9 	bl	800900e <USBD_SetClassConfig>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d008      	beq.n	800a0b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f962 	bl	800a372 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0b6:	e065      	b.n	800a184 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fa14 	bl	800a4e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2203      	movs	r2, #3
 800a0c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a0c6:	e05d      	b.n	800a184 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fa0c 	bl	800a4e6 <USBD_CtlSendStatus>
      break;
 800a0ce:	e059      	b.n	800a184 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0d0:	4b2f      	ldr	r3, [pc, #188]	@ (800a190 <USBD_SetConfig+0x150>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d112      	bne.n	800a0fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a0e0:	4b2b      	ldr	r3, [pc, #172]	@ (800a190 <USBD_SetConfig+0x150>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0ea:	4b29      	ldr	r3, [pc, #164]	@ (800a190 <USBD_SetConfig+0x150>)
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7fe ffa8 	bl	8009046 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f9f5 	bl	800a4e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0fc:	e042      	b.n	800a184 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a0fe:	4b24      	ldr	r3, [pc, #144]	@ (800a190 <USBD_SetConfig+0x150>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d02a      	beq.n	800a162 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7fe ff96 	bl	8009046 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a11a:	4b1d      	ldr	r3, [pc, #116]	@ (800a190 <USBD_SetConfig+0x150>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a124:	4b1a      	ldr	r3, [pc, #104]	@ (800a190 <USBD_SetConfig+0x150>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7fe ff6f 	bl	800900e <USBD_SetClassConfig>
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00f      	beq.n	800a15a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f918 	bl	800a372 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	b2db      	uxtb	r3, r3
 800a148:	4619      	mov	r1, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7fe ff7b 	bl	8009046 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2202      	movs	r2, #2
 800a154:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a158:	e014      	b.n	800a184 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f9c3 	bl	800a4e6 <USBD_CtlSendStatus>
      break;
 800a160:	e010      	b.n	800a184 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f9bf 	bl	800a4e6 <USBD_CtlSendStatus>
      break;
 800a168:	e00c      	b.n	800a184 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f900 	bl	800a372 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a172:	4b07      	ldr	r3, [pc, #28]	@ (800a190 <USBD_SetConfig+0x150>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fe ff64 	bl	8009046 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a17e:	2303      	movs	r3, #3
 800a180:	73fb      	strb	r3, [r7, #15]
      break;
 800a182:	bf00      	nop
  }

  return ret;
 800a184:	7bfb      	ldrb	r3, [r7, #15]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	2400036c 	.word	0x2400036c

0800a194 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	88db      	ldrh	r3, [r3, #6]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d004      	beq.n	800a1b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f8e2 	bl	800a372 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1ae:	e023      	b.n	800a1f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	dc02      	bgt.n	800a1c2 <USBD_GetConfig+0x2e>
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dc03      	bgt.n	800a1c8 <USBD_GetConfig+0x34>
 800a1c0:	e015      	b.n	800a1ee <USBD_GetConfig+0x5a>
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d00b      	beq.n	800a1de <USBD_GetConfig+0x4a>
 800a1c6:	e012      	b.n	800a1ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f948 	bl	800a46c <USBD_CtlSendData>
        break;
 800a1dc:	e00c      	b.n	800a1f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f940 	bl	800a46c <USBD_CtlSendData>
        break;
 800a1ec:	e004      	b.n	800a1f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8be 	bl	800a372 <USBD_CtlError>
        break;
 800a1f6:	bf00      	nop
}
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a210:	b2db      	uxtb	r3, r3
 800a212:	3b01      	subs	r3, #1
 800a214:	2b02      	cmp	r3, #2
 800a216:	d81e      	bhi.n	800a256 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	88db      	ldrh	r3, [r3, #6]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d004      	beq.n	800a22a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8a5 	bl	800a372 <USBD_CtlError>
        break;
 800a228:	e01a      	b.n	800a260 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a236:	2b00      	cmp	r3, #0
 800a238:	d005      	beq.n	800a246 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	f043 0202 	orr.w	r2, r3, #2
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	330c      	adds	r3, #12
 800a24a:	2202      	movs	r2, #2
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f90c 	bl	800a46c <USBD_CtlSendData>
      break;
 800a254:	e004      	b.n	800a260 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f88a 	bl	800a372 <USBD_CtlError>
      break;
 800a25e:	bf00      	nop
  }
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	885b      	ldrh	r3, [r3, #2]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d107      	bne.n	800a28a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f92f 	bl	800a4e6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a288:	e013      	b.n	800a2b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	885b      	ldrh	r3, [r3, #2]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d10b      	bne.n	800a2aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	889b      	ldrh	r3, [r3, #4]
 800a296:	0a1b      	lsrs	r3, r3, #8
 800a298:	b29b      	uxth	r3, r3
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f91f 	bl	800a4e6 <USBD_CtlSendStatus>
}
 800a2a8:	e003      	b.n	800a2b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f860 	bl	800a372 <USBD_CtlError>
}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d80b      	bhi.n	800a2ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	885b      	ldrh	r3, [r3, #2]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d10c      	bne.n	800a2f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f8ff 	bl	800a4e6 <USBD_CtlSendStatus>
      }
      break;
 800a2e8:	e004      	b.n	800a2f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f840 	bl	800a372 <USBD_CtlError>
      break;
 800a2f2:	e000      	b.n	800a2f6 <USBD_ClrFeature+0x3c>
      break;
 800a2f4:	bf00      	nop
  }
}
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	781a      	ldrb	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3301      	adds	r3, #1
 800a318:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	781a      	ldrb	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7ff fa16 	bl	800975a <SWAPBYTE>
 800a32e:	4603      	mov	r3, r0
 800a330:	461a      	mov	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3301      	adds	r3, #1
 800a33a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3301      	adds	r3, #1
 800a340:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff fa09 	bl	800975a <SWAPBYTE>
 800a348:	4603      	mov	r3, r0
 800a34a:	461a      	mov	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	3301      	adds	r3, #1
 800a354:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3301      	adds	r3, #1
 800a35a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff f9fc 	bl	800975a <SWAPBYTE>
 800a362:	4603      	mov	r3, r0
 800a364:	461a      	mov	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	80da      	strh	r2, [r3, #6]
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a37c:	2180      	movs	r1, #128	@ 0x80
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fc84 	bl	800ac8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a384:	2100      	movs	r1, #0
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fc80 	bl	800ac8c <USBD_LL_StallEP>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d042      	beq.n	800a430 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a3ae:	6938      	ldr	r0, [r7, #16]
 800a3b0:	f000 f842 	bl	800a438 <USBD_GetLen>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3be:	d808      	bhi.n	800a3d2 <USBD_GetString+0x3e>
 800a3c0:	6938      	ldr	r0, [r7, #16]
 800a3c2:	f000 f839 	bl	800a438 <USBD_GetLen>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	005b      	lsls	r3, r3, #1
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	e001      	b.n	800a3d6 <USBD_GetString+0x42>
 800a3d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	4413      	add	r3, r2
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	7812      	ldrb	r2, [r2, #0]
 800a3e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	2203      	movs	r2, #3
 800a3f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3fc:	e013      	b.n	800a426 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	4413      	add	r3, r2
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	7812      	ldrb	r2, [r2, #0]
 800a408:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	3301      	adds	r3, #1
 800a40e:	613b      	str	r3, [r7, #16]
    idx++;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	3301      	adds	r3, #1
 800a414:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	4413      	add	r3, r2
 800a41c:	2200      	movs	r2, #0
 800a41e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	3301      	adds	r3, #1
 800a424:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1e7      	bne.n	800a3fe <USBD_GetString+0x6a>
 800a42e:	e000      	b.n	800a432 <USBD_GetString+0x9e>
    return;
 800a430:	bf00      	nop
  }
}
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a448:	e005      	b.n	800a456 <USBD_GetLen+0x1e>
  {
    len++;
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	3301      	adds	r3, #1
 800a44e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	3301      	adds	r3, #1
 800a454:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1f5      	bne.n	800a44a <USBD_GetLen+0x12>
  }

  return len;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2202      	movs	r2, #2
 800a47c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	2100      	movs	r1, #0
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f000 fc83 	bl	800ad9e <USBD_LL_Transmit>

  return USBD_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	60f8      	str	r0, [r7, #12]
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 fc72 	bl	800ad9e <USBD_LL_Transmit>

  return USBD_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 fc82 	bl	800ade0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2204      	movs	r2, #4
 800a4f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fc4e 	bl	800ad9e <USBD_LL_Transmit>

  return USBD_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2205      	movs	r2, #5
 800a518:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a51c:	2300      	movs	r3, #0
 800a51e:	2200      	movs	r2, #0
 800a520:	2100      	movs	r1, #0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fc5c 	bl	800ade0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
	...

0800a534 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a538:	2201      	movs	r2, #1
 800a53a:	490f      	ldr	r1, [pc, #60]	@ (800a578 <MX_USB_DEVICE_Init+0x44>)
 800a53c:	480f      	ldr	r0, [pc, #60]	@ (800a57c <MX_USB_DEVICE_Init+0x48>)
 800a53e:	f7fe fce9 	bl	8008f14 <USBD_Init>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a548:	f7f6 fe88 	bl	800125c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800a54c:	490c      	ldr	r1, [pc, #48]	@ (800a580 <MX_USB_DEVICE_Init+0x4c>)
 800a54e:	480b      	ldr	r0, [pc, #44]	@ (800a57c <MX_USB_DEVICE_Init+0x48>)
 800a550:	f7fe fd10 	bl	8008f74 <USBD_RegisterClass>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a55a:	f7f6 fe7f 	bl	800125c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a55e:	4807      	ldr	r0, [pc, #28]	@ (800a57c <MX_USB_DEVICE_Init+0x48>)
 800a560:	f7fe fd3e 	bl	8008fe0 <USBD_Start>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a56a:	f7f6 fe77 	bl	800125c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a56e:	f7f8 ff79 	bl	8003464 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a572:	bf00      	nop
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	24000120 	.word	0x24000120
 800a57c:	24000370 	.word	0x24000370
 800a580:	2400006c 	.word	0x2400006c

0800a584 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	4603      	mov	r3, r0
 800a58c:	6039      	str	r1, [r7, #0]
 800a58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	2212      	movs	r2, #18
 800a594:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a596:	4b03      	ldr	r3, [pc, #12]	@ (800a5a4 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a598:	4618      	mov	r0, r3
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	24000140 	.word	0x24000140

0800a5a8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	6039      	str	r1, [r7, #0]
 800a5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2204      	movs	r2, #4
 800a5b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5ba:	4b03      	ldr	r3, [pc, #12]	@ (800a5c8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	24000154 	.word	0x24000154

0800a5cc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	6039      	str	r1, [r7, #0]
 800a5d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5d8:	79fb      	ldrb	r3, [r7, #7]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d105      	bne.n	800a5ea <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	4907      	ldr	r1, [pc, #28]	@ (800a600 <USBD_HS_ProductStrDescriptor+0x34>)
 800a5e2:	4808      	ldr	r0, [pc, #32]	@ (800a604 <USBD_HS_ProductStrDescriptor+0x38>)
 800a5e4:	f7ff fed6 	bl	800a394 <USBD_GetString>
 800a5e8:	e004      	b.n	800a5f4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	4904      	ldr	r1, [pc, #16]	@ (800a600 <USBD_HS_ProductStrDescriptor+0x34>)
 800a5ee:	4805      	ldr	r0, [pc, #20]	@ (800a604 <USBD_HS_ProductStrDescriptor+0x38>)
 800a5f0:	f7ff fed0 	bl	800a394 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5f4:	4b02      	ldr	r3, [pc, #8]	@ (800a600 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	2400064c 	.word	0x2400064c
 800a604:	0800b8e0 	.word	0x0800b8e0

0800a608 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	6039      	str	r1, [r7, #0]
 800a612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	4904      	ldr	r1, [pc, #16]	@ (800a628 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a618:	4804      	ldr	r0, [pc, #16]	@ (800a62c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a61a:	f7ff febb 	bl	800a394 <USBD_GetString>
  return USBD_StrDesc;
 800a61e:	4b02      	ldr	r3, [pc, #8]	@ (800a628 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	2400064c 	.word	0x2400064c
 800a62c:	0800b8f8 	.word	0x0800b8f8

0800a630 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	6039      	str	r1, [r7, #0]
 800a63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	221a      	movs	r2, #26
 800a640:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a642:	f000 f843 	bl	800a6cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a646:	4b02      	ldr	r3, [pc, #8]	@ (800a650 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	24000158 	.word	0x24000158

0800a654 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d105      	bne.n	800a672 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	4907      	ldr	r1, [pc, #28]	@ (800a688 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a66a:	4808      	ldr	r0, [pc, #32]	@ (800a68c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a66c:	f7ff fe92 	bl	800a394 <USBD_GetString>
 800a670:	e004      	b.n	800a67c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	4904      	ldr	r1, [pc, #16]	@ (800a688 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a676:	4805      	ldr	r0, [pc, #20]	@ (800a68c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a678:	f7ff fe8c 	bl	800a394 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a67c:	4b02      	ldr	r3, [pc, #8]	@ (800a688 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	2400064c 	.word	0x2400064c
 800a68c:	0800b90c 	.word	0x0800b90c

0800a690 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	6039      	str	r1, [r7, #0]
 800a69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a69c:	79fb      	ldrb	r3, [r7, #7]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d105      	bne.n	800a6ae <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	4907      	ldr	r1, [pc, #28]	@ (800a6c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a6a6:	4808      	ldr	r0, [pc, #32]	@ (800a6c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a6a8:	f7ff fe74 	bl	800a394 <USBD_GetString>
 800a6ac:	e004      	b.n	800a6b8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	4904      	ldr	r1, [pc, #16]	@ (800a6c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a6b2:	4805      	ldr	r0, [pc, #20]	@ (800a6c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a6b4:	f7ff fe6e 	bl	800a394 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6b8:	4b02      	ldr	r3, [pc, #8]	@ (800a6c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	2400064c 	.word	0x2400064c
 800a6c8:	0800b918 	.word	0x0800b918

0800a6cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a710 <Get_SerialNum+0x44>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a714 <Get_SerialNum+0x48>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6de:	4b0e      	ldr	r3, [pc, #56]	@ (800a718 <Get_SerialNum+0x4c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d009      	beq.n	800a706 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6f2:	2208      	movs	r2, #8
 800a6f4:	4909      	ldr	r1, [pc, #36]	@ (800a71c <Get_SerialNum+0x50>)
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f000 f814 	bl	800a724 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6fc:	2204      	movs	r2, #4
 800a6fe:	4908      	ldr	r1, [pc, #32]	@ (800a720 <Get_SerialNum+0x54>)
 800a700:	68b8      	ldr	r0, [r7, #8]
 800a702:	f000 f80f 	bl	800a724 <IntToUnicode>
  }
}
 800a706:	bf00      	nop
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	1ff1e800 	.word	0x1ff1e800
 800a714:	1ff1e804 	.word	0x1ff1e804
 800a718:	1ff1e808 	.word	0x1ff1e808
 800a71c:	2400015a 	.word	0x2400015a
 800a720:	2400016a 	.word	0x2400016a

0800a724 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	4613      	mov	r3, r2
 800a730:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a736:	2300      	movs	r3, #0
 800a738:	75fb      	strb	r3, [r7, #23]
 800a73a:	e027      	b.n	800a78c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	0f1b      	lsrs	r3, r3, #28
 800a740:	2b09      	cmp	r3, #9
 800a742:	d80b      	bhi.n	800a75c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	0f1b      	lsrs	r3, r3, #28
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	4619      	mov	r1, r3
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	440b      	add	r3, r1
 800a754:	3230      	adds	r2, #48	@ 0x30
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	701a      	strb	r2, [r3, #0]
 800a75a:	e00a      	b.n	800a772 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	0f1b      	lsrs	r3, r3, #28
 800a760:	b2da      	uxtb	r2, r3
 800a762:	7dfb      	ldrb	r3, [r7, #23]
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	4619      	mov	r1, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	440b      	add	r3, r1
 800a76c:	3237      	adds	r2, #55	@ 0x37
 800a76e:	b2d2      	uxtb	r2, r2
 800a770:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	3301      	adds	r3, #1
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	4413      	add	r3, r2
 800a782:	2200      	movs	r2, #0
 800a784:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a786:	7dfb      	ldrb	r3, [r7, #23]
 800a788:	3301      	adds	r3, #1
 800a78a:	75fb      	strb	r3, [r7, #23]
 800a78c:	7dfa      	ldrb	r2, [r7, #23]
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	429a      	cmp	r2, r3
 800a792:	d3d3      	bcc.n	800a73c <IntToUnicode+0x18>
  }
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	371c      	adds	r7, #28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
	...

0800a7a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b0bc      	sub	sp, #240	@ 0xf0
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	605a      	str	r2, [r3, #4]
 800a7b6:	609a      	str	r2, [r3, #8]
 800a7b8:	60da      	str	r2, [r3, #12]
 800a7ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a7bc:	f107 0320 	add.w	r3, r7, #32
 800a7c0:	22b8      	movs	r2, #184	@ 0xb8
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 fb91 	bl	800aeec <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a58      	ldr	r2, [pc, #352]	@ (800a930 <HAL_PCD_MspInit+0x18c>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	f040 80a9 	bne.w	800a928 <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a7d6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a7da:	f04f 0300 	mov.w	r3, #0
 800a7de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a7e2:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a7e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a7ea:	f107 0320 	add.w	r3, r7, #32
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7f9 fdae 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800a7fa:	f7f6 fd2f 	bl	800125c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a7fe:	f7f8 fe31 	bl	8003464 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a802:	4b4c      	ldr	r3, [pc, #304]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a808:	4a4a      	ldr	r2, [pc, #296]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a80a:	f043 0304 	orr.w	r3, r3, #4
 800a80e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a812:	4b48      	ldr	r3, [pc, #288]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a820:	4b44      	ldr	r3, [pc, #272]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a826:	4a43      	ldr	r2, [pc, #268]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a828:	f043 0301 	orr.w	r3, r3, #1
 800a82c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a830:	4b40      	ldr	r3, [pc, #256]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	61bb      	str	r3, [r7, #24]
 800a83c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a83e:	4b3d      	ldr	r3, [pc, #244]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a844:	4a3b      	ldr	r2, [pc, #236]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a846:	f043 0302 	orr.w	r3, r3, #2
 800a84a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a84e:	4b39      	ldr	r3, [pc, #228]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a854:	f003 0302 	and.w	r3, r3, #2
 800a858:	617b      	str	r3, [r7, #20]
 800a85a:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800a85c:	230d      	movs	r3, #13
 800a85e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a862:	2302      	movs	r3, #2
 800a864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a868:	2300      	movs	r3, #0
 800a86a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a86e:	2302      	movs	r3, #2
 800a870:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a874:	230a      	movs	r3, #10
 800a876:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a87a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a87e:	4619      	mov	r1, r3
 800a880:	482d      	ldr	r0, [pc, #180]	@ (800a938 <HAL_PCD_MspInit+0x194>)
 800a882:	f7f7 f96d 	bl	8001b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800a886:	2328      	movs	r3, #40	@ 0x28
 800a888:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a88c:	2302      	movs	r3, #2
 800a88e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a892:	2300      	movs	r3, #0
 800a894:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a898:	2302      	movs	r3, #2
 800a89a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a89e:	230a      	movs	r3, #10
 800a8a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4824      	ldr	r0, [pc, #144]	@ (800a93c <HAL_PCD_MspInit+0x198>)
 800a8ac:	f7f7 f958 	bl	8001b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800a8b0:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800a8b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a8c4:	2302      	movs	r3, #2
 800a8c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a8ca:	230a      	movs	r3, #10
 800a8cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	481a      	ldr	r0, [pc, #104]	@ (800a940 <HAL_PCD_MspInit+0x19c>)
 800a8d8:	f7f7 f942 	bl	8001b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a8dc:	4b15      	ldr	r3, [pc, #84]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a8de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a8e2:	4a14      	ldr	r2, [pc, #80]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a8e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a8e8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a8ec:	4b11      	ldr	r3, [pc, #68]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a8ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a8f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8f6:	613b      	str	r3, [r7, #16]
 800a8f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a8fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a900:	4a0c      	ldr	r2, [pc, #48]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a902:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a906:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a90a:	4b0a      	ldr	r3, [pc, #40]	@ (800a934 <HAL_PCD_MspInit+0x190>)
 800a90c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a910:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a918:	2200      	movs	r2, #0
 800a91a:	2100      	movs	r1, #0
 800a91c:	204d      	movs	r0, #77	@ 0x4d
 800a91e:	f7f7 f872 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a922:	204d      	movs	r0, #77	@ 0x4d
 800a924:	f7f7 f889 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a928:	bf00      	nop
 800a92a:	37f0      	adds	r7, #240	@ 0xf0
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	40040000 	.word	0x40040000
 800a934:	58024400 	.word	0x58024400
 800a938:	58020800 	.word	0x58020800
 800a93c:	58020000 	.word	0x58020000
 800a940:	58020400 	.word	0x58020400

0800a944 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a958:	4619      	mov	r1, r3
 800a95a:	4610      	mov	r0, r2
 800a95c:	f7fe fb8d 	bl	800907a <USBD_LL_SetupStage>
}
 800a960:	bf00      	nop
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a97a:	78fa      	ldrb	r2, [r7, #3]
 800a97c:	6879      	ldr	r1, [r7, #4]
 800a97e:	4613      	mov	r3, r2
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	4413      	add	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	440b      	add	r3, r1
 800a988:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	4619      	mov	r1, r3
 800a992:	f7fe fbc7 	bl	8009124 <USBD_LL_DataOutStage>
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a9b0:	78fa      	ldrb	r2, [r7, #3]
 800a9b2:	6879      	ldr	r1, [r7, #4]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	4413      	add	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	440b      	add	r3, r1
 800a9be:	3320      	adds	r3, #32
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	78fb      	ldrb	r3, [r7, #3]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	f7fe fc60 	bl	800928a <USBD_LL_DataInStage>
}
 800a9ca:	bf00      	nop
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe fd9a 	bl	800951a <USBD_LL_SOF>
}
 800a9e6:	bf00      	nop
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	79db      	ldrb	r3, [r3, #7]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d102      	bne.n	800aa08 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]
 800aa06:	e008      	b.n	800aa1a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	79db      	ldrb	r3, [r3, #7]
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d102      	bne.n	800aa16 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa10:	2301      	movs	r3, #1
 800aa12:	73fb      	strb	r3, [r7, #15]
 800aa14:	e001      	b.n	800aa1a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa16:	f7f6 fc21 	bl	800125c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa20:	7bfa      	ldrb	r2, [r7, #15]
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fe fd34 	bl	8009492 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fcdc 	bl	80093ee <USBD_LL_Reset>
}
 800aa36:	bf00      	nop
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fe fd2f 	bl	80094b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	6812      	ldr	r2, [r2, #0]
 800aa62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa66:	f043 0301 	orr.w	r3, r3, #1
 800aa6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	7adb      	ldrb	r3, [r3, #11]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d005      	beq.n	800aa80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa74:	4b04      	ldr	r3, [pc, #16]	@ (800aa88 <HAL_PCD_SuspendCallback+0x48>)
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	4a03      	ldr	r2, [pc, #12]	@ (800aa88 <HAL_PCD_SuspendCallback+0x48>)
 800aa7a:	f043 0306 	orr.w	r3, r3, #6
 800aa7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	e000ed00 	.word	0xe000ed00

0800aa8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fe fd25 	bl	80094ea <USBD_LL_Resume>
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	4611      	mov	r1, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe fd7d 	bl	80095be <USBD_LL_IsoOUTIncomplete>
}
 800aac4:	bf00      	nop
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aade:	78fa      	ldrb	r2, [r7, #3]
 800aae0:	4611      	mov	r1, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fd39 	bl	800955a <USBD_LL_IsoINIncomplete>
}
 800aae8:	bf00      	nop
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe fd8f 	bl	8009622 <USBD_LL_DevConnected>
}
 800ab04:	bf00      	nop
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fd8c 	bl	8009638 <USBD_LL_DevDisconnected>
}
 800ab20:	bf00      	nop
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d140      	bne.n	800abba <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ab38:	4a22      	ldr	r2, [pc, #136]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a20      	ldr	r2, [pc, #128]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab44:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ab48:	4b1e      	ldr	r3, [pc, #120]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab4a:	4a1f      	ldr	r2, [pc, #124]	@ (800abc8 <USBD_LL_Init+0xa0>)
 800ab4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800ab4e:	4b1d      	ldr	r3, [pc, #116]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab50:	2209      	movs	r2, #9
 800ab52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800ab54:	4b1b      	ldr	r3, [pc, #108]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ab5a:	4b1a      	ldr	r3, [pc, #104]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800ab60:	4b18      	ldr	r3, [pc, #96]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ab66:	4b17      	ldr	r3, [pc, #92]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ab6c:	4b15      	ldr	r3, [pc, #84]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800ab72:	4b14      	ldr	r3, [pc, #80]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ab78:	4b12      	ldr	r3, [pc, #72]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ab7e:	4b11      	ldr	r3, [pc, #68]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ab84:	4b0f      	ldr	r3, [pc, #60]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ab8a:	480e      	ldr	r0, [pc, #56]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800ab8c:	f7f7 f9a8 	bl	8001ee0 <HAL_PCD_Init>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ab96:	f7f6 fb61 	bl	800125c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ab9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab9e:	4809      	ldr	r0, [pc, #36]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800aba0:	f7f8 fbe5 	bl	800336e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800aba4:	2280      	movs	r2, #128	@ 0x80
 800aba6:	2100      	movs	r1, #0
 800aba8:	4806      	ldr	r0, [pc, #24]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800abaa:	f7f8 fb99 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800abae:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800abb2:	2101      	movs	r1, #1
 800abb4:	4803      	ldr	r0, [pc, #12]	@ (800abc4 <USBD_LL_Init+0x9c>)
 800abb6:	f7f8 fb93 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	2400084c 	.word	0x2400084c
 800abc8:	40040000 	.word	0x40040000

0800abcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7f7 fa88 	bl	80020f8 <HAL_PCD_Start>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f930 	bl	800ae54 <USBD_Get_USB_Status>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4603      	mov	r3, r0
 800ac12:	70fb      	strb	r3, [r7, #3]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70bb      	strb	r3, [r7, #2]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac2a:	78bb      	ldrb	r3, [r7, #2]
 800ac2c:	883a      	ldrh	r2, [r7, #0]
 800ac2e:	78f9      	ldrb	r1, [r7, #3]
 800ac30:	f7f7 ff89 	bl	8002b46 <HAL_PCD_EP_Open>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f90a 	bl	800ae54 <USBD_Get_USB_Status>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	460b      	mov	r3, r1
 800ac58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac68:	78fa      	ldrb	r2, [r7, #3]
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f7 ffd4 	bl	8002c1a <HAL_PCD_EP_Close>
 800ac72:	4603      	mov	r3, r0
 800ac74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 f8eb 	bl	800ae54 <USBD_Get_USB_Status>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aca6:	78fa      	ldrb	r2, [r7, #3]
 800aca8:	4611      	mov	r1, r2
 800acaa:	4618      	mov	r0, r3
 800acac:	f7f8 f874 	bl	8002d98 <HAL_PCD_EP_SetStall>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 f8cc 	bl	800ae54 <USBD_Get_USB_Status>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b084      	sub	sp, #16
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	460b      	mov	r3, r1
 800acd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ace4:	78fa      	ldrb	r2, [r7, #3]
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f7f8 f8b8 	bl	8002e5e <HAL_PCD_EP_ClrStall>
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 f8ad 	bl	800ae54 <USBD_Get_USB_Status>
 800acfa:	4603      	mov	r3, r0
 800acfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	da0b      	bge.n	800ad3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad2a:	68f9      	ldr	r1, [r7, #12]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	440b      	add	r3, r1
 800ad36:	3316      	adds	r3, #22
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	e00b      	b.n	800ad54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad42:	68f9      	ldr	r1, [r7, #12]
 800ad44:	4613      	mov	r3, r2
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	4413      	add	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	440b      	add	r3, r1
 800ad4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ad52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad7a:	78fa      	ldrb	r2, [r7, #3]
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7f7 febd 	bl	8002afe <HAL_PCD_SetAddress>
 800ad84:	4603      	mov	r3, r0
 800ad86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 f862 	bl	800ae54 <USBD_Get_USB_Status>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b086      	sub	sp, #24
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	60f8      	str	r0, [r7, #12]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
 800adaa:	460b      	mov	r3, r1
 800adac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800adbc:	7af9      	ldrb	r1, [r7, #11]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	f7f7 ffaf 	bl	8002d24 <HAL_PCD_EP_Transmit>
 800adc6:	4603      	mov	r3, r0
 800adc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 f841 	bl	800ae54 <USBD_Get_USB_Status>
 800add2:	4603      	mov	r3, r0
 800add4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800add6:	7dbb      	ldrb	r3, [r7, #22]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	607a      	str	r2, [r7, #4]
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	460b      	mov	r3, r1
 800adee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800adfe:	7af9      	ldrb	r1, [r7, #11]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	f7f7 ff53 	bl	8002cae <HAL_PCD_EP_Receive>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 f820 	bl	800ae54 <USBD_Get_USB_Status>
 800ae14:	4603      	mov	r3, r0
 800ae16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae18:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae2c:	4b03      	ldr	r3, [pc, #12]	@ (800ae3c <USBD_static_malloc+0x18>)
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	370c      	adds	r7, #12
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	24000d30 	.word	0x24000d30

0800ae40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae62:	79fb      	ldrb	r3, [r7, #7]
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d817      	bhi.n	800ae98 <USBD_Get_USB_Status+0x44>
 800ae68:	a201      	add	r2, pc, #4	@ (adr r2, 800ae70 <USBD_Get_USB_Status+0x1c>)
 800ae6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6e:	bf00      	nop
 800ae70:	0800ae81 	.word	0x0800ae81
 800ae74:	0800ae87 	.word	0x0800ae87
 800ae78:	0800ae8d 	.word	0x0800ae8d
 800ae7c:	0800ae93 	.word	0x0800ae93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	73fb      	strb	r3, [r7, #15]
    break;
 800ae84:	e00b      	b.n	800ae9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae86:	2303      	movs	r3, #3
 800ae88:	73fb      	strb	r3, [r7, #15]
    break;
 800ae8a:	e008      	b.n	800ae9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae90:	e005      	b.n	800ae9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae92:	2303      	movs	r3, #3
 800ae94:	73fb      	strb	r3, [r7, #15]
    break;
 800ae96:	e002      	b.n	800ae9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae9c:	bf00      	nop
  }
  return usb_status;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <siprintf>:
 800aeac:	b40e      	push	{r1, r2, r3}
 800aeae:	b500      	push	{lr}
 800aeb0:	b09c      	sub	sp, #112	@ 0x70
 800aeb2:	ab1d      	add	r3, sp, #116	@ 0x74
 800aeb4:	9002      	str	r0, [sp, #8]
 800aeb6:	9006      	str	r0, [sp, #24]
 800aeb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aebc:	4809      	ldr	r0, [pc, #36]	@ (800aee4 <siprintf+0x38>)
 800aebe:	9107      	str	r1, [sp, #28]
 800aec0:	9104      	str	r1, [sp, #16]
 800aec2:	4909      	ldr	r1, [pc, #36]	@ (800aee8 <siprintf+0x3c>)
 800aec4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aec8:	9105      	str	r1, [sp, #20]
 800aeca:	6800      	ldr	r0, [r0, #0]
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	a902      	add	r1, sp, #8
 800aed0:	f000 f994 	bl	800b1fc <_svfiprintf_r>
 800aed4:	9b02      	ldr	r3, [sp, #8]
 800aed6:	2200      	movs	r2, #0
 800aed8:	701a      	strb	r2, [r3, #0]
 800aeda:	b01c      	add	sp, #112	@ 0x70
 800aedc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aee0:	b003      	add	sp, #12
 800aee2:	4770      	bx	lr
 800aee4:	24000174 	.word	0x24000174
 800aee8:	ffff0208 	.word	0xffff0208

0800aeec <memset>:
 800aeec:	4402      	add	r2, r0
 800aeee:	4603      	mov	r3, r0
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d100      	bne.n	800aef6 <memset+0xa>
 800aef4:	4770      	bx	lr
 800aef6:	f803 1b01 	strb.w	r1, [r3], #1
 800aefa:	e7f9      	b.n	800aef0 <memset+0x4>

0800aefc <__errno>:
 800aefc:	4b01      	ldr	r3, [pc, #4]	@ (800af04 <__errno+0x8>)
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	24000174 	.word	0x24000174

0800af08 <__libc_init_array>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	4d0d      	ldr	r5, [pc, #52]	@ (800af40 <__libc_init_array+0x38>)
 800af0c:	4c0d      	ldr	r4, [pc, #52]	@ (800af44 <__libc_init_array+0x3c>)
 800af0e:	1b64      	subs	r4, r4, r5
 800af10:	10a4      	asrs	r4, r4, #2
 800af12:	2600      	movs	r6, #0
 800af14:	42a6      	cmp	r6, r4
 800af16:	d109      	bne.n	800af2c <__libc_init_array+0x24>
 800af18:	4d0b      	ldr	r5, [pc, #44]	@ (800af48 <__libc_init_array+0x40>)
 800af1a:	4c0c      	ldr	r4, [pc, #48]	@ (800af4c <__libc_init_array+0x44>)
 800af1c:	f000 fc66 	bl	800b7ec <_init>
 800af20:	1b64      	subs	r4, r4, r5
 800af22:	10a4      	asrs	r4, r4, #2
 800af24:	2600      	movs	r6, #0
 800af26:	42a6      	cmp	r6, r4
 800af28:	d105      	bne.n	800af36 <__libc_init_array+0x2e>
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af30:	4798      	blx	r3
 800af32:	3601      	adds	r6, #1
 800af34:	e7ee      	b.n	800af14 <__libc_init_array+0xc>
 800af36:	f855 3b04 	ldr.w	r3, [r5], #4
 800af3a:	4798      	blx	r3
 800af3c:	3601      	adds	r6, #1
 800af3e:	e7f2      	b.n	800af26 <__libc_init_array+0x1e>
 800af40:	0800b99c 	.word	0x0800b99c
 800af44:	0800b99c 	.word	0x0800b99c
 800af48:	0800b99c 	.word	0x0800b99c
 800af4c:	0800b9a0 	.word	0x0800b9a0

0800af50 <__retarget_lock_acquire_recursive>:
 800af50:	4770      	bx	lr

0800af52 <__retarget_lock_release_recursive>:
 800af52:	4770      	bx	lr

0800af54 <_free_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4605      	mov	r5, r0
 800af58:	2900      	cmp	r1, #0
 800af5a:	d041      	beq.n	800afe0 <_free_r+0x8c>
 800af5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af60:	1f0c      	subs	r4, r1, #4
 800af62:	2b00      	cmp	r3, #0
 800af64:	bfb8      	it	lt
 800af66:	18e4      	addlt	r4, r4, r3
 800af68:	f000 f8e0 	bl	800b12c <__malloc_lock>
 800af6c:	4a1d      	ldr	r2, [pc, #116]	@ (800afe4 <_free_r+0x90>)
 800af6e:	6813      	ldr	r3, [r2, #0]
 800af70:	b933      	cbnz	r3, 800af80 <_free_r+0x2c>
 800af72:	6063      	str	r3, [r4, #4]
 800af74:	6014      	str	r4, [r2, #0]
 800af76:	4628      	mov	r0, r5
 800af78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af7c:	f000 b8dc 	b.w	800b138 <__malloc_unlock>
 800af80:	42a3      	cmp	r3, r4
 800af82:	d908      	bls.n	800af96 <_free_r+0x42>
 800af84:	6820      	ldr	r0, [r4, #0]
 800af86:	1821      	adds	r1, r4, r0
 800af88:	428b      	cmp	r3, r1
 800af8a:	bf01      	itttt	eq
 800af8c:	6819      	ldreq	r1, [r3, #0]
 800af8e:	685b      	ldreq	r3, [r3, #4]
 800af90:	1809      	addeq	r1, r1, r0
 800af92:	6021      	streq	r1, [r4, #0]
 800af94:	e7ed      	b.n	800af72 <_free_r+0x1e>
 800af96:	461a      	mov	r2, r3
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	b10b      	cbz	r3, 800afa0 <_free_r+0x4c>
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	d9fa      	bls.n	800af96 <_free_r+0x42>
 800afa0:	6811      	ldr	r1, [r2, #0]
 800afa2:	1850      	adds	r0, r2, r1
 800afa4:	42a0      	cmp	r0, r4
 800afa6:	d10b      	bne.n	800afc0 <_free_r+0x6c>
 800afa8:	6820      	ldr	r0, [r4, #0]
 800afaa:	4401      	add	r1, r0
 800afac:	1850      	adds	r0, r2, r1
 800afae:	4283      	cmp	r3, r0
 800afb0:	6011      	str	r1, [r2, #0]
 800afb2:	d1e0      	bne.n	800af76 <_free_r+0x22>
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	6053      	str	r3, [r2, #4]
 800afba:	4408      	add	r0, r1
 800afbc:	6010      	str	r0, [r2, #0]
 800afbe:	e7da      	b.n	800af76 <_free_r+0x22>
 800afc0:	d902      	bls.n	800afc8 <_free_r+0x74>
 800afc2:	230c      	movs	r3, #12
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	e7d6      	b.n	800af76 <_free_r+0x22>
 800afc8:	6820      	ldr	r0, [r4, #0]
 800afca:	1821      	adds	r1, r4, r0
 800afcc:	428b      	cmp	r3, r1
 800afce:	bf04      	itt	eq
 800afd0:	6819      	ldreq	r1, [r3, #0]
 800afd2:	685b      	ldreq	r3, [r3, #4]
 800afd4:	6063      	str	r3, [r4, #4]
 800afd6:	bf04      	itt	eq
 800afd8:	1809      	addeq	r1, r1, r0
 800afda:	6021      	streq	r1, [r4, #0]
 800afdc:	6054      	str	r4, [r2, #4]
 800afde:	e7ca      	b.n	800af76 <_free_r+0x22>
 800afe0:	bd38      	pop	{r3, r4, r5, pc}
 800afe2:	bf00      	nop
 800afe4:	24000e88 	.word	0x24000e88

0800afe8 <sbrk_aligned>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	4e0f      	ldr	r6, [pc, #60]	@ (800b028 <sbrk_aligned+0x40>)
 800afec:	460c      	mov	r4, r1
 800afee:	6831      	ldr	r1, [r6, #0]
 800aff0:	4605      	mov	r5, r0
 800aff2:	b911      	cbnz	r1, 800affa <sbrk_aligned+0x12>
 800aff4:	f000 fba6 	bl	800b744 <_sbrk_r>
 800aff8:	6030      	str	r0, [r6, #0]
 800affa:	4621      	mov	r1, r4
 800affc:	4628      	mov	r0, r5
 800affe:	f000 fba1 	bl	800b744 <_sbrk_r>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	d103      	bne.n	800b00e <sbrk_aligned+0x26>
 800b006:	f04f 34ff 	mov.w	r4, #4294967295
 800b00a:	4620      	mov	r0, r4
 800b00c:	bd70      	pop	{r4, r5, r6, pc}
 800b00e:	1cc4      	adds	r4, r0, #3
 800b010:	f024 0403 	bic.w	r4, r4, #3
 800b014:	42a0      	cmp	r0, r4
 800b016:	d0f8      	beq.n	800b00a <sbrk_aligned+0x22>
 800b018:	1a21      	subs	r1, r4, r0
 800b01a:	4628      	mov	r0, r5
 800b01c:	f000 fb92 	bl	800b744 <_sbrk_r>
 800b020:	3001      	adds	r0, #1
 800b022:	d1f2      	bne.n	800b00a <sbrk_aligned+0x22>
 800b024:	e7ef      	b.n	800b006 <sbrk_aligned+0x1e>
 800b026:	bf00      	nop
 800b028:	24000e84 	.word	0x24000e84

0800b02c <_malloc_r>:
 800b02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b030:	1ccd      	adds	r5, r1, #3
 800b032:	f025 0503 	bic.w	r5, r5, #3
 800b036:	3508      	adds	r5, #8
 800b038:	2d0c      	cmp	r5, #12
 800b03a:	bf38      	it	cc
 800b03c:	250c      	movcc	r5, #12
 800b03e:	2d00      	cmp	r5, #0
 800b040:	4606      	mov	r6, r0
 800b042:	db01      	blt.n	800b048 <_malloc_r+0x1c>
 800b044:	42a9      	cmp	r1, r5
 800b046:	d904      	bls.n	800b052 <_malloc_r+0x26>
 800b048:	230c      	movs	r3, #12
 800b04a:	6033      	str	r3, [r6, #0]
 800b04c:	2000      	movs	r0, #0
 800b04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b128 <_malloc_r+0xfc>
 800b056:	f000 f869 	bl	800b12c <__malloc_lock>
 800b05a:	f8d8 3000 	ldr.w	r3, [r8]
 800b05e:	461c      	mov	r4, r3
 800b060:	bb44      	cbnz	r4, 800b0b4 <_malloc_r+0x88>
 800b062:	4629      	mov	r1, r5
 800b064:	4630      	mov	r0, r6
 800b066:	f7ff ffbf 	bl	800afe8 <sbrk_aligned>
 800b06a:	1c43      	adds	r3, r0, #1
 800b06c:	4604      	mov	r4, r0
 800b06e:	d158      	bne.n	800b122 <_malloc_r+0xf6>
 800b070:	f8d8 4000 	ldr.w	r4, [r8]
 800b074:	4627      	mov	r7, r4
 800b076:	2f00      	cmp	r7, #0
 800b078:	d143      	bne.n	800b102 <_malloc_r+0xd6>
 800b07a:	2c00      	cmp	r4, #0
 800b07c:	d04b      	beq.n	800b116 <_malloc_r+0xea>
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	4639      	mov	r1, r7
 800b082:	4630      	mov	r0, r6
 800b084:	eb04 0903 	add.w	r9, r4, r3
 800b088:	f000 fb5c 	bl	800b744 <_sbrk_r>
 800b08c:	4581      	cmp	r9, r0
 800b08e:	d142      	bne.n	800b116 <_malloc_r+0xea>
 800b090:	6821      	ldr	r1, [r4, #0]
 800b092:	1a6d      	subs	r5, r5, r1
 800b094:	4629      	mov	r1, r5
 800b096:	4630      	mov	r0, r6
 800b098:	f7ff ffa6 	bl	800afe8 <sbrk_aligned>
 800b09c:	3001      	adds	r0, #1
 800b09e:	d03a      	beq.n	800b116 <_malloc_r+0xea>
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	442b      	add	r3, r5
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	bb62      	cbnz	r2, 800b108 <_malloc_r+0xdc>
 800b0ae:	f8c8 7000 	str.w	r7, [r8]
 800b0b2:	e00f      	b.n	800b0d4 <_malloc_r+0xa8>
 800b0b4:	6822      	ldr	r2, [r4, #0]
 800b0b6:	1b52      	subs	r2, r2, r5
 800b0b8:	d420      	bmi.n	800b0fc <_malloc_r+0xd0>
 800b0ba:	2a0b      	cmp	r2, #11
 800b0bc:	d917      	bls.n	800b0ee <_malloc_r+0xc2>
 800b0be:	1961      	adds	r1, r4, r5
 800b0c0:	42a3      	cmp	r3, r4
 800b0c2:	6025      	str	r5, [r4, #0]
 800b0c4:	bf18      	it	ne
 800b0c6:	6059      	strne	r1, [r3, #4]
 800b0c8:	6863      	ldr	r3, [r4, #4]
 800b0ca:	bf08      	it	eq
 800b0cc:	f8c8 1000 	streq.w	r1, [r8]
 800b0d0:	5162      	str	r2, [r4, r5]
 800b0d2:	604b      	str	r3, [r1, #4]
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f000 f82f 	bl	800b138 <__malloc_unlock>
 800b0da:	f104 000b 	add.w	r0, r4, #11
 800b0de:	1d23      	adds	r3, r4, #4
 800b0e0:	f020 0007 	bic.w	r0, r0, #7
 800b0e4:	1ac2      	subs	r2, r0, r3
 800b0e6:	bf1c      	itt	ne
 800b0e8:	1a1b      	subne	r3, r3, r0
 800b0ea:	50a3      	strne	r3, [r4, r2]
 800b0ec:	e7af      	b.n	800b04e <_malloc_r+0x22>
 800b0ee:	6862      	ldr	r2, [r4, #4]
 800b0f0:	42a3      	cmp	r3, r4
 800b0f2:	bf0c      	ite	eq
 800b0f4:	f8c8 2000 	streq.w	r2, [r8]
 800b0f8:	605a      	strne	r2, [r3, #4]
 800b0fa:	e7eb      	b.n	800b0d4 <_malloc_r+0xa8>
 800b0fc:	4623      	mov	r3, r4
 800b0fe:	6864      	ldr	r4, [r4, #4]
 800b100:	e7ae      	b.n	800b060 <_malloc_r+0x34>
 800b102:	463c      	mov	r4, r7
 800b104:	687f      	ldr	r7, [r7, #4]
 800b106:	e7b6      	b.n	800b076 <_malloc_r+0x4a>
 800b108:	461a      	mov	r2, r3
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	42a3      	cmp	r3, r4
 800b10e:	d1fb      	bne.n	800b108 <_malloc_r+0xdc>
 800b110:	2300      	movs	r3, #0
 800b112:	6053      	str	r3, [r2, #4]
 800b114:	e7de      	b.n	800b0d4 <_malloc_r+0xa8>
 800b116:	230c      	movs	r3, #12
 800b118:	6033      	str	r3, [r6, #0]
 800b11a:	4630      	mov	r0, r6
 800b11c:	f000 f80c 	bl	800b138 <__malloc_unlock>
 800b120:	e794      	b.n	800b04c <_malloc_r+0x20>
 800b122:	6005      	str	r5, [r0, #0]
 800b124:	e7d6      	b.n	800b0d4 <_malloc_r+0xa8>
 800b126:	bf00      	nop
 800b128:	24000e88 	.word	0x24000e88

0800b12c <__malloc_lock>:
 800b12c:	4801      	ldr	r0, [pc, #4]	@ (800b134 <__malloc_lock+0x8>)
 800b12e:	f7ff bf0f 	b.w	800af50 <__retarget_lock_acquire_recursive>
 800b132:	bf00      	nop
 800b134:	24000e80 	.word	0x24000e80

0800b138 <__malloc_unlock>:
 800b138:	4801      	ldr	r0, [pc, #4]	@ (800b140 <__malloc_unlock+0x8>)
 800b13a:	f7ff bf0a 	b.w	800af52 <__retarget_lock_release_recursive>
 800b13e:	bf00      	nop
 800b140:	24000e80 	.word	0x24000e80

0800b144 <__ssputs_r>:
 800b144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b148:	688e      	ldr	r6, [r1, #8]
 800b14a:	461f      	mov	r7, r3
 800b14c:	42be      	cmp	r6, r7
 800b14e:	680b      	ldr	r3, [r1, #0]
 800b150:	4682      	mov	sl, r0
 800b152:	460c      	mov	r4, r1
 800b154:	4690      	mov	r8, r2
 800b156:	d82d      	bhi.n	800b1b4 <__ssputs_r+0x70>
 800b158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b15c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b160:	d026      	beq.n	800b1b0 <__ssputs_r+0x6c>
 800b162:	6965      	ldr	r5, [r4, #20]
 800b164:	6909      	ldr	r1, [r1, #16]
 800b166:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b16a:	eba3 0901 	sub.w	r9, r3, r1
 800b16e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b172:	1c7b      	adds	r3, r7, #1
 800b174:	444b      	add	r3, r9
 800b176:	106d      	asrs	r5, r5, #1
 800b178:	429d      	cmp	r5, r3
 800b17a:	bf38      	it	cc
 800b17c:	461d      	movcc	r5, r3
 800b17e:	0553      	lsls	r3, r2, #21
 800b180:	d527      	bpl.n	800b1d2 <__ssputs_r+0x8e>
 800b182:	4629      	mov	r1, r5
 800b184:	f7ff ff52 	bl	800b02c <_malloc_r>
 800b188:	4606      	mov	r6, r0
 800b18a:	b360      	cbz	r0, 800b1e6 <__ssputs_r+0xa2>
 800b18c:	6921      	ldr	r1, [r4, #16]
 800b18e:	464a      	mov	r2, r9
 800b190:	f000 fae8 	bl	800b764 <memcpy>
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b19a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	6126      	str	r6, [r4, #16]
 800b1a2:	6165      	str	r5, [r4, #20]
 800b1a4:	444e      	add	r6, r9
 800b1a6:	eba5 0509 	sub.w	r5, r5, r9
 800b1aa:	6026      	str	r6, [r4, #0]
 800b1ac:	60a5      	str	r5, [r4, #8]
 800b1ae:	463e      	mov	r6, r7
 800b1b0:	42be      	cmp	r6, r7
 800b1b2:	d900      	bls.n	800b1b6 <__ssputs_r+0x72>
 800b1b4:	463e      	mov	r6, r7
 800b1b6:	6820      	ldr	r0, [r4, #0]
 800b1b8:	4632      	mov	r2, r6
 800b1ba:	4641      	mov	r1, r8
 800b1bc:	f000 faa8 	bl	800b710 <memmove>
 800b1c0:	68a3      	ldr	r3, [r4, #8]
 800b1c2:	1b9b      	subs	r3, r3, r6
 800b1c4:	60a3      	str	r3, [r4, #8]
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	4433      	add	r3, r6
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d2:	462a      	mov	r2, r5
 800b1d4:	f000 fad4 	bl	800b780 <_realloc_r>
 800b1d8:	4606      	mov	r6, r0
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d1e0      	bne.n	800b1a0 <__ssputs_r+0x5c>
 800b1de:	6921      	ldr	r1, [r4, #16]
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	f7ff feb7 	bl	800af54 <_free_r>
 800b1e6:	230c      	movs	r3, #12
 800b1e8:	f8ca 3000 	str.w	r3, [sl]
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	e7e9      	b.n	800b1ce <__ssputs_r+0x8a>
	...

0800b1fc <_svfiprintf_r>:
 800b1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b200:	4698      	mov	r8, r3
 800b202:	898b      	ldrh	r3, [r1, #12]
 800b204:	061b      	lsls	r3, r3, #24
 800b206:	b09d      	sub	sp, #116	@ 0x74
 800b208:	4607      	mov	r7, r0
 800b20a:	460d      	mov	r5, r1
 800b20c:	4614      	mov	r4, r2
 800b20e:	d510      	bpl.n	800b232 <_svfiprintf_r+0x36>
 800b210:	690b      	ldr	r3, [r1, #16]
 800b212:	b973      	cbnz	r3, 800b232 <_svfiprintf_r+0x36>
 800b214:	2140      	movs	r1, #64	@ 0x40
 800b216:	f7ff ff09 	bl	800b02c <_malloc_r>
 800b21a:	6028      	str	r0, [r5, #0]
 800b21c:	6128      	str	r0, [r5, #16]
 800b21e:	b930      	cbnz	r0, 800b22e <_svfiprintf_r+0x32>
 800b220:	230c      	movs	r3, #12
 800b222:	603b      	str	r3, [r7, #0]
 800b224:	f04f 30ff 	mov.w	r0, #4294967295
 800b228:	b01d      	add	sp, #116	@ 0x74
 800b22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22e:	2340      	movs	r3, #64	@ 0x40
 800b230:	616b      	str	r3, [r5, #20]
 800b232:	2300      	movs	r3, #0
 800b234:	9309      	str	r3, [sp, #36]	@ 0x24
 800b236:	2320      	movs	r3, #32
 800b238:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b23c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b240:	2330      	movs	r3, #48	@ 0x30
 800b242:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3e0 <_svfiprintf_r+0x1e4>
 800b246:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b24a:	f04f 0901 	mov.w	r9, #1
 800b24e:	4623      	mov	r3, r4
 800b250:	469a      	mov	sl, r3
 800b252:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b256:	b10a      	cbz	r2, 800b25c <_svfiprintf_r+0x60>
 800b258:	2a25      	cmp	r2, #37	@ 0x25
 800b25a:	d1f9      	bne.n	800b250 <_svfiprintf_r+0x54>
 800b25c:	ebba 0b04 	subs.w	fp, sl, r4
 800b260:	d00b      	beq.n	800b27a <_svfiprintf_r+0x7e>
 800b262:	465b      	mov	r3, fp
 800b264:	4622      	mov	r2, r4
 800b266:	4629      	mov	r1, r5
 800b268:	4638      	mov	r0, r7
 800b26a:	f7ff ff6b 	bl	800b144 <__ssputs_r>
 800b26e:	3001      	adds	r0, #1
 800b270:	f000 80a7 	beq.w	800b3c2 <_svfiprintf_r+0x1c6>
 800b274:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b276:	445a      	add	r2, fp
 800b278:	9209      	str	r2, [sp, #36]	@ 0x24
 800b27a:	f89a 3000 	ldrb.w	r3, [sl]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 809f 	beq.w	800b3c2 <_svfiprintf_r+0x1c6>
 800b284:	2300      	movs	r3, #0
 800b286:	f04f 32ff 	mov.w	r2, #4294967295
 800b28a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b28e:	f10a 0a01 	add.w	sl, sl, #1
 800b292:	9304      	str	r3, [sp, #16]
 800b294:	9307      	str	r3, [sp, #28]
 800b296:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b29a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b29c:	4654      	mov	r4, sl
 800b29e:	2205      	movs	r2, #5
 800b2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a4:	484e      	ldr	r0, [pc, #312]	@ (800b3e0 <_svfiprintf_r+0x1e4>)
 800b2a6:	f7f5 f83b 	bl	8000320 <memchr>
 800b2aa:	9a04      	ldr	r2, [sp, #16]
 800b2ac:	b9d8      	cbnz	r0, 800b2e6 <_svfiprintf_r+0xea>
 800b2ae:	06d0      	lsls	r0, r2, #27
 800b2b0:	bf44      	itt	mi
 800b2b2:	2320      	movmi	r3, #32
 800b2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2b8:	0711      	lsls	r1, r2, #28
 800b2ba:	bf44      	itt	mi
 800b2bc:	232b      	movmi	r3, #43	@ 0x2b
 800b2be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2c8:	d015      	beq.n	800b2f6 <_svfiprintf_r+0xfa>
 800b2ca:	9a07      	ldr	r2, [sp, #28]
 800b2cc:	4654      	mov	r4, sl
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	f04f 0c0a 	mov.w	ip, #10
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2da:	3b30      	subs	r3, #48	@ 0x30
 800b2dc:	2b09      	cmp	r3, #9
 800b2de:	d94b      	bls.n	800b378 <_svfiprintf_r+0x17c>
 800b2e0:	b1b0      	cbz	r0, 800b310 <_svfiprintf_r+0x114>
 800b2e2:	9207      	str	r2, [sp, #28]
 800b2e4:	e014      	b.n	800b310 <_svfiprintf_r+0x114>
 800b2e6:	eba0 0308 	sub.w	r3, r0, r8
 800b2ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	46a2      	mov	sl, r4
 800b2f4:	e7d2      	b.n	800b29c <_svfiprintf_r+0xa0>
 800b2f6:	9b03      	ldr	r3, [sp, #12]
 800b2f8:	1d19      	adds	r1, r3, #4
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	9103      	str	r1, [sp, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	bfbb      	ittet	lt
 800b302:	425b      	neglt	r3, r3
 800b304:	f042 0202 	orrlt.w	r2, r2, #2
 800b308:	9307      	strge	r3, [sp, #28]
 800b30a:	9307      	strlt	r3, [sp, #28]
 800b30c:	bfb8      	it	lt
 800b30e:	9204      	strlt	r2, [sp, #16]
 800b310:	7823      	ldrb	r3, [r4, #0]
 800b312:	2b2e      	cmp	r3, #46	@ 0x2e
 800b314:	d10a      	bne.n	800b32c <_svfiprintf_r+0x130>
 800b316:	7863      	ldrb	r3, [r4, #1]
 800b318:	2b2a      	cmp	r3, #42	@ 0x2a
 800b31a:	d132      	bne.n	800b382 <_svfiprintf_r+0x186>
 800b31c:	9b03      	ldr	r3, [sp, #12]
 800b31e:	1d1a      	adds	r2, r3, #4
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	9203      	str	r2, [sp, #12]
 800b324:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b328:	3402      	adds	r4, #2
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3f0 <_svfiprintf_r+0x1f4>
 800b330:	7821      	ldrb	r1, [r4, #0]
 800b332:	2203      	movs	r2, #3
 800b334:	4650      	mov	r0, sl
 800b336:	f7f4 fff3 	bl	8000320 <memchr>
 800b33a:	b138      	cbz	r0, 800b34c <_svfiprintf_r+0x150>
 800b33c:	9b04      	ldr	r3, [sp, #16]
 800b33e:	eba0 000a 	sub.w	r0, r0, sl
 800b342:	2240      	movs	r2, #64	@ 0x40
 800b344:	4082      	lsls	r2, r0
 800b346:	4313      	orrs	r3, r2
 800b348:	3401      	adds	r4, #1
 800b34a:	9304      	str	r3, [sp, #16]
 800b34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b350:	4824      	ldr	r0, [pc, #144]	@ (800b3e4 <_svfiprintf_r+0x1e8>)
 800b352:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b356:	2206      	movs	r2, #6
 800b358:	f7f4 ffe2 	bl	8000320 <memchr>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d036      	beq.n	800b3ce <_svfiprintf_r+0x1d2>
 800b360:	4b21      	ldr	r3, [pc, #132]	@ (800b3e8 <_svfiprintf_r+0x1ec>)
 800b362:	bb1b      	cbnz	r3, 800b3ac <_svfiprintf_r+0x1b0>
 800b364:	9b03      	ldr	r3, [sp, #12]
 800b366:	3307      	adds	r3, #7
 800b368:	f023 0307 	bic.w	r3, r3, #7
 800b36c:	3308      	adds	r3, #8
 800b36e:	9303      	str	r3, [sp, #12]
 800b370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b372:	4433      	add	r3, r6
 800b374:	9309      	str	r3, [sp, #36]	@ 0x24
 800b376:	e76a      	b.n	800b24e <_svfiprintf_r+0x52>
 800b378:	fb0c 3202 	mla	r2, ip, r2, r3
 800b37c:	460c      	mov	r4, r1
 800b37e:	2001      	movs	r0, #1
 800b380:	e7a8      	b.n	800b2d4 <_svfiprintf_r+0xd8>
 800b382:	2300      	movs	r3, #0
 800b384:	3401      	adds	r4, #1
 800b386:	9305      	str	r3, [sp, #20]
 800b388:	4619      	mov	r1, r3
 800b38a:	f04f 0c0a 	mov.w	ip, #10
 800b38e:	4620      	mov	r0, r4
 800b390:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b394:	3a30      	subs	r2, #48	@ 0x30
 800b396:	2a09      	cmp	r2, #9
 800b398:	d903      	bls.n	800b3a2 <_svfiprintf_r+0x1a6>
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d0c6      	beq.n	800b32c <_svfiprintf_r+0x130>
 800b39e:	9105      	str	r1, [sp, #20]
 800b3a0:	e7c4      	b.n	800b32c <_svfiprintf_r+0x130>
 800b3a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e7f0      	b.n	800b38e <_svfiprintf_r+0x192>
 800b3ac:	ab03      	add	r3, sp, #12
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	462a      	mov	r2, r5
 800b3b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b3ec <_svfiprintf_r+0x1f0>)
 800b3b4:	a904      	add	r1, sp, #16
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	f3af 8000 	nop.w
 800b3bc:	1c42      	adds	r2, r0, #1
 800b3be:	4606      	mov	r6, r0
 800b3c0:	d1d6      	bne.n	800b370 <_svfiprintf_r+0x174>
 800b3c2:	89ab      	ldrh	r3, [r5, #12]
 800b3c4:	065b      	lsls	r3, r3, #25
 800b3c6:	f53f af2d 	bmi.w	800b224 <_svfiprintf_r+0x28>
 800b3ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3cc:	e72c      	b.n	800b228 <_svfiprintf_r+0x2c>
 800b3ce:	ab03      	add	r3, sp, #12
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	4b05      	ldr	r3, [pc, #20]	@ (800b3ec <_svfiprintf_r+0x1f0>)
 800b3d6:	a904      	add	r1, sp, #16
 800b3d8:	4638      	mov	r0, r7
 800b3da:	f000 f879 	bl	800b4d0 <_printf_i>
 800b3de:	e7ed      	b.n	800b3bc <_svfiprintf_r+0x1c0>
 800b3e0:	0800b960 	.word	0x0800b960
 800b3e4:	0800b96a 	.word	0x0800b96a
 800b3e8:	00000000 	.word	0x00000000
 800b3ec:	0800b145 	.word	0x0800b145
 800b3f0:	0800b966 	.word	0x0800b966

0800b3f4 <_printf_common>:
 800b3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f8:	4616      	mov	r6, r2
 800b3fa:	4698      	mov	r8, r3
 800b3fc:	688a      	ldr	r2, [r1, #8]
 800b3fe:	690b      	ldr	r3, [r1, #16]
 800b400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b404:	4293      	cmp	r3, r2
 800b406:	bfb8      	it	lt
 800b408:	4613      	movlt	r3, r2
 800b40a:	6033      	str	r3, [r6, #0]
 800b40c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b410:	4607      	mov	r7, r0
 800b412:	460c      	mov	r4, r1
 800b414:	b10a      	cbz	r2, 800b41a <_printf_common+0x26>
 800b416:	3301      	adds	r3, #1
 800b418:	6033      	str	r3, [r6, #0]
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	0699      	lsls	r1, r3, #26
 800b41e:	bf42      	ittt	mi
 800b420:	6833      	ldrmi	r3, [r6, #0]
 800b422:	3302      	addmi	r3, #2
 800b424:	6033      	strmi	r3, [r6, #0]
 800b426:	6825      	ldr	r5, [r4, #0]
 800b428:	f015 0506 	ands.w	r5, r5, #6
 800b42c:	d106      	bne.n	800b43c <_printf_common+0x48>
 800b42e:	f104 0a19 	add.w	sl, r4, #25
 800b432:	68e3      	ldr	r3, [r4, #12]
 800b434:	6832      	ldr	r2, [r6, #0]
 800b436:	1a9b      	subs	r3, r3, r2
 800b438:	42ab      	cmp	r3, r5
 800b43a:	dc26      	bgt.n	800b48a <_printf_common+0x96>
 800b43c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b440:	6822      	ldr	r2, [r4, #0]
 800b442:	3b00      	subs	r3, #0
 800b444:	bf18      	it	ne
 800b446:	2301      	movne	r3, #1
 800b448:	0692      	lsls	r2, r2, #26
 800b44a:	d42b      	bmi.n	800b4a4 <_printf_common+0xb0>
 800b44c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b450:	4641      	mov	r1, r8
 800b452:	4638      	mov	r0, r7
 800b454:	47c8      	blx	r9
 800b456:	3001      	adds	r0, #1
 800b458:	d01e      	beq.n	800b498 <_printf_common+0xa4>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	6922      	ldr	r2, [r4, #16]
 800b45e:	f003 0306 	and.w	r3, r3, #6
 800b462:	2b04      	cmp	r3, #4
 800b464:	bf02      	ittt	eq
 800b466:	68e5      	ldreq	r5, [r4, #12]
 800b468:	6833      	ldreq	r3, [r6, #0]
 800b46a:	1aed      	subeq	r5, r5, r3
 800b46c:	68a3      	ldr	r3, [r4, #8]
 800b46e:	bf0c      	ite	eq
 800b470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b474:	2500      	movne	r5, #0
 800b476:	4293      	cmp	r3, r2
 800b478:	bfc4      	itt	gt
 800b47a:	1a9b      	subgt	r3, r3, r2
 800b47c:	18ed      	addgt	r5, r5, r3
 800b47e:	2600      	movs	r6, #0
 800b480:	341a      	adds	r4, #26
 800b482:	42b5      	cmp	r5, r6
 800b484:	d11a      	bne.n	800b4bc <_printf_common+0xc8>
 800b486:	2000      	movs	r0, #0
 800b488:	e008      	b.n	800b49c <_printf_common+0xa8>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4652      	mov	r2, sl
 800b48e:	4641      	mov	r1, r8
 800b490:	4638      	mov	r0, r7
 800b492:	47c8      	blx	r9
 800b494:	3001      	adds	r0, #1
 800b496:	d103      	bne.n	800b4a0 <_printf_common+0xac>
 800b498:	f04f 30ff 	mov.w	r0, #4294967295
 800b49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a0:	3501      	adds	r5, #1
 800b4a2:	e7c6      	b.n	800b432 <_printf_common+0x3e>
 800b4a4:	18e1      	adds	r1, r4, r3
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	2030      	movs	r0, #48	@ 0x30
 800b4aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4ae:	4422      	add	r2, r4
 800b4b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4b8:	3302      	adds	r3, #2
 800b4ba:	e7c7      	b.n	800b44c <_printf_common+0x58>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	4622      	mov	r2, r4
 800b4c0:	4641      	mov	r1, r8
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	47c8      	blx	r9
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d0e6      	beq.n	800b498 <_printf_common+0xa4>
 800b4ca:	3601      	adds	r6, #1
 800b4cc:	e7d9      	b.n	800b482 <_printf_common+0x8e>
	...

0800b4d0 <_printf_i>:
 800b4d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	7e0f      	ldrb	r7, [r1, #24]
 800b4d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4d8:	2f78      	cmp	r7, #120	@ 0x78
 800b4da:	4691      	mov	r9, r2
 800b4dc:	4680      	mov	r8, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	469a      	mov	sl, r3
 800b4e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4e6:	d807      	bhi.n	800b4f8 <_printf_i+0x28>
 800b4e8:	2f62      	cmp	r7, #98	@ 0x62
 800b4ea:	d80a      	bhi.n	800b502 <_printf_i+0x32>
 800b4ec:	2f00      	cmp	r7, #0
 800b4ee:	f000 80d2 	beq.w	800b696 <_printf_i+0x1c6>
 800b4f2:	2f58      	cmp	r7, #88	@ 0x58
 800b4f4:	f000 80b9 	beq.w	800b66a <_printf_i+0x19a>
 800b4f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b500:	e03a      	b.n	800b578 <_printf_i+0xa8>
 800b502:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b506:	2b15      	cmp	r3, #21
 800b508:	d8f6      	bhi.n	800b4f8 <_printf_i+0x28>
 800b50a:	a101      	add	r1, pc, #4	@ (adr r1, 800b510 <_printf_i+0x40>)
 800b50c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b510:	0800b569 	.word	0x0800b569
 800b514:	0800b57d 	.word	0x0800b57d
 800b518:	0800b4f9 	.word	0x0800b4f9
 800b51c:	0800b4f9 	.word	0x0800b4f9
 800b520:	0800b4f9 	.word	0x0800b4f9
 800b524:	0800b4f9 	.word	0x0800b4f9
 800b528:	0800b57d 	.word	0x0800b57d
 800b52c:	0800b4f9 	.word	0x0800b4f9
 800b530:	0800b4f9 	.word	0x0800b4f9
 800b534:	0800b4f9 	.word	0x0800b4f9
 800b538:	0800b4f9 	.word	0x0800b4f9
 800b53c:	0800b67d 	.word	0x0800b67d
 800b540:	0800b5a7 	.word	0x0800b5a7
 800b544:	0800b637 	.word	0x0800b637
 800b548:	0800b4f9 	.word	0x0800b4f9
 800b54c:	0800b4f9 	.word	0x0800b4f9
 800b550:	0800b69f 	.word	0x0800b69f
 800b554:	0800b4f9 	.word	0x0800b4f9
 800b558:	0800b5a7 	.word	0x0800b5a7
 800b55c:	0800b4f9 	.word	0x0800b4f9
 800b560:	0800b4f9 	.word	0x0800b4f9
 800b564:	0800b63f 	.word	0x0800b63f
 800b568:	6833      	ldr	r3, [r6, #0]
 800b56a:	1d1a      	adds	r2, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	6032      	str	r2, [r6, #0]
 800b570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b574:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b578:	2301      	movs	r3, #1
 800b57a:	e09d      	b.n	800b6b8 <_printf_i+0x1e8>
 800b57c:	6833      	ldr	r3, [r6, #0]
 800b57e:	6820      	ldr	r0, [r4, #0]
 800b580:	1d19      	adds	r1, r3, #4
 800b582:	6031      	str	r1, [r6, #0]
 800b584:	0606      	lsls	r6, r0, #24
 800b586:	d501      	bpl.n	800b58c <_printf_i+0xbc>
 800b588:	681d      	ldr	r5, [r3, #0]
 800b58a:	e003      	b.n	800b594 <_printf_i+0xc4>
 800b58c:	0645      	lsls	r5, r0, #25
 800b58e:	d5fb      	bpl.n	800b588 <_printf_i+0xb8>
 800b590:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b594:	2d00      	cmp	r5, #0
 800b596:	da03      	bge.n	800b5a0 <_printf_i+0xd0>
 800b598:	232d      	movs	r3, #45	@ 0x2d
 800b59a:	426d      	negs	r5, r5
 800b59c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5a0:	4859      	ldr	r0, [pc, #356]	@ (800b708 <_printf_i+0x238>)
 800b5a2:	230a      	movs	r3, #10
 800b5a4:	e011      	b.n	800b5ca <_printf_i+0xfa>
 800b5a6:	6821      	ldr	r1, [r4, #0]
 800b5a8:	6833      	ldr	r3, [r6, #0]
 800b5aa:	0608      	lsls	r0, r1, #24
 800b5ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5b0:	d402      	bmi.n	800b5b8 <_printf_i+0xe8>
 800b5b2:	0649      	lsls	r1, r1, #25
 800b5b4:	bf48      	it	mi
 800b5b6:	b2ad      	uxthmi	r5, r5
 800b5b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5ba:	4853      	ldr	r0, [pc, #332]	@ (800b708 <_printf_i+0x238>)
 800b5bc:	6033      	str	r3, [r6, #0]
 800b5be:	bf14      	ite	ne
 800b5c0:	230a      	movne	r3, #10
 800b5c2:	2308      	moveq	r3, #8
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5ca:	6866      	ldr	r6, [r4, #4]
 800b5cc:	60a6      	str	r6, [r4, #8]
 800b5ce:	2e00      	cmp	r6, #0
 800b5d0:	bfa2      	ittt	ge
 800b5d2:	6821      	ldrge	r1, [r4, #0]
 800b5d4:	f021 0104 	bicge.w	r1, r1, #4
 800b5d8:	6021      	strge	r1, [r4, #0]
 800b5da:	b90d      	cbnz	r5, 800b5e0 <_printf_i+0x110>
 800b5dc:	2e00      	cmp	r6, #0
 800b5de:	d04b      	beq.n	800b678 <_printf_i+0x1a8>
 800b5e0:	4616      	mov	r6, r2
 800b5e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5e6:	fb03 5711 	mls	r7, r3, r1, r5
 800b5ea:	5dc7      	ldrb	r7, [r0, r7]
 800b5ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5f0:	462f      	mov	r7, r5
 800b5f2:	42bb      	cmp	r3, r7
 800b5f4:	460d      	mov	r5, r1
 800b5f6:	d9f4      	bls.n	800b5e2 <_printf_i+0x112>
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	d10b      	bne.n	800b614 <_printf_i+0x144>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	07df      	lsls	r7, r3, #31
 800b600:	d508      	bpl.n	800b614 <_printf_i+0x144>
 800b602:	6923      	ldr	r3, [r4, #16]
 800b604:	6861      	ldr	r1, [r4, #4]
 800b606:	4299      	cmp	r1, r3
 800b608:	bfde      	ittt	le
 800b60a:	2330      	movle	r3, #48	@ 0x30
 800b60c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b610:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b614:	1b92      	subs	r2, r2, r6
 800b616:	6122      	str	r2, [r4, #16]
 800b618:	f8cd a000 	str.w	sl, [sp]
 800b61c:	464b      	mov	r3, r9
 800b61e:	aa03      	add	r2, sp, #12
 800b620:	4621      	mov	r1, r4
 800b622:	4640      	mov	r0, r8
 800b624:	f7ff fee6 	bl	800b3f4 <_printf_common>
 800b628:	3001      	adds	r0, #1
 800b62a:	d14a      	bne.n	800b6c2 <_printf_i+0x1f2>
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295
 800b630:	b004      	add	sp, #16
 800b632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	f043 0320 	orr.w	r3, r3, #32
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	4833      	ldr	r0, [pc, #204]	@ (800b70c <_printf_i+0x23c>)
 800b640:	2778      	movs	r7, #120	@ 0x78
 800b642:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	6831      	ldr	r1, [r6, #0]
 800b64a:	061f      	lsls	r7, r3, #24
 800b64c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b650:	d402      	bmi.n	800b658 <_printf_i+0x188>
 800b652:	065f      	lsls	r7, r3, #25
 800b654:	bf48      	it	mi
 800b656:	b2ad      	uxthmi	r5, r5
 800b658:	6031      	str	r1, [r6, #0]
 800b65a:	07d9      	lsls	r1, r3, #31
 800b65c:	bf44      	itt	mi
 800b65e:	f043 0320 	orrmi.w	r3, r3, #32
 800b662:	6023      	strmi	r3, [r4, #0]
 800b664:	b11d      	cbz	r5, 800b66e <_printf_i+0x19e>
 800b666:	2310      	movs	r3, #16
 800b668:	e7ac      	b.n	800b5c4 <_printf_i+0xf4>
 800b66a:	4827      	ldr	r0, [pc, #156]	@ (800b708 <_printf_i+0x238>)
 800b66c:	e7e9      	b.n	800b642 <_printf_i+0x172>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	f023 0320 	bic.w	r3, r3, #32
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	e7f6      	b.n	800b666 <_printf_i+0x196>
 800b678:	4616      	mov	r6, r2
 800b67a:	e7bd      	b.n	800b5f8 <_printf_i+0x128>
 800b67c:	6833      	ldr	r3, [r6, #0]
 800b67e:	6825      	ldr	r5, [r4, #0]
 800b680:	6961      	ldr	r1, [r4, #20]
 800b682:	1d18      	adds	r0, r3, #4
 800b684:	6030      	str	r0, [r6, #0]
 800b686:	062e      	lsls	r6, r5, #24
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	d501      	bpl.n	800b690 <_printf_i+0x1c0>
 800b68c:	6019      	str	r1, [r3, #0]
 800b68e:	e002      	b.n	800b696 <_printf_i+0x1c6>
 800b690:	0668      	lsls	r0, r5, #25
 800b692:	d5fb      	bpl.n	800b68c <_printf_i+0x1bc>
 800b694:	8019      	strh	r1, [r3, #0]
 800b696:	2300      	movs	r3, #0
 800b698:	6123      	str	r3, [r4, #16]
 800b69a:	4616      	mov	r6, r2
 800b69c:	e7bc      	b.n	800b618 <_printf_i+0x148>
 800b69e:	6833      	ldr	r3, [r6, #0]
 800b6a0:	1d1a      	adds	r2, r3, #4
 800b6a2:	6032      	str	r2, [r6, #0]
 800b6a4:	681e      	ldr	r6, [r3, #0]
 800b6a6:	6862      	ldr	r2, [r4, #4]
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7f4 fe38 	bl	8000320 <memchr>
 800b6b0:	b108      	cbz	r0, 800b6b6 <_printf_i+0x1e6>
 800b6b2:	1b80      	subs	r0, r0, r6
 800b6b4:	6060      	str	r0, [r4, #4]
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6c0:	e7aa      	b.n	800b618 <_printf_i+0x148>
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	4632      	mov	r2, r6
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	47d0      	blx	sl
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d0ad      	beq.n	800b62c <_printf_i+0x15c>
 800b6d0:	6823      	ldr	r3, [r4, #0]
 800b6d2:	079b      	lsls	r3, r3, #30
 800b6d4:	d413      	bmi.n	800b6fe <_printf_i+0x22e>
 800b6d6:	68e0      	ldr	r0, [r4, #12]
 800b6d8:	9b03      	ldr	r3, [sp, #12]
 800b6da:	4298      	cmp	r0, r3
 800b6dc:	bfb8      	it	lt
 800b6de:	4618      	movlt	r0, r3
 800b6e0:	e7a6      	b.n	800b630 <_printf_i+0x160>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	47d0      	blx	sl
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d09d      	beq.n	800b62c <_printf_i+0x15c>
 800b6f0:	3501      	adds	r5, #1
 800b6f2:	68e3      	ldr	r3, [r4, #12]
 800b6f4:	9903      	ldr	r1, [sp, #12]
 800b6f6:	1a5b      	subs	r3, r3, r1
 800b6f8:	42ab      	cmp	r3, r5
 800b6fa:	dcf2      	bgt.n	800b6e2 <_printf_i+0x212>
 800b6fc:	e7eb      	b.n	800b6d6 <_printf_i+0x206>
 800b6fe:	2500      	movs	r5, #0
 800b700:	f104 0619 	add.w	r6, r4, #25
 800b704:	e7f5      	b.n	800b6f2 <_printf_i+0x222>
 800b706:	bf00      	nop
 800b708:	0800b971 	.word	0x0800b971
 800b70c:	0800b982 	.word	0x0800b982

0800b710 <memmove>:
 800b710:	4288      	cmp	r0, r1
 800b712:	b510      	push	{r4, lr}
 800b714:	eb01 0402 	add.w	r4, r1, r2
 800b718:	d902      	bls.n	800b720 <memmove+0x10>
 800b71a:	4284      	cmp	r4, r0
 800b71c:	4623      	mov	r3, r4
 800b71e:	d807      	bhi.n	800b730 <memmove+0x20>
 800b720:	1e43      	subs	r3, r0, #1
 800b722:	42a1      	cmp	r1, r4
 800b724:	d008      	beq.n	800b738 <memmove+0x28>
 800b726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b72a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b72e:	e7f8      	b.n	800b722 <memmove+0x12>
 800b730:	4402      	add	r2, r0
 800b732:	4601      	mov	r1, r0
 800b734:	428a      	cmp	r2, r1
 800b736:	d100      	bne.n	800b73a <memmove+0x2a>
 800b738:	bd10      	pop	{r4, pc}
 800b73a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b73e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b742:	e7f7      	b.n	800b734 <memmove+0x24>

0800b744 <_sbrk_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d06      	ldr	r5, [pc, #24]	@ (800b760 <_sbrk_r+0x1c>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	602b      	str	r3, [r5, #0]
 800b750:	f7f5 febe 	bl	80014d0 <_sbrk>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_sbrk_r+0x1a>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_sbrk_r+0x1a>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	24000e7c 	.word	0x24000e7c

0800b764 <memcpy>:
 800b764:	440a      	add	r2, r1
 800b766:	4291      	cmp	r1, r2
 800b768:	f100 33ff 	add.w	r3, r0, #4294967295
 800b76c:	d100      	bne.n	800b770 <memcpy+0xc>
 800b76e:	4770      	bx	lr
 800b770:	b510      	push	{r4, lr}
 800b772:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b77a:	4291      	cmp	r1, r2
 800b77c:	d1f9      	bne.n	800b772 <memcpy+0xe>
 800b77e:	bd10      	pop	{r4, pc}

0800b780 <_realloc_r>:
 800b780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b784:	4680      	mov	r8, r0
 800b786:	4615      	mov	r5, r2
 800b788:	460c      	mov	r4, r1
 800b78a:	b921      	cbnz	r1, 800b796 <_realloc_r+0x16>
 800b78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b790:	4611      	mov	r1, r2
 800b792:	f7ff bc4b 	b.w	800b02c <_malloc_r>
 800b796:	b92a      	cbnz	r2, 800b7a4 <_realloc_r+0x24>
 800b798:	f7ff fbdc 	bl	800af54 <_free_r>
 800b79c:	2400      	movs	r4, #0
 800b79e:	4620      	mov	r0, r4
 800b7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a4:	f000 f81a 	bl	800b7dc <_malloc_usable_size_r>
 800b7a8:	4285      	cmp	r5, r0
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	d802      	bhi.n	800b7b4 <_realloc_r+0x34>
 800b7ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b7b2:	d8f4      	bhi.n	800b79e <_realloc_r+0x1e>
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	f7ff fc38 	bl	800b02c <_malloc_r>
 800b7bc:	4607      	mov	r7, r0
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d0ec      	beq.n	800b79c <_realloc_r+0x1c>
 800b7c2:	42b5      	cmp	r5, r6
 800b7c4:	462a      	mov	r2, r5
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	bf28      	it	cs
 800b7ca:	4632      	movcs	r2, r6
 800b7cc:	f7ff ffca 	bl	800b764 <memcpy>
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	f7ff fbbe 	bl	800af54 <_free_r>
 800b7d8:	463c      	mov	r4, r7
 800b7da:	e7e0      	b.n	800b79e <_realloc_r+0x1e>

0800b7dc <_malloc_usable_size_r>:
 800b7dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e0:	1f18      	subs	r0, r3, #4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bfbc      	itt	lt
 800b7e6:	580b      	ldrlt	r3, [r1, r0]
 800b7e8:	18c0      	addlt	r0, r0, r3
 800b7ea:	4770      	bx	lr

0800b7ec <_init>:
 800b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ee:	bf00      	nop
 800b7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f2:	bc08      	pop	{r3}
 800b7f4:	469e      	mov	lr, r3
 800b7f6:	4770      	bx	lr

0800b7f8 <_fini>:
 800b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fa:	bf00      	nop
 800b7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fe:	bc08      	pop	{r3}
 800b800:	469e      	mov	lr, r3
 800b802:	4770      	bx	lr
