
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b95c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800bc2c  0800bc2c  0000cc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be84  0800be84  0000ce84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be8c  0800be8c  0000ce8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800be90  0800be90  0000ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000318  24000000  0800be94  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dac  24000318  0800c1ac  0000d318  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240010c4  0800c1ac  0000e0c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY
 10 .debug_info   000194d5  00000000  00000000  0000d346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003695  00000000  00000000  0002681b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001190  00000000  00000000  00029eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d5c  00000000  00000000  0002b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000106fa  00000000  00000000  0002bd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00006558  00000000  00000000  0003c496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000429ee  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004dc0  00000000  00000000  00042a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  000477f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000318 	.word	0x24000318
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bc14 	.word	0x0800bc14

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400031c 	.word	0x2400031c
 800030c:	0800bc14 	.word	0x0800bc14

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:




// GPIO 상태를 스캔하고 변경된 핀 정보를 반환하는 함수
MatrixScanResult MatrixScan() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0b6      	sub	sp, #216	@ 0xd8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    static uint32_t Last_gpioG_state = 0;
    static uint32_t Last_gpioH_state = 0;
    //static uint32_t Last_gpioI_state = 0;

    // 현재 GPIO 상태 읽기
    uint32_t gpioA_state = (~(GPIOA->IDR)) & 0b1001111111010100;
 80006b8:	4bb9      	ldr	r3, [pc, #740]	@ (80009a0 <MatrixScan+0x2f0>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	43da      	mvns	r2, r3
 80006be:	f649 73d4 	movw	r3, #40916	@ 0x9fd4
 80006c2:	4013      	ands	r3, r2
 80006c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint32_t gpioB_state = (~(GPIOB->IDR)) & 0b1100001111011100;
 80006c8:	4bb6      	ldr	r3, [pc, #728]	@ (80009a4 <MatrixScan+0x2f4>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	43da      	mvns	r2, r3
 80006ce:	f24c 33dc 	movw	r3, #50140	@ 0xc3dc
 80006d2:	4013      	ands	r3, r2
 80006d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint32_t gpioC_state = (~(GPIOC->IDR)) & 0b1111111111110010;
 80006d8:	4bb3      	ldr	r3, [pc, #716]	@ (80009a8 <MatrixScan+0x2f8>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	43da      	mvns	r2, r3
 80006de:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80006e2:	4013      	ands	r3, r2
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t gpioD_state = (~(GPIOD->IDR)) & 0b1111111111111111;
 80006e8:	4bb0      	ldr	r3, [pc, #704]	@ (80009ac <MatrixScan+0x2fc>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	43db      	mvns	r3, r3
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t gpioE_state = (~(GPIOE->IDR)) & 0b1111111111110111;
 80006f4:	4bae      	ldr	r3, [pc, #696]	@ (80009b0 <MatrixScan+0x300>)
 80006f6:	691b      	ldr	r3, [r3, #16]
 80006f8:	43da      	mvns	r2, r3
 80006fa:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80006fe:	4013      	ands	r3, r2
 8000700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t gpioF_state = (~(GPIOF->IDR)) & 0b1111111111111111;
 8000704:	4bab      	ldr	r3, [pc, #684]	@ (80009b4 <MatrixScan+0x304>)
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	43db      	mvns	r3, r3
 800070a:	b29b      	uxth	r3, r3
 800070c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t gpioG_state = (~(GPIOG->IDR)) & 0b1111111111111111;
 8000710:	4ba9      	ldr	r3, [pc, #676]	@ (80009b8 <MatrixScan+0x308>)
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	43db      	mvns	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t gpioH_state = (~(GPIOH->IDR)) & 0b1111111111111100;
 800071a:	4ba8      	ldr	r3, [pc, #672]	@ (80009bc <MatrixScan+0x30c>)
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	43da      	mvns	r2, r3
 8000720:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8000724:	4013      	ands	r3, r2
 8000726:	67bb      	str	r3, [r7, #120]	@ 0x78
    //uint32_t gpioI_state = (-(GPIOI->IDR)) & 0b1111111111111111;


    // 변경된 비트 계산 (XOR 연산)
    uint32_t changedPinA = gpioA_state ^ Last_gpioA_state;
 8000728:	4ba5      	ldr	r3, [pc, #660]	@ (80009c0 <MatrixScan+0x310>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000730:	4053      	eors	r3, r2
 8000732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    uint32_t changedPinB = gpioB_state ^ Last_gpioB_state;
 8000736:	4ba3      	ldr	r3, [pc, #652]	@ (80009c4 <MatrixScan+0x314>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800073e:	4053      	eors	r3, r2
 8000740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    uint32_t changedPinC = gpioC_state ^ Last_gpioC_state;
 8000744:	4ba0      	ldr	r3, [pc, #640]	@ (80009c8 <MatrixScan+0x318>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800074c:	4053      	eors	r3, r2
 800074e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 8000752:	4b9e      	ldr	r3, [pc, #632]	@ (80009cc <MatrixScan+0x31c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800075a:	4053      	eors	r3, r2
 800075c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 8000760:	4b9b      	ldr	r3, [pc, #620]	@ (80009d0 <MatrixScan+0x320>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000768:	4053      	eors	r3, r2
 800076a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    uint32_t changedPinF = gpioF_state ^ Last_gpioF_state;
 800076e:	4b99      	ldr	r3, [pc, #612]	@ (80009d4 <MatrixScan+0x324>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000776:	4053      	eors	r3, r2
 8000778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    uint32_t changedPinG = gpioG_state ^ Last_gpioG_state;
 800077c:	4b96      	ldr	r3, [pc, #600]	@ (80009d8 <MatrixScan+0x328>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000782:	4053      	eors	r3, r2
 8000784:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    uint32_t changedPinH = gpioH_state ^ Last_gpioH_state;
 8000788:	4b94      	ldr	r3, [pc, #592]	@ (80009dc <MatrixScan+0x32c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800078e:	4053      	eors	r3, r2
 8000790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    //uint32_t changedPinI = gpioI_state ^ Last_gpioI_state;

    MatrixScanResult result;
    result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	673b      	str	r3, [r7, #112]	@ 0x70
    result.pinState = -1;
 800079a:	23ff      	movs	r3, #255	@ 0xff
 800079c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    //char message[100];
    //sprintf(message, "A = %u | B = %u | C = %u | D = %u | E = %u \n\r", gpioA_state,gpioB_state,gpioC_state,gpioD_state,gpioE_state );
    //HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    // 포트 A~E 순서대로 변경된 핀 확인
    if (changedPinA != 0)
 80007a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d038      	beq.n	800081a <MatrixScan+0x16a>
    {
        int bitPosition = -1;
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        while ( changedPinA )
 80007b0:	e009      	b.n	80007c6 <MatrixScan+0x116>
        {
            changedPinA >>= 1; // 오른쪽으로 시프트
 80007b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007b6:	085b      	lsrs	r3, r3, #1
 80007b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            bitPosition++;
 80007bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007c0:	3301      	adds	r3, #1
 80007c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        while ( changedPinA )
 80007c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f1      	bne.n	80007b2 <MatrixScan+0x102>
        }

        result.pinNumber = bitPosition; // 핀 번호 (포트 A는 0 ~ 15)
 80007ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007d2:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioA_state >> bitPosition) & 1; // 현재 상태
 80007d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80007d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007dc:	fa22 f303 	lsr.w	r3, r2, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        char message[100];
        sprintf(message, "A | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80007ec:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80007ee:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80007f2:	f107 000c 	add.w	r0, r7, #12
 80007f6:	497a      	ldr	r1, [pc, #488]	@ (80009e0 <MatrixScan+0x330>)
 80007f8:	f00a fd6c 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fd85 	bl	8000310 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	f107 010c 	add.w	r1, r7, #12
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	4874      	ldr	r0, [pc, #464]	@ (80009e4 <MatrixScan+0x334>)
 8000814:	f005 fdc2 	bl	800639c <HAL_UART_Transmit>
 8000818:	e1d6      	b.n	8000bc8 <MatrixScan+0x518>

    }
    else if ( changedPinB != 0 )
 800081a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d039      	beq.n	8000896 <MatrixScan+0x1e6>
    {
        int bitPosition = -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while ( changedPinB )
 800082a:	e009      	b.n	8000840 <MatrixScan+0x190>
        {
            changedPinB >>= 1;
 800082c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            bitPosition++;
 8000836:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800083a:	3301      	adds	r3, #1
 800083c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while ( changedPinB )
 8000840:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f1      	bne.n	800082c <MatrixScan+0x17c>
        }

        result.pinNumber = bitPosition + 16; // 핀 번호 (포트 B는 16 ~ 31)
 8000848:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800084c:	3310      	adds	r3, #16
 800084e:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioB_state >> bitPosition) & 1;
 8000850:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000858:	fa22 f303 	lsr.w	r3, r2, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        char message[100];
        sprintf(message, "B | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000868:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800086a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800086e:	f107 000c 	add.w	r0, r7, #12
 8000872:	495d      	ldr	r1, [pc, #372]	@ (80009e8 <MatrixScan+0x338>)
 8000874:	f00a fd2e 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fd47 	bl	8000310 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 010c 	add.w	r1, r7, #12
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	4855      	ldr	r0, [pc, #340]	@ (80009e4 <MatrixScan+0x334>)
 8000890:	f005 fd84 	bl	800639c <HAL_UART_Transmit>
 8000894:	e198      	b.n	8000bc8 <MatrixScan+0x518>

    }
    else if ( changedPinC != 0 )
 8000896:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800089a:	2b00      	cmp	r3, #0
 800089c:	d039      	beq.n	8000912 <MatrixScan+0x262>
    {
        int bitPosition = -1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while ( changedPinC )
 80008a6:	e009      	b.n	80008bc <MatrixScan+0x20c>
        {
            changedPinC >>= 1;
 80008a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            bitPosition++;
 80008b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80008b6:	3301      	adds	r3, #1
 80008b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while ( changedPinC )
 80008bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f1      	bne.n	80008a8 <MatrixScan+0x1f8>
        }

        result.pinNumber = bitPosition + 32; // 핀 번호 (포트 C는 32 ~ 47)
 80008c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80008c8:	3320      	adds	r3, #32
 80008ca:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioC_state >> bitPosition) & 1;
 80008cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80008d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        char message[100];
        sprintf(message, "C | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80008e4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80008e6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80008ea:	f107 000c 	add.w	r0, r7, #12
 80008ee:	493f      	ldr	r1, [pc, #252]	@ (80009ec <MatrixScan+0x33c>)
 80008f0:	f00a fcf0 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fd09 	bl	8000310 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	f107 010c 	add.w	r1, r7, #12
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	4836      	ldr	r0, [pc, #216]	@ (80009e4 <MatrixScan+0x334>)
 800090c:	f005 fd46 	bl	800639c <HAL_UART_Transmit>
 8000910:	e15a      	b.n	8000bc8 <MatrixScan+0x518>

    }
    else if ( changedPinD != 0 )
 8000912:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000916:	2b00      	cmp	r3, #0
 8000918:	d039      	beq.n	800098e <MatrixScan+0x2de>
    {
        int bitPosition = -1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        while ( changedPinD )
 8000922:	e009      	b.n	8000938 <MatrixScan+0x288>
        {
            changedPinD >>= 1;
 8000924:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            bitPosition++;
 800092e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000932:	3301      	adds	r3, #1
 8000934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        while ( changedPinD )
 8000938:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f1      	bne.n	8000924 <MatrixScan+0x274>
        }

        result.pinNumber = bitPosition + 48; // 핀 번호 (포트 D는 48 ~ 63)
 8000940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000944:	3330      	adds	r3, #48	@ 0x30
 8000946:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioD_state >> bitPosition) & 1;
 8000948:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800094c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000950:	fa22 f303 	lsr.w	r3, r2, r3
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        char message[100];
        sprintf(message, "D | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000960:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000962:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000966:	f107 000c 	add.w	r0, r7, #12
 800096a:	4921      	ldr	r1, [pc, #132]	@ (80009f0 <MatrixScan+0x340>)
 800096c:	f00a fcb2 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fccb 	bl	8000310 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f107 010c 	add.w	r1, r7, #12
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	4817      	ldr	r0, [pc, #92]	@ (80009e4 <MatrixScan+0x334>)
 8000988:	f005 fd08 	bl	800639c <HAL_UART_Transmit>
 800098c:	e11c      	b.n	8000bc8 <MatrixScan+0x518>

    }
    else if ( changedPinE != 0 )
 800098e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000992:	2b00      	cmp	r3, #0
 8000994:	d063      	beq.n	8000a5e <MatrixScan+0x3ae>
    {
        int bitPosition = -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        while ( changedPinE )
 800099e:	e033      	b.n	8000a08 <MatrixScan+0x358>
 80009a0:	58020000 	.word	0x58020000
 80009a4:	58020400 	.word	0x58020400
 80009a8:	58020800 	.word	0x58020800
 80009ac:	58020c00 	.word	0x58020c00
 80009b0:	58021000 	.word	0x58021000
 80009b4:	58021400 	.word	0x58021400
 80009b8:	58021800 	.word	0x58021800
 80009bc:	58021c00 	.word	0x58021c00
 80009c0:	2400057c 	.word	0x2400057c
 80009c4:	24000580 	.word	0x24000580
 80009c8:	24000584 	.word	0x24000584
 80009cc:	24000588 	.word	0x24000588
 80009d0:	2400058c 	.word	0x2400058c
 80009d4:	24000590 	.word	0x24000590
 80009d8:	24000594 	.word	0x24000594
 80009dc:	24000598 	.word	0x24000598
 80009e0:	0800bc2c 	.word	0x0800bc2c
 80009e4:	2400033c 	.word	0x2400033c
 80009e8:	0800bc54 	.word	0x0800bc54
 80009ec:	0800bc7c 	.word	0x0800bc7c
 80009f0:	0800bca4 	.word	0x0800bca4
        {
            changedPinE >>= 1;
 80009f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            bitPosition++;
 80009fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a02:	3301      	adds	r3, #1
 8000a04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        while ( changedPinE )
 8000a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1f1      	bne.n	80009f4 <MatrixScan+0x344>
        }

        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000a10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a14:	3340      	adds	r3, #64	@ 0x40
 8000a16:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioE_state >> bitPosition) & 1;
 8000a18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a20:	fa22 f303 	lsr.w	r3, r2, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        char message[100];
        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000a30:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000a32:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000a36:	f107 000c 	add.w	r0, r7, #12
 8000a3a:	4989      	ldr	r1, [pc, #548]	@ (8000c60 <MatrixScan+0x5b0>)
 8000a3c:	f00a fc4a 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fc63 	bl	8000310 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f107 010c 	add.w	r1, r7, #12
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	4883      	ldr	r0, [pc, #524]	@ (8000c64 <MatrixScan+0x5b4>)
 8000a58:	f005 fca0 	bl	800639c <HAL_UART_Transmit>
 8000a5c:	e0b4      	b.n	8000bc8 <MatrixScan+0x518>

    }
    else if ( changedPinF != 0 )
 8000a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d039      	beq.n	8000ada <MatrixScan+0x42a>
    {
        int bitPosition = -1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        while ( changedPinF )
 8000a6e:	e009      	b.n	8000a84 <MatrixScan+0x3d4>
        {
            changedPinF >>= 1;
 8000a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000a74:	085b      	lsrs	r3, r3, #1
 8000a76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            bitPosition++;
 8000a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000a7e:	3301      	adds	r3, #1
 8000a80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        while ( changedPinF )
 8000a84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1f1      	bne.n	8000a70 <MatrixScan+0x3c0>
        }

        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000a8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000a90:	3340      	adds	r3, #64	@ 0x40
 8000a92:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioF_state >> bitPosition) & 1;
 8000a94:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000a98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        char message[100];
        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000aac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000aae:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000ab2:	f107 000c 	add.w	r0, r7, #12
 8000ab6:	496a      	ldr	r1, [pc, #424]	@ (8000c60 <MatrixScan+0x5b0>)
 8000ab8:	f00a fc0c 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fc25 	bl	8000310 <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	f107 010c 	add.w	r1, r7, #12
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	4864      	ldr	r0, [pc, #400]	@ (8000c64 <MatrixScan+0x5b4>)
 8000ad4:	f005 fc62 	bl	800639c <HAL_UART_Transmit>
 8000ad8:	e076      	b.n	8000bc8 <MatrixScan+0x518>

    }
    else if ( changedPinG != 0 )
 8000ada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d037      	beq.n	8000b52 <MatrixScan+0x4a2>
    {
        int bitPosition = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        while ( changedPinG )
 8000ae8:	e009      	b.n	8000afe <MatrixScan+0x44e>
        {
        	changedPinG >>= 1;
 8000aea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000aee:	085b      	lsrs	r3, r3, #1
 8000af0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            bitPosition++;
 8000af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000af8:	3301      	adds	r3, #1
 8000afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        while ( changedPinG )
 8000afe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1f1      	bne.n	8000aea <MatrixScan+0x43a>
        }

        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b0a:	3340      	adds	r3, #64	@ 0x40
 8000b0c:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioG_state >> bitPosition) & 1;
 8000b0e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b14:	fa22 f303 	lsr.w	r3, r2, r3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        char message[100];
        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000b24:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000b26:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000b2a:	f107 000c 	add.w	r0, r7, #12
 8000b2e:	494c      	ldr	r1, [pc, #304]	@ (8000c60 <MatrixScan+0x5b0>)
 8000b30:	f00a fbd0 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fbe9 	bl	8000310 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	f107 010c 	add.w	r1, r7, #12
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	4846      	ldr	r0, [pc, #280]	@ (8000c64 <MatrixScan+0x5b4>)
 8000b4c:	f005 fc26 	bl	800639c <HAL_UART_Transmit>
 8000b50:	e03a      	b.n	8000bc8 <MatrixScan+0x518>

    }
    else if ( changedPinH != 0 )
 8000b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d036      	beq.n	8000bc8 <MatrixScan+0x518>
    {
        int bitPosition = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while ( changedPinH )
 8000b60:	e009      	b.n	8000b76 <MatrixScan+0x4c6>
        {
        	changedPinH >>= 1;
 8000b62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000b66:	085b      	lsrs	r3, r3, #1
 8000b68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            bitPosition++;
 8000b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b70:	3301      	adds	r3, #1
 8000b72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while ( changedPinH )
 8000b76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f1      	bne.n	8000b62 <MatrixScan+0x4b2>
        }

        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000b7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b82:	3340      	adds	r3, #64	@ 0x40
 8000b84:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioH_state >> bitPosition) & 1;
 8000b86:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        char message[100];
        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000b9c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000b9e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000ba2:	f107 000c 	add.w	r0, r7, #12
 8000ba6:	492e      	ldr	r1, [pc, #184]	@ (8000c60 <MatrixScan+0x5b0>)
 8000ba8:	f00a fb94 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fbad 	bl	8000310 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f107 010c 	add.w	r1, r7, #12
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	4828      	ldr	r0, [pc, #160]	@ (8000c64 <MatrixScan+0x5b4>)
 8000bc4:	f005 fbea 	bl	800639c <HAL_UART_Transmit>



    // 이전 상태 업데이트

    Last_gpioA_state = gpioA_state;
 8000bc8:	4a27      	ldr	r2, [pc, #156]	@ (8000c68 <MatrixScan+0x5b8>)
 8000bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000bce:	6013      	str	r3, [r2, #0]
    Last_gpioB_state = gpioB_state;
 8000bd0:	4a26      	ldr	r2, [pc, #152]	@ (8000c6c <MatrixScan+0x5bc>)
 8000bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bd6:	6013      	str	r3, [r2, #0]
    Last_gpioC_state = gpioC_state;
 8000bd8:	4a25      	ldr	r2, [pc, #148]	@ (8000c70 <MatrixScan+0x5c0>)
 8000bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000bde:	6013      	str	r3, [r2, #0]
    Last_gpioD_state = gpioD_state;
 8000be0:	4a24      	ldr	r2, [pc, #144]	@ (8000c74 <MatrixScan+0x5c4>)
 8000be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000be6:	6013      	str	r3, [r2, #0]
    Last_gpioE_state = gpioE_state;
 8000be8:	4a23      	ldr	r2, [pc, #140]	@ (8000c78 <MatrixScan+0x5c8>)
 8000bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000bee:	6013      	str	r3, [r2, #0]
    Last_gpioF_state = gpioF_state;
 8000bf0:	4a22      	ldr	r2, [pc, #136]	@ (8000c7c <MatrixScan+0x5cc>)
 8000bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000bf6:	6013      	str	r3, [r2, #0]
    Last_gpioG_state = gpioG_state;
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <MatrixScan+0x5d0>)
 8000bfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bfc:	6013      	str	r3, [r2, #0]
    Last_gpioH_state = gpioH_state;
 8000bfe:	4a21      	ldr	r2, [pc, #132]	@ (8000c84 <MatrixScan+0x5d4>)
 8000c00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c02:	6013      	str	r3, [r2, #0]



    if ( HAL_GetTick() - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME)
 8000c04:	f001 f820 	bl	8001c48 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c0c:	491e      	ldr	r1, [pc, #120]	@ (8000c88 <MatrixScan+0x5d8>)
 8000c0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c18:	d910      	bls.n	8000c3c <MatrixScan+0x58c>
    {

        // Last_gpioI_state = gpioI_state;

        DebounceTimer[result.pinNumber] = HAL_GetTick();
 8000c1a:	f001 f815 	bl	8001c48 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c22:	4611      	mov	r1, r2
 8000c24:	4a18      	ldr	r2, [pc, #96]	@ (8000c88 <MatrixScan+0x5d8>)
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


    	return result;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c36:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c3a:	e00d      	b.n	8000c58 <MatrixScan+0x5a8>
    }
    else
    {
        result.pinNumber = -1;
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = -1;
 8000c42:	23ff      	movs	r3, #255	@ 0xff
 8000c44:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        return result;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c54:	e882 0003 	stmia.w	r2, {r0, r1}
    }



}
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	37d8      	adds	r7, #216	@ 0xd8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	0800bccc 	.word	0x0800bccc
 8000c64:	2400033c 	.word	0x2400033c
 8000c68:	2400057c 	.word	0x2400057c
 8000c6c:	24000580 	.word	0x24000580
 8000c70:	24000584 	.word	0x24000584
 8000c74:	24000588 	.word	0x24000588
 8000c78:	2400058c 	.word	0x2400058c
 8000c7c:	24000590 	.word	0x24000590
 8000c80:	24000594 	.word	0x24000594
 8000c84:	24000598 	.word	0x24000598
 8000c88:	24000578 	.word	0x24000578

08000c8c <SetKeycode>:




void SetKeycode(int keycode)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == 0x00)
 8000c94:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc0 <SetKeycode+0x134>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d104      	bne.n	8000ca6 <SetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = keycode;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b47      	ldr	r3, [pc, #284]	@ (8000dc0 <SetKeycode+0x134>)
 8000ca2:	709a      	strb	r2, [r3, #2]
    }
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
    {
        keyboardReport.Keycode6 = keycode;
    }
}
 8000ca4:	e086      	b.n	8000db4 <SetKeycode+0x128>
    else if (keyboardReport.Keycode2 == 0x00 && keycode != keyboardReport.Keycode1)
 8000ca6:	4b46      	ldr	r3, [pc, #280]	@ (8000dc0 <SetKeycode+0x134>)
 8000ca8:	78db      	ldrb	r3, [r3, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10a      	bne.n	8000cc4 <SetKeycode+0x38>
 8000cae:	4b44      	ldr	r3, [pc, #272]	@ (8000dc0 <SetKeycode+0x134>)
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d004      	beq.n	8000cc4 <SetKeycode+0x38>
        keyboardReport.Keycode2 = keycode;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b40      	ldr	r3, [pc, #256]	@ (8000dc0 <SetKeycode+0x134>)
 8000cc0:	70da      	strb	r2, [r3, #3]
 8000cc2:	e077      	b.n	8000db4 <SetKeycode+0x128>
    else if (keyboardReport.Keycode3 == 0x00 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8000dc0 <SetKeycode+0x134>)
 8000cc6:	791b      	ldrb	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d110      	bne.n	8000cee <SetKeycode+0x62>
 8000ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc0 <SetKeycode+0x134>)
 8000cce:	78db      	ldrb	r3, [r3, #3]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d00a      	beq.n	8000cee <SetKeycode+0x62>
 8000cd8:	4b39      	ldr	r3, [pc, #228]	@ (8000dc0 <SetKeycode+0x134>)
 8000cda:	789b      	ldrb	r3, [r3, #2]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d004      	beq.n	8000cee <SetKeycode+0x62>
        keyboardReport.Keycode3 = keycode;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b35      	ldr	r3, [pc, #212]	@ (8000dc0 <SetKeycode+0x134>)
 8000cea:	711a      	strb	r2, [r3, #4]
 8000cec:	e062      	b.n	8000db4 <SetKeycode+0x128>
    else if (keyboardReport.Keycode4 == 0x00 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000cee:	4b34      	ldr	r3, [pc, #208]	@ (8000dc0 <SetKeycode+0x134>)
 8000cf0:	795b      	ldrb	r3, [r3, #5]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d116      	bne.n	8000d24 <SetKeycode+0x98>
 8000cf6:	4b32      	ldr	r3, [pc, #200]	@ (8000dc0 <SetKeycode+0x134>)
 8000cf8:	791b      	ldrb	r3, [r3, #4]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d010      	beq.n	8000d24 <SetKeycode+0x98>
 8000d02:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc0 <SetKeycode+0x134>)
 8000d04:	78db      	ldrb	r3, [r3, #3]
 8000d06:	461a      	mov	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d00a      	beq.n	8000d24 <SetKeycode+0x98>
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc0 <SetKeycode+0x134>)
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d004      	beq.n	8000d24 <SetKeycode+0x98>
        keyboardReport.Keycode4 = keycode;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b28      	ldr	r3, [pc, #160]	@ (8000dc0 <SetKeycode+0x134>)
 8000d20:	715a      	strb	r2, [r3, #5]
 8000d22:	e047      	b.n	8000db4 <SetKeycode+0x128>
    else if (keyboardReport.Keycode5 == 0x00 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d24:	4b26      	ldr	r3, [pc, #152]	@ (8000dc0 <SetKeycode+0x134>)
 8000d26:	799b      	ldrb	r3, [r3, #6]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d11c      	bne.n	8000d66 <SetKeycode+0xda>
 8000d2c:	4b24      	ldr	r3, [pc, #144]	@ (8000dc0 <SetKeycode+0x134>)
 8000d2e:	795b      	ldrb	r3, [r3, #5]
 8000d30:	461a      	mov	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d016      	beq.n	8000d66 <SetKeycode+0xda>
 8000d38:	4b21      	ldr	r3, [pc, #132]	@ (8000dc0 <SetKeycode+0x134>)
 8000d3a:	791b      	ldrb	r3, [r3, #4]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d010      	beq.n	8000d66 <SetKeycode+0xda>
 8000d44:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <SetKeycode+0x134>)
 8000d46:	78db      	ldrb	r3, [r3, #3]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d00a      	beq.n	8000d66 <SetKeycode+0xda>
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <SetKeycode+0x134>)
 8000d52:	789b      	ldrb	r3, [r3, #2]
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d004      	beq.n	8000d66 <SetKeycode+0xda>
        keyboardReport.Keycode5 = keycode;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <SetKeycode+0x134>)
 8000d62:	719a      	strb	r2, [r3, #6]
 8000d64:	e026      	b.n	8000db4 <SetKeycode+0x128>
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <SetKeycode+0x134>)
 8000d68:	79db      	ldrb	r3, [r3, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d122      	bne.n	8000db4 <SetKeycode+0x128>
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <SetKeycode+0x134>)
 8000d70:	799b      	ldrb	r3, [r3, #6]
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d01c      	beq.n	8000db4 <SetKeycode+0x128>
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <SetKeycode+0x134>)
 8000d7c:	795b      	ldrb	r3, [r3, #5]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d016      	beq.n	8000db4 <SetKeycode+0x128>
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <SetKeycode+0x134>)
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d010      	beq.n	8000db4 <SetKeycode+0x128>
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <SetKeycode+0x134>)
 8000d94:	78db      	ldrb	r3, [r3, #3]
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00a      	beq.n	8000db4 <SetKeycode+0x128>
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <SetKeycode+0x134>)
 8000da0:	789b      	ldrb	r3, [r3, #2]
 8000da2:	461a      	mov	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d004      	beq.n	8000db4 <SetKeycode+0x128>
        keyboardReport.Keycode6 = keycode;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <SetKeycode+0x134>)
 8000db0:	71da      	strb	r2, [r3, #7]
}
 8000db2:	e7ff      	b.n	8000db4 <SetKeycode+0x128>
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	24000334 	.word	0x24000334

08000dc4 <ResetKeycode>:

void ResetKeycode(int keycode)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == keycode)
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <ResetKeycode+0x80>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d102      	bne.n	8000dde <ResetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = 0x00;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <ResetKeycode+0x80>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	709a      	strb	r2, [r3, #2]
    }
    if (keyboardReport.Keycode2 == keycode)
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <ResetKeycode+0x80>)
 8000de0:	78db      	ldrb	r3, [r3, #3]
 8000de2:	461a      	mov	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d102      	bne.n	8000df0 <ResetKeycode+0x2c>
    {
        keyboardReport.Keycode2 = 0x00;
 8000dea:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <ResetKeycode+0x80>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	70da      	strb	r2, [r3, #3]
    }
    if (keyboardReport.Keycode3 == keycode)
 8000df0:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <ResetKeycode+0x80>)
 8000df2:	791b      	ldrb	r3, [r3, #4]
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d102      	bne.n	8000e02 <ResetKeycode+0x3e>
    {
        keyboardReport.Keycode3 = 0x00;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <ResetKeycode+0x80>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	711a      	strb	r2, [r3, #4]
    }
    if (keyboardReport.Keycode4 == keycode)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <ResetKeycode+0x80>)
 8000e04:	795b      	ldrb	r3, [r3, #5]
 8000e06:	461a      	mov	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d102      	bne.n	8000e14 <ResetKeycode+0x50>
    {
        keyboardReport.Keycode4 = 0x00;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <ResetKeycode+0x80>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	715a      	strb	r2, [r3, #5]
    }
    if (keyboardReport.Keycode5 == keycode)
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <ResetKeycode+0x80>)
 8000e16:	799b      	ldrb	r3, [r3, #6]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d102      	bne.n	8000e26 <ResetKeycode+0x62>
    {
        keyboardReport.Keycode5 = 0x00;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <ResetKeycode+0x80>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	719a      	strb	r2, [r3, #6]
    }
    if (keyboardReport.Keycode6 == keycode)
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <ResetKeycode+0x80>)
 8000e28:	79db      	ldrb	r3, [r3, #7]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d102      	bne.n	8000e38 <ResetKeycode+0x74>
    {
        keyboardReport.Keycode6 = 0x00;
 8000e32:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <ResetKeycode+0x80>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	71da      	strb	r2, [r3, #7]
    }
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	24000334 	.word	0x24000334

08000e48 <KeycodeSend>:

void KeycodeSend()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09a      	sub	sp, #104	@ 0x68
 8000e4c:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t *)&keyboardReport, sizeof(keyboardReport));
 8000e4e:	2208      	movs	r2, #8
 8000e50:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <KeycodeSend+0x3c>)
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <KeycodeSend+0x40>)
 8000e54:	f008 f9ce 	bl	80091f4 <USBD_HID_SendReport>

    char message[100];
    sprintf(message, "KeycodeSend");
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <KeycodeSend+0x44>)
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f00a fa39 	bl	800b2d4 <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fa53 	bl	8000310 <strlen>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	1d39      	adds	r1, r7, #4
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	4806      	ldr	r0, [pc, #24]	@ (8000e90 <KeycodeSend+0x48>)
 8000e76:	f005 fa91 	bl	800639c <HAL_UART_Transmit>
}
 8000e7a:	bf00      	nop
 8000e7c:	3768      	adds	r7, #104	@ 0x68
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	24000334 	.word	0x24000334
 8000e88:	240005a8 	.word	0x240005a8
 8000e8c:	0800bcf4 	.word	0x0800bcf4
 8000e90:	2400033c 	.word	0x2400033c

08000e94 <PressKeycodes>:

void PressKeycodes(int i)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b09c      	sub	sp, #112	@ 0x70
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

	if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000e9c:	4b89      	ldr	r3, [pc, #548]	@ (80010c4 <PressKeycodes+0x230>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4989      	ldr	r1, [pc, #548]	@ (80010c8 <PressKeycodes+0x234>)
 8000ea2:	2264      	movs	r2, #100	@ 0x64
 8000ea4:	fb03 f202 	mul.w	r2, r3, r2
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000eb0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d925      	bls.n	8000f04 <PressKeycodes+0x70>
	{
		KeyTimer = HAL_GetTick();
 8000eb8:	f000 fec6 	bl	8001c48 <HAL_GetTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b82      	ldr	r3, [pc, #520]	@ (80010cc <PressKeycodes+0x238>)
 8000ec2:	601a      	str	r2, [r3, #0]

		char message5[100];
		sprintf(message5, "HoldTapPress = %d \n\r", Keycode[LayerState][i]);
 8000ec4:	4b7f      	ldr	r3, [pc, #508]	@ (80010c4 <PressKeycodes+0x230>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	497f      	ldr	r1, [pc, #508]	@ (80010c8 <PressKeycodes+0x234>)
 8000eca:	2264      	movs	r2, #100	@ 0x64
 8000ecc:	fb03 f202 	mul.w	r2, r3, r2
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	497c      	ldr	r1, [pc, #496]	@ (80010d0 <PressKeycodes+0x23c>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f00a f9f7 	bl	800b2d4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fa10 	bl	8000310 <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f107 010c 	add.w	r1, r7, #12
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	4875      	ldr	r0, [pc, #468]	@ (80010d4 <PressKeycodes+0x240>)
 8000efe:	f005 fa4d 	bl	800639c <HAL_UART_Transmit>

		char message4[100];
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
	}
}
 8000f02:	e0db      	b.n	80010bc <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 10000)
 8000f04:	4b6f      	ldr	r3, [pc, #444]	@ (80010c4 <PressKeycodes+0x230>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	496f      	ldr	r1, [pc, #444]	@ (80010c8 <PressKeycodes+0x234>)
 8000f0a:	2264      	movs	r2, #100	@ 0x64
 8000f0c:	fb03 f202 	mul.w	r2, r3, r2
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f18:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d941      	bls.n	8000fa4 <PressKeycodes+0x110>
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i] - 10000];
 8000f20:	4b68      	ldr	r3, [pc, #416]	@ (80010c4 <PressKeycodes+0x230>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4968      	ldr	r1, [pc, #416]	@ (80010c8 <PressKeycodes+0x234>)
 8000f26:	2264      	movs	r2, #100	@ 0x64
 8000f28:	fb03 f202 	mul.w	r2, r3, r2
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b68      	ldr	r3, [pc, #416]	@ (80010d8 <PressKeycodes+0x244>)
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a68      	ldr	r2, [pc, #416]	@ (80010dc <PressKeycodes+0x248>)
 8000f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	4b67      	ldr	r3, [pc, #412]	@ (80010e0 <PressKeycodes+0x24c>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b64      	ldr	r3, [pc, #400]	@ (80010e0 <PressKeycodes+0x24c>)
 8000f50:	701a      	strb	r2, [r3, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 8000f52:	4b63      	ldr	r3, [pc, #396]	@ (80010e0 <PressKeycodes+0x24c>)
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4b63      	ldr	r3, [pc, #396]	@ (80010e4 <PressKeycodes+0x250>)
 8000f58:	701a      	strb	r2, [r3, #0]
		sprintf(message1, "ModifierPress = %d \n\r", Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	@ (80010c4 <PressKeycodes+0x230>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	495a      	ldr	r1, [pc, #360]	@ (80010c8 <PressKeycodes+0x234>)
 8000f60:	2264      	movs	r2, #100	@ 0x64
 8000f62:	fb03 f202 	mul.w	r2, r3, r2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b59      	ldr	r3, [pc, #356]	@ (80010d8 <PressKeycodes+0x244>)
 8000f72:	4413      	add	r3, r2
 8000f74:	4a59      	ldr	r2, [pc, #356]	@ (80010dc <PressKeycodes+0x248>)
 8000f76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	495a      	ldr	r1, [pc, #360]	@ (80010e8 <PressKeycodes+0x254>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00a f9a7 	bl	800b2d4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f9c0 	bl	8000310 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f107 010c 	add.w	r1, r7, #12
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	484d      	ldr	r0, [pc, #308]	@ (80010d4 <PressKeycodes+0x240>)
 8000f9e:	f005 f9fd 	bl	800639c <HAL_UART_Transmit>
}
 8000fa2:	e08b      	b.n	80010bc <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 5000)
 8000fa4:	4b47      	ldr	r3, [pc, #284]	@ (80010c4 <PressKeycodes+0x230>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4947      	ldr	r1, [pc, #284]	@ (80010c8 <PressKeycodes+0x234>)
 8000faa:	2264      	movs	r2, #100	@ 0x64
 8000fac:	fb03 f202 	mul.w	r2, r3, r2
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d94b      	bls.n	8001058 <PressKeycodes+0x1c4>
		if ( Keycode[LayerState][i] == KC_FN1)
 8000fc0:	4b40      	ldr	r3, [pc, #256]	@ (80010c4 <PressKeycodes+0x230>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4940      	ldr	r1, [pc, #256]	@ (80010c8 <PressKeycodes+0x234>)
 8000fc6:	2264      	movs	r2, #100	@ 0x64
 8000fc8:	fb03 f202 	mul.w	r2, r3, r2
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d103      	bne.n	8000fe4 <PressKeycodes+0x150>
			LayerState = 1; // Layer1 when pressed
 8000fdc:	4b39      	ldr	r3, [pc, #228]	@ (80010c4 <PressKeycodes+0x230>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e022      	b.n	800102a <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD0)
 8000fe4:	4b37      	ldr	r3, [pc, #220]	@ (80010c4 <PressKeycodes+0x230>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4937      	ldr	r1, [pc, #220]	@ (80010c8 <PressKeycodes+0x234>)
 8000fea:	2264      	movs	r2, #100	@ 0x64
 8000fec:	fb03 f202 	mul.w	r2, r3, r2
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ff8:	f241 3289 	movw	r2, #5001	@ 0x1389
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d103      	bne.n	8001008 <PressKeycodes+0x174>
			LayerState = 0;
 8001000:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <PressKeycodes+0x230>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e010      	b.n	800102a <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD1)
 8001008:	4b2e      	ldr	r3, [pc, #184]	@ (80010c4 <PressKeycodes+0x230>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	492e      	ldr	r1, [pc, #184]	@ (80010c8 <PressKeycodes+0x234>)
 800100e:	2264      	movs	r2, #100	@ 0x64
 8001010:	fb03 f202 	mul.w	r2, r3, r2
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800101c:	f241 328a 	movw	r2, #5002	@ 0x138a
 8001020:	4293      	cmp	r3, r2
 8001022:	d102      	bne.n	800102a <PressKeycodes+0x196>
			LayerState = 1;
 8001024:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <PressKeycodes+0x230>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
		sprintf(message1, "Current Layer = %d \n\r", LayerState);
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <PressKeycodes+0x230>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	492e      	ldr	r1, [pc, #184]	@ (80010ec <PressKeycodes+0x258>)
 8001034:	4618      	mov	r0, r3
 8001036:	f00a f94d 	bl	800b2d4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f966 	bl	8000310 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	b29a      	uxth	r2, r3
 8001048:	f107 010c 	add.w	r1, r7, #12
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	4820      	ldr	r0, [pc, #128]	@ (80010d4 <PressKeycodes+0x240>)
 8001052:	f005 f9a3 	bl	800639c <HAL_UART_Transmit>
}
 8001056:	e031      	b.n	80010bc <PressKeycodes+0x228>
		SetKeycode(Keycode[LayerState][i]);
 8001058:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <PressKeycodes+0x230>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	491a      	ldr	r1, [pc, #104]	@ (80010c8 <PressKeycodes+0x234>)
 800105e:	2264      	movs	r2, #100	@ 0x64
 8001060:	fb03 f202 	mul.w	r2, r3, r2
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe0d 	bl	8000c8c <SetKeycode>
		WhichLayer[i] = LayerState;
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <PressKeycodes+0x230>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	491e      	ldr	r1, [pc, #120]	@ (80010f0 <PressKeycodes+0x25c>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <PressKeycodes+0x230>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4911      	ldr	r1, [pc, #68]	@ (80010c8 <PressKeycodes+0x234>)
 8001084:	2264      	movs	r2, #100	@ 0x64
 8001086:	fb03 f202 	mul.w	r2, r3, r2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001092:	461a      	mov	r2, r3
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4916      	ldr	r1, [pc, #88]	@ (80010f4 <PressKeycodes+0x260>)
 800109a:	4618      	mov	r0, r3
 800109c:	f00a f91a 	bl	800b2d4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f933 	bl	8000310 <strlen>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	f107 010c 	add.w	r1, r7, #12
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	4807      	ldr	r0, [pc, #28]	@ (80010d4 <PressKeycodes+0x240>)
 80010b8:	f005 f970 	bl	800639c <HAL_UART_Transmit>
}
 80010bc:	bf00      	nop
 80010be:	3770      	adds	r7, #112	@ 0x70
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240003dc 	.word	0x240003dc
 80010c8:	24000000 	.word	0x24000000
 80010cc:	24000574 	.word	0x24000574
 80010d0:	0800bd00 	.word	0x0800bd00
 80010d4:	2400033c 	.word	0x2400033c
 80010d8:	ffffd8f0 	.word	0xffffd8f0
 80010dc:	24000190 	.word	0x24000190
 80010e0:	240003d8 	.word	0x240003d8
 80010e4:	24000334 	.word	0x24000334
 80010e8:	0800bd18 	.word	0x0800bd18
 80010ec:	0800bd30 	.word	0x0800bd30
 80010f0:	240003e0 	.word	0x240003e0
 80010f4:	0800bd48 	.word	0x0800bd48

080010f8 <ReleaseKeycodes>:

void ReleaseKeycodes(int i)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09c      	sub	sp, #112	@ 0x70
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8001100:	4b8c      	ldr	r3, [pc, #560]	@ (8001334 <ReleaseKeycodes+0x23c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	498c      	ldr	r1, [pc, #560]	@ (8001338 <ReleaseKeycodes+0x240>)
 8001106:	2264      	movs	r2, #100	@ 0x64
 8001108:	fb03 f202 	mul.w	r2, r3, r2
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4413      	add	r3, r2
 8001110:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001114:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001118:	4293      	cmp	r3, r2
 800111a:	d959      	bls.n	80011d0 <ReleaseKeycodes+0xd8>
    {
        if (HAL_GetTick() - KeyTimer > HOLD_TIME)
 800111c:	f000 fd94 	bl	8001c48 <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	4a86      	ldr	r2, [pc, #536]	@ (800133c <ReleaseKeycodes+0x244>)
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	2bfa      	cmp	r3, #250	@ 0xfa
 800112a:	d90e      	bls.n	800114a <ReleaseKeycodes+0x52>
        {
            TempKeycode = Keycode[LayerState + 1][i]; // Hold 작동시 다음 레이어에 있는 키코드 전송
 800112c:	4b81      	ldr	r3, [pc, #516]	@ (8001334 <ReleaseKeycodes+0x23c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	4981      	ldr	r1, [pc, #516]	@ (8001338 <ReleaseKeycodes+0x240>)
 8001134:	2264      	movs	r2, #100	@ 0x64
 8001136:	fb03 f202 	mul.w	r2, r3, r2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001142:	461a      	mov	r2, r3
 8001144:	4b7e      	ldr	r3, [pc, #504]	@ (8001340 <ReleaseKeycodes+0x248>)
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e00e      	b.n	8001168 <ReleaseKeycodes+0x70>
        }
        else
        {
            TempKeycode = Keycode[LayerState][i] - 30000; // Tap 작동시 현재 레이어에 있는 키코드 -30000 전송
 800114a:	4b7a      	ldr	r3, [pc, #488]	@ (8001334 <ReleaseKeycodes+0x23c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	497a      	ldr	r1, [pc, #488]	@ (8001338 <ReleaseKeycodes+0x240>)
 8001150:	2264      	movs	r2, #100	@ 0x64
 8001152:	fb03 f202 	mul.w	r2, r3, r2
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800115e:	461a      	mov	r2, r3
 8001160:	4b78      	ldr	r3, [pc, #480]	@ (8001344 <ReleaseKeycodes+0x24c>)
 8001162:	4413      	add	r3, r2
 8001164:	4a76      	ldr	r2, [pc, #472]	@ (8001340 <ReleaseKeycodes+0x248>)
 8001166:	6013      	str	r3, [r2, #0]
        }
        SetKeycode(TempKeycode);
 8001168:	4b75      	ldr	r3, [pc, #468]	@ (8001340 <ReleaseKeycodes+0x248>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fd8d 	bl	8000c8c <SetKeycode>
        KeycodeSend();
 8001172:	f7ff fe69 	bl	8000e48 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 8001176:	2032      	movs	r0, #50	@ 0x32
 8001178:	f000 fd72 	bl	8001c60 <HAL_Delay>
        ResetKeycode(TempKeycode);
 800117c:	4b70      	ldr	r3, [pc, #448]	@ (8001340 <ReleaseKeycodes+0x248>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe1f 	bl	8000dc4 <ResetKeycode>
        KeycodeSend();
 8001186:	f7ff fe5f 	bl	8000e48 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 800118a:	2032      	movs	r0, #50	@ 0x32
 800118c:	f000 fd68 	bl	8001c60 <HAL_Delay>

        char message5[100];
        sprintf(message5, "HoldTapRelease = %d \n\r", Keycode[LayerState][i]);
 8001190:	4b68      	ldr	r3, [pc, #416]	@ (8001334 <ReleaseKeycodes+0x23c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4968      	ldr	r1, [pc, #416]	@ (8001338 <ReleaseKeycodes+0x240>)
 8001196:	2264      	movs	r2, #100	@ 0x64
 8001198:	fb03 f202 	mul.w	r2, r3, r2
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011a4:	461a      	mov	r2, r3
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4967      	ldr	r1, [pc, #412]	@ (8001348 <ReleaseKeycodes+0x250>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00a f891 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f8aa 	bl	8000310 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f107 010c 	add.w	r1, r7, #12
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	4860      	ldr	r0, [pc, #384]	@ (800134c <ReleaseKeycodes+0x254>)
 80011ca:	f005 f8e7 	bl	800639c <HAL_UART_Transmit>
        char message5[100];
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
    }

}
 80011ce:	e0ac      	b.n	800132a <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 10000)
 80011d0:	4b58      	ldr	r3, [pc, #352]	@ (8001334 <ReleaseKeycodes+0x23c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4958      	ldr	r1, [pc, #352]	@ (8001338 <ReleaseKeycodes+0x240>)
 80011d6:	2264      	movs	r2, #100	@ 0x64
 80011d8:	fb03 f202 	mul.w	r2, r3, r2
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011e4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d93e      	bls.n	800126a <ReleaseKeycodes+0x172>
        Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i] - 10000]);
 80011ec:	4b51      	ldr	r3, [pc, #324]	@ (8001334 <ReleaseKeycodes+0x23c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4951      	ldr	r1, [pc, #324]	@ (8001338 <ReleaseKeycodes+0x240>)
 80011f2:	2264      	movs	r2, #100	@ 0x64
 80011f4:	fb03 f202 	mul.w	r2, r3, r2
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001200:	461a      	mov	r2, r3
 8001202:	4b53      	ldr	r3, [pc, #332]	@ (8001350 <ReleaseKeycodes+0x258>)
 8001204:	4413      	add	r3, r2
 8001206:	4a53      	ldr	r2, [pc, #332]	@ (8001354 <ReleaseKeycodes+0x25c>)
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	b25b      	sxtb	r3, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	b25a      	sxtb	r2, r3
 8001212:	4b51      	ldr	r3, [pc, #324]	@ (8001358 <ReleaseKeycodes+0x260>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	4013      	ands	r3, r2
 800121a:	b25b      	sxtb	r3, r3
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b4e      	ldr	r3, [pc, #312]	@ (8001358 <ReleaseKeycodes+0x260>)
 8001220:	701a      	strb	r2, [r3, #0]
        keyboardReport.MODIFIER = Modifier_Sum;
 8001222:	4b4d      	ldr	r3, [pc, #308]	@ (8001358 <ReleaseKeycodes+0x260>)
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	4b4d      	ldr	r3, [pc, #308]	@ (800135c <ReleaseKeycodes+0x264>)
 8001228:	701a      	strb	r2, [r3, #0]
        sprintf(message2, "ModifierRelease = %d\n\r", Keycode[LayerState][i]);
 800122a:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <ReleaseKeycodes+0x23c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4942      	ldr	r1, [pc, #264]	@ (8001338 <ReleaseKeycodes+0x240>)
 8001230:	2264      	movs	r2, #100	@ 0x64
 8001232:	fb03 f202 	mul.w	r2, r3, r2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800123e:	461a      	mov	r2, r3
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4946      	ldr	r1, [pc, #280]	@ (8001360 <ReleaseKeycodes+0x268>)
 8001246:	4618      	mov	r0, r3
 8001248:	f00a f844 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message2, strlen(message2), HAL_MAX_DELAY);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f85d 	bl	8000310 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f107 010c 	add.w	r1, r7, #12
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	483a      	ldr	r0, [pc, #232]	@ (800134c <ReleaseKeycodes+0x254>)
 8001264:	f005 f89a 	bl	800639c <HAL_UART_Transmit>
}
 8001268:	e05f      	b.n	800132a <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 5000 )
 800126a:	4b32      	ldr	r3, [pc, #200]	@ (8001334 <ReleaseKeycodes+0x23c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4932      	ldr	r1, [pc, #200]	@ (8001338 <ReleaseKeycodes+0x240>)
 8001270:	2264      	movs	r2, #100	@ 0x64
 8001272:	fb03 f202 	mul.w	r2, r3, r2
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800127e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001282:	4293      	cmp	r3, r2
 8001284:	d927      	bls.n	80012d6 <ReleaseKeycodes+0x1de>
    	if ( Keycode[LayerState][i] == KC_FN1 )
 8001286:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <ReleaseKeycodes+0x23c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	492b      	ldr	r1, [pc, #172]	@ (8001338 <ReleaseKeycodes+0x240>)
 800128c:	2264      	movs	r2, #100	@ 0x64
 800128e:	fb03 f202 	mul.w	r2, r3, r2
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800129a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d143      	bne.n	800132a <ReleaseKeycodes+0x232>
            LayerState = 0; // Layer0 when released
 80012a2:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <ReleaseKeycodes+0x23c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
            sprintf(message1, "Current Layer = %d \n\r", LayerState);
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <ReleaseKeycodes+0x23c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	492c      	ldr	r1, [pc, #176]	@ (8001364 <ReleaseKeycodes+0x26c>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f00a f80e 	bl	800b2d4 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f827 	bl	8000310 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f107 010c 	add.w	r1, r7, #12
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	481f      	ldr	r0, [pc, #124]	@ (800134c <ReleaseKeycodes+0x254>)
 80012d0:	f005 f864 	bl	800639c <HAL_UART_Transmit>
}
 80012d4:	e029      	b.n	800132a <ReleaseKeycodes+0x232>
        TempKeycode = Keycode[WhichLayer[i]][i];
 80012d6:	4a24      	ldr	r2, [pc, #144]	@ (8001368 <ReleaseKeycodes+0x270>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	4916      	ldr	r1, [pc, #88]	@ (8001338 <ReleaseKeycodes+0x240>)
 80012e0:	2264      	movs	r2, #100	@ 0x64
 80012e2:	fb03 f202 	mul.w	r2, r3, r2
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <ReleaseKeycodes+0x248>)
 80012f2:	601a      	str	r2, [r3, #0]
        ResetKeycode(TempKeycode);
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <ReleaseKeycodes+0x248>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fd63 	bl	8000dc4 <ResetKeycode>
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <ReleaseKeycodes+0x248>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4919      	ldr	r1, [pc, #100]	@ (800136c <ReleaseKeycodes+0x274>)
 8001308:	4618      	mov	r0, r3
 800130a:	f009 ffe3 	bl	800b2d4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4618      	mov	r0, r3
 8001314:	f7fe fffc 	bl	8000310 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	f107 010c 	add.w	r1, r7, #12
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	4809      	ldr	r0, [pc, #36]	@ (800134c <ReleaseKeycodes+0x254>)
 8001326:	f005 f839 	bl	800639c <HAL_UART_Transmit>
}
 800132a:	bf00      	nop
 800132c:	3770      	adds	r7, #112	@ 0x70
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	240003dc 	.word	0x240003dc
 8001338:	24000000 	.word	0x24000000
 800133c:	24000574 	.word	0x24000574
 8001340:	24000570 	.word	0x24000570
 8001344:	ffff8ad0 	.word	0xffff8ad0
 8001348:	0800bd60 	.word	0x0800bd60
 800134c:	2400033c 	.word	0x2400033c
 8001350:	ffffd8f0 	.word	0xffffd8f0
 8001354:	24000190 	.word	0x24000190
 8001358:	240003d8 	.word	0x240003d8
 800135c:	24000334 	.word	0x24000334
 8001360:	0800bd78 	.word	0x0800bd78
 8001364:	0800bd30 	.word	0x0800bd30
 8001368:	240003e0 	.word	0x240003e0
 800136c:	0800bd90 	.word	0x0800bd90

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b09e      	sub	sp, #120	@ 0x78
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001376:	f000 f9e9 	bl	800174c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137a:	f000 fbdf 	bl	8001b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137e:	f000 f865 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001382:	f000 f91f 	bl	80015c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001386:	f009 fae9 	bl	800a95c <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 800138a:	f000 f8cf 	bl	800152c <MX_UART4_Init>
    {
        //Timer = HAL_GetTick(); // Get Current Time

    	//CheckScanrate();

        if (HAL_GetTick() - LastTimer >= 10000)
 800138e:	f000 fc5b 	bl	8001c48 <HAL_GetTick>
 8001392:	4603      	mov	r3, r0
 8001394:	4a28      	ldr	r2, [pc, #160]	@ (8001438 <main+0xc8>)
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800139e:	4293      	cmp	r3, r2
 80013a0:	d927      	bls.n	80013f2 <main+0x82>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", HAL_GetTick(), Scanrate / 10);
 80013a2:	f000 fc51 	bl	8001c48 <HAL_GetTick>
 80013a6:	4601      	mov	r1, r0
 80013a8:	4b24      	ldr	r3, [pc, #144]	@ (800143c <main+0xcc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a24      	ldr	r2, [pc, #144]	@ (8001440 <main+0xd0>)
 80013ae:	fb82 0203 	smull	r0, r2, r2, r3
 80013b2:	1092      	asrs	r2, r2, #2
 80013b4:	17db      	asrs	r3, r3, #31
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f107 000c 	add.w	r0, r7, #12
 80013bc:	460a      	mov	r2, r1
 80013be:	4921      	ldr	r1, [pc, #132]	@ (8001444 <main+0xd4>)
 80013c0:	f009 ff88 	bl	800b2d4 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7fe ffa1 	bl	8000310 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f107 010c 	add.w	r1, r7, #12
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	481b      	ldr	r0, [pc, #108]	@ (8001448 <main+0xd8>)
 80013dc:	f004 ffde 	bl	800639c <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 80013e0:	f000 fc32 	bl	8001c48 <HAL_GetTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <main+0xc8>)
 80013ea:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <main+0xcc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <main+0xcc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a10      	ldr	r2, [pc, #64]	@ (800143c <main+0xcc>)
 80013fa:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

        MatrixScan();
 80013fc:	463b      	mov	r3, r7
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f956 	bl	80006b0 <MatrixScan>
        MatrixScanResult Matrix = MatrixScan();
 8001404:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f951 	bl	80006b0 <MatrixScan>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY); */




        if ( Matrix.pinNumber != -1 )
 800140e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d0bb      	beq.n	800138e <main+0x1e>
        {

			if ( Matrix.pinState == 1)
 8001416:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800141a:	2b01      	cmp	r3, #1
 800141c:	d104      	bne.n	8001428 <main+0xb8>
			{
				PressKeycodes(Matrix.pinNumber);
 800141e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fd37 	bl	8000e94 <PressKeycodes>
 8001426:	e003      	b.n	8001430 <main+0xc0>
			}
			else
			{
				ReleaseKeycodes(Matrix.pinNumber);
 8001428:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe64 	bl	80010f8 <ReleaseKeycodes>
			}
        	KeycodeSend();
 8001430:	f7ff fd0a 	bl	8000e48 <KeycodeSend>
    {
 8001434:	e7ab      	b.n	800138e <main+0x1e>
 8001436:	bf00      	nop
 8001438:	240003d4 	.word	0x240003d4
 800143c:	240003d0 	.word	0x240003d0
 8001440:	66666667 	.word	0x66666667
 8001444:	0800bda8 	.word	0x0800bda8
 8001448:	2400033c 	.word	0x2400033c

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b09c      	sub	sp, #112	@ 0x70
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	224c      	movs	r2, #76	@ 0x4c
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f009 ff5a 	bl	800b314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2220      	movs	r2, #32
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f009 ff54 	bl	800b314 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800146c:	2002      	movs	r0, #2
 800146e:	f002 f9d3 	bl	8003818 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b2c      	ldr	r3, [pc, #176]	@ (8001528 <SystemClock_Config+0xdc>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a2b      	ldr	r2, [pc, #172]	@ (8001528 <SystemClock_Config+0xdc>)
 800147c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b29      	ldr	r3, [pc, #164]	@ (8001528 <SystemClock_Config+0xdc>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800148e:	bf00      	nop
 8001490:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <SystemClock_Config+0xdc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800149c:	d1f8      	bne.n	8001490 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800149e:	2321      	movs	r3, #33	@ 0x21
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014a8:	2301      	movs	r3, #1
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ac:	2302      	movs	r3, #2
 80014ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80014b4:	2305      	movs	r3, #5
 80014b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80014b8:	236e      	movs	r3, #110	@ 0x6e
 80014ba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80014c8:	2308      	movs	r3, #8
 80014ca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f9e7 	bl	80038ac <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014e4:	f000 f95e 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	233f      	movs	r3, #63	@ 0x3f
 80014ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ec:	2303      	movs	r3, #3
 80014ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014f4:	2308      	movs	r3, #8
 80014f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014f8:	2340      	movs	r3, #64	@ 0x40
 80014fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014fc:	2340      	movs	r3, #64	@ 0x40
 80014fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001504:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8001506:	2350      	movs	r3, #80	@ 0x50
 8001508:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2103      	movs	r1, #3
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fda6 	bl	8004060 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800151a:	f000 f943 	bl	80017a4 <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3770      	adds	r7, #112	@ 0x70
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	58024800 	.word	0x58024800

0800152c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <MX_UART4_Init+0x90>)
 8001532:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <MX_UART4_Init+0x94>)
 8001534:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_UART4_Init+0x90>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_UART4_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <MX_UART4_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_UART4_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <MX_UART4_Init+0x90>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_UART4_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_UART4_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_UART4_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_UART4_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_UART4_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001574:	4811      	ldr	r0, [pc, #68]	@ (80015bc <MX_UART4_Init+0x90>)
 8001576:	f004 fec1 	bl	80062fc <HAL_UART_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001580:	f000 f910 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001584:	2100      	movs	r1, #0
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <MX_UART4_Init+0x90>)
 8001588:	f006 f85b 	bl	8007642 <HAL_UARTEx_SetTxFifoThreshold>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001592:	f000 f907 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001596:	2100      	movs	r1, #0
 8001598:	4808      	ldr	r0, [pc, #32]	@ (80015bc <MX_UART4_Init+0x90>)
 800159a:	f006 f890 	bl	80076be <HAL_UARTEx_SetRxFifoThreshold>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015a4:	f000 f8fe 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <MX_UART4_Init+0x90>)
 80015aa:	f006 f811 	bl	80075d0 <HAL_UARTEx_DisableFifoMode>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80015b4:	f000 f8f6 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2400033c 	.word	0x2400033c
 80015c0:	40004c00 	.word	0x40004c00

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015da:	4b56      	ldr	r3, [pc, #344]	@ (8001734 <MX_GPIO_Init+0x170>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e0:	4a54      	ldr	r2, [pc, #336]	@ (8001734 <MX_GPIO_Init+0x170>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ea:	4b52      	ldr	r3, [pc, #328]	@ (8001734 <MX_GPIO_Init+0x170>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001734 <MX_GPIO_Init+0x170>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fe:	4a4d      	ldr	r2, [pc, #308]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001608:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <MX_GPIO_Init+0x170>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	4b47      	ldr	r3, [pc, #284]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161c:	4a45      	ldr	r2, [pc, #276]	@ (8001734 <MX_GPIO_Init+0x170>)
 800161e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001626:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163a:	4a3e      	ldr	r2, [pc, #248]	@ (8001734 <MX_GPIO_Init+0x170>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001644:	4b3b      	ldr	r3, [pc, #236]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b38      	ldr	r3, [pc, #224]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001658:	4a36      	ldr	r2, [pc, #216]	@ (8001734 <MX_GPIO_Init+0x170>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001662:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001670:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001676:	4a2f      	ldr	r2, [pc, #188]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001680:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <MX_GPIO_Init+0x170>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800168e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001692:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4825      	ldr	r0, [pc, #148]	@ (8001738 <MX_GPIO_Init+0x174>)
 80016a4:	f000 fc88 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80016a8:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80016ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	481f      	ldr	r0, [pc, #124]	@ (800173c <MX_GPIO_Init+0x178>)
 80016be:	f000 fc7b 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 80016c2:	f649 73d4 	movw	r3, #40916	@ 0x9fd4
 80016c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	481a      	ldr	r0, [pc, #104]	@ (8001740 <MX_GPIO_Init+0x17c>)
 80016d8:	f000 fc6e 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB3 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 80016dc:	f244 33dc 	movw	r3, #17372	@ 0x43dc
 80016e0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4814      	ldr	r0, [pc, #80]	@ (8001744 <MX_GPIO_Init+0x180>)
 80016f2:	f000 fc61 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001702:	2301      	movs	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	480d      	ldr	r0, [pc, #52]	@ (8001744 <MX_GPIO_Init+0x180>)
 800170e:	f000 fc53 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001712:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001716:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171c:	2301      	movs	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	4808      	ldr	r0, [pc, #32]	@ (8001748 <MX_GPIO_Init+0x184>)
 8001728:	f000 fc46 	bl	8001fb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800172c:	bf00      	nop
 800172e:	3730      	adds	r7, #48	@ 0x30
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	58024400 	.word	0x58024400
 8001738:	58021000 	.word	0x58021000
 800173c:	58020800 	.word	0x58020800
 8001740:	58020000 	.word	0x58020000
 8001744:	58020400 	.word	0x58020400
 8001748:	58020c00 	.word	0x58020c00

0800174c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001752:	463b      	mov	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800175e:	f000 fbb3 	bl	8001ec8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001762:	2301      	movs	r3, #1
 8001764:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001766:	2300      	movs	r3, #0
 8001768:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800176e:	231f      	movs	r3, #31
 8001770:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001772:	2387      	movs	r3, #135	@ 0x87
 8001774:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001776:	2300      	movs	r3, #0
 8001778:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800177a:	2300      	movs	r3, #0
 800177c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800177e:	2301      	movs	r3, #1
 8001780:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001782:	2301      	movs	r3, #1
 8001784:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800178e:	463b      	mov	r3, r7
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fbd1 	bl	8001f38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001796:	2004      	movs	r0, #4
 8001798:	f000 fbae 	bl	8001ef8 <HAL_MPU_Enable>

}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <Error_Handler+0x8>

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <HAL_MspInit+0x30>)
 80017b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017bc:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <HAL_MspInit+0x30>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_MspInit+0x30>)
 80017c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	58024400 	.word	0x58024400

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0b8      	sub	sp, #224	@ 0xe0
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	22b8      	movs	r2, #184	@ 0xb8
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f009 fd85 	bl	800b314 <memset>
  if(huart->Instance==UART4)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a26      	ldr	r2, [pc, #152]	@ (80018a8 <HAL_UART_MspInit+0xc4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d145      	bne.n	80018a0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001814:	f04f 0202 	mov.w	r2, #2
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4618      	mov	r0, r3
 800182c:	f002 ffa4 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001836:	f7ff ffb5 	bl	80017a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800183a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <HAL_UART_MspInit+0xc8>)
 800183c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001840:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <HAL_UART_MspInit+0xc8>)
 8001842:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001846:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_UART_MspInit+0xc8>)
 800184c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001850:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_UART_MspInit+0xc8>)
 800185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185e:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <HAL_UART_MspInit+0xc8>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <HAL_UART_MspInit+0xc8>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001876:	2303      	movs	r3, #3
 8001878:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800188e:	2308      	movs	r3, #8
 8001890:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <HAL_UART_MspInit+0xcc>)
 800189c:	f000 fb8c 	bl	8001fb8 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80018a0:	bf00      	nop
 80018a2:	37e0      	adds	r7, #224	@ 0xe0
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40004c00 	.word	0x40004c00
 80018ac:	58024400 	.word	0x58024400
 80018b0:	58020000 	.word	0x58020000

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <NMI_Handler+0x4>

080018bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <MemManage_Handler+0x4>

080018cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <UsageFault_Handler+0x4>

080018dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190a:	f000 f989 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <OTG_HS_IRQHandler+0x10>)
 800191a:	f000 fe36 	bl	800258a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	24000a84 	.word	0x24000a84

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f009 fce4 	bl	800b324 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	24050000 	.word	0x24050000
 8001988:	00000400 	.word	0x00000400
 800198c:	2400059c 	.word	0x2400059c
 8001990:	240010c8 	.word	0x240010c8

08001994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001998:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <SystemInit+0x100>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a94 <SystemInit+0x100>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <SystemInit+0x104>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	2b06      	cmp	r3, #6
 80019b2:	d807      	bhi.n	80019c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019b4:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <SystemInit+0x104>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 030f 	bic.w	r3, r3, #15
 80019bc:	4a36      	ldr	r2, [pc, #216]	@ (8001a98 <SystemInit+0x104>)
 80019be:	f043 0307 	orr.w	r3, r3, #7
 80019c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019c4:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <SystemInit+0x108>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a34      	ldr	r2, [pc, #208]	@ (8001a9c <SystemInit+0x108>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019d0:	4b32      	ldr	r3, [pc, #200]	@ (8001a9c <SystemInit+0x108>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019d6:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <SystemInit+0x108>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4930      	ldr	r1, [pc, #192]	@ (8001a9c <SystemInit+0x108>)
 80019dc:	4b30      	ldr	r3, [pc, #192]	@ (8001aa0 <SystemInit+0x10c>)
 80019de:	4013      	ands	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <SystemInit+0x104>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <SystemInit+0x104>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 030f 	bic.w	r3, r3, #15
 80019f6:	4a28      	ldr	r2, [pc, #160]	@ (8001a98 <SystemInit+0x104>)
 80019f8:	f043 0307 	orr.w	r3, r3, #7
 80019fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019fe:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <SystemInit+0x108>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a04:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <SystemInit+0x108>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a0a:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <SystemInit+0x108>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a10:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <SystemInit+0x108>)
 8001a12:	4a24      	ldr	r2, [pc, #144]	@ (8001aa4 <SystemInit+0x110>)
 8001a14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a16:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <SystemInit+0x108>)
 8001a18:	4a23      	ldr	r2, [pc, #140]	@ (8001aa8 <SystemInit+0x114>)
 8001a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <SystemInit+0x108>)
 8001a1e:	4a23      	ldr	r2, [pc, #140]	@ (8001aac <SystemInit+0x118>)
 8001a20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <SystemInit+0x108>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a28:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <SystemInit+0x108>)
 8001a2a:	4a20      	ldr	r2, [pc, #128]	@ (8001aac <SystemInit+0x118>)
 8001a2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <SystemInit+0x108>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a34:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <SystemInit+0x108>)
 8001a36:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <SystemInit+0x118>)
 8001a38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <SystemInit+0x108>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a40:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <SystemInit+0x108>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a15      	ldr	r2, [pc, #84]	@ (8001a9c <SystemInit+0x108>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <SystemInit+0x108>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <SystemInit+0x108>)
 8001a54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d113      	bne.n	8001a88 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a60:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <SystemInit+0x108>)
 8001a62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a66:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <SystemInit+0x108>)
 8001a68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a6c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <SystemInit+0x11c>)
 8001a72:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a76:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <SystemInit+0x108>)
 8001a7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a7e:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <SystemInit+0x108>)
 8001a80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a84:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00
 8001a98:	52002000 	.word	0x52002000
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001aa4:	02020200 	.word	0x02020200
 8001aa8:	01ff0000 	.word	0x01ff0000
 8001aac:	01010280 	.word	0x01010280
 8001ab0:	52004000 	.word	0x52004000

08001ab4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <ExitRun0Mode+0x2c>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <ExitRun0Mode+0x2c>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001ac4:	bf00      	nop
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <ExitRun0Mode+0x2c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f9      	beq.n	8001ac6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	58024800 	.word	0x58024800

08001ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ae4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001b20 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001ae8:	f7ff ffe4 	bl	8001ab4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aec:	f7ff ff52 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af0:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001af2:	490d      	ldr	r1, [pc, #52]	@ (8001b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b08:	4c0a      	ldr	r4, [pc, #40]	@ (8001b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b16:	f009 fc0b 	bl	800b330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1a:	f7ff fc29 	bl	8001370 <main>
  bx  lr
 8001b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001b24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b28:	24000318 	.word	0x24000318
  ldr r2, =_sidata
 8001b2c:	0800be94 	.word	0x0800be94
  ldr r2, =_sbss
 8001b30:	24000318 	.word	0x24000318
  ldr r4, =_ebss
 8001b34:	240010c4 	.word	0x240010c4

08001b38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC3_IRQHandler>
	...

08001b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b42:	2003      	movs	r0, #3
 8001b44:	f000 f980 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b48:	f002 fc40 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <HAL_Init+0x68>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	4913      	ldr	r1, [pc, #76]	@ (8001ba8 <HAL_Init+0x6c>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <HAL_Init+0x68>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba8 <HAL_Init+0x6c>)
 8001b70:	5cd3      	ldrb	r3, [r2, r3]
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bac <HAL_Init+0x70>)
 8001b7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b80:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb0 <HAL_Init+0x74>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b86:	200f      	movs	r0, #15
 8001b88:	f000 f814 	bl	8001bb4 <HAL_InitTick>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e002      	b.n	8001b9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b96:	f7ff fe0b 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	0800be18 	.word	0x0800be18
 8001bac:	240001b4 	.word	0x240001b4
 8001bb0:	240001b0 	.word	0x240001b0

08001bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bbc:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_InitTick+0x60>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e021      	b.n	8001c0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_InitTick+0x64>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_InitTick+0x60>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f965 	bl	8001eae <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 f92f 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	@ (8001c1c <HAL_InitTick+0x68>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	240001bc 	.word	0x240001bc
 8001c18:	240001b0 	.word	0x240001b0
 8001c1c:	240001b8 	.word	0x240001b8

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	240001bc 	.word	0x240001bc
 8001c44:	240005a0 	.word	0x240005a0

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	240005a0 	.word	0x240005a0

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	240001bc 	.word	0x240001bc

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	05fa0000 	.word	0x05fa0000

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff29 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff40 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff33 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa4 	bl	8001e04 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ecc:	f3bf 8f5f 	dmb	sy
}
 8001ed0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <HAL_MPU_Disable+0x28>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <HAL_MPU_Disable+0x28>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001edc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_MPU_Disable+0x2c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00
 8001ef4:	e000ed90 	.word	0xe000ed90

08001ef8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f00:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <HAL_MPU_Enable+0x38>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_MPU_Enable+0x3c>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	4a09      	ldr	r2, [pc, #36]	@ (8001f34 <HAL_MPU_Enable+0x3c>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f16:	f3bf 8f4f 	dsb	sy
}
 8001f1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f1c:	f3bf 8f6f 	isb	sy
}
 8001f20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed90 	.word	0xe000ed90
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	785a      	ldrb	r2, [r3, #1]
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f46:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f48:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f54:	4a17      	ldr	r2, [pc, #92]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7b1b      	ldrb	r3, [r3, #12]
 8001f60:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7adb      	ldrb	r3, [r3, #11]
 8001f66:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7a9b      	ldrb	r3, [r3, #10]
 8001f6e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7b5b      	ldrb	r3, [r3, #13]
 8001f76:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7b9b      	ldrb	r3, [r3, #14]
 8001f7e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7bdb      	ldrb	r3, [r3, #15]
 8001f86:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7a5b      	ldrb	r3, [r3, #9]
 8001f8e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7a1b      	ldrb	r3, [r3, #8]
 8001f96:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f98:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa0:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fa2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa4:	6113      	str	r3, [r2, #16]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed90 	.word	0xe000ed90

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fc6:	4b86      	ldr	r3, [pc, #536]	@ (80021e0 <HAL_GPIO_Init+0x228>)
 8001fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fca:	e18c      	b.n	80022e6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 817e 	beq.w	80022e0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d005      	beq.n	8001ffc <HAL_GPIO_Init+0x44>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d130      	bne.n	800205e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002032:	2201      	movs	r2, #1
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f003 0201 	and.w	r2, r3, #1
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b03      	cmp	r3, #3
 8002068:	d017      	beq.n	800209a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d123      	bne.n	80020ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	69b9      	ldr	r1, [r7, #24]
 80020ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0203 	and.w	r2, r3, #3
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80d8 	beq.w	80022e0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002130:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <HAL_GPIO_Init+0x22c>)
 8002132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002136:	4a2b      	ldr	r2, [pc, #172]	@ (80021e4 <HAL_GPIO_Init+0x22c>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002140:	4b28      	ldr	r3, [pc, #160]	@ (80021e4 <HAL_GPIO_Init+0x22c>)
 8002142:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214e:	4a26      	ldr	r2, [pc, #152]	@ (80021e8 <HAL_GPIO_Init+0x230>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <HAL_GPIO_Init+0x234>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d04a      	beq.n	8002210 <HAL_GPIO_Init+0x258>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <HAL_GPIO_Init+0x238>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02b      	beq.n	80021da <HAL_GPIO_Init+0x222>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <HAL_GPIO_Init+0x23c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d025      	beq.n	80021d6 <HAL_GPIO_Init+0x21e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1a      	ldr	r2, [pc, #104]	@ (80021f8 <HAL_GPIO_Init+0x240>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01f      	beq.n	80021d2 <HAL_GPIO_Init+0x21a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a19      	ldr	r2, [pc, #100]	@ (80021fc <HAL_GPIO_Init+0x244>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d019      	beq.n	80021ce <HAL_GPIO_Init+0x216>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a18      	ldr	r2, [pc, #96]	@ (8002200 <HAL_GPIO_Init+0x248>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_Init+0x212>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a17      	ldr	r2, [pc, #92]	@ (8002204 <HAL_GPIO_Init+0x24c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00d      	beq.n	80021c6 <HAL_GPIO_Init+0x20e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a16      	ldr	r2, [pc, #88]	@ (8002208 <HAL_GPIO_Init+0x250>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x20a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a15      	ldr	r2, [pc, #84]	@ (800220c <HAL_GPIO_Init+0x254>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_GPIO_Init+0x206>
 80021ba:	2309      	movs	r3, #9
 80021bc:	e029      	b.n	8002212 <HAL_GPIO_Init+0x25a>
 80021be:	230a      	movs	r3, #10
 80021c0:	e027      	b.n	8002212 <HAL_GPIO_Init+0x25a>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e025      	b.n	8002212 <HAL_GPIO_Init+0x25a>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e023      	b.n	8002212 <HAL_GPIO_Init+0x25a>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e021      	b.n	8002212 <HAL_GPIO_Init+0x25a>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e01f      	b.n	8002212 <HAL_GPIO_Init+0x25a>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e01d      	b.n	8002212 <HAL_GPIO_Init+0x25a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e01b      	b.n	8002212 <HAL_GPIO_Init+0x25a>
 80021da:	2301      	movs	r3, #1
 80021dc:	e019      	b.n	8002212 <HAL_GPIO_Init+0x25a>
 80021de:	bf00      	nop
 80021e0:	58000080 	.word	0x58000080
 80021e4:	58024400 	.word	0x58024400
 80021e8:	58000400 	.word	0x58000400
 80021ec:	58020000 	.word	0x58020000
 80021f0:	58020400 	.word	0x58020400
 80021f4:	58020800 	.word	0x58020800
 80021f8:	58020c00 	.word	0x58020c00
 80021fc:	58021000 	.word	0x58021000
 8002200:	58021400 	.word	0x58021400
 8002204:	58021800 	.word	0x58021800
 8002208:	58021c00 	.word	0x58021c00
 800220c:	58022400 	.word	0x58022400
 8002210:	2300      	movs	r3, #0
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	f002 0203 	and.w	r2, r2, #3
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	4093      	lsls	r3, r2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002222:	4938      	ldr	r1, [pc, #224]	@ (8002304 <HAL_GPIO_Init+0x34c>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f47f ae6b 	bne.w	8001fcc <HAL_GPIO_Init+0x14>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3724      	adds	r7, #36	@ 0x24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	58000400 	.word	0x58000400

08002308 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0fe      	b.n	8002518 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f008 fc4c 	bl	800abcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2203      	movs	r2, #3
 8002338:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f005 fb6e 	bl	8007a22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7c1a      	ldrb	r2, [r3, #16]
 800234e:	f88d 2000 	strb.w	r2, [sp]
 8002352:	3304      	adds	r3, #4
 8002354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002356:	f005 fa3f 	bl	80077d8 <USB_CoreInit>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0d5      	b.n	8002518 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f005 fb66 	bl	8007a44 <USB_SetCurrentMode>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2202      	movs	r2, #2
 8002382:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0c6      	b.n	8002518 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e04a      	b.n	8002426 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	3315      	adds	r3, #21
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3314      	adds	r3, #20
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	b298      	uxth	r0, r3
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	332e      	adds	r3, #46	@ 0x2e
 80023cc:	4602      	mov	r2, r0
 80023ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3318      	adds	r3, #24
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	331c      	adds	r3, #28
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3320      	adds	r3, #32
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3324      	adds	r3, #36	@ 0x24
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	3301      	adds	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	429a      	cmp	r2, r3
 800242e:	d3af      	bcc.n	8002390 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e044      	b.n	80024c0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	3301      	adds	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	791b      	ldrb	r3, [r3, #4]
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d3b5      	bcc.n	8002436 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7c1a      	ldrb	r2, [r3, #16]
 80024d2:	f88d 2000 	strb.w	r2, [sp]
 80024d6:	3304      	adds	r3, #4
 80024d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024da:	f005 faff 	bl	8007adc <USB_DevInit>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e013      	b.n	8002518 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7b1b      	ldrb	r3, [r3, #12]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d102      	bne.n	800250c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f001 f956 	bl	80037b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f006 fb42 	bl	8008b9a <USB_DevDisconnect>

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_PCD_Start+0x1c>
 8002538:	2302      	movs	r3, #2
 800253a:	e022      	b.n	8002582 <HAL_PCD_Start+0x62>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f005 fa49 	bl	8007a00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f006 faf0 	bl	8008b58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800258a:	b590      	push	{r4, r7, lr}
 800258c:	b08d      	sub	sp, #52	@ 0x34
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f006 fbae 	bl	8008d02 <USB_GetMode>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f040 84b9 	bne.w	8002f20 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f006 fb12 	bl	8008bdc <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 84af 	beq.w	8002f1e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f006 faff 	bl	8008bdc <USB_ReadInterrupts>
 80025de:	4603      	mov	r3, r0
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d107      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f002 0202 	and.w	r2, r2, #2
 80025f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f006 faed 	bl	8008bdc <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b10      	cmp	r3, #16
 800260a:	d161      	bne.n	80026d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0210 	bic.w	r2, r2, #16
 800261a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f003 020f 	and.w	r2, r3, #15
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	3304      	adds	r3, #4
 800263a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	0c5b      	lsrs	r3, r3, #17
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	2b02      	cmp	r3, #2
 8002646:	d124      	bne.n	8002692 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d035      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800265e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	6a38      	ldr	r0, [r7, #32]
 8002668:	f006 f924 	bl	80088b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002678:	441a      	add	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800268a:	441a      	add	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	615a      	str	r2, [r3, #20]
 8002690:	e016      	b.n	80026c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	0c5b      	lsrs	r3, r3, #17
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	2b06      	cmp	r3, #6
 800269c:	d110      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026a4:	2208      	movs	r2, #8
 80026a6:	4619      	mov	r1, r3
 80026a8:	6a38      	ldr	r0, [r7, #32]
 80026aa:	f006 f903 	bl	80088b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ba:	441a      	add	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0210 	orr.w	r2, r2, #16
 80026ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f006 fa81 	bl	8008bdc <USB_ReadInterrupts>
 80026da:	4603      	mov	r3, r0
 80026dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026e4:	f040 80a7 	bne.w	8002836 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f006 fa86 	bl	8008c02 <USB_ReadDevAllOutEpInterrupt>
 80026f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80026f8:	e099      	b.n	800282e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 808e 	beq.w	8002822 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f006 faaa 	bl	8008c6a <USB_ReadDevOutEPInterrupt>
 8002716:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800272e:	461a      	mov	r2, r3
 8002730:	2301      	movs	r3, #1
 8002732:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002734:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 feb8 	bl	80034ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002752:	461a      	mov	r2, r3
 8002754:	2308      	movs	r3, #8
 8002756:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002758:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 ff8e 	bl	800367c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002776:	461a      	mov	r2, r3
 8002778:	2310      	movs	r3, #16
 800277a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d030      	beq.n	80027e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278e:	2b80      	cmp	r3, #128	@ 0x80
 8002790:	d109      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	78db      	ldrb	r3, [r3, #3]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d108      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2200      	movs	r2, #0
 80027c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f008 fb7d 	bl	800aed0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e2:	461a      	mov	r2, r3
 80027e4:	2302      	movs	r3, #2
 80027e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027fe:	461a      	mov	r2, r3
 8002800:	2320      	movs	r3, #32
 8002802:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800281a:	461a      	mov	r2, r3
 800281c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002820:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	f47f af62 	bne.w	80026fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f006 f9ce 	bl	8008bdc <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002846:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800284a:	f040 80db 	bne.w	8002a04 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f006 f9ef 	bl	8008c36 <USB_ReadDevAllInEpInterrupt>
 8002858:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800285e:	e0cd      	b.n	80029fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80c2 	beq.w	80029f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f006 fa15 	bl	8008ca6 <USB_ReadDevInEPInterrupt>
 800287c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d057      	beq.n	8002938 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	2201      	movs	r2, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800289c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69f9      	ldr	r1, [r7, #28]
 80028a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028a8:	4013      	ands	r3, r2
 80028aa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028b8:	461a      	mov	r2, r3
 80028ba:	2301      	movs	r3, #1
 80028bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	799b      	ldrb	r3, [r3, #6]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d132      	bne.n	800292c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3320      	adds	r3, #32
 80028d6:	6819      	ldr	r1, [r3, #0]
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4403      	add	r3, r0
 80028e6:	331c      	adds	r3, #28
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4419      	add	r1, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4403      	add	r3, r0
 80028fa:	3320      	adds	r3, #32
 80028fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d113      	bne.n	800292c <HAL_PCD_IRQHandler+0x3a2>
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3324      	adds	r3, #36	@ 0x24
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002924:	461a      	mov	r2, r3
 8002926:	2101      	movs	r1, #1
 8002928:	f006 fa1e 	bl	8008d68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f008 fa47 	bl	800adc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800294e:	461a      	mov	r2, r3
 8002950:	2308      	movs	r3, #8
 8002952:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800296a:	461a      	mov	r2, r3
 800296c:	2310      	movs	r3, #16
 800296e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002986:	461a      	mov	r2, r3
 8002988:	2340      	movs	r3, #64	@ 0x40
 800298a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d023      	beq.n	80029de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002996:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002998:	6a38      	ldr	r0, [r7, #32]
 800299a:	f005 f9fd 	bl	8007d98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800299e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	3310      	adds	r3, #16
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	3304      	adds	r3, #4
 80029b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	78db      	ldrb	r3, [r3, #3]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d108      	bne.n	80029cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2200      	movs	r2, #0
 80029be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f008 fa94 	bl	800aef4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029d8:	461a      	mov	r2, r3
 80029da:	2302      	movs	r3, #2
 80029dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fcd2 	bl	8003394 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	3301      	adds	r3, #1
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f47f af2e 	bne.w	8002860 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f006 f8e7 	bl	8008bdc <USB_ReadInterrupts>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a18:	d122      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d108      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a40:	2100      	movs	r1, #0
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fedc 	bl	8003800 <HAL_PCDEx_LPM_Callback>
 8002a48:	e002      	b.n	8002a50 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f008 fa32 	bl	800aeb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f006 f8b9 	bl	8008bdc <USB_ReadInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a74:	d112      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d102      	bne.n	8002a8c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f008 f9ee 	bl	800ae68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f006 f89b 	bl	8008bdc <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ab0:	d121      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002ac0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d111      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fe89 	bl	8003800 <HAL_PCDEx_LPM_Callback>
 8002aee:	e002      	b.n	8002af6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f008 f9b9 	bl	800ae68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f006 f86e 	bl	8008bdc <USB_ReadInterrupts>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b0a:	f040 80b7 	bne.w	8002c7c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2110      	movs	r1, #16
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f005 f935 	bl	8007d98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b32:	e046      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b40:	461a      	mov	r2, r3
 8002b42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b58:	0151      	lsls	r1, r2, #5
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b74:	461a      	mov	r2, r3
 8002b76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b8c:	0151      	lsls	r1, r2, #5
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	440a      	add	r2, r1
 8002b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bac:	0151      	lsls	r1, r2, #5
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	440a      	add	r2, r1
 8002bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	791b      	ldrb	r3, [r3, #4]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d3b2      	bcc.n	8002b34 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bdc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002be0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7bdb      	ldrb	r3, [r3, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d016      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bfa:	f043 030b 	orr.w	r3, r3, #11
 8002bfe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c10:	f043 030b 	orr.w	r3, r3, #11
 8002c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c16:	e015      	b.n	8002c44 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c26:	4619      	mov	r1, r3
 8002c28:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c3e:	f043 030b 	orr.w	r3, r3, #11
 8002c42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c66:	461a      	mov	r2, r3
 8002c68:	f006 f87e 	bl	8008d68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f005 ffab 	bl	8008bdc <USB_ReadInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c90:	d123      	bne.n	8002cda <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f006 f842 	bl	8008d20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f005 f8f2 	bl	8007e8a <USB_GetDevSpeed>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681c      	ldr	r4, [r3, #0]
 8002cb2:	f001 fd05 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8002cb6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f004 fdfc 	bl	80078bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f008 f8a6 	bl	800ae16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 ff7c 	bl	8008bdc <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d10a      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f008 f883 	bl	800adfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f002 0208 	and.w	r2, r2, #8
 8002d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f005 ff67 	bl	8008bdc <USB_ReadInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d14:	2b80      	cmp	r3, #128	@ 0x80
 8002d16:	d123      	bne.n	8002d60 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d24:	2301      	movs	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d28:	e014      	b.n	8002d54 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d105      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 faf2 	bl	8003332 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	3301      	adds	r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	791b      	ldrb	r3, [r3, #4]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d3e4      	bcc.n	8002d2a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 ff39 	bl	8008bdc <USB_ReadInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d74:	d13c      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d76:	2301      	movs	r3, #1
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7a:	e02b      	b.n	8002dd4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d115      	bne.n	8002dce <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002da2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	da12      	bge.n	8002dce <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3317      	adds	r3, #23
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fab2 	bl	8003332 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	791b      	ldrb	r3, [r3, #4]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d3cd      	bcc.n	8002d7c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f005 fef1 	bl	8008bdc <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e04:	d156      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e06:	2301      	movs	r3, #1
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0a:	e045      	b.n	8002e98 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d12e      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da2b      	bge.n	8002e92 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	0c1a      	lsrs	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e44:	4053      	eors	r3, r2
 8002e46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d121      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e8e:	6053      	str	r3, [r2, #4]
            break;
 8002e90:	e008      	b.n	8002ea4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	3301      	adds	r3, #1
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	791b      	ldrb	r3, [r3, #4]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d3b3      	bcc.n	8002e0c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 fe8f 	bl	8008bdc <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f008 f824 	bl	800af18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f005 fe79 	bl	8008bdc <USB_ReadInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d115      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f008 f814 	bl	800af34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	e000      	b.n	8002f20 <HAL_PCD_IRQHandler+0x996>
      return;
 8002f1e:	bf00      	nop
    }
  }
}
 8002f20:	3734      	adds	r7, #52	@ 0x34
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}

08002f26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_PCD_SetAddress+0x1a>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e012      	b.n	8002f66 <HAL_PCD_SetAddress+0x40>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f005 fdd8 	bl	8008b0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	4608      	mov	r0, r1
 8002f78:	4611      	mov	r1, r2
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	70fb      	strb	r3, [r7, #3]
 8002f80:	460b      	mov	r3, r1
 8002f82:	803b      	strh	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	da0f      	bge.n	8002fb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 020f 	and.w	r2, r3, #15
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	3310      	adds	r3, #16
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	705a      	strb	r2, [r3, #1]
 8002fb2:	e00f      	b.n	8002fd4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 020f 	and.w	r2, r3, #15
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	3304      	adds	r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002fe0:	883b      	ldrh	r3, [r7, #0]
 8002fe2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	78ba      	ldrb	r2, [r7, #2]
 8002fee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	785b      	ldrb	r3, [r3, #1]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003002:	78bb      	ldrb	r3, [r7, #2]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d102      	bne.n	800300e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_PCD_EP_Open+0xae>
 8003018:	2302      	movs	r3, #2
 800301a:	e00e      	b.n	800303a <HAL_PCD_EP_Open+0xcc>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	4618      	mov	r0, r3
 800302c:	f004 ff52 	bl	8007ed4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003038:	7afb      	ldrb	r3, [r7, #11]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800304e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003052:	2b00      	cmp	r3, #0
 8003054:	da0f      	bge.n	8003076 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3310      	adds	r3, #16
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	705a      	strb	r2, [r3, #1]
 8003074:	e00f      	b.n	8003096 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 020f 	and.w	r2, r3, #15
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_PCD_EP_Close+0x6e>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e00e      	b.n	80030ce <HAL_PCD_EP_Close+0x8c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68f9      	ldr	r1, [r7, #12]
 80030be:	4618      	mov	r0, r3
 80030c0:	f004 ff90 	bl	8007fe4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	460b      	mov	r3, r1
 80030e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	3304      	adds	r3, #4
 80030fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003118:	7afb      	ldrb	r3, [r7, #11]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	b2da      	uxtb	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	799b      	ldrb	r3, [r3, #6]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d102      	bne.n	8003132 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	799b      	ldrb	r3, [r3, #6]
 800313a:	461a      	mov	r2, r3
 800313c:	6979      	ldr	r1, [r7, #20]
 800313e:	f005 f82d 	bl	800819c <USB_EPStartXfer>

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	460b      	mov	r3, r1
 800315a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315c:	7afb      	ldrb	r3, [r7, #11]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	3310      	adds	r3, #16
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	3304      	adds	r3, #4
 8003172:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2201      	movs	r2, #1
 800318a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	b2da      	uxtb	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	799b      	ldrb	r3, [r3, #6]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d102      	bne.n	80031a6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	799b      	ldrb	r3, [r3, #6]
 80031ae:	461a      	mov	r2, r3
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	f004 fff3 	bl	800819c <USB_EPStartXfer>

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	7912      	ldrb	r2, [r2, #4]
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e04f      	b.n	800327e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da0f      	bge.n	8003206 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	3310      	adds	r3, #16
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	3304      	adds	r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	705a      	strb	r2, [r3, #1]
 8003204:	e00d      	b.n	8003222 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_PCD_EP_SetStall+0x82>
 800323e:	2302      	movs	r3, #2
 8003240:	e01d      	b.n	800327e <HAL_PCD_EP_SetStall+0xbe>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	4618      	mov	r0, r3
 8003252:	f005 fb87 	bl	8008964 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7999      	ldrb	r1, [r3, #6]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800326e:	461a      	mov	r2, r3
 8003270:	f005 fd7a 	bl	8008d68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	7912      	ldrb	r2, [r2, #4]
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e042      	b.n	800332a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da0f      	bge.n	80032cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	3310      	adds	r3, #16
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	705a      	strb	r2, [r3, #1]
 80032ca:	e00f      	b.n	80032ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 020f 	and.w	r2, r3, #15
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_PCD_EP_ClrStall+0x86>
 8003308:	2302      	movs	r3, #2
 800330a:	e00e      	b.n	800332a <HAL_PCD_EP_ClrStall+0xa4>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68f9      	ldr	r1, [r7, #12]
 800331a:	4618      	mov	r0, r3
 800331c:	f005 fb90 	bl	8008a40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800333e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003342:	2b00      	cmp	r3, #0
 8003344:	da0c      	bge.n	8003360 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	3310      	adds	r3, #16
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	3304      	adds	r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e00c      	b.n	800337a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 020f 	and.w	r2, r3, #15
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	4618      	mov	r0, r3
 8003382:	f005 f9af 	bl	80086e4 <USB_EPStopXfer>
 8003386:	4603      	mov	r3, r0
 8003388:	72fb      	strb	r3, [r7, #11]

  return ret;
 800338a:	7afb      	ldrb	r3, [r7, #11]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	@ 0x28
 8003398:	af02      	add	r7, sp, #8
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	3310      	adds	r3, #16
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d901      	bls.n	80033cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e06b      	b.n	80034a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d902      	bls.n	80033e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3303      	adds	r3, #3
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f0:	e02a      	b.n	8003448 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	429a      	cmp	r2, r3
 8003406:	d902      	bls.n	800340e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3303      	adds	r3, #3
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68d9      	ldr	r1, [r3, #12]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4603      	mov	r3, r0
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f005 fa04 	bl	8008838 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	441a      	add	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	441a      	add	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	429a      	cmp	r2, r3
 800345c:	d809      	bhi.n	8003472 <PCD_WriteEmptyTxFifo+0xde>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003466:	429a      	cmp	r2, r3
 8003468:	d203      	bcs.n	8003472 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1bf      	bne.n	80033f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	429a      	cmp	r2, r3
 800347c:	d811      	bhi.n	80034a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	2201      	movs	r2, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	43db      	mvns	r3, r3
 8003498:	6939      	ldr	r1, [r7, #16]
 800349a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800349e:	4013      	ands	r3, r2
 80034a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	333c      	adds	r3, #60	@ 0x3c
 80034c4:	3304      	adds	r3, #4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	799b      	ldrb	r3, [r3, #6]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d17b      	bne.n	80035da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4a61      	ldr	r2, [pc, #388]	@ (8003674 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	f240 80b9 	bls.w	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80b3 	beq.w	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350e:	461a      	mov	r2, r3
 8003510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003514:	6093      	str	r3, [r2, #8]
 8003516:	e0a7      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352e:	461a      	mov	r2, r3
 8003530:	2320      	movs	r3, #32
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	e098      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8093 	bne.w	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4a4b      	ldr	r2, [pc, #300]	@ (8003674 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d90f      	bls.n	800356a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003560:	461a      	mov	r2, r3
 8003562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003566:	6093      	str	r3, [r2, #8]
 8003568:	e07e      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	0159      	lsls	r1, r3, #5
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	440b      	add	r3, r1
 800358c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003596:	1ad2      	subs	r2, r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d114      	bne.n	80035cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035b4:	461a      	mov	r2, r3
 80035b6:	2101      	movs	r1, #1
 80035b8:	f005 fbd6 	bl	8008d68 <USB_EP0_OutStart>
 80035bc:	e006      	b.n	80035cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f007 fbdc 	bl	800ad90 <HAL_PCD_DataOutStageCallback>
 80035d8:	e046      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	4a26      	ldr	r2, [pc, #152]	@ (8003678 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d124      	bne.n	800362c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035fe:	6093      	str	r3, [r2, #8]
 8003600:	e032      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	2320      	movs	r3, #32
 800361c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f007 fbb3 	bl	800ad90 <HAL_PCD_DataOutStageCallback>
 800362a:	e01d      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d114      	bne.n	800365c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003654:	461a      	mov	r2, r3
 8003656:	2100      	movs	r1, #0
 8003658:	f005 fb86 	bl	8008d68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f007 fb94 	bl	800ad90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	4f54300a 	.word	0x4f54300a
 8003678:	4f54310a 	.word	0x4f54310a

0800367c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	333c      	adds	r3, #60	@ 0x3c
 8003694:	3304      	adds	r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a15      	ldr	r2, [pc, #84]	@ (8003704 <PCD_EP_OutSetupPacket_int+0x88>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d90e      	bls.n	80036d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c8:	461a      	mov	r2, r3
 80036ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f007 fb4b 	bl	800ad6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <PCD_EP_OutSetupPacket_int+0x88>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d90c      	bls.n	80036f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	799b      	ldrb	r3, [r3, #6]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d108      	bne.n	80036f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036f0:	461a      	mov	r2, r3
 80036f2:	2101      	movs	r1, #1
 80036f4:	f005 fb38 	bl	8008d68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	4f54300a 	.word	0x4f54300a

08003708 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	70fb      	strb	r3, [r7, #3]
 8003714:	4613      	mov	r3, r2
 8003716:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003726:	883b      	ldrh	r3, [r7, #0]
 8003728:	0419      	lsls	r1, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	430a      	orrs	r2, r1
 8003732:	629a      	str	r2, [r3, #40]	@ 0x28
 8003734:	e028      	b.n	8003788 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	4413      	add	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e00d      	b.n	8003766 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	3340      	adds	r3, #64	@ 0x40
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	4413      	add	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	3301      	adds	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	3b01      	subs	r3, #1
 800376c:	429a      	cmp	r2, r3
 800376e:	d3ec      	bcc.n	800374a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003770:	883b      	ldrh	r3, [r7, #0]
 8003772:	0418      	lsls	r0, r3, #16
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	3b01      	subs	r3, #1
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	4302      	orrs	r2, r0
 8003780:	3340      	adds	r3, #64	@ 0x40
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e6:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <HAL_PCDEx_ActivateLPM+0x44>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	10000003 	.word	0x10000003

08003800 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003820:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <HAL_PWREx_ConfigSupply+0x70>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b04      	cmp	r3, #4
 800382a:	d00a      	beq.n	8003842 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800382c:	4b16      	ldr	r3, [pc, #88]	@ (8003888 <HAL_PWREx_ConfigSupply+0x70>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d001      	beq.n	800383e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e01f      	b.n	800387e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e01d      	b.n	800387e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003842:	4b11      	ldr	r3, [pc, #68]	@ (8003888 <HAL_PWREx_ConfigSupply+0x70>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	490f      	ldr	r1, [pc, #60]	@ (8003888 <HAL_PWREx_ConfigSupply+0x70>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4313      	orrs	r3, r2
 8003850:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003852:	f7fe f9f9 	bl	8001c48 <HAL_GetTick>
 8003856:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003858:	e009      	b.n	800386e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800385a:	f7fe f9f5 	bl	8001c48 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003868:	d901      	bls.n	800386e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e007      	b.n	800387e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800386e:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <HAL_PWREx_ConfigSupply+0x70>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800387a:	d1ee      	bne.n	800385a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	58024800 	.word	0x58024800

0800388c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a04      	ldr	r2, [pc, #16]	@ (80038a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800389a:	60d3      	str	r3, [r2, #12]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	58024800 	.word	0x58024800

080038ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08c      	sub	sp, #48	@ 0x30
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e3c8      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8087 	beq.w	80039da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038cc:	4b88      	ldr	r3, [pc, #544]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038d6:	4b86      	ldr	r3, [pc, #536]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d007      	beq.n	80038f2 <HAL_RCC_OscConfig+0x46>
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	2b18      	cmp	r3, #24
 80038e6:	d110      	bne.n	800390a <HAL_RCC_OscConfig+0x5e>
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d10b      	bne.n	800390a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f2:	4b7f      	ldr	r3, [pc, #508]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d06c      	beq.n	80039d8 <HAL_RCC_OscConfig+0x12c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d168      	bne.n	80039d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e3a2      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x76>
 8003914:	4b76      	ldr	r3, [pc, #472]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a75      	ldr	r2, [pc, #468]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 800391a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	e02e      	b.n	8003980 <HAL_RCC_OscConfig+0xd4>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x98>
 800392a:	4b71      	ldr	r3, [pc, #452]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a70      	ldr	r2, [pc, #448]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b6e      	ldr	r3, [pc, #440]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6d      	ldr	r2, [pc, #436]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 800393c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e01d      	b.n	8003980 <HAL_RCC_OscConfig+0xd4>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0xbc>
 800394e:	4b68      	ldr	r3, [pc, #416]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a67      	ldr	r2, [pc, #412]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b65      	ldr	r3, [pc, #404]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a64      	ldr	r2, [pc, #400]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xd4>
 8003968:	4b61      	ldr	r3, [pc, #388]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a60      	ldr	r2, [pc, #384]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b5e      	ldr	r3, [pc, #376]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5d      	ldr	r2, [pc, #372]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe f95e 	bl	8001c48 <HAL_GetTick>
 800398c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe f95a 	bl	8001c48 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	@ 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e356      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039a2:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0xe4>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe f94a 	bl	8001c48 <HAL_GetTick>
 80039b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe f946 	bl	8001c48 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	@ 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e342      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ca:	4b49      	ldr	r3, [pc, #292]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x10c>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 808c 	beq.w	8003b00 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e8:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039f2:	4b3f      	ldr	r3, [pc, #252]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_RCC_OscConfig+0x162>
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	2b18      	cmp	r3, #24
 8003a02:	d137      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1c8>
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d132      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0e:	4b38      	ldr	r3, [pc, #224]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_RCC_OscConfig+0x17a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e314      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a26:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 0219 	bic.w	r2, r3, #25
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	492f      	ldr	r1, [pc, #188]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe f906 	bl	8001c48 <HAL_GetTick>
 8003a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a40:	f7fe f902 	bl	8001c48 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e2fe      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a52:	4b27      	ldr	r3, [pc, #156]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b24      	ldr	r3, [pc, #144]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	4920      	ldr	r1, [pc, #128]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a72:	e045      	b.n	8003b00 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d026      	beq.n	8003aca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 0219 	bic.w	r2, r3, #25
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4919      	ldr	r1, [pc, #100]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fe f8db 	bl	8001c48 <HAL_GetTick>
 8003a92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fe f8d7 	bl	8001c48 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e2d3      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aa8:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	490b      	ldr	r1, [pc, #44]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
 8003ac8:	e01a      	b.n	8003b00 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a08      	ldr	r2, [pc, #32]	@ (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe f8b7 	bl	8001c48 <HAL_GetTick>
 8003ada:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fe f8b3 	bl	8001c48 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d903      	bls.n	8003af4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e2af      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
 8003af0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003af4:	4b96      	ldr	r3, [pc, #600]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ee      	bne.n	8003ade <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d06a      	beq.n	8003be2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0c:	4b90      	ldr	r3, [pc, #576]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b14:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b16:	4b8e      	ldr	r3, [pc, #568]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d007      	beq.n	8003b32 <HAL_RCC_OscConfig+0x286>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b18      	cmp	r3, #24
 8003b26:	d11b      	bne.n	8003b60 <HAL_RCC_OscConfig+0x2b4>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d116      	bne.n	8003b60 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b32:	4b87      	ldr	r3, [pc, #540]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_RCC_OscConfig+0x29e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	2b80      	cmp	r3, #128	@ 0x80
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e282      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b4a:	4b81      	ldr	r3, [pc, #516]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	497d      	ldr	r1, [pc, #500]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b5e:	e040      	b.n	8003be2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d023      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b68:	4b79      	ldr	r3, [pc, #484]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a78      	ldr	r2, [pc, #480]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe f868 	bl	8001c48 <HAL_GetTick>
 8003b78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b7c:	f7fe f864 	bl	8001c48 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e260      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b8e:	4b70      	ldr	r3, [pc, #448]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	061b      	lsls	r3, r3, #24
 8003ba8:	4969      	ldr	r1, [pc, #420]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60cb      	str	r3, [r1, #12]
 8003bae:	e018      	b.n	8003be2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bb0:	4b67      	ldr	r3, [pc, #412]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a66      	ldr	r2, [pc, #408]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe f844 	bl	8001c48 <HAL_GetTick>
 8003bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bc4:	f7fe f840 	bl	8001c48 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e23c      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d036      	beq.n	8003c5c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d019      	beq.n	8003c2a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf6:	4b56      	ldr	r3, [pc, #344]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bfa:	4a55      	ldr	r2, [pc, #340]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fe f821 	bl	8001c48 <HAL_GetTick>
 8003c06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7fe f81d 	bl	8001c48 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e219      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c1c:	4b4c      	ldr	r3, [pc, #304]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x35e>
 8003c28:	e018      	b.n	8003c5c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2a:	4b49      	ldr	r3, [pc, #292]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c2e:	4a48      	ldr	r2, [pc, #288]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c36:	f7fe f807 	bl	8001c48 <HAL_GetTick>
 8003c3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fe f803 	bl	8001c48 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e1ff      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c50:	4b3f      	ldr	r3, [pc, #252]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d036      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d019      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c70:	4b37      	ldr	r3, [pc, #220]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a36      	ldr	r2, [pc, #216]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003c76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c7c:	f7fd ffe4 	bl	8001c48 <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c84:	f7fd ffe0 	bl	8001c48 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1dc      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c96:	4b2e      	ldr	r3, [pc, #184]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x3d8>
 8003ca2:	e018      	b.n	8003cd6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a29      	ldr	r2, [pc, #164]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003caa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cb0:	f7fd ffca 	bl	8001c48 <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb8:	f7fd ffc6 	bl	8001c48 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1c2      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cca:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8086 	beq.w	8003df0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d54 <HAL_RCC_OscConfig+0x4a8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d54 <HAL_RCC_OscConfig+0x4a8>)
 8003cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cf0:	f7fd ffaa 	bl	8001c48 <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf8:	f7fd ffa6 	bl	8001c48 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	@ 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e1a2      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d0a:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <HAL_RCC_OscConfig+0x4a8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCC_OscConfig+0x480>
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	4a0b      	ldr	r2, [pc, #44]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d2a:	e032      	b.n	8003d92 <HAL_RCC_OscConfig+0x4e6>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d111      	bne.n	8003d58 <HAL_RCC_OscConfig+0x4ac>
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	4a05      	ldr	r2, [pc, #20]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d40:	4b03      	ldr	r3, [pc, #12]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	4a02      	ldr	r2, [pc, #8]	@ (8003d50 <HAL_RCC_OscConfig+0x4a4>)
 8003d46:	f023 0304 	bic.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4c:	e021      	b.n	8003d92 <HAL_RCC_OscConfig+0x4e6>
 8003d4e:	bf00      	nop
 8003d50:	58024400 	.word	0x58024400
 8003d54:	58024800 	.word	0x58024800
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCC_OscConfig+0x4ce>
 8003d60:	4b83      	ldr	r3, [pc, #524]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	4a82      	ldr	r2, [pc, #520]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6c:	4b80      	ldr	r3, [pc, #512]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	4a7f      	ldr	r2, [pc, #508]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d78:	e00b      	b.n	8003d92 <HAL_RCC_OscConfig+0x4e6>
 8003d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d86:	4b7a      	ldr	r3, [pc, #488]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	4a79      	ldr	r2, [pc, #484]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d015      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7fd ff55 	bl	8001c48 <HAL_GetTick>
 8003d9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fd ff51 	bl	8001c48 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e14b      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db8:	4b6d      	ldr	r3, [pc, #436]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ee      	beq.n	8003da2 <HAL_RCC_OscConfig+0x4f6>
 8003dc4:	e014      	b.n	8003df0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fd ff3f 	bl	8001c48 <HAL_GetTick>
 8003dca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fd ff3b 	bl	8001c48 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e135      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003de4:	4b62      	ldr	r3, [pc, #392]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ee      	bne.n	8003dce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 812a 	beq.w	800404e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e02:	2b18      	cmp	r3, #24
 8003e04:	f000 80ba 	beq.w	8003f7c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	f040 8095 	bne.w	8003f3c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b57      	ldr	r3, [pc, #348]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a56      	ldr	r2, [pc, #344]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003e18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd ff13 	bl	8001c48 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd ff0f 	bl	8001c48 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e10b      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e38:	4b4d      	ldr	r3, [pc, #308]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f0      	bne.n	8003e26 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e44:	4b4a      	ldr	r3, [pc, #296]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003e46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e48:	4b4a      	ldr	r3, [pc, #296]	@ (8003f74 <HAL_RCC_OscConfig+0x6c8>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	430a      	orrs	r2, r1
 8003e58:	4945      	ldr	r1, [pc, #276]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	3b01      	subs	r3, #1
 8003e64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	025b      	lsls	r3, r3, #9
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	041b      	lsls	r3, r3, #16
 8003e7c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e86:	3b01      	subs	r3, #1
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e8e:	4938      	ldr	r1, [pc, #224]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e94:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	4a35      	ldr	r2, [pc, #212]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ea0:	4b33      	ldr	r3, [pc, #204]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea4:	4b34      	ldr	r3, [pc, #208]	@ (8003f78 <HAL_RCC_OscConfig+0x6cc>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eac:	00d2      	lsls	r2, r2, #3
 8003eae:	4930      	ldr	r1, [pc, #192]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	f023 020c 	bic.w	r2, r3, #12
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	492b      	ldr	r1, [pc, #172]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eca:	f023 0202 	bic.w	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	4927      	ldr	r1, [pc, #156]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ed8:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	4a24      	ldr	r2, [pc, #144]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee4:	4b22      	ldr	r3, [pc, #136]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	4a21      	ldr	r2, [pc, #132]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003ef6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003efc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f08:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a18      	ldr	r2, [pc, #96]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fe98 	bl	8001c48 <HAL_GetTick>
 8003f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd fe94 	bl	8001c48 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e090      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f2e:	4b10      	ldr	r3, [pc, #64]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x670>
 8003f3a:	e088      	b.n	800404e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0b      	ldr	r2, [pc, #44]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fd fe7e 	bl	8001c48 <HAL_GetTick>
 8003f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd fe7a 	bl	8001c48 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e076      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f62:	4b03      	ldr	r3, [pc, #12]	@ (8003f70 <HAL_RCC_OscConfig+0x6c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x6a4>
 8003f6e:	e06e      	b.n	800404e <HAL_RCC_OscConfig+0x7a2>
 8003f70:	58024400 	.word	0x58024400
 8003f74:	fffffc0c 	.word	0xfffffc0c
 8003f78:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f7c:	4b36      	ldr	r3, [pc, #216]	@ (8004058 <HAL_RCC_OscConfig+0x7ac>)
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f82:	4b35      	ldr	r3, [pc, #212]	@ (8004058 <HAL_RCC_OscConfig+0x7ac>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d031      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f003 0203 	and.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d12a      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d122      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d11a      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	0a5b      	lsrs	r3, r3, #9
 8003fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d111      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d108      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e02b      	b.n	8004050 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ff8:	4b17      	ldr	r3, [pc, #92]	@ (8004058 <HAL_RCC_OscConfig+0x7ac>)
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffc:	08db      	lsrs	r3, r3, #3
 8003ffe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004002:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	429a      	cmp	r2, r3
 800400c:	d01f      	beq.n	800404e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800400e:	4b12      	ldr	r3, [pc, #72]	@ (8004058 <HAL_RCC_OscConfig+0x7ac>)
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	4a11      	ldr	r2, [pc, #68]	@ (8004058 <HAL_RCC_OscConfig+0x7ac>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800401a:	f7fd fe15 	bl	8001c48 <HAL_GetTick>
 800401e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004020:	bf00      	nop
 8004022:	f7fd fe11 	bl	8001c48 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	4293      	cmp	r3, r2
 800402c:	d0f9      	beq.n	8004022 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800402e:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <HAL_RCC_OscConfig+0x7ac>)
 8004030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004032:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <HAL_RCC_OscConfig+0x7b0>)
 8004034:	4013      	ands	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800403a:	00d2      	lsls	r2, r2, #3
 800403c:	4906      	ldr	r1, [pc, #24]	@ (8004058 <HAL_RCC_OscConfig+0x7ac>)
 800403e:	4313      	orrs	r3, r2
 8004040:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004042:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <HAL_RCC_OscConfig+0x7ac>)
 8004044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004046:	4a04      	ldr	r2, [pc, #16]	@ (8004058 <HAL_RCC_OscConfig+0x7ac>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3730      	adds	r7, #48	@ 0x30
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	58024400 	.word	0x58024400
 800405c:	ffff0007 	.word	0xffff0007

08004060 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e19c      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b8a      	ldr	r3, [pc, #552]	@ (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d910      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b87      	ldr	r3, [pc, #540]	@ (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 020f 	bic.w	r2, r3, #15
 800408a:	4985      	ldr	r1, [pc, #532]	@ (80042a0 <HAL_RCC_ClockConfig+0x240>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b83      	ldr	r3, [pc, #524]	@ (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e184      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	4b7b      	ldr	r3, [pc, #492]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040bc:	429a      	cmp	r2, r3
 80040be:	d908      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040c0:	4b78      	ldr	r3, [pc, #480]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	4975      	ldr	r1, [pc, #468]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d010      	beq.n	8004100 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	4b70      	ldr	r3, [pc, #448]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d908      	bls.n	8004100 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ee:	4b6d      	ldr	r3, [pc, #436]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	496a      	ldr	r1, [pc, #424]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	4b64      	ldr	r3, [pc, #400]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004118:	429a      	cmp	r2, r3
 800411a:	d908      	bls.n	800412e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800411c:	4b61      	ldr	r3, [pc, #388]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	495e      	ldr	r1, [pc, #376]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800412a:	4313      	orrs	r3, r2
 800412c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d010      	beq.n	800415c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	4b59      	ldr	r3, [pc, #356]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004146:	429a      	cmp	r2, r3
 8004148:	d908      	bls.n	800415c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800414a:	4b56      	ldr	r3, [pc, #344]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	4953      	ldr	r1, [pc, #332]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004158:	4313      	orrs	r3, r2
 800415a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	4b4d      	ldr	r3, [pc, #308]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	429a      	cmp	r2, r3
 8004176:	d908      	bls.n	800418a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b4a      	ldr	r3, [pc, #296]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f023 020f 	bic.w	r2, r3, #15
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4947      	ldr	r1, [pc, #284]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004186:	4313      	orrs	r3, r2
 8004188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d055      	beq.n	8004242 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004196:	4b43      	ldr	r3, [pc, #268]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4940      	ldr	r1, [pc, #256]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b0:	4b3c      	ldr	r3, [pc, #240]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d121      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0f6      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041c8:	4b36      	ldr	r3, [pc, #216]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d115      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0ea      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041e0:	4b30      	ldr	r3, [pc, #192]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0de      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041f0:	4b2c      	ldr	r3, [pc, #176]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0d6      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004200:	4b28      	ldr	r3, [pc, #160]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f023 0207 	bic.w	r2, r3, #7
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4925      	ldr	r1, [pc, #148]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800420e:	4313      	orrs	r3, r2
 8004210:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004212:	f7fd fd19 	bl	8001c48 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004218:	e00a      	b.n	8004230 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421a:	f7fd fd15 	bl	8001c48 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e0be      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004230:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	429a      	cmp	r2, r3
 8004240:	d1eb      	bne.n	800421a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d010      	beq.n	8004270 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	4b14      	ldr	r3, [pc, #80]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	429a      	cmp	r2, r3
 800425c:	d208      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425e:	4b11      	ldr	r3, [pc, #68]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f023 020f 	bic.w	r2, r3, #15
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	490e      	ldr	r1, [pc, #56]	@ (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800426c:	4313      	orrs	r3, r2
 800426e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004270:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d214      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 020f 	bic.w	r2, r3, #15
 8004286:	4906      	ldr	r1, [pc, #24]	@ (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b04      	ldr	r3, [pc, #16]	@ (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e086      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
 80042a0:	52002000 	.word	0x52002000
 80042a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	4b3f      	ldr	r3, [pc, #252]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d208      	bcs.n	80042d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042c4:	4b3c      	ldr	r3, [pc, #240]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	4939      	ldr	r1, [pc, #228]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d010      	beq.n	8004304 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	4b34      	ldr	r3, [pc, #208]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d208      	bcs.n	8004304 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042f2:	4b31      	ldr	r3, [pc, #196]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	492e      	ldr	r1, [pc, #184]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004300:	4313      	orrs	r3, r2
 8004302:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d010      	beq.n	8004332 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	4b28      	ldr	r3, [pc, #160]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800431c:	429a      	cmp	r2, r3
 800431e:	d208      	bcs.n	8004332 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004320:	4b25      	ldr	r3, [pc, #148]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	4922      	ldr	r1, [pc, #136]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 800432e:	4313      	orrs	r3, r2
 8004330:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800434a:	429a      	cmp	r2, r3
 800434c:	d208      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800434e:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4917      	ldr	r1, [pc, #92]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 800435c:	4313      	orrs	r3, r2
 800435e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004360:	f000 f834 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b14      	ldr	r3, [pc, #80]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	4912      	ldr	r1, [pc, #72]	@ (80043bc <HAL_RCC_ClockConfig+0x35c>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
 800437c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800437e:	4b0e      	ldr	r3, [pc, #56]	@ (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	4a0d      	ldr	r2, [pc, #52]	@ (80043bc <HAL_RCC_ClockConfig+0x35c>)
 8004388:	5cd3      	ldrb	r3, [r2, r3]
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
 8004394:	4a0a      	ldr	r2, [pc, #40]	@ (80043c0 <HAL_RCC_ClockConfig+0x360>)
 8004396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004398:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <HAL_RCC_ClockConfig+0x364>)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800439e:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <HAL_RCC_ClockConfig+0x368>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fc06 	bl	8001bb4 <HAL_InitTick>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	58024400 	.word	0x58024400
 80043bc:	0800be18 	.word	0x0800be18
 80043c0:	240001b4 	.word	0x240001b4
 80043c4:	240001b0 	.word	0x240001b0
 80043c8:	240001b8 	.word	0x240001b8

080043cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b089      	sub	sp, #36	@ 0x24
 80043d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d2:	4bb3      	ldr	r3, [pc, #716]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043da:	2b18      	cmp	r3, #24
 80043dc:	f200 8155 	bhi.w	800468a <HAL_RCC_GetSysClockFreq+0x2be>
 80043e0:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	0800444d 	.word	0x0800444d
 80043ec:	0800468b 	.word	0x0800468b
 80043f0:	0800468b 	.word	0x0800468b
 80043f4:	0800468b 	.word	0x0800468b
 80043f8:	0800468b 	.word	0x0800468b
 80043fc:	0800468b 	.word	0x0800468b
 8004400:	0800468b 	.word	0x0800468b
 8004404:	0800468b 	.word	0x0800468b
 8004408:	08004473 	.word	0x08004473
 800440c:	0800468b 	.word	0x0800468b
 8004410:	0800468b 	.word	0x0800468b
 8004414:	0800468b 	.word	0x0800468b
 8004418:	0800468b 	.word	0x0800468b
 800441c:	0800468b 	.word	0x0800468b
 8004420:	0800468b 	.word	0x0800468b
 8004424:	0800468b 	.word	0x0800468b
 8004428:	08004479 	.word	0x08004479
 800442c:	0800468b 	.word	0x0800468b
 8004430:	0800468b 	.word	0x0800468b
 8004434:	0800468b 	.word	0x0800468b
 8004438:	0800468b 	.word	0x0800468b
 800443c:	0800468b 	.word	0x0800468b
 8004440:	0800468b 	.word	0x0800468b
 8004444:	0800468b 	.word	0x0800468b
 8004448:	0800447f 	.word	0x0800447f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800444c:	4b94      	ldr	r3, [pc, #592]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004458:	4b91      	ldr	r3, [pc, #580]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	08db      	lsrs	r3, r3, #3
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	4a90      	ldr	r2, [pc, #576]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800446a:	e111      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800446c:	4b8d      	ldr	r3, [pc, #564]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800446e:	61bb      	str	r3, [r7, #24]
      break;
 8004470:	e10e      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004472:	4b8d      	ldr	r3, [pc, #564]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004474:	61bb      	str	r3, [r7, #24]
      break;
 8004476:	e10b      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004478:	4b8c      	ldr	r3, [pc, #560]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800447a:	61bb      	str	r3, [r7, #24]
      break;
 800447c:	e108      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800447e:	4b88      	ldr	r3, [pc, #544]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004488:	4b85      	ldr	r3, [pc, #532]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004492:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004494:	4b82      	ldr	r3, [pc, #520]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800449e:	4b80      	ldr	r3, [pc, #512]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a2:	08db      	lsrs	r3, r3, #3
 80044a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80e1 	beq.w	8004684 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	f000 8083 	beq.w	80045d0 <HAL_RCC_GetSysClockFreq+0x204>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	f200 80a1 	bhi.w	8004614 <HAL_RCC_GetSysClockFreq+0x248>
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x114>
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d056      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x1c0>
 80044de:	e099      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e0:	4b6f      	ldr	r3, [pc, #444]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d02d      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044ec:	4b6c      	ldr	r3, [pc, #432]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	08db      	lsrs	r3, r3, #3
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	4a6b      	ldr	r2, [pc, #428]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
 80044fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	ee07 3a90 	vmov	s15, r3
 8004504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b62      	ldr	r3, [pc, #392]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a02 	vldr	s12, [r7, #8]
 800452a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004546:	e087      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80046b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455a:	4b51      	ldr	r3, [pc, #324]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a02 	vldr	s12, [r7, #8]
 800456e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800458a:	e065      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80046b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b40      	ldr	r3, [pc, #256]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80045b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ce:	e043      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80046bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80045de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e2:	4b2f      	ldr	r3, [pc, #188]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004612:	e021      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80046b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004626:	4b1e      	ldr	r3, [pc, #120]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004636:	ed97 6a02 	vldr	s12, [r7, #8]
 800463a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800463e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800464a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004656:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004658:	4b11      	ldr	r3, [pc, #68]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	0a5b      	lsrs	r3, r3, #9
 800465e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004662:	3301      	adds	r3, #1
 8004664:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004670:	edd7 6a07 	vldr	s13, [r7, #28]
 8004674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467c:	ee17 3a90 	vmov	r3, s15
 8004680:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004682:	e005      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
      break;
 8004688:	e002      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800468a:	4b07      	ldr	r3, [pc, #28]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800468c:	61bb      	str	r3, [r7, #24]
      break;
 800468e:	bf00      	nop
  }

  return sysclockfreq;
 8004690:	69bb      	ldr	r3, [r7, #24]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	@ 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	58024400 	.word	0x58024400
 80046a4:	03d09000 	.word	0x03d09000
 80046a8:	003d0900 	.word	0x003d0900
 80046ac:	017d7840 	.word	0x017d7840
 80046b0:	46000000 	.word	0x46000000
 80046b4:	4c742400 	.word	0x4c742400
 80046b8:	4a742400 	.word	0x4a742400
 80046bc:	4bbebc20 	.word	0x4bbebc20

080046c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046c6:	f7ff fe81 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <HAL_RCC_GetHCLKFreq+0x50>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	490f      	ldr	r1, [pc, #60]	@ (8004714 <HAL_RCC_GetHCLKFreq+0x54>)
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	fa22 f303 	lsr.w	r3, r2, r3
 80046e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <HAL_RCC_GetHCLKFreq+0x50>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	4a09      	ldr	r2, [pc, #36]	@ (8004714 <HAL_RCC_GetHCLKFreq+0x54>)
 80046ee:	5cd3      	ldrb	r3, [r2, r3]
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	4a07      	ldr	r2, [pc, #28]	@ (8004718 <HAL_RCC_GetHCLKFreq+0x58>)
 80046fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046fe:	4a07      	ldr	r2, [pc, #28]	@ (800471c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004704:	4b04      	ldr	r3, [pc, #16]	@ (8004718 <HAL_RCC_GetHCLKFreq+0x58>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	58024400 	.word	0x58024400
 8004714:	0800be18 	.word	0x0800be18
 8004718:	240001b4 	.word	0x240001b4
 800471c:	240001b0 	.word	0x240001b0

08004720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004724:	f7ff ffcc 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	091b      	lsrs	r3, r3, #4
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	4904      	ldr	r1, [pc, #16]	@ (8004748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004736:	5ccb      	ldrb	r3, [r1, r3]
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58024400 	.word	0x58024400
 8004748:	0800be18 	.word	0x0800be18

0800474c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004750:	f7ff ffb6 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b06      	ldr	r3, [pc, #24]	@ (8004770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4904      	ldr	r1, [pc, #16]	@ (8004774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	58024400 	.word	0x58024400
 8004774:	0800be18 	.word	0x0800be18

08004778 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800477c:	b0c6      	sub	sp, #280	@ 0x118
 800477e:	af00      	add	r7, sp, #0
 8004780:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004784:	2300      	movs	r3, #0
 8004786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800478a:	2300      	movs	r3, #0
 800478c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800479c:	2500      	movs	r5, #0
 800479e:	ea54 0305 	orrs.w	r3, r4, r5
 80047a2:	d049      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80047a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047ae:	d02f      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047b4:	d828      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ba:	d01a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047c0:	d822      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ca:	d007      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047cc:	e01c      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ce:	4bab      	ldr	r3, [pc, #684]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	4aaa      	ldr	r2, [pc, #680]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047da:	e01a      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e0:	3308      	adds	r3, #8
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 fc25 	bl	8006034 <RCCEx_PLL2_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047f0:	e00f      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f6:	3328      	adds	r3, #40	@ 0x28
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 fccc 	bl	8006198 <RCCEx_PLL3_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004806:	e004      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800480e:	e000      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800481a:	4b98      	ldr	r3, [pc, #608]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800481c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800481e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004828:	4a94      	ldr	r2, [pc, #592]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800482a:	430b      	orrs	r3, r1
 800482c:	6513      	str	r3, [r2, #80]	@ 0x50
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004844:	f04f 0900 	mov.w	r9, #0
 8004848:	ea58 0309 	orrs.w	r3, r8, r9
 800484c:	d047      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800484e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004854:	2b04      	cmp	r3, #4
 8004856:	d82a      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004858:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004875 	.word	0x08004875
 8004864:	08004883 	.word	0x08004883
 8004868:	08004899 	.word	0x08004899
 800486c:	080048b7 	.word	0x080048b7
 8004870:	080048b7 	.word	0x080048b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004874:	4b81      	ldr	r3, [pc, #516]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	4a80      	ldr	r2, [pc, #512]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800487a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004880:	e01a      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004886:	3308      	adds	r3, #8
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f001 fbd2 	bl	8006034 <RCCEx_PLL2_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004896:	e00f      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489c:	3328      	adds	r3, #40	@ 0x28
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fc79 	bl	8006198 <RCCEx_PLL3_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ac:	e004      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048c0:	4b6e      	ldr	r3, [pc, #440]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c4:	f023 0107 	bic.w	r1, r3, #7
 80048c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ce:	4a6b      	ldr	r2, [pc, #428]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80048d4:	e003      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80048ea:	f04f 0b00 	mov.w	fp, #0
 80048ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80048f2:	d05b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048fc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004900:	d03b      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004902:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004906:	d834      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004908:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800490c:	d037      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800490e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004912:	d82e      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004914:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004918:	d033      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800491a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800491e:	d828      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004924:	d01a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800492a:	d822      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004930:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004934:	d007      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004936:	e01c      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004938:	4b50      	ldr	r3, [pc, #320]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	4a4f      	ldr	r2, [pc, #316]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800493e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004944:	e01e      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494a:	3308      	adds	r3, #8
 800494c:	2100      	movs	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f001 fb70 	bl	8006034 <RCCEx_PLL2_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800495a:	e013      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800495c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004960:	3328      	adds	r3, #40	@ 0x28
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f001 fc17 	bl	8006198 <RCCEx_PLL3_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004970:	e008      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004978:	e004      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800497a:	bf00      	nop
 800497c:	e002      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800498c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004990:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004998:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800499c:	4a37      	ldr	r2, [pc, #220]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049a2:	e003      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80049b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049bc:	2300      	movs	r3, #0
 80049be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80049c6:	460b      	mov	r3, r1
 80049c8:	4313      	orrs	r3, r2
 80049ca:	d05d      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80049cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80049d8:	d03b      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80049da:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80049de:	d834      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e4:	d037      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80049e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049ea:	d82e      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049f0:	d033      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80049f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049f6:	d828      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049fc:	d01a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80049fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a02:	d822      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a0c:	d007      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a0e:	e01c      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b1a      	ldr	r3, [pc, #104]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a14:	4a19      	ldr	r2, [pc, #100]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a1c:	e01e      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a22:	3308      	adds	r3, #8
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fb04 	bl	8006034 <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a32:	e013      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a38:	3328      	adds	r3, #40	@ 0x28
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 fbab 	bl	8006198 <RCCEx_PLL3_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a48:	e008      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a50:	e004      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a52:	bf00      	nop
 8004a54:	e002      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10d      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a74:	4a01      	ldr	r2, [pc, #4]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a76:	430b      	orrs	r3, r1
 8004a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a7a:	e005      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004a94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a9e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	d03a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aae:	2b30      	cmp	r3, #48	@ 0x30
 8004ab0:	d01f      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004ab2:	2b30      	cmp	r3, #48	@ 0x30
 8004ab4:	d819      	bhi.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d815      	bhi.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d019      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d111      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac6:	4baa      	ldr	r3, [pc, #680]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aca:	4aa9      	ldr	r2, [pc, #676]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ad2:	e011      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad8:	3308      	adds	r3, #8
 8004ada:	2102      	movs	r1, #2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 faa9 	bl	8006034 <RCCEx_PLL2_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ae8:	e006      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004af0:	e002      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b00:	4b9b      	ldr	r3, [pc, #620]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0e:	4a98      	ldr	r2, [pc, #608]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b10:	430b      	orrs	r3, r1
 8004b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b14:	e003      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	d051      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b48:	d035      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b4e:	d82e      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b54:	d031      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004b56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b5a:	d828      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b60:	d01a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b66:	d822      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b70:	d007      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004b72:	e01c      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b74:	4b7e      	ldr	r3, [pc, #504]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	4a7d      	ldr	r2, [pc, #500]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b80:	e01c      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b86:	3308      	adds	r3, #8
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 fa52 	bl	8006034 <RCCEx_PLL2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b96:	e011      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b9c:	3328      	adds	r3, #40	@ 0x28
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 faf9 	bl	8006198 <RCCEx_PLL3_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bb4:	e002      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd2:	4a67      	ldr	r2, [pc, #412]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bd8:	e003      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004bee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bf8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	d053      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c0c:	d033      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004c0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c12:	d82c      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c18:	d02f      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004c1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c1e:	d826      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c24:	d02b      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004c26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c2a:	d820      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c30:	d012      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004c32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c36:	d81a      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d022      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c40:	d115      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c46:	3308      	adds	r3, #8
 8004c48:	2101      	movs	r1, #1
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 f9f2 	bl	8006034 <RCCEx_PLL2_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c56:	e015      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5c:	3328      	adds	r3, #40	@ 0x28
 8004c5e:	2101      	movs	r1, #1
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 fa99 	bl	8006198 <RCCEx_PLL3_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c74:	e006      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c76:	bf00      	nop
 8004c78:	e004      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c7a:	bf00      	nop
 8004c7c:	e002      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c7e:	bf00      	nop
 8004c80:	e000      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c8c:	4b38      	ldr	r3, [pc, #224]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c9a:	4a35      	ldr	r2, [pc, #212]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ca0:	e003      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ca6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cc0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d058      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cd6:	d033      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cdc:	d82c      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce2:	d02f      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce8:	d826      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004cea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004cee:	d02b      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004cf0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004cf4:	d820      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004cf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cfa:	d012      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d00:	d81a      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d022      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d0a:	d115      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d10:	3308      	adds	r3, #8
 8004d12:	2101      	movs	r1, #1
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 f98d 	bl	8006034 <RCCEx_PLL2_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d20:	e015      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d26:	3328      	adds	r3, #40	@ 0x28
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 fa34 	bl	8006198 <RCCEx_PLL3_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d36:	e00a      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d3e:	e006      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d40:	bf00      	nop
 8004d42:	e004      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d44:	bf00      	nop
 8004d46:	e002      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d48:	bf00      	nop
 8004d4a:	e000      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10e      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d66:	4a02      	ldr	r2, [pc, #8]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d6c:	e006      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004d6e:	bf00      	nop
 8004d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d037      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004da6:	d00e      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dac:	d816      	bhi.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d018      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004db6:	d111      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db8:	4bc4      	ldr	r3, [pc, #784]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	4ac3      	ldr	r2, [pc, #780]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004dc4:	e00f      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dca:	3308      	adds	r3, #8
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 f930 	bl	8006034 <RCCEx_PLL2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004dda:	e004      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004de2:	e000      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dee:	4bb7      	ldr	r3, [pc, #732]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dfc:	4ab3      	ldr	r2, [pc, #716]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e02:	e003      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e26:	460b      	mov	r3, r1
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	d039      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d81c      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004e36:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e79 	.word	0x08004e79
 8004e40:	08004e4d 	.word	0x08004e4d
 8004e44:	08004e5b 	.word	0x08004e5b
 8004e48:	08004e79 	.word	0x08004e79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4c:	4b9f      	ldr	r3, [pc, #636]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	4a9e      	ldr	r2, [pc, #632]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e58:	e00f      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5e:	3308      	adds	r3, #8
 8004e60:	2102      	movs	r1, #2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 f8e6 	bl	8006034 <RCCEx_PLL2_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e6e:	e004      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e76:	e000      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e82:	4b92      	ldr	r3, [pc, #584]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e86:	f023 0103 	bic.w	r1, r3, #3
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e90:	4a8e      	ldr	r2, [pc, #568]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e92:	430b      	orrs	r3, r1
 8004e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e96:	e003      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004eac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004eb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f000 8099 	beq.w	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec2:	4b83      	ldr	r3, [pc, #524]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a82      	ldr	r2, [pc, #520]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ece:	f7fc febb 	bl	8001c48 <HAL_GetTick>
 8004ed2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed8:	f7fc feb6 	bl	8001c48 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b64      	cmp	r3, #100	@ 0x64
 8004ee6:	d903      	bls.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004eee:	e005      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ef0:	4b77      	ldr	r3, [pc, #476]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ed      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004efc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d173      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f04:	4b71      	ldr	r3, [pc, #452]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f10:	4053      	eors	r3, r2
 8004f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d015      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f26:	4b69      	ldr	r3, [pc, #420]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2a:	4a68      	ldr	r2, [pc, #416]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f30:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f32:	4b66      	ldr	r3, [pc, #408]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f36:	4a65      	ldr	r2, [pc, #404]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f3c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f3e:	4a63      	ldr	r2, [pc, #396]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f44:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f52:	d118      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fc fe78 	bl	8001c48 <HAL_GetTick>
 8004f58:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f5c:	e00d      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7fc fe73 	bl	8001c48 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004f68:	1ad2      	subs	r2, r2, r3
 8004f6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d903      	bls.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004f78:	e005      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f7a:	4b54      	ldr	r3, [pc, #336]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0eb      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004f86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d129      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f9e:	d10e      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fb0:	091a      	lsrs	r2, r3, #4
 8004fb2:	4b48      	ldr	r3, [pc, #288]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	4a45      	ldr	r2, [pc, #276]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6113      	str	r3, [r2, #16]
 8004fbc:	e005      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004fbe:	4b43      	ldr	r3, [pc, #268]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	4a42      	ldr	r2, [pc, #264]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004fc8:	6113      	str	r3, [r2, #16]
 8004fca:	4b40      	ldr	r3, [pc, #256]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fcc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fda:	4a3c      	ldr	r2, [pc, #240]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fe6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ff0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f002 0301 	and.w	r3, r2, #1
 8005000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005004:	2300      	movs	r3, #0
 8005006:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800500a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	f000 808f 	beq.w	8005134 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800501c:	2b28      	cmp	r3, #40	@ 0x28
 800501e:	d871      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005020:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	0800510d 	.word	0x0800510d
 800502c:	08005105 	.word	0x08005105
 8005030:	08005105 	.word	0x08005105
 8005034:	08005105 	.word	0x08005105
 8005038:	08005105 	.word	0x08005105
 800503c:	08005105 	.word	0x08005105
 8005040:	08005105 	.word	0x08005105
 8005044:	08005105 	.word	0x08005105
 8005048:	080050d9 	.word	0x080050d9
 800504c:	08005105 	.word	0x08005105
 8005050:	08005105 	.word	0x08005105
 8005054:	08005105 	.word	0x08005105
 8005058:	08005105 	.word	0x08005105
 800505c:	08005105 	.word	0x08005105
 8005060:	08005105 	.word	0x08005105
 8005064:	08005105 	.word	0x08005105
 8005068:	080050ef 	.word	0x080050ef
 800506c:	08005105 	.word	0x08005105
 8005070:	08005105 	.word	0x08005105
 8005074:	08005105 	.word	0x08005105
 8005078:	08005105 	.word	0x08005105
 800507c:	08005105 	.word	0x08005105
 8005080:	08005105 	.word	0x08005105
 8005084:	08005105 	.word	0x08005105
 8005088:	0800510d 	.word	0x0800510d
 800508c:	08005105 	.word	0x08005105
 8005090:	08005105 	.word	0x08005105
 8005094:	08005105 	.word	0x08005105
 8005098:	08005105 	.word	0x08005105
 800509c:	08005105 	.word	0x08005105
 80050a0:	08005105 	.word	0x08005105
 80050a4:	08005105 	.word	0x08005105
 80050a8:	0800510d 	.word	0x0800510d
 80050ac:	08005105 	.word	0x08005105
 80050b0:	08005105 	.word	0x08005105
 80050b4:	08005105 	.word	0x08005105
 80050b8:	08005105 	.word	0x08005105
 80050bc:	08005105 	.word	0x08005105
 80050c0:	08005105 	.word	0x08005105
 80050c4:	08005105 	.word	0x08005105
 80050c8:	0800510d 	.word	0x0800510d
 80050cc:	58024400 	.word	0x58024400
 80050d0:	58024800 	.word	0x58024800
 80050d4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050dc:	3308      	adds	r3, #8
 80050de:	2101      	movs	r1, #1
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 ffa7 	bl	8006034 <RCCEx_PLL2_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050ec:	e00f      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f2:	3328      	adds	r3, #40	@ 0x28
 80050f4:	2101      	movs	r1, #1
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 f84e 	bl	8006198 <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005102:	e004      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800510a:	e000      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800510c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005116:	4bbf      	ldr	r3, [pc, #764]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005124:	4abb      	ldr	r2, [pc, #748]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005126:	430b      	orrs	r3, r1
 8005128:	6553      	str	r3, [r2, #84]	@ 0x54
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f002 0302 	and.w	r3, r2, #2
 8005140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005144:	2300      	movs	r3, #0
 8005146:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800514a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800514e:	460b      	mov	r3, r1
 8005150:	4313      	orrs	r3, r2
 8005152:	d041      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515a:	2b05      	cmp	r3, #5
 800515c:	d824      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800515e:	a201      	add	r2, pc, #4	@ (adr r2, 8005164 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	080051b1 	.word	0x080051b1
 8005168:	0800517d 	.word	0x0800517d
 800516c:	08005193 	.word	0x08005193
 8005170:	080051b1 	.word	0x080051b1
 8005174:	080051b1 	.word	0x080051b1
 8005178:	080051b1 	.word	0x080051b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005180:	3308      	adds	r3, #8
 8005182:	2101      	movs	r1, #1
 8005184:	4618      	mov	r0, r3
 8005186:	f000 ff55 	bl	8006034 <RCCEx_PLL2_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005190:	e00f      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005196:	3328      	adds	r3, #40	@ 0x28
 8005198:	2101      	movs	r1, #1
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fffc 	bl	8006198 <RCCEx_PLL3_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051a6:	e004      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80051b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051ba:	4b96      	ldr	r3, [pc, #600]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	f023 0107 	bic.w	r1, r3, #7
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c8:	4a92      	ldr	r2, [pc, #584]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f002 0304 	and.w	r3, r2, #4
 80051e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051e8:	2300      	movs	r3, #0
 80051ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051f2:	460b      	mov	r3, r1
 80051f4:	4313      	orrs	r3, r2
 80051f6:	d044      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005200:	2b05      	cmp	r3, #5
 8005202:	d825      	bhi.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005204:	a201      	add	r2, pc, #4	@ (adr r2, 800520c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	08005259 	.word	0x08005259
 8005210:	08005225 	.word	0x08005225
 8005214:	0800523b 	.word	0x0800523b
 8005218:	08005259 	.word	0x08005259
 800521c:	08005259 	.word	0x08005259
 8005220:	08005259 	.word	0x08005259
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005228:	3308      	adds	r3, #8
 800522a:	2101      	movs	r1, #1
 800522c:	4618      	mov	r0, r3
 800522e:	f000 ff01 	bl	8006034 <RCCEx_PLL2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005238:	e00f      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800523a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800523e:	3328      	adds	r3, #40	@ 0x28
 8005240:	2101      	movs	r1, #1
 8005242:	4618      	mov	r0, r3
 8005244:	f000 ffa8 	bl	8006198 <RCCEx_PLL3_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800524e:	e004      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005256:	e000      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005262:	4b6c      	ldr	r3, [pc, #432]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005266:	f023 0107 	bic.w	r1, r3, #7
 800526a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005272:	4a68      	ldr	r2, [pc, #416]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005274:	430b      	orrs	r3, r1
 8005276:	6593      	str	r3, [r2, #88]	@ 0x58
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800527e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f002 0320 	and.w	r3, r2, #32
 800528e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005292:	2300      	movs	r3, #0
 8005294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005298:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800529c:	460b      	mov	r3, r1
 800529e:	4313      	orrs	r3, r2
 80052a0:	d055      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80052a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052ae:	d033      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80052b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052b4:	d82c      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ba:	d02f      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80052bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c0:	d826      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052c6:	d02b      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80052c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052cc:	d820      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052d2:	d012      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80052d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052d8:	d81a      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d022      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80052de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052e2:	d115      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e8:	3308      	adds	r3, #8
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fea1 	bl	8006034 <RCCEx_PLL2_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052f8:	e015      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fe:	3328      	adds	r3, #40	@ 0x28
 8005300:	2102      	movs	r1, #2
 8005302:	4618      	mov	r0, r3
 8005304:	f000 ff48 	bl	8006198 <RCCEx_PLL3_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800530e:	e00a      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005316:	e006      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005318:	bf00      	nop
 800531a:	e004      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800531c:	bf00      	nop
 800531e:	e002      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005320:	bf00      	nop
 8005322:	e000      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005326:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800532e:	4b39      	ldr	r3, [pc, #228]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005332:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800533e:	4a35      	ldr	r2, [pc, #212]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005340:	430b      	orrs	r3, r1
 8005342:	6553      	str	r3, [r2, #84]	@ 0x54
 8005344:	e003      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005346:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800534a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800535a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800535e:	2300      	movs	r3, #0
 8005360:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005364:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005368:	460b      	mov	r3, r1
 800536a:	4313      	orrs	r3, r2
 800536c:	d058      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800536e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005372:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005376:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800537a:	d033      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800537c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005380:	d82c      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005386:	d02f      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800538c:	d826      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800538e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005392:	d02b      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005394:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005398:	d820      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800539e:	d012      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80053a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053a4:	d81a      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d022      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80053aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ae:	d115      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b4:	3308      	adds	r3, #8
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fe3b 	bl	8006034 <RCCEx_PLL2_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053c4:	e015      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ca:	3328      	adds	r3, #40	@ 0x28
 80053cc:	2102      	movs	r1, #2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fee2 	bl	8006198 <RCCEx_PLL3_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053da:	e00a      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053e2:	e006      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053e4:	bf00      	nop
 80053e6:	e004      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053e8:	bf00      	nop
 80053ea:	e002      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053ec:	bf00      	nop
 80053ee:	e000      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10e      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053fa:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800540a:	4a02      	ldr	r2, [pc, #8]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800540c:	430b      	orrs	r3, r1
 800540e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005410:	e006      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800541c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800542c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005430:	2300      	movs	r3, #0
 8005432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005436:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800543a:	460b      	mov	r3, r1
 800543c:	4313      	orrs	r3, r2
 800543e:	d055      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005444:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005448:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800544c:	d033      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800544e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005452:	d82c      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005458:	d02f      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800545e:	d826      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005460:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005464:	d02b      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005466:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800546a:	d820      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800546c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005470:	d012      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005472:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005476:	d81a      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d022      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800547c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005480:	d115      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005486:	3308      	adds	r3, #8
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fdd2 	bl	8006034 <RCCEx_PLL2_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005496:	e015      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549c:	3328      	adds	r3, #40	@ 0x28
 800549e:	2102      	movs	r1, #2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fe79 	bl	8006198 <RCCEx_PLL3_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054ac:	e00a      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054b4:	e006      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054b6:	bf00      	nop
 80054b8:	e004      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054ba:	bf00      	nop
 80054bc:	e002      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054be:	bf00      	nop
 80054c0:	e000      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80054cc:	4ba0      	ldr	r3, [pc, #640]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054dc:	4a9c      	ldr	r2, [pc, #624]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054de:	430b      	orrs	r3, r1
 80054e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f002 0308 	and.w	r3, r2, #8
 80054f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005502:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d01e      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005518:	d10c      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551e:	3328      	adds	r3, #40	@ 0x28
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fe38 	bl	8006198 <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005534:	4b86      	ldr	r3, [pc, #536]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005538:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800553c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005544:	4a82      	ldr	r2, [pc, #520]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005546:	430b      	orrs	r3, r1
 8005548:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	f002 0310 	and.w	r3, r2, #16
 8005556:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800555a:	2300      	movs	r3, #0
 800555c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005560:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005564:	460b      	mov	r3, r1
 8005566:	4313      	orrs	r3, r2
 8005568:	d01e      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800556a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005576:	d10c      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557c:	3328      	adds	r3, #40	@ 0x28
 800557e:	2102      	movs	r1, #2
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fe09 	bl	8006198 <RCCEx_PLL3_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005592:	4b6f      	ldr	r3, [pc, #444]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005596:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800559a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a2:	4a6b      	ldr	r2, [pc, #428]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80055b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055b6:	2300      	movs	r3, #0
 80055b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055ba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80055be:	460b      	mov	r3, r1
 80055c0:	4313      	orrs	r3, r2
 80055c2:	d03e      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d0:	d022      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80055d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d6:	d81b      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d00b      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80055e2:	e015      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e8:	3308      	adds	r3, #8
 80055ea:	2100      	movs	r1, #0
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fd21 	bl	8006034 <RCCEx_PLL2_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055f8:	e00f      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fe:	3328      	adds	r3, #40	@ 0x28
 8005600:	2102      	movs	r1, #2
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fdc8 	bl	8006198 <RCCEx_PLL3_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800560e:	e004      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005616:	e000      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800561a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005622:	4b4b      	ldr	r3, [pc, #300]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005626:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800562a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005632:	4a47      	ldr	r2, [pc, #284]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005634:	430b      	orrs	r3, r1
 8005636:	6593      	str	r3, [r2, #88]	@ 0x58
 8005638:	e003      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800563e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800564e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005650:	2300      	movs	r3, #0
 8005652:	677b      	str	r3, [r7, #116]	@ 0x74
 8005654:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005658:	460b      	mov	r3, r1
 800565a:	4313      	orrs	r3, r2
 800565c:	d03b      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800565e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005666:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800566a:	d01f      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800566c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005670:	d818      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005676:	d003      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005678:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800567c:	d007      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800567e:	e011      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005680:	4b33      	ldr	r3, [pc, #204]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	4a32      	ldr	r2, [pc, #200]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800568a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800568c:	e00f      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005692:	3328      	adds	r3, #40	@ 0x28
 8005694:	2101      	movs	r1, #1
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fd7e 	bl	8006198 <RCCEx_PLL3_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80056ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b6:	4b26      	ldr	r3, [pc, #152]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056c6:	4a22      	ldr	r2, [pc, #136]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80056e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056e4:	2300      	movs	r3, #0
 80056e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056ec:	460b      	mov	r3, r1
 80056ee:	4313      	orrs	r3, r2
 80056f0:	d034      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80056f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005700:	d007      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005702:	e011      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005704:	4b12      	ldr	r3, [pc, #72]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	4a11      	ldr	r2, [pc, #68]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800570a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800570e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005710:	e00e      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005716:	3308      	adds	r3, #8
 8005718:	2102      	movs	r1, #2
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fc8a 	bl	8006034 <RCCEx_PLL2_Config>
 8005720:	4603      	mov	r3, r0
 8005722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005726:	e003      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800572e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10d      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800573a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800573c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005746:	4a02      	ldr	r2, [pc, #8]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005748:	430b      	orrs	r3, r1
 800574a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800574c:	e006      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800574e:	bf00      	nop
 8005750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005754:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005758:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005768:	663b      	str	r3, [r7, #96]	@ 0x60
 800576a:	2300      	movs	r3, #0
 800576c:	667b      	str	r3, [r7, #100]	@ 0x64
 800576e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005772:	460b      	mov	r3, r1
 8005774:	4313      	orrs	r3, r2
 8005776:	d00c      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577c:	3328      	adds	r3, #40	@ 0x28
 800577e:	2102      	movs	r1, #2
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fd09 	bl	8006198 <RCCEx_PLL3_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800579e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057a0:	2300      	movs	r3, #0
 80057a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80057a8:	460b      	mov	r3, r1
 80057aa:	4313      	orrs	r3, r2
 80057ac:	d036      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057b8:	d018      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80057ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057be:	d811      	bhi.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c4:	d014      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80057c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ca:	d80b      	bhi.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d011      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80057d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d4:	d106      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d6:	4bb7      	ldr	r3, [pc, #732]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057da:	4ab6      	ldr	r2, [pc, #728]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80057e2:	e008      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057ea:	e004      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80057ec:	bf00      	nop
 80057ee:	e002      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80057f0:	bf00      	nop
 80057f2:	e000      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80057f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057fe:	4bad      	ldr	r3, [pc, #692]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005802:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800580c:	4aa9      	ldr	r2, [pc, #676]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800580e:	430b      	orrs	r3, r1
 8005810:	6553      	str	r3, [r2, #84]	@ 0x54
 8005812:	e003      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005828:	653b      	str	r3, [r7, #80]	@ 0x50
 800582a:	2300      	movs	r3, #0
 800582c:	657b      	str	r3, [r7, #84]	@ 0x54
 800582e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005838:	4b9e      	ldr	r3, [pc, #632]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800583a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005846:	4a9b      	ldr	r2, [pc, #620]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005848:	430b      	orrs	r3, r1
 800584a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800585a:	2300      	movs	r3, #0
 800585c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800585e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005868:	4b92      	ldr	r3, [pc, #584]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800586a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005876:	4a8f      	ldr	r2, [pc, #572]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005878:	430b      	orrs	r3, r1
 800587a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005888:	643b      	str	r3, [r7, #64]	@ 0x40
 800588a:	2300      	movs	r3, #0
 800588c:	647b      	str	r3, [r7, #68]	@ 0x44
 800588e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005892:	460b      	mov	r3, r1
 8005894:	4313      	orrs	r3, r2
 8005896:	d00e      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005898:	4b86      	ldr	r3, [pc, #536]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	4a85      	ldr	r2, [pc, #532]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800589e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058a2:	6113      	str	r3, [r2, #16]
 80058a4:	4b83      	ldr	r3, [pc, #524]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058a6:	6919      	ldr	r1, [r3, #16]
 80058a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058b0:	4a80      	ldr	r2, [pc, #512]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058b2:	430b      	orrs	r3, r1
 80058b4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80058c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058c4:	2300      	movs	r3, #0
 80058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80058cc:	460b      	mov	r3, r1
 80058ce:	4313      	orrs	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058d2:	4b78      	ldr	r3, [pc, #480]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80058da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e0:	4a74      	ldr	r2, [pc, #464]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058e2:	430b      	orrs	r3, r1
 80058e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80058f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80058f4:	2300      	movs	r3, #0
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005902:	4b6c      	ldr	r3, [pc, #432]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005906:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005912:	4a68      	ldr	r2, [pc, #416]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005914:	430b      	orrs	r3, r1
 8005916:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	2100      	movs	r1, #0
 8005922:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d011      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005938:	3308      	adds	r3, #8
 800593a:	2100      	movs	r1, #0
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fb79 	bl	8006034 <RCCEx_PLL2_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005948:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	2100      	movs	r1, #0
 8005962:	6239      	str	r1, [r7, #32]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
 800596a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800596e:	460b      	mov	r3, r1
 8005970:	4313      	orrs	r3, r2
 8005972:	d011      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005978:	3308      	adds	r3, #8
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fb59 	bl	8006034 <RCCEx_PLL2_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005994:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	2100      	movs	r1, #0
 80059a2:	61b9      	str	r1, [r7, #24]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059ae:	460b      	mov	r3, r1
 80059b0:	4313      	orrs	r3, r2
 80059b2:	d011      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b8:	3308      	adds	r3, #8
 80059ba:	2102      	movs	r1, #2
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fb39 	bl	8006034 <RCCEx_PLL2_Config>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80059c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80059d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	2100      	movs	r1, #0
 80059e2:	6139      	str	r1, [r7, #16]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059ee:	460b      	mov	r3, r1
 80059f0:	4313      	orrs	r3, r2
 80059f2:	d011      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	3328      	adds	r3, #40	@ 0x28
 80059fa:	2100      	movs	r1, #0
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fbcb 	bl	8006198 <RCCEx_PLL3_Config>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005a08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	2100      	movs	r1, #0
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4313      	orrs	r3, r2
 8005a32:	d011      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a38:	3328      	adds	r3, #40	@ 0x28
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fbab 	bl	8006198 <RCCEx_PLL3_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	2100      	movs	r1, #0
 8005a62:	6039      	str	r1, [r7, #0]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4313      	orrs	r3, r2
 8005a72:	d011      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a78:	3328      	adds	r3, #40	@ 0x28
 8005a7a:	2102      	movs	r1, #2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fb8b 	bl	8006198 <RCCEx_PLL3_Config>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005a98:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005aac:	46bd      	mov	sp, r7
 8005aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ab2:	bf00      	nop
 8005ab4:	58024400 	.word	0x58024400

08005ab8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005abc:	f7fe fe00 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	091b      	lsrs	r3, r3, #4
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4904      	ldr	r1, [pc, #16]	@ (8005ae0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	0800be18 	.word	0x0800be18

08005ae4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b089      	sub	sp, #36	@ 0x24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aec:	4ba1      	ldr	r3, [pc, #644]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005af6:	4b9f      	ldr	r3, [pc, #636]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	0b1b      	lsrs	r3, r3, #12
 8005afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b02:	4b9c      	ldr	r3, [pc, #624]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	091b      	lsrs	r3, r3, #4
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005b0e:	4b99      	ldr	r3, [pc, #612]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b12:	08db      	lsrs	r3, r3, #3
 8005b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8111 	beq.w	8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	f000 8083 	beq.w	8005c40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	f200 80a1 	bhi.w	8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d056      	beq.n	8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b4e:	e099      	b.n	8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b50:	4b88      	ldr	r3, [pc, #544]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d02d      	beq.n	8005bb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b5c:	4b85      	ldr	r3, [pc, #532]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	08db      	lsrs	r3, r3, #3
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	4a84      	ldr	r2, [pc, #528]	@ (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
 8005b6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	ee07 3a90 	vmov	s15, r3
 8005b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b86:	4b7b      	ldr	r3, [pc, #492]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005bb6:	e087      	b.n	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bca:	4b6a      	ldr	r3, [pc, #424]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bfa:	e065      	b.n	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0e:	4b59      	ldr	r3, [pc, #356]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c3e:	e043      	b.n	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c52:	4b48      	ldr	r3, [pc, #288]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c82:	e021      	b.n	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c96:	4b37      	ldr	r3, [pc, #220]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005caa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	0a5b      	lsrs	r3, r3, #9
 8005cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cee:	ee17 2a90 	vmov	r2, s15
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	0c1b      	lsrs	r3, r3, #16
 8005cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d1c:	ee17 2a90 	vmov	r2, s15
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d24:	4b13      	ldr	r3, [pc, #76]	@ (8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d28:	0e1b      	lsrs	r3, r3, #24
 8005d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4a:	ee17 2a90 	vmov	r2, s15
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d52:	e008      	b.n	8005d66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	609a      	str	r2, [r3, #8]
}
 8005d66:	bf00      	nop
 8005d68:	3724      	adds	r7, #36	@ 0x24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	58024400 	.word	0x58024400
 8005d78:	03d09000 	.word	0x03d09000
 8005d7c:	46000000 	.word	0x46000000
 8005d80:	4c742400 	.word	0x4c742400
 8005d84:	4a742400 	.word	0x4a742400
 8005d88:	4bbebc20 	.word	0x4bbebc20

08005d8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b089      	sub	sp, #36	@ 0x24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d94:	4ba1      	ldr	r3, [pc, #644]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d9e:	4b9f      	ldr	r3, [pc, #636]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da2:	0d1b      	lsrs	r3, r3, #20
 8005da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005da8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005daa:	4b9c      	ldr	r3, [pc, #624]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005db6:	4b99      	ldr	r3, [pc, #612]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	08db      	lsrs	r3, r3, #3
 8005dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8111 	beq.w	8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	f000 8083 	beq.w	8005ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	f200 80a1 	bhi.w	8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d056      	beq.n	8005ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005df6:	e099      	b.n	8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005df8:	4b88      	ldr	r3, [pc, #544]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02d      	beq.n	8005e60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e04:	4b85      	ldr	r3, [pc, #532]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	08db      	lsrs	r3, r3, #3
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	4a84      	ldr	r2, [pc, #528]	@ (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
 8005e14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	ee07 3a90 	vmov	s15, r3
 8005e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2e:	4b7b      	ldr	r3, [pc, #492]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e5e:	e087      	b.n	8005f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e72:	4b6a      	ldr	r3, [pc, #424]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea2:	e065      	b.n	8005f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800602c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb6:	4b59      	ldr	r3, [pc, #356]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ee6:	e043      	b.n	8005f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efa:	4b48      	ldr	r3, [pc, #288]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2a:	e021      	b.n	8005f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800602c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3e:	4b37      	ldr	r3, [pc, #220]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f70:	4b2a      	ldr	r3, [pc, #168]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f74:	0a5b      	lsrs	r3, r3, #9
 8005f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f96:	ee17 2a90 	vmov	r2, s15
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	0c1b      	lsrs	r3, r3, #16
 8005fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fc4:	ee17 2a90 	vmov	r2, s15
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005fcc:	4b13      	ldr	r3, [pc, #76]	@ (800601c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	0e1b      	lsrs	r3, r3, #24
 8005fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff2:	ee17 2a90 	vmov	r2, s15
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ffa:	e008      	b.n	800600e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	609a      	str	r2, [r3, #8]
}
 800600e:	bf00      	nop
 8006010:	3724      	adds	r7, #36	@ 0x24
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	58024400 	.word	0x58024400
 8006020:	03d09000 	.word	0x03d09000
 8006024:	46000000 	.word	0x46000000
 8006028:	4c742400 	.word	0x4c742400
 800602c:	4a742400 	.word	0x4a742400
 8006030:	4bbebc20 	.word	0x4bbebc20

08006034 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006042:	4b53      	ldr	r3, [pc, #332]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b03      	cmp	r3, #3
 800604c:	d101      	bne.n	8006052 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e099      	b.n	8006186 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006052:	4b4f      	ldr	r3, [pc, #316]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a4e      	ldr	r2, [pc, #312]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006058:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800605c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605e:	f7fb fdf3 	bl	8001c48 <HAL_GetTick>
 8006062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006064:	e008      	b.n	8006078 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006066:	f7fb fdef 	bl	8001c48 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e086      	b.n	8006186 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006078:	4b45      	ldr	r3, [pc, #276]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f0      	bne.n	8006066 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006084:	4b42      	ldr	r3, [pc, #264]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	493f      	ldr	r1, [pc, #252]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006094:	4313      	orrs	r3, r2
 8006096:	628b      	str	r3, [r1, #40]	@ 0x28
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	3b01      	subs	r3, #1
 800609e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	025b      	lsls	r3, r3, #9
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	061b      	lsls	r3, r3, #24
 80060c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060c8:	4931      	ldr	r1, [pc, #196]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80060ce:	4b30      	ldr	r3, [pc, #192]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	492d      	ldr	r1, [pc, #180]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80060e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	f023 0220 	bic.w	r2, r3, #32
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	4928      	ldr	r1, [pc, #160]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060f2:	4b27      	ldr	r3, [pc, #156]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	4a26      	ldr	r2, [pc, #152]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 80060f8:	f023 0310 	bic.w	r3, r3, #16
 80060fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060fe:	4b24      	ldr	r3, [pc, #144]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006100:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006102:	4b24      	ldr	r3, [pc, #144]	@ (8006194 <RCCEx_PLL2_Config+0x160>)
 8006104:	4013      	ands	r3, r2
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	69d2      	ldr	r2, [r2, #28]
 800610a:	00d2      	lsls	r2, r2, #3
 800610c:	4920      	ldr	r1, [pc, #128]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 800610e:	4313      	orrs	r3, r2
 8006110:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006112:	4b1f      	ldr	r3, [pc, #124]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006116:	4a1e      	ldr	r2, [pc, #120]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006118:	f043 0310 	orr.w	r3, r3, #16
 800611c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006124:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	4a19      	ldr	r2, [pc, #100]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 800612a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800612e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006130:	e00f      	b.n	8006152 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d106      	bne.n	8006146 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006138:	4b15      	ldr	r3, [pc, #84]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 800613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613c:	4a14      	ldr	r2, [pc, #80]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 800613e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006142:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006144:	e005      	b.n	8006152 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006146:	4b12      	ldr	r3, [pc, #72]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614a:	4a11      	ldr	r2, [pc, #68]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 800614c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006150:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006152:	4b0f      	ldr	r3, [pc, #60]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a0e      	ldr	r2, [pc, #56]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 8006158:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800615c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615e:	f7fb fd73 	bl	8001c48 <HAL_GetTick>
 8006162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006164:	e008      	b.n	8006178 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006166:	f7fb fd6f 	bl	8001c48 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e006      	b.n	8006186 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006178:	4b05      	ldr	r3, [pc, #20]	@ (8006190 <RCCEx_PLL2_Config+0x15c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
 8006194:	ffff0007 	.word	0xffff0007

08006198 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061a6:	4b53      	ldr	r3, [pc, #332]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d101      	bne.n	80061b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e099      	b.n	80062ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80061b6:	4b4f      	ldr	r3, [pc, #316]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a4e      	ldr	r2, [pc, #312]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80061bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c2:	f7fb fd41 	bl	8001c48 <HAL_GetTick>
 80061c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061c8:	e008      	b.n	80061dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061ca:	f7fb fd3d 	bl	8001c48 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e086      	b.n	80062ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061dc:	4b45      	ldr	r3, [pc, #276]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f0      	bne.n	80061ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80061e8:	4b42      	ldr	r3, [pc, #264]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	051b      	lsls	r3, r3, #20
 80061f6:	493f      	ldr	r1, [pc, #252]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	3b01      	subs	r3, #1
 8006202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	3b01      	subs	r3, #1
 800620c:	025b      	lsls	r3, r3, #9
 800620e:	b29b      	uxth	r3, r3
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	3b01      	subs	r3, #1
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	3b01      	subs	r3, #1
 8006226:	061b      	lsls	r3, r3, #24
 8006228:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800622c:	4931      	ldr	r1, [pc, #196]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 800622e:	4313      	orrs	r3, r2
 8006230:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006232:	4b30      	ldr	r3, [pc, #192]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	492d      	ldr	r1, [pc, #180]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 8006240:	4313      	orrs	r3, r2
 8006242:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006244:	4b2b      	ldr	r3, [pc, #172]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	4928      	ldr	r1, [pc, #160]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 8006252:	4313      	orrs	r3, r2
 8006254:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006256:	4b27      	ldr	r3, [pc, #156]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	4a26      	ldr	r2, [pc, #152]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 800625c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006260:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006262:	4b24      	ldr	r3, [pc, #144]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 8006264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006266:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <RCCEx_PLL3_Config+0x160>)
 8006268:	4013      	ands	r3, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	69d2      	ldr	r2, [r2, #28]
 800626e:	00d2      	lsls	r2, r2, #3
 8006270:	4920      	ldr	r1, [pc, #128]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 8006272:	4313      	orrs	r3, r2
 8006274:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006276:	4b1f      	ldr	r3, [pc, #124]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	4a1e      	ldr	r2, [pc, #120]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 800627c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006288:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	4a19      	ldr	r2, [pc, #100]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 800628e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006294:	e00f      	b.n	80062b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d106      	bne.n	80062aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800629c:	4b15      	ldr	r3, [pc, #84]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	4a14      	ldr	r2, [pc, #80]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80062a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80062a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062a8:	e005      	b.n	80062b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80062aa:	4b12      	ldr	r3, [pc, #72]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	4a11      	ldr	r2, [pc, #68]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80062b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80062b6:	4b0f      	ldr	r3, [pc, #60]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a0e      	ldr	r2, [pc, #56]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c2:	f7fb fcc1 	bl	8001c48 <HAL_GetTick>
 80062c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062c8:	e008      	b.n	80062dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062ca:	f7fb fcbd 	bl	8001c48 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e006      	b.n	80062ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062dc:	4b05      	ldr	r3, [pc, #20]	@ (80062f4 <RCCEx_PLL3_Config+0x15c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0f0      	beq.n	80062ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	58024400 	.word	0x58024400
 80062f8:	ffff0007 	.word	0xffff0007

080062fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e042      	b.n	8006394 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fb fa5f 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2224      	movs	r2, #36	@ 0x24
 800632a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0201 	bic.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 ff22 	bl	8007190 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f8b3 	bl	80064b8 <UART_SetConfig>
 8006352:	4603      	mov	r3, r0
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e01b      	b.n	8006394 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800636a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800637a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 ffa1 	bl	80072d4 <UART_CheckIdleState>
 8006392:	4603      	mov	r3, r0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	@ 0x28
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d17b      	bne.n	80064ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <HAL_UART_Transmit+0x26>
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e074      	b.n	80064b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2221      	movs	r2, #33	@ 0x21
 80063d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063d6:	f7fb fc37 	bl	8001c48 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063f4:	d108      	bne.n	8006408 <HAL_UART_Transmit+0x6c>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e003      	b.n	8006410 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006410:	e030      	b.n	8006474 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2200      	movs	r2, #0
 800641a:	2180      	movs	r1, #128	@ 0x80
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f001 f803 	bl	8007428 <UART_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e03d      	b.n	80064b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006448:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	3302      	adds	r3, #2
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	e007      	b.n	8006462 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3301      	adds	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1c8      	bne.n	8006412 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	2140      	movs	r1, #64	@ 0x40
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 ffcc 	bl	8007428 <UART_WaitOnFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e006      	b.n	80064b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e000      	b.n	80064b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80064ae:	2302      	movs	r3, #2
  }
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064bc:	b092      	sub	sp, #72	@ 0x48
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	4313      	orrs	r3, r2
 80064de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4bbe      	ldr	r3, [pc, #760]	@ (80067e0 <UART_SetConfig+0x328>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4ab3      	ldr	r2, [pc, #716]	@ (80067e4 <UART_SetConfig+0x32c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006520:	4313      	orrs	r3, r2
 8006522:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	4baf      	ldr	r3, [pc, #700]	@ (80067e8 <UART_SetConfig+0x330>)
 800652c:	4013      	ands	r3, r2
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006534:	430b      	orrs	r3, r1
 8006536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	f023 010f 	bic.w	r1, r3, #15
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4aa6      	ldr	r2, [pc, #664]	@ (80067ec <UART_SetConfig+0x334>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d177      	bne.n	8006648 <UART_SetConfig+0x190>
 8006558:	4ba5      	ldr	r3, [pc, #660]	@ (80067f0 <UART_SetConfig+0x338>)
 800655a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006560:	2b28      	cmp	r3, #40	@ 0x28
 8006562:	d86d      	bhi.n	8006640 <UART_SetConfig+0x188>
 8006564:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <UART_SetConfig+0xb4>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	08006611 	.word	0x08006611
 8006570:	08006641 	.word	0x08006641
 8006574:	08006641 	.word	0x08006641
 8006578:	08006641 	.word	0x08006641
 800657c:	08006641 	.word	0x08006641
 8006580:	08006641 	.word	0x08006641
 8006584:	08006641 	.word	0x08006641
 8006588:	08006641 	.word	0x08006641
 800658c:	08006619 	.word	0x08006619
 8006590:	08006641 	.word	0x08006641
 8006594:	08006641 	.word	0x08006641
 8006598:	08006641 	.word	0x08006641
 800659c:	08006641 	.word	0x08006641
 80065a0:	08006641 	.word	0x08006641
 80065a4:	08006641 	.word	0x08006641
 80065a8:	08006641 	.word	0x08006641
 80065ac:	08006621 	.word	0x08006621
 80065b0:	08006641 	.word	0x08006641
 80065b4:	08006641 	.word	0x08006641
 80065b8:	08006641 	.word	0x08006641
 80065bc:	08006641 	.word	0x08006641
 80065c0:	08006641 	.word	0x08006641
 80065c4:	08006641 	.word	0x08006641
 80065c8:	08006641 	.word	0x08006641
 80065cc:	08006629 	.word	0x08006629
 80065d0:	08006641 	.word	0x08006641
 80065d4:	08006641 	.word	0x08006641
 80065d8:	08006641 	.word	0x08006641
 80065dc:	08006641 	.word	0x08006641
 80065e0:	08006641 	.word	0x08006641
 80065e4:	08006641 	.word	0x08006641
 80065e8:	08006641 	.word	0x08006641
 80065ec:	08006631 	.word	0x08006631
 80065f0:	08006641 	.word	0x08006641
 80065f4:	08006641 	.word	0x08006641
 80065f8:	08006641 	.word	0x08006641
 80065fc:	08006641 	.word	0x08006641
 8006600:	08006641 	.word	0x08006641
 8006604:	08006641 	.word	0x08006641
 8006608:	08006641 	.word	0x08006641
 800660c:	08006639 	.word	0x08006639
 8006610:	2301      	movs	r3, #1
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006616:	e326      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006618:	2304      	movs	r3, #4
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661e:	e322      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006620:	2308      	movs	r3, #8
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006626:	e31e      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006628:	2310      	movs	r3, #16
 800662a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800662e:	e31a      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006630:	2320      	movs	r3, #32
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006636:	e316      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006638:	2340      	movs	r3, #64	@ 0x40
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663e:	e312      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006640:	2380      	movs	r3, #128	@ 0x80
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e30e      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a69      	ldr	r2, [pc, #420]	@ (80067f4 <UART_SetConfig+0x33c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d130      	bne.n	80066b4 <UART_SetConfig+0x1fc>
 8006652:	4b67      	ldr	r3, [pc, #412]	@ (80067f0 <UART_SetConfig+0x338>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b05      	cmp	r3, #5
 800665c:	d826      	bhi.n	80066ac <UART_SetConfig+0x1f4>
 800665e:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <UART_SetConfig+0x1ac>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	0800667d 	.word	0x0800667d
 8006668:	08006685 	.word	0x08006685
 800666c:	0800668d 	.word	0x0800668d
 8006670:	08006695 	.word	0x08006695
 8006674:	0800669d 	.word	0x0800669d
 8006678:	080066a5 	.word	0x080066a5
 800667c:	2300      	movs	r3, #0
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e2f0      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006684:	2304      	movs	r3, #4
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668a:	e2ec      	b.n	8006c66 <UART_SetConfig+0x7ae>
 800668c:	2308      	movs	r3, #8
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006692:	e2e8      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006694:	2310      	movs	r3, #16
 8006696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669a:	e2e4      	b.n	8006c66 <UART_SetConfig+0x7ae>
 800669c:	2320      	movs	r3, #32
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a2:	e2e0      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80066a4:	2340      	movs	r3, #64	@ 0x40
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066aa:	e2dc      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80066ac:	2380      	movs	r3, #128	@ 0x80
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b2:	e2d8      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a4f      	ldr	r2, [pc, #316]	@ (80067f8 <UART_SetConfig+0x340>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d130      	bne.n	8006720 <UART_SetConfig+0x268>
 80066be:	4b4c      	ldr	r3, [pc, #304]	@ (80067f0 <UART_SetConfig+0x338>)
 80066c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d826      	bhi.n	8006718 <UART_SetConfig+0x260>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <UART_SetConfig+0x218>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066e9 	.word	0x080066e9
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	080066f9 	.word	0x080066f9
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006709 	.word	0x08006709
 80066e4:	08006711 	.word	0x08006711
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e2ba      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e2b6      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fe:	e2b2      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006706:	e2ae      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006708:	2320      	movs	r3, #32
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670e:	e2aa      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006710:	2340      	movs	r3, #64	@ 0x40
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006716:	e2a6      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006718:	2380      	movs	r3, #128	@ 0x80
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671e:	e2a2      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a35      	ldr	r2, [pc, #212]	@ (80067fc <UART_SetConfig+0x344>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d130      	bne.n	800678c <UART_SetConfig+0x2d4>
 800672a:	4b31      	ldr	r3, [pc, #196]	@ (80067f0 <UART_SetConfig+0x338>)
 800672c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	2b05      	cmp	r3, #5
 8006734:	d826      	bhi.n	8006784 <UART_SetConfig+0x2cc>
 8006736:	a201      	add	r2, pc, #4	@ (adr r2, 800673c <UART_SetConfig+0x284>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	08006755 	.word	0x08006755
 8006740:	0800675d 	.word	0x0800675d
 8006744:	08006765 	.word	0x08006765
 8006748:	0800676d 	.word	0x0800676d
 800674c:	08006775 	.word	0x08006775
 8006750:	0800677d 	.word	0x0800677d
 8006754:	2300      	movs	r3, #0
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e284      	b.n	8006c66 <UART_SetConfig+0x7ae>
 800675c:	2304      	movs	r3, #4
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006762:	e280      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006764:	2308      	movs	r3, #8
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676a:	e27c      	b.n	8006c66 <UART_SetConfig+0x7ae>
 800676c:	2310      	movs	r3, #16
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006772:	e278      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006774:	2320      	movs	r3, #32
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e274      	b.n	8006c66 <UART_SetConfig+0x7ae>
 800677c:	2340      	movs	r3, #64	@ 0x40
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e270      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006784:	2380      	movs	r3, #128	@ 0x80
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e26c      	b.n	8006c66 <UART_SetConfig+0x7ae>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1b      	ldr	r2, [pc, #108]	@ (8006800 <UART_SetConfig+0x348>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d142      	bne.n	800681c <UART_SetConfig+0x364>
 8006796:	4b16      	ldr	r3, [pc, #88]	@ (80067f0 <UART_SetConfig+0x338>)
 8006798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	2b05      	cmp	r3, #5
 80067a0:	d838      	bhi.n	8006814 <UART_SetConfig+0x35c>
 80067a2:	a201      	add	r2, pc, #4	@ (adr r2, 80067a8 <UART_SetConfig+0x2f0>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	080067c1 	.word	0x080067c1
 80067ac:	080067c9 	.word	0x080067c9
 80067b0:	080067d1 	.word	0x080067d1
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	08006805 	.word	0x08006805
 80067bc:	0800680d 	.word	0x0800680d
 80067c0:	2300      	movs	r3, #0
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e24e      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80067c8:	2304      	movs	r3, #4
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e24a      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80067d0:	2308      	movs	r3, #8
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d6:	e246      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80067d8:	2310      	movs	r3, #16
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067de:	e242      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80067e0:	cfff69f3 	.word	0xcfff69f3
 80067e4:	58000c00 	.word	0x58000c00
 80067e8:	11fff4ff 	.word	0x11fff4ff
 80067ec:	40011000 	.word	0x40011000
 80067f0:	58024400 	.word	0x58024400
 80067f4:	40004400 	.word	0x40004400
 80067f8:	40004800 	.word	0x40004800
 80067fc:	40004c00 	.word	0x40004c00
 8006800:	40005000 	.word	0x40005000
 8006804:	2320      	movs	r3, #32
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e22c      	b.n	8006c66 <UART_SetConfig+0x7ae>
 800680c:	2340      	movs	r3, #64	@ 0x40
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e228      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006814:	2380      	movs	r3, #128	@ 0x80
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e224      	b.n	8006c66 <UART_SetConfig+0x7ae>
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4ab1      	ldr	r2, [pc, #708]	@ (8006ae8 <UART_SetConfig+0x630>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d176      	bne.n	8006914 <UART_SetConfig+0x45c>
 8006826:	4bb1      	ldr	r3, [pc, #708]	@ (8006aec <UART_SetConfig+0x634>)
 8006828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800682e:	2b28      	cmp	r3, #40	@ 0x28
 8006830:	d86c      	bhi.n	800690c <UART_SetConfig+0x454>
 8006832:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <UART_SetConfig+0x380>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	080068dd 	.word	0x080068dd
 800683c:	0800690d 	.word	0x0800690d
 8006840:	0800690d 	.word	0x0800690d
 8006844:	0800690d 	.word	0x0800690d
 8006848:	0800690d 	.word	0x0800690d
 800684c:	0800690d 	.word	0x0800690d
 8006850:	0800690d 	.word	0x0800690d
 8006854:	0800690d 	.word	0x0800690d
 8006858:	080068e5 	.word	0x080068e5
 800685c:	0800690d 	.word	0x0800690d
 8006860:	0800690d 	.word	0x0800690d
 8006864:	0800690d 	.word	0x0800690d
 8006868:	0800690d 	.word	0x0800690d
 800686c:	0800690d 	.word	0x0800690d
 8006870:	0800690d 	.word	0x0800690d
 8006874:	0800690d 	.word	0x0800690d
 8006878:	080068ed 	.word	0x080068ed
 800687c:	0800690d 	.word	0x0800690d
 8006880:	0800690d 	.word	0x0800690d
 8006884:	0800690d 	.word	0x0800690d
 8006888:	0800690d 	.word	0x0800690d
 800688c:	0800690d 	.word	0x0800690d
 8006890:	0800690d 	.word	0x0800690d
 8006894:	0800690d 	.word	0x0800690d
 8006898:	080068f5 	.word	0x080068f5
 800689c:	0800690d 	.word	0x0800690d
 80068a0:	0800690d 	.word	0x0800690d
 80068a4:	0800690d 	.word	0x0800690d
 80068a8:	0800690d 	.word	0x0800690d
 80068ac:	0800690d 	.word	0x0800690d
 80068b0:	0800690d 	.word	0x0800690d
 80068b4:	0800690d 	.word	0x0800690d
 80068b8:	080068fd 	.word	0x080068fd
 80068bc:	0800690d 	.word	0x0800690d
 80068c0:	0800690d 	.word	0x0800690d
 80068c4:	0800690d 	.word	0x0800690d
 80068c8:	0800690d 	.word	0x0800690d
 80068cc:	0800690d 	.word	0x0800690d
 80068d0:	0800690d 	.word	0x0800690d
 80068d4:	0800690d 	.word	0x0800690d
 80068d8:	08006905 	.word	0x08006905
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e2:	e1c0      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80068e4:	2304      	movs	r3, #4
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ea:	e1bc      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80068ec:	2308      	movs	r3, #8
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f2:	e1b8      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80068f4:	2310      	movs	r3, #16
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fa:	e1b4      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80068fc:	2320      	movs	r3, #32
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006902:	e1b0      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006904:	2340      	movs	r3, #64	@ 0x40
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690a:	e1ac      	b.n	8006c66 <UART_SetConfig+0x7ae>
 800690c:	2380      	movs	r3, #128	@ 0x80
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e1a8      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a75      	ldr	r2, [pc, #468]	@ (8006af0 <UART_SetConfig+0x638>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d130      	bne.n	8006980 <UART_SetConfig+0x4c8>
 800691e:	4b73      	ldr	r3, [pc, #460]	@ (8006aec <UART_SetConfig+0x634>)
 8006920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	2b05      	cmp	r3, #5
 8006928:	d826      	bhi.n	8006978 <UART_SetConfig+0x4c0>
 800692a:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <UART_SetConfig+0x478>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006949 	.word	0x08006949
 8006934:	08006951 	.word	0x08006951
 8006938:	08006959 	.word	0x08006959
 800693c:	08006961 	.word	0x08006961
 8006940:	08006969 	.word	0x08006969
 8006944:	08006971 	.word	0x08006971
 8006948:	2300      	movs	r3, #0
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694e:	e18a      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006950:	2304      	movs	r3, #4
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006956:	e186      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006958:	2308      	movs	r3, #8
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695e:	e182      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006960:	2310      	movs	r3, #16
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006966:	e17e      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006968:	2320      	movs	r3, #32
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e17a      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006970:	2340      	movs	r3, #64	@ 0x40
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e176      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006978:	2380      	movs	r3, #128	@ 0x80
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e172      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a5b      	ldr	r2, [pc, #364]	@ (8006af4 <UART_SetConfig+0x63c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d130      	bne.n	80069ec <UART_SetConfig+0x534>
 800698a:	4b58      	ldr	r3, [pc, #352]	@ (8006aec <UART_SetConfig+0x634>)
 800698c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b05      	cmp	r3, #5
 8006994:	d826      	bhi.n	80069e4 <UART_SetConfig+0x52c>
 8006996:	a201      	add	r2, pc, #4	@ (adr r2, 800699c <UART_SetConfig+0x4e4>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069b5 	.word	0x080069b5
 80069a0:	080069bd 	.word	0x080069bd
 80069a4:	080069c5 	.word	0x080069c5
 80069a8:	080069cd 	.word	0x080069cd
 80069ac:	080069d5 	.word	0x080069d5
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ba:	e154      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80069bc:	2304      	movs	r3, #4
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c2:	e150      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80069c4:	2308      	movs	r3, #8
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ca:	e14c      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80069cc:	2310      	movs	r3, #16
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d2:	e148      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80069d4:	2320      	movs	r3, #32
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069da:	e144      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80069dc:	2340      	movs	r3, #64	@ 0x40
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e140      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80069e4:	2380      	movs	r3, #128	@ 0x80
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e13c      	b.n	8006c66 <UART_SetConfig+0x7ae>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a41      	ldr	r2, [pc, #260]	@ (8006af8 <UART_SetConfig+0x640>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	f040 8082 	bne.w	8006afc <UART_SetConfig+0x644>
 80069f8:	4b3c      	ldr	r3, [pc, #240]	@ (8006aec <UART_SetConfig+0x634>)
 80069fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a00:	2b28      	cmp	r3, #40	@ 0x28
 8006a02:	d86d      	bhi.n	8006ae0 <UART_SetConfig+0x628>
 8006a04:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <UART_SetConfig+0x554>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006ab1 	.word	0x08006ab1
 8006a10:	08006ae1 	.word	0x08006ae1
 8006a14:	08006ae1 	.word	0x08006ae1
 8006a18:	08006ae1 	.word	0x08006ae1
 8006a1c:	08006ae1 	.word	0x08006ae1
 8006a20:	08006ae1 	.word	0x08006ae1
 8006a24:	08006ae1 	.word	0x08006ae1
 8006a28:	08006ae1 	.word	0x08006ae1
 8006a2c:	08006ab9 	.word	0x08006ab9
 8006a30:	08006ae1 	.word	0x08006ae1
 8006a34:	08006ae1 	.word	0x08006ae1
 8006a38:	08006ae1 	.word	0x08006ae1
 8006a3c:	08006ae1 	.word	0x08006ae1
 8006a40:	08006ae1 	.word	0x08006ae1
 8006a44:	08006ae1 	.word	0x08006ae1
 8006a48:	08006ae1 	.word	0x08006ae1
 8006a4c:	08006ac1 	.word	0x08006ac1
 8006a50:	08006ae1 	.word	0x08006ae1
 8006a54:	08006ae1 	.word	0x08006ae1
 8006a58:	08006ae1 	.word	0x08006ae1
 8006a5c:	08006ae1 	.word	0x08006ae1
 8006a60:	08006ae1 	.word	0x08006ae1
 8006a64:	08006ae1 	.word	0x08006ae1
 8006a68:	08006ae1 	.word	0x08006ae1
 8006a6c:	08006ac9 	.word	0x08006ac9
 8006a70:	08006ae1 	.word	0x08006ae1
 8006a74:	08006ae1 	.word	0x08006ae1
 8006a78:	08006ae1 	.word	0x08006ae1
 8006a7c:	08006ae1 	.word	0x08006ae1
 8006a80:	08006ae1 	.word	0x08006ae1
 8006a84:	08006ae1 	.word	0x08006ae1
 8006a88:	08006ae1 	.word	0x08006ae1
 8006a8c:	08006ad1 	.word	0x08006ad1
 8006a90:	08006ae1 	.word	0x08006ae1
 8006a94:	08006ae1 	.word	0x08006ae1
 8006a98:	08006ae1 	.word	0x08006ae1
 8006a9c:	08006ae1 	.word	0x08006ae1
 8006aa0:	08006ae1 	.word	0x08006ae1
 8006aa4:	08006ae1 	.word	0x08006ae1
 8006aa8:	08006ae1 	.word	0x08006ae1
 8006aac:	08006ad9 	.word	0x08006ad9
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab6:	e0d6      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006abe:	e0d2      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac6:	e0ce      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ace:	e0ca      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad6:	e0c6      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006ad8:	2340      	movs	r3, #64	@ 0x40
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ade:	e0c2      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006ae0:	2380      	movs	r3, #128	@ 0x80
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae6:	e0be      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006ae8:	40011400 	.word	0x40011400
 8006aec:	58024400 	.word	0x58024400
 8006af0:	40007800 	.word	0x40007800
 8006af4:	40007c00 	.word	0x40007c00
 8006af8:	40011800 	.word	0x40011800
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4aad      	ldr	r2, [pc, #692]	@ (8006db8 <UART_SetConfig+0x900>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d176      	bne.n	8006bf4 <UART_SetConfig+0x73c>
 8006b06:	4bad      	ldr	r3, [pc, #692]	@ (8006dbc <UART_SetConfig+0x904>)
 8006b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b0e:	2b28      	cmp	r3, #40	@ 0x28
 8006b10:	d86c      	bhi.n	8006bec <UART_SetConfig+0x734>
 8006b12:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <UART_SetConfig+0x660>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006bbd 	.word	0x08006bbd
 8006b1c:	08006bed 	.word	0x08006bed
 8006b20:	08006bed 	.word	0x08006bed
 8006b24:	08006bed 	.word	0x08006bed
 8006b28:	08006bed 	.word	0x08006bed
 8006b2c:	08006bed 	.word	0x08006bed
 8006b30:	08006bed 	.word	0x08006bed
 8006b34:	08006bed 	.word	0x08006bed
 8006b38:	08006bc5 	.word	0x08006bc5
 8006b3c:	08006bed 	.word	0x08006bed
 8006b40:	08006bed 	.word	0x08006bed
 8006b44:	08006bed 	.word	0x08006bed
 8006b48:	08006bed 	.word	0x08006bed
 8006b4c:	08006bed 	.word	0x08006bed
 8006b50:	08006bed 	.word	0x08006bed
 8006b54:	08006bed 	.word	0x08006bed
 8006b58:	08006bcd 	.word	0x08006bcd
 8006b5c:	08006bed 	.word	0x08006bed
 8006b60:	08006bed 	.word	0x08006bed
 8006b64:	08006bed 	.word	0x08006bed
 8006b68:	08006bed 	.word	0x08006bed
 8006b6c:	08006bed 	.word	0x08006bed
 8006b70:	08006bed 	.word	0x08006bed
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006bd5 	.word	0x08006bd5
 8006b7c:	08006bed 	.word	0x08006bed
 8006b80:	08006bed 	.word	0x08006bed
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	08006bed 	.word	0x08006bed
 8006b94:	08006bed 	.word	0x08006bed
 8006b98:	08006bdd 	.word	0x08006bdd
 8006b9c:	08006bed 	.word	0x08006bed
 8006ba0:	08006bed 	.word	0x08006bed
 8006ba4:	08006bed 	.word	0x08006bed
 8006ba8:	08006bed 	.word	0x08006bed
 8006bac:	08006bed 	.word	0x08006bed
 8006bb0:	08006bed 	.word	0x08006bed
 8006bb4:	08006bed 	.word	0x08006bed
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc2:	e050      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bca:	e04c      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006bcc:	2308      	movs	r3, #8
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd2:	e048      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e044      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006bdc:	2320      	movs	r3, #32
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e040      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006be4:	2340      	movs	r3, #64	@ 0x40
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bea:	e03c      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006bec:	2380      	movs	r3, #128	@ 0x80
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	e038      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a71      	ldr	r2, [pc, #452]	@ (8006dc0 <UART_SetConfig+0x908>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d130      	bne.n	8006c60 <UART_SetConfig+0x7a8>
 8006bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8006dbc <UART_SetConfig+0x904>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	d826      	bhi.n	8006c58 <UART_SetConfig+0x7a0>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <UART_SetConfig+0x758>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c29 	.word	0x08006c29
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c51 	.word	0x08006c51
 8006c28:	2302      	movs	r3, #2
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2e:	e01a      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c36:	e016      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e012      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e00e      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006c48:	2320      	movs	r3, #32
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4e:	e00a      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006c50:	2340      	movs	r3, #64	@ 0x40
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c56:	e006      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006c58:	2380      	movs	r3, #128	@ 0x80
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5e:	e002      	b.n	8006c66 <UART_SetConfig+0x7ae>
 8006c60:	2380      	movs	r3, #128	@ 0x80
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a55      	ldr	r2, [pc, #340]	@ (8006dc0 <UART_SetConfig+0x908>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	f040 80f8 	bne.w	8006e62 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	dc46      	bgt.n	8006d08 <UART_SetConfig+0x850>
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	db75      	blt.n	8006d6a <UART_SetConfig+0x8b2>
 8006c7e:	3b02      	subs	r3, #2
 8006c80:	2b1e      	cmp	r3, #30
 8006c82:	d872      	bhi.n	8006d6a <UART_SetConfig+0x8b2>
 8006c84:	a201      	add	r2, pc, #4	@ (adr r2, 8006c8c <UART_SetConfig+0x7d4>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006d0f 	.word	0x08006d0f
 8006c90:	08006d6b 	.word	0x08006d6b
 8006c94:	08006d17 	.word	0x08006d17
 8006c98:	08006d6b 	.word	0x08006d6b
 8006c9c:	08006d6b 	.word	0x08006d6b
 8006ca0:	08006d6b 	.word	0x08006d6b
 8006ca4:	08006d27 	.word	0x08006d27
 8006ca8:	08006d6b 	.word	0x08006d6b
 8006cac:	08006d6b 	.word	0x08006d6b
 8006cb0:	08006d6b 	.word	0x08006d6b
 8006cb4:	08006d6b 	.word	0x08006d6b
 8006cb8:	08006d6b 	.word	0x08006d6b
 8006cbc:	08006d6b 	.word	0x08006d6b
 8006cc0:	08006d6b 	.word	0x08006d6b
 8006cc4:	08006d37 	.word	0x08006d37
 8006cc8:	08006d6b 	.word	0x08006d6b
 8006ccc:	08006d6b 	.word	0x08006d6b
 8006cd0:	08006d6b 	.word	0x08006d6b
 8006cd4:	08006d6b 	.word	0x08006d6b
 8006cd8:	08006d6b 	.word	0x08006d6b
 8006cdc:	08006d6b 	.word	0x08006d6b
 8006ce0:	08006d6b 	.word	0x08006d6b
 8006ce4:	08006d6b 	.word	0x08006d6b
 8006ce8:	08006d6b 	.word	0x08006d6b
 8006cec:	08006d6b 	.word	0x08006d6b
 8006cf0:	08006d6b 	.word	0x08006d6b
 8006cf4:	08006d6b 	.word	0x08006d6b
 8006cf8:	08006d6b 	.word	0x08006d6b
 8006cfc:	08006d6b 	.word	0x08006d6b
 8006d00:	08006d6b 	.word	0x08006d6b
 8006d04:	08006d5d 	.word	0x08006d5d
 8006d08:	2b40      	cmp	r3, #64	@ 0x40
 8006d0a:	d02a      	beq.n	8006d62 <UART_SetConfig+0x8aa>
 8006d0c:	e02d      	b.n	8006d6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d0e:	f7fe fed3 	bl	8005ab8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d14:	e02f      	b.n	8006d76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fee2 	bl	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d24:	e027      	b.n	8006d76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d26:	f107 0318 	add.w	r3, r7, #24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff f82e 	bl	8005d8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d34:	e01f      	b.n	8006d76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d36:	4b21      	ldr	r3, [pc, #132]	@ (8006dbc <UART_SetConfig+0x904>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d42:	4b1e      	ldr	r3, [pc, #120]	@ (8006dbc <UART_SetConfig+0x904>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	08db      	lsrs	r3, r3, #3
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc4 <UART_SetConfig+0x90c>)
 8006d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d54:	e00f      	b.n	8006d76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d56:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc4 <UART_SetConfig+0x90c>)
 8006d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d5a:	e00c      	b.n	8006d76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc8 <UART_SetConfig+0x910>)
 8006d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d60:	e009      	b.n	8006d76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d68:	e005      	b.n	8006d76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006d74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 81ee 	beq.w	800715a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d82:	4a12      	ldr	r2, [pc, #72]	@ (8006dcc <UART_SetConfig+0x914>)
 8006d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d90:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	4413      	add	r3, r2
 8006d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d305      	bcc.n	8006dae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d910      	bls.n	8006dd0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006db4:	e1d1      	b.n	800715a <UART_SetConfig+0xca2>
 8006db6:	bf00      	nop
 8006db8:	40011c00 	.word	0x40011c00
 8006dbc:	58024400 	.word	0x58024400
 8006dc0:	58000c00 	.word	0x58000c00
 8006dc4:	03d09000 	.word	0x03d09000
 8006dc8:	003d0900 	.word	0x003d0900
 8006dcc:	0800be28 	.word	0x0800be28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	60fa      	str	r2, [r7, #12]
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ddc:	4ac0      	ldr	r2, [pc, #768]	@ (80070e0 <UART_SetConfig+0xc28>)
 8006dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2200      	movs	r2, #0
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006df2:	f7f9 fae5 	bl	80003c0 <__aeabi_uldivmod>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	020b      	lsls	r3, r1, #8
 8006e08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e0c:	0202      	lsls	r2, r0, #8
 8006e0e:	6979      	ldr	r1, [r7, #20]
 8006e10:	6849      	ldr	r1, [r1, #4]
 8006e12:	0849      	lsrs	r1, r1, #1
 8006e14:	2000      	movs	r0, #0
 8006e16:	460c      	mov	r4, r1
 8006e18:	4605      	mov	r5, r0
 8006e1a:	eb12 0804 	adds.w	r8, r2, r4
 8006e1e:	eb43 0905 	adc.w	r9, r3, r5
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	469a      	mov	sl, r3
 8006e2a:	4693      	mov	fp, r2
 8006e2c:	4652      	mov	r2, sl
 8006e2e:	465b      	mov	r3, fp
 8006e30:	4640      	mov	r0, r8
 8006e32:	4649      	mov	r1, r9
 8006e34:	f7f9 fac4 	bl	80003c0 <__aeabi_uldivmod>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e46:	d308      	bcc.n	8006e5a <UART_SetConfig+0x9a2>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e4e:	d204      	bcs.n	8006e5a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e56:	60da      	str	r2, [r3, #12]
 8006e58:	e17f      	b.n	800715a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e60:	e17b      	b.n	800715a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e6a:	f040 80bd 	bne.w	8006fe8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006e6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	dc48      	bgt.n	8006f08 <UART_SetConfig+0xa50>
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	db7b      	blt.n	8006f72 <UART_SetConfig+0xaba>
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	d879      	bhi.n	8006f72 <UART_SetConfig+0xaba>
 8006e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <UART_SetConfig+0x9cc>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006f0f 	.word	0x08006f0f
 8006e88:	08006f17 	.word	0x08006f17
 8006e8c:	08006f73 	.word	0x08006f73
 8006e90:	08006f73 	.word	0x08006f73
 8006e94:	08006f1f 	.word	0x08006f1f
 8006e98:	08006f73 	.word	0x08006f73
 8006e9c:	08006f73 	.word	0x08006f73
 8006ea0:	08006f73 	.word	0x08006f73
 8006ea4:	08006f2f 	.word	0x08006f2f
 8006ea8:	08006f73 	.word	0x08006f73
 8006eac:	08006f73 	.word	0x08006f73
 8006eb0:	08006f73 	.word	0x08006f73
 8006eb4:	08006f73 	.word	0x08006f73
 8006eb8:	08006f73 	.word	0x08006f73
 8006ebc:	08006f73 	.word	0x08006f73
 8006ec0:	08006f73 	.word	0x08006f73
 8006ec4:	08006f3f 	.word	0x08006f3f
 8006ec8:	08006f73 	.word	0x08006f73
 8006ecc:	08006f73 	.word	0x08006f73
 8006ed0:	08006f73 	.word	0x08006f73
 8006ed4:	08006f73 	.word	0x08006f73
 8006ed8:	08006f73 	.word	0x08006f73
 8006edc:	08006f73 	.word	0x08006f73
 8006ee0:	08006f73 	.word	0x08006f73
 8006ee4:	08006f73 	.word	0x08006f73
 8006ee8:	08006f73 	.word	0x08006f73
 8006eec:	08006f73 	.word	0x08006f73
 8006ef0:	08006f73 	.word	0x08006f73
 8006ef4:	08006f73 	.word	0x08006f73
 8006ef8:	08006f73 	.word	0x08006f73
 8006efc:	08006f73 	.word	0x08006f73
 8006f00:	08006f73 	.word	0x08006f73
 8006f04:	08006f65 	.word	0x08006f65
 8006f08:	2b40      	cmp	r3, #64	@ 0x40
 8006f0a:	d02e      	beq.n	8006f6a <UART_SetConfig+0xab2>
 8006f0c:	e031      	b.n	8006f72 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f0e:	f7fd fc07 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 8006f12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f14:	e033      	b.n	8006f7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f16:	f7fd fc19 	bl	800474c <HAL_RCC_GetPCLK2Freq>
 8006f1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f1c:	e02f      	b.n	8006f7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe fdde 	bl	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f2c:	e027      	b.n	8006f7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f2e:	f107 0318 	add.w	r3, r7, #24
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe ff2a 	bl	8005d8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3c:	e01f      	b.n	8006f7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f3e:	4b69      	ldr	r3, [pc, #420]	@ (80070e4 <UART_SetConfig+0xc2c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f4a:	4b66      	ldr	r3, [pc, #408]	@ (80070e4 <UART_SetConfig+0xc2c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	08db      	lsrs	r3, r3, #3
 8006f50:	f003 0303 	and.w	r3, r3, #3
 8006f54:	4a64      	ldr	r2, [pc, #400]	@ (80070e8 <UART_SetConfig+0xc30>)
 8006f56:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f5c:	e00f      	b.n	8006f7e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006f5e:	4b62      	ldr	r3, [pc, #392]	@ (80070e8 <UART_SetConfig+0xc30>)
 8006f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f62:	e00c      	b.n	8006f7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f64:	4b61      	ldr	r3, [pc, #388]	@ (80070ec <UART_SetConfig+0xc34>)
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f68:	e009      	b.n	8006f7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f70:	e005      	b.n	8006f7e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 80ea 	beq.w	800715a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8a:	4a55      	ldr	r2, [pc, #340]	@ (80070e0 <UART_SetConfig+0xc28>)
 8006f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f98:	005a      	lsls	r2, r3, #1
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	441a      	add	r2, r3
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006faa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fae:	2b0f      	cmp	r3, #15
 8006fb0:	d916      	bls.n	8006fe0 <UART_SetConfig+0xb28>
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fb8:	d212      	bcs.n	8006fe0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f023 030f 	bic.w	r3, r3, #15
 8006fc2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006fdc:	60da      	str	r2, [r3, #12]
 8006fde:	e0bc      	b.n	800715a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006fe6:	e0b8      	b.n	800715a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fe8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	dc4b      	bgt.n	8007088 <UART_SetConfig+0xbd0>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f2c0 8087 	blt.w	8007104 <UART_SetConfig+0xc4c>
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	f200 8084 	bhi.w	8007104 <UART_SetConfig+0xc4c>
 8006ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <UART_SetConfig+0xb4c>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	0800708f 	.word	0x0800708f
 8007008:	08007097 	.word	0x08007097
 800700c:	08007105 	.word	0x08007105
 8007010:	08007105 	.word	0x08007105
 8007014:	0800709f 	.word	0x0800709f
 8007018:	08007105 	.word	0x08007105
 800701c:	08007105 	.word	0x08007105
 8007020:	08007105 	.word	0x08007105
 8007024:	080070af 	.word	0x080070af
 8007028:	08007105 	.word	0x08007105
 800702c:	08007105 	.word	0x08007105
 8007030:	08007105 	.word	0x08007105
 8007034:	08007105 	.word	0x08007105
 8007038:	08007105 	.word	0x08007105
 800703c:	08007105 	.word	0x08007105
 8007040:	08007105 	.word	0x08007105
 8007044:	080070bf 	.word	0x080070bf
 8007048:	08007105 	.word	0x08007105
 800704c:	08007105 	.word	0x08007105
 8007050:	08007105 	.word	0x08007105
 8007054:	08007105 	.word	0x08007105
 8007058:	08007105 	.word	0x08007105
 800705c:	08007105 	.word	0x08007105
 8007060:	08007105 	.word	0x08007105
 8007064:	08007105 	.word	0x08007105
 8007068:	08007105 	.word	0x08007105
 800706c:	08007105 	.word	0x08007105
 8007070:	08007105 	.word	0x08007105
 8007074:	08007105 	.word	0x08007105
 8007078:	08007105 	.word	0x08007105
 800707c:	08007105 	.word	0x08007105
 8007080:	08007105 	.word	0x08007105
 8007084:	080070f7 	.word	0x080070f7
 8007088:	2b40      	cmp	r3, #64	@ 0x40
 800708a:	d037      	beq.n	80070fc <UART_SetConfig+0xc44>
 800708c:	e03a      	b.n	8007104 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800708e:	f7fd fb47 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 8007092:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007094:	e03c      	b.n	8007110 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007096:	f7fd fb59 	bl	800474c <HAL_RCC_GetPCLK2Freq>
 800709a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800709c:	e038      	b.n	8007110 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800709e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe fd1e 	bl	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ac:	e030      	b.n	8007110 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ae:	f107 0318 	add.w	r3, r7, #24
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe fe6a 	bl	8005d8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070bc:	e028      	b.n	8007110 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070be:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <UART_SetConfig+0xc2c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d012      	beq.n	80070f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070ca:	4b06      	ldr	r3, [pc, #24]	@ (80070e4 <UART_SetConfig+0xc2c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	08db      	lsrs	r3, r3, #3
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	4a04      	ldr	r2, [pc, #16]	@ (80070e8 <UART_SetConfig+0xc30>)
 80070d6:	fa22 f303 	lsr.w	r3, r2, r3
 80070da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070dc:	e018      	b.n	8007110 <UART_SetConfig+0xc58>
 80070de:	bf00      	nop
 80070e0:	0800be28 	.word	0x0800be28
 80070e4:	58024400 	.word	0x58024400
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80070f0:	4b24      	ldr	r3, [pc, #144]	@ (8007184 <UART_SetConfig+0xccc>)
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e00c      	b.n	8007110 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070f6:	4b24      	ldr	r3, [pc, #144]	@ (8007188 <UART_SetConfig+0xcd0>)
 80070f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070fa:	e009      	b.n	8007110 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007102:	e005      	b.n	8007110 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800710e:	bf00      	nop
    }

    if (pclk != 0U)
 8007110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d021      	beq.n	800715a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711a:	4a1c      	ldr	r2, [pc, #112]	@ (800718c <UART_SetConfig+0xcd4>)
 800711c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007120:	461a      	mov	r2, r3
 8007122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007124:	fbb3 f2f2 	udiv	r2, r3, r2
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	441a      	add	r2, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	2b0f      	cmp	r3, #15
 800713e:	d909      	bls.n	8007154 <UART_SetConfig+0xc9c>
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007146:	d205      	bcs.n	8007154 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	b29a      	uxth	r2, r3
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60da      	str	r2, [r3, #12]
 8007152:	e002      	b.n	800715a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2201      	movs	r2, #1
 800715e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2201      	movs	r2, #1
 8007166:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2200      	movs	r2, #0
 800716e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2200      	movs	r2, #0
 8007174:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007176:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800717a:	4618      	mov	r0, r3
 800717c:	3748      	adds	r7, #72	@ 0x48
 800717e:	46bd      	mov	sp, r7
 8007180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007184:	03d09000 	.word	0x03d09000
 8007188:	003d0900 	.word	0x003d0900
 800718c:	0800be28 	.word	0x0800be28

08007190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01a      	beq.n	80072a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800728e:	d10a      	bne.n	80072a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	605a      	str	r2, [r3, #4]
  }
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b098      	sub	sp, #96	@ 0x60
 80072d8:	af02      	add	r7, sp, #8
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072e4:	f7fa fcb0 	bl	8001c48 <HAL_GetTick>
 80072e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d12f      	bne.n	8007358 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007300:	2200      	movs	r2, #0
 8007302:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f88e 	bl	8007428 <UART_WaitOnFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d022      	beq.n	8007358 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007326:	653b      	str	r3, [r7, #80]	@ 0x50
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007330:	647b      	str	r3, [r7, #68]	@ 0x44
 8007332:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800733e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e6      	bne.n	8007312 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e063      	b.n	8007420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b04      	cmp	r3, #4
 8007364:	d149      	bne.n	80073fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007366:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800736e:	2200      	movs	r2, #0
 8007370:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f857 	bl	8007428 <UART_WaitOnFlagUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d03c      	beq.n	80073fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	623b      	str	r3, [r7, #32]
   return(result);
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800739e:	633b      	str	r3, [r7, #48]	@ 0x30
 80073a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e6      	bne.n	8007380 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f023 0301 	bic.w	r3, r3, #1
 80073c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3308      	adds	r3, #8
 80073d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073d2:	61fa      	str	r2, [r7, #28]
 80073d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	69b9      	ldr	r1, [r7, #24]
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	617b      	str	r3, [r7, #20]
   return(result);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e5      	bne.n	80073b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e012      	b.n	8007420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3758      	adds	r7, #88	@ 0x58
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	4613      	mov	r3, r2
 8007436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007438:	e04f      	b.n	80074da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d04b      	beq.n	80074da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007442:	f7fa fc01 	bl	8001c48 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	429a      	cmp	r2, r3
 8007450:	d302      	bcc.n	8007458 <UART_WaitOnFlagUntilTimeout+0x30>
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e04e      	b.n	80074fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	d037      	beq.n	80074da <UART_WaitOnFlagUntilTimeout+0xb2>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b80      	cmp	r3, #128	@ 0x80
 800746e:	d034      	beq.n	80074da <UART_WaitOnFlagUntilTimeout+0xb2>
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b40      	cmp	r3, #64	@ 0x40
 8007474:	d031      	beq.n	80074da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b08      	cmp	r3, #8
 8007482:	d110      	bne.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2208      	movs	r2, #8
 800748a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f839 	bl	8007504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2208      	movs	r2, #8
 8007496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e029      	b.n	80074fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b4:	d111      	bne.n	80074da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f81f 	bl	8007504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e00f      	b.n	80074fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4013      	ands	r3, r2
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	bf0c      	ite	eq
 80074ea:	2301      	moveq	r3, #1
 80074ec:	2300      	movne	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d0a0      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b095      	sub	sp, #84	@ 0x54
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800752a:	643b      	str	r3, [r7, #64]	@ 0x40
 800752c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e6      	bne.n	800750c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	61fb      	str	r3, [r7, #28]
   return(result);
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	4b1e      	ldr	r3, [pc, #120]	@ (80075cc <UART_EndRxTransfer+0xc8>)
 8007552:	4013      	ands	r3, r2
 8007554:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3308      	adds	r3, #8
 800755c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800755e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007560:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e5      	bne.n	800753e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007576:	2b01      	cmp	r3, #1
 8007578:	d118      	bne.n	80075ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	60bb      	str	r3, [r7, #8]
   return(result);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f023 0310 	bic.w	r3, r3, #16
 800758e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6979      	ldr	r1, [r7, #20]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	613b      	str	r3, [r7, #16]
   return(result);
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e6      	bne.n	800757a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075c0:	bf00      	nop
 80075c2:	3754      	adds	r7, #84	@ 0x54
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	effffffe 	.word	0xeffffffe

080075d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e027      	b.n	8007636 <HAL_UARTEx_DisableFifoMode+0x66>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2224      	movs	r2, #36	@ 0x24
 80075f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0201 	bic.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007614:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007656:	2302      	movs	r3, #2
 8007658:	e02d      	b.n	80076b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2224      	movs	r2, #36	@ 0x24
 8007666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f850 	bl	800773c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e02d      	b.n	8007732 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2224      	movs	r2, #36	@ 0x24
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0201 	bic.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f812 	bl	800773c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007748:	2b00      	cmp	r3, #0
 800774a:	d108      	bne.n	800775e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800775c:	e031      	b.n	80077c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800775e:	2310      	movs	r3, #16
 8007760:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007762:	2310      	movs	r3, #16
 8007764:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	0e5b      	lsrs	r3, r3, #25
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	0f5b      	lsrs	r3, r3, #29
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f003 0307 	and.w	r3, r3, #7
 8007784:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	7b3a      	ldrb	r2, [r7, #12]
 800778a:	4911      	ldr	r1, [pc, #68]	@ (80077d0 <UARTEx_SetNbDataToProcess+0x94>)
 800778c:	5c8a      	ldrb	r2, [r1, r2]
 800778e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007792:	7b3a      	ldrb	r2, [r7, #12]
 8007794:	490f      	ldr	r1, [pc, #60]	@ (80077d4 <UARTEx_SetNbDataToProcess+0x98>)
 8007796:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007798:	fb93 f3f2 	sdiv	r3, r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	7b7a      	ldrb	r2, [r7, #13]
 80077a8:	4909      	ldr	r1, [pc, #36]	@ (80077d0 <UARTEx_SetNbDataToProcess+0x94>)
 80077aa:	5c8a      	ldrb	r2, [r1, r2]
 80077ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077b0:	7b7a      	ldrb	r2, [r7, #13]
 80077b2:	4908      	ldr	r1, [pc, #32]	@ (80077d4 <UARTEx_SetNbDataToProcess+0x98>)
 80077b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80077c2:	bf00      	nop
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	0800be40 	.word	0x0800be40
 80077d4:	0800be48 	.word	0x0800be48

080077d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d8:	b084      	sub	sp, #16
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	f107 001c 	add.w	r0, r7, #28
 80077e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d121      	bne.n	8007836 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	4b2c      	ldr	r3, [pc, #176]	@ (80078b4 <USB_CoreInit+0xdc>)
 8007804:	4013      	ands	r3, r2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007816:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800781a:	2b01      	cmp	r3, #1
 800781c:	d105      	bne.n	800782a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 fafa 	bl	8008e24 <USB_CoreReset>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	e01b      	b.n	800786e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 faee 	bl	8008e24 <USB_CoreReset>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800784c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007858:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007860:	e005      	b.n	800786e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007866:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800786e:	7fbb      	ldrb	r3, [r7, #30]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d116      	bne.n	80078a2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007878:	b29a      	uxth	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007882:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <USB_CoreInit+0xe0>)
 8007884:	4313      	orrs	r3, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f043 0206 	orr.w	r2, r3, #6
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f043 0220 	orr.w	r2, r3, #32
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078ae:	b004      	add	sp, #16
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	ffbdffbf 	.word	0xffbdffbf
 80078b8:	03ee0000 	.word	0x03ee0000

080078bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d165      	bne.n	800799c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4a41      	ldr	r2, [pc, #260]	@ (80079d8 <USB_SetTurnaroundTime+0x11c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d906      	bls.n	80078e6 <USB_SetTurnaroundTime+0x2a>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4a40      	ldr	r2, [pc, #256]	@ (80079dc <USB_SetTurnaroundTime+0x120>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d202      	bcs.n	80078e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80078e0:	230f      	movs	r3, #15
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	e062      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	4a3c      	ldr	r2, [pc, #240]	@ (80079dc <USB_SetTurnaroundTime+0x120>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d306      	bcc.n	80078fc <USB_SetTurnaroundTime+0x40>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4a3b      	ldr	r2, [pc, #236]	@ (80079e0 <USB_SetTurnaroundTime+0x124>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d202      	bcs.n	80078fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80078f6:	230e      	movs	r3, #14
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	e057      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4a38      	ldr	r2, [pc, #224]	@ (80079e0 <USB_SetTurnaroundTime+0x124>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d306      	bcc.n	8007912 <USB_SetTurnaroundTime+0x56>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4a37      	ldr	r2, [pc, #220]	@ (80079e4 <USB_SetTurnaroundTime+0x128>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d202      	bcs.n	8007912 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800790c:	230d      	movs	r3, #13
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	e04c      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4a33      	ldr	r2, [pc, #204]	@ (80079e4 <USB_SetTurnaroundTime+0x128>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d306      	bcc.n	8007928 <USB_SetTurnaroundTime+0x6c>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	4a32      	ldr	r2, [pc, #200]	@ (80079e8 <USB_SetTurnaroundTime+0x12c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d802      	bhi.n	8007928 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007922:	230c      	movs	r3, #12
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	e041      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4a2f      	ldr	r2, [pc, #188]	@ (80079e8 <USB_SetTurnaroundTime+0x12c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d906      	bls.n	800793e <USB_SetTurnaroundTime+0x82>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4a2e      	ldr	r2, [pc, #184]	@ (80079ec <USB_SetTurnaroundTime+0x130>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d802      	bhi.n	800793e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007938:	230b      	movs	r3, #11
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	e036      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	4a2a      	ldr	r2, [pc, #168]	@ (80079ec <USB_SetTurnaroundTime+0x130>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d906      	bls.n	8007954 <USB_SetTurnaroundTime+0x98>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	4a29      	ldr	r2, [pc, #164]	@ (80079f0 <USB_SetTurnaroundTime+0x134>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d802      	bhi.n	8007954 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800794e:	230a      	movs	r3, #10
 8007950:	617b      	str	r3, [r7, #20]
 8007952:	e02b      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4a26      	ldr	r2, [pc, #152]	@ (80079f0 <USB_SetTurnaroundTime+0x134>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d906      	bls.n	800796a <USB_SetTurnaroundTime+0xae>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	4a25      	ldr	r2, [pc, #148]	@ (80079f4 <USB_SetTurnaroundTime+0x138>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d202      	bcs.n	800796a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007964:	2309      	movs	r3, #9
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e020      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	4a21      	ldr	r2, [pc, #132]	@ (80079f4 <USB_SetTurnaroundTime+0x138>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d306      	bcc.n	8007980 <USB_SetTurnaroundTime+0xc4>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4a20      	ldr	r2, [pc, #128]	@ (80079f8 <USB_SetTurnaroundTime+0x13c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d802      	bhi.n	8007980 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800797a:	2308      	movs	r3, #8
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	e015      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4a1d      	ldr	r2, [pc, #116]	@ (80079f8 <USB_SetTurnaroundTime+0x13c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d906      	bls.n	8007996 <USB_SetTurnaroundTime+0xda>
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4a1c      	ldr	r2, [pc, #112]	@ (80079fc <USB_SetTurnaroundTime+0x140>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d202      	bcs.n	8007996 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007990:	2307      	movs	r3, #7
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	e00a      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007996:	2306      	movs	r3, #6
 8007998:	617b      	str	r3, [r7, #20]
 800799a:	e007      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80079a2:	2309      	movs	r3, #9
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	e001      	b.n	80079ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80079a8:	2309      	movs	r3, #9
 80079aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	029b      	lsls	r3, r3, #10
 80079c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80079c4:	431a      	orrs	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	00d8acbf 	.word	0x00d8acbf
 80079dc:	00e4e1c0 	.word	0x00e4e1c0
 80079e0:	00f42400 	.word	0x00f42400
 80079e4:	01067380 	.word	0x01067380
 80079e8:	011a499f 	.word	0x011a499f
 80079ec:	01312cff 	.word	0x01312cff
 80079f0:	014ca43f 	.word	0x014ca43f
 80079f4:	016e3600 	.word	0x016e3600
 80079f8:	01a6ab1f 	.word	0x01a6ab1f
 80079fc:	01e84800 	.word	0x01e84800

08007a00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f043 0201 	orr.w	r2, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f023 0201 	bic.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d115      	bne.n	8007a92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a72:	200a      	movs	r0, #10
 8007a74:	f7fa f8f4 	bl	8001c60 <HAL_Delay>
      ms += 10U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	330a      	adds	r3, #10
 8007a7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 f93f 	bl	8008d02 <USB_GetMode>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d01e      	beq.n	8007ac8 <USB_SetCurrentMode+0x84>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007a8e:	d9f0      	bls.n	8007a72 <USB_SetCurrentMode+0x2e>
 8007a90:	e01a      	b.n	8007ac8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d115      	bne.n	8007ac4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007aa4:	200a      	movs	r0, #10
 8007aa6:	f7fa f8db 	bl	8001c60 <HAL_Delay>
      ms += 10U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	330a      	adds	r3, #10
 8007aae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 f926 	bl	8008d02 <USB_GetMode>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <USB_SetCurrentMode+0x84>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ac0:	d9f0      	bls.n	8007aa4 <USB_SetCurrentMode+0x60>
 8007ac2:	e001      	b.n	8007ac8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e005      	b.n	8007ad4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2bc8      	cmp	r3, #200	@ 0xc8
 8007acc:	d101      	bne.n	8007ad2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007adc:	b084      	sub	sp, #16
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b086      	sub	sp, #24
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	e009      	b.n	8007b10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	3340      	adds	r3, #64	@ 0x40
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	2b0e      	cmp	r3, #14
 8007b14:	d9f2      	bls.n	8007afc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d11c      	bne.n	8007b58 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b2c:	f043 0302 	orr.w	r3, r3, #2
 8007b30:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b36:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	e005      	b.n	8007b64 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b70:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d10d      	bne.n	8007b94 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d104      	bne.n	8007b8a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b80:	2100      	movs	r1, #0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f968 	bl	8007e58 <USB_SetDevSpeed>
 8007b88:	e008      	b.n	8007b9c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f963 	bl	8007e58 <USB_SetDevSpeed>
 8007b92:	e003      	b.n	8007b9c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b94:	2103      	movs	r1, #3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f95e 	bl	8007e58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b9c:	2110      	movs	r1, #16
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f8fa 	bl	8007d98 <USB_FlushTxFifo>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f924 	bl	8007dfc <USB_FlushRxFifo>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bdc:	461a      	mov	r2, r3
 8007bde:	2300      	movs	r3, #0
 8007be0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007be2:	2300      	movs	r3, #0
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	e043      	b.n	8007c70 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bfe:	d118      	bne.n	8007c32 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c12:	461a      	mov	r2, r3
 8007c14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e013      	b.n	8007c44 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	e008      	b.n	8007c44 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c3e:	461a      	mov	r2, r3
 8007c40:	2300      	movs	r3, #0
 8007c42:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c50:	461a      	mov	r2, r3
 8007c52:	2300      	movs	r3, #0
 8007c54:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c62:	461a      	mov	r2, r3
 8007c64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	613b      	str	r3, [r7, #16]
 8007c70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c74:	461a      	mov	r2, r3
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d3b5      	bcc.n	8007be8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	e043      	b.n	8007d0a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c98:	d118      	bne.n	8007ccc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cac:	461a      	mov	r2, r3
 8007cae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	e013      	b.n	8007cde <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	e008      	b.n	8007cde <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd8:	461a      	mov	r2, r3
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cea:	461a      	mov	r2, r3
 8007cec:	2300      	movs	r3, #0
 8007cee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	3301      	adds	r3, #1
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d0e:	461a      	mov	r2, r3
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d3b5      	bcc.n	8007c82 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d28:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007d36:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d105      	bne.n	8007d4c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f043 0210 	orr.w	r2, r3, #16
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	699a      	ldr	r2, [r3, #24]
 8007d50:	4b0f      	ldr	r3, [pc, #60]	@ (8007d90 <USB_DevInit+0x2b4>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	f043 0208 	orr.w	r2, r3, #8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d105      	bne.n	8007d80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699a      	ldr	r2, [r3, #24]
 8007d78:	4b06      	ldr	r3, [pc, #24]	@ (8007d94 <USB_DevInit+0x2b8>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d8c:	b004      	add	sp, #16
 8007d8e:	4770      	bx	lr
 8007d90:	803c3800 	.word	0x803c3800
 8007d94:	40000004 	.word	0x40000004

08007d98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3301      	adds	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007db2:	d901      	bls.n	8007db8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e01b      	b.n	8007df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	daf2      	bge.n	8007da6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	019b      	lsls	r3, r3, #6
 8007dc8:	f043 0220 	orr.w	r2, r3, #32
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ddc:	d901      	bls.n	8007de2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e006      	b.n	8007df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d0f0      	beq.n	8007dd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e14:	d901      	bls.n	8007e1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e018      	b.n	8007e4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	daf2      	bge.n	8007e08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2210      	movs	r2, #16
 8007e2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e38:	d901      	bls.n	8007e3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e006      	b.n	8007e4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f003 0310 	and.w	r3, r3, #16
 8007e46:	2b10      	cmp	r3, #16
 8007e48:	d0f0      	beq.n	8007e2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b087      	sub	sp, #28
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 0306 	and.w	r3, r3, #6
 8007ea2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d102      	bne.n	8007eb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]
 8007eae:	e00a      	b.n	8007ec6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d002      	beq.n	8007ebc <USB_GetDevSpeed+0x32>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b06      	cmp	r3, #6
 8007eba:	d102      	bne.n	8007ec2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	75fb      	strb	r3, [r7, #23]
 8007ec0:	e001      	b.n	8007ec6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ec2:	230f      	movs	r3, #15
 8007ec4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d139      	bne.n	8007f64 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	2101      	movs	r1, #1
 8007f02:	fa01 f303 	lsl.w	r3, r1, r3
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	68f9      	ldr	r1, [r7, #12]
 8007f0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d153      	bne.n	8007fd0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	791b      	ldrb	r3, [r3, #4]
 8007f42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	059b      	lsls	r3, r3, #22
 8007f4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	0159      	lsls	r1, r3, #5
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	440b      	add	r3, r1
 8007f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	4b20      	ldr	r3, [pc, #128]	@ (8007fe0 <USB_ActivateEndpoint+0x10c>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	600b      	str	r3, [r1, #0]
 8007f62:	e035      	b.n	8007fd0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f6a:	69da      	ldr	r2, [r3, #28]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	2101      	movs	r1, #1
 8007f76:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7a:	041b      	lsls	r3, r3, #16
 8007f7c:	68f9      	ldr	r1, [r7, #12]
 8007f7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f82:	4313      	orrs	r3, r2
 8007f84:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d119      	bne.n	8007fd0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	791b      	ldrb	r3, [r3, #4]
 8007fb6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	0159      	lsls	r1, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	440b      	add	r3, r1
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4b05      	ldr	r3, [pc, #20]	@ (8007fe0 <USB_ActivateEndpoint+0x10c>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	10008000 	.word	0x10008000

08007fe4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d161      	bne.n	80080c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008012:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008016:	d11f      	bne.n	8008058 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008032:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008036:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008052:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008056:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800805e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	2101      	movs	r1, #1
 800806a:	fa01 f303 	lsl.w	r3, r1, r3
 800806e:	b29b      	uxth	r3, r3
 8008070:	43db      	mvns	r3, r3
 8008072:	68f9      	ldr	r1, [r7, #12]
 8008074:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008078:	4013      	ands	r3, r2
 800807a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008082:	69da      	ldr	r2, [r3, #28]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	2101      	movs	r1, #1
 800808e:	fa01 f303 	lsl.w	r3, r1, r3
 8008092:	b29b      	uxth	r3, r3
 8008094:	43db      	mvns	r3, r3
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800809c:	4013      	ands	r3, r2
 800809e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	0159      	lsls	r1, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	440b      	add	r3, r1
 80080b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ba:	4619      	mov	r1, r3
 80080bc:	4b35      	ldr	r3, [pc, #212]	@ (8008194 <USB_DeactivateEndpoint+0x1b0>)
 80080be:	4013      	ands	r3, r2
 80080c0:	600b      	str	r3, [r1, #0]
 80080c2:	e060      	b.n	8008186 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080da:	d11f      	bne.n	800811c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	0151      	lsls	r1, r2, #5
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	440a      	add	r2, r1
 8008112:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008116:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800811a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f003 030f 	and.w	r3, r3, #15
 800812c:	2101      	movs	r1, #1
 800812e:	fa01 f303 	lsl.w	r3, r1, r3
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	43db      	mvns	r3, r3
 8008136:	68f9      	ldr	r1, [r7, #12]
 8008138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800813c:	4013      	ands	r3, r2
 800813e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	2101      	movs	r1, #1
 8008152:	fa01 f303 	lsl.w	r3, r1, r3
 8008156:	041b      	lsls	r3, r3, #16
 8008158:	43db      	mvns	r3, r3
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008160:	4013      	ands	r3, r2
 8008162:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	0159      	lsls	r1, r3, #5
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	440b      	add	r3, r1
 800817a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800817e:	4619      	mov	r1, r3
 8008180:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <USB_DeactivateEndpoint+0x1b4>)
 8008182:	4013      	ands	r3, r2
 8008184:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	ec337800 	.word	0xec337800
 8008198:	eff37800 	.word	0xeff37800

0800819c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08a      	sub	sp, #40	@ 0x28
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	f040 8185 	bne.w	80084c8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d132      	bne.n	800822c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	0159      	lsls	r1, r3, #5
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	440b      	add	r3, r1
 80081dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e0:	4619      	mov	r1, r3
 80081e2:	4ba7      	ldr	r3, [pc, #668]	@ (8008480 <USB_EPStartXfer+0x2e4>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008202:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	0159      	lsls	r1, r3, #5
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	440b      	add	r3, r1
 800821e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008222:	4619      	mov	r1, r3
 8008224:	4b97      	ldr	r3, [pc, #604]	@ (8008484 <USB_EPStartXfer+0x2e8>)
 8008226:	4013      	ands	r3, r2
 8008228:	610b      	str	r3, [r1, #16]
 800822a:	e097      	b.n	800835c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	0159      	lsls	r1, r3, #5
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	440b      	add	r3, r1
 8008242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008246:	4619      	mov	r1, r3
 8008248:	4b8e      	ldr	r3, [pc, #568]	@ (8008484 <USB_EPStartXfer+0x2e8>)
 800824a:	4013      	ands	r3, r2
 800824c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825a:	691a      	ldr	r2, [r3, #16]
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	0159      	lsls	r1, r3, #5
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	440b      	add	r3, r1
 8008264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008268:	4619      	mov	r1, r3
 800826a:	4b85      	ldr	r3, [pc, #532]	@ (8008480 <USB_EPStartXfer+0x2e4>)
 800826c:	4013      	ands	r3, r2
 800826e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d11a      	bne.n	80082ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	691a      	ldr	r2, [r3, #16]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	429a      	cmp	r2, r3
 8008280:	d903      	bls.n	800828a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	0151      	lsls	r1, r2, #5
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	440a      	add	r2, r1
 80082a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082a8:	6113      	str	r3, [r2, #16]
 80082aa:	e044      	b.n	8008336 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	691a      	ldr	r2, [r3, #16]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	4413      	add	r3, r2
 80082b6:	1e5a      	subs	r2, r3, #1
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	8afb      	ldrh	r3, [r7, #22]
 80082d2:	04d9      	lsls	r1, r3, #19
 80082d4:	4b6c      	ldr	r3, [pc, #432]	@ (8008488 <USB_EPStartXfer+0x2ec>)
 80082d6:	400b      	ands	r3, r1
 80082d8:	69b9      	ldr	r1, [r7, #24]
 80082da:	0148      	lsls	r0, r1, #5
 80082dc:	69f9      	ldr	r1, [r7, #28]
 80082de:	4401      	add	r1, r0
 80082e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80082e4:	4313      	orrs	r3, r2
 80082e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	791b      	ldrb	r3, [r3, #4]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d122      	bne.n	8008336 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	440a      	add	r2, r1
 8008306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800830a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800830e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800831c:	691a      	ldr	r2, [r3, #16]
 800831e:	8afb      	ldrh	r3, [r7, #22]
 8008320:	075b      	lsls	r3, r3, #29
 8008322:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008326:	69b9      	ldr	r1, [r7, #24]
 8008328:	0148      	lsls	r0, r1, #5
 800832a:	69f9      	ldr	r1, [r7, #28]
 800832c:	4401      	add	r1, r0
 800832e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008332:	4313      	orrs	r3, r2
 8008334:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008342:	691a      	ldr	r2, [r3, #16]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800834c:	69b9      	ldr	r1, [r7, #24]
 800834e:	0148      	lsls	r0, r1, #5
 8008350:	69f9      	ldr	r1, [r7, #28]
 8008352:	4401      	add	r1, r0
 8008354:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008358:	4313      	orrs	r3, r2
 800835a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d14b      	bne.n	80083fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d009      	beq.n	800837e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008376:	461a      	mov	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d128      	bne.n	80083d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008392:	2b00      	cmp	r3, #0
 8008394:	d110      	bne.n	80083b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	0151      	lsls	r1, r2, #5
 80083a8:	69fa      	ldr	r2, [r7, #28]
 80083aa:	440a      	add	r2, r1
 80083ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	e00f      	b.n	80083d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	0151      	lsls	r1, r2, #5
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	440a      	add	r2, r1
 80083ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	0151      	lsls	r1, r2, #5
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	440a      	add	r2, r1
 80083ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	e169      	b.n	80086ce <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	0151      	lsls	r1, r2, #5
 800840c:	69fa      	ldr	r2, [r7, #28]
 800840e:	440a      	add	r2, r1
 8008410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008414:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008418:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	791b      	ldrb	r3, [r3, #4]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d015      	beq.n	800844e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 8151 	beq.w	80086ce <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	f003 030f 	and.w	r3, r3, #15
 800843c:	2101      	movs	r1, #1
 800843e:	fa01 f303 	lsl.w	r3, r1, r3
 8008442:	69f9      	ldr	r1, [r7, #28]
 8008444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008448:	4313      	orrs	r3, r2
 800844a:	634b      	str	r3, [r1, #52]	@ 0x34
 800844c:	e13f      	b.n	80086ce <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845a:	2b00      	cmp	r3, #0
 800845c:	d116      	bne.n	800848c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	69fa      	ldr	r2, [r7, #28]
 8008472:	440a      	add	r2, r1
 8008474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008478:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	e015      	b.n	80084ac <USB_EPStartXfer+0x310>
 8008480:	e007ffff 	.word	0xe007ffff
 8008484:	fff80000 	.word	0xfff80000
 8008488:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	68d9      	ldr	r1, [r3, #12]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	781a      	ldrb	r2, [r3, #0]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	b298      	uxth	r0, r3
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	4603      	mov	r3, r0
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 f9b9 	bl	8008838 <USB_WritePacket>
 80084c6:	e102      	b.n	80086ce <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d4:	691a      	ldr	r2, [r3, #16]
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	0159      	lsls	r1, r3, #5
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	440b      	add	r3, r1
 80084de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e2:	4619      	mov	r1, r3
 80084e4:	4b7c      	ldr	r3, [pc, #496]	@ (80086d8 <USB_EPStartXfer+0x53c>)
 80084e6:	4013      	ands	r3, r2
 80084e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084f6:	691a      	ldr	r2, [r3, #16]
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	0159      	lsls	r1, r3, #5
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	440b      	add	r3, r1
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	4619      	mov	r1, r3
 8008506:	4b75      	ldr	r3, [pc, #468]	@ (80086dc <USB_EPStartXfer+0x540>)
 8008508:	4013      	ands	r3, r2
 800850a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d12f      	bne.n	8008572 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008540:	69b9      	ldr	r1, [r7, #24]
 8008542:	0148      	lsls	r0, r1, #5
 8008544:	69f9      	ldr	r1, [r7, #28]
 8008546:	4401      	add	r1, r0
 8008548:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800854c:	4313      	orrs	r3, r2
 800854e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	440a      	add	r2, r1
 8008566:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800856a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800856e:	6113      	str	r3, [r2, #16]
 8008570:	e05f      	b.n	8008632 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d123      	bne.n	80085c2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008590:	69b9      	ldr	r1, [r7, #24]
 8008592:	0148      	lsls	r0, r1, #5
 8008594:	69f9      	ldr	r1, [r7, #28]
 8008596:	4401      	add	r1, r0
 8008598:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800859c:	4313      	orrs	r3, r2
 800859e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	0151      	lsls	r1, r2, #5
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	440a      	add	r2, r1
 80085b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085be:	6113      	str	r3, [r2, #16]
 80085c0:	e037      	b.n	8008632 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	691a      	ldr	r2, [r3, #16]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	4413      	add	r3, r2
 80085cc:	1e5a      	subs	r2, r3, #1
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	8afa      	ldrh	r2, [r7, #22]
 80085de:	fb03 f202 	mul.w	r2, r3, r2
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	8afb      	ldrh	r3, [r7, #22]
 80085f6:	04d9      	lsls	r1, r3, #19
 80085f8:	4b39      	ldr	r3, [pc, #228]	@ (80086e0 <USB_EPStartXfer+0x544>)
 80085fa:	400b      	ands	r3, r1
 80085fc:	69b9      	ldr	r1, [r7, #24]
 80085fe:	0148      	lsls	r0, r1, #5
 8008600:	69f9      	ldr	r1, [r7, #28]
 8008602:	4401      	add	r1, r0
 8008604:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008608:	4313      	orrs	r3, r2
 800860a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008618:	691a      	ldr	r2, [r3, #16]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008622:	69b9      	ldr	r1, [r7, #24]
 8008624:	0148      	lsls	r0, r1, #5
 8008626:	69f9      	ldr	r1, [r7, #28]
 8008628:	4401      	add	r1, r0
 800862a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800862e:	4313      	orrs	r3, r2
 8008630:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d10d      	bne.n	8008654 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d009      	beq.n	8008654 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	68d9      	ldr	r1, [r3, #12]
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008650:	460a      	mov	r2, r1
 8008652:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	791b      	ldrb	r3, [r3, #4]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d128      	bne.n	80086ae <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008668:	2b00      	cmp	r3, #0
 800866a:	d110      	bne.n	800868e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	440a      	add	r2, r1
 8008682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008686:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800868a:	6013      	str	r3, [r2, #0]
 800868c:	e00f      	b.n	80086ae <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	69fa      	ldr	r2, [r7, #28]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086ac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80086cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3720      	adds	r7, #32
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	fff80000 	.word	0xfff80000
 80086dc:	e007ffff 	.word	0xe007ffff
 80086e0:	1ff80000 	.word	0x1ff80000

080086e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d14a      	bne.n	8008798 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008716:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800871a:	f040 8086 	bne.w	800882a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	7812      	ldrb	r2, [r2, #0]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	440a      	add	r2, r1
 8008738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800873c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008740:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	0151      	lsls	r1, r2, #5
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	440a      	add	r2, r1
 800875c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008760:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008764:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3301      	adds	r3, #1
 800876a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008772:	4293      	cmp	r3, r2
 8008774:	d902      	bls.n	800877c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	75fb      	strb	r3, [r7, #23]
          break;
 800877a:	e056      	b.n	800882a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008794:	d0e7      	beq.n	8008766 <USB_EPStopXfer+0x82>
 8008796:	e048      	b.n	800882a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087b0:	d13b      	bne.n	800882a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	0151      	lsls	r1, r2, #5
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	440a      	add	r2, r1
 80087cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	7812      	ldrb	r2, [r2, #0]
 80087ea:	0151      	lsls	r1, r2, #5
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	440a      	add	r2, r1
 80087f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3301      	adds	r3, #1
 80087fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008806:	4293      	cmp	r3, r2
 8008808:	d902      	bls.n	8008810 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	75fb      	strb	r3, [r7, #23]
          break;
 800880e:	e00c      	b.n	800882a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008828:	d0e7      	beq.n	80087fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
}
 800882c:	4618      	mov	r0, r3
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008838:	b480      	push	{r7}
 800883a:	b089      	sub	sp, #36	@ 0x24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4611      	mov	r1, r2
 8008844:	461a      	mov	r2, r3
 8008846:	460b      	mov	r3, r1
 8008848:	71fb      	strb	r3, [r7, #7]
 800884a:	4613      	mov	r3, r2
 800884c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	d123      	bne.n	80088a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800885e:	88bb      	ldrh	r3, [r7, #4]
 8008860:	3303      	adds	r3, #3
 8008862:	089b      	lsrs	r3, r3, #2
 8008864:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008866:	2300      	movs	r3, #0
 8008868:	61bb      	str	r3, [r7, #24]
 800886a:	e018      	b.n	800889e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	031a      	lsls	r2, r3, #12
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	4413      	add	r3, r2
 8008874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008878:	461a      	mov	r2, r3
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	3301      	adds	r3, #1
 8008884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	3301      	adds	r3, #1
 800888a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	3301      	adds	r3, #1
 8008890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	3301      	adds	r3, #1
 8008896:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	3301      	adds	r3, #1
 800889c:	61bb      	str	r3, [r7, #24]
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d3e2      	bcc.n	800886c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3724      	adds	r7, #36	@ 0x24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b08b      	sub	sp, #44	@ 0x2c
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	089b      	lsrs	r3, r3, #2
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088da:	2300      	movs	r3, #0
 80088dc:	623b      	str	r3, [r7, #32]
 80088de:	e014      	b.n	800890a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ee:	3301      	adds	r3, #1
 80088f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	3301      	adds	r3, #1
 80088f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	3301      	adds	r3, #1
 80088fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	3301      	adds	r3, #1
 8008902:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	3301      	adds	r3, #1
 8008908:	623b      	str	r3, [r7, #32]
 800890a:	6a3a      	ldr	r2, [r7, #32]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	429a      	cmp	r2, r3
 8008910:	d3e6      	bcc.n	80088e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008912:	8bfb      	ldrh	r3, [r7, #30]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01e      	beq.n	8008956 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008922:	461a      	mov	r2, r3
 8008924:	f107 0310 	add.w	r3, r7, #16
 8008928:	6812      	ldr	r2, [r2, #0]
 800892a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
 8008938:	b2da      	uxtb	r2, r3
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	701a      	strb	r2, [r3, #0]
      i++;
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	3301      	adds	r3, #1
 8008942:	623b      	str	r3, [r7, #32]
      pDest++;
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	3301      	adds	r3, #1
 8008948:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800894a:	8bfb      	ldrh	r3, [r7, #30]
 800894c:	3b01      	subs	r3, #1
 800894e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008950:	8bfb      	ldrh	r3, [r7, #30]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1ea      	bne.n	800892c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008958:	4618      	mov	r0, r3
 800895a:	372c      	adds	r7, #44	@ 0x2c
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d12c      	bne.n	80089da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	db12      	blt.n	80089b8 <USB_EPSetStall+0x54>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00f      	beq.n	80089b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	0151      	lsls	r1, r2, #5
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	440a      	add	r2, r1
 80089ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	e02b      	b.n	8008a32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	db12      	blt.n	8008a12 <USB_EPSetStall+0xae>
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00f      	beq.n	8008a12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	0151      	lsls	r1, r2, #5
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	440a      	add	r2, r1
 8008a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d128      	bne.n	8008aae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	0151      	lsls	r1, r2, #5
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	440a      	add	r2, r1
 8008a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	791b      	ldrb	r3, [r3, #4]
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d003      	beq.n	8008a8c <USB_EPClearStall+0x4c>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	791b      	ldrb	r3, [r3, #4]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d138      	bne.n	8008afe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	e027      	b.n	8008afe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	0151      	lsls	r1, r2, #5
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	440a      	add	r2, r1
 8008ac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ac8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008acc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	791b      	ldrb	r3, [r3, #4]
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d003      	beq.n	8008ade <USB_EPClearStall+0x9e>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	791b      	ldrb	r3, [r3, #4]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d10f      	bne.n	8008afe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008afc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008b40:	68f9      	ldr	r1, [r7, #12]
 8008b42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b46:	4313      	orrs	r3, r2
 8008b48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b72:	f023 0303 	bic.w	r3, r3, #3
 8008b76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b86:	f023 0302 	bic.w	r3, r3, #2
 8008b8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bb4:	f023 0303 	bic.w	r3, r3, #3
 8008bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bc8:	f043 0302 	orr.w	r3, r3, #2
 8008bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b085      	sub	sp, #20
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	4013      	ands	r3, r2
 8008c24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	0c1b      	lsrs	r3, r3, #16
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	4013      	ands	r3, r2
 8008c58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	b29b      	uxth	r3, r3
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	4013      	ands	r3, r2
 8008c96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c98:	68bb      	ldr	r3, [r7, #8]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b087      	sub	sp, #28
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd6:	01db      	lsls	r3, r3, #7
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
	...

08008d20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <USB_ActivateSetup+0x44>)
 8008d3e:	4013      	ands	r3, r2
 8008d40:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	fffff800 	.word	0xfffff800

08008d68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	460b      	mov	r3, r1
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	333c      	adds	r3, #60	@ 0x3c
 8008d7e:	3304      	adds	r3, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	4a26      	ldr	r2, [pc, #152]	@ (8008e20 <USB_EP0_OutStart+0xb8>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d90a      	bls.n	8008da2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d9c:	d101      	bne.n	8008da2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e037      	b.n	8008e12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da8:	461a      	mov	r2, r3
 8008daa:	2300      	movs	r3, #0
 8008dac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008dc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dd0:	f043 0318 	orr.w	r3, r3, #24
 8008dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008de4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008de8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d10f      	bne.n	8008e10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e0a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008e0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	4f54300a 	.word	0x4f54300a

08008e24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3301      	adds	r3, #1
 8008e34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e3c:	d901      	bls.n	8008e42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e01b      	b.n	8008e7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	daf2      	bge.n	8008e30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	f043 0201 	orr.w	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e66:	d901      	bls.n	8008e6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e006      	b.n	8008e7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d0f0      	beq.n	8008e5a <USB_CoreReset+0x36>

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008e94:	2010      	movs	r0, #16
 8008e96:	f002 f9d9 	bl	800b24c <USBD_static_malloc>
 8008e9a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d109      	bne.n	8008eb6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	32b0      	adds	r2, #176	@ 0xb0
 8008eac:	2100      	movs	r1, #0
 8008eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	e048      	b.n	8008f48 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	32b0      	adds	r2, #176	@ 0xb0
 8008ec0:	68f9      	ldr	r1, [r7, #12]
 8008ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	32b0      	adds	r2, #176	@ 0xb0
 8008ed0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	7c1b      	ldrb	r3, [r3, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10d      	bne.n	8008efe <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f50 <USBD_HID_Init+0xc8>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	f003 020f 	and.w	r2, r3, #15
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	3326      	adds	r3, #38	@ 0x26
 8008ef8:	2207      	movs	r2, #7
 8008efa:	801a      	strh	r2, [r3, #0]
 8008efc:	e00c      	b.n	8008f18 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008efe:	4b14      	ldr	r3, [pc, #80]	@ (8008f50 <USBD_HID_Init+0xc8>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	f003 020f 	and.w	r2, r3, #15
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	440b      	add	r3, r1
 8008f12:	3326      	adds	r3, #38	@ 0x26
 8008f14:	220a      	movs	r2, #10
 8008f16:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008f18:	4b0d      	ldr	r3, [pc, #52]	@ (8008f50 <USBD_HID_Init+0xc8>)
 8008f1a:	7819      	ldrb	r1, [r3, #0]
 8008f1c:	2304      	movs	r3, #4
 8008f1e:	2203      	movs	r2, #3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f002 f882 	bl	800b02a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008f26:	4b0a      	ldr	r3, [pc, #40]	@ (8008f50 <USBD_HID_Init+0xc8>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	f003 020f 	and.w	r2, r3, #15
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	440b      	add	r3, r1
 8008f3a:	3324      	adds	r3, #36	@ 0x24
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	24000273 	.word	0x24000273

08008f54 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008f60:	4b1f      	ldr	r3, [pc, #124]	@ (8008fe0 <USBD_HID_DeInit+0x8c>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f002 f885 	bl	800b076 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe0 <USBD_HID_DeInit+0x8c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f003 020f 	and.w	r2, r3, #15
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4613      	mov	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	440b      	add	r3, r1
 8008f80:	3324      	adds	r3, #36	@ 0x24
 8008f82:	2200      	movs	r2, #0
 8008f84:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008f86:	4b16      	ldr	r3, [pc, #88]	@ (8008fe0 <USBD_HID_DeInit+0x8c>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	f003 020f 	and.w	r2, r3, #15
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	3326      	adds	r3, #38	@ 0x26
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	32b0      	adds	r2, #176	@ 0xb0
 8008faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d011      	beq.n	8008fd6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	32b0      	adds	r2, #176	@ 0xb0
 8008fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f002 f951 	bl	800b268 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	32b0      	adds	r2, #176	@ 0xb0
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	24000273 	.word	0x24000273

08008fe4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	32b0      	adds	r2, #176	@ 0xb0
 8008ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800900c:	2303      	movs	r3, #3
 800900e:	e0e8      	b.n	80091e2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009018:	2b00      	cmp	r3, #0
 800901a:	d046      	beq.n	80090aa <USBD_HID_Setup+0xc6>
 800901c:	2b20      	cmp	r3, #32
 800901e:	f040 80d8 	bne.w	80091d2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	3b02      	subs	r3, #2
 8009028:	2b09      	cmp	r3, #9
 800902a:	d836      	bhi.n	800909a <USBD_HID_Setup+0xb6>
 800902c:	a201      	add	r2, pc, #4	@ (adr r2, 8009034 <USBD_HID_Setup+0x50>)
 800902e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009032:	bf00      	nop
 8009034:	0800908b 	.word	0x0800908b
 8009038:	0800906b 	.word	0x0800906b
 800903c:	0800909b 	.word	0x0800909b
 8009040:	0800909b 	.word	0x0800909b
 8009044:	0800909b 	.word	0x0800909b
 8009048:	0800909b 	.word	0x0800909b
 800904c:	0800909b 	.word	0x0800909b
 8009050:	0800909b 	.word	0x0800909b
 8009054:	08009079 	.word	0x08009079
 8009058:	0800905d 	.word	0x0800905d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	461a      	mov	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	601a      	str	r2, [r3, #0]
          break;
 8009068:	e01e      	b.n	80090a8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2201      	movs	r2, #1
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 fc0f 	bl	800a894 <USBD_CtlSendData>
          break;
 8009076:	e017      	b.n	80090a8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	885b      	ldrh	r3, [r3, #2]
 800907c:	0a1b      	lsrs	r3, r3, #8
 800907e:	b29b      	uxth	r3, r3
 8009080:	b2db      	uxtb	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	605a      	str	r2, [r3, #4]
          break;
 8009088:	e00e      	b.n	80090a8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3304      	adds	r3, #4
 800908e:	2201      	movs	r2, #1
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 fbfe 	bl	800a894 <USBD_CtlSendData>
          break;
 8009098:	e006      	b.n	80090a8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 fb7c 	bl	800a79a <USBD_CtlError>
          ret = USBD_FAIL;
 80090a2:	2303      	movs	r3, #3
 80090a4:	75fb      	strb	r3, [r7, #23]
          break;
 80090a6:	bf00      	nop
      }
      break;
 80090a8:	e09a      	b.n	80091e0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	785b      	ldrb	r3, [r3, #1]
 80090ae:	2b0b      	cmp	r3, #11
 80090b0:	f200 8086 	bhi.w	80091c0 <USBD_HID_Setup+0x1dc>
 80090b4:	a201      	add	r2, pc, #4	@ (adr r2, 80090bc <USBD_HID_Setup+0xd8>)
 80090b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ba:	bf00      	nop
 80090bc:	080090ed 	.word	0x080090ed
 80090c0:	080091cf 	.word	0x080091cf
 80090c4:	080091c1 	.word	0x080091c1
 80090c8:	080091c1 	.word	0x080091c1
 80090cc:	080091c1 	.word	0x080091c1
 80090d0:	080091c1 	.word	0x080091c1
 80090d4:	08009117 	.word	0x08009117
 80090d8:	080091c1 	.word	0x080091c1
 80090dc:	080091c1 	.word	0x080091c1
 80090e0:	080091c1 	.word	0x080091c1
 80090e4:	0800916f 	.word	0x0800916f
 80090e8:	08009199 	.word	0x08009199
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d107      	bne.n	8009108 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80090f8:	f107 030a 	add.w	r3, r7, #10
 80090fc:	2202      	movs	r2, #2
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fbc7 	bl	800a894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009106:	e063      	b.n	80091d0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 fb45 	bl	800a79a <USBD_CtlError>
            ret = USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	75fb      	strb	r3, [r7, #23]
          break;
 8009114:	e05c      	b.n	80091d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	885b      	ldrh	r3, [r3, #2]
 800911a:	0a1b      	lsrs	r3, r3, #8
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b22      	cmp	r3, #34	@ 0x22
 8009120:	d108      	bne.n	8009134 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	88db      	ldrh	r3, [r3, #6]
 8009126:	2b3f      	cmp	r3, #63	@ 0x3f
 8009128:	bf28      	it	cs
 800912a:	233f      	movcs	r3, #63	@ 0x3f
 800912c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800912e:	4b2f      	ldr	r3, [pc, #188]	@ (80091ec <USBD_HID_Setup+0x208>)
 8009130:	613b      	str	r3, [r7, #16]
 8009132:	e015      	b.n	8009160 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	885b      	ldrh	r3, [r3, #2]
 8009138:	0a1b      	lsrs	r3, r3, #8
 800913a:	b29b      	uxth	r3, r3
 800913c:	2b21      	cmp	r3, #33	@ 0x21
 800913e:	d108      	bne.n	8009152 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009140:	4b2b      	ldr	r3, [pc, #172]	@ (80091f0 <USBD_HID_Setup+0x20c>)
 8009142:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	88db      	ldrh	r3, [r3, #6]
 8009148:	2b09      	cmp	r3, #9
 800914a:	bf28      	it	cs
 800914c:	2309      	movcs	r3, #9
 800914e:	82bb      	strh	r3, [r7, #20]
 8009150:	e006      	b.n	8009160 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 fb20 	bl	800a79a <USBD_CtlError>
            ret = USBD_FAIL;
 800915a:	2303      	movs	r3, #3
 800915c:	75fb      	strb	r3, [r7, #23]
            break;
 800915e:	e037      	b.n	80091d0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009160:	8abb      	ldrh	r3, [r7, #20]
 8009162:	461a      	mov	r2, r3
 8009164:	6939      	ldr	r1, [r7, #16]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 fb94 	bl	800a894 <USBD_CtlSendData>
          break;
 800916c:	e030      	b.n	80091d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b03      	cmp	r3, #3
 8009178:	d107      	bne.n	800918a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3308      	adds	r3, #8
 800917e:	2201      	movs	r2, #1
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 fb86 	bl	800a894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009188:	e022      	b.n	80091d0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 fb04 	bl	800a79a <USBD_CtlError>
            ret = USBD_FAIL;
 8009192:	2303      	movs	r3, #3
 8009194:	75fb      	strb	r3, [r7, #23]
          break;
 8009196:	e01b      	b.n	80091d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d106      	bne.n	80091b2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	885b      	ldrh	r3, [r3, #2]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	461a      	mov	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091b0:	e00e      	b.n	80091d0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 faf0 	bl	800a79a <USBD_CtlError>
            ret = USBD_FAIL;
 80091ba:	2303      	movs	r3, #3
 80091bc:	75fb      	strb	r3, [r7, #23]
          break;
 80091be:	e007      	b.n	80091d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fae9 	bl	800a79a <USBD_CtlError>
          ret = USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	75fb      	strb	r3, [r7, #23]
          break;
 80091cc:	e000      	b.n	80091d0 <USBD_HID_Setup+0x1ec>
          break;
 80091ce:	bf00      	nop
      }
      break;
 80091d0:	e006      	b.n	80091e0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 fae0 	bl	800a79a <USBD_CtlError>
      ret = USBD_FAIL;
 80091da:	2303      	movs	r3, #3
 80091dc:	75fb      	strb	r3, [r7, #23]
      break;
 80091de:	bf00      	nop
  }

  return (uint8_t)ret;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	24000234 	.word	0x24000234
 80091f0:	2400021c 	.word	0x2400021c

080091f4 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	32b0      	adds	r2, #176	@ 0xb0
 800920c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009210:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009218:	2303      	movs	r3, #3
 800921a:	e014      	b.n	8009246 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b03      	cmp	r3, #3
 8009226:	d10d      	bne.n	8009244 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	7b1b      	ldrb	r3, [r3, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d109      	bne.n	8009244 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2201      	movs	r2, #1
 8009234:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8009236:	4b06      	ldr	r3, [pc, #24]	@ (8009250 <USBD_HID_SendReport+0x5c>)
 8009238:	7819      	ldrb	r1, [r3, #0]
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f001 ffc1 	bl	800b1c6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	24000273 	.word	0x24000273

08009254 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800925c:	2181      	movs	r1, #129	@ 0x81
 800925e:	4809      	ldr	r0, [pc, #36]	@ (8009284 <USBD_HID_GetFSCfgDesc+0x30>)
 8009260:	f000 fc3b 	bl	8009ada <USBD_GetEpDesc>
 8009264:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	220a      	movs	r2, #10
 8009270:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2222      	movs	r2, #34	@ 0x22
 8009276:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009278:	4b02      	ldr	r3, [pc, #8]	@ (8009284 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	240001f8 	.word	0x240001f8

08009288 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009290:	2181      	movs	r1, #129	@ 0x81
 8009292:	4809      	ldr	r0, [pc, #36]	@ (80092b8 <USBD_HID_GetHSCfgDesc+0x30>)
 8009294:	f000 fc21 	bl	8009ada <USBD_GetEpDesc>
 8009298:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2207      	movs	r2, #7
 80092a4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2222      	movs	r2, #34	@ 0x22
 80092aa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80092ac:	4b02      	ldr	r3, [pc, #8]	@ (80092b8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	240001f8 	.word	0x240001f8

080092bc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80092c4:	2181      	movs	r1, #129	@ 0x81
 80092c6:	4809      	ldr	r0, [pc, #36]	@ (80092ec <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80092c8:	f000 fc07 	bl	8009ada <USBD_GetEpDesc>
 80092cc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	220a      	movs	r2, #10
 80092d8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2222      	movs	r2, #34	@ 0x22
 80092de:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80092e0:	4b02      	ldr	r3, [pc, #8]	@ (80092ec <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	240001f8 	.word	0x240001f8

080092f0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	32b0      	adds	r2, #176	@ 0xb0
 8009306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930a:	2200      	movs	r2, #0
 800930c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	220a      	movs	r2, #10
 8009328:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800932a:	4b03      	ldr	r3, [pc, #12]	@ (8009338 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800932c:	4618      	mov	r0, r3
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	24000228 	.word	0x24000228

0800933c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	4613      	mov	r3, r2
 8009348:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009350:	2303      	movs	r3, #3
 8009352:	e01f      	b.n	8009394 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	79fa      	ldrb	r2, [r7, #7]
 8009386:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f001 fde1 	bl	800af50 <USBD_LL_Init>
 800938e:	4603      	mov	r3, r0
 8009390:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009392:	7dfb      	ldrb	r3, [r7, #23]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e025      	b.n	8009400 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	32ae      	adds	r2, #174	@ 0xae
 80093c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00f      	beq.n	80093f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	32ae      	adds	r2, #174	@ 0xae
 80093da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e0:	f107 020e 	add.w	r2, r7, #14
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	4602      	mov	r2, r0
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f001 fdef 	bl	800aff4 <USBD_LL_Start>
 8009416:	4603      	mov	r3, r0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009428:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800942a:	4618      	mov	r0, r3
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	460b      	mov	r3, r1
 8009440:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800944c:	2b00      	cmp	r3, #0
 800944e:	d009      	beq.n	8009464 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	4611      	mov	r1, r2
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	4611      	mov	r1, r2
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	4798      	blx	r3
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009494:	2303      	movs	r3, #3
 8009496:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 f936 	bl	800a726 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80094c8:	461a      	mov	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094d6:	f003 031f 	and.w	r3, r3, #31
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d01a      	beq.n	8009514 <USBD_LL_SetupStage+0x72>
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d822      	bhi.n	8009528 <USBD_LL_SetupStage+0x86>
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <USBD_LL_SetupStage+0x4a>
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d00a      	beq.n	8009500 <USBD_LL_SetupStage+0x5e>
 80094ea:	e01d      	b.n	8009528 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fb63 	bl	8009bc0 <USBD_StdDevReq>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]
      break;
 80094fe:	e020      	b.n	8009542 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fbcb 	bl	8009ca4 <USBD_StdItfReq>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]
      break;
 8009512:	e016      	b.n	8009542 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fc2d 	bl	8009d7c <USBD_StdEPReq>
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]
      break;
 8009526:	e00c      	b.n	8009542 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800952e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009532:	b2db      	uxtb	r3, r3
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 fdbc 	bl	800b0b4 <USBD_LL_StallEP>
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]
      break;
 8009540:	bf00      	nop
  }

  return ret;
 8009542:	7bfb      	ldrb	r3, [r7, #15]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	460b      	mov	r3, r1
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800955e:	7afb      	ldrb	r3, [r7, #11]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d16e      	bne.n	8009642 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800956a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009572:	2b03      	cmp	r3, #3
 8009574:	f040 8098 	bne.w	80096a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	429a      	cmp	r2, r3
 8009582:	d913      	bls.n	80095ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	1ad2      	subs	r2, r2, r3
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	4293      	cmp	r3, r2
 800959c:	bf28      	it	cs
 800959e:	4613      	movcs	r3, r2
 80095a0:	461a      	mov	r2, r3
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f001 f9a1 	bl	800a8ec <USBD_CtlContinueRx>
 80095aa:	e07d      	b.n	80096a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d014      	beq.n	80095e4 <USBD_LL_DataOutStage+0x98>
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d81d      	bhi.n	80095fa <USBD_LL_DataOutStage+0xae>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <USBD_LL_DataOutStage+0x7c>
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d003      	beq.n	80095ce <USBD_LL_DataOutStage+0x82>
 80095c6:	e018      	b.n	80095fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	75bb      	strb	r3, [r7, #22]
            break;
 80095cc:	e018      	b.n	8009600 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	4619      	mov	r1, r3
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 fa64 	bl	8009aa6 <USBD_CoreFindIF>
 80095de:	4603      	mov	r3, r0
 80095e0:	75bb      	strb	r3, [r7, #22]
            break;
 80095e2:	e00d      	b.n	8009600 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	4619      	mov	r1, r3
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 fa66 	bl	8009ac0 <USBD_CoreFindEP>
 80095f4:	4603      	mov	r3, r0
 80095f6:	75bb      	strb	r3, [r7, #22]
            break;
 80095f8:	e002      	b.n	8009600 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	75bb      	strb	r3, [r7, #22]
            break;
 80095fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009600:	7dbb      	ldrb	r3, [r7, #22]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d119      	bne.n	800963a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b03      	cmp	r3, #3
 8009610:	d113      	bne.n	800963a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009612:	7dba      	ldrb	r2, [r7, #22]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	32ae      	adds	r2, #174	@ 0xae
 8009618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00b      	beq.n	800963a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009622:	7dba      	ldrb	r2, [r7, #22]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800962a:	7dba      	ldrb	r2, [r7, #22]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	32ae      	adds	r2, #174	@ 0xae
 8009630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f001 f967 	bl	800a90e <USBD_CtlSendStatus>
 8009640:	e032      	b.n	80096a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009642:	7afb      	ldrb	r3, [r7, #11]
 8009644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009648:	b2db      	uxtb	r3, r3
 800964a:	4619      	mov	r1, r3
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 fa37 	bl	8009ac0 <USBD_CoreFindEP>
 8009652:	4603      	mov	r3, r0
 8009654:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009656:	7dbb      	ldrb	r3, [r7, #22]
 8009658:	2bff      	cmp	r3, #255	@ 0xff
 800965a:	d025      	beq.n	80096a8 <USBD_LL_DataOutStage+0x15c>
 800965c:	7dbb      	ldrb	r3, [r7, #22]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d122      	bne.n	80096a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b03      	cmp	r3, #3
 800966c:	d117      	bne.n	800969e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800966e:	7dba      	ldrb	r2, [r7, #22]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	32ae      	adds	r2, #174	@ 0xae
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00f      	beq.n	800969e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800967e:	7dba      	ldrb	r2, [r7, #22]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009686:	7dba      	ldrb	r2, [r7, #22]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	32ae      	adds	r2, #174	@ 0xae
 800968c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	7afa      	ldrb	r2, [r7, #11]
 8009694:	4611      	mov	r1, r2
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	4798      	blx	r3
 800969a:	4603      	mov	r3, r0
 800969c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80096a4:	7dfb      	ldrb	r3, [r7, #23]
 80096a6:	e000      	b.n	80096aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b086      	sub	sp, #24
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	460b      	mov	r3, r1
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80096c0:	7afb      	ldrb	r3, [r7, #11]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d16f      	bne.n	80097a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3314      	adds	r3, #20
 80096ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d15a      	bne.n	800978c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	689a      	ldr	r2, [r3, #8]
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d914      	bls.n	800970c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	689a      	ldr	r2, [r3, #8]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	1ad2      	subs	r2, r2, r3
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	461a      	mov	r2, r3
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f001 f8e6 	bl	800a8ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096fe:	2300      	movs	r3, #0
 8009700:	2200      	movs	r2, #0
 8009702:	2100      	movs	r1, #0
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f001 fd7f 	bl	800b208 <USBD_LL_PrepareReceive>
 800970a:	e03f      	b.n	800978c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	68da      	ldr	r2, [r3, #12]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	429a      	cmp	r2, r3
 8009716:	d11c      	bne.n	8009752 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009720:	429a      	cmp	r2, r3
 8009722:	d316      	bcc.n	8009752 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800972e:	429a      	cmp	r2, r3
 8009730:	d20f      	bcs.n	8009752 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009732:	2200      	movs	r2, #0
 8009734:	2100      	movs	r1, #0
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f001 f8c7 	bl	800a8ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009744:	2300      	movs	r3, #0
 8009746:	2200      	movs	r2, #0
 8009748:	2100      	movs	r1, #0
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f001 fd5c 	bl	800b208 <USBD_LL_PrepareReceive>
 8009750:	e01c      	b.n	800978c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b03      	cmp	r3, #3
 800975c:	d10f      	bne.n	800977e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d009      	beq.n	800977e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800977e:	2180      	movs	r1, #128	@ 0x80
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f001 fc97 	bl	800b0b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f001 f8d4 	bl	800a934 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d03a      	beq.n	800980c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f7ff fe42 	bl	8009420 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80097a4:	e032      	b.n	800980c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	4619      	mov	r1, r3
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f985 	bl	8009ac0 <USBD_CoreFindEP>
 80097b6:	4603      	mov	r3, r0
 80097b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
 80097bc:	2bff      	cmp	r3, #255	@ 0xff
 80097be:	d025      	beq.n	800980c <USBD_LL_DataInStage+0x15a>
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d122      	bne.n	800980c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d11c      	bne.n	800980c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80097d2:	7dfa      	ldrb	r2, [r7, #23]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	32ae      	adds	r2, #174	@ 0xae
 80097d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d014      	beq.n	800980c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80097e2:	7dfa      	ldrb	r2, [r7, #23]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80097ea:	7dfa      	ldrb	r2, [r7, #23]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	32ae      	adds	r2, #174	@ 0xae
 80097f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	7afa      	ldrb	r2, [r7, #11]
 80097f8:	4611      	mov	r1, r2
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	4798      	blx	r3
 80097fe:	4603      	mov	r3, r0
 8009800:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009802:	7dbb      	ldrb	r3, [r7, #22]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009808:	7dbb      	ldrb	r3, [r7, #22]
 800980a:	e000      	b.n	800980e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800984e:	2b00      	cmp	r3, #0
 8009850:	d014      	beq.n	800987c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00e      	beq.n	800987c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	6852      	ldr	r2, [r2, #4]
 800986a:	b2d2      	uxtb	r2, r2
 800986c:	4611      	mov	r1, r2
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	4798      	blx	r3
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009878:	2303      	movs	r3, #3
 800987a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800987c:	2340      	movs	r3, #64	@ 0x40
 800987e:	2200      	movs	r2, #0
 8009880:	2100      	movs	r1, #0
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f001 fbd1 	bl	800b02a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2240      	movs	r2, #64	@ 0x40
 8009894:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009898:	2340      	movs	r3, #64	@ 0x40
 800989a:	2200      	movs	r2, #0
 800989c:	2180      	movs	r1, #128	@ 0x80
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f001 fbc3 	bl	800b02a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2240      	movs	r2, #64	@ 0x40
 80098ae:	621a      	str	r2, [r3, #32]

  return ret;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	460b      	mov	r3, r1
 80098c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098da:	b480      	push	{r7}
 80098dc:	b083      	sub	sp, #12
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d006      	beq.n	80098fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2204      	movs	r2, #4
 8009900:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b04      	cmp	r3, #4
 8009924:	d106      	bne.n	8009934 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b03      	cmp	r3, #3
 8009954:	d110      	bne.n	8009978 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	460b      	mov	r3, r1
 800998c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	32ae      	adds	r2, #174	@ 0xae
 8009998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e01c      	b.n	80099de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d115      	bne.n	80099dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	32ae      	adds	r2, #174	@ 0xae
 80099ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00b      	beq.n	80099dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	32ae      	adds	r2, #174	@ 0xae
 80099ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d2:	6a1b      	ldr	r3, [r3, #32]
 80099d4:	78fa      	ldrb	r2, [r7, #3]
 80099d6:	4611      	mov	r1, r2
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	32ae      	adds	r2, #174	@ 0xae
 80099fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e01c      	b.n	8009a42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d115      	bne.n	8009a40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	32ae      	adds	r2, #174	@ 0xae
 8009a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	32ae      	adds	r2, #174	@ 0xae
 8009a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a38:	78fa      	ldrb	r2, [r7, #3]
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00e      	beq.n	8009a9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	6852      	ldr	r2, [r2, #4]
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	4798      	blx	r3
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ab2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009acc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b086      	sub	sp, #24
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	885b      	ldrh	r3, [r3, #2]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	7812      	ldrb	r2, [r2, #0]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d91f      	bls.n	8009b40 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009b06:	e013      	b.n	8009b30 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009b08:	f107 030a 	add.w	r3, r7, #10
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6978      	ldr	r0, [r7, #20]
 8009b10:	f000 f81b 	bl	8009b4a <USBD_GetNextDesc>
 8009b14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	d108      	bne.n	8009b30 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	789b      	ldrb	r3, [r3, #2]
 8009b26:	78fa      	ldrb	r2, [r7, #3]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d008      	beq.n	8009b3e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	885b      	ldrh	r3, [r3, #2]
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	897b      	ldrh	r3, [r7, #10]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d8e5      	bhi.n	8009b08 <USBD_GetEpDesc+0x2e>
 8009b3c:	e000      	b.n	8009b40 <USBD_GetEpDesc+0x66>
          break;
 8009b3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009b40:	693b      	ldr	r3, [r7, #16]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b085      	sub	sp, #20
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	7812      	ldrb	r2, [r2, #0]
 8009b60:	4413      	add	r3, r2
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4413      	add	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b74:	68fb      	ldr	r3, [r7, #12]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b087      	sub	sp, #28
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	3301      	adds	r3, #1
 8009b98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ba0:	8a3b      	ldrh	r3, [r7, #16]
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	b21a      	sxth	r2, r3
 8009ba6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	b21b      	sxth	r3, r3
 8009bae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009bb0:	89fb      	ldrh	r3, [r7, #14]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	371c      	adds	r7, #28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
	...

08009bc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bd6:	2b40      	cmp	r3, #64	@ 0x40
 8009bd8:	d005      	beq.n	8009be6 <USBD_StdDevReq+0x26>
 8009bda:	2b40      	cmp	r3, #64	@ 0x40
 8009bdc:	d857      	bhi.n	8009c8e <USBD_StdDevReq+0xce>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00f      	beq.n	8009c02 <USBD_StdDevReq+0x42>
 8009be2:	2b20      	cmp	r3, #32
 8009be4:	d153      	bne.n	8009c8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	32ae      	adds	r2, #174	@ 0xae
 8009bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	4798      	blx	r3
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8009c00:	e04a      	b.n	8009c98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	785b      	ldrb	r3, [r3, #1]
 8009c06:	2b09      	cmp	r3, #9
 8009c08:	d83b      	bhi.n	8009c82 <USBD_StdDevReq+0xc2>
 8009c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c10 <USBD_StdDevReq+0x50>)
 8009c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009c79 	.word	0x08009c79
 8009c18:	08009c83 	.word	0x08009c83
 8009c1c:	08009c6f 	.word	0x08009c6f
 8009c20:	08009c83 	.word	0x08009c83
 8009c24:	08009c43 	.word	0x08009c43
 8009c28:	08009c39 	.word	0x08009c39
 8009c2c:	08009c83 	.word	0x08009c83
 8009c30:	08009c5b 	.word	0x08009c5b
 8009c34:	08009c4d 	.word	0x08009c4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fa3c 	bl	800a0b8 <USBD_GetDescriptor>
          break;
 8009c40:	e024      	b.n	8009c8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fbcb 	bl	800a3e0 <USBD_SetAddress>
          break;
 8009c4a:	e01f      	b.n	8009c8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fc0a 	bl	800a468 <USBD_SetConfig>
 8009c54:	4603      	mov	r3, r0
 8009c56:	73fb      	strb	r3, [r7, #15]
          break;
 8009c58:	e018      	b.n	8009c8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fcad 	bl	800a5bc <USBD_GetConfig>
          break;
 8009c62:	e013      	b.n	8009c8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fcde 	bl	800a628 <USBD_GetStatus>
          break;
 8009c6c:	e00e      	b.n	8009c8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fd0d 	bl	800a690 <USBD_SetFeature>
          break;
 8009c76:	e009      	b.n	8009c8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fd31 	bl	800a6e2 <USBD_ClrFeature>
          break;
 8009c80:	e004      	b.n	8009c8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fd88 	bl	800a79a <USBD_CtlError>
          break;
 8009c8a:	bf00      	nop
      }
      break;
 8009c8c:	e004      	b.n	8009c98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fd82 	bl	800a79a <USBD_CtlError>
      break;
 8009c96:	bf00      	nop
  }

  return ret;
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop

08009ca4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cba:	2b40      	cmp	r3, #64	@ 0x40
 8009cbc:	d005      	beq.n	8009cca <USBD_StdItfReq+0x26>
 8009cbe:	2b40      	cmp	r3, #64	@ 0x40
 8009cc0:	d852      	bhi.n	8009d68 <USBD_StdItfReq+0xc4>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <USBD_StdItfReq+0x26>
 8009cc6:	2b20      	cmp	r3, #32
 8009cc8:	d14e      	bne.n	8009d68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d840      	bhi.n	8009d5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	889b      	ldrh	r3, [r3, #4]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d836      	bhi.n	8009d50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	889b      	ldrh	r3, [r3, #4]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff fedb 	bl	8009aa6 <USBD_CoreFindIF>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	2bff      	cmp	r3, #255	@ 0xff
 8009cf8:	d01d      	beq.n	8009d36 <USBD_StdItfReq+0x92>
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d11a      	bne.n	8009d36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009d00:	7bba      	ldrb	r2, [r7, #14]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	32ae      	adds	r2, #174	@ 0xae
 8009d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00f      	beq.n	8009d30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009d10:	7bba      	ldrb	r2, [r7, #14]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d18:	7bba      	ldrb	r2, [r7, #14]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	32ae      	adds	r2, #174	@ 0xae
 8009d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	4798      	blx	r3
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d2e:	e004      	b.n	8009d3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009d30:	2303      	movs	r3, #3
 8009d32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d34:	e001      	b.n	8009d3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009d36:	2303      	movs	r3, #3
 8009d38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	88db      	ldrh	r3, [r3, #6]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d110      	bne.n	8009d64 <USBD_StdItfReq+0xc0>
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10d      	bne.n	8009d64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fde0 	bl	800a90e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d4e:	e009      	b.n	8009d64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fd21 	bl	800a79a <USBD_CtlError>
          break;
 8009d58:	e004      	b.n	8009d64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fd1c 	bl	800a79a <USBD_CtlError>
          break;
 8009d62:	e000      	b.n	8009d66 <USBD_StdItfReq+0xc2>
          break;
 8009d64:	bf00      	nop
      }
      break;
 8009d66:	e004      	b.n	8009d72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fd15 	bl	800a79a <USBD_CtlError>
      break;
 8009d70:	bf00      	nop
  }

  return ret;
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	889b      	ldrh	r3, [r3, #4]
 8009d8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d98:	2b40      	cmp	r3, #64	@ 0x40
 8009d9a:	d007      	beq.n	8009dac <USBD_StdEPReq+0x30>
 8009d9c:	2b40      	cmp	r3, #64	@ 0x40
 8009d9e:	f200 817f 	bhi.w	800a0a0 <USBD_StdEPReq+0x324>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d02a      	beq.n	8009dfc <USBD_StdEPReq+0x80>
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	f040 817a 	bne.w	800a0a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff fe85 	bl	8009ac0 <USBD_CoreFindEP>
 8009db6:	4603      	mov	r3, r0
 8009db8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dba:	7b7b      	ldrb	r3, [r7, #13]
 8009dbc:	2bff      	cmp	r3, #255	@ 0xff
 8009dbe:	f000 8174 	beq.w	800a0aa <USBD_StdEPReq+0x32e>
 8009dc2:	7b7b      	ldrb	r3, [r7, #13]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f040 8170 	bne.w	800a0aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009dca:	7b7a      	ldrb	r2, [r7, #13]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009dd2:	7b7a      	ldrb	r2, [r7, #13]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	32ae      	adds	r2, #174	@ 0xae
 8009dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 8163 	beq.w	800a0aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009de4:	7b7a      	ldrb	r2, [r7, #13]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	32ae      	adds	r2, #174	@ 0xae
 8009dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
 8009df6:	4603      	mov	r3, r0
 8009df8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009dfa:	e156      	b.n	800a0aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	785b      	ldrb	r3, [r3, #1]
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d008      	beq.n	8009e16 <USBD_StdEPReq+0x9a>
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	f300 8145 	bgt.w	800a094 <USBD_StdEPReq+0x318>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f000 809b 	beq.w	8009f46 <USBD_StdEPReq+0x1ca>
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d03c      	beq.n	8009e8e <USBD_StdEPReq+0x112>
 8009e14:	e13e      	b.n	800a094 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d002      	beq.n	8009e28 <USBD_StdEPReq+0xac>
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d016      	beq.n	8009e54 <USBD_StdEPReq+0xd8>
 8009e26:	e02c      	b.n	8009e82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00d      	beq.n	8009e4a <USBD_StdEPReq+0xce>
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	2b80      	cmp	r3, #128	@ 0x80
 8009e32:	d00a      	beq.n	8009e4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f001 f93b 	bl	800b0b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e3e:	2180      	movs	r1, #128	@ 0x80
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 f937 	bl	800b0b4 <USBD_LL_StallEP>
 8009e46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e48:	e020      	b.n	8009e8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fca4 	bl	800a79a <USBD_CtlError>
              break;
 8009e52:	e01b      	b.n	8009e8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	885b      	ldrh	r3, [r3, #2]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10e      	bne.n	8009e7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <USBD_StdEPReq+0xfe>
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	2b80      	cmp	r3, #128	@ 0x80
 8009e66:	d008      	beq.n	8009e7a <USBD_StdEPReq+0xfe>
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	88db      	ldrh	r3, [r3, #6]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d104      	bne.n	8009e7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 f91d 	bl	800b0b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fd47 	bl	800a90e <USBD_CtlSendStatus>

              break;
 8009e80:	e004      	b.n	8009e8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fc88 	bl	800a79a <USBD_CtlError>
              break;
 8009e8a:	bf00      	nop
          }
          break;
 8009e8c:	e107      	b.n	800a09e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d002      	beq.n	8009ea0 <USBD_StdEPReq+0x124>
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d016      	beq.n	8009ecc <USBD_StdEPReq+0x150>
 8009e9e:	e04b      	b.n	8009f38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00d      	beq.n	8009ec2 <USBD_StdEPReq+0x146>
 8009ea6:	7bbb      	ldrb	r3, [r7, #14]
 8009ea8:	2b80      	cmp	r3, #128	@ 0x80
 8009eaa:	d00a      	beq.n	8009ec2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 f8ff 	bl	800b0b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eb6:	2180      	movs	r1, #128	@ 0x80
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 f8fb 	bl	800b0b4 <USBD_LL_StallEP>
 8009ebe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ec0:	e040      	b.n	8009f44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fc68 	bl	800a79a <USBD_CtlError>
              break;
 8009eca:	e03b      	b.n	8009f44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	885b      	ldrh	r3, [r3, #2]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d136      	bne.n	8009f42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 f905 	bl	800b0f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fd10 	bl	800a90e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff fde4 	bl	8009ac0 <USBD_CoreFindEP>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009efc:	7b7b      	ldrb	r3, [r7, #13]
 8009efe:	2bff      	cmp	r3, #255	@ 0xff
 8009f00:	d01f      	beq.n	8009f42 <USBD_StdEPReq+0x1c6>
 8009f02:	7b7b      	ldrb	r3, [r7, #13]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d11c      	bne.n	8009f42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009f08:	7b7a      	ldrb	r2, [r7, #13]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009f10:	7b7a      	ldrb	r2, [r7, #13]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	32ae      	adds	r2, #174	@ 0xae
 8009f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d010      	beq.n	8009f42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f20:	7b7a      	ldrb	r2, [r7, #13]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	32ae      	adds	r2, #174	@ 0xae
 8009f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	4798      	blx	r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009f36:	e004      	b.n	8009f42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fc2d 	bl	800a79a <USBD_CtlError>
              break;
 8009f40:	e000      	b.n	8009f44 <USBD_StdEPReq+0x1c8>
              break;
 8009f42:	bf00      	nop
          }
          break;
 8009f44:	e0ab      	b.n	800a09e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d002      	beq.n	8009f58 <USBD_StdEPReq+0x1dc>
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d032      	beq.n	8009fbc <USBD_StdEPReq+0x240>
 8009f56:	e097      	b.n	800a088 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d007      	beq.n	8009f6e <USBD_StdEPReq+0x1f2>
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	2b80      	cmp	r3, #128	@ 0x80
 8009f62:	d004      	beq.n	8009f6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fc17 	bl	800a79a <USBD_CtlError>
                break;
 8009f6c:	e091      	b.n	800a092 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	da0b      	bge.n	8009f8e <USBD_StdEPReq+0x212>
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	3310      	adds	r3, #16
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4413      	add	r3, r2
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	e00b      	b.n	8009fa6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f8e:	7bbb      	ldrb	r3, [r7, #14]
 8009f90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f94:	4613      	mov	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fc6d 	bl	800a894 <USBD_CtlSendData>
              break;
 8009fba:	e06a      	b.n	800a092 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	da11      	bge.n	8009fe8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
 8009fc6:	f003 020f 	and.w	r2, r3, #15
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	3324      	adds	r3, #36	@ 0x24
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d117      	bne.n	800a00e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fbda 	bl	800a79a <USBD_CtlError>
                  break;
 8009fe6:	e054      	b.n	800a092 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	f003 020f 	and.w	r2, r3, #15
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d104      	bne.n	800a00e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fbc7 	bl	800a79a <USBD_CtlError>
                  break;
 800a00c:	e041      	b.n	800a092 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a00e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a012:	2b00      	cmp	r3, #0
 800a014:	da0b      	bge.n	800a02e <USBD_StdEPReq+0x2b2>
 800a016:	7bbb      	ldrb	r3, [r7, #14]
 800a018:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a01c:	4613      	mov	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	3310      	adds	r3, #16
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	4413      	add	r3, r2
 800a02a:	3304      	adds	r3, #4
 800a02c:	e00b      	b.n	800a046 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
 800a030:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	4413      	add	r3, r2
 800a044:	3304      	adds	r3, #4
 800a046:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <USBD_StdEPReq+0x2d8>
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
 800a050:	2b80      	cmp	r3, #128	@ 0x80
 800a052:	d103      	bne.n	800a05c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	e00e      	b.n	800a07a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 f865 	bl	800b130 <USBD_LL_IsStallEP>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2201      	movs	r2, #1
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	e002      	b.n	800a07a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2200      	movs	r2, #0
 800a078:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2202      	movs	r2, #2
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fc07 	bl	800a894 <USBD_CtlSendData>
              break;
 800a086:	e004      	b.n	800a092 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fb85 	bl	800a79a <USBD_CtlError>
              break;
 800a090:	bf00      	nop
          }
          break;
 800a092:	e004      	b.n	800a09e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fb7f 	bl	800a79a <USBD_CtlError>
          break;
 800a09c:	bf00      	nop
      }
      break;
 800a09e:	e005      	b.n	800a0ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fb79 	bl	800a79a <USBD_CtlError>
      break;
 800a0a8:	e000      	b.n	800a0ac <USBD_StdEPReq+0x330>
      break;
 800a0aa:	bf00      	nop
  }

  return ret;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
	...

0800a0b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	885b      	ldrh	r3, [r3, #2]
 800a0d2:	0a1b      	lsrs	r3, r3, #8
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	2b0e      	cmp	r3, #14
 800a0da:	f200 8152 	bhi.w	800a382 <USBD_GetDescriptor+0x2ca>
 800a0de:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <USBD_GetDescriptor+0x2c>)
 800a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e4:	0800a155 	.word	0x0800a155
 800a0e8:	0800a16d 	.word	0x0800a16d
 800a0ec:	0800a1ad 	.word	0x0800a1ad
 800a0f0:	0800a383 	.word	0x0800a383
 800a0f4:	0800a383 	.word	0x0800a383
 800a0f8:	0800a323 	.word	0x0800a323
 800a0fc:	0800a34f 	.word	0x0800a34f
 800a100:	0800a383 	.word	0x0800a383
 800a104:	0800a383 	.word	0x0800a383
 800a108:	0800a383 	.word	0x0800a383
 800a10c:	0800a383 	.word	0x0800a383
 800a110:	0800a383 	.word	0x0800a383
 800a114:	0800a383 	.word	0x0800a383
 800a118:	0800a383 	.word	0x0800a383
 800a11c:	0800a121 	.word	0x0800a121
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00b      	beq.n	800a144 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	7c12      	ldrb	r2, [r2, #16]
 800a138:	f107 0108 	add.w	r1, r7, #8
 800a13c:	4610      	mov	r0, r2
 800a13e:	4798      	blx	r3
 800a140:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a142:	e126      	b.n	800a392 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fb27 	bl	800a79a <USBD_CtlError>
        err++;
 800a14c:	7afb      	ldrb	r3, [r7, #11]
 800a14e:	3301      	adds	r3, #1
 800a150:	72fb      	strb	r3, [r7, #11]
      break;
 800a152:	e11e      	b.n	800a392 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	7c12      	ldrb	r2, [r2, #16]
 800a160:	f107 0108 	add.w	r1, r7, #8
 800a164:	4610      	mov	r0, r2
 800a166:	4798      	blx	r3
 800a168:	60f8      	str	r0, [r7, #12]
      break;
 800a16a:	e112      	b.n	800a392 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	7c1b      	ldrb	r3, [r3, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10d      	bne.n	800a190 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17c:	f107 0208 	add.w	r2, r7, #8
 800a180:	4610      	mov	r0, r2
 800a182:	4798      	blx	r3
 800a184:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	2202      	movs	r2, #2
 800a18c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a18e:	e100      	b.n	800a392 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a198:	f107 0208 	add.w	r2, r7, #8
 800a19c:	4610      	mov	r0, r2
 800a19e:	4798      	blx	r3
 800a1a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	701a      	strb	r2, [r3, #0]
      break;
 800a1aa:	e0f2      	b.n	800a392 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	885b      	ldrh	r3, [r3, #2]
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b05      	cmp	r3, #5
 800a1b4:	f200 80ac 	bhi.w	800a310 <USBD_GetDescriptor+0x258>
 800a1b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c0 <USBD_GetDescriptor+0x108>)
 800a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1be:	bf00      	nop
 800a1c0:	0800a1d9 	.word	0x0800a1d9
 800a1c4:	0800a20d 	.word	0x0800a20d
 800a1c8:	0800a241 	.word	0x0800a241
 800a1cc:	0800a275 	.word	0x0800a275
 800a1d0:	0800a2a9 	.word	0x0800a2a9
 800a1d4:	0800a2dd 	.word	0x0800a2dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	7c12      	ldrb	r2, [r2, #16]
 800a1f0:	f107 0108 	add.w	r1, r7, #8
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4798      	blx	r3
 800a1f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1fa:	e091      	b.n	800a320 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 facb 	bl	800a79a <USBD_CtlError>
            err++;
 800a204:	7afb      	ldrb	r3, [r7, #11]
 800a206:	3301      	adds	r3, #1
 800a208:	72fb      	strb	r3, [r7, #11]
          break;
 800a20a:	e089      	b.n	800a320 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00b      	beq.n	800a230 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	7c12      	ldrb	r2, [r2, #16]
 800a224:	f107 0108 	add.w	r1, r7, #8
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3
 800a22c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a22e:	e077      	b.n	800a320 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fab1 	bl	800a79a <USBD_CtlError>
            err++;
 800a238:	7afb      	ldrb	r3, [r7, #11]
 800a23a:	3301      	adds	r3, #1
 800a23c:	72fb      	strb	r3, [r7, #11]
          break;
 800a23e:	e06f      	b.n	800a320 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00b      	beq.n	800a264 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	7c12      	ldrb	r2, [r2, #16]
 800a258:	f107 0108 	add.w	r1, r7, #8
 800a25c:	4610      	mov	r0, r2
 800a25e:	4798      	blx	r3
 800a260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a262:	e05d      	b.n	800a320 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fa97 	bl	800a79a <USBD_CtlError>
            err++;
 800a26c:	7afb      	ldrb	r3, [r7, #11]
 800a26e:	3301      	adds	r3, #1
 800a270:	72fb      	strb	r3, [r7, #11]
          break;
 800a272:	e055      	b.n	800a320 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00b      	beq.n	800a298 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	7c12      	ldrb	r2, [r2, #16]
 800a28c:	f107 0108 	add.w	r1, r7, #8
 800a290:	4610      	mov	r0, r2
 800a292:	4798      	blx	r3
 800a294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a296:	e043      	b.n	800a320 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa7d 	bl	800a79a <USBD_CtlError>
            err++;
 800a2a0:	7afb      	ldrb	r3, [r7, #11]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2a6:	e03b      	b.n	800a320 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ae:	695b      	ldr	r3, [r3, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00b      	beq.n	800a2cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	7c12      	ldrb	r2, [r2, #16]
 800a2c0:	f107 0108 	add.w	r1, r7, #8
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4798      	blx	r3
 800a2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ca:	e029      	b.n	800a320 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fa63 	bl	800a79a <USBD_CtlError>
            err++;
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2da:	e021      	b.n	800a320 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	7c12      	ldrb	r2, [r2, #16]
 800a2f4:	f107 0108 	add.w	r1, r7, #8
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	4798      	blx	r3
 800a2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2fe:	e00f      	b.n	800a320 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fa49 	bl	800a79a <USBD_CtlError>
            err++;
 800a308:	7afb      	ldrb	r3, [r7, #11]
 800a30a:	3301      	adds	r3, #1
 800a30c:	72fb      	strb	r3, [r7, #11]
          break;
 800a30e:	e007      	b.n	800a320 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa41 	bl	800a79a <USBD_CtlError>
          err++;
 800a318:	7afb      	ldrb	r3, [r7, #11]
 800a31a:	3301      	adds	r3, #1
 800a31c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a31e:	bf00      	nop
      }
      break;
 800a320:	e037      	b.n	800a392 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	7c1b      	ldrb	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d109      	bne.n	800a33e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a332:	f107 0208 	add.w	r2, r7, #8
 800a336:	4610      	mov	r0, r2
 800a338:	4798      	blx	r3
 800a33a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a33c:	e029      	b.n	800a392 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fa2a 	bl	800a79a <USBD_CtlError>
        err++;
 800a346:	7afb      	ldrb	r3, [r7, #11]
 800a348:	3301      	adds	r3, #1
 800a34a:	72fb      	strb	r3, [r7, #11]
      break;
 800a34c:	e021      	b.n	800a392 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	7c1b      	ldrb	r3, [r3, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10d      	bne.n	800a372 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a35c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a35e:	f107 0208 	add.w	r2, r7, #8
 800a362:	4610      	mov	r0, r2
 800a364:	4798      	blx	r3
 800a366:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	2207      	movs	r2, #7
 800a36e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a370:	e00f      	b.n	800a392 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fa10 	bl	800a79a <USBD_CtlError>
        err++;
 800a37a:	7afb      	ldrb	r3, [r7, #11]
 800a37c:	3301      	adds	r3, #1
 800a37e:	72fb      	strb	r3, [r7, #11]
      break;
 800a380:	e007      	b.n	800a392 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fa08 	bl	800a79a <USBD_CtlError>
      err++;
 800a38a:	7afb      	ldrb	r3, [r7, #11]
 800a38c:	3301      	adds	r3, #1
 800a38e:	72fb      	strb	r3, [r7, #11]
      break;
 800a390:	bf00      	nop
  }

  if (err != 0U)
 800a392:	7afb      	ldrb	r3, [r7, #11]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d11e      	bne.n	800a3d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	88db      	ldrh	r3, [r3, #6]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d016      	beq.n	800a3ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a3a0:	893b      	ldrh	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00e      	beq.n	800a3c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	88da      	ldrh	r2, [r3, #6]
 800a3aa:	893b      	ldrh	r3, [r7, #8]
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	bf28      	it	cs
 800a3b0:	4613      	movcs	r3, r2
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3b6:	893b      	ldrh	r3, [r7, #8]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fa69 	bl	800a894 <USBD_CtlSendData>
 800a3c2:	e009      	b.n	800a3d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f9e7 	bl	800a79a <USBD_CtlError>
 800a3cc:	e004      	b.n	800a3d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fa9d 	bl	800a90e <USBD_CtlSendStatus>
 800a3d4:	e000      	b.n	800a3d8 <USBD_GetDescriptor+0x320>
    return;
 800a3d6:	bf00      	nop
  }
}
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop

0800a3e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	889b      	ldrh	r3, [r3, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d131      	bne.n	800a456 <USBD_SetAddress+0x76>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	88db      	ldrh	r3, [r3, #6]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d12d      	bne.n	800a456 <USBD_SetAddress+0x76>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	885b      	ldrh	r3, [r3, #2]
 800a3fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800a400:	d829      	bhi.n	800a456 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	885b      	ldrh	r3, [r3, #2]
 800a406:	b2db      	uxtb	r3, r3
 800a408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a40c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b03      	cmp	r3, #3
 800a418:	d104      	bne.n	800a424 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f9bc 	bl	800a79a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a422:	e01d      	b.n	800a460 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	7bfa      	ldrb	r2, [r7, #15]
 800a428:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fea9 	bl	800b188 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fa69 	bl	800a90e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d004      	beq.n	800a44c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2202      	movs	r2, #2
 800a446:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a44a:	e009      	b.n	800a460 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a454:	e004      	b.n	800a460 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f99e 	bl	800a79a <USBD_CtlError>
  }
}
 800a45e:	bf00      	nop
 800a460:	bf00      	nop
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	885b      	ldrh	r3, [r3, #2]
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	4b4e      	ldr	r3, [pc, #312]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a47e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a480:	4b4d      	ldr	r3, [pc, #308]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d905      	bls.n	800a494 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f985 	bl	800a79a <USBD_CtlError>
    return USBD_FAIL;
 800a490:	2303      	movs	r3, #3
 800a492:	e08c      	b.n	800a5ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d002      	beq.n	800a4a6 <USBD_SetConfig+0x3e>
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d029      	beq.n	800a4f8 <USBD_SetConfig+0x90>
 800a4a4:	e075      	b.n	800a592 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4a6:	4b44      	ldr	r3, [pc, #272]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d020      	beq.n	800a4f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a4ae:	4b42      	ldr	r3, [pc, #264]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4b8:	4b3f      	ldr	r3, [pc, #252]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fe ffb9 	bl	8009436 <USBD_SetClassConfig>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d008      	beq.n	800a4e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f962 	bl	800a79a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2202      	movs	r2, #2
 800a4da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4de:	e065      	b.n	800a5ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fa14 	bl	800a90e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2203      	movs	r2, #3
 800a4ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4ee:	e05d      	b.n	800a5ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fa0c 	bl	800a90e <USBD_CtlSendStatus>
      break;
 800a4f6:	e059      	b.n	800a5ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a4f8:	4b2f      	ldr	r3, [pc, #188]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d112      	bne.n	800a526 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2202      	movs	r2, #2
 800a504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a508:	4b2b      	ldr	r3, [pc, #172]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	461a      	mov	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a512:	4b29      	ldr	r3, [pc, #164]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7fe ffa8 	bl	800946e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f9f5 	bl	800a90e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a524:	e042      	b.n	800a5ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a526:	4b24      	ldr	r3, [pc, #144]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	429a      	cmp	r2, r3
 800a532:	d02a      	beq.n	800a58a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7fe ff96 	bl	800946e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a542:	4b1d      	ldr	r3, [pc, #116]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a54c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7fe ff6f 	bl	8009436 <USBD_SetClassConfig>
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00f      	beq.n	800a582 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f918 	bl	800a79a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7fe ff7b 	bl	800946e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2202      	movs	r2, #2
 800a57c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a580:	e014      	b.n	800a5ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f9c3 	bl	800a90e <USBD_CtlSendStatus>
      break;
 800a588:	e010      	b.n	800a5ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f9bf 	bl	800a90e <USBD_CtlSendStatus>
      break;
 800a590:	e00c      	b.n	800a5ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f900 	bl	800a79a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a59a:	4b07      	ldr	r3, [pc, #28]	@ (800a5b8 <USBD_SetConfig+0x150>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7fe ff64 	bl	800946e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5aa:	bf00      	nop
  }

  return ret;
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	240005a4 	.word	0x240005a4

0800a5bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	88db      	ldrh	r3, [r3, #6]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d004      	beq.n	800a5d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f8e2 	bl	800a79a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5d6:	e023      	b.n	800a620 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	dc02      	bgt.n	800a5ea <USBD_GetConfig+0x2e>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	dc03      	bgt.n	800a5f0 <USBD_GetConfig+0x34>
 800a5e8:	e015      	b.n	800a616 <USBD_GetConfig+0x5a>
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	d00b      	beq.n	800a606 <USBD_GetConfig+0x4a>
 800a5ee:	e012      	b.n	800a616 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	3308      	adds	r3, #8
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f948 	bl	800a894 <USBD_CtlSendData>
        break;
 800a604:	e00c      	b.n	800a620 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	3304      	adds	r3, #4
 800a60a:	2201      	movs	r2, #1
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f940 	bl	800a894 <USBD_CtlSendData>
        break;
 800a614:	e004      	b.n	800a620 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f8be 	bl	800a79a <USBD_CtlError>
        break;
 800a61e:	bf00      	nop
}
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	3b01      	subs	r3, #1
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d81e      	bhi.n	800a67e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	88db      	ldrh	r3, [r3, #6]
 800a644:	2b02      	cmp	r3, #2
 800a646:	d004      	beq.n	800a652 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f8a5 	bl	800a79a <USBD_CtlError>
        break;
 800a650:	e01a      	b.n	800a688 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d005      	beq.n	800a66e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f043 0202 	orr.w	r2, r3, #2
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	330c      	adds	r3, #12
 800a672:	2202      	movs	r2, #2
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f90c 	bl	800a894 <USBD_CtlSendData>
      break;
 800a67c:	e004      	b.n	800a688 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f88a 	bl	800a79a <USBD_CtlError>
      break;
 800a686:	bf00      	nop
  }
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	885b      	ldrh	r3, [r3, #2]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d107      	bne.n	800a6b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f92f 	bl	800a90e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a6b0:	e013      	b.n	800a6da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	885b      	ldrh	r3, [r3, #2]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d10b      	bne.n	800a6d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	889b      	ldrh	r3, [r3, #4]
 800a6be:	0a1b      	lsrs	r3, r3, #8
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f91f 	bl	800a90e <USBD_CtlSendStatus>
}
 800a6d0:	e003      	b.n	800a6da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f860 	bl	800a79a <USBD_CtlError>
}
 800a6da:	bf00      	nop
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d80b      	bhi.n	800a712 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	885b      	ldrh	r3, [r3, #2]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d10c      	bne.n	800a71c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f8ff 	bl	800a90e <USBD_CtlSendStatus>
      }
      break;
 800a710:	e004      	b.n	800a71c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f840 	bl	800a79a <USBD_CtlError>
      break;
 800a71a:	e000      	b.n	800a71e <USBD_ClrFeature+0x3c>
      break;
 800a71c:	bf00      	nop
  }
}
 800a71e:	bf00      	nop
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	781a      	ldrb	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3301      	adds	r3, #1
 800a740:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	781a      	ldrb	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	3301      	adds	r3, #1
 800a74e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f7ff fa16 	bl	8009b82 <SWAPBYTE>
 800a756:	4603      	mov	r3, r0
 800a758:	461a      	mov	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3301      	adds	r3, #1
 800a762:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3301      	adds	r3, #1
 800a768:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7ff fa09 	bl	8009b82 <SWAPBYTE>
 800a770:	4603      	mov	r3, r0
 800a772:	461a      	mov	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3301      	adds	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3301      	adds	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7ff f9fc 	bl	8009b82 <SWAPBYTE>
 800a78a:	4603      	mov	r3, r0
 800a78c:	461a      	mov	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	80da      	strh	r2, [r3, #6]
}
 800a792:	bf00      	nop
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7a4:	2180      	movs	r1, #128	@ 0x80
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fc84 	bl	800b0b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fc80 	bl	800b0b4 <USBD_LL_StallEP>
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d042      	beq.n	800a858 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a7d6:	6938      	ldr	r0, [r7, #16]
 800a7d8:	f000 f842 	bl	800a860 <USBD_GetLen>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	3301      	adds	r3, #1
 800a7e0:	005b      	lsls	r3, r3, #1
 800a7e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7e6:	d808      	bhi.n	800a7fa <USBD_GetString+0x3e>
 800a7e8:	6938      	ldr	r0, [r7, #16]
 800a7ea:	f000 f839 	bl	800a860 <USBD_GetLen>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	e001      	b.n	800a7fe <USBD_GetString+0x42>
 800a7fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	4413      	add	r3, r2
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	7812      	ldrb	r2, [r2, #0]
 800a80c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	3301      	adds	r3, #1
 800a812:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a814:	7dfb      	ldrb	r3, [r7, #23]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	4413      	add	r3, r2
 800a81a:	2203      	movs	r2, #3
 800a81c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	3301      	adds	r3, #1
 800a822:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a824:	e013      	b.n	800a84e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	4413      	add	r3, r2
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	7812      	ldrb	r2, [r2, #0]
 800a830:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	3301      	adds	r3, #1
 800a836:	613b      	str	r3, [r7, #16]
    idx++;
 800a838:	7dfb      	ldrb	r3, [r7, #23]
 800a83a:	3301      	adds	r3, #1
 800a83c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	4413      	add	r3, r2
 800a844:	2200      	movs	r2, #0
 800a846:	701a      	strb	r2, [r3, #0]
    idx++;
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	3301      	adds	r3, #1
 800a84c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1e7      	bne.n	800a826 <USBD_GetString+0x6a>
 800a856:	e000      	b.n	800a85a <USBD_GetString+0x9e>
    return;
 800a858:	bf00      	nop
  }
}
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a868:	2300      	movs	r3, #0
 800a86a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a870:	e005      	b.n	800a87e <USBD_GetLen+0x1e>
  {
    len++;
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	3301      	adds	r3, #1
 800a876:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	3301      	adds	r3, #1
 800a87c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1f5      	bne.n	800a872 <USBD_GetLen+0x12>
  }

  return len;
 800a886:	7bfb      	ldrb	r3, [r7, #15]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f000 fc83 	bl	800b1c6 <USBD_LL_Transmit>

  return USBD_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	2100      	movs	r1, #0
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 fc72 	bl	800b1c6 <USBD_LL_Transmit>

  return USBD_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 fc82 	bl	800b208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2204      	movs	r2, #4
 800a91a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a91e:	2300      	movs	r3, #0
 800a920:	2200      	movs	r2, #0
 800a922:	2100      	movs	r1, #0
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fc4e 	bl	800b1c6 <USBD_LL_Transmit>

  return USBD_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2205      	movs	r2, #5
 800a940:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a944:	2300      	movs	r3, #0
 800a946:	2200      	movs	r2, #0
 800a948:	2100      	movs	r1, #0
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fc5c 	bl	800b208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
	...

0800a95c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a960:	2201      	movs	r2, #1
 800a962:	490f      	ldr	r1, [pc, #60]	@ (800a9a0 <MX_USB_DEVICE_Init+0x44>)
 800a964:	480f      	ldr	r0, [pc, #60]	@ (800a9a4 <MX_USB_DEVICE_Init+0x48>)
 800a966:	f7fe fce9 	bl	800933c <USBD_Init>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a970:	f7f6 ff18 	bl	80017a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800a974:	490c      	ldr	r1, [pc, #48]	@ (800a9a8 <MX_USB_DEVICE_Init+0x4c>)
 800a976:	480b      	ldr	r0, [pc, #44]	@ (800a9a4 <MX_USB_DEVICE_Init+0x48>)
 800a978:	f7fe fd10 	bl	800939c <USBD_RegisterClass>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d001      	beq.n	800a986 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a982:	f7f6 ff0f 	bl	80017a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a986:	4807      	ldr	r0, [pc, #28]	@ (800a9a4 <MX_USB_DEVICE_Init+0x48>)
 800a988:	f7fe fd3e 	bl	8009408 <USBD_Start>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a992:	f7f6 ff07 	bl	80017a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a996:	f7f8 ff79 	bl	800388c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a99a:	bf00      	nop
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	24000274 	.word	0x24000274
 800a9a4:	240005a8 	.word	0x240005a8
 800a9a8:	240001c0 	.word	0x240001c0

0800a9ac <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	6039      	str	r1, [r7, #0]
 800a9b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2212      	movs	r2, #18
 800a9bc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a9be:	4b03      	ldr	r3, [pc, #12]	@ (800a9cc <USBD_HS_DeviceDescriptor+0x20>)
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	24000294 	.word	0x24000294

0800a9d0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	2204      	movs	r2, #4
 800a9e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9e2:	4b03      	ldr	r3, [pc, #12]	@ (800a9f0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	240002a8 	.word	0x240002a8

0800a9f4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6039      	str	r1, [r7, #0]
 800a9fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa00:	79fb      	ldrb	r3, [r7, #7]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d105      	bne.n	800aa12 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	4907      	ldr	r1, [pc, #28]	@ (800aa28 <USBD_HS_ProductStrDescriptor+0x34>)
 800aa0a:	4808      	ldr	r0, [pc, #32]	@ (800aa2c <USBD_HS_ProductStrDescriptor+0x38>)
 800aa0c:	f7ff fed6 	bl	800a7bc <USBD_GetString>
 800aa10:	e004      	b.n	800aa1c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	4904      	ldr	r1, [pc, #16]	@ (800aa28 <USBD_HS_ProductStrDescriptor+0x34>)
 800aa16:	4805      	ldr	r0, [pc, #20]	@ (800aa2c <USBD_HS_ProductStrDescriptor+0x38>)
 800aa18:	f7ff fed0 	bl	800a7bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa1c:	4b02      	ldr	r3, [pc, #8]	@ (800aa28 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	24000884 	.word	0x24000884
 800aa2c:	0800bdd0 	.word	0x0800bdd0

0800aa30 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	6039      	str	r1, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	4904      	ldr	r1, [pc, #16]	@ (800aa50 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800aa40:	4804      	ldr	r0, [pc, #16]	@ (800aa54 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800aa42:	f7ff febb 	bl	800a7bc <USBD_GetString>
  return USBD_StrDesc;
 800aa46:	4b02      	ldr	r3, [pc, #8]	@ (800aa50 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	24000884 	.word	0x24000884
 800aa54:	0800bde8 	.word	0x0800bde8

0800aa58 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	6039      	str	r1, [r7, #0]
 800aa62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	221a      	movs	r2, #26
 800aa68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa6a:	f000 f843 	bl	800aaf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800aa6e:	4b02      	ldr	r3, [pc, #8]	@ (800aa78 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	240002ac 	.word	0x240002ac

0800aa7c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	6039      	str	r1, [r7, #0]
 800aa86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa88:	79fb      	ldrb	r3, [r7, #7]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d105      	bne.n	800aa9a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	4907      	ldr	r1, [pc, #28]	@ (800aab0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800aa92:	4808      	ldr	r0, [pc, #32]	@ (800aab4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800aa94:	f7ff fe92 	bl	800a7bc <USBD_GetString>
 800aa98:	e004      	b.n	800aaa4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	4904      	ldr	r1, [pc, #16]	@ (800aab0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800aa9e:	4805      	ldr	r0, [pc, #20]	@ (800aab4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800aaa0:	f7ff fe8c 	bl	800a7bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaa4:	4b02      	ldr	r3, [pc, #8]	@ (800aab0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	24000884 	.word	0x24000884
 800aab4:	0800bdfc 	.word	0x0800bdfc

0800aab8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d105      	bne.n	800aad6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	4907      	ldr	r1, [pc, #28]	@ (800aaec <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aace:	4808      	ldr	r0, [pc, #32]	@ (800aaf0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aad0:	f7ff fe74 	bl	800a7bc <USBD_GetString>
 800aad4:	e004      	b.n	800aae0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	4904      	ldr	r1, [pc, #16]	@ (800aaec <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aada:	4805      	ldr	r0, [pc, #20]	@ (800aaf0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aadc:	f7ff fe6e 	bl	800a7bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800aae0:	4b02      	ldr	r3, [pc, #8]	@ (800aaec <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	24000884 	.word	0x24000884
 800aaf0:	0800be08 	.word	0x0800be08

0800aaf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aafa:	4b0f      	ldr	r3, [pc, #60]	@ (800ab38 <Get_SerialNum+0x44>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab00:	4b0e      	ldr	r3, [pc, #56]	@ (800ab3c <Get_SerialNum+0x48>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab06:	4b0e      	ldr	r3, [pc, #56]	@ (800ab40 <Get_SerialNum+0x4c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4413      	add	r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d009      	beq.n	800ab2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab1a:	2208      	movs	r2, #8
 800ab1c:	4909      	ldr	r1, [pc, #36]	@ (800ab44 <Get_SerialNum+0x50>)
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 f814 	bl	800ab4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab24:	2204      	movs	r2, #4
 800ab26:	4908      	ldr	r1, [pc, #32]	@ (800ab48 <Get_SerialNum+0x54>)
 800ab28:	68b8      	ldr	r0, [r7, #8]
 800ab2a:	f000 f80f 	bl	800ab4c <IntToUnicode>
  }
}
 800ab2e:	bf00      	nop
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	1ff1e800 	.word	0x1ff1e800
 800ab3c:	1ff1e804 	.word	0x1ff1e804
 800ab40:	1ff1e808 	.word	0x1ff1e808
 800ab44:	240002ae 	.word	0x240002ae
 800ab48:	240002be 	.word	0x240002be

0800ab4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	4613      	mov	r3, r2
 800ab58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab5e:	2300      	movs	r3, #0
 800ab60:	75fb      	strb	r3, [r7, #23]
 800ab62:	e027      	b.n	800abb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	0f1b      	lsrs	r3, r3, #28
 800ab68:	2b09      	cmp	r3, #9
 800ab6a:	d80b      	bhi.n	800ab84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	0f1b      	lsrs	r3, r3, #28
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	4619      	mov	r1, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	440b      	add	r3, r1
 800ab7c:	3230      	adds	r2, #48	@ 0x30
 800ab7e:	b2d2      	uxtb	r2, r2
 800ab80:	701a      	strb	r2, [r3, #0]
 800ab82:	e00a      	b.n	800ab9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	0f1b      	lsrs	r3, r3, #28
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	4619      	mov	r1, r3
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	440b      	add	r3, r1
 800ab94:	3237      	adds	r2, #55	@ 0x37
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	011b      	lsls	r3, r3, #4
 800ab9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	3301      	adds	r3, #1
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	4413      	add	r3, r2
 800abaa:	2200      	movs	r2, #0
 800abac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abae:	7dfb      	ldrb	r3, [r7, #23]
 800abb0:	3301      	adds	r3, #1
 800abb2:	75fb      	strb	r3, [r7, #23]
 800abb4:	7dfa      	ldrb	r2, [r7, #23]
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d3d3      	bcc.n	800ab64 <IntToUnicode+0x18>
  }
}
 800abbc:	bf00      	nop
 800abbe:	bf00      	nop
 800abc0:	371c      	adds	r7, #28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
	...

0800abcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b0bc      	sub	sp, #240	@ 0xf0
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abd4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	605a      	str	r2, [r3, #4]
 800abde:	609a      	str	r2, [r3, #8]
 800abe0:	60da      	str	r2, [r3, #12]
 800abe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800abe4:	f107 0320 	add.w	r3, r7, #32
 800abe8:	22b8      	movs	r2, #184	@ 0xb8
 800abea:	2100      	movs	r1, #0
 800abec:	4618      	mov	r0, r3
 800abee:	f000 fb91 	bl	800b314 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a58      	ldr	r2, [pc, #352]	@ (800ad58 <HAL_PCD_MspInit+0x18c>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	f040 80a9 	bne.w	800ad50 <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800abfe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ac02:	f04f 0300 	mov.w	r3, #0
 800ac06:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ac0a:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800ac0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac12:	f107 0320 	add.w	r3, r7, #32
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7f9 fdae 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800ac22:	f7f6 fdbf 	bl	80017a4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ac26:	f7f8 fe31 	bl	800388c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac2a:	4b4c      	ldr	r3, [pc, #304]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ac2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac30:	4a4a      	ldr	r2, [pc, #296]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ac32:	f043 0304 	orr.w	r3, r3, #4
 800ac36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ac3a:	4b48      	ldr	r3, [pc, #288]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ac3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac40:	f003 0304 	and.w	r3, r3, #4
 800ac44:	61fb      	str	r3, [r7, #28]
 800ac46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac48:	4b44      	ldr	r3, [pc, #272]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ac4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac4e:	4a43      	ldr	r2, [pc, #268]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ac50:	f043 0301 	orr.w	r3, r3, #1
 800ac54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ac58:	4b40      	ldr	r3, [pc, #256]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ac5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	61bb      	str	r3, [r7, #24]
 800ac64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac66:	4b3d      	ldr	r3, [pc, #244]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ac68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac6c:	4a3b      	ldr	r2, [pc, #236]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ac6e:	f043 0302 	orr.w	r3, r3, #2
 800ac72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ac76:	4b39      	ldr	r3, [pc, #228]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ac78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac7c:	f003 0302 	and.w	r3, r3, #2
 800ac80:	617b      	str	r3, [r7, #20]
 800ac82:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800ac84:	230d      	movs	r3, #13
 800ac86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac90:	2300      	movs	r3, #0
 800ac92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ac96:	2302      	movs	r3, #2
 800ac98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800ac9c:	230a      	movs	r3, #10
 800ac9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aca2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800aca6:	4619      	mov	r1, r3
 800aca8:	482d      	ldr	r0, [pc, #180]	@ (800ad60 <HAL_PCD_MspInit+0x194>)
 800acaa:	f7f7 f985 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800acae:	2328      	movs	r3, #40	@ 0x28
 800acb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acb4:	2302      	movs	r3, #2
 800acb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acba:	2300      	movs	r3, #0
 800acbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800acc0:	2302      	movs	r3, #2
 800acc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800acc6:	230a      	movs	r3, #10
 800acc8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800accc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800acd0:	4619      	mov	r1, r3
 800acd2:	4824      	ldr	r0, [pc, #144]	@ (800ad64 <HAL_PCD_MspInit+0x198>)
 800acd4:	f7f7 f970 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800acd8:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800acdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ace0:	2302      	movs	r3, #2
 800ace2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800acec:	2302      	movs	r3, #2
 800acee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800acf2:	230a      	movs	r3, #10
 800acf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acf8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800acfc:	4619      	mov	r1, r3
 800acfe:	481a      	ldr	r0, [pc, #104]	@ (800ad68 <HAL_PCD_MspInit+0x19c>)
 800ad00:	f7f7 f95a 	bl	8001fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ad04:	4b15      	ldr	r3, [pc, #84]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ad06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad0a:	4a14      	ldr	r2, [pc, #80]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ad0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ad10:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ad14:	4b11      	ldr	r3, [pc, #68]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ad16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad1e:	613b      	str	r3, [r7, #16]
 800ad20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800ad22:	4b0e      	ldr	r3, [pc, #56]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ad24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad28:	4a0c      	ldr	r2, [pc, #48]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ad2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ad32:	4b0a      	ldr	r3, [pc, #40]	@ (800ad5c <HAL_PCD_MspInit+0x190>)
 800ad34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad3c:	60fb      	str	r3, [r7, #12]
 800ad3e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ad40:	2200      	movs	r2, #0
 800ad42:	2100      	movs	r1, #0
 800ad44:	204d      	movs	r0, #77	@ 0x4d
 800ad46:	f7f7 f88a 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ad4a:	204d      	movs	r0, #77	@ 0x4d
 800ad4c:	f7f7 f8a1 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ad50:	bf00      	nop
 800ad52:	37f0      	adds	r7, #240	@ 0xf0
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	40040000 	.word	0x40040000
 800ad5c:	58024400 	.word	0x58024400
 800ad60:	58020800 	.word	0x58020800
 800ad64:	58020000 	.word	0x58020000
 800ad68:	58020400 	.word	0x58020400

0800ad6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7fe fb8d 	bl	80094a2 <USBD_LL_SetupStage>
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ada2:	78fa      	ldrb	r2, [r7, #3]
 800ada4:	6879      	ldr	r1, [r7, #4]
 800ada6:	4613      	mov	r3, r2
 800ada8:	00db      	lsls	r3, r3, #3
 800adaa:	4413      	add	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	440b      	add	r3, r1
 800adb0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	78fb      	ldrb	r3, [r7, #3]
 800adb8:	4619      	mov	r1, r3
 800adba:	f7fe fbc7 	bl	800954c <USBD_LL_DataOutStage>
}
 800adbe:	bf00      	nop
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800add8:	78fa      	ldrb	r2, [r7, #3]
 800adda:	6879      	ldr	r1, [r7, #4]
 800addc:	4613      	mov	r3, r2
 800adde:	00db      	lsls	r3, r3, #3
 800ade0:	4413      	add	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	440b      	add	r3, r1
 800ade6:	3320      	adds	r3, #32
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	78fb      	ldrb	r3, [r7, #3]
 800adec:	4619      	mov	r1, r3
 800adee:	f7fe fc60 	bl	80096b2 <USBD_LL_DataInStage>
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b082      	sub	sp, #8
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe fd9a 	bl	8009942 <USBD_LL_SOF>
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	79db      	ldrb	r3, [r3, #7]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d102      	bne.n	800ae30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]
 800ae2e:	e008      	b.n	800ae42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	79db      	ldrb	r3, [r3, #7]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d102      	bne.n	800ae3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	73fb      	strb	r3, [r7, #15]
 800ae3c:	e001      	b.n	800ae42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ae3e:	f7f6 fcb1 	bl	80017a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae48:	7bfa      	ldrb	r2, [r7, #15]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fe fd34 	bl	80098ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7fe fcdc 	bl	8009816 <USBD_LL_Reset>
}
 800ae5e:	bf00      	nop
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
	...

0800ae68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fe fd2f 	bl	80098da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	6812      	ldr	r2, [r2, #0]
 800ae8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ae8e:	f043 0301 	orr.w	r3, r3, #1
 800ae92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	7adb      	ldrb	r3, [r3, #11]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d005      	beq.n	800aea8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae9c:	4b04      	ldr	r3, [pc, #16]	@ (800aeb0 <HAL_PCD_SuspendCallback+0x48>)
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	4a03      	ldr	r2, [pc, #12]	@ (800aeb0 <HAL_PCD_SuspendCallback+0x48>)
 800aea2:	f043 0306 	orr.w	r3, r3, #6
 800aea6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aea8:	bf00      	nop
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	e000ed00 	.word	0xe000ed00

0800aeb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fd25 	bl	8009912 <USBD_LL_Resume>
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aee2:	78fa      	ldrb	r2, [r7, #3]
 800aee4:	4611      	mov	r1, r2
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fe fd7d 	bl	80099e6 <USBD_LL_IsoOUTIncomplete>
}
 800aeec:	bf00      	nop
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af06:	78fa      	ldrb	r2, [r7, #3]
 800af08:	4611      	mov	r1, r2
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fe fd39 	bl	8009982 <USBD_LL_IsoINIncomplete>
}
 800af10:	bf00      	nop
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fd8f 	bl	8009a4a <USBD_LL_DevConnected>
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe fd8c 	bl	8009a60 <USBD_LL_DevDisconnected>
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d140      	bne.n	800afe2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800af60:	4a22      	ldr	r2, [pc, #136]	@ (800afec <USBD_LL_Init+0x9c>)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a20      	ldr	r2, [pc, #128]	@ (800afec <USBD_LL_Init+0x9c>)
 800af6c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800af70:	4b1e      	ldr	r3, [pc, #120]	@ (800afec <USBD_LL_Init+0x9c>)
 800af72:	4a1f      	ldr	r2, [pc, #124]	@ (800aff0 <USBD_LL_Init+0xa0>)
 800af74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800af76:	4b1d      	ldr	r3, [pc, #116]	@ (800afec <USBD_LL_Init+0x9c>)
 800af78:	2209      	movs	r2, #9
 800af7a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800af7c:	4b1b      	ldr	r3, [pc, #108]	@ (800afec <USBD_LL_Init+0x9c>)
 800af7e:	2200      	movs	r2, #0
 800af80:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800af82:	4b1a      	ldr	r3, [pc, #104]	@ (800afec <USBD_LL_Init+0x9c>)
 800af84:	2200      	movs	r2, #0
 800af86:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800af88:	4b18      	ldr	r3, [pc, #96]	@ (800afec <USBD_LL_Init+0x9c>)
 800af8a:	2201      	movs	r2, #1
 800af8c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800af8e:	4b17      	ldr	r3, [pc, #92]	@ (800afec <USBD_LL_Init+0x9c>)
 800af90:	2200      	movs	r2, #0
 800af92:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800af94:	4b15      	ldr	r3, [pc, #84]	@ (800afec <USBD_LL_Init+0x9c>)
 800af96:	2200      	movs	r2, #0
 800af98:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800af9a:	4b14      	ldr	r3, [pc, #80]	@ (800afec <USBD_LL_Init+0x9c>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800afa0:	4b12      	ldr	r3, [pc, #72]	@ (800afec <USBD_LL_Init+0x9c>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800afa6:	4b11      	ldr	r3, [pc, #68]	@ (800afec <USBD_LL_Init+0x9c>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800afac:	4b0f      	ldr	r3, [pc, #60]	@ (800afec <USBD_LL_Init+0x9c>)
 800afae:	2200      	movs	r2, #0
 800afb0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800afb2:	480e      	ldr	r0, [pc, #56]	@ (800afec <USBD_LL_Init+0x9c>)
 800afb4:	f7f7 f9a8 	bl	8002308 <HAL_PCD_Init>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800afbe:	f7f6 fbf1 	bl	80017a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800afc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800afc6:	4809      	ldr	r0, [pc, #36]	@ (800afec <USBD_LL_Init+0x9c>)
 800afc8:	f7f8 fbe5 	bl	8003796 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800afcc:	2280      	movs	r2, #128	@ 0x80
 800afce:	2100      	movs	r1, #0
 800afd0:	4806      	ldr	r0, [pc, #24]	@ (800afec <USBD_LL_Init+0x9c>)
 800afd2:	f7f8 fb99 	bl	8003708 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800afd6:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800afda:	2101      	movs	r1, #1
 800afdc:	4803      	ldr	r0, [pc, #12]	@ (800afec <USBD_LL_Init+0x9c>)
 800afde:	f7f8 fb93 	bl	8003708 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	24000a84 	.word	0x24000a84
 800aff0:	40040000 	.word	0x40040000

0800aff4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7f7 fa88 	bl	8002520 <HAL_PCD_Start>
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f930 	bl	800b27c <USBD_Get_USB_Status>
 800b01c:	4603      	mov	r3, r0
 800b01e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b020:	7bbb      	ldrb	r3, [r7, #14]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	4608      	mov	r0, r1
 800b034:	4611      	mov	r1, r2
 800b036:	461a      	mov	r2, r3
 800b038:	4603      	mov	r3, r0
 800b03a:	70fb      	strb	r3, [r7, #3]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70bb      	strb	r3, [r7, #2]
 800b040:	4613      	mov	r3, r2
 800b042:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b052:	78bb      	ldrb	r3, [r7, #2]
 800b054:	883a      	ldrh	r2, [r7, #0]
 800b056:	78f9      	ldrb	r1, [r7, #3]
 800b058:	f7f7 ff89 	bl	8002f6e <HAL_PCD_EP_Open>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4618      	mov	r0, r3
 800b064:	f000 f90a 	bl	800b27c <USBD_Get_USB_Status>
 800b068:	4603      	mov	r3, r0
 800b06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b090:	78fa      	ldrb	r2, [r7, #3]
 800b092:	4611      	mov	r1, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f7f7 ffd4 	bl	8003042 <HAL_PCD_EP_Close>
 800b09a:	4603      	mov	r3, r0
 800b09c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 f8eb 	bl	800b27c <USBD_Get_USB_Status>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0ce:	78fa      	ldrb	r2, [r7, #3]
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7f8 f874 	bl	80031c0 <HAL_PCD_EP_SetStall>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 f8cc 	bl	800b27c <USBD_Get_USB_Status>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b10c:	78fa      	ldrb	r2, [r7, #3]
 800b10e:	4611      	mov	r1, r2
 800b110:	4618      	mov	r0, r3
 800b112:	f7f8 f8b8 	bl	8003286 <HAL_PCD_EP_ClrStall>
 800b116:	4603      	mov	r3, r0
 800b118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 f8ad 	bl	800b27c <USBD_Get_USB_Status>
 800b122:	4603      	mov	r3, r0
 800b124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b126:	7bbb      	ldrb	r3, [r7, #14]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	460b      	mov	r3, r1
 800b13a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b142:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	da0b      	bge.n	800b164 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b14c:	78fb      	ldrb	r3, [r7, #3]
 800b14e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b152:	68f9      	ldr	r1, [r7, #12]
 800b154:	4613      	mov	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	4413      	add	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	440b      	add	r3, r1
 800b15e:	3316      	adds	r3, #22
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	e00b      	b.n	800b17c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b16a:	68f9      	ldr	r1, [r7, #12]
 800b16c:	4613      	mov	r3, r2
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	440b      	add	r3, r1
 800b176:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b17a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	460b      	mov	r3, r1
 800b192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1a2:	78fa      	ldrb	r2, [r7, #3]
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7f7 febd 	bl	8002f26 <HAL_PCD_SetAddress>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 f862 	bl	800b27c <USBD_Get_USB_Status>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b086      	sub	sp, #24
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	607a      	str	r2, [r7, #4]
 800b1d0:	603b      	str	r3, [r7, #0]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b1e4:	7af9      	ldrb	r1, [r7, #11]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	f7f7 ffaf 	bl	800314c <HAL_PCD_EP_Transmit>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 f841 	bl	800b27c <USBD_Get_USB_Status>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3718      	adds	r7, #24
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	607a      	str	r2, [r7, #4]
 800b212:	603b      	str	r3, [r7, #0]
 800b214:	460b      	mov	r3, r1
 800b216:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b226:	7af9      	ldrb	r1, [r7, #11]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	f7f7 ff53 	bl	80030d6 <HAL_PCD_EP_Receive>
 800b230:	4603      	mov	r3, r0
 800b232:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b234:	7dfb      	ldrb	r3, [r7, #23]
 800b236:	4618      	mov	r0, r3
 800b238:	f000 f820 	bl	800b27c <USBD_Get_USB_Status>
 800b23c:	4603      	mov	r3, r0
 800b23e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b240:	7dbb      	ldrb	r3, [r7, #22]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
	...

0800b24c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b254:	4b03      	ldr	r3, [pc, #12]	@ (800b264 <USBD_static_malloc+0x18>)
}
 800b256:	4618      	mov	r0, r3
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	24000f68 	.word	0x24000f68

0800b268 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	4603      	mov	r3, r0
 800b284:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b28a:	79fb      	ldrb	r3, [r7, #7]
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d817      	bhi.n	800b2c0 <USBD_Get_USB_Status+0x44>
 800b290:	a201      	add	r2, pc, #4	@ (adr r2, 800b298 <USBD_Get_USB_Status+0x1c>)
 800b292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b296:	bf00      	nop
 800b298:	0800b2a9 	.word	0x0800b2a9
 800b29c:	0800b2af 	.word	0x0800b2af
 800b2a0:	0800b2b5 	.word	0x0800b2b5
 800b2a4:	0800b2bb 	.word	0x0800b2bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ac:	e00b      	b.n	800b2c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b2:	e008      	b.n	800b2c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b8:	e005      	b.n	800b2c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b2be:	e002      	b.n	800b2c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c4:	bf00      	nop
  }
  return usb_status;
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <siprintf>:
 800b2d4:	b40e      	push	{r1, r2, r3}
 800b2d6:	b500      	push	{lr}
 800b2d8:	b09c      	sub	sp, #112	@ 0x70
 800b2da:	ab1d      	add	r3, sp, #116	@ 0x74
 800b2dc:	9002      	str	r0, [sp, #8]
 800b2de:	9006      	str	r0, [sp, #24]
 800b2e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b2e4:	4809      	ldr	r0, [pc, #36]	@ (800b30c <siprintf+0x38>)
 800b2e6:	9107      	str	r1, [sp, #28]
 800b2e8:	9104      	str	r1, [sp, #16]
 800b2ea:	4909      	ldr	r1, [pc, #36]	@ (800b310 <siprintf+0x3c>)
 800b2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f0:	9105      	str	r1, [sp, #20]
 800b2f2:	6800      	ldr	r0, [r0, #0]
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	a902      	add	r1, sp, #8
 800b2f8:	f000 f994 	bl	800b624 <_svfiprintf_r>
 800b2fc:	9b02      	ldr	r3, [sp, #8]
 800b2fe:	2200      	movs	r2, #0
 800b300:	701a      	strb	r2, [r3, #0]
 800b302:	b01c      	add	sp, #112	@ 0x70
 800b304:	f85d eb04 	ldr.w	lr, [sp], #4
 800b308:	b003      	add	sp, #12
 800b30a:	4770      	bx	lr
 800b30c:	240002c8 	.word	0x240002c8
 800b310:	ffff0208 	.word	0xffff0208

0800b314 <memset>:
 800b314:	4402      	add	r2, r0
 800b316:	4603      	mov	r3, r0
 800b318:	4293      	cmp	r3, r2
 800b31a:	d100      	bne.n	800b31e <memset+0xa>
 800b31c:	4770      	bx	lr
 800b31e:	f803 1b01 	strb.w	r1, [r3], #1
 800b322:	e7f9      	b.n	800b318 <memset+0x4>

0800b324 <__errno>:
 800b324:	4b01      	ldr	r3, [pc, #4]	@ (800b32c <__errno+0x8>)
 800b326:	6818      	ldr	r0, [r3, #0]
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	240002c8 	.word	0x240002c8

0800b330 <__libc_init_array>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	4d0d      	ldr	r5, [pc, #52]	@ (800b368 <__libc_init_array+0x38>)
 800b334:	4c0d      	ldr	r4, [pc, #52]	@ (800b36c <__libc_init_array+0x3c>)
 800b336:	1b64      	subs	r4, r4, r5
 800b338:	10a4      	asrs	r4, r4, #2
 800b33a:	2600      	movs	r6, #0
 800b33c:	42a6      	cmp	r6, r4
 800b33e:	d109      	bne.n	800b354 <__libc_init_array+0x24>
 800b340:	4d0b      	ldr	r5, [pc, #44]	@ (800b370 <__libc_init_array+0x40>)
 800b342:	4c0c      	ldr	r4, [pc, #48]	@ (800b374 <__libc_init_array+0x44>)
 800b344:	f000 fc66 	bl	800bc14 <_init>
 800b348:	1b64      	subs	r4, r4, r5
 800b34a:	10a4      	asrs	r4, r4, #2
 800b34c:	2600      	movs	r6, #0
 800b34e:	42a6      	cmp	r6, r4
 800b350:	d105      	bne.n	800b35e <__libc_init_array+0x2e>
 800b352:	bd70      	pop	{r4, r5, r6, pc}
 800b354:	f855 3b04 	ldr.w	r3, [r5], #4
 800b358:	4798      	blx	r3
 800b35a:	3601      	adds	r6, #1
 800b35c:	e7ee      	b.n	800b33c <__libc_init_array+0xc>
 800b35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b362:	4798      	blx	r3
 800b364:	3601      	adds	r6, #1
 800b366:	e7f2      	b.n	800b34e <__libc_init_array+0x1e>
 800b368:	0800be8c 	.word	0x0800be8c
 800b36c:	0800be8c 	.word	0x0800be8c
 800b370:	0800be8c 	.word	0x0800be8c
 800b374:	0800be90 	.word	0x0800be90

0800b378 <__retarget_lock_acquire_recursive>:
 800b378:	4770      	bx	lr

0800b37a <__retarget_lock_release_recursive>:
 800b37a:	4770      	bx	lr

0800b37c <_free_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4605      	mov	r5, r0
 800b380:	2900      	cmp	r1, #0
 800b382:	d041      	beq.n	800b408 <_free_r+0x8c>
 800b384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b388:	1f0c      	subs	r4, r1, #4
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	bfb8      	it	lt
 800b38e:	18e4      	addlt	r4, r4, r3
 800b390:	f000 f8e0 	bl	800b554 <__malloc_lock>
 800b394:	4a1d      	ldr	r2, [pc, #116]	@ (800b40c <_free_r+0x90>)
 800b396:	6813      	ldr	r3, [r2, #0]
 800b398:	b933      	cbnz	r3, 800b3a8 <_free_r+0x2c>
 800b39a:	6063      	str	r3, [r4, #4]
 800b39c:	6014      	str	r4, [r2, #0]
 800b39e:	4628      	mov	r0, r5
 800b3a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3a4:	f000 b8dc 	b.w	800b560 <__malloc_unlock>
 800b3a8:	42a3      	cmp	r3, r4
 800b3aa:	d908      	bls.n	800b3be <_free_r+0x42>
 800b3ac:	6820      	ldr	r0, [r4, #0]
 800b3ae:	1821      	adds	r1, r4, r0
 800b3b0:	428b      	cmp	r3, r1
 800b3b2:	bf01      	itttt	eq
 800b3b4:	6819      	ldreq	r1, [r3, #0]
 800b3b6:	685b      	ldreq	r3, [r3, #4]
 800b3b8:	1809      	addeq	r1, r1, r0
 800b3ba:	6021      	streq	r1, [r4, #0]
 800b3bc:	e7ed      	b.n	800b39a <_free_r+0x1e>
 800b3be:	461a      	mov	r2, r3
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	b10b      	cbz	r3, 800b3c8 <_free_r+0x4c>
 800b3c4:	42a3      	cmp	r3, r4
 800b3c6:	d9fa      	bls.n	800b3be <_free_r+0x42>
 800b3c8:	6811      	ldr	r1, [r2, #0]
 800b3ca:	1850      	adds	r0, r2, r1
 800b3cc:	42a0      	cmp	r0, r4
 800b3ce:	d10b      	bne.n	800b3e8 <_free_r+0x6c>
 800b3d0:	6820      	ldr	r0, [r4, #0]
 800b3d2:	4401      	add	r1, r0
 800b3d4:	1850      	adds	r0, r2, r1
 800b3d6:	4283      	cmp	r3, r0
 800b3d8:	6011      	str	r1, [r2, #0]
 800b3da:	d1e0      	bne.n	800b39e <_free_r+0x22>
 800b3dc:	6818      	ldr	r0, [r3, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	6053      	str	r3, [r2, #4]
 800b3e2:	4408      	add	r0, r1
 800b3e4:	6010      	str	r0, [r2, #0]
 800b3e6:	e7da      	b.n	800b39e <_free_r+0x22>
 800b3e8:	d902      	bls.n	800b3f0 <_free_r+0x74>
 800b3ea:	230c      	movs	r3, #12
 800b3ec:	602b      	str	r3, [r5, #0]
 800b3ee:	e7d6      	b.n	800b39e <_free_r+0x22>
 800b3f0:	6820      	ldr	r0, [r4, #0]
 800b3f2:	1821      	adds	r1, r4, r0
 800b3f4:	428b      	cmp	r3, r1
 800b3f6:	bf04      	itt	eq
 800b3f8:	6819      	ldreq	r1, [r3, #0]
 800b3fa:	685b      	ldreq	r3, [r3, #4]
 800b3fc:	6063      	str	r3, [r4, #4]
 800b3fe:	bf04      	itt	eq
 800b400:	1809      	addeq	r1, r1, r0
 800b402:	6021      	streq	r1, [r4, #0]
 800b404:	6054      	str	r4, [r2, #4]
 800b406:	e7ca      	b.n	800b39e <_free_r+0x22>
 800b408:	bd38      	pop	{r3, r4, r5, pc}
 800b40a:	bf00      	nop
 800b40c:	240010c0 	.word	0x240010c0

0800b410 <sbrk_aligned>:
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	4e0f      	ldr	r6, [pc, #60]	@ (800b450 <sbrk_aligned+0x40>)
 800b414:	460c      	mov	r4, r1
 800b416:	6831      	ldr	r1, [r6, #0]
 800b418:	4605      	mov	r5, r0
 800b41a:	b911      	cbnz	r1, 800b422 <sbrk_aligned+0x12>
 800b41c:	f000 fba6 	bl	800bb6c <_sbrk_r>
 800b420:	6030      	str	r0, [r6, #0]
 800b422:	4621      	mov	r1, r4
 800b424:	4628      	mov	r0, r5
 800b426:	f000 fba1 	bl	800bb6c <_sbrk_r>
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	d103      	bne.n	800b436 <sbrk_aligned+0x26>
 800b42e:	f04f 34ff 	mov.w	r4, #4294967295
 800b432:	4620      	mov	r0, r4
 800b434:	bd70      	pop	{r4, r5, r6, pc}
 800b436:	1cc4      	adds	r4, r0, #3
 800b438:	f024 0403 	bic.w	r4, r4, #3
 800b43c:	42a0      	cmp	r0, r4
 800b43e:	d0f8      	beq.n	800b432 <sbrk_aligned+0x22>
 800b440:	1a21      	subs	r1, r4, r0
 800b442:	4628      	mov	r0, r5
 800b444:	f000 fb92 	bl	800bb6c <_sbrk_r>
 800b448:	3001      	adds	r0, #1
 800b44a:	d1f2      	bne.n	800b432 <sbrk_aligned+0x22>
 800b44c:	e7ef      	b.n	800b42e <sbrk_aligned+0x1e>
 800b44e:	bf00      	nop
 800b450:	240010bc 	.word	0x240010bc

0800b454 <_malloc_r>:
 800b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b458:	1ccd      	adds	r5, r1, #3
 800b45a:	f025 0503 	bic.w	r5, r5, #3
 800b45e:	3508      	adds	r5, #8
 800b460:	2d0c      	cmp	r5, #12
 800b462:	bf38      	it	cc
 800b464:	250c      	movcc	r5, #12
 800b466:	2d00      	cmp	r5, #0
 800b468:	4606      	mov	r6, r0
 800b46a:	db01      	blt.n	800b470 <_malloc_r+0x1c>
 800b46c:	42a9      	cmp	r1, r5
 800b46e:	d904      	bls.n	800b47a <_malloc_r+0x26>
 800b470:	230c      	movs	r3, #12
 800b472:	6033      	str	r3, [r6, #0]
 800b474:	2000      	movs	r0, #0
 800b476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b550 <_malloc_r+0xfc>
 800b47e:	f000 f869 	bl	800b554 <__malloc_lock>
 800b482:	f8d8 3000 	ldr.w	r3, [r8]
 800b486:	461c      	mov	r4, r3
 800b488:	bb44      	cbnz	r4, 800b4dc <_malloc_r+0x88>
 800b48a:	4629      	mov	r1, r5
 800b48c:	4630      	mov	r0, r6
 800b48e:	f7ff ffbf 	bl	800b410 <sbrk_aligned>
 800b492:	1c43      	adds	r3, r0, #1
 800b494:	4604      	mov	r4, r0
 800b496:	d158      	bne.n	800b54a <_malloc_r+0xf6>
 800b498:	f8d8 4000 	ldr.w	r4, [r8]
 800b49c:	4627      	mov	r7, r4
 800b49e:	2f00      	cmp	r7, #0
 800b4a0:	d143      	bne.n	800b52a <_malloc_r+0xd6>
 800b4a2:	2c00      	cmp	r4, #0
 800b4a4:	d04b      	beq.n	800b53e <_malloc_r+0xea>
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	eb04 0903 	add.w	r9, r4, r3
 800b4b0:	f000 fb5c 	bl	800bb6c <_sbrk_r>
 800b4b4:	4581      	cmp	r9, r0
 800b4b6:	d142      	bne.n	800b53e <_malloc_r+0xea>
 800b4b8:	6821      	ldr	r1, [r4, #0]
 800b4ba:	1a6d      	subs	r5, r5, r1
 800b4bc:	4629      	mov	r1, r5
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f7ff ffa6 	bl	800b410 <sbrk_aligned>
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	d03a      	beq.n	800b53e <_malloc_r+0xea>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	442b      	add	r3, r5
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b4d2:	685a      	ldr	r2, [r3, #4]
 800b4d4:	bb62      	cbnz	r2, 800b530 <_malloc_r+0xdc>
 800b4d6:	f8c8 7000 	str.w	r7, [r8]
 800b4da:	e00f      	b.n	800b4fc <_malloc_r+0xa8>
 800b4dc:	6822      	ldr	r2, [r4, #0]
 800b4de:	1b52      	subs	r2, r2, r5
 800b4e0:	d420      	bmi.n	800b524 <_malloc_r+0xd0>
 800b4e2:	2a0b      	cmp	r2, #11
 800b4e4:	d917      	bls.n	800b516 <_malloc_r+0xc2>
 800b4e6:	1961      	adds	r1, r4, r5
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	6025      	str	r5, [r4, #0]
 800b4ec:	bf18      	it	ne
 800b4ee:	6059      	strne	r1, [r3, #4]
 800b4f0:	6863      	ldr	r3, [r4, #4]
 800b4f2:	bf08      	it	eq
 800b4f4:	f8c8 1000 	streq.w	r1, [r8]
 800b4f8:	5162      	str	r2, [r4, r5]
 800b4fa:	604b      	str	r3, [r1, #4]
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f000 f82f 	bl	800b560 <__malloc_unlock>
 800b502:	f104 000b 	add.w	r0, r4, #11
 800b506:	1d23      	adds	r3, r4, #4
 800b508:	f020 0007 	bic.w	r0, r0, #7
 800b50c:	1ac2      	subs	r2, r0, r3
 800b50e:	bf1c      	itt	ne
 800b510:	1a1b      	subne	r3, r3, r0
 800b512:	50a3      	strne	r3, [r4, r2]
 800b514:	e7af      	b.n	800b476 <_malloc_r+0x22>
 800b516:	6862      	ldr	r2, [r4, #4]
 800b518:	42a3      	cmp	r3, r4
 800b51a:	bf0c      	ite	eq
 800b51c:	f8c8 2000 	streq.w	r2, [r8]
 800b520:	605a      	strne	r2, [r3, #4]
 800b522:	e7eb      	b.n	800b4fc <_malloc_r+0xa8>
 800b524:	4623      	mov	r3, r4
 800b526:	6864      	ldr	r4, [r4, #4]
 800b528:	e7ae      	b.n	800b488 <_malloc_r+0x34>
 800b52a:	463c      	mov	r4, r7
 800b52c:	687f      	ldr	r7, [r7, #4]
 800b52e:	e7b6      	b.n	800b49e <_malloc_r+0x4a>
 800b530:	461a      	mov	r2, r3
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	42a3      	cmp	r3, r4
 800b536:	d1fb      	bne.n	800b530 <_malloc_r+0xdc>
 800b538:	2300      	movs	r3, #0
 800b53a:	6053      	str	r3, [r2, #4]
 800b53c:	e7de      	b.n	800b4fc <_malloc_r+0xa8>
 800b53e:	230c      	movs	r3, #12
 800b540:	6033      	str	r3, [r6, #0]
 800b542:	4630      	mov	r0, r6
 800b544:	f000 f80c 	bl	800b560 <__malloc_unlock>
 800b548:	e794      	b.n	800b474 <_malloc_r+0x20>
 800b54a:	6005      	str	r5, [r0, #0]
 800b54c:	e7d6      	b.n	800b4fc <_malloc_r+0xa8>
 800b54e:	bf00      	nop
 800b550:	240010c0 	.word	0x240010c0

0800b554 <__malloc_lock>:
 800b554:	4801      	ldr	r0, [pc, #4]	@ (800b55c <__malloc_lock+0x8>)
 800b556:	f7ff bf0f 	b.w	800b378 <__retarget_lock_acquire_recursive>
 800b55a:	bf00      	nop
 800b55c:	240010b8 	.word	0x240010b8

0800b560 <__malloc_unlock>:
 800b560:	4801      	ldr	r0, [pc, #4]	@ (800b568 <__malloc_unlock+0x8>)
 800b562:	f7ff bf0a 	b.w	800b37a <__retarget_lock_release_recursive>
 800b566:	bf00      	nop
 800b568:	240010b8 	.word	0x240010b8

0800b56c <__ssputs_r>:
 800b56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b570:	688e      	ldr	r6, [r1, #8]
 800b572:	461f      	mov	r7, r3
 800b574:	42be      	cmp	r6, r7
 800b576:	680b      	ldr	r3, [r1, #0]
 800b578:	4682      	mov	sl, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	4690      	mov	r8, r2
 800b57e:	d82d      	bhi.n	800b5dc <__ssputs_r+0x70>
 800b580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b584:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b588:	d026      	beq.n	800b5d8 <__ssputs_r+0x6c>
 800b58a:	6965      	ldr	r5, [r4, #20]
 800b58c:	6909      	ldr	r1, [r1, #16]
 800b58e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b592:	eba3 0901 	sub.w	r9, r3, r1
 800b596:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b59a:	1c7b      	adds	r3, r7, #1
 800b59c:	444b      	add	r3, r9
 800b59e:	106d      	asrs	r5, r5, #1
 800b5a0:	429d      	cmp	r5, r3
 800b5a2:	bf38      	it	cc
 800b5a4:	461d      	movcc	r5, r3
 800b5a6:	0553      	lsls	r3, r2, #21
 800b5a8:	d527      	bpl.n	800b5fa <__ssputs_r+0x8e>
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	f7ff ff52 	bl	800b454 <_malloc_r>
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	b360      	cbz	r0, 800b60e <__ssputs_r+0xa2>
 800b5b4:	6921      	ldr	r1, [r4, #16]
 800b5b6:	464a      	mov	r2, r9
 800b5b8:	f000 fae8 	bl	800bb8c <memcpy>
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b5c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5c6:	81a3      	strh	r3, [r4, #12]
 800b5c8:	6126      	str	r6, [r4, #16]
 800b5ca:	6165      	str	r5, [r4, #20]
 800b5cc:	444e      	add	r6, r9
 800b5ce:	eba5 0509 	sub.w	r5, r5, r9
 800b5d2:	6026      	str	r6, [r4, #0]
 800b5d4:	60a5      	str	r5, [r4, #8]
 800b5d6:	463e      	mov	r6, r7
 800b5d8:	42be      	cmp	r6, r7
 800b5da:	d900      	bls.n	800b5de <__ssputs_r+0x72>
 800b5dc:	463e      	mov	r6, r7
 800b5de:	6820      	ldr	r0, [r4, #0]
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	4641      	mov	r1, r8
 800b5e4:	f000 faa8 	bl	800bb38 <memmove>
 800b5e8:	68a3      	ldr	r3, [r4, #8]
 800b5ea:	1b9b      	subs	r3, r3, r6
 800b5ec:	60a3      	str	r3, [r4, #8]
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	4433      	add	r3, r6
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	f000 fad4 	bl	800bba8 <_realloc_r>
 800b600:	4606      	mov	r6, r0
 800b602:	2800      	cmp	r0, #0
 800b604:	d1e0      	bne.n	800b5c8 <__ssputs_r+0x5c>
 800b606:	6921      	ldr	r1, [r4, #16]
 800b608:	4650      	mov	r0, sl
 800b60a:	f7ff feb7 	bl	800b37c <_free_r>
 800b60e:	230c      	movs	r3, #12
 800b610:	f8ca 3000 	str.w	r3, [sl]
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	f04f 30ff 	mov.w	r0, #4294967295
 800b620:	e7e9      	b.n	800b5f6 <__ssputs_r+0x8a>
	...

0800b624 <_svfiprintf_r>:
 800b624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b628:	4698      	mov	r8, r3
 800b62a:	898b      	ldrh	r3, [r1, #12]
 800b62c:	061b      	lsls	r3, r3, #24
 800b62e:	b09d      	sub	sp, #116	@ 0x74
 800b630:	4607      	mov	r7, r0
 800b632:	460d      	mov	r5, r1
 800b634:	4614      	mov	r4, r2
 800b636:	d510      	bpl.n	800b65a <_svfiprintf_r+0x36>
 800b638:	690b      	ldr	r3, [r1, #16]
 800b63a:	b973      	cbnz	r3, 800b65a <_svfiprintf_r+0x36>
 800b63c:	2140      	movs	r1, #64	@ 0x40
 800b63e:	f7ff ff09 	bl	800b454 <_malloc_r>
 800b642:	6028      	str	r0, [r5, #0]
 800b644:	6128      	str	r0, [r5, #16]
 800b646:	b930      	cbnz	r0, 800b656 <_svfiprintf_r+0x32>
 800b648:	230c      	movs	r3, #12
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	b01d      	add	sp, #116	@ 0x74
 800b652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b656:	2340      	movs	r3, #64	@ 0x40
 800b658:	616b      	str	r3, [r5, #20]
 800b65a:	2300      	movs	r3, #0
 800b65c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b65e:	2320      	movs	r3, #32
 800b660:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b664:	f8cd 800c 	str.w	r8, [sp, #12]
 800b668:	2330      	movs	r3, #48	@ 0x30
 800b66a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b808 <_svfiprintf_r+0x1e4>
 800b66e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b672:	f04f 0901 	mov.w	r9, #1
 800b676:	4623      	mov	r3, r4
 800b678:	469a      	mov	sl, r3
 800b67a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b67e:	b10a      	cbz	r2, 800b684 <_svfiprintf_r+0x60>
 800b680:	2a25      	cmp	r2, #37	@ 0x25
 800b682:	d1f9      	bne.n	800b678 <_svfiprintf_r+0x54>
 800b684:	ebba 0b04 	subs.w	fp, sl, r4
 800b688:	d00b      	beq.n	800b6a2 <_svfiprintf_r+0x7e>
 800b68a:	465b      	mov	r3, fp
 800b68c:	4622      	mov	r2, r4
 800b68e:	4629      	mov	r1, r5
 800b690:	4638      	mov	r0, r7
 800b692:	f7ff ff6b 	bl	800b56c <__ssputs_r>
 800b696:	3001      	adds	r0, #1
 800b698:	f000 80a7 	beq.w	800b7ea <_svfiprintf_r+0x1c6>
 800b69c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b69e:	445a      	add	r2, fp
 800b6a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f000 809f 	beq.w	800b7ea <_svfiprintf_r+0x1c6>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6b6:	f10a 0a01 	add.w	sl, sl, #1
 800b6ba:	9304      	str	r3, [sp, #16]
 800b6bc:	9307      	str	r3, [sp, #28]
 800b6be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6c4:	4654      	mov	r4, sl
 800b6c6:	2205      	movs	r2, #5
 800b6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6cc:	484e      	ldr	r0, [pc, #312]	@ (800b808 <_svfiprintf_r+0x1e4>)
 800b6ce:	f7f4 fe27 	bl	8000320 <memchr>
 800b6d2:	9a04      	ldr	r2, [sp, #16]
 800b6d4:	b9d8      	cbnz	r0, 800b70e <_svfiprintf_r+0xea>
 800b6d6:	06d0      	lsls	r0, r2, #27
 800b6d8:	bf44      	itt	mi
 800b6da:	2320      	movmi	r3, #32
 800b6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6e0:	0711      	lsls	r1, r2, #28
 800b6e2:	bf44      	itt	mi
 800b6e4:	232b      	movmi	r3, #43	@ 0x2b
 800b6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6f0:	d015      	beq.n	800b71e <_svfiprintf_r+0xfa>
 800b6f2:	9a07      	ldr	r2, [sp, #28]
 800b6f4:	4654      	mov	r4, sl
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	f04f 0c0a 	mov.w	ip, #10
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b702:	3b30      	subs	r3, #48	@ 0x30
 800b704:	2b09      	cmp	r3, #9
 800b706:	d94b      	bls.n	800b7a0 <_svfiprintf_r+0x17c>
 800b708:	b1b0      	cbz	r0, 800b738 <_svfiprintf_r+0x114>
 800b70a:	9207      	str	r2, [sp, #28]
 800b70c:	e014      	b.n	800b738 <_svfiprintf_r+0x114>
 800b70e:	eba0 0308 	sub.w	r3, r0, r8
 800b712:	fa09 f303 	lsl.w	r3, r9, r3
 800b716:	4313      	orrs	r3, r2
 800b718:	9304      	str	r3, [sp, #16]
 800b71a:	46a2      	mov	sl, r4
 800b71c:	e7d2      	b.n	800b6c4 <_svfiprintf_r+0xa0>
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	1d19      	adds	r1, r3, #4
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	9103      	str	r1, [sp, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	bfbb      	ittet	lt
 800b72a:	425b      	neglt	r3, r3
 800b72c:	f042 0202 	orrlt.w	r2, r2, #2
 800b730:	9307      	strge	r3, [sp, #28]
 800b732:	9307      	strlt	r3, [sp, #28]
 800b734:	bfb8      	it	lt
 800b736:	9204      	strlt	r2, [sp, #16]
 800b738:	7823      	ldrb	r3, [r4, #0]
 800b73a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b73c:	d10a      	bne.n	800b754 <_svfiprintf_r+0x130>
 800b73e:	7863      	ldrb	r3, [r4, #1]
 800b740:	2b2a      	cmp	r3, #42	@ 0x2a
 800b742:	d132      	bne.n	800b7aa <_svfiprintf_r+0x186>
 800b744:	9b03      	ldr	r3, [sp, #12]
 800b746:	1d1a      	adds	r2, r3, #4
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	9203      	str	r2, [sp, #12]
 800b74c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b750:	3402      	adds	r4, #2
 800b752:	9305      	str	r3, [sp, #20]
 800b754:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b818 <_svfiprintf_r+0x1f4>
 800b758:	7821      	ldrb	r1, [r4, #0]
 800b75a:	2203      	movs	r2, #3
 800b75c:	4650      	mov	r0, sl
 800b75e:	f7f4 fddf 	bl	8000320 <memchr>
 800b762:	b138      	cbz	r0, 800b774 <_svfiprintf_r+0x150>
 800b764:	9b04      	ldr	r3, [sp, #16]
 800b766:	eba0 000a 	sub.w	r0, r0, sl
 800b76a:	2240      	movs	r2, #64	@ 0x40
 800b76c:	4082      	lsls	r2, r0
 800b76e:	4313      	orrs	r3, r2
 800b770:	3401      	adds	r4, #1
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b778:	4824      	ldr	r0, [pc, #144]	@ (800b80c <_svfiprintf_r+0x1e8>)
 800b77a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b77e:	2206      	movs	r2, #6
 800b780:	f7f4 fdce 	bl	8000320 <memchr>
 800b784:	2800      	cmp	r0, #0
 800b786:	d036      	beq.n	800b7f6 <_svfiprintf_r+0x1d2>
 800b788:	4b21      	ldr	r3, [pc, #132]	@ (800b810 <_svfiprintf_r+0x1ec>)
 800b78a:	bb1b      	cbnz	r3, 800b7d4 <_svfiprintf_r+0x1b0>
 800b78c:	9b03      	ldr	r3, [sp, #12]
 800b78e:	3307      	adds	r3, #7
 800b790:	f023 0307 	bic.w	r3, r3, #7
 800b794:	3308      	adds	r3, #8
 800b796:	9303      	str	r3, [sp, #12]
 800b798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b79a:	4433      	add	r3, r6
 800b79c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b79e:	e76a      	b.n	800b676 <_svfiprintf_r+0x52>
 800b7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	2001      	movs	r0, #1
 800b7a8:	e7a8      	b.n	800b6fc <_svfiprintf_r+0xd8>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	3401      	adds	r4, #1
 800b7ae:	9305      	str	r3, [sp, #20]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	f04f 0c0a 	mov.w	ip, #10
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7bc:	3a30      	subs	r2, #48	@ 0x30
 800b7be:	2a09      	cmp	r2, #9
 800b7c0:	d903      	bls.n	800b7ca <_svfiprintf_r+0x1a6>
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0c6      	beq.n	800b754 <_svfiprintf_r+0x130>
 800b7c6:	9105      	str	r1, [sp, #20]
 800b7c8:	e7c4      	b.n	800b754 <_svfiprintf_r+0x130>
 800b7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e7f0      	b.n	800b7b6 <_svfiprintf_r+0x192>
 800b7d4:	ab03      	add	r3, sp, #12
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	462a      	mov	r2, r5
 800b7da:	4b0e      	ldr	r3, [pc, #56]	@ (800b814 <_svfiprintf_r+0x1f0>)
 800b7dc:	a904      	add	r1, sp, #16
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f3af 8000 	nop.w
 800b7e4:	1c42      	adds	r2, r0, #1
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	d1d6      	bne.n	800b798 <_svfiprintf_r+0x174>
 800b7ea:	89ab      	ldrh	r3, [r5, #12]
 800b7ec:	065b      	lsls	r3, r3, #25
 800b7ee:	f53f af2d 	bmi.w	800b64c <_svfiprintf_r+0x28>
 800b7f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7f4:	e72c      	b.n	800b650 <_svfiprintf_r+0x2c>
 800b7f6:	ab03      	add	r3, sp, #12
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	4b05      	ldr	r3, [pc, #20]	@ (800b814 <_svfiprintf_r+0x1f0>)
 800b7fe:	a904      	add	r1, sp, #16
 800b800:	4638      	mov	r0, r7
 800b802:	f000 f879 	bl	800b8f8 <_printf_i>
 800b806:	e7ed      	b.n	800b7e4 <_svfiprintf_r+0x1c0>
 800b808:	0800be50 	.word	0x0800be50
 800b80c:	0800be5a 	.word	0x0800be5a
 800b810:	00000000 	.word	0x00000000
 800b814:	0800b56d 	.word	0x0800b56d
 800b818:	0800be56 	.word	0x0800be56

0800b81c <_printf_common>:
 800b81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b820:	4616      	mov	r6, r2
 800b822:	4698      	mov	r8, r3
 800b824:	688a      	ldr	r2, [r1, #8]
 800b826:	690b      	ldr	r3, [r1, #16]
 800b828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b82c:	4293      	cmp	r3, r2
 800b82e:	bfb8      	it	lt
 800b830:	4613      	movlt	r3, r2
 800b832:	6033      	str	r3, [r6, #0]
 800b834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b838:	4607      	mov	r7, r0
 800b83a:	460c      	mov	r4, r1
 800b83c:	b10a      	cbz	r2, 800b842 <_printf_common+0x26>
 800b83e:	3301      	adds	r3, #1
 800b840:	6033      	str	r3, [r6, #0]
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	0699      	lsls	r1, r3, #26
 800b846:	bf42      	ittt	mi
 800b848:	6833      	ldrmi	r3, [r6, #0]
 800b84a:	3302      	addmi	r3, #2
 800b84c:	6033      	strmi	r3, [r6, #0]
 800b84e:	6825      	ldr	r5, [r4, #0]
 800b850:	f015 0506 	ands.w	r5, r5, #6
 800b854:	d106      	bne.n	800b864 <_printf_common+0x48>
 800b856:	f104 0a19 	add.w	sl, r4, #25
 800b85a:	68e3      	ldr	r3, [r4, #12]
 800b85c:	6832      	ldr	r2, [r6, #0]
 800b85e:	1a9b      	subs	r3, r3, r2
 800b860:	42ab      	cmp	r3, r5
 800b862:	dc26      	bgt.n	800b8b2 <_printf_common+0x96>
 800b864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b868:	6822      	ldr	r2, [r4, #0]
 800b86a:	3b00      	subs	r3, #0
 800b86c:	bf18      	it	ne
 800b86e:	2301      	movne	r3, #1
 800b870:	0692      	lsls	r2, r2, #26
 800b872:	d42b      	bmi.n	800b8cc <_printf_common+0xb0>
 800b874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b878:	4641      	mov	r1, r8
 800b87a:	4638      	mov	r0, r7
 800b87c:	47c8      	blx	r9
 800b87e:	3001      	adds	r0, #1
 800b880:	d01e      	beq.n	800b8c0 <_printf_common+0xa4>
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	6922      	ldr	r2, [r4, #16]
 800b886:	f003 0306 	and.w	r3, r3, #6
 800b88a:	2b04      	cmp	r3, #4
 800b88c:	bf02      	ittt	eq
 800b88e:	68e5      	ldreq	r5, [r4, #12]
 800b890:	6833      	ldreq	r3, [r6, #0]
 800b892:	1aed      	subeq	r5, r5, r3
 800b894:	68a3      	ldr	r3, [r4, #8]
 800b896:	bf0c      	ite	eq
 800b898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b89c:	2500      	movne	r5, #0
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	bfc4      	itt	gt
 800b8a2:	1a9b      	subgt	r3, r3, r2
 800b8a4:	18ed      	addgt	r5, r5, r3
 800b8a6:	2600      	movs	r6, #0
 800b8a8:	341a      	adds	r4, #26
 800b8aa:	42b5      	cmp	r5, r6
 800b8ac:	d11a      	bne.n	800b8e4 <_printf_common+0xc8>
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	e008      	b.n	800b8c4 <_printf_common+0xa8>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	4652      	mov	r2, sl
 800b8b6:	4641      	mov	r1, r8
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	47c8      	blx	r9
 800b8bc:	3001      	adds	r0, #1
 800b8be:	d103      	bne.n	800b8c8 <_printf_common+0xac>
 800b8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c8:	3501      	adds	r5, #1
 800b8ca:	e7c6      	b.n	800b85a <_printf_common+0x3e>
 800b8cc:	18e1      	adds	r1, r4, r3
 800b8ce:	1c5a      	adds	r2, r3, #1
 800b8d0:	2030      	movs	r0, #48	@ 0x30
 800b8d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8d6:	4422      	add	r2, r4
 800b8d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8e0:	3302      	adds	r3, #2
 800b8e2:	e7c7      	b.n	800b874 <_printf_common+0x58>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	4622      	mov	r2, r4
 800b8e8:	4641      	mov	r1, r8
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	47c8      	blx	r9
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	d0e6      	beq.n	800b8c0 <_printf_common+0xa4>
 800b8f2:	3601      	adds	r6, #1
 800b8f4:	e7d9      	b.n	800b8aa <_printf_common+0x8e>
	...

0800b8f8 <_printf_i>:
 800b8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8fc:	7e0f      	ldrb	r7, [r1, #24]
 800b8fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b900:	2f78      	cmp	r7, #120	@ 0x78
 800b902:	4691      	mov	r9, r2
 800b904:	4680      	mov	r8, r0
 800b906:	460c      	mov	r4, r1
 800b908:	469a      	mov	sl, r3
 800b90a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b90e:	d807      	bhi.n	800b920 <_printf_i+0x28>
 800b910:	2f62      	cmp	r7, #98	@ 0x62
 800b912:	d80a      	bhi.n	800b92a <_printf_i+0x32>
 800b914:	2f00      	cmp	r7, #0
 800b916:	f000 80d2 	beq.w	800babe <_printf_i+0x1c6>
 800b91a:	2f58      	cmp	r7, #88	@ 0x58
 800b91c:	f000 80b9 	beq.w	800ba92 <_printf_i+0x19a>
 800b920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b928:	e03a      	b.n	800b9a0 <_printf_i+0xa8>
 800b92a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b92e:	2b15      	cmp	r3, #21
 800b930:	d8f6      	bhi.n	800b920 <_printf_i+0x28>
 800b932:	a101      	add	r1, pc, #4	@ (adr r1, 800b938 <_printf_i+0x40>)
 800b934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b938:	0800b991 	.word	0x0800b991
 800b93c:	0800b9a5 	.word	0x0800b9a5
 800b940:	0800b921 	.word	0x0800b921
 800b944:	0800b921 	.word	0x0800b921
 800b948:	0800b921 	.word	0x0800b921
 800b94c:	0800b921 	.word	0x0800b921
 800b950:	0800b9a5 	.word	0x0800b9a5
 800b954:	0800b921 	.word	0x0800b921
 800b958:	0800b921 	.word	0x0800b921
 800b95c:	0800b921 	.word	0x0800b921
 800b960:	0800b921 	.word	0x0800b921
 800b964:	0800baa5 	.word	0x0800baa5
 800b968:	0800b9cf 	.word	0x0800b9cf
 800b96c:	0800ba5f 	.word	0x0800ba5f
 800b970:	0800b921 	.word	0x0800b921
 800b974:	0800b921 	.word	0x0800b921
 800b978:	0800bac7 	.word	0x0800bac7
 800b97c:	0800b921 	.word	0x0800b921
 800b980:	0800b9cf 	.word	0x0800b9cf
 800b984:	0800b921 	.word	0x0800b921
 800b988:	0800b921 	.word	0x0800b921
 800b98c:	0800ba67 	.word	0x0800ba67
 800b990:	6833      	ldr	r3, [r6, #0]
 800b992:	1d1a      	adds	r2, r3, #4
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	6032      	str	r2, [r6, #0]
 800b998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b99c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e09d      	b.n	800bae0 <_printf_i+0x1e8>
 800b9a4:	6833      	ldr	r3, [r6, #0]
 800b9a6:	6820      	ldr	r0, [r4, #0]
 800b9a8:	1d19      	adds	r1, r3, #4
 800b9aa:	6031      	str	r1, [r6, #0]
 800b9ac:	0606      	lsls	r6, r0, #24
 800b9ae:	d501      	bpl.n	800b9b4 <_printf_i+0xbc>
 800b9b0:	681d      	ldr	r5, [r3, #0]
 800b9b2:	e003      	b.n	800b9bc <_printf_i+0xc4>
 800b9b4:	0645      	lsls	r5, r0, #25
 800b9b6:	d5fb      	bpl.n	800b9b0 <_printf_i+0xb8>
 800b9b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9bc:	2d00      	cmp	r5, #0
 800b9be:	da03      	bge.n	800b9c8 <_printf_i+0xd0>
 800b9c0:	232d      	movs	r3, #45	@ 0x2d
 800b9c2:	426d      	negs	r5, r5
 800b9c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9c8:	4859      	ldr	r0, [pc, #356]	@ (800bb30 <_printf_i+0x238>)
 800b9ca:	230a      	movs	r3, #10
 800b9cc:	e011      	b.n	800b9f2 <_printf_i+0xfa>
 800b9ce:	6821      	ldr	r1, [r4, #0]
 800b9d0:	6833      	ldr	r3, [r6, #0]
 800b9d2:	0608      	lsls	r0, r1, #24
 800b9d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9d8:	d402      	bmi.n	800b9e0 <_printf_i+0xe8>
 800b9da:	0649      	lsls	r1, r1, #25
 800b9dc:	bf48      	it	mi
 800b9de:	b2ad      	uxthmi	r5, r5
 800b9e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9e2:	4853      	ldr	r0, [pc, #332]	@ (800bb30 <_printf_i+0x238>)
 800b9e4:	6033      	str	r3, [r6, #0]
 800b9e6:	bf14      	ite	ne
 800b9e8:	230a      	movne	r3, #10
 800b9ea:	2308      	moveq	r3, #8
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9f2:	6866      	ldr	r6, [r4, #4]
 800b9f4:	60a6      	str	r6, [r4, #8]
 800b9f6:	2e00      	cmp	r6, #0
 800b9f8:	bfa2      	ittt	ge
 800b9fa:	6821      	ldrge	r1, [r4, #0]
 800b9fc:	f021 0104 	bicge.w	r1, r1, #4
 800ba00:	6021      	strge	r1, [r4, #0]
 800ba02:	b90d      	cbnz	r5, 800ba08 <_printf_i+0x110>
 800ba04:	2e00      	cmp	r6, #0
 800ba06:	d04b      	beq.n	800baa0 <_printf_i+0x1a8>
 800ba08:	4616      	mov	r6, r2
 800ba0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba0e:	fb03 5711 	mls	r7, r3, r1, r5
 800ba12:	5dc7      	ldrb	r7, [r0, r7]
 800ba14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba18:	462f      	mov	r7, r5
 800ba1a:	42bb      	cmp	r3, r7
 800ba1c:	460d      	mov	r5, r1
 800ba1e:	d9f4      	bls.n	800ba0a <_printf_i+0x112>
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	d10b      	bne.n	800ba3c <_printf_i+0x144>
 800ba24:	6823      	ldr	r3, [r4, #0]
 800ba26:	07df      	lsls	r7, r3, #31
 800ba28:	d508      	bpl.n	800ba3c <_printf_i+0x144>
 800ba2a:	6923      	ldr	r3, [r4, #16]
 800ba2c:	6861      	ldr	r1, [r4, #4]
 800ba2e:	4299      	cmp	r1, r3
 800ba30:	bfde      	ittt	le
 800ba32:	2330      	movle	r3, #48	@ 0x30
 800ba34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba38:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba3c:	1b92      	subs	r2, r2, r6
 800ba3e:	6122      	str	r2, [r4, #16]
 800ba40:	f8cd a000 	str.w	sl, [sp]
 800ba44:	464b      	mov	r3, r9
 800ba46:	aa03      	add	r2, sp, #12
 800ba48:	4621      	mov	r1, r4
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	f7ff fee6 	bl	800b81c <_printf_common>
 800ba50:	3001      	adds	r0, #1
 800ba52:	d14a      	bne.n	800baea <_printf_i+0x1f2>
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295
 800ba58:	b004      	add	sp, #16
 800ba5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	f043 0320 	orr.w	r3, r3, #32
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	4833      	ldr	r0, [pc, #204]	@ (800bb34 <_printf_i+0x23c>)
 800ba68:	2778      	movs	r7, #120	@ 0x78
 800ba6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	6831      	ldr	r1, [r6, #0]
 800ba72:	061f      	lsls	r7, r3, #24
 800ba74:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba78:	d402      	bmi.n	800ba80 <_printf_i+0x188>
 800ba7a:	065f      	lsls	r7, r3, #25
 800ba7c:	bf48      	it	mi
 800ba7e:	b2ad      	uxthmi	r5, r5
 800ba80:	6031      	str	r1, [r6, #0]
 800ba82:	07d9      	lsls	r1, r3, #31
 800ba84:	bf44      	itt	mi
 800ba86:	f043 0320 	orrmi.w	r3, r3, #32
 800ba8a:	6023      	strmi	r3, [r4, #0]
 800ba8c:	b11d      	cbz	r5, 800ba96 <_printf_i+0x19e>
 800ba8e:	2310      	movs	r3, #16
 800ba90:	e7ac      	b.n	800b9ec <_printf_i+0xf4>
 800ba92:	4827      	ldr	r0, [pc, #156]	@ (800bb30 <_printf_i+0x238>)
 800ba94:	e7e9      	b.n	800ba6a <_printf_i+0x172>
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	f023 0320 	bic.w	r3, r3, #32
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	e7f6      	b.n	800ba8e <_printf_i+0x196>
 800baa0:	4616      	mov	r6, r2
 800baa2:	e7bd      	b.n	800ba20 <_printf_i+0x128>
 800baa4:	6833      	ldr	r3, [r6, #0]
 800baa6:	6825      	ldr	r5, [r4, #0]
 800baa8:	6961      	ldr	r1, [r4, #20]
 800baaa:	1d18      	adds	r0, r3, #4
 800baac:	6030      	str	r0, [r6, #0]
 800baae:	062e      	lsls	r6, r5, #24
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	d501      	bpl.n	800bab8 <_printf_i+0x1c0>
 800bab4:	6019      	str	r1, [r3, #0]
 800bab6:	e002      	b.n	800babe <_printf_i+0x1c6>
 800bab8:	0668      	lsls	r0, r5, #25
 800baba:	d5fb      	bpl.n	800bab4 <_printf_i+0x1bc>
 800babc:	8019      	strh	r1, [r3, #0]
 800babe:	2300      	movs	r3, #0
 800bac0:	6123      	str	r3, [r4, #16]
 800bac2:	4616      	mov	r6, r2
 800bac4:	e7bc      	b.n	800ba40 <_printf_i+0x148>
 800bac6:	6833      	ldr	r3, [r6, #0]
 800bac8:	1d1a      	adds	r2, r3, #4
 800baca:	6032      	str	r2, [r6, #0]
 800bacc:	681e      	ldr	r6, [r3, #0]
 800bace:	6862      	ldr	r2, [r4, #4]
 800bad0:	2100      	movs	r1, #0
 800bad2:	4630      	mov	r0, r6
 800bad4:	f7f4 fc24 	bl	8000320 <memchr>
 800bad8:	b108      	cbz	r0, 800bade <_printf_i+0x1e6>
 800bada:	1b80      	subs	r0, r0, r6
 800badc:	6060      	str	r0, [r4, #4]
 800bade:	6863      	ldr	r3, [r4, #4]
 800bae0:	6123      	str	r3, [r4, #16]
 800bae2:	2300      	movs	r3, #0
 800bae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bae8:	e7aa      	b.n	800ba40 <_printf_i+0x148>
 800baea:	6923      	ldr	r3, [r4, #16]
 800baec:	4632      	mov	r2, r6
 800baee:	4649      	mov	r1, r9
 800baf0:	4640      	mov	r0, r8
 800baf2:	47d0      	blx	sl
 800baf4:	3001      	adds	r0, #1
 800baf6:	d0ad      	beq.n	800ba54 <_printf_i+0x15c>
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	079b      	lsls	r3, r3, #30
 800bafc:	d413      	bmi.n	800bb26 <_printf_i+0x22e>
 800bafe:	68e0      	ldr	r0, [r4, #12]
 800bb00:	9b03      	ldr	r3, [sp, #12]
 800bb02:	4298      	cmp	r0, r3
 800bb04:	bfb8      	it	lt
 800bb06:	4618      	movlt	r0, r3
 800bb08:	e7a6      	b.n	800ba58 <_printf_i+0x160>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	4649      	mov	r1, r9
 800bb10:	4640      	mov	r0, r8
 800bb12:	47d0      	blx	sl
 800bb14:	3001      	adds	r0, #1
 800bb16:	d09d      	beq.n	800ba54 <_printf_i+0x15c>
 800bb18:	3501      	adds	r5, #1
 800bb1a:	68e3      	ldr	r3, [r4, #12]
 800bb1c:	9903      	ldr	r1, [sp, #12]
 800bb1e:	1a5b      	subs	r3, r3, r1
 800bb20:	42ab      	cmp	r3, r5
 800bb22:	dcf2      	bgt.n	800bb0a <_printf_i+0x212>
 800bb24:	e7eb      	b.n	800bafe <_printf_i+0x206>
 800bb26:	2500      	movs	r5, #0
 800bb28:	f104 0619 	add.w	r6, r4, #25
 800bb2c:	e7f5      	b.n	800bb1a <_printf_i+0x222>
 800bb2e:	bf00      	nop
 800bb30:	0800be61 	.word	0x0800be61
 800bb34:	0800be72 	.word	0x0800be72

0800bb38 <memmove>:
 800bb38:	4288      	cmp	r0, r1
 800bb3a:	b510      	push	{r4, lr}
 800bb3c:	eb01 0402 	add.w	r4, r1, r2
 800bb40:	d902      	bls.n	800bb48 <memmove+0x10>
 800bb42:	4284      	cmp	r4, r0
 800bb44:	4623      	mov	r3, r4
 800bb46:	d807      	bhi.n	800bb58 <memmove+0x20>
 800bb48:	1e43      	subs	r3, r0, #1
 800bb4a:	42a1      	cmp	r1, r4
 800bb4c:	d008      	beq.n	800bb60 <memmove+0x28>
 800bb4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb56:	e7f8      	b.n	800bb4a <memmove+0x12>
 800bb58:	4402      	add	r2, r0
 800bb5a:	4601      	mov	r1, r0
 800bb5c:	428a      	cmp	r2, r1
 800bb5e:	d100      	bne.n	800bb62 <memmove+0x2a>
 800bb60:	bd10      	pop	{r4, pc}
 800bb62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb6a:	e7f7      	b.n	800bb5c <memmove+0x24>

0800bb6c <_sbrk_r>:
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	4d06      	ldr	r5, [pc, #24]	@ (800bb88 <_sbrk_r+0x1c>)
 800bb70:	2300      	movs	r3, #0
 800bb72:	4604      	mov	r4, r0
 800bb74:	4608      	mov	r0, r1
 800bb76:	602b      	str	r3, [r5, #0]
 800bb78:	f7f5 fed6 	bl	8001928 <_sbrk>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	d102      	bne.n	800bb86 <_sbrk_r+0x1a>
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	b103      	cbz	r3, 800bb86 <_sbrk_r+0x1a>
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	bd38      	pop	{r3, r4, r5, pc}
 800bb88:	240010b4 	.word	0x240010b4

0800bb8c <memcpy>:
 800bb8c:	440a      	add	r2, r1
 800bb8e:	4291      	cmp	r1, r2
 800bb90:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb94:	d100      	bne.n	800bb98 <memcpy+0xc>
 800bb96:	4770      	bx	lr
 800bb98:	b510      	push	{r4, lr}
 800bb9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bba2:	4291      	cmp	r1, r2
 800bba4:	d1f9      	bne.n	800bb9a <memcpy+0xe>
 800bba6:	bd10      	pop	{r4, pc}

0800bba8 <_realloc_r>:
 800bba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbac:	4680      	mov	r8, r0
 800bbae:	4615      	mov	r5, r2
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	b921      	cbnz	r1, 800bbbe <_realloc_r+0x16>
 800bbb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb8:	4611      	mov	r1, r2
 800bbba:	f7ff bc4b 	b.w	800b454 <_malloc_r>
 800bbbe:	b92a      	cbnz	r2, 800bbcc <_realloc_r+0x24>
 800bbc0:	f7ff fbdc 	bl	800b37c <_free_r>
 800bbc4:	2400      	movs	r4, #0
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbcc:	f000 f81a 	bl	800bc04 <_malloc_usable_size_r>
 800bbd0:	4285      	cmp	r5, r0
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	d802      	bhi.n	800bbdc <_realloc_r+0x34>
 800bbd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bbda:	d8f4      	bhi.n	800bbc6 <_realloc_r+0x1e>
 800bbdc:	4629      	mov	r1, r5
 800bbde:	4640      	mov	r0, r8
 800bbe0:	f7ff fc38 	bl	800b454 <_malloc_r>
 800bbe4:	4607      	mov	r7, r0
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d0ec      	beq.n	800bbc4 <_realloc_r+0x1c>
 800bbea:	42b5      	cmp	r5, r6
 800bbec:	462a      	mov	r2, r5
 800bbee:	4621      	mov	r1, r4
 800bbf0:	bf28      	it	cs
 800bbf2:	4632      	movcs	r2, r6
 800bbf4:	f7ff ffca 	bl	800bb8c <memcpy>
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	f7ff fbbe 	bl	800b37c <_free_r>
 800bc00:	463c      	mov	r4, r7
 800bc02:	e7e0      	b.n	800bbc6 <_realloc_r+0x1e>

0800bc04 <_malloc_usable_size_r>:
 800bc04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc08:	1f18      	subs	r0, r3, #4
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	bfbc      	itt	lt
 800bc0e:	580b      	ldrlt	r3, [r1, r0]
 800bc10:	18c0      	addlt	r0, r0, r3
 800bc12:	4770      	bx	lr

0800bc14 <_init>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	bf00      	nop
 800bc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1a:	bc08      	pop	{r3}
 800bc1c:	469e      	mov	lr, r3
 800bc1e:	4770      	bx	lr

0800bc20 <_fini>:
 800bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc22:	bf00      	nop
 800bc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc26:	bc08      	pop	{r3}
 800bc28:	469e      	mov	lr, r3
 800bc2a:	4770      	bx	lr
