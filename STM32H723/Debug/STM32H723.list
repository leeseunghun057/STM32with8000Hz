
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba50  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800bd20  0800bd20  0000cd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf30  0800bf30  0000cf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf38  0800bf38  0000cf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bf3c  0800bf3c  0000cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000318  24000000  0800bf40  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000fb8  24000318  0800c258  0000d318  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240012d0  0800c258  0000e2d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019436  00000000  00000000  0000d346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003693  00000000  00000000  0002677c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001188  00000000  00000000  00029e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d55  00000000  00000000  0002af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000106fa  00000000  00000000  0002bced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00006568  00000000  00000000  0003c3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0004294f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004da0  00000000  00000000  00042994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  00047734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000318 	.word	0x24000318
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bd08 	.word	0x0800bd08

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400031c 	.word	0x2400031c
 800030c:	0800bd08 	.word	0x0800bd08

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:




// GPIO 상태를 스캔하고 변경된 핀 정보를 반환하는 함수
MatrixScanResult MatrixScan() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0d0      	sub	sp, #320	@ 0x140
 80006b4:	af04      	add	r7, sp, #16
 80006b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80006be:	6018      	str	r0, [r3, #0]
    // 이전 GPIO 상태를 static으로 유지

	uint32_t CurrentTime = HAL_GetTick();
 80006c0:	f001 fb3c 	bl	8001d3c <HAL_GetTick>
 80006c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    static uint32_t Last_gpioG_state = 0;
    //static uint32_t Last_gpioH_state = 0;
    //static uint32_t Last_gpioI_state = 0;

    // 현재 GPIO 상태 읽기
    uint32_t gpioA_state = (~(GPIOA->IDR)) & 0b1001111111010000; //핀 마스킹
 80006c8:	4bc4      	ldr	r3, [pc, #784]	@ (80009dc <MatrixScan+0x32c>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	43da      	mvns	r2, r3
 80006ce:	f649 73d0 	movw	r3, #40912	@ 0x9fd0
 80006d2:	4013      	ands	r3, r2
 80006d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    uint32_t gpioB_state = (~(GPIOB->IDR)) & 0b1100001111011100;
 80006d8:	4bc1      	ldr	r3, [pc, #772]	@ (80009e0 <MatrixScan+0x330>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	43da      	mvns	r2, r3
 80006de:	f24c 33dc 	movw	r3, #50140	@ 0xc3dc
 80006e2:	4013      	ands	r3, r2
 80006e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    uint32_t gpioC_state = (~(GPIOC->IDR)) & 0b1111111111110010;
 80006e8:	4bbe      	ldr	r3, [pc, #760]	@ (80009e4 <MatrixScan+0x334>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	43da      	mvns	r2, r3
 80006ee:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80006f2:	4013      	ands	r3, r2
 80006f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    uint32_t gpioD_state = (~(GPIOD->IDR)) & 0b1111111111111111;
 80006f8:	4bbb      	ldr	r3, [pc, #748]	@ (80009e8 <MatrixScan+0x338>)
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	43db      	mvns	r3, r3
 80006fe:	b29b      	uxth	r3, r3
 8000700:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    uint32_t gpioE_state = (~(GPIOE->IDR)) & 0b1111111111110111;
 8000704:	4bb9      	ldr	r3, [pc, #740]	@ (80009ec <MatrixScan+0x33c>)
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	43da      	mvns	r2, r3
 800070a:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800070e:	4013      	ands	r3, r2
 8000710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    uint32_t gpioF_state = (~(GPIOF->IDR)) & 0b1111111111111111;
 8000714:	4bb6      	ldr	r3, [pc, #728]	@ (80009f0 <MatrixScan+0x340>)
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	43db      	mvns	r3, r3
 800071a:	b29b      	uxth	r3, r3
 800071c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    uint32_t gpioG_state = (~(GPIOG->IDR)) & 0b1111111111111111;
 8000720:	4bb4      	ldr	r3, [pc, #720]	@ (80009f4 <MatrixScan+0x344>)
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	43db      	mvns	r3, r3
 8000726:	b29b      	uxth	r3, r3
 8000728:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    //uint32_t gpioH_state = (~(GPIOH->IDR)) & 0b0011111111111100;
    //uint32_t gpioI_state = (-(GPIOI->IDR)) & 0b1111111111111111;


    // 변경된 비트 계산 (XOR 연산)
    uint32_t changedPinA = gpioA_state ^ Last_gpioA_state;
 800072c:	4bb2      	ldr	r3, [pc, #712]	@ (80009f8 <MatrixScan+0x348>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8000734:	4053      	eors	r3, r2
 8000736:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    uint32_t changedPinB = gpioB_state ^ Last_gpioB_state;
 800073a:	4bb0      	ldr	r3, [pc, #704]	@ (80009fc <MatrixScan+0x34c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000742:	4053      	eors	r3, r2
 8000744:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    uint32_t changedPinC = gpioC_state ^ Last_gpioC_state;
 8000748:	4bad      	ldr	r3, [pc, #692]	@ (8000a00 <MatrixScan+0x350>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000750:	4053      	eors	r3, r2
 8000752:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 8000756:	4bab      	ldr	r3, [pc, #684]	@ (8000a04 <MatrixScan+0x354>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800075e:	4053      	eors	r3, r2
 8000760:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 8000764:	4ba8      	ldr	r3, [pc, #672]	@ (8000a08 <MatrixScan+0x358>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800076c:	4053      	eors	r3, r2
 800076e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    uint32_t changedPinF = gpioF_state ^ Last_gpioF_state;
 8000772:	4ba6      	ldr	r3, [pc, #664]	@ (8000a0c <MatrixScan+0x35c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800077a:	4053      	eors	r3, r2
 800077c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint32_t changedPinG = gpioG_state ^ Last_gpioG_state;
 8000780:	4ba3      	ldr	r3, [pc, #652]	@ (8000a10 <MatrixScan+0x360>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000788:	4053      	eors	r3, r2
 800078a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    //uint32_t changedPinH = gpioH_state ^ Last_gpioH_state;
    //uint32_t changedPinI = gpioI_state ^ Last_gpioI_state;

    MatrixScanResult result;
    result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    result.pinState = -1;
 8000796:	23ff      	movs	r3, #255	@ 0xff
 8000798:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4


    char message3[100];
    sprintf(message3, "A = %u | B = %u | C = %u | D = %u | E = %u \n\r", ~(GPIOA->IDR),gpioB_state,gpioC_state,gpioD_state,gpioE_state );
 800079c:	4b8f      	ldr	r3, [pc, #572]	@ (80009dc <MatrixScan+0x32c>)
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	43da      	mvns	r2, r3
 80007a2:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80007a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80007aa:	9302      	str	r3, [sp, #8]
 80007ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80007bc:	4995      	ldr	r1, [pc, #596]	@ (8000a14 <MatrixScan+0x364>)
 80007be:	f00a fe03 	bl	800b3c8 <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message3, strlen(message3), HAL_MAX_DELAY);
 80007c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fda2 	bl	8000310 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	488f      	ldr	r0, [pc, #572]	@ (8000a18 <MatrixScan+0x368>)
 80007da:	f005 fe59 	bl	8006490 <HAL_UART_Transmit>

    // 포트 A~E 순서대로 변경된 핀 확인
    if (changedPinA != 0)
 80007de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d04c      	beq.n	8000880 <MatrixScan+0x1d0>
    {
        int bitPosition = -1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        while ( changedPinA )
 80007ee:	e009      	b.n	8000804 <MatrixScan+0x154>
        {
            changedPinA >>= 1; // 오른쪽으로 시프트
 80007f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
            bitPosition++;
 80007fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80007fe:	3301      	adds	r3, #1
 8000800:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        while ( changedPinA )
 8000804:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1f1      	bne.n	80007f0 <MatrixScan+0x140>
        }


        result.pinNumber = bitPosition; // 핀 번호 (포트 A는 0 ~ 15)
 800080c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioA_state >> bitPosition) & 1; // 현재 상태
 8000814:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8000818:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800081c:	fa22 f303 	lsr.w	r3, r2, r3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4


        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 800082c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000830:	4a7a      	ldr	r2, [pc, #488]	@ (8000a1c <MatrixScan+0x36c>)
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	2b05      	cmp	r3, #5
 800083e:	d90b      	bls.n	8000858 <MatrixScan+0x1a8>
        {
        	Last_gpioA_state = gpioA_state;
 8000840:	4a6d      	ldr	r2, [pc, #436]	@ (80009f8 <MatrixScan+0x348>)
 8000842:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000846:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800084c:	4973      	ldr	r1, [pc, #460]	@ (8000a1c <MatrixScan+0x36c>)
 800084e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000856:	e006      	b.n	8000866 <MatrixScan+0x1b6>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            result.pinState = -1;
 8000860:	23ff      	movs	r3, #255	@ 0xff
 8000862:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        }
        return result;
 8000866:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800086a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000876:	e893 0003 	ldmia.w	r3, {r0, r1}
 800087a:	e882 0003 	stmia.w	r2, {r0, r1}
 800087e:	e225      	b.n	8000ccc <MatrixScan+0x61c>
//        char message[100];
//        sprintf(message, "A | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinB != 0 )
 8000880:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000884:	2b00      	cmp	r3, #0
 8000886:	d04d      	beq.n	8000924 <MatrixScan+0x274>
    {
        int bitPosition = -1;
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        while ( changedPinB )
 8000890:	e009      	b.n	80008a6 <MatrixScan+0x1f6>
        {
            changedPinB >>= 1;
 8000892:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000896:	085b      	lsrs	r3, r3, #1
 8000898:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            bitPosition++;
 800089c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80008a0:	3301      	adds	r3, #1
 80008a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        while ( changedPinB )
 80008a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f1      	bne.n	8000892 <MatrixScan+0x1e2>
        }

        result.pinNumber = bitPosition + 16; // 핀 번호 (포트 B는 16 ~ 31)
 80008ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80008b2:	3310      	adds	r3, #16
 80008b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioB_state >> bitPosition) & 1;
 80008b8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80008bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 80008d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80008d4:	4a51      	ldr	r2, [pc, #324]	@ (8000a1c <MatrixScan+0x36c>)
 80008d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008da:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	2b05      	cmp	r3, #5
 80008e2:	d90b      	bls.n	80008fc <MatrixScan+0x24c>
        {
        	Last_gpioB_state = gpioB_state;
 80008e4:	4a45      	ldr	r2, [pc, #276]	@ (80009fc <MatrixScan+0x34c>)
 80008e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80008ea:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 80008ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80008f0:	494a      	ldr	r1, [pc, #296]	@ (8000a1c <MatrixScan+0x36c>)
 80008f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80008f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008fa:	e006      	b.n	800090a <MatrixScan+0x25a>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 80008fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            result.pinState = -1;
 8000904:	23ff      	movs	r3, #255	@ 0xff
 8000906:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        }
        return result;
 800090a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800090e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800091a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800091e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000922:	e1d3      	b.n	8000ccc <MatrixScan+0x61c>
//        char message[100];
//        sprintf(message, "B | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinC != 0 )
 8000924:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000928:	2b00      	cmp	r3, #0
 800092a:	d04d      	beq.n	80009c8 <MatrixScan+0x318>
    {
        int bitPosition = -1;
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        while ( changedPinC )
 8000934:	e009      	b.n	800094a <MatrixScan+0x29a>
        {
            changedPinC >>= 1;
 8000936:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800093a:	085b      	lsrs	r3, r3, #1
 800093c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            bitPosition++;
 8000940:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000944:	3301      	adds	r3, #1
 8000946:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        while ( changedPinC )
 800094a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1f1      	bne.n	8000936 <MatrixScan+0x286>
        }

        result.pinNumber = bitPosition + 32; // 핀 번호 (포트 C는 32 ~ 47)
 8000952:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000956:	3320      	adds	r3, #32
 8000958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioC_state >> bitPosition) & 1;
 800095c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000960:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000964:	fa22 f303 	lsr.w	r3, r2, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000974:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000978:	4a28      	ldr	r2, [pc, #160]	@ (8000a1c <MatrixScan+0x36c>)
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b05      	cmp	r3, #5
 8000986:	d90b      	bls.n	80009a0 <MatrixScan+0x2f0>
        {
        	Last_gpioC_state = gpioC_state;
 8000988:	4a1d      	ldr	r2, [pc, #116]	@ (8000a00 <MatrixScan+0x350>)
 800098a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800098e:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000990:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000994:	4921      	ldr	r1, [pc, #132]	@ (8000a1c <MatrixScan+0x36c>)
 8000996:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800099e:	e006      	b.n	80009ae <MatrixScan+0x2fe>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            result.pinState = -1;
 80009a8:	23ff      	movs	r3, #255	@ 0xff
 80009aa:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        }
        return result;
 80009ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80009be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009c2:	e882 0003 	stmia.w	r2, {r0, r1}
 80009c6:	e181      	b.n	8000ccc <MatrixScan+0x61c>
//        char message[100];
//        sprintf(message, "C | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinD != 0 )
 80009c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f000 8087 	beq.w	8000ae0 <MatrixScan+0x430>
    {
        int bitPosition = -1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        while ( changedPinD )
 80009da:	e02b      	b.n	8000a34 <MatrixScan+0x384>
 80009dc:	58020000 	.word	0x58020000
 80009e0:	58020400 	.word	0x58020400
 80009e4:	58020800 	.word	0x58020800
 80009e8:	58020c00 	.word	0x58020c00
 80009ec:	58021000 	.word	0x58021000
 80009f0:	58021400 	.word	0x58021400
 80009f4:	58021800 	.word	0x58021800
 80009f8:	2400078c 	.word	0x2400078c
 80009fc:	24000790 	.word	0x24000790
 8000a00:	24000794 	.word	0x24000794
 8000a04:	24000798 	.word	0x24000798
 8000a08:	2400079c 	.word	0x2400079c
 8000a0c:	240007a0 	.word	0x240007a0
 8000a10:	240007a4 	.word	0x240007a4
 8000a14:	0800bd20 	.word	0x0800bd20
 8000a18:	2400033c 	.word	0x2400033c
 8000a1c:	24000578 	.word	0x24000578
        {
            changedPinD >>= 1;
 8000a20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a24:	085b      	lsrs	r3, r3, #1
 8000a26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            bitPosition++;
 8000a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000a2e:	3301      	adds	r3, #1
 8000a30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        while ( changedPinD )
 8000a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f1      	bne.n	8000a20 <MatrixScan+0x370>
        }

        result.pinNumber = bitPosition + 48; // 핀 번호 (포트 D는 48 ~ 63)
 8000a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000a40:	3330      	adds	r3, #48	@ 0x30
 8000a42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioD_state >> bitPosition) & 1;
 8000a46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        char message[100];
        sprintf(message, "D | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a62:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8000a66:	f107 0008 	add.w	r0, r7, #8
 8000a6a:	499d      	ldr	r1, [pc, #628]	@ (8000ce0 <MatrixScan+0x630>)
 8000a6c:	f00a fcac 	bl	800b3c8 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fc4b 	bl	8000310 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	f107 0108 	add.w	r1, r7, #8
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	4897      	ldr	r0, [pc, #604]	@ (8000ce4 <MatrixScan+0x634>)
 8000a88:	f005 fd02 	bl	8006490 <HAL_UART_Transmit>

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000a8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a90:	4a95      	ldr	r2, [pc, #596]	@ (8000ce8 <MatrixScan+0x638>)
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	2b05      	cmp	r3, #5
 8000a9e:	d90b      	bls.n	8000ab8 <MatrixScan+0x408>
        {
        	Last_gpioD_state = gpioD_state;
 8000aa0:	4a92      	ldr	r2, [pc, #584]	@ (8000cec <MatrixScan+0x63c>)
 8000aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000aa6:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000aa8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000aac:	498e      	ldr	r1, [pc, #568]	@ (8000ce8 <MatrixScan+0x638>)
 8000aae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ab6:	e006      	b.n	8000ac6 <MatrixScan+0x416>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            result.pinState = -1;
 8000ac0:	23ff      	movs	r3, #255	@ 0xff
 8000ac2:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        }
        return result;
 8000ac6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000aca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000ad6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ada:	e882 0003 	stmia.w	r2, {r0, r1}





}
 8000ade:	e0f5      	b.n	8000ccc <MatrixScan+0x61c>
    else if ( changedPinE != 0 )
 8000ae0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d04d      	beq.n	8000b84 <MatrixScan+0x4d4>
        int bitPosition = -1;
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        while ( changedPinE )
 8000af0:	e009      	b.n	8000b06 <MatrixScan+0x456>
            changedPinE >>= 1;
 8000af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000af6:	085b      	lsrs	r3, r3, #1
 8000af8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
            bitPosition++;
 8000afc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000b00:	3301      	adds	r3, #1
 8000b02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        while ( changedPinE )
 8000b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f1      	bne.n	8000af2 <MatrixScan+0x442>
        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000b0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000b12:	3340      	adds	r3, #64	@ 0x40
 8000b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioE_state >> bitPosition) & 1;
 8000b18:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000b1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000b20:	fa22 f303 	lsr.w	r3, r2, r3
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000b30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000b34:	4a6c      	ldr	r2, [pc, #432]	@ (8000ce8 <MatrixScan+0x638>)
 8000b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	d90b      	bls.n	8000b5c <MatrixScan+0x4ac>
        	Last_gpioE_state = gpioE_state;
 8000b44:	4a6a      	ldr	r2, [pc, #424]	@ (8000cf0 <MatrixScan+0x640>)
 8000b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000b4a:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000b4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000b50:	4965      	ldr	r1, [pc, #404]	@ (8000ce8 <MatrixScan+0x638>)
 8000b52:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000b5a:	e006      	b.n	8000b6a <MatrixScan+0x4ba>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            result.pinState = -1;
 8000b64:	23ff      	movs	r3, #255	@ 0xff
 8000b66:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        return result;
 8000b6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000b7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b7e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000b82:	e0a3      	b.n	8000ccc <MatrixScan+0x61c>
    else if ( changedPinF != 0 )
 8000b84:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d04d      	beq.n	8000c28 <MatrixScan+0x578>
        int bitPosition = -1;
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
        while ( changedPinF )
 8000b94:	e009      	b.n	8000baa <MatrixScan+0x4fa>
            changedPinF >>= 1;
 8000b96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000b9a:	085b      	lsrs	r3, r3, #1
 8000b9c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            bitPosition++;
 8000ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
        while ( changedPinF )
 8000baa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f1      	bne.n	8000b96 <MatrixScan+0x4e6>
        result.pinNumber = bitPosition + 80; // 핀 번호 (포트 E는 64 ~ 79)
 8000bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000bb6:	3350      	adds	r3, #80	@ 0x50
 8000bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioF_state >> bitPosition) & 1;
 8000bbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000bd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000bd8:	4a43      	ldr	r2, [pc, #268]	@ (8000ce8 <MatrixScan+0x638>)
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b05      	cmp	r3, #5
 8000be6:	d90b      	bls.n	8000c00 <MatrixScan+0x550>
        	Last_gpioF_state = gpioF_state;
 8000be8:	4a42      	ldr	r2, [pc, #264]	@ (8000cf4 <MatrixScan+0x644>)
 8000bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000bee:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000bf0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000bf4:	493c      	ldr	r1, [pc, #240]	@ (8000ce8 <MatrixScan+0x638>)
 8000bf6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000bfe:	e006      	b.n	8000c0e <MatrixScan+0x55e>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            result.pinState = -1;
 8000c08:	23ff      	movs	r3, #255	@ 0xff
 8000c0a:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        return result;
 8000c0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000c1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c22:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c26:	e051      	b.n	8000ccc <MatrixScan+0x61c>
    else if ( changedPinG != 0 )
 8000c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d04c      	beq.n	8000cca <MatrixScan+0x61a>
        int bitPosition = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        while ( changedPinG )
 8000c36:	e009      	b.n	8000c4c <MatrixScan+0x59c>
        	changedPinG >>= 1;
 8000c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c3c:	085b      	lsrs	r3, r3, #1
 8000c3e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            bitPosition++;
 8000c42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000c46:	3301      	adds	r3, #1
 8000c48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        while ( changedPinG )
 8000c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f1      	bne.n	8000c38 <MatrixScan+0x588>
        result.pinNumber = bitPosition + 96; // 핀 번호 (포트 E는 64 ~ 79)
 8000c54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000c58:	3360      	adds	r3, #96	@ 0x60
 8000c5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioG_state >> bitPosition) & 1;
 8000c5e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000c66:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000c76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <MatrixScan+0x638>)
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b05      	cmp	r3, #5
 8000c88:	d90b      	bls.n	8000ca2 <MatrixScan+0x5f2>
        	Last_gpioG_state = gpioG_state;
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf8 <MatrixScan+0x648>)
 8000c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000c90:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000c92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000c96:	4914      	ldr	r1, [pc, #80]	@ (8000ce8 <MatrixScan+0x638>)
 8000c98:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ca0:	e006      	b.n	8000cb0 <MatrixScan+0x600>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            result.pinState = -1;
 8000caa:	23ff      	movs	r3, #255	@ 0xff
 8000cac:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
        return result;
 8000cb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000cc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cc4:	e882 0003 	stmia.w	r2, {r0, r1}
 8000cc8:	e000      	b.n	8000ccc <MatrixScan+0x61c>
}
 8000cca:	bf00      	nop
 8000ccc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	0800bd50 	.word	0x0800bd50
 8000ce4:	2400033c 	.word	0x2400033c
 8000ce8:	24000578 	.word	0x24000578
 8000cec:	24000798 	.word	0x24000798
 8000cf0:	2400079c 	.word	0x2400079c
 8000cf4:	240007a0 	.word	0x240007a0
 8000cf8:	240007a4 	.word	0x240007a4

08000cfc <SetKeycode>:




void SetKeycode(int keycode)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == 0x00)
 8000d04:	4b4a      	ldr	r3, [pc, #296]	@ (8000e30 <SetKeycode+0x134>)
 8000d06:	789b      	ldrb	r3, [r3, #2]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d104      	bne.n	8000d16 <SetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = keycode;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b47      	ldr	r3, [pc, #284]	@ (8000e30 <SetKeycode+0x134>)
 8000d12:	709a      	strb	r2, [r3, #2]
    }
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
    {
        keyboardReport.Keycode6 = keycode;
    }
}
 8000d14:	e086      	b.n	8000e24 <SetKeycode+0x128>
    else if (keyboardReport.Keycode2 == 0x00 && keycode != keyboardReport.Keycode1)
 8000d16:	4b46      	ldr	r3, [pc, #280]	@ (8000e30 <SetKeycode+0x134>)
 8000d18:	78db      	ldrb	r3, [r3, #3]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10a      	bne.n	8000d34 <SetKeycode+0x38>
 8000d1e:	4b44      	ldr	r3, [pc, #272]	@ (8000e30 <SetKeycode+0x134>)
 8000d20:	789b      	ldrb	r3, [r3, #2]
 8000d22:	461a      	mov	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d004      	beq.n	8000d34 <SetKeycode+0x38>
        keyboardReport.Keycode2 = keycode;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b40      	ldr	r3, [pc, #256]	@ (8000e30 <SetKeycode+0x134>)
 8000d30:	70da      	strb	r2, [r3, #3]
 8000d32:	e077      	b.n	8000e24 <SetKeycode+0x128>
    else if (keyboardReport.Keycode3 == 0x00 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d34:	4b3e      	ldr	r3, [pc, #248]	@ (8000e30 <SetKeycode+0x134>)
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d110      	bne.n	8000d5e <SetKeycode+0x62>
 8000d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e30 <SetKeycode+0x134>)
 8000d3e:	78db      	ldrb	r3, [r3, #3]
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d00a      	beq.n	8000d5e <SetKeycode+0x62>
 8000d48:	4b39      	ldr	r3, [pc, #228]	@ (8000e30 <SetKeycode+0x134>)
 8000d4a:	789b      	ldrb	r3, [r3, #2]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d004      	beq.n	8000d5e <SetKeycode+0x62>
        keyboardReport.Keycode3 = keycode;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b35      	ldr	r3, [pc, #212]	@ (8000e30 <SetKeycode+0x134>)
 8000d5a:	711a      	strb	r2, [r3, #4]
 8000d5c:	e062      	b.n	8000e24 <SetKeycode+0x128>
    else if (keyboardReport.Keycode4 == 0x00 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d5e:	4b34      	ldr	r3, [pc, #208]	@ (8000e30 <SetKeycode+0x134>)
 8000d60:	795b      	ldrb	r3, [r3, #5]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d116      	bne.n	8000d94 <SetKeycode+0x98>
 8000d66:	4b32      	ldr	r3, [pc, #200]	@ (8000e30 <SetKeycode+0x134>)
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d010      	beq.n	8000d94 <SetKeycode+0x98>
 8000d72:	4b2f      	ldr	r3, [pc, #188]	@ (8000e30 <SetKeycode+0x134>)
 8000d74:	78db      	ldrb	r3, [r3, #3]
 8000d76:	461a      	mov	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00a      	beq.n	8000d94 <SetKeycode+0x98>
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e30 <SetKeycode+0x134>)
 8000d80:	789b      	ldrb	r3, [r3, #2]
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d004      	beq.n	8000d94 <SetKeycode+0x98>
        keyboardReport.Keycode4 = keycode;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b28      	ldr	r3, [pc, #160]	@ (8000e30 <SetKeycode+0x134>)
 8000d90:	715a      	strb	r2, [r3, #5]
 8000d92:	e047      	b.n	8000e24 <SetKeycode+0x128>
    else if (keyboardReport.Keycode5 == 0x00 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d94:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <SetKeycode+0x134>)
 8000d96:	799b      	ldrb	r3, [r3, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d11c      	bne.n	8000dd6 <SetKeycode+0xda>
 8000d9c:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <SetKeycode+0x134>)
 8000d9e:	795b      	ldrb	r3, [r3, #5]
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d016      	beq.n	8000dd6 <SetKeycode+0xda>
 8000da8:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <SetKeycode+0x134>)
 8000daa:	791b      	ldrb	r3, [r3, #4]
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d010      	beq.n	8000dd6 <SetKeycode+0xda>
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <SetKeycode+0x134>)
 8000db6:	78db      	ldrb	r3, [r3, #3]
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d00a      	beq.n	8000dd6 <SetKeycode+0xda>
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <SetKeycode+0x134>)
 8000dc2:	789b      	ldrb	r3, [r3, #2]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d004      	beq.n	8000dd6 <SetKeycode+0xda>
        keyboardReport.Keycode5 = keycode;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <SetKeycode+0x134>)
 8000dd2:	719a      	strb	r2, [r3, #6]
 8000dd4:	e026      	b.n	8000e24 <SetKeycode+0x128>
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <SetKeycode+0x134>)
 8000dd8:	79db      	ldrb	r3, [r3, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d122      	bne.n	8000e24 <SetKeycode+0x128>
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <SetKeycode+0x134>)
 8000de0:	799b      	ldrb	r3, [r3, #6]
 8000de2:	461a      	mov	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01c      	beq.n	8000e24 <SetKeycode+0x128>
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <SetKeycode+0x134>)
 8000dec:	795b      	ldrb	r3, [r3, #5]
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d016      	beq.n	8000e24 <SetKeycode+0x128>
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <SetKeycode+0x134>)
 8000df8:	791b      	ldrb	r3, [r3, #4]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d010      	beq.n	8000e24 <SetKeycode+0x128>
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <SetKeycode+0x134>)
 8000e04:	78db      	ldrb	r3, [r3, #3]
 8000e06:	461a      	mov	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00a      	beq.n	8000e24 <SetKeycode+0x128>
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <SetKeycode+0x134>)
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d004      	beq.n	8000e24 <SetKeycode+0x128>
        keyboardReport.Keycode6 = keycode;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <SetKeycode+0x134>)
 8000e20:	71da      	strb	r2, [r3, #7]
}
 8000e22:	e7ff      	b.n	8000e24 <SetKeycode+0x128>
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	24000334 	.word	0x24000334

08000e34 <ResetKeycode>:

void ResetKeycode(int keycode)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == keycode)
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e3e:	789b      	ldrb	r3, [r3, #2]
 8000e40:	461a      	mov	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d102      	bne.n	8000e4e <ResetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = 0x00;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	709a      	strb	r2, [r3, #2]
    }
    if (keyboardReport.Keycode2 == keycode)
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e50:	78db      	ldrb	r3, [r3, #3]
 8000e52:	461a      	mov	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d102      	bne.n	8000e60 <ResetKeycode+0x2c>
    {
        keyboardReport.Keycode2 = 0x00;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	70da      	strb	r2, [r3, #3]
    }
    if (keyboardReport.Keycode3 == keycode)
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e62:	791b      	ldrb	r3, [r3, #4]
 8000e64:	461a      	mov	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d102      	bne.n	8000e72 <ResetKeycode+0x3e>
    {
        keyboardReport.Keycode3 = 0x00;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	711a      	strb	r2, [r3, #4]
    }
    if (keyboardReport.Keycode4 == keycode)
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e74:	795b      	ldrb	r3, [r3, #5]
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d102      	bne.n	8000e84 <ResetKeycode+0x50>
    {
        keyboardReport.Keycode4 = 0x00;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	715a      	strb	r2, [r3, #5]
    }
    if (keyboardReport.Keycode5 == keycode)
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e86:	799b      	ldrb	r3, [r3, #6]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d102      	bne.n	8000e96 <ResetKeycode+0x62>
    {
        keyboardReport.Keycode5 = 0x00;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	719a      	strb	r2, [r3, #6]
    }
    if (keyboardReport.Keycode6 == keycode)
 8000e96:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <ResetKeycode+0x80>)
 8000e98:	79db      	ldrb	r3, [r3, #7]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d102      	bne.n	8000ea8 <ResetKeycode+0x74>
    {
        keyboardReport.Keycode6 = 0x00;
 8000ea2:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <ResetKeycode+0x80>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	71da      	strb	r2, [r3, #7]
    }
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	24000334 	.word	0x24000334

08000eb8 <KeycodeSend>:

void KeycodeSend()
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b09a      	sub	sp, #104	@ 0x68
 8000ebc:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t *)&keyboardReport, sizeof(keyboardReport));
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	490c      	ldr	r1, [pc, #48]	@ (8000ef4 <KeycodeSend+0x3c>)
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <KeycodeSend+0x40>)
 8000ec4:	f008 fa10 	bl	80092e8 <USBD_HID_SendReport>

    char message[100];
    sprintf(message, "KeycodeSend \n\r");
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	490c      	ldr	r1, [pc, #48]	@ (8000efc <KeycodeSend+0x44>)
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f00a fa7b 	bl	800b3c8 <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fa1b 	bl	8000310 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	1d39      	adds	r1, r7, #4
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <KeycodeSend+0x48>)
 8000ee6:	f005 fad3 	bl	8006490 <HAL_UART_Transmit>
}
 8000eea:	bf00      	nop
 8000eec:	3768      	adds	r7, #104	@ 0x68
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	24000334 	.word	0x24000334
 8000ef8:	240007b4 	.word	0x240007b4
 8000efc:	0800bd78 	.word	0x0800bd78
 8000f00:	2400033c 	.word	0x2400033c

08000f04 <PressKeycodes>:

void PressKeycodes(int i)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09c      	sub	sp, #112	@ 0x70
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

	if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000f0c:	4b89      	ldr	r3, [pc, #548]	@ (8001134 <PressKeycodes+0x230>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4989      	ldr	r1, [pc, #548]	@ (8001138 <PressKeycodes+0x234>)
 8000f12:	2264      	movs	r2, #100	@ 0x64
 8000f14:	fb03 f202 	mul.w	r2, r3, r2
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f20:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d925      	bls.n	8000f74 <PressKeycodes+0x70>
	{
		KeyTimer = HAL_GetTick();
 8000f28:	f000 ff08 	bl	8001d3c <HAL_GetTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b82      	ldr	r3, [pc, #520]	@ (800113c <PressKeycodes+0x238>)
 8000f32:	601a      	str	r2, [r3, #0]

		char message5[100];
		sprintf(message5, "HoldTapPress = %d \n\r", Keycode[LayerState][i]);
 8000f34:	4b7f      	ldr	r3, [pc, #508]	@ (8001134 <PressKeycodes+0x230>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	497f      	ldr	r1, [pc, #508]	@ (8001138 <PressKeycodes+0x234>)
 8000f3a:	2264      	movs	r2, #100	@ 0x64
 8000f3c:	fb03 f202 	mul.w	r2, r3, r2
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	497c      	ldr	r1, [pc, #496]	@ (8001140 <PressKeycodes+0x23c>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00a fa39 	bl	800b3c8 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f9d8 	bl	8000310 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f107 010c 	add.w	r1, r7, #12
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	4875      	ldr	r0, [pc, #468]	@ (8001144 <PressKeycodes+0x240>)
 8000f6e:	f005 fa8f 	bl	8006490 <HAL_UART_Transmit>

		char message4[100];
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
	}
}
 8000f72:	e0db      	b.n	800112c <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 10000)
 8000f74:	4b6f      	ldr	r3, [pc, #444]	@ (8001134 <PressKeycodes+0x230>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	496f      	ldr	r1, [pc, #444]	@ (8001138 <PressKeycodes+0x234>)
 8000f7a:	2264      	movs	r2, #100	@ 0x64
 8000f7c:	fb03 f202 	mul.w	r2, r3, r2
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f88:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d941      	bls.n	8001014 <PressKeycodes+0x110>
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i] - 10000];
 8000f90:	4b68      	ldr	r3, [pc, #416]	@ (8001134 <PressKeycodes+0x230>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4968      	ldr	r1, [pc, #416]	@ (8001138 <PressKeycodes+0x234>)
 8000f96:	2264      	movs	r2, #100	@ 0x64
 8000f98:	fb03 f202 	mul.w	r2, r3, r2
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b68      	ldr	r3, [pc, #416]	@ (8001148 <PressKeycodes+0x244>)
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a68      	ldr	r2, [pc, #416]	@ (800114c <PressKeycodes+0x248>)
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	4b67      	ldr	r3, [pc, #412]	@ (8001150 <PressKeycodes+0x24c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b64      	ldr	r3, [pc, #400]	@ (8001150 <PressKeycodes+0x24c>)
 8000fc0:	701a      	strb	r2, [r3, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 8000fc2:	4b63      	ldr	r3, [pc, #396]	@ (8001150 <PressKeycodes+0x24c>)
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	4b63      	ldr	r3, [pc, #396]	@ (8001154 <PressKeycodes+0x250>)
 8000fc8:	701a      	strb	r2, [r3, #0]
		sprintf(message1, "ModifierPress = %d \n\r", Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8000fca:	4b5a      	ldr	r3, [pc, #360]	@ (8001134 <PressKeycodes+0x230>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	495a      	ldr	r1, [pc, #360]	@ (8001138 <PressKeycodes+0x234>)
 8000fd0:	2264      	movs	r2, #100	@ 0x64
 8000fd2:	fb03 f202 	mul.w	r2, r3, r2
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b59      	ldr	r3, [pc, #356]	@ (8001148 <PressKeycodes+0x244>)
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a59      	ldr	r2, [pc, #356]	@ (800114c <PressKeycodes+0x248>)
 8000fe6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	495a      	ldr	r1, [pc, #360]	@ (8001158 <PressKeycodes+0x254>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00a f9e9 	bl	800b3c8 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff f988 	bl	8000310 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	b29a      	uxth	r2, r3
 8001004:	f107 010c 	add.w	r1, r7, #12
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	484d      	ldr	r0, [pc, #308]	@ (8001144 <PressKeycodes+0x240>)
 800100e:	f005 fa3f 	bl	8006490 <HAL_UART_Transmit>
}
 8001012:	e08b      	b.n	800112c <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 5000)
 8001014:	4b47      	ldr	r3, [pc, #284]	@ (8001134 <PressKeycodes+0x230>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4947      	ldr	r1, [pc, #284]	@ (8001138 <PressKeycodes+0x234>)
 800101a:	2264      	movs	r2, #100	@ 0x64
 800101c:	fb03 f202 	mul.w	r2, r3, r2
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001028:	f241 3287 	movw	r2, #4999	@ 0x1387
 800102c:	4293      	cmp	r3, r2
 800102e:	d94b      	bls.n	80010c8 <PressKeycodes+0x1c4>
		if ( Keycode[LayerState][i] == KC_FN1)
 8001030:	4b40      	ldr	r3, [pc, #256]	@ (8001134 <PressKeycodes+0x230>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4940      	ldr	r1, [pc, #256]	@ (8001138 <PressKeycodes+0x234>)
 8001036:	2264      	movs	r2, #100	@ 0x64
 8001038:	fb03 f202 	mul.w	r2, r3, r2
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001048:	4293      	cmp	r3, r2
 800104a:	d103      	bne.n	8001054 <PressKeycodes+0x150>
			LayerState = 1; // Layer1 when pressed
 800104c:	4b39      	ldr	r3, [pc, #228]	@ (8001134 <PressKeycodes+0x230>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e022      	b.n	800109a <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD0)
 8001054:	4b37      	ldr	r3, [pc, #220]	@ (8001134 <PressKeycodes+0x230>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4937      	ldr	r1, [pc, #220]	@ (8001138 <PressKeycodes+0x234>)
 800105a:	2264      	movs	r2, #100	@ 0x64
 800105c:	fb03 f202 	mul.w	r2, r3, r2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001068:	f241 3289 	movw	r2, #5001	@ 0x1389
 800106c:	4293      	cmp	r3, r2
 800106e:	d103      	bne.n	8001078 <PressKeycodes+0x174>
			LayerState = 0;
 8001070:	4b30      	ldr	r3, [pc, #192]	@ (8001134 <PressKeycodes+0x230>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e010      	b.n	800109a <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD1)
 8001078:	4b2e      	ldr	r3, [pc, #184]	@ (8001134 <PressKeycodes+0x230>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	492e      	ldr	r1, [pc, #184]	@ (8001138 <PressKeycodes+0x234>)
 800107e:	2264      	movs	r2, #100	@ 0x64
 8001080:	fb03 f202 	mul.w	r2, r3, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800108c:	f241 328a 	movw	r2, #5002	@ 0x138a
 8001090:	4293      	cmp	r3, r2
 8001092:	d102      	bne.n	800109a <PressKeycodes+0x196>
			LayerState = 1;
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <PressKeycodes+0x230>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]
		sprintf(message1, "Current Layer = %d \n\r", LayerState);
 800109a:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <PressKeycodes+0x230>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	492e      	ldr	r1, [pc, #184]	@ (800115c <PressKeycodes+0x258>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00a f98f 	bl	800b3c8 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f92e 	bl	8000310 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f107 010c 	add.w	r1, r7, #12
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	4820      	ldr	r0, [pc, #128]	@ (8001144 <PressKeycodes+0x240>)
 80010c2:	f005 f9e5 	bl	8006490 <HAL_UART_Transmit>
}
 80010c6:	e031      	b.n	800112c <PressKeycodes+0x228>
		SetKeycode(Keycode[LayerState][i]);
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <PressKeycodes+0x230>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	491a      	ldr	r1, [pc, #104]	@ (8001138 <PressKeycodes+0x234>)
 80010ce:	2264      	movs	r2, #100	@ 0x64
 80010d0:	fb03 f202 	mul.w	r2, r3, r2
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fe0d 	bl	8000cfc <SetKeycode>
		WhichLayer[i] = LayerState;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <PressKeycodes+0x230>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	491e      	ldr	r1, [pc, #120]	@ (8001160 <PressKeycodes+0x25c>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <PressKeycodes+0x230>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4911      	ldr	r1, [pc, #68]	@ (8001138 <PressKeycodes+0x234>)
 80010f4:	2264      	movs	r2, #100	@ 0x64
 80010f6:	fb03 f202 	mul.w	r2, r3, r2
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001102:	461a      	mov	r2, r3
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4916      	ldr	r1, [pc, #88]	@ (8001164 <PressKeycodes+0x260>)
 800110a:	4618      	mov	r0, r3
 800110c:	f00a f95c 	bl	800b3c8 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f8fb 	bl	8000310 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 010c 	add.w	r1, r7, #12
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4807      	ldr	r0, [pc, #28]	@ (8001144 <PressKeycodes+0x240>)
 8001128:	f005 f9b2 	bl	8006490 <HAL_UART_Transmit>
}
 800112c:	bf00      	nop
 800112e:	3770      	adds	r7, #112	@ 0x70
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	240003dc 	.word	0x240003dc
 8001138:	24000000 	.word	0x24000000
 800113c:	24000574 	.word	0x24000574
 8001140:	0800bd88 	.word	0x0800bd88
 8001144:	2400033c 	.word	0x2400033c
 8001148:	ffffd8f0 	.word	0xffffd8f0
 800114c:	24000190 	.word	0x24000190
 8001150:	240003d8 	.word	0x240003d8
 8001154:	24000334 	.word	0x24000334
 8001158:	0800bda0 	.word	0x0800bda0
 800115c:	0800bdb8 	.word	0x0800bdb8
 8001160:	240003e0 	.word	0x240003e0
 8001164:	0800bdd0 	.word	0x0800bdd0

08001168 <ReleaseKeycodes>:

void ReleaseKeycodes(int i)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b09c      	sub	sp, #112	@ 0x70
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8001170:	4b8c      	ldr	r3, [pc, #560]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	498c      	ldr	r1, [pc, #560]	@ (80013a8 <ReleaseKeycodes+0x240>)
 8001176:	2264      	movs	r2, #100	@ 0x64
 8001178:	fb03 f202 	mul.w	r2, r3, r2
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001184:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001188:	4293      	cmp	r3, r2
 800118a:	d959      	bls.n	8001240 <ReleaseKeycodes+0xd8>
    {
        if (HAL_GetTick() - KeyTimer > HOLD_TIME)
 800118c:	f000 fdd6 	bl	8001d3c <HAL_GetTick>
 8001190:	4603      	mov	r3, r0
 8001192:	4a86      	ldr	r2, [pc, #536]	@ (80013ac <ReleaseKeycodes+0x244>)
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	2bfa      	cmp	r3, #250	@ 0xfa
 800119a:	d90e      	bls.n	80011ba <ReleaseKeycodes+0x52>
        {
            TempKeycode = Keycode[LayerState + 1][i]; // Hold 작동시 다음 레이어에 있는 키코드 전송
 800119c:	4b81      	ldr	r3, [pc, #516]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4981      	ldr	r1, [pc, #516]	@ (80013a8 <ReleaseKeycodes+0x240>)
 80011a4:	2264      	movs	r2, #100	@ 0x64
 80011a6:	fb03 f202 	mul.w	r2, r3, r2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b7e      	ldr	r3, [pc, #504]	@ (80013b0 <ReleaseKeycodes+0x248>)
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e00e      	b.n	80011d8 <ReleaseKeycodes+0x70>
        }
        else
        {
            TempKeycode = Keycode[LayerState][i] - 30000; // Tap 작동시 현재 레이어에 있는 키코드 -30000 전송
 80011ba:	4b7a      	ldr	r3, [pc, #488]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	497a      	ldr	r1, [pc, #488]	@ (80013a8 <ReleaseKeycodes+0x240>)
 80011c0:	2264      	movs	r2, #100	@ 0x64
 80011c2:	fb03 f202 	mul.w	r2, r3, r2
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b78      	ldr	r3, [pc, #480]	@ (80013b4 <ReleaseKeycodes+0x24c>)
 80011d2:	4413      	add	r3, r2
 80011d4:	4a76      	ldr	r2, [pc, #472]	@ (80013b0 <ReleaseKeycodes+0x248>)
 80011d6:	6013      	str	r3, [r2, #0]
        }
        SetKeycode(TempKeycode);
 80011d8:	4b75      	ldr	r3, [pc, #468]	@ (80013b0 <ReleaseKeycodes+0x248>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fd8d 	bl	8000cfc <SetKeycode>
        KeycodeSend();
 80011e2:	f7ff fe69 	bl	8000eb8 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 80011e6:	2032      	movs	r0, #50	@ 0x32
 80011e8:	f000 fdb4 	bl	8001d54 <HAL_Delay>
        ResetKeycode(TempKeycode);
 80011ec:	4b70      	ldr	r3, [pc, #448]	@ (80013b0 <ReleaseKeycodes+0x248>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe1f 	bl	8000e34 <ResetKeycode>
        KeycodeSend();
 80011f6:	f7ff fe5f 	bl	8000eb8 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 80011fa:	2032      	movs	r0, #50	@ 0x32
 80011fc:	f000 fdaa 	bl	8001d54 <HAL_Delay>

        char message5[100];
        sprintf(message5, "HoldTapRelease = %d \n\r", Keycode[LayerState][i]);
 8001200:	4b68      	ldr	r3, [pc, #416]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4968      	ldr	r1, [pc, #416]	@ (80013a8 <ReleaseKeycodes+0x240>)
 8001206:	2264      	movs	r2, #100	@ 0x64
 8001208:	fb03 f202 	mul.w	r2, r3, r2
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001214:	461a      	mov	r2, r3
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	4967      	ldr	r1, [pc, #412]	@ (80013b8 <ReleaseKeycodes+0x250>)
 800121c:	4618      	mov	r0, r3
 800121e:	f00a f8d3 	bl	800b3c8 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f872 	bl	8000310 <strlen>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	f107 010c 	add.w	r1, r7, #12
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	4860      	ldr	r0, [pc, #384]	@ (80013bc <ReleaseKeycodes+0x254>)
 800123a:	f005 f929 	bl	8006490 <HAL_UART_Transmit>
        char message5[100];
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
    }

}
 800123e:	e0ac      	b.n	800139a <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 10000)
 8001240:	4b58      	ldr	r3, [pc, #352]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4958      	ldr	r1, [pc, #352]	@ (80013a8 <ReleaseKeycodes+0x240>)
 8001246:	2264      	movs	r2, #100	@ 0x64
 8001248:	fb03 f202 	mul.w	r2, r3, r2
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001254:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001258:	4293      	cmp	r3, r2
 800125a:	d93e      	bls.n	80012da <ReleaseKeycodes+0x172>
        Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i] - 10000]);
 800125c:	4b51      	ldr	r3, [pc, #324]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4951      	ldr	r1, [pc, #324]	@ (80013a8 <ReleaseKeycodes+0x240>)
 8001262:	2264      	movs	r2, #100	@ 0x64
 8001264:	fb03 f202 	mul.w	r2, r3, r2
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001270:	461a      	mov	r2, r3
 8001272:	4b53      	ldr	r3, [pc, #332]	@ (80013c0 <ReleaseKeycodes+0x258>)
 8001274:	4413      	add	r3, r2
 8001276:	4a53      	ldr	r2, [pc, #332]	@ (80013c4 <ReleaseKeycodes+0x25c>)
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	b25b      	sxtb	r3, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	b25a      	sxtb	r2, r3
 8001282:	4b51      	ldr	r3, [pc, #324]	@ (80013c8 <ReleaseKeycodes+0x260>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4013      	ands	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b4e      	ldr	r3, [pc, #312]	@ (80013c8 <ReleaseKeycodes+0x260>)
 8001290:	701a      	strb	r2, [r3, #0]
        keyboardReport.MODIFIER = Modifier_Sum;
 8001292:	4b4d      	ldr	r3, [pc, #308]	@ (80013c8 <ReleaseKeycodes+0x260>)
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	4b4d      	ldr	r3, [pc, #308]	@ (80013cc <ReleaseKeycodes+0x264>)
 8001298:	701a      	strb	r2, [r3, #0]
        sprintf(message2, "ModifierRelease = %d\n\r", Keycode[LayerState][i]);
 800129a:	4b42      	ldr	r3, [pc, #264]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4942      	ldr	r1, [pc, #264]	@ (80013a8 <ReleaseKeycodes+0x240>)
 80012a0:	2264      	movs	r2, #100	@ 0x64
 80012a2:	fb03 f202 	mul.w	r2, r3, r2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012ae:	461a      	mov	r2, r3
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4946      	ldr	r1, [pc, #280]	@ (80013d0 <ReleaseKeycodes+0x268>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00a f886 	bl	800b3c8 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message2, strlen(message2), HAL_MAX_DELAY);
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f825 	bl	8000310 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f107 010c 	add.w	r1, r7, #12
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	483a      	ldr	r0, [pc, #232]	@ (80013bc <ReleaseKeycodes+0x254>)
 80012d4:	f005 f8dc 	bl	8006490 <HAL_UART_Transmit>
}
 80012d8:	e05f      	b.n	800139a <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 5000 )
 80012da:	4b32      	ldr	r3, [pc, #200]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4932      	ldr	r1, [pc, #200]	@ (80013a8 <ReleaseKeycodes+0x240>)
 80012e0:	2264      	movs	r2, #100	@ 0x64
 80012e2:	fb03 f202 	mul.w	r2, r3, r2
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012ee:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d927      	bls.n	8001346 <ReleaseKeycodes+0x1de>
    	if ( Keycode[LayerState][i] == KC_FN1 )
 80012f6:	4b2b      	ldr	r3, [pc, #172]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	492b      	ldr	r1, [pc, #172]	@ (80013a8 <ReleaseKeycodes+0x240>)
 80012fc:	2264      	movs	r2, #100	@ 0x64
 80012fe:	fb03 f202 	mul.w	r2, r3, r2
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800130a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d143      	bne.n	800139a <ReleaseKeycodes+0x232>
            LayerState = 0; // Layer0 when released
 8001312:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
            sprintf(message1, "Current Layer = %d \n\r", LayerState);
 8001318:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <ReleaseKeycodes+0x23c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	492c      	ldr	r1, [pc, #176]	@ (80013d4 <ReleaseKeycodes+0x26c>)
 8001322:	4618      	mov	r0, r3
 8001324:	f00a f850 	bl	800b3c8 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ffef 	bl	8000310 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f107 010c 	add.w	r1, r7, #12
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	481f      	ldr	r0, [pc, #124]	@ (80013bc <ReleaseKeycodes+0x254>)
 8001340:	f005 f8a6 	bl	8006490 <HAL_UART_Transmit>
}
 8001344:	e029      	b.n	800139a <ReleaseKeycodes+0x232>
        TempKeycode = Keycode[WhichLayer[i]][i];
 8001346:	4a24      	ldr	r2, [pc, #144]	@ (80013d8 <ReleaseKeycodes+0x270>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	4916      	ldr	r1, [pc, #88]	@ (80013a8 <ReleaseKeycodes+0x240>)
 8001350:	2264      	movs	r2, #100	@ 0x64
 8001352:	fb03 f202 	mul.w	r2, r3, r2
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800135e:	461a      	mov	r2, r3
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <ReleaseKeycodes+0x248>)
 8001362:	601a      	str	r2, [r3, #0]
        ResetKeycode(TempKeycode);
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <ReleaseKeycodes+0x248>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fd63 	bl	8000e34 <ResetKeycode>
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <ReleaseKeycodes+0x248>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	4919      	ldr	r1, [pc, #100]	@ (80013dc <ReleaseKeycodes+0x274>)
 8001378:	4618      	mov	r0, r3
 800137a:	f00a f825 	bl	800b3c8 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4618      	mov	r0, r3
 8001384:	f7fe ffc4 	bl	8000310 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	f107 010c 	add.w	r1, r7, #12
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <ReleaseKeycodes+0x254>)
 8001396:	f005 f87b 	bl	8006490 <HAL_UART_Transmit>
}
 800139a:	bf00      	nop
 800139c:	3770      	adds	r7, #112	@ 0x70
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	240003dc 	.word	0x240003dc
 80013a8:	24000000 	.word	0x24000000
 80013ac:	24000574 	.word	0x24000574
 80013b0:	24000570 	.word	0x24000570
 80013b4:	ffff8ad0 	.word	0xffff8ad0
 80013b8:	0800bde8 	.word	0x0800bde8
 80013bc:	2400033c 	.word	0x2400033c
 80013c0:	ffffd8f0 	.word	0xffffd8f0
 80013c4:	24000190 	.word	0x24000190
 80013c8:	240003d8 	.word	0x240003d8
 80013cc:	24000334 	.word	0x24000334
 80013d0:	0800be00 	.word	0x0800be00
 80013d4:	0800bdb8 	.word	0x0800bdb8
 80013d8:	240003e0 	.word	0x240003e0
 80013dc:	0800be18 	.word	0x0800be18

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b0b8      	sub	sp, #224	@ 0xe0
 80013e4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80013e6:	f000 fa2b 	bl	8001840 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ea:	f000 fc21 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ee:	f000 f8a7 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f2:	f000 f961 	bl	80016b8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80013f6:	f009 fb2b 	bl	800aa50 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80013fa:	f000 f911 	bl	8001620 <MX_UART4_Init>
    {
        //Timer = HAL_GetTick(); // Get Current Time

    	//CheckScanrate();

        if (HAL_GetTick() - LastTimer >= 10000)
 80013fe:	f000 fc9d 	bl	8001d3c <HAL_GetTick>
 8001402:	4603      	mov	r3, r0
 8001404:	4a42      	ldr	r2, [pc, #264]	@ (8001510 <main+0x130>)
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800140e:	4293      	cmp	r3, r2
 8001410:	d927      	bls.n	8001462 <main+0x82>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", HAL_GetTick(), Scanrate / 10);
 8001412:	f000 fc93 	bl	8001d3c <HAL_GetTick>
 8001416:	4601      	mov	r1, r0
 8001418:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <main+0x134>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a3e      	ldr	r2, [pc, #248]	@ (8001518 <main+0x138>)
 800141e:	fb82 0203 	smull	r0, r2, r2, r3
 8001422:	1092      	asrs	r2, r2, #2
 8001424:	17db      	asrs	r3, r3, #31
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800142c:	460a      	mov	r2, r1
 800142e:	493b      	ldr	r1, [pc, #236]	@ (800151c <main+0x13c>)
 8001430:	f009 ffca 	bl	800b3c8 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001434:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe ff69 	bl	8000310 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	b29a      	uxth	r2, r3
 8001442:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	4835      	ldr	r0, [pc, #212]	@ (8001520 <main+0x140>)
 800144c:	f005 f820 	bl	8006490 <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 8001450:	f000 fc74 	bl	8001d3c <HAL_GetTick>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <main+0x130>)
 800145a:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 800145c:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <main+0x134>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 8001462:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <main+0x134>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a2a      	ldr	r2, [pc, #168]	@ (8001514 <main+0x134>)
 800146a:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

        MatrixScanResult Matrix = MatrixScan();
 800146c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f91d 	bl	80006b0 <MatrixScan>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY); */




        if ( Matrix.pinNumber != -1 )
 8001476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800147a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147e:	d0be      	beq.n	80013fe <main+0x1e>
        {

			char message3[100];
			sprintf(message3, "A = %u | B = %u | C = %u | D = %u | E = %u \n\r", gpioA_state,gpioB_state,gpioC_state,gpioD_state,gpioE_state );
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <main+0x144>)
 8001482:	681c      	ldr	r4, [r3, #0]
 8001484:	4b28      	ldr	r3, [pc, #160]	@ (8001528 <main+0x148>)
 8001486:	681d      	ldr	r5, [r3, #0]
 8001488:	4b28      	ldr	r3, [pc, #160]	@ (800152c <main+0x14c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <main+0x150>)
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	4928      	ldr	r1, [pc, #160]	@ (8001534 <main+0x154>)
 8001492:	6809      	ldr	r1, [r1, #0]
 8001494:	4638      	mov	r0, r7
 8001496:	9102      	str	r1, [sp, #8]
 8001498:	9201      	str	r2, [sp, #4]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	462b      	mov	r3, r5
 800149e:	4622      	mov	r2, r4
 80014a0:	4925      	ldr	r1, [pc, #148]	@ (8001538 <main+0x158>)
 80014a2:	f009 ff91 	bl	800b3c8 <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t *)message3, strlen(message3), HAL_MAX_DELAY);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ff31 	bl	8000310 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4639      	mov	r1, r7
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	4819      	ldr	r0, [pc, #100]	@ (8001520 <main+0x140>)
 80014ba:	f004 ffe9 	bl	8006490 <HAL_UART_Transmit>

            char message[100];
            sprintf(message, "pinNumber = %d | pinState =  %d \n\r", Matrix.pinNumber, Matrix.pinState);
 80014be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80014c2:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 80014c6:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80014ca:	491c      	ldr	r1, [pc, #112]	@ (800153c <main+0x15c>)
 80014cc:	f009 ff7c 	bl	800b3c8 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80014d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ff1b 	bl	8000310 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	480e      	ldr	r0, [pc, #56]	@ (8001520 <main+0x140>)
 80014e8:	f004 ffd2 	bl	8006490 <HAL_UART_Transmit>


			if ( Matrix.pinState == 1)
 80014ec:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <main+0x120>
			{
				PressKeycodes(Matrix.pinNumber);
 80014f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd03 	bl	8000f04 <PressKeycodes>
 80014fe:	e004      	b.n	800150a <main+0x12a>
			}
			else
			{
				ReleaseKeycodes(Matrix.pinNumber);
 8001500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fe2f 	bl	8001168 <ReleaseKeycodes>
			}
        	KeycodeSend();
 800150a:	f7ff fcd5 	bl	8000eb8 <KeycodeSend>
    {
 800150e:	e776      	b.n	80013fe <main+0x1e>
 8001510:	240003d4 	.word	0x240003d4
 8001514:	240003d0 	.word	0x240003d0
 8001518:	66666667 	.word	0x66666667
 800151c:	0800be30 	.word	0x0800be30
 8001520:	2400033c 	.word	0x2400033c
 8001524:	24000778 	.word	0x24000778
 8001528:	2400077c 	.word	0x2400077c
 800152c:	24000780 	.word	0x24000780
 8001530:	24000784 	.word	0x24000784
 8001534:	24000788 	.word	0x24000788
 8001538:	0800bd20 	.word	0x0800bd20
 800153c:	0800be58 	.word	0x0800be58

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b09c      	sub	sp, #112	@ 0x70
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154a:	224c      	movs	r2, #76	@ 0x4c
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f009 ff5a 	bl	800b408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2220      	movs	r2, #32
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f009 ff54 	bl	800b408 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001560:	2002      	movs	r0, #2
 8001562:	f002 f9d3 	bl	800390c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b2c      	ldr	r3, [pc, #176]	@ (800161c <SystemClock_Config+0xdc>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	4a2b      	ldr	r2, [pc, #172]	@ (800161c <SystemClock_Config+0xdc>)
 8001570:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001574:	6193      	str	r3, [r2, #24]
 8001576:	4b29      	ldr	r3, [pc, #164]	@ (800161c <SystemClock_Config+0xdc>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001582:	bf00      	nop
 8001584:	4b25      	ldr	r3, [pc, #148]	@ (800161c <SystemClock_Config+0xdc>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800158c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001590:	d1f8      	bne.n	8001584 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001592:	2321      	movs	r3, #33	@ 0x21
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001596:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80015a8:	2305      	movs	r3, #5
 80015aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80015ac:	236e      	movs	r3, #110	@ 0x6e
 80015ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80015bc:	2308      	movs	r3, #8
 80015be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 f9e7 	bl	80039a0 <HAL_RCC_OscConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015d8:	f000 f95e 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015dc:	233f      	movs	r3, #63	@ 0x3f
 80015de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e0:	2303      	movs	r3, #3
 80015e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015e8:	2308      	movs	r3, #8
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015ec:	2340      	movs	r3, #64	@ 0x40
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015f0:	2340      	movs	r3, #64	@ 0x40
 80015f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 80015fa:	2350      	movs	r3, #80	@ 0x50
 80015fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2103      	movs	r1, #3
 8001602:	4618      	mov	r0, r3
 8001604:	f002 fda6 	bl	8004154 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800160e:	f000 f943 	bl	8001898 <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3770      	adds	r7, #112	@ 0x70
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	58024800 	.word	0x58024800

08001620 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001624:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <MX_UART4_Init+0x90>)
 8001626:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <MX_UART4_Init+0x94>)
 8001628:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800162a:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <MX_UART4_Init+0x90>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <MX_UART4_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <MX_UART4_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <MX_UART4_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <MX_UART4_Init+0x90>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <MX_UART4_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <MX_UART4_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <MX_UART4_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_UART4_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001662:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <MX_UART4_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001668:	4811      	ldr	r0, [pc, #68]	@ (80016b0 <MX_UART4_Init+0x90>)
 800166a:	f004 fec1 	bl	80063f0 <HAL_UART_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001674:	f000 f910 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001678:	2100      	movs	r1, #0
 800167a:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <MX_UART4_Init+0x90>)
 800167c:	f006 f85b 	bl	8007736 <HAL_UARTEx_SetTxFifoThreshold>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001686:	f000 f907 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	4808      	ldr	r0, [pc, #32]	@ (80016b0 <MX_UART4_Init+0x90>)
 800168e:	f006 f890 	bl	80077b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001698:	f000 f8fe 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <MX_UART4_Init+0x90>)
 800169e:	f006 f811 	bl	80076c4 <HAL_UARTEx_DisableFifoMode>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016a8:	f000 f8f6 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2400033c 	.word	0x2400033c
 80016b4:	40004c00 	.word	0x40004c00

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	@ 0x30
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b56      	ldr	r3, [pc, #344]	@ (8001828 <MX_GPIO_Init+0x170>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a54      	ldr	r2, [pc, #336]	@ (8001828 <MX_GPIO_Init+0x170>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b52      	ldr	r3, [pc, #328]	@ (8001828 <MX_GPIO_Init+0x170>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001828 <MX_GPIO_Init+0x170>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001828 <MX_GPIO_Init+0x170>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001828 <MX_GPIO_Init+0x170>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <MX_GPIO_Init+0x170>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	4a45      	ldr	r2, [pc, #276]	@ (8001828 <MX_GPIO_Init+0x170>)
 8001712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171a:	4b43      	ldr	r3, [pc, #268]	@ (8001828 <MX_GPIO_Init+0x170>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b3f      	ldr	r3, [pc, #252]	@ (8001828 <MX_GPIO_Init+0x170>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	4a3e      	ldr	r2, [pc, #248]	@ (8001828 <MX_GPIO_Init+0x170>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001738:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <MX_GPIO_Init+0x170>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <MX_GPIO_Init+0x170>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	4a36      	ldr	r2, [pc, #216]	@ (8001828 <MX_GPIO_Init+0x170>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001756:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <MX_GPIO_Init+0x170>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001764:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <MX_GPIO_Init+0x170>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176a:	4a2f      	ldr	r2, [pc, #188]	@ (8001828 <MX_GPIO_Init+0x170>)
 800176c:	f043 0308 	orr.w	r3, r3, #8
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001774:	4b2c      	ldr	r3, [pc, #176]	@ (8001828 <MX_GPIO_Init+0x170>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001782:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001786:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178c:	2301      	movs	r3, #1
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4825      	ldr	r0, [pc, #148]	@ (800182c <MX_GPIO_Init+0x174>)
 8001798:	f000 fc88 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800179c:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80017a0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	481f      	ldr	r0, [pc, #124]	@ (8001830 <MX_GPIO_Init+0x178>)
 80017b2:	f000 fc7b 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 80017b6:	f649 73d4 	movw	r3, #40916	@ 0x9fd4
 80017ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	481a      	ldr	r0, [pc, #104]	@ (8001834 <MX_GPIO_Init+0x17c>)
 80017cc:	f000 fc6e 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB3 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 80017d0:	f244 33dc 	movw	r3, #17372	@ 0x43dc
 80017d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017da:	2301      	movs	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4814      	ldr	r0, [pc, #80]	@ (8001838 <MX_GPIO_Init+0x180>)
 80017e6:	f000 fc61 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	480d      	ldr	r0, [pc, #52]	@ (8001838 <MX_GPIO_Init+0x180>)
 8001802:	f000 fc53 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001806:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800180a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001810:	2301      	movs	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4808      	ldr	r0, [pc, #32]	@ (800183c <MX_GPIO_Init+0x184>)
 800181c:	f000 fc46 	bl	80020ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001820:	bf00      	nop
 8001822:	3730      	adds	r7, #48	@ 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	58024400 	.word	0x58024400
 800182c:	58021000 	.word	0x58021000
 8001830:	58020800 	.word	0x58020800
 8001834:	58020000 	.word	0x58020000
 8001838:	58020400 	.word	0x58020400
 800183c:	58020c00 	.word	0x58020c00

08001840 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001852:	f000 fbb3 	bl	8001fbc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001856:	2301      	movs	r3, #1
 8001858:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800185a:	2300      	movs	r3, #0
 800185c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001862:	231f      	movs	r3, #31
 8001864:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001866:	2387      	movs	r3, #135	@ 0x87
 8001868:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800186a:	2300      	movs	r3, #0
 800186c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800186e:	2300      	movs	r3, #0
 8001870:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001872:	2301      	movs	r3, #1
 8001874:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001882:	463b      	mov	r3, r7
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fbd1 	bl	800202c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800188a:	2004      	movs	r0, #4
 800188c:	f000 fbae 	bl	8001fec <HAL_MPU_Enable>

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <Error_Handler+0x8>

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_MspInit+0x30>)
 80018ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018b0:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_MspInit+0x30>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_MspInit+0x30>)
 80018bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	58024400 	.word	0x58024400

080018d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0b8      	sub	sp, #224	@ 0xe0
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	22b8      	movs	r2, #184	@ 0xb8
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f009 fd85 	bl	800b408 <memset>
  if(huart->Instance==UART4)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a26      	ldr	r2, [pc, #152]	@ (800199c <HAL_UART_MspInit+0xc4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d145      	bne.n	8001994 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001908:	f04f 0202 	mov.w	r2, #2
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4618      	mov	r0, r3
 8001920:	f002 ffa4 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800192a:	f7ff ffb5 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <HAL_UART_MspInit+0xc8>)
 8001930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001934:	4a1a      	ldr	r2, [pc, #104]	@ (80019a0 <HAL_UART_MspInit+0xc8>)
 8001936:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800193a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800193e:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_UART_MspInit+0xc8>)
 8001940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001944:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_UART_MspInit+0xc8>)
 800194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001952:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <HAL_UART_MspInit+0xc8>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800195c:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <HAL_UART_MspInit+0xc8>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800196a:	2303      	movs	r3, #3
 800196c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001982:	2308      	movs	r3, #8
 8001984:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800198c:	4619      	mov	r1, r3
 800198e:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <HAL_UART_MspInit+0xcc>)
 8001990:	f000 fb8c 	bl	80020ac <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001994:	bf00      	nop
 8001996:	37e0      	adds	r7, #224	@ 0xe0
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40004c00 	.word	0x40004c00
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58020000 	.word	0x58020000

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <NMI_Handler+0x4>

080019b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <MemManage_Handler+0x4>

080019c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <UsageFault_Handler+0x4>

080019d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fe:	f000 f989 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001a0c:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <OTG_HS_IRQHandler+0x10>)
 8001a0e:	f000 fe36 	bl	800267e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	24000c90 	.word	0x24000c90

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	@ (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	@ (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f009 fce4 	bl	800b418 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	24050000 	.word	0x24050000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	240007a8 	.word	0x240007a8
 8001a84:	240012d0 	.word	0x240012d0

08001a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b88 <SystemInit+0x100>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a92:	4a3d      	ldr	r2, [pc, #244]	@ (8001b88 <SystemInit+0x100>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b8c <SystemInit+0x104>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d807      	bhi.n	8001ab8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aa8:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <SystemInit+0x104>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 030f 	bic.w	r3, r3, #15
 8001ab0:	4a36      	ldr	r2, [pc, #216]	@ (8001b8c <SystemInit+0x104>)
 8001ab2:	f043 0307 	orr.w	r3, r3, #7
 8001ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ab8:	4b35      	ldr	r3, [pc, #212]	@ (8001b90 <SystemInit+0x108>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a34      	ldr	r2, [pc, #208]	@ (8001b90 <SystemInit+0x108>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <SystemInit+0x108>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aca:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <SystemInit+0x108>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4930      	ldr	r1, [pc, #192]	@ (8001b90 <SystemInit+0x108>)
 8001ad0:	4b30      	ldr	r3, [pc, #192]	@ (8001b94 <SystemInit+0x10c>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <SystemInit+0x104>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b8c <SystemInit+0x104>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 030f 	bic.w	r3, r3, #15
 8001aea:	4a28      	ldr	r2, [pc, #160]	@ (8001b8c <SystemInit+0x104>)
 8001aec:	f043 0307 	orr.w	r3, r3, #7
 8001af0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <SystemInit+0x108>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001af8:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <SystemInit+0x108>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <SystemInit+0x108>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <SystemInit+0x108>)
 8001b06:	4a24      	ldr	r2, [pc, #144]	@ (8001b98 <SystemInit+0x110>)
 8001b08:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <SystemInit+0x108>)
 8001b0c:	4a23      	ldr	r2, [pc, #140]	@ (8001b9c <SystemInit+0x114>)
 8001b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <SystemInit+0x108>)
 8001b12:	4a23      	ldr	r2, [pc, #140]	@ (8001ba0 <SystemInit+0x118>)
 8001b14:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <SystemInit+0x108>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <SystemInit+0x108>)
 8001b1e:	4a20      	ldr	r2, [pc, #128]	@ (8001ba0 <SystemInit+0x118>)
 8001b20:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <SystemInit+0x108>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <SystemInit+0x108>)
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba0 <SystemInit+0x118>)
 8001b2c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <SystemInit+0x108>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <SystemInit+0x108>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a15      	ldr	r2, [pc, #84]	@ (8001b90 <SystemInit+0x108>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <SystemInit+0x108>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001b46:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <SystemInit+0x108>)
 8001b48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d113      	bne.n	8001b7c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b54:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <SystemInit+0x108>)
 8001b56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <SystemInit+0x108>)
 8001b5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b60:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <SystemInit+0x11c>)
 8001b66:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b6a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <SystemInit+0x108>)
 8001b6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b72:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <SystemInit+0x108>)
 8001b74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b78:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00
 8001b8c:	52002000 	.word	0x52002000
 8001b90:	58024400 	.word	0x58024400
 8001b94:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b98:	02020200 	.word	0x02020200
 8001b9c:	01ff0000 	.word	0x01ff0000
 8001ba0:	01010280 	.word	0x01010280
 8001ba4:	52004000 	.word	0x52004000

08001ba8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001bac:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <ExitRun0Mode+0x2c>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4a08      	ldr	r2, [pc, #32]	@ (8001bd4 <ExitRun0Mode+0x2c>)
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001bb8:	bf00      	nop
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <ExitRun0Mode+0x2c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f9      	beq.n	8001bba <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	58024800 	.word	0x58024800

08001bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bd8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001c14 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001bdc:	f7ff ffe4 	bl	8001ba8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001be0:	f7ff ff52 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	@ (8001c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f009 fc0b 	bl	800b424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0e:	f7ff fbe7 	bl	80013e0 <main>
  bx  lr
 8001c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c14:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001c18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c1c:	24000318 	.word	0x24000318
  ldr r2, =_sidata
 8001c20:	0800bf40 	.word	0x0800bf40
  ldr r2, =_sbss
 8001c24:	24000318 	.word	0x24000318
  ldr r4, =_ebss
 8001c28:	240012d0 	.word	0x240012d0

08001c2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC3_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c36:	2003      	movs	r0, #3
 8001c38:	f000 f980 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c3c:	f002 fc40 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_Init+0x68>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	4913      	ldr	r1, [pc, #76]	@ (8001c9c <HAL_Init+0x6c>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
 8001c58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <HAL_Init+0x68>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	4a0e      	ldr	r2, [pc, #56]	@ (8001c9c <HAL_Init+0x6c>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca0 <HAL_Init+0x70>)
 8001c72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca4 <HAL_Init+0x74>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c7a:	200f      	movs	r0, #15
 8001c7c:	f000 f814 	bl	8001ca8 <HAL_InitTick>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e002      	b.n	8001c90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8a:	f7ff fe0b 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	0800bec4 	.word	0x0800bec4
 8001ca0:	240001b4 	.word	0x240001b4
 8001ca4:	240001b0 	.word	0x240001b0

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_InitTick+0x60>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e021      	b.n	8001d00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_InitTick+0x64>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <HAL_InitTick+0x60>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f965 	bl	8001fa2 <HAL_SYSTICK_Config>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00e      	b.n	8001d00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b0f      	cmp	r3, #15
 8001ce6:	d80a      	bhi.n	8001cfe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f000 f92f 	bl	8001f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf4:	4a06      	ldr	r2, [pc, #24]	@ (8001d10 <HAL_InitTick+0x68>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	240001bc 	.word	0x240001bc
 8001d0c:	240001b0 	.word	0x240001b0
 8001d10:	240001b8 	.word	0x240001b8

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_IncTick+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_IncTick+0x24>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <HAL_IncTick+0x24>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	240001bc 	.word	0x240001bc
 8001d38:	240007ac 	.word	0x240007ac

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_GetTick+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	240007ac 	.word	0x240007ac

08001d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff ffee 	bl	8001d3c <HAL_GetTick>
 8001d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d005      	beq.n	8001d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_Delay+0x44>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d7a:	bf00      	nop
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d8f7      	bhi.n	8001d7c <HAL_Delay+0x28>
  {
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	240001bc 	.word	0x240001bc

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <__NVIC_SetPriorityGrouping+0x40>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	@ (8001ddc <__NVIC_SetPriorityGrouping+0x40>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00
 8001de0:	05fa0000 	.word	0x05fa0000

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	@ (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	@ (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	@ 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff29 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff40 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff90 	bl	8001e90 <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5f 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff33 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa4 	bl	8001ef8 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001fc0:	f3bf 8f5f 	dmb	sy
}
 8001fc4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <HAL_MPU_Disable+0x28>)
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	4a06      	ldr	r2, [pc, #24]	@ (8001fe4 <HAL_MPU_Disable+0x28>)
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_MPU_Disable+0x2c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	e000ed90 	.word	0xe000ed90

08001fec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8002024 <HAL_MPU_Enable+0x38>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <HAL_MPU_Enable+0x3c>)
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	4a09      	ldr	r2, [pc, #36]	@ (8002028 <HAL_MPU_Enable+0x3c>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800200a:	f3bf 8f4f 	dsb	sy
}
 800200e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002010:	f3bf 8f6f 	isb	sy
}
 8002014:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed90 	.word	0xe000ed90
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	785a      	ldrb	r2, [r3, #1]
 8002038:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <HAL_MPU_ConfigRegion+0x7c>)
 800203a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800203c:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <HAL_MPU_ConfigRegion+0x7c>)
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	4a19      	ldr	r2, [pc, #100]	@ (80020a8 <HAL_MPU_ConfigRegion+0x7c>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002048:	4a17      	ldr	r2, [pc, #92]	@ (80020a8 <HAL_MPU_ConfigRegion+0x7c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7b1b      	ldrb	r3, [r3, #12]
 8002054:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7adb      	ldrb	r3, [r3, #11]
 800205a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800205c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7a9b      	ldrb	r3, [r3, #10]
 8002062:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002064:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	7b5b      	ldrb	r3, [r3, #13]
 800206a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800206c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7b9b      	ldrb	r3, [r3, #14]
 8002072:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002074:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	7bdb      	ldrb	r3, [r3, #15]
 800207a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800207c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7a5b      	ldrb	r3, [r3, #9]
 8002082:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002084:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7a1b      	ldrb	r3, [r3, #8]
 800208a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800208c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	7812      	ldrb	r2, [r2, #0]
 8002092:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002094:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002096:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002098:	6113      	str	r3, [r2, #16]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed90 	.word	0xe000ed90

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ba:	4b86      	ldr	r3, [pc, #536]	@ (80022d4 <HAL_GPIO_Init+0x228>)
 80020bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020be:	e18c      	b.n	80023da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 817e 	beq.w	80023d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d005      	beq.n	80020f0 <HAL_GPIO_Init+0x44>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d130      	bne.n	8002152 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002126:	2201      	movs	r2, #1
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	f003 0201 	and.w	r2, r3, #1
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b03      	cmp	r3, #3
 800215c:	d017      	beq.n	800218e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d123      	bne.n	80021e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80d8 	beq.w	80023d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002224:	4b2c      	ldr	r3, [pc, #176]	@ (80022d8 <HAL_GPIO_Init+0x22c>)
 8002226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800222a:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <HAL_GPIO_Init+0x22c>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002234:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <HAL_GPIO_Init+0x22c>)
 8002236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002242:	4a26      	ldr	r2, [pc, #152]	@ (80022dc <HAL_GPIO_Init+0x230>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1d      	ldr	r2, [pc, #116]	@ (80022e0 <HAL_GPIO_Init+0x234>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d04a      	beq.n	8002304 <HAL_GPIO_Init+0x258>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <HAL_GPIO_Init+0x238>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d02b      	beq.n	80022ce <HAL_GPIO_Init+0x222>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1b      	ldr	r2, [pc, #108]	@ (80022e8 <HAL_GPIO_Init+0x23c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d025      	beq.n	80022ca <HAL_GPIO_Init+0x21e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1a      	ldr	r2, [pc, #104]	@ (80022ec <HAL_GPIO_Init+0x240>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01f      	beq.n	80022c6 <HAL_GPIO_Init+0x21a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <HAL_GPIO_Init+0x244>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0x216>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <HAL_GPIO_Init+0x248>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0x212>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <HAL_GPIO_Init+0x24c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00d      	beq.n	80022ba <HAL_GPIO_Init+0x20e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <HAL_GPIO_Init+0x250>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x20a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a15      	ldr	r2, [pc, #84]	@ (8002300 <HAL_GPIO_Init+0x254>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_GPIO_Init+0x206>
 80022ae:	2309      	movs	r3, #9
 80022b0:	e029      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022b2:	230a      	movs	r3, #10
 80022b4:	e027      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022b6:	2307      	movs	r3, #7
 80022b8:	e025      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022ba:	2306      	movs	r3, #6
 80022bc:	e023      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022be:	2305      	movs	r3, #5
 80022c0:	e021      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022c2:	2304      	movs	r3, #4
 80022c4:	e01f      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e01d      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e01b      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e019      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022d2:	bf00      	nop
 80022d4:	58000080 	.word	0x58000080
 80022d8:	58024400 	.word	0x58024400
 80022dc:	58000400 	.word	0x58000400
 80022e0:	58020000 	.word	0x58020000
 80022e4:	58020400 	.word	0x58020400
 80022e8:	58020800 	.word	0x58020800
 80022ec:	58020c00 	.word	0x58020c00
 80022f0:	58021000 	.word	0x58021000
 80022f4:	58021400 	.word	0x58021400
 80022f8:	58021800 	.word	0x58021800
 80022fc:	58021c00 	.word	0x58021c00
 8002300:	58022400 	.word	0x58022400
 8002304:	2300      	movs	r3, #0
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	f002 0203 	and.w	r2, r2, #3
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	4093      	lsls	r3, r2
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002316:	4938      	ldr	r1, [pc, #224]	@ (80023f8 <HAL_GPIO_Init+0x34c>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800234a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002378:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f ae6b 	bne.w	80020c0 <HAL_GPIO_Init+0x14>
  }
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	3724      	adds	r7, #36	@ 0x24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	58000400 	.word	0x58000400

080023fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0fe      	b.n	800260c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f008 fc4c 	bl	800acc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2203      	movs	r2, #3
 800242c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f005 fb6e 	bl	8007b16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7c1a      	ldrb	r2, [r3, #16]
 8002442:	f88d 2000 	strb.w	r2, [sp]
 8002446:	3304      	adds	r3, #4
 8002448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244a:	f005 fa3f 	bl	80078cc <USB_CoreInit>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0d5      	b.n	800260c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f005 fb66 	bl	8007b38 <USB_SetCurrentMode>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0c6      	b.n	800260c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e04a      	b.n	800251a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3315      	adds	r3, #21
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	3314      	adds	r3, #20
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	b298      	uxth	r0, r3
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	332e      	adds	r3, #46	@ 0x2e
 80024c0:	4602      	mov	r2, r0
 80024c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3318      	adds	r3, #24
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	331c      	adds	r3, #28
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3320      	adds	r3, #32
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3324      	adds	r3, #36	@ 0x24
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3301      	adds	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	791b      	ldrb	r3, [r3, #4]
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	429a      	cmp	r2, r3
 8002522:	d3af      	bcc.n	8002484 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e044      	b.n	80025b4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	3301      	adds	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	791b      	ldrb	r3, [r3, #4]
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d3b5      	bcc.n	800252a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7c1a      	ldrb	r2, [r3, #16]
 80025c6:	f88d 2000 	strb.w	r2, [sp]
 80025ca:	3304      	adds	r3, #4
 80025cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ce:	f005 faff 	bl	8007bd0 <USB_DevInit>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e013      	b.n	800260c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7b1b      	ldrb	r3, [r3, #12]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f001 f956 	bl	80038ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f006 fb42 	bl	8008c8e <USB_DevDisconnect>

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_PCD_Start+0x1c>
 800262c:	2302      	movs	r3, #2
 800262e:	e022      	b.n	8002676 <HAL_PCD_Start+0x62>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f005 fa49 	bl	8007af4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f006 faf0 	bl	8008c4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800267e:	b590      	push	{r4, r7, lr}
 8002680:	b08d      	sub	sp, #52	@ 0x34
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f006 fbae 	bl	8008df6 <USB_GetMode>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 84b9 	bne.w	8003014 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f006 fb12 	bl	8008cd0 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 84af 	beq.w	8003012 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f006 faff 	bl	8008cd0 <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d107      	bne.n	80026ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f002 0202 	and.w	r2, r2, #2
 80026ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f006 faed 	bl	8008cd0 <USB_ReadInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d161      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0210 	bic.w	r2, r2, #16
 800270e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 020f 	and.w	r2, r3, #15
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	3304      	adds	r3, #4
 800272e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	0c5b      	lsrs	r3, r3, #17
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	2b02      	cmp	r3, #2
 800273a:	d124      	bne.n	8002786 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d035      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	6a38      	ldr	r0, [r7, #32]
 800275c:	f006 f924 	bl	80089a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276c:	441a      	add	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277e:	441a      	add	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	615a      	str	r2, [r3, #20]
 8002784:	e016      	b.n	80027b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	0c5b      	lsrs	r3, r3, #17
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	2b06      	cmp	r3, #6
 8002790:	d110      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002798:	2208      	movs	r2, #8
 800279a:	4619      	mov	r1, r3
 800279c:	6a38      	ldr	r0, [r7, #32]
 800279e:	f006 f903 	bl	80089a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ae:	441a      	add	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0210 	orr.w	r2, r2, #16
 80027c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f006 fa81 	bl	8008cd0 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027d8:	f040 80a7 	bne.w	800292a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f006 fa86 	bl	8008cf6 <USB_ReadDevAllOutEpInterrupt>
 80027ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027ec:	e099      	b.n	8002922 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 808e 	beq.w	8002916 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f006 faaa 	bl	8008d5e <USB_ReadDevOutEPInterrupt>
 800280a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4413      	add	r3, r2
 800281e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002822:	461a      	mov	r2, r3
 8002824:	2301      	movs	r3, #1
 8002826:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 feb8 	bl	80035a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002846:	461a      	mov	r2, r3
 8002848:	2308      	movs	r3, #8
 800284a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800284c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 ff8e 	bl	8003770 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	2310      	movs	r3, #16
 800286e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d030      	beq.n	80028dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	2b80      	cmp	r3, #128	@ 0x80
 8002884:	d109      	bne.n	800289a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002894:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002898:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800289a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	3304      	adds	r3, #4
 80028ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	78db      	ldrb	r3, [r3, #3]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d108      	bne.n	80028ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2200      	movs	r2, #0
 80028bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f008 fb7d 	bl	800afc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d6:	461a      	mov	r2, r3
 80028d8:	2302      	movs	r3, #2
 80028da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f2:	461a      	mov	r2, r3
 80028f4:	2320      	movs	r3, #32
 80028f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800290e:	461a      	mov	r2, r3
 8002910:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002914:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	3301      	adds	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f af62 	bne.w	80027ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f006 f9ce 	bl	8008cd0 <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800293a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800293e:	f040 80db 	bne.w	8002af8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f006 f9ef 	bl	8008d2a <USB_ReadDevAllInEpInterrupt>
 800294c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002952:	e0cd      	b.n	8002af0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80c2 	beq.w	8002ae4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f006 fa15 	bl	8008d9a <USB_ReadDevInEPInterrupt>
 8002970:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d057      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	2201      	movs	r2, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43db      	mvns	r3, r3
 8002996:	69f9      	ldr	r1, [r7, #28]
 8002998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800299c:	4013      	ands	r3, r2
 800299e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ac:	461a      	mov	r2, r3
 80029ae:	2301      	movs	r3, #1
 80029b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	799b      	ldrb	r3, [r3, #6]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d132      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3320      	adds	r3, #32
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4403      	add	r3, r0
 80029da:	331c      	adds	r3, #28
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4419      	add	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4403      	add	r3, r0
 80029ee:	3320      	adds	r3, #32
 80029f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d113      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x3a2>
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3324      	adds	r3, #36	@ 0x24
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	f006 fa1e 	bl	8008e5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f008 fa47 	bl	800aeba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a42:	461a      	mov	r2, r3
 8002a44:	2308      	movs	r3, #8
 8002a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2310      	movs	r3, #16
 8002a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2340      	movs	r3, #64	@ 0x40
 8002a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d023      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a8c:	6a38      	ldr	r0, [r7, #32]
 8002a8e:	f005 f9fd 	bl	8007e8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	78db      	ldrb	r3, [r3, #3]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d108      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f008 fa94 	bl	800afe8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002acc:	461a      	mov	r2, r3
 8002ace:	2302      	movs	r3, #2
 8002ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fcd2 	bl	8003488 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f47f af2e 	bne.w	8002954 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f006 f8e7 	bl	8008cd0 <USB_ReadInterrupts>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b0c:	d122      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d108      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b34:	2100      	movs	r1, #0
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fedc 	bl	80038f4 <HAL_PCDEx_LPM_Callback>
 8002b3c:	e002      	b.n	8002b44 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f008 fa32 	bl	800afa8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f006 f8b9 	bl	8008cd0 <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b68:	d112      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d102      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f008 f9ee 	bl	800af5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f006 f89b 	bl	8008cd0 <USB_ReadInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ba4:	d121      	bne.n	8002bea <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002bb4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d111      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bda:	2101      	movs	r1, #1
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fe89 	bl	80038f4 <HAL_PCDEx_LPM_Callback>
 8002be2:	e002      	b.n	8002bea <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f008 f9b9 	bl	800af5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f006 f86e 	bl	8008cd0 <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bfe:	f040 80b7 	bne.w	8002d70 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f005 f935 	bl	8007e8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c26:	e046      	b.n	8002cb6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c34:	461a      	mov	r2, r3
 8002c36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c3a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c4c:	0151      	lsls	r1, r2, #5
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	440a      	add	r2, r1
 8002c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c6e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c80:	0151      	lsls	r1, r2, #5
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	440a      	add	r2, r1
 8002c86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ca0:	0151      	lsls	r1, r2, #5
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002caa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	791b      	ldrb	r3, [r3, #4]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d3b2      	bcc.n	8002c28 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cd0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7bdb      	ldrb	r3, [r3, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d016      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cee:	f043 030b 	orr.w	r3, r3, #11
 8002cf2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d04:	f043 030b 	orr.w	r3, r3, #11
 8002d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d0a:	e015      	b.n	8002d38 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002d20:	4313      	orrs	r3, r2
 8002d22:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d32:	f043 030b 	orr.w	r3, r3, #11
 8002d36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d46:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f006 f87e 	bl	8008e5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f005 ffab 	bl	8008cd0 <USB_ReadInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d84:	d123      	bne.n	8002dce <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f006 f842 	bl	8008e14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f005 f8f2 	bl	8007f7e <USB_GetDevSpeed>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681c      	ldr	r4, [r3, #0]
 8002da6:	f001 fd05 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 8002daa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002db0:	461a      	mov	r2, r3
 8002db2:	4620      	mov	r0, r4
 8002db4:	f004 fdfc 	bl	80079b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f008 f8a6 	bl	800af0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f005 ff7c 	bl	8008cd0 <USB_ReadInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d10a      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f008 f883 	bl	800aeee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f002 0208 	and.w	r2, r2, #8
 8002df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 ff67 	bl	8008cd0 <USB_ReadInterrupts>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e08:	2b80      	cmp	r3, #128	@ 0x80
 8002e0a:	d123      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e18:	2301      	movs	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1c:	e014      	b.n	8002e48 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 faf2 	bl	8003426 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	3301      	adds	r3, #1
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	791b      	ldrb	r3, [r3, #4]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d3e4      	bcc.n	8002e1e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f005 ff39 	bl	8008cd0 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e68:	d13c      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6e:	e02b      	b.n	8002ec8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3318      	adds	r3, #24
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d115      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e96:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	da12      	bge.n	8002ec2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3317      	adds	r3, #23
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fab2 	bl	8003426 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	791b      	ldrb	r3, [r3, #4]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d3cd      	bcc.n	8002e70 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fef1 	bl	8008cd0 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ef8:	d156      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002efa:	2301      	movs	r3, #1
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efe:	e045      	b.n	8002f8c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d12e      	bne.n	8002f86 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f28:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	da2b      	bge.n	8002f86 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	0c1a      	lsrs	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f38:	4053      	eors	r3, r2
 8002f3a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d121      	bne.n	8002f86 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f82:	6053      	str	r3, [r2, #4]
            break;
 8002f84:	e008      	b.n	8002f98 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	3301      	adds	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	791b      	ldrb	r3, [r3, #4]
 8002f90:	461a      	mov	r2, r3
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d3b3      	bcc.n	8002f00 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f005 fe8f 	bl	8008cd0 <USB_ReadInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f008 f824 	bl	800b00c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f005 fe79 	bl	8008cd0 <USB_ReadInterrupts>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d115      	bne.n	8003014 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f008 f814 	bl	800b028 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6859      	ldr	r1, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	e000      	b.n	8003014 <HAL_PCD_IRQHandler+0x996>
      return;
 8003012:	bf00      	nop
    }
  }
}
 8003014:	3734      	adds	r7, #52	@ 0x34
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}

0800301a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_PCD_SetAddress+0x1a>
 8003030:	2302      	movs	r3, #2
 8003032:	e012      	b.n	800305a <HAL_PCD_SetAddress+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f005 fdd8 	bl	8008c00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	4608      	mov	r0, r1
 800306c:	4611      	mov	r1, r2
 800306e:	461a      	mov	r2, r3
 8003070:	4603      	mov	r3, r0
 8003072:	70fb      	strb	r3, [r7, #3]
 8003074:	460b      	mov	r3, r1
 8003076:	803b      	strh	r3, [r7, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003084:	2b00      	cmp	r3, #0
 8003086:	da0f      	bge.n	80030a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	3310      	adds	r3, #16
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4413      	add	r3, r2
 800309c:	3304      	adds	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	705a      	strb	r2, [r3, #1]
 80030a6:	e00f      	b.n	80030c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030d4:	883b      	ldrh	r3, [r7, #0]
 80030d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	78ba      	ldrb	r2, [r7, #2]
 80030e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030f6:	78bb      	ldrb	r3, [r7, #2]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d102      	bne.n	8003102 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_Open+0xae>
 800310c:	2302      	movs	r3, #2
 800310e:	e00e      	b.n	800312e <HAL_PCD_EP_Open+0xcc>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f004 ff52 	bl	8007fc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800312c:	7afb      	ldrb	r3, [r7, #11]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003146:	2b00      	cmp	r3, #0
 8003148:	da0f      	bge.n	800316a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	3310      	adds	r3, #16
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	3304      	adds	r3, #4
 8003160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	705a      	strb	r2, [r3, #1]
 8003168:	e00f      	b.n	800318a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_PCD_EP_Close+0x6e>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e00e      	b.n	80031c2 <HAL_PCD_EP_Close+0x8c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f004 ff90 	bl	80080d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	460b      	mov	r3, r1
 80031d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031da:	7afb      	ldrb	r3, [r7, #11]
 80031dc:	f003 020f 	and.w	r2, r3, #15
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	3304      	adds	r3, #4
 80031f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800320c:	7afb      	ldrb	r3, [r7, #11]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	b2da      	uxtb	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	799b      	ldrb	r3, [r3, #6]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d102      	bne.n	8003226 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	799b      	ldrb	r3, [r3, #6]
 800322e:	461a      	mov	r2, r3
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	f005 f82d 	bl	8008290 <USB_EPStartXfer>

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	460b      	mov	r3, r1
 800324e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003250:	7afb      	ldrb	r3, [r7, #11]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	3310      	adds	r3, #16
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	3304      	adds	r3, #4
 8003266:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2200      	movs	r2, #0
 8003278:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2201      	movs	r2, #1
 800327e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003280:	7afb      	ldrb	r3, [r7, #11]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	b2da      	uxtb	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	799b      	ldrb	r3, [r3, #6]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	799b      	ldrb	r3, [r3, #6]
 80032a2:	461a      	mov	r2, r3
 80032a4:	6979      	ldr	r1, [r7, #20]
 80032a6:	f004 fff3 	bl	8008290 <USB_EPStartXfer>

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	7912      	ldrb	r2, [r2, #4]
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e04f      	b.n	8003372 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	da0f      	bge.n	80032fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	3310      	adds	r3, #16
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	3304      	adds	r3, #4
 80032f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	705a      	strb	r2, [r3, #1]
 80032f8:	e00d      	b.n	8003316 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_PCD_EP_SetStall+0x82>
 8003332:	2302      	movs	r3, #2
 8003334:	e01d      	b.n	8003372 <HAL_PCD_EP_SetStall+0xbe>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	4618      	mov	r0, r3
 8003346:	f005 fb87 	bl	8008a58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7999      	ldrb	r1, [r3, #6]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003362:	461a      	mov	r2, r3
 8003364:	f005 fd7a 	bl	8008e5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	7912      	ldrb	r2, [r2, #4]
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e042      	b.n	800341e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339c:	2b00      	cmp	r3, #0
 800339e:	da0f      	bge.n	80033c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	3310      	adds	r3, #16
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	3304      	adds	r3, #4
 80033b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	705a      	strb	r2, [r3, #1]
 80033be:	e00f      	b.n	80033e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_PCD_EP_ClrStall+0x86>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e00e      	b.n	800341e <HAL_PCD_EP_ClrStall+0xa4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68f9      	ldr	r1, [r7, #12]
 800340e:	4618      	mov	r0, r3
 8003410:	f005 fb90 	bl	8008b34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003436:	2b00      	cmp	r3, #0
 8003438:	da0c      	bge.n	8003454 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 020f 	and.w	r2, r3, #15
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	3310      	adds	r3, #16
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	3304      	adds	r3, #4
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e00c      	b.n	800346e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	4618      	mov	r0, r3
 8003476:	f005 f9af 	bl	80087d8 <USB_EPStopXfer>
 800347a:	4603      	mov	r3, r0
 800347c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800347e:	7afb      	ldrb	r3, [r7, #11]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	@ 0x28
 800348c:	af02      	add	r7, sp, #8
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	3310      	adds	r3, #16
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	3304      	adds	r3, #4
 80034ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d901      	bls.n	80034c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e06b      	b.n	8003598 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d902      	bls.n	80034dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	3303      	adds	r3, #3
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034e4:	e02a      	b.n	800353c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d902      	bls.n	8003502 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3303      	adds	r3, #3
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	68d9      	ldr	r1, [r3, #12]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	4603      	mov	r3, r0
 800351e:	6978      	ldr	r0, [r7, #20]
 8003520:	f005 fa04 	bl	800892c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	441a      	add	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	441a      	add	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	429a      	cmp	r2, r3
 8003550:	d809      	bhi.n	8003566 <PCD_WriteEmptyTxFifo+0xde>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800355a:	429a      	cmp	r2, r3
 800355c:	d203      	bcs.n	8003566 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1bf      	bne.n	80034e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	429a      	cmp	r2, r3
 8003570:	d811      	bhi.n	8003596 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	2201      	movs	r2, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	43db      	mvns	r3, r3
 800358c:	6939      	ldr	r1, [r7, #16]
 800358e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003592:	4013      	ands	r3, r2
 8003594:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	333c      	adds	r3, #60	@ 0x3c
 80035b8:	3304      	adds	r3, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	799b      	ldrb	r3, [r3, #6]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d17b      	bne.n	80036ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	4a61      	ldr	r2, [pc, #388]	@ (8003768 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	f240 80b9 	bls.w	800375c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80b3 	beq.w	800375c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003602:	461a      	mov	r2, r3
 8003604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003608:	6093      	str	r3, [r2, #8]
 800360a:	e0a7      	b.n	800375c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	2320      	movs	r3, #32
 8003626:	6093      	str	r3, [r2, #8]
 8003628:	e098      	b.n	800375c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 8093 	bne.w	800375c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	4a4b      	ldr	r2, [pc, #300]	@ (8003768 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d90f      	bls.n	800365e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003654:	461a      	mov	r2, r3
 8003656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800365a:	6093      	str	r3, [r2, #8]
 800365c:	e07e      	b.n	800375c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	3304      	adds	r3, #4
 8003672:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	0159      	lsls	r1, r3, #5
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	440b      	add	r3, r1
 8003680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368a:	1ad2      	subs	r2, r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d114      	bne.n	80036c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036a8:	461a      	mov	r2, r3
 80036aa:	2101      	movs	r1, #1
 80036ac:	f005 fbd6 	bl	8008e5c <USB_EP0_OutStart>
 80036b0:	e006      	b.n	80036c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	441a      	add	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f007 fbdc 	bl	800ae84 <HAL_PCD_DataOutStageCallback>
 80036cc:	e046      	b.n	800375c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4a26      	ldr	r2, [pc, #152]	@ (800376c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d124      	bne.n	8003720 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ec:	461a      	mov	r2, r3
 80036ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036f2:	6093      	str	r3, [r2, #8]
 80036f4:	e032      	b.n	800375c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370c:	461a      	mov	r2, r3
 800370e:	2320      	movs	r3, #32
 8003710:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	4619      	mov	r1, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f007 fbb3 	bl	800ae84 <HAL_PCD_DataOutStageCallback>
 800371e:	e01d      	b.n	800375c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d114      	bne.n	8003750 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003748:	461a      	mov	r2, r3
 800374a:	2100      	movs	r1, #0
 800374c:	f005 fb86 	bl	8008e5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f007 fb94 	bl	800ae84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	4f54300a 	.word	0x4f54300a
 800376c:	4f54310a 	.word	0x4f54310a

08003770 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	333c      	adds	r3, #60	@ 0x3c
 8003788:	3304      	adds	r3, #4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a15      	ldr	r2, [pc, #84]	@ (80037f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d90e      	bls.n	80037c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037bc:	461a      	mov	r2, r3
 80037be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f007 fb4b 	bl	800ae60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d90c      	bls.n	80037ec <PCD_EP_OutSetupPacket_int+0x7c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	799b      	ldrb	r3, [r3, #6]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037e4:	461a      	mov	r2, r3
 80037e6:	2101      	movs	r1, #1
 80037e8:	f005 fb38 	bl	8008e5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	4f54300a 	.word	0x4f54300a

080037fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
 8003808:	4613      	mov	r3, r2
 800380a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800381a:	883b      	ldrh	r3, [r7, #0]
 800381c:	0419      	lsls	r1, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	430a      	orrs	r2, r1
 8003826:	629a      	str	r2, [r3, #40]	@ 0x28
 8003828:	e028      	b.n	800387c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	4413      	add	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	e00d      	b.n	800385a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	3340      	adds	r3, #64	@ 0x40
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4413      	add	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	3301      	adds	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	3b01      	subs	r3, #1
 8003860:	429a      	cmp	r2, r3
 8003862:	d3ec      	bcc.n	800383e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003864:	883b      	ldrh	r3, [r7, #0]
 8003866:	0418      	lsls	r0, r3, #16
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	3b01      	subs	r3, #1
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	4302      	orrs	r2, r0
 8003874:	3340      	adds	r3, #64	@ 0x40
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038da:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	10000003 	.word	0x10000003

080038f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <HAL_PWREx_ConfigSupply+0x70>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d00a      	beq.n	8003936 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003920:	4b16      	ldr	r3, [pc, #88]	@ (800397c <HAL_PWREx_ConfigSupply+0x70>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d001      	beq.n	8003932 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e01f      	b.n	8003972 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e01d      	b.n	8003972 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003936:	4b11      	ldr	r3, [pc, #68]	@ (800397c <HAL_PWREx_ConfigSupply+0x70>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f023 0207 	bic.w	r2, r3, #7
 800393e:	490f      	ldr	r1, [pc, #60]	@ (800397c <HAL_PWREx_ConfigSupply+0x70>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4313      	orrs	r3, r2
 8003944:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003946:	f7fe f9f9 	bl	8001d3c <HAL_GetTick>
 800394a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800394c:	e009      	b.n	8003962 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800394e:	f7fe f9f5 	bl	8001d3c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800395c:	d901      	bls.n	8003962 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003962:	4b06      	ldr	r3, [pc, #24]	@ (800397c <HAL_PWREx_ConfigSupply+0x70>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800396a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396e:	d1ee      	bne.n	800394e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	58024800 	.word	0x58024800

08003980 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003984:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a04      	ldr	r2, [pc, #16]	@ (800399c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800398a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800398e:	60d3      	str	r3, [r2, #12]
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	58024800 	.word	0x58024800

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08c      	sub	sp, #48	@ 0x30
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e3c8      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8087 	beq.w	8003ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c0:	4b88      	ldr	r3, [pc, #544]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039ca:	4b86      	ldr	r3, [pc, #536]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d007      	beq.n	80039e6 <HAL_RCC_OscConfig+0x46>
 80039d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d8:	2b18      	cmp	r3, #24
 80039da:	d110      	bne.n	80039fe <HAL_RCC_OscConfig+0x5e>
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d10b      	bne.n	80039fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e6:	4b7f      	ldr	r3, [pc, #508]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d06c      	beq.n	8003acc <HAL_RCC_OscConfig+0x12c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d168      	bne.n	8003acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e3a2      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x76>
 8003a08:	4b76      	ldr	r3, [pc, #472]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a75      	ldr	r2, [pc, #468]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e02e      	b.n	8003a74 <HAL_RCC_OscConfig+0xd4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x98>
 8003a1e:	4b71      	ldr	r3, [pc, #452]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a70      	ldr	r2, [pc, #448]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6d      	ldr	r2, [pc, #436]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e01d      	b.n	8003a74 <HAL_RCC_OscConfig+0xd4>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0xbc>
 8003a42:	4b68      	ldr	r3, [pc, #416]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a67      	ldr	r2, [pc, #412]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b65      	ldr	r3, [pc, #404]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a64      	ldr	r2, [pc, #400]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0xd4>
 8003a5c:	4b61      	ldr	r3, [pc, #388]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a60      	ldr	r2, [pc, #384]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b5e      	ldr	r3, [pc, #376]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe f95e 	bl	8001d3c <HAL_GetTick>
 8003a80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fe f95a 	bl	8001d3c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	@ 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e356      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a96:	4b53      	ldr	r3, [pc, #332]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0xe4>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fe f94a 	bl	8001d3c <HAL_GetTick>
 8003aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fe f946 	bl	8001d3c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e342      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003abe:	4b49      	ldr	r3, [pc, #292]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x10c>
 8003aca:	e000      	b.n	8003ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 808c 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003adc:	4b41      	ldr	r3, [pc, #260]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ae4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <HAL_RCC_OscConfig+0x162>
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	2b18      	cmp	r3, #24
 8003af6:	d137      	bne.n	8003b68 <HAL_RCC_OscConfig+0x1c8>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d132      	bne.n	8003b68 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b02:	4b38      	ldr	r3, [pc, #224]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_RCC_OscConfig+0x17a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e314      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b1a:	4b32      	ldr	r3, [pc, #200]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0219 	bic.w	r2, r3, #25
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	492f      	ldr	r1, [pc, #188]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f906 	bl	8001d3c <HAL_GetTick>
 8003b30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fe f902 	bl	8001d3c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e2fe      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b46:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b52:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	4920      	ldr	r1, [pc, #128]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b66:	e045      	b.n	8003bf4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d026      	beq.n	8003bbe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b70:	4b1c      	ldr	r3, [pc, #112]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0219 	bic.w	r2, r3, #25
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4919      	ldr	r1, [pc, #100]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe f8db 	bl	8001d3c <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fe f8d7 	bl	8001d3c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e2d3      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b9c:	4b11      	ldr	r3, [pc, #68]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	490b      	ldr	r1, [pc, #44]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
 8003bbc:	e01a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a08      	ldr	r2, [pc, #32]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fe f8b7 	bl	8001d3c <HAL_GetTick>
 8003bce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd2:	f7fe f8b3 	bl	8001d3c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d903      	bls.n	8003be8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e2af      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
 8003be4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003be8:	4b96      	ldr	r3, [pc, #600]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ee      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d06a      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c00:	4b90      	ldr	r3, [pc, #576]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d007      	beq.n	8003c26 <HAL_RCC_OscConfig+0x286>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b18      	cmp	r3, #24
 8003c1a:	d11b      	bne.n	8003c54 <HAL_RCC_OscConfig+0x2b4>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d116      	bne.n	8003c54 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c26:	4b87      	ldr	r3, [pc, #540]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_RCC_OscConfig+0x29e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b80      	cmp	r3, #128	@ 0x80
 8003c38:	d001      	beq.n	8003c3e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e282      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c3e:	4b81      	ldr	r3, [pc, #516]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	061b      	lsls	r3, r3, #24
 8003c4c:	497d      	ldr	r1, [pc, #500]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c52:	e040      	b.n	8003cd6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d023      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c5c:	4b79      	ldr	r3, [pc, #484]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a78      	ldr	r2, [pc, #480]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fe f868 	bl	8001d3c <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c70:	f7fe f864 	bl	8001d3c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e260      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c82:	4b70      	ldr	r3, [pc, #448]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	4969      	ldr	r1, [pc, #420]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60cb      	str	r3, [r1, #12]
 8003ca2:	e018      	b.n	8003cd6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ca4:	4b67      	ldr	r3, [pc, #412]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a66      	ldr	r2, [pc, #408]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f844 	bl	8001d3c <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cb8:	f7fe f840 	bl	8001d3c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e23c      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cca:	4b5e      	ldr	r3, [pc, #376]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d036      	beq.n	8003d50 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d019      	beq.n	8003d1e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cea:	4b56      	ldr	r3, [pc, #344]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cee:	4a55      	ldr	r2, [pc, #340]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fe f821 	bl	8001d3c <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fe f81d 	bl	8001d3c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e219      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d10:	4b4c      	ldr	r3, [pc, #304]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x35e>
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1e:	4b49      	ldr	r3, [pc, #292]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d22:	4a48      	ldr	r2, [pc, #288]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fe f807 	bl	8001d3c <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d32:	f7fe f803 	bl	8001d3c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1ff      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d44:	4b3f      	ldr	r3, [pc, #252]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d036      	beq.n	8003dca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d019      	beq.n	8003d98 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d64:	4b37      	ldr	r3, [pc, #220]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a36      	ldr	r2, [pc, #216]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003d6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d70:	f7fd ffe4 	bl	8001d3c <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d78:	f7fd ffe0 	bl	8001d3c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1dc      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x3d8>
 8003d96:	e018      	b.n	8003dca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d98:	4b2a      	ldr	r3, [pc, #168]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a29      	ldr	r2, [pc, #164]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003d9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003da2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003da4:	f7fd ffca 	bl	8001d3c <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dac:	f7fd ffc6 	bl	8001d3c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1c2      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dbe:	4b21      	ldr	r3, [pc, #132]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8086 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <HAL_RCC_OscConfig+0x4a8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8003e48 <HAL_RCC_OscConfig+0x4a8>)
 8003dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de4:	f7fd ffaa 	bl	8001d3c <HAL_GetTick>
 8003de8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fd ffa6 	bl	8001d3c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	@ 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1a2      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dfe:	4b12      	ldr	r3, [pc, #72]	@ (8003e48 <HAL_RCC_OscConfig+0x4a8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d106      	bne.n	8003e20 <HAL_RCC_OscConfig+0x480>
 8003e12:	4b0c      	ldr	r3, [pc, #48]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	4a0b      	ldr	r2, [pc, #44]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1e:	e032      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d111      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4ac>
 8003e28:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	4a05      	ldr	r2, [pc, #20]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e34:	4b03      	ldr	r3, [pc, #12]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	4a02      	ldr	r2, [pc, #8]	@ (8003e44 <HAL_RCC_OscConfig+0x4a4>)
 8003e3a:	f023 0304 	bic.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e40:	e021      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e6>
 8003e42:	bf00      	nop
 8003e44:	58024400 	.word	0x58024400
 8003e48:	58024800 	.word	0x58024800
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_OscConfig+0x4ce>
 8003e54:	4b83      	ldr	r3, [pc, #524]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	4a82      	ldr	r2, [pc, #520]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003e5a:	f043 0304 	orr.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e60:	4b80      	ldr	r3, [pc, #512]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e64:	4a7f      	ldr	r2, [pc, #508]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e6c:	e00b      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e6>
 8003e6e:	4b7d      	ldr	r3, [pc, #500]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	4a7c      	ldr	r2, [pc, #496]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7e:	4a79      	ldr	r2, [pc, #484]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d015      	beq.n	8003eba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fd ff55 	bl	8001d3c <HAL_GetTick>
 8003e92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fd ff51 	bl	8001d3c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e14b      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eac:	4b6d      	ldr	r3, [pc, #436]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ee      	beq.n	8003e96 <HAL_RCC_OscConfig+0x4f6>
 8003eb8:	e014      	b.n	8003ee4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fd ff3f 	bl	8001d3c <HAL_GetTick>
 8003ebe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fd ff3b 	bl	8001d3c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e135      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ed8:	4b62      	ldr	r3, [pc, #392]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1ee      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 812a 	beq.w	8004142 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003eee:	4b5d      	ldr	r3, [pc, #372]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ef6:	2b18      	cmp	r3, #24
 8003ef8:	f000 80ba 	beq.w	8004070 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	f040 8095 	bne.w	8004030 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b57      	ldr	r3, [pc, #348]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a56      	ldr	r2, [pc, #344]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003f0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fd ff13 	bl	8001d3c <HAL_GetTick>
 8003f16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fd ff0f 	bl	8001d3c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e10b      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f38:	4b4a      	ldr	r3, [pc, #296]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003f3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8004068 <HAL_RCC_OscConfig+0x6c8>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f48:	0112      	lsls	r2, r2, #4
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	4945      	ldr	r1, [pc, #276]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	3b01      	subs	r3, #1
 8003f58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f60:	3b01      	subs	r3, #1
 8003f62:	025b      	lsls	r3, r3, #9
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f82:	4938      	ldr	r1, [pc, #224]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f88:	4b36      	ldr	r3, [pc, #216]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	4a35      	ldr	r2, [pc, #212]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f94:	4b33      	ldr	r3, [pc, #204]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f98:	4b34      	ldr	r3, [pc, #208]	@ (800406c <HAL_RCC_OscConfig+0x6cc>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fa0:	00d2      	lsls	r2, r2, #3
 8003fa2:	4930      	ldr	r1, [pc, #192]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	f023 020c 	bic.w	r2, r3, #12
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	492b      	ldr	r1, [pc, #172]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fba:	4b2a      	ldr	r3, [pc, #168]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	f023 0202 	bic.w	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	4927      	ldr	r1, [pc, #156]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fcc:	4b25      	ldr	r3, [pc, #148]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	4a24      	ldr	r2, [pc, #144]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd8:	4b22      	ldr	r3, [pc, #136]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	4a21      	ldr	r2, [pc, #132]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003fea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b19      	ldr	r3, [pc, #100]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a18      	ldr	r2, [pc, #96]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8004002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd fe98 	bl	8001d3c <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd fe94 	bl	8001d3c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e090      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004022:	4b10      	ldr	r3, [pc, #64]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x670>
 800402e:	e088      	b.n	8004142 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b0c      	ldr	r3, [pc, #48]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0b      	ldr	r2, [pc, #44]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8004036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800403a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd fe7e 	bl	8001d3c <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd fe7a 	bl	8001d3c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e076      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004056:	4b03      	ldr	r3, [pc, #12]	@ (8004064 <HAL_RCC_OscConfig+0x6c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x6a4>
 8004062:	e06e      	b.n	8004142 <HAL_RCC_OscConfig+0x7a2>
 8004064:	58024400 	.word	0x58024400
 8004068:	fffffc0c 	.word	0xfffffc0c
 800406c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004070:	4b36      	ldr	r3, [pc, #216]	@ (800414c <HAL_RCC_OscConfig+0x7ac>)
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004076:	4b35      	ldr	r3, [pc, #212]	@ (800414c <HAL_RCC_OscConfig+0x7ac>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	2b01      	cmp	r3, #1
 8004082:	d031      	beq.n	80040e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0203 	and.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d12a      	bne.n	80040e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d122      	bne.n	80040e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d11a      	bne.n	80040e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0a5b      	lsrs	r3, r3, #9
 80040b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d111      	bne.n	80040e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d108      	bne.n	80040e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	0e1b      	lsrs	r3, r3, #24
 80040da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e02b      	b.n	8004144 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040ec:	4b17      	ldr	r3, [pc, #92]	@ (800414c <HAL_RCC_OscConfig+0x7ac>)
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	08db      	lsrs	r3, r3, #3
 80040f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d01f      	beq.n	8004142 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004102:	4b12      	ldr	r3, [pc, #72]	@ (800414c <HAL_RCC_OscConfig+0x7ac>)
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	4a11      	ldr	r2, [pc, #68]	@ (800414c <HAL_RCC_OscConfig+0x7ac>)
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800410e:	f7fd fe15 	bl	8001d3c <HAL_GetTick>
 8004112:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004114:	bf00      	nop
 8004116:	f7fd fe11 	bl	8001d3c <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	4293      	cmp	r3, r2
 8004120:	d0f9      	beq.n	8004116 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <HAL_RCC_OscConfig+0x7ac>)
 8004124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004126:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <HAL_RCC_OscConfig+0x7b0>)
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800412e:	00d2      	lsls	r2, r2, #3
 8004130:	4906      	ldr	r1, [pc, #24]	@ (800414c <HAL_RCC_OscConfig+0x7ac>)
 8004132:	4313      	orrs	r3, r2
 8004134:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004136:	4b05      	ldr	r3, [pc, #20]	@ (800414c <HAL_RCC_OscConfig+0x7ac>)
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	4a04      	ldr	r2, [pc, #16]	@ (800414c <HAL_RCC_OscConfig+0x7ac>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3730      	adds	r7, #48	@ 0x30
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	58024400 	.word	0x58024400
 8004150:	ffff0007 	.word	0xffff0007

08004154 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e19c      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004168:	4b8a      	ldr	r3, [pc, #552]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d910      	bls.n	8004198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004176:	4b87      	ldr	r3, [pc, #540]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 020f 	bic.w	r2, r3, #15
 800417e:	4985      	ldr	r1, [pc, #532]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b83      	ldr	r3, [pc, #524]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e184      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d010      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	4b7b      	ldr	r3, [pc, #492]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d908      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041b4:	4b78      	ldr	r3, [pc, #480]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	4975      	ldr	r1, [pc, #468]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d010      	beq.n	80041f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	4b70      	ldr	r3, [pc, #448]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041de:	429a      	cmp	r2, r3
 80041e0:	d908      	bls.n	80041f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	496a      	ldr	r1, [pc, #424]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d010      	beq.n	8004222 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	4b64      	ldr	r3, [pc, #400]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800420c:	429a      	cmp	r2, r3
 800420e:	d908      	bls.n	8004222 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004210:	4b61      	ldr	r3, [pc, #388]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	495e      	ldr	r1, [pc, #376]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800421e:	4313      	orrs	r3, r2
 8004220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d010      	beq.n	8004250 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	4b59      	ldr	r3, [pc, #356]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800423a:	429a      	cmp	r2, r3
 800423c:	d908      	bls.n	8004250 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800423e:	4b56      	ldr	r3, [pc, #344]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4953      	ldr	r1, [pc, #332]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800424c:	4313      	orrs	r3, r2
 800424e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d010      	beq.n	800427e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	4b4d      	ldr	r3, [pc, #308]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	429a      	cmp	r2, r3
 800426a:	d908      	bls.n	800427e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b4a      	ldr	r3, [pc, #296]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f023 020f 	bic.w	r2, r3, #15
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4947      	ldr	r1, [pc, #284]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800427a:	4313      	orrs	r3, r2
 800427c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d055      	beq.n	8004336 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800428a:	4b43      	ldr	r3, [pc, #268]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4940      	ldr	r1, [pc, #256]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004298:	4313      	orrs	r3, r2
 800429a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d121      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0f6      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042bc:	4b36      	ldr	r3, [pc, #216]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d115      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0ea      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042d4:	4b30      	ldr	r3, [pc, #192]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0de      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0d6      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042f4:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f023 0207 	bic.w	r2, r3, #7
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4925      	ldr	r1, [pc, #148]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004302:	4313      	orrs	r3, r2
 8004304:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004306:	f7fd fd19 	bl	8001d3c <HAL_GetTick>
 800430a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430c:	e00a      	b.n	8004324 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430e:	f7fd fd15 	bl	8001d3c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0be      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004324:	4b1c      	ldr	r3, [pc, #112]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	429a      	cmp	r2, r3
 8004334:	d1eb      	bne.n	800430e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d010      	beq.n	8004364 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	4b14      	ldr	r3, [pc, #80]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	429a      	cmp	r2, r3
 8004350:	d208      	bcs.n	8004364 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004352:	4b11      	ldr	r3, [pc, #68]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f023 020f 	bic.w	r2, r3, #15
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	490e      	ldr	r1, [pc, #56]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004360:	4313      	orrs	r3, r2
 8004362:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d214      	bcs.n	800439c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 020f 	bic.w	r2, r3, #15
 800437a:	4906      	ldr	r1, [pc, #24]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e086      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
 8004394:	52002000 	.word	0x52002000
 8004398:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d010      	beq.n	80043ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	4b3f      	ldr	r3, [pc, #252]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d208      	bcs.n	80043ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043b8:	4b3c      	ldr	r3, [pc, #240]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4939      	ldr	r1, [pc, #228]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d010      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d208      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043e6:	4b31      	ldr	r3, [pc, #196]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	492e      	ldr	r1, [pc, #184]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	4b28      	ldr	r3, [pc, #160]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004410:	429a      	cmp	r2, r3
 8004412:	d208      	bcs.n	8004426 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004414:	4b25      	ldr	r3, [pc, #148]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	4922      	ldr	r1, [pc, #136]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004422:	4313      	orrs	r3, r2
 8004424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d010      	beq.n	8004454 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800443e:	429a      	cmp	r2, r3
 8004440:	d208      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004442:	4b1a      	ldr	r3, [pc, #104]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4917      	ldr	r1, [pc, #92]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004450:	4313      	orrs	r3, r2
 8004452:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004454:	f000 f834 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b14      	ldr	r3, [pc, #80]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	4912      	ldr	r1, [pc, #72]	@ (80044b0 <HAL_RCC_ClockConfig+0x35c>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004472:	4b0e      	ldr	r3, [pc, #56]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	4a0d      	ldr	r2, [pc, #52]	@ (80044b0 <HAL_RCC_ClockConfig+0x35c>)
 800447c:	5cd3      	ldrb	r3, [r2, r3]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	4a0a      	ldr	r2, [pc, #40]	@ (80044b4 <HAL_RCC_ClockConfig+0x360>)
 800448a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800448c:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <HAL_RCC_ClockConfig+0x364>)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_RCC_ClockConfig+0x368>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd fc06 	bl	8001ca8 <HAL_InitTick>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	0800bec4 	.word	0x0800bec4
 80044b4:	240001b4 	.word	0x240001b4
 80044b8:	240001b0 	.word	0x240001b0
 80044bc:	240001b8 	.word	0x240001b8

080044c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b089      	sub	sp, #36	@ 0x24
 80044c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044c6:	4bb3      	ldr	r3, [pc, #716]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ce:	2b18      	cmp	r3, #24
 80044d0:	f200 8155 	bhi.w	800477e <HAL_RCC_GetSysClockFreq+0x2be>
 80044d4:	a201      	add	r2, pc, #4	@ (adr r2, 80044dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004541 	.word	0x08004541
 80044e0:	0800477f 	.word	0x0800477f
 80044e4:	0800477f 	.word	0x0800477f
 80044e8:	0800477f 	.word	0x0800477f
 80044ec:	0800477f 	.word	0x0800477f
 80044f0:	0800477f 	.word	0x0800477f
 80044f4:	0800477f 	.word	0x0800477f
 80044f8:	0800477f 	.word	0x0800477f
 80044fc:	08004567 	.word	0x08004567
 8004500:	0800477f 	.word	0x0800477f
 8004504:	0800477f 	.word	0x0800477f
 8004508:	0800477f 	.word	0x0800477f
 800450c:	0800477f 	.word	0x0800477f
 8004510:	0800477f 	.word	0x0800477f
 8004514:	0800477f 	.word	0x0800477f
 8004518:	0800477f 	.word	0x0800477f
 800451c:	0800456d 	.word	0x0800456d
 8004520:	0800477f 	.word	0x0800477f
 8004524:	0800477f 	.word	0x0800477f
 8004528:	0800477f 	.word	0x0800477f
 800452c:	0800477f 	.word	0x0800477f
 8004530:	0800477f 	.word	0x0800477f
 8004534:	0800477f 	.word	0x0800477f
 8004538:	0800477f 	.word	0x0800477f
 800453c:	08004573 	.word	0x08004573
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004540:	4b94      	ldr	r3, [pc, #592]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d009      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800454c:	4b91      	ldr	r3, [pc, #580]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	08db      	lsrs	r3, r3, #3
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	4a90      	ldr	r2, [pc, #576]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
 800455c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800455e:	e111      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004560:	4b8d      	ldr	r3, [pc, #564]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004562:	61bb      	str	r3, [r7, #24]
      break;
 8004564:	e10e      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004566:	4b8d      	ldr	r3, [pc, #564]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004568:	61bb      	str	r3, [r7, #24]
      break;
 800456a:	e10b      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800456c:	4b8c      	ldr	r3, [pc, #560]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800456e:	61bb      	str	r3, [r7, #24]
      break;
 8004570:	e108      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004572:	4b88      	ldr	r3, [pc, #544]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800457c:	4b85      	ldr	r3, [pc, #532]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004586:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004588:	4b82      	ldr	r3, [pc, #520]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004592:	4b80      	ldr	r3, [pc, #512]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80e1 	beq.w	8004778 <HAL_RCC_GetSysClockFreq+0x2b8>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f000 8083 	beq.w	80046c4 <HAL_RCC_GetSysClockFreq+0x204>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	f200 80a1 	bhi.w	8004708 <HAL_RCC_GetSysClockFreq+0x248>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x114>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d056      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x1c0>
 80045d2:	e099      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02d      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	4a6b      	ldr	r2, [pc, #428]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b62      	ldr	r3, [pc, #392]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a02 	vldr	s12, [r7, #8]
 800461e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800463a:	e087      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b51      	ldr	r3, [pc, #324]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004662:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800467e:	e065      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b40      	ldr	r3, [pc, #256]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046c2:	e043      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004706:	e021      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a02 	vldr	s12, [r7, #8]
 800472e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800474a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800474c:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	0a5b      	lsrs	r3, r3, #9
 8004752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004756:	3301      	adds	r3, #1
 8004758:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	ee07 3a90 	vmov	s15, r3
 8004760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004764:	edd7 6a07 	vldr	s13, [r7, #28]
 8004768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004770:	ee17 3a90 	vmov	r3, s15
 8004774:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004776:	e005      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
      break;
 800477c:	e002      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004780:	61bb      	str	r3, [r7, #24]
      break;
 8004782:	bf00      	nop
  }

  return sysclockfreq;
 8004784:	69bb      	ldr	r3, [r7, #24]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3724      	adds	r7, #36	@ 0x24
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	58024400 	.word	0x58024400
 8004798:	03d09000 	.word	0x03d09000
 800479c:	003d0900 	.word	0x003d0900
 80047a0:	017d7840 	.word	0x017d7840
 80047a4:	46000000 	.word	0x46000000
 80047a8:	4c742400 	.word	0x4c742400
 80047ac:	4a742400 	.word	0x4a742400
 80047b0:	4bbebc20 	.word	0x4bbebc20

080047b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047ba:	f7ff fe81 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x50>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	490f      	ldr	r1, [pc, #60]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x54>)
 80047cc:	5ccb      	ldrb	r3, [r1, r3]
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x50>)
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	4a09      	ldr	r2, [pc, #36]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x54>)
 80047e2:	5cd3      	ldrb	r3, [r2, r3]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	fa22 f303 	lsr.w	r3, r2, r3
 80047ee:	4a07      	ldr	r2, [pc, #28]	@ (800480c <HAL_RCC_GetHCLKFreq+0x58>)
 80047f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047f2:	4a07      	ldr	r2, [pc, #28]	@ (8004810 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047f8:	4b04      	ldr	r3, [pc, #16]	@ (800480c <HAL_RCC_GetHCLKFreq+0x58>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	58024400 	.word	0x58024400
 8004808:	0800bec4 	.word	0x0800bec4
 800480c:	240001b4 	.word	0x240001b4
 8004810:	240001b0 	.word	0x240001b0

08004814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004818:	f7ff ffcc 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4904      	ldr	r1, [pc, #16]	@ (800483c <HAL_RCC_GetPCLK1Freq+0x28>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	58024400 	.word	0x58024400
 800483c:	0800bec4 	.word	0x0800bec4

08004840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004844:	f7ff ffb6 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4904      	ldr	r1, [pc, #16]	@ (8004868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	58024400 	.word	0x58024400
 8004868:	0800bec4 	.word	0x0800bec4

0800486c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800486c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004870:	b0c6      	sub	sp, #280	@ 0x118
 8004872:	af00      	add	r7, sp, #0
 8004874:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004878:	2300      	movs	r3, #0
 800487a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800487e:	2300      	movs	r3, #0
 8004880:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004890:	2500      	movs	r5, #0
 8004892:	ea54 0305 	orrs.w	r3, r4, r5
 8004896:	d049      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800489e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048a2:	d02f      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048a8:	d828      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048ae:	d01a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048b4:	d822      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048be:	d007      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048c0:	e01c      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c2:	4bab      	ldr	r3, [pc, #684]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	4aaa      	ldr	r2, [pc, #680]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ce:	e01a      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d4:	3308      	adds	r3, #8
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 fc25 	bl	8006128 <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048e4:	e00f      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ea:	3328      	adds	r3, #40	@ 0x28
 80048ec:	2102      	movs	r1, #2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 fccc 	bl	800628c <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048fa:	e004      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800490e:	4b98      	ldr	r3, [pc, #608]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004912:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800491c:	4a94      	ldr	r2, [pc, #592]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800491e:	430b      	orrs	r3, r1
 8004920:	6513      	str	r3, [r2, #80]	@ 0x50
 8004922:	e003      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800492c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004938:	f04f 0900 	mov.w	r9, #0
 800493c:	ea58 0309 	orrs.w	r3, r8, r9
 8004940:	d047      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	2b04      	cmp	r3, #4
 800494a:	d82a      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800494c:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004969 	.word	0x08004969
 8004958:	08004977 	.word	0x08004977
 800495c:	0800498d 	.word	0x0800498d
 8004960:	080049ab 	.word	0x080049ab
 8004964:	080049ab 	.word	0x080049ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4b81      	ldr	r3, [pc, #516]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	4a80      	ldr	r2, [pc, #512]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004974:	e01a      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800497a:	3308      	adds	r3, #8
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f001 fbd2 	bl	8006128 <RCCEx_PLL2_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800498a:	e00f      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004990:	3328      	adds	r3, #40	@ 0x28
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f001 fc79 	bl	800628c <RCCEx_PLL3_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049a0:	e004      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049a8:	e000      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049b4:	4b6e      	ldr	r3, [pc, #440]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b8:	f023 0107 	bic.w	r1, r3, #7
 80049bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	4a6b      	ldr	r2, [pc, #428]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80049de:	f04f 0b00 	mov.w	fp, #0
 80049e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80049e6:	d05b      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049f0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80049f4:	d03b      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80049f6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80049fa:	d834      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a00:	d037      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a06:	d82e      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a08:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a0c:	d033      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004a0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a12:	d828      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a18:	d01a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a1e:	d822      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004a24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a28:	d007      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004a2a:	e01c      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2c:	4b50      	ldr	r3, [pc, #320]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	4a4f      	ldr	r2, [pc, #316]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a38:	e01e      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a3e:	3308      	adds	r3, #8
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fb70 	bl	8006128 <RCCEx_PLL2_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a4e:	e013      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a54:	3328      	adds	r3, #40	@ 0x28
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 fc17 	bl	800628c <RCCEx_PLL3_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a64:	e008      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a6c:	e004      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a6e:	bf00      	nop
 8004a70:	e002      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a72:	bf00      	nop
 8004a74:	e000      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a80:	4b3b      	ldr	r3, [pc, #236]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a90:	4a37      	ldr	r2, [pc, #220]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a92:	430b      	orrs	r3, r1
 8004a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a96:	e003      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004aac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ab6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d05d      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ac8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004acc:	d03b      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ace:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ad2:	d834      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ad4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ad8:	d037      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004ada:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ade:	d82e      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ae0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ae4:	d033      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004ae6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004aea:	d828      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004af0:	d01a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004af2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004af6:	d822      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b00:	d007      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b02:	e01c      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b04:	4b1a      	ldr	r3, [pc, #104]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	4a19      	ldr	r2, [pc, #100]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b10:	e01e      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b16:	3308      	adds	r3, #8
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 fb04 	bl	8006128 <RCCEx_PLL2_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b26:	e013      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b2c:	3328      	adds	r3, #40	@ 0x28
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 fbab 	bl	800628c <RCCEx_PLL3_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b3c:	e008      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b44:	e004      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10d      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b68:	4a01      	ldr	r2, [pc, #4]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b6e:	e005      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004b70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b92:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	d03a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba2:	2b30      	cmp	r3, #48	@ 0x30
 8004ba4:	d01f      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004ba6:	2b30      	cmp	r3, #48	@ 0x30
 8004ba8:	d819      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d00c      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d815      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d019      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d111      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bba:	4baa      	ldr	r3, [pc, #680]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	4aa9      	ldr	r2, [pc, #676]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bc6:	e011      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bcc:	3308      	adds	r3, #8
 8004bce:	2102      	movs	r1, #2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 faa9 	bl	8006128 <RCCEx_PLL2_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004be4:	e002      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bf4:	4b9b      	ldr	r3, [pc, #620]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c02:	4a98      	ldr	r2, [pc, #608]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c08:	e003      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d051      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c3c:	d035      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004c3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c42:	d82e      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c48:	d031      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004c4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c4e:	d828      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c54:	d01a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5a:	d822      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c64:	d007      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004c66:	e01c      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c68:	4b7e      	ldr	r3, [pc, #504]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c74:	e01c      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 fa52 	bl	8006128 <RCCEx_PLL2_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c8a:	e011      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c90:	3328      	adds	r3, #40	@ 0x28
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 faf9 	bl	800628c <RCCEx_PLL3_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cbc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	4a67      	ldr	r2, [pc, #412]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ccc:	e003      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	d053      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d00:	d033      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004d02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d06:	d82c      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d0c:	d02f      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004d0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d12:	d826      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d18:	d02b      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004d1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d1e:	d820      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d24:	d012      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d2a:	d81a      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d022      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d34:	d115      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 f9f2 	bl	8006128 <RCCEx_PLL2_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d4a:	e015      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d50:	3328      	adds	r3, #40	@ 0x28
 8004d52:	2101      	movs	r1, #1
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 fa99 	bl	800628c <RCCEx_PLL3_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d60:	e00a      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d68:	e006      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d6a:	bf00      	nop
 8004d6c:	e004      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d6e:	bf00      	nop
 8004d70:	e002      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d80:	4b38      	ldr	r3, [pc, #224]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8e:	4a35      	ldr	r2, [pc, #212]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d94:	e003      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004db4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d058      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dca:	d033      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dd0:	d82c      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd6:	d02f      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ddc:	d826      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004de2:	d02b      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004de4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004de8:	d820      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dee:	d012      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004df4:	d81a      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d022      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dfe:	d115      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e04:	3308      	adds	r3, #8
 8004e06:	2101      	movs	r1, #1
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f001 f98d 	bl	8006128 <RCCEx_PLL2_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e14:	e015      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1a:	3328      	adds	r3, #40	@ 0x28
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 fa34 	bl	800628c <RCCEx_PLL3_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e32:	e006      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e34:	bf00      	nop
 8004e36:	e004      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e38:	bf00      	nop
 8004e3a:	e002      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10e      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e5a:	4a02      	ldr	r2, [pc, #8]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e60:	e006      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e62:	bf00      	nop
 8004e64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d037      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e9a:	d00e      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ea0:	d816      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d018      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eaa:	d111      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eac:	4bc4      	ldr	r3, [pc, #784]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	4ac3      	ldr	r2, [pc, #780]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004eb8:	e00f      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 f930 	bl	8006128 <RCCEx_PLL2_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ece:	e004      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ed6:	e000      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ee2:	4bb7      	ldr	r3, [pc, #732]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ef0:	4ab3      	ldr	r2, [pc, #716]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ef6:	e003      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	d039      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d81c      	bhi.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f6d 	.word	0x08004f6d
 8004f34:	08004f41 	.word	0x08004f41
 8004f38:	08004f4f 	.word	0x08004f4f
 8004f3c:	08004f6d 	.word	0x08004f6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f40:	4b9f      	ldr	r3, [pc, #636]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	4a9e      	ldr	r2, [pc, #632]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f4c:	e00f      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f52:	3308      	adds	r3, #8
 8004f54:	2102      	movs	r1, #2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 f8e6 	bl	8006128 <RCCEx_PLL2_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f62:	e004      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f76:	4b92      	ldr	r3, [pc, #584]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7a:	f023 0103 	bic.w	r1, r3, #3
 8004f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f84:	4a8e      	ldr	r2, [pc, #568]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f86:	430b      	orrs	r3, r1
 8004f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f8a:	e003      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004faa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f000 8099 	beq.w	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb6:	4b83      	ldr	r3, [pc, #524]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a82      	ldr	r2, [pc, #520]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fc2:	f7fc febb 	bl	8001d3c <HAL_GetTick>
 8004fc6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fcc:	f7fc feb6 	bl	8001d3c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b64      	cmp	r3, #100	@ 0x64
 8004fda:	d903      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fe2:	e005      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fe4:	4b77      	ldr	r3, [pc, #476]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ed      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d173      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ff8:	4b71      	ldr	r3, [pc, #452]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ffa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005004:	4053      	eors	r3, r2
 8005006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d015      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800500e:	4b6c      	ldr	r3, [pc, #432]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005016:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800501a:	4b69      	ldr	r3, [pc, #420]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	4a68      	ldr	r2, [pc, #416]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005024:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005026:	4b66      	ldr	r3, [pc, #408]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502a:	4a65      	ldr	r2, [pc, #404]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800502c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005030:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005032:	4a63      	ldr	r2, [pc, #396]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005038:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800503a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800503e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005046:	d118      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fc fe78 	bl	8001d3c <HAL_GetTick>
 800504c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005050:	e00d      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005052:	f7fc fe73 	bl	8001d3c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800505c:	1ad2      	subs	r2, r2, r3
 800505e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005062:	429a      	cmp	r2, r3
 8005064:	d903      	bls.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800506c:	e005      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800506e:	4b54      	ldr	r3, [pc, #336]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0eb      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800507a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800507e:	2b00      	cmp	r3, #0
 8005080:	d129      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800508a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005092:	d10e      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005094:	4b4a      	ldr	r3, [pc, #296]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800509c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050a4:	091a      	lsrs	r2, r3, #4
 80050a6:	4b48      	ldr	r3, [pc, #288]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	4a45      	ldr	r2, [pc, #276]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6113      	str	r3, [r2, #16]
 80050b0:	e005      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x852>
 80050b2:	4b43      	ldr	r3, [pc, #268]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	4a42      	ldr	r2, [pc, #264]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050bc:	6113      	str	r3, [r2, #16]
 80050be:	4b40      	ldr	r3, [pc, #256]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050c0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80050c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ce:	4a3c      	ldr	r2, [pc, #240]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d4:	e008      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80050de:	e003      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f002 0301 	and.w	r3, r2, #1
 80050f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050f8:	2300      	movs	r3, #0
 80050fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005102:	460b      	mov	r3, r1
 8005104:	4313      	orrs	r3, r2
 8005106:	f000 808f 	beq.w	8005228 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800510a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005110:	2b28      	cmp	r3, #40	@ 0x28
 8005112:	d871      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005114:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	08005201 	.word	0x08005201
 8005120:	080051f9 	.word	0x080051f9
 8005124:	080051f9 	.word	0x080051f9
 8005128:	080051f9 	.word	0x080051f9
 800512c:	080051f9 	.word	0x080051f9
 8005130:	080051f9 	.word	0x080051f9
 8005134:	080051f9 	.word	0x080051f9
 8005138:	080051f9 	.word	0x080051f9
 800513c:	080051cd 	.word	0x080051cd
 8005140:	080051f9 	.word	0x080051f9
 8005144:	080051f9 	.word	0x080051f9
 8005148:	080051f9 	.word	0x080051f9
 800514c:	080051f9 	.word	0x080051f9
 8005150:	080051f9 	.word	0x080051f9
 8005154:	080051f9 	.word	0x080051f9
 8005158:	080051f9 	.word	0x080051f9
 800515c:	080051e3 	.word	0x080051e3
 8005160:	080051f9 	.word	0x080051f9
 8005164:	080051f9 	.word	0x080051f9
 8005168:	080051f9 	.word	0x080051f9
 800516c:	080051f9 	.word	0x080051f9
 8005170:	080051f9 	.word	0x080051f9
 8005174:	080051f9 	.word	0x080051f9
 8005178:	080051f9 	.word	0x080051f9
 800517c:	08005201 	.word	0x08005201
 8005180:	080051f9 	.word	0x080051f9
 8005184:	080051f9 	.word	0x080051f9
 8005188:	080051f9 	.word	0x080051f9
 800518c:	080051f9 	.word	0x080051f9
 8005190:	080051f9 	.word	0x080051f9
 8005194:	080051f9 	.word	0x080051f9
 8005198:	080051f9 	.word	0x080051f9
 800519c:	08005201 	.word	0x08005201
 80051a0:	080051f9 	.word	0x080051f9
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	080051f9 	.word	0x080051f9
 80051ac:	080051f9 	.word	0x080051f9
 80051b0:	080051f9 	.word	0x080051f9
 80051b4:	080051f9 	.word	0x080051f9
 80051b8:	080051f9 	.word	0x080051f9
 80051bc:	08005201 	.word	0x08005201
 80051c0:	58024400 	.word	0x58024400
 80051c4:	58024800 	.word	0x58024800
 80051c8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d0:	3308      	adds	r3, #8
 80051d2:	2101      	movs	r1, #1
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 ffa7 	bl	8006128 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051e0:	e00f      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e6:	3328      	adds	r3, #40	@ 0x28
 80051e8:	2101      	movs	r1, #1
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 f84e 	bl	800628c <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051f6:	e004      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051fe:	e000      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005202:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800520a:	4bbf      	ldr	r3, [pc, #764]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800520c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005218:	4abb      	ldr	r2, [pc, #748]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800521a:	430b      	orrs	r3, r1
 800521c:	6553      	str	r3, [r2, #84]	@ 0x54
 800521e:	e003      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005224:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f002 0302 	and.w	r3, r2, #2
 8005234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800523e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005242:	460b      	mov	r3, r1
 8005244:	4313      	orrs	r3, r2
 8005246:	d041      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800524e:	2b05      	cmp	r3, #5
 8005250:	d824      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005252:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	080052a5 	.word	0x080052a5
 800525c:	08005271 	.word	0x08005271
 8005260:	08005287 	.word	0x08005287
 8005264:	080052a5 	.word	0x080052a5
 8005268:	080052a5 	.word	0x080052a5
 800526c:	080052a5 	.word	0x080052a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005274:	3308      	adds	r3, #8
 8005276:	2101      	movs	r1, #1
 8005278:	4618      	mov	r0, r3
 800527a:	f000 ff55 	bl	8006128 <RCCEx_PLL2_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005284:	e00f      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800528a:	3328      	adds	r3, #40	@ 0x28
 800528c:	2101      	movs	r1, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fffc 	bl	800628c <RCCEx_PLL3_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800529a:	e004      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80052a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052ae:	4b96      	ldr	r3, [pc, #600]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b2:	f023 0107 	bic.w	r1, r3, #7
 80052b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052bc:	4a92      	ldr	r2, [pc, #584]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052be:	430b      	orrs	r3, r1
 80052c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80052c2:	e003      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f002 0304 	and.w	r3, r2, #4
 80052d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052dc:	2300      	movs	r3, #0
 80052de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052e2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052e6:	460b      	mov	r3, r1
 80052e8:	4313      	orrs	r3, r2
 80052ea:	d044      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f4:	2b05      	cmp	r3, #5
 80052f6:	d825      	bhi.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80052f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	0800534d 	.word	0x0800534d
 8005304:	08005319 	.word	0x08005319
 8005308:	0800532f 	.word	0x0800532f
 800530c:	0800534d 	.word	0x0800534d
 8005310:	0800534d 	.word	0x0800534d
 8005314:	0800534d 	.word	0x0800534d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531c:	3308      	adds	r3, #8
 800531e:	2101      	movs	r1, #1
 8005320:	4618      	mov	r0, r3
 8005322:	f000 ff01 	bl	8006128 <RCCEx_PLL2_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800532c:	e00f      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800532e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005332:	3328      	adds	r3, #40	@ 0x28
 8005334:	2101      	movs	r1, #1
 8005336:	4618      	mov	r0, r3
 8005338:	f000 ffa8 	bl	800628c <RCCEx_PLL3_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10b      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005356:	4b6c      	ldr	r3, [pc, #432]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535a:	f023 0107 	bic.w	r1, r3, #7
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005366:	4a68      	ldr	r2, [pc, #416]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6593      	str	r3, [r2, #88]	@ 0x58
 800536c:	e003      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005372:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f002 0320 	and.w	r3, r2, #32
 8005382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800538c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005390:	460b      	mov	r3, r1
 8005392:	4313      	orrs	r3, r2
 8005394:	d055      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800539a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800539e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053a2:	d033      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80053a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053a8:	d82c      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ae:	d02f      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b4:	d826      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053ba:	d02b      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80053bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053c0:	d820      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053c6:	d012      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80053c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053cc:	d81a      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d022      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80053d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053d6:	d115      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053dc:	3308      	adds	r3, #8
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fea1 	bl	8006128 <RCCEx_PLL2_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053ec:	e015      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f2:	3328      	adds	r3, #40	@ 0x28
 80053f4:	2102      	movs	r1, #2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 ff48 	bl	800628c <RCCEx_PLL3_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005402:	e00a      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800540a:	e006      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800540c:	bf00      	nop
 800540e:	e004      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005410:	bf00      	nop
 8005412:	e002      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005414:	bf00      	nop
 8005416:	e000      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005422:	4b39      	ldr	r3, [pc, #228]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800542a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005432:	4a35      	ldr	r2, [pc, #212]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005434:	430b      	orrs	r3, r1
 8005436:	6553      	str	r3, [r2, #84]	@ 0x54
 8005438:	e003      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800543e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800544e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005452:	2300      	movs	r3, #0
 8005454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005458:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800545c:	460b      	mov	r3, r1
 800545e:	4313      	orrs	r3, r2
 8005460:	d058      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005466:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800546a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800546e:	d033      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005470:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005474:	d82c      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547a:	d02f      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800547c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005480:	d826      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005482:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005486:	d02b      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005488:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800548c:	d820      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005492:	d012      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005498:	d81a      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d022      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800549e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a2:	d115      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a8:	3308      	adds	r3, #8
 80054aa:	2100      	movs	r1, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fe3b 	bl	8006128 <RCCEx_PLL2_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054b8:	e015      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054be:	3328      	adds	r3, #40	@ 0x28
 80054c0:	2102      	movs	r1, #2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fee2 	bl	800628c <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054ce:	e00a      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054d6:	e006      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054d8:	bf00      	nop
 80054da:	e004      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054dc:	bf00      	nop
 80054de:	e002      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10e      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054fe:	4a02      	ldr	r2, [pc, #8]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005500:	430b      	orrs	r3, r1
 8005502:	6593      	str	r3, [r2, #88]	@ 0x58
 8005504:	e006      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005506:	bf00      	nop
 8005508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005510:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005524:	2300      	movs	r3, #0
 8005526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800552a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800552e:	460b      	mov	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	d055      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005538:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800553c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005540:	d033      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005542:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005546:	d82c      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554c:	d02f      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800554e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005552:	d826      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005554:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005558:	d02b      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800555a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800555e:	d820      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005560:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005564:	d012      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005566:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800556a:	d81a      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d022      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005574:	d115      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557a:	3308      	adds	r3, #8
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fdd2 	bl	8006128 <RCCEx_PLL2_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800558a:	e015      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005590:	3328      	adds	r3, #40	@ 0x28
 8005592:	2102      	movs	r1, #2
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fe79 	bl	800628c <RCCEx_PLL3_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055a0:	e00a      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80055aa:	bf00      	nop
 80055ac:	e004      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80055b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055c0:	4ba0      	ldr	r3, [pc, #640]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80055c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055d0:	4a9c      	ldr	r2, [pc, #624]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055d2:	430b      	orrs	r3, r1
 80055d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d6:	e003      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80055e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	f002 0308 	and.w	r3, r2, #8
 80055ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055f0:	2300      	movs	r3, #0
 80055f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055fa:	460b      	mov	r3, r1
 80055fc:	4313      	orrs	r3, r2
 80055fe:	d01e      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560c:	d10c      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005612:	3328      	adds	r3, #40	@ 0x28
 8005614:	2102      	movs	r1, #2
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fe38 	bl	800628c <RCCEx_PLL3_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005628:	4b86      	ldr	r3, [pc, #536]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800562a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005638:	4a82      	ldr	r2, [pc, #520]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800563a:	430b      	orrs	r3, r1
 800563c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800563e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f002 0310 	and.w	r3, r2, #16
 800564a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800564e:	2300      	movs	r3, #0
 8005650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005654:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005658:	460b      	mov	r3, r1
 800565a:	4313      	orrs	r3, r2
 800565c:	d01e      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800565e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800566a:	d10c      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800566c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005670:	3328      	adds	r3, #40	@ 0x28
 8005672:	2102      	movs	r1, #2
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fe09 	bl	800628c <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005686:	4b6f      	ldr	r3, [pc, #444]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005696:	4a6b      	ldr	r2, [pc, #428]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005698:	430b      	orrs	r3, r1
 800569a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80056a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056aa:	2300      	movs	r3, #0
 80056ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056b2:	460b      	mov	r3, r1
 80056b4:	4313      	orrs	r3, r2
 80056b6:	d03e      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056c4:	d022      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80056c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056ca:	d81b      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d4:	d00b      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80056d6:	e015      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056dc:	3308      	adds	r3, #8
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fd21 	bl	8006128 <RCCEx_PLL2_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056ec:	e00f      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f2:	3328      	adds	r3, #40	@ 0x28
 80056f4:	2102      	movs	r1, #2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fdc8 	bl	800628c <RCCEx_PLL3_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005702:	e004      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800570a:	e000      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800570c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10b      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005716:	4b4b      	ldr	r3, [pc, #300]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800571e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005726:	4a47      	ldr	r2, [pc, #284]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005728:	430b      	orrs	r3, r1
 800572a:	6593      	str	r3, [r2, #88]	@ 0x58
 800572c:	e003      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005742:	673b      	str	r3, [r7, #112]	@ 0x70
 8005744:	2300      	movs	r3, #0
 8005746:	677b      	str	r3, [r7, #116]	@ 0x74
 8005748:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800574c:	460b      	mov	r3, r1
 800574e:	4313      	orrs	r3, r2
 8005750:	d03b      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800575a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800575e:	d01f      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005760:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005764:	d818      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800576a:	d003      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800576c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005770:	d007      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005772:	e011      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005774:	4b33      	ldr	r3, [pc, #204]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	4a32      	ldr	r2, [pc, #200]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800577a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800577e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005780:	e00f      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005786:	3328      	adds	r3, #40	@ 0x28
 8005788:	2101      	movs	r1, #1
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fd7e 	bl	800628c <RCCEx_PLL3_Config>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005796:	e004      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800579e:	e000      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80057a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057aa:	4b26      	ldr	r3, [pc, #152]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ba:	4a22      	ldr	r2, [pc, #136]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057bc:	430b      	orrs	r3, r1
 80057be:	6553      	str	r3, [r2, #84]	@ 0x54
 80057c0:	e003      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057d8:	2300      	movs	r3, #0
 80057da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057e0:	460b      	mov	r3, r1
 80057e2:	4313      	orrs	r3, r2
 80057e4:	d034      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80057f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057f4:	d007      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80057f6:	e011      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f8:	4b12      	ldr	r3, [pc, #72]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fc:	4a11      	ldr	r2, [pc, #68]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005804:	e00e      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580a:	3308      	adds	r3, #8
 800580c:	2102      	movs	r1, #2
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fc8a 	bl	8006128 <RCCEx_PLL2_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800581a:	e003      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10d      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800582c:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800582e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005830:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583a:	4a02      	ldr	r2, [pc, #8]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800583c:	430b      	orrs	r3, r1
 800583e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005840:	e006      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005842:	bf00      	nop
 8005844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800584c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800585c:	663b      	str	r3, [r7, #96]	@ 0x60
 800585e:	2300      	movs	r3, #0
 8005860:	667b      	str	r3, [r7, #100]	@ 0x64
 8005862:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005866:	460b      	mov	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	d00c      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800586c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005870:	3328      	adds	r3, #40	@ 0x28
 8005872:	2102      	movs	r1, #2
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fd09 	bl	800628c <RCCEx_PLL3_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005892:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005894:	2300      	movs	r3, #0
 8005896:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005898:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800589c:	460b      	mov	r3, r1
 800589e:	4313      	orrs	r3, r2
 80058a0:	d036      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ac:	d018      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80058ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b2:	d811      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b8:	d014      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80058ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058be:	d80b      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d011      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80058c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c8:	d106      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ca:	4bb7      	ldr	r3, [pc, #732]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	4ab6      	ldr	r2, [pc, #728]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058d6:	e008      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058de:	e004      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058e0:	bf00      	nop
 80058e2:	e002      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058f2:	4bad      	ldr	r3, [pc, #692]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005900:	4aa9      	ldr	r2, [pc, #676]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005902:	430b      	orrs	r3, r1
 8005904:	6553      	str	r3, [r2, #84]	@ 0x54
 8005906:	e003      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800590c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800591c:	653b      	str	r3, [r7, #80]	@ 0x50
 800591e:	2300      	movs	r3, #0
 8005920:	657b      	str	r3, [r7, #84]	@ 0x54
 8005922:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005926:	460b      	mov	r3, r1
 8005928:	4313      	orrs	r3, r2
 800592a:	d009      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800592c:	4b9e      	ldr	r3, [pc, #632]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800592e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005930:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593a:	4a9b      	ldr	r2, [pc, #620]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800593c:	430b      	orrs	r3, r1
 800593e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800594c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800594e:	2300      	movs	r3, #0
 8005950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005952:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800595c:	4b92      	ldr	r3, [pc, #584]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800595e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005960:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800596a:	4a8f      	ldr	r2, [pc, #572]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800596c:	430b      	orrs	r3, r1
 800596e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800597c:	643b      	str	r3, [r7, #64]	@ 0x40
 800597e:	2300      	movs	r3, #0
 8005980:	647b      	str	r3, [r7, #68]	@ 0x44
 8005982:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d00e      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800598c:	4b86      	ldr	r3, [pc, #536]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	4a85      	ldr	r2, [pc, #532]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005992:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005996:	6113      	str	r3, [r2, #16]
 8005998:	4b83      	ldr	r3, [pc, #524]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800599a:	6919      	ldr	r1, [r3, #16]
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059a4:	4a80      	ldr	r2, [pc, #512]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059a6:	430b      	orrs	r3, r1
 80059a8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80059b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059b8:	2300      	movs	r3, #0
 80059ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059c6:	4b78      	ldr	r3, [pc, #480]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d4:	4a74      	ldr	r2, [pc, #464]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059d6:	430b      	orrs	r3, r1
 80059d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e8:	2300      	movs	r3, #0
 80059ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059f0:	460b      	mov	r3, r1
 80059f2:	4313      	orrs	r3, r2
 80059f4:	d00a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059f6:	4b6c      	ldr	r3, [pc, #432]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a06:	4a68      	ldr	r2, [pc, #416]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	2100      	movs	r1, #0
 8005a16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a1e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a22:	460b      	mov	r3, r1
 8005a24:	4313      	orrs	r3, r2
 8005a26:	d011      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fb79 	bl	8006128 <RCCEx_PLL2_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	2100      	movs	r1, #0
 8005a56:	6239      	str	r1, [r7, #32]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a62:	460b      	mov	r3, r1
 8005a64:	4313      	orrs	r3, r2
 8005a66:	d011      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	2101      	movs	r1, #1
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fb59 	bl	8006128 <RCCEx_PLL2_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	2100      	movs	r1, #0
 8005a96:	61b9      	str	r1, [r7, #24]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	d011      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aac:	3308      	adds	r3, #8
 8005aae:	2102      	movs	r1, #2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fb39 	bl	8006128 <RCCEx_PLL2_Config>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005abc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	6139      	str	r1, [r7, #16]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	d011      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aec:	3328      	adds	r3, #40	@ 0x28
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fbcb 	bl	800628c <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	2100      	movs	r1, #0
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d011      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2c:	3328      	adds	r3, #40	@ 0x28
 8005b2e:	2101      	movs	r1, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fbab 	bl	800628c <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	2100      	movs	r1, #0
 8005b56:	6039      	str	r1, [r7, #0]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	607b      	str	r3, [r7, #4]
 8005b5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b62:	460b      	mov	r3, r1
 8005b64:	4313      	orrs	r3, r2
 8005b66:	d011      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	3328      	adds	r3, #40	@ 0x28
 8005b6e:	2102      	movs	r1, #2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fb8b 	bl	800628c <RCCEx_PLL3_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005b8c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e000      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ba6:	bf00      	nop
 8005ba8:	58024400 	.word	0x58024400

08005bac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bb0:	f7fe fe00 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	4904      	ldr	r1, [pc, #16]	@ (8005bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bc2:	5ccb      	ldrb	r3, [r1, r3]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	0800bec4 	.word	0x0800bec4

08005bd8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b089      	sub	sp, #36	@ 0x24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005be0:	4ba1      	ldr	r3, [pc, #644]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bea:	4b9f      	ldr	r3, [pc, #636]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bee:	0b1b      	lsrs	r3, r3, #12
 8005bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bf4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bf6:	4b9c      	ldr	r3, [pc, #624]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	091b      	lsrs	r3, r3, #4
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c02:	4b99      	ldr	r3, [pc, #612]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c06:	08db      	lsrs	r3, r3, #3
 8005c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8111 	beq.w	8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	f000 8083 	beq.w	8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	f200 80a1 	bhi.w	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d056      	beq.n	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c42:	e099      	b.n	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c44:	4b88      	ldr	r3, [pc, #544]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d02d      	beq.n	8005cac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c50:	4b85      	ldr	r3, [pc, #532]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	08db      	lsrs	r3, r3, #3
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	4a84      	ldr	r2, [pc, #528]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005caa:	e087      	b.n	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cee:	e065      	b.n	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d02:	4b59      	ldr	r3, [pc, #356]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d32:	e043      	b.n	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d46:	4b48      	ldr	r3, [pc, #288]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d76:	e021      	b.n	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8a:	4b37      	ldr	r3, [pc, #220]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc0:	0a5b      	lsrs	r3, r3, #9
 8005dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de2:	ee17 2a90 	vmov	r2, s15
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dea:	4b1f      	ldr	r3, [pc, #124]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dee:	0c1b      	lsrs	r3, r3, #16
 8005df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e10:	ee17 2a90 	vmov	r2, s15
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e18:	4b13      	ldr	r3, [pc, #76]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1c:	0e1b      	lsrs	r3, r3, #24
 8005e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e3e:	ee17 2a90 	vmov	r2, s15
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e46:	e008      	b.n	8005e5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	609a      	str	r2, [r3, #8]
}
 8005e5a:	bf00      	nop
 8005e5c:	3724      	adds	r7, #36	@ 0x24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	03d09000 	.word	0x03d09000
 8005e70:	46000000 	.word	0x46000000
 8005e74:	4c742400 	.word	0x4c742400
 8005e78:	4a742400 	.word	0x4a742400
 8005e7c:	4bbebc20 	.word	0x4bbebc20

08005e80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	@ 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e88:	4ba1      	ldr	r3, [pc, #644]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e92:	4b9f      	ldr	r3, [pc, #636]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e96:	0d1b      	lsrs	r3, r3, #20
 8005e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005eaa:	4b99      	ldr	r3, [pc, #612]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eae:	08db      	lsrs	r3, r3, #3
 8005eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8111 	beq.w	80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	f000 8083 	beq.w	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	f200 80a1 	bhi.w	8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d056      	beq.n	8005f98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005eea:	e099      	b.n	8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eec:	4b88      	ldr	r3, [pc, #544]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d02d      	beq.n	8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ef8:	4b85      	ldr	r3, [pc, #532]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	08db      	lsrs	r3, r3, #3
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	4a84      	ldr	r2, [pc, #528]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	ee07 3a90 	vmov	s15, r3
 8005f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f22:	4b7b      	ldr	r3, [pc, #492]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f52:	e087      	b.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f66:	4b6a      	ldr	r3, [pc, #424]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f96:	e065      	b.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005faa:	4b59      	ldr	r3, [pc, #356]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fda:	e043      	b.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fee:	4b48      	ldr	r3, [pc, #288]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006002:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800601e:	e021      	b.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800602e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006032:	4b37      	ldr	r3, [pc, #220]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006042:	ed97 6a03 	vldr	s12, [r7, #12]
 8006046:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800604a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006062:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006064:	4b2a      	ldr	r3, [pc, #168]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006068:	0a5b      	lsrs	r3, r3, #9
 800606a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800607a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800607e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608a:	ee17 2a90 	vmov	r2, s15
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006092:	4b1f      	ldr	r3, [pc, #124]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b8:	ee17 2a90 	vmov	r2, s15
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80060c0:	4b13      	ldr	r3, [pc, #76]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c4:	0e1b      	lsrs	r3, r3, #24
 80060c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060da:	edd7 6a07 	vldr	s13, [r7, #28]
 80060de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e6:	ee17 2a90 	vmov	r2, s15
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060ee:	e008      	b.n	8006102 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	609a      	str	r2, [r3, #8]
}
 8006102:	bf00      	nop
 8006104:	3724      	adds	r7, #36	@ 0x24
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	58024400 	.word	0x58024400
 8006114:	03d09000 	.word	0x03d09000
 8006118:	46000000 	.word	0x46000000
 800611c:	4c742400 	.word	0x4c742400
 8006120:	4a742400 	.word	0x4a742400
 8006124:	4bbebc20 	.word	0x4bbebc20

08006128 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006136:	4b53      	ldr	r3, [pc, #332]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b03      	cmp	r3, #3
 8006140:	d101      	bne.n	8006146 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e099      	b.n	800627a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006146:	4b4f      	ldr	r3, [pc, #316]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a4e      	ldr	r2, [pc, #312]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800614c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006152:	f7fb fdf3 	bl	8001d3c <HAL_GetTick>
 8006156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006158:	e008      	b.n	800616c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800615a:	f7fb fdef 	bl	8001d3c <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e086      	b.n	800627a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800616c:	4b45      	ldr	r3, [pc, #276]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1f0      	bne.n	800615a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006178:	4b42      	ldr	r3, [pc, #264]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800617a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	031b      	lsls	r3, r3, #12
 8006186:	493f      	ldr	r1, [pc, #252]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006188:	4313      	orrs	r3, r2
 800618a:	628b      	str	r3, [r1, #40]	@ 0x28
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	3b01      	subs	r3, #1
 8006192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	3b01      	subs	r3, #1
 800619c:	025b      	lsls	r3, r3, #9
 800619e:	b29b      	uxth	r3, r3
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	041b      	lsls	r3, r3, #16
 80061aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	061b      	lsls	r3, r3, #24
 80061b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061bc:	4931      	ldr	r1, [pc, #196]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061c2:	4b30      	ldr	r3, [pc, #192]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	492d      	ldr	r1, [pc, #180]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	f023 0220 	bic.w	r2, r3, #32
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	4928      	ldr	r1, [pc, #160]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061e6:	4b27      	ldr	r3, [pc, #156]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	4a26      	ldr	r2, [pc, #152]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061ec:	f023 0310 	bic.w	r3, r3, #16
 80061f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061f2:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 80061f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061f6:	4b24      	ldr	r3, [pc, #144]	@ (8006288 <RCCEx_PLL2_Config+0x160>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	69d2      	ldr	r2, [r2, #28]
 80061fe:	00d2      	lsls	r2, r2, #3
 8006200:	4920      	ldr	r1, [pc, #128]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006206:	4b1f      	ldr	r3, [pc, #124]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620a:	4a1e      	ldr	r2, [pc, #120]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800620c:	f043 0310 	orr.w	r3, r3, #16
 8006210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006218:	4b1a      	ldr	r3, [pc, #104]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	4a19      	ldr	r2, [pc, #100]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800621e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006222:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006224:	e00f      	b.n	8006246 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d106      	bne.n	800623a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800622c:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	4a14      	ldr	r2, [pc, #80]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006238:	e005      	b.n	8006246 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800623a:	4b12      	ldr	r3, [pc, #72]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	4a11      	ldr	r2, [pc, #68]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006240:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006244:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006246:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a0e      	ldr	r2, [pc, #56]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800624c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006252:	f7fb fd73 	bl	8001d3c <HAL_GetTick>
 8006256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006258:	e008      	b.n	800626c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800625a:	f7fb fd6f 	bl	8001d3c <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e006      	b.n	800627a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800626c:	4b05      	ldr	r3, [pc, #20]	@ (8006284 <RCCEx_PLL2_Config+0x15c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
 8006288:	ffff0007 	.word	0xffff0007

0800628c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800629a:	4b53      	ldr	r3, [pc, #332]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800629c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d101      	bne.n	80062aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e099      	b.n	80063de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062aa:	4b4f      	ldr	r3, [pc, #316]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a4e      	ldr	r2, [pc, #312]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b6:	f7fb fd41 	bl	8001d3c <HAL_GetTick>
 80062ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062bc:	e008      	b.n	80062d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062be:	f7fb fd3d 	bl	8001d3c <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e086      	b.n	80063de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062d0:	4b45      	ldr	r3, [pc, #276]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f0      	bne.n	80062be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062dc:	4b42      	ldr	r3, [pc, #264]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	051b      	lsls	r3, r3, #20
 80062ea:	493f      	ldr	r1, [pc, #252]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	3b01      	subs	r3, #1
 8006300:	025b      	lsls	r3, r3, #9
 8006302:	b29b      	uxth	r3, r3
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	3b01      	subs	r3, #1
 800630c:	041b      	lsls	r3, r3, #16
 800630e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	3b01      	subs	r3, #1
 800631a:	061b      	lsls	r3, r3, #24
 800631c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006320:	4931      	ldr	r1, [pc, #196]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006326:	4b30      	ldr	r3, [pc, #192]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	492d      	ldr	r1, [pc, #180]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006334:	4313      	orrs	r3, r2
 8006336:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006338:	4b2b      	ldr	r3, [pc, #172]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	4928      	ldr	r1, [pc, #160]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006346:	4313      	orrs	r3, r2
 8006348:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800634a:	4b27      	ldr	r3, [pc, #156]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	4a26      	ldr	r2, [pc, #152]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006354:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006356:	4b24      	ldr	r3, [pc, #144]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800635a:	4b24      	ldr	r3, [pc, #144]	@ (80063ec <RCCEx_PLL3_Config+0x160>)
 800635c:	4013      	ands	r3, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	69d2      	ldr	r2, [r2, #28]
 8006362:	00d2      	lsls	r2, r2, #3
 8006364:	4920      	ldr	r1, [pc, #128]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006366:	4313      	orrs	r3, r2
 8006368:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800636a:	4b1f      	ldr	r3, [pc, #124]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636e:	4a1e      	ldr	r2, [pc, #120]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006374:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800637c:	4b1a      	ldr	r3, [pc, #104]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	4a19      	ldr	r2, [pc, #100]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006382:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006386:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006388:	e00f      	b.n	80063aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d106      	bne.n	800639e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006390:	4b15      	ldr	r3, [pc, #84]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	4a14      	ldr	r2, [pc, #80]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 8006396:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800639c:	e005      	b.n	80063aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800639e:	4b12      	ldr	r3, [pc, #72]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	4a11      	ldr	r2, [pc, #68]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063aa:	4b0f      	ldr	r3, [pc, #60]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a0e      	ldr	r2, [pc, #56]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b6:	f7fb fcc1 	bl	8001d3c <HAL_GetTick>
 80063ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063bc:	e008      	b.n	80063d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063be:	f7fb fcbd 	bl	8001d3c <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e006      	b.n	80063de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063d0:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <RCCEx_PLL3_Config+0x15c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	58024400 	.word	0x58024400
 80063ec:	ffff0007 	.word	0xffff0007

080063f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e042      	b.n	8006488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006408:	2b00      	cmp	r3, #0
 800640a:	d106      	bne.n	800641a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7fb fa5f 	bl	80018d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2224      	movs	r2, #36	@ 0x24
 800641e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0201 	bic.w	r2, r2, #1
 8006430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 ff22 	bl	8007284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f8b3 	bl	80065ac <UART_SetConfig>
 8006446:	4603      	mov	r3, r0
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e01b      	b.n	8006488 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800645e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800646e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 ffa1 	bl	80073c8 <UART_CheckIdleState>
 8006486:	4603      	mov	r3, r0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	@ 0x28
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d17b      	bne.n	80065a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_UART_Transmit+0x26>
 80064b0:	88fb      	ldrh	r3, [r7, #6]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e074      	b.n	80065a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2221      	movs	r2, #33	@ 0x21
 80064c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ca:	f7fb fc37 	bl	8001d3c <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e8:	d108      	bne.n	80064fc <HAL_UART_Transmit+0x6c>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	e003      	b.n	8006504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006504:	e030      	b.n	8006568 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	2180      	movs	r1, #128	@ 0x80
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f001 f803 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e03d      	b.n	80065a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800653c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	3302      	adds	r3, #2
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	e007      	b.n	8006556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	3301      	adds	r3, #1
 8006554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1c8      	bne.n	8006506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2200      	movs	r2, #0
 800657c:	2140      	movs	r1, #64	@ 0x40
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 ffcc 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e006      	b.n	80065a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
  }
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3720      	adds	r7, #32
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b0:	b092      	sub	sp, #72	@ 0x48
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	431a      	orrs	r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	431a      	orrs	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4bbe      	ldr	r3, [pc, #760]	@ (80068d4 <UART_SetConfig+0x328>)
 80065dc:	4013      	ands	r3, r2
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4ab3      	ldr	r2, [pc, #716]	@ (80068d8 <UART_SetConfig+0x32c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006614:	4313      	orrs	r3, r2
 8006616:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	4baf      	ldr	r3, [pc, #700]	@ (80068dc <UART_SetConfig+0x330>)
 8006620:	4013      	ands	r3, r2
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006628:	430b      	orrs	r3, r1
 800662a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006632:	f023 010f 	bic.w	r1, r3, #15
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4aa6      	ldr	r2, [pc, #664]	@ (80068e0 <UART_SetConfig+0x334>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d177      	bne.n	800673c <UART_SetConfig+0x190>
 800664c:	4ba5      	ldr	r3, [pc, #660]	@ (80068e4 <UART_SetConfig+0x338>)
 800664e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006650:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006654:	2b28      	cmp	r3, #40	@ 0x28
 8006656:	d86d      	bhi.n	8006734 <UART_SetConfig+0x188>
 8006658:	a201      	add	r2, pc, #4	@ (adr r2, 8006660 <UART_SetConfig+0xb4>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006705 	.word	0x08006705
 8006664:	08006735 	.word	0x08006735
 8006668:	08006735 	.word	0x08006735
 800666c:	08006735 	.word	0x08006735
 8006670:	08006735 	.word	0x08006735
 8006674:	08006735 	.word	0x08006735
 8006678:	08006735 	.word	0x08006735
 800667c:	08006735 	.word	0x08006735
 8006680:	0800670d 	.word	0x0800670d
 8006684:	08006735 	.word	0x08006735
 8006688:	08006735 	.word	0x08006735
 800668c:	08006735 	.word	0x08006735
 8006690:	08006735 	.word	0x08006735
 8006694:	08006735 	.word	0x08006735
 8006698:	08006735 	.word	0x08006735
 800669c:	08006735 	.word	0x08006735
 80066a0:	08006715 	.word	0x08006715
 80066a4:	08006735 	.word	0x08006735
 80066a8:	08006735 	.word	0x08006735
 80066ac:	08006735 	.word	0x08006735
 80066b0:	08006735 	.word	0x08006735
 80066b4:	08006735 	.word	0x08006735
 80066b8:	08006735 	.word	0x08006735
 80066bc:	08006735 	.word	0x08006735
 80066c0:	0800671d 	.word	0x0800671d
 80066c4:	08006735 	.word	0x08006735
 80066c8:	08006735 	.word	0x08006735
 80066cc:	08006735 	.word	0x08006735
 80066d0:	08006735 	.word	0x08006735
 80066d4:	08006735 	.word	0x08006735
 80066d8:	08006735 	.word	0x08006735
 80066dc:	08006735 	.word	0x08006735
 80066e0:	08006725 	.word	0x08006725
 80066e4:	08006735 	.word	0x08006735
 80066e8:	08006735 	.word	0x08006735
 80066ec:	08006735 	.word	0x08006735
 80066f0:	08006735 	.word	0x08006735
 80066f4:	08006735 	.word	0x08006735
 80066f8:	08006735 	.word	0x08006735
 80066fc:	08006735 	.word	0x08006735
 8006700:	0800672d 	.word	0x0800672d
 8006704:	2301      	movs	r3, #1
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670a:	e326      	b.n	8006d5a <UART_SetConfig+0x7ae>
 800670c:	2304      	movs	r3, #4
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006712:	e322      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006714:	2308      	movs	r3, #8
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671a:	e31e      	b.n	8006d5a <UART_SetConfig+0x7ae>
 800671c:	2310      	movs	r3, #16
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006722:	e31a      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006724:	2320      	movs	r3, #32
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672a:	e316      	b.n	8006d5a <UART_SetConfig+0x7ae>
 800672c:	2340      	movs	r3, #64	@ 0x40
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006732:	e312      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006734:	2380      	movs	r3, #128	@ 0x80
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673a:	e30e      	b.n	8006d5a <UART_SetConfig+0x7ae>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a69      	ldr	r2, [pc, #420]	@ (80068e8 <UART_SetConfig+0x33c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d130      	bne.n	80067a8 <UART_SetConfig+0x1fc>
 8006746:	4b67      	ldr	r3, [pc, #412]	@ (80068e4 <UART_SetConfig+0x338>)
 8006748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	2b05      	cmp	r3, #5
 8006750:	d826      	bhi.n	80067a0 <UART_SetConfig+0x1f4>
 8006752:	a201      	add	r2, pc, #4	@ (adr r2, 8006758 <UART_SetConfig+0x1ac>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	08006771 	.word	0x08006771
 800675c:	08006779 	.word	0x08006779
 8006760:	08006781 	.word	0x08006781
 8006764:	08006789 	.word	0x08006789
 8006768:	08006791 	.word	0x08006791
 800676c:	08006799 	.word	0x08006799
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006776:	e2f0      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006778:	2304      	movs	r3, #4
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677e:	e2ec      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006780:	2308      	movs	r3, #8
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006786:	e2e8      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006788:	2310      	movs	r3, #16
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678e:	e2e4      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006790:	2320      	movs	r3, #32
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006796:	e2e0      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006798:	2340      	movs	r3, #64	@ 0x40
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e2dc      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80067a0:	2380      	movs	r3, #128	@ 0x80
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e2d8      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a4f      	ldr	r2, [pc, #316]	@ (80068ec <UART_SetConfig+0x340>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d130      	bne.n	8006814 <UART_SetConfig+0x268>
 80067b2:	4b4c      	ldr	r3, [pc, #304]	@ (80068e4 <UART_SetConfig+0x338>)
 80067b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	2b05      	cmp	r3, #5
 80067bc:	d826      	bhi.n	800680c <UART_SetConfig+0x260>
 80067be:	a201      	add	r2, pc, #4	@ (adr r2, 80067c4 <UART_SetConfig+0x218>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080067dd 	.word	0x080067dd
 80067c8:	080067e5 	.word	0x080067e5
 80067cc:	080067ed 	.word	0x080067ed
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	080067fd 	.word	0x080067fd
 80067d8:	08006805 	.word	0x08006805
 80067dc:	2300      	movs	r3, #0
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e2:	e2ba      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ea:	e2b6      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f2:	e2b2      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fa:	e2ae      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80067fc:	2320      	movs	r3, #32
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006802:	e2aa      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006804:	2340      	movs	r3, #64	@ 0x40
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e2a6      	b.n	8006d5a <UART_SetConfig+0x7ae>
 800680c:	2380      	movs	r3, #128	@ 0x80
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e2a2      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a35      	ldr	r2, [pc, #212]	@ (80068f0 <UART_SetConfig+0x344>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d130      	bne.n	8006880 <UART_SetConfig+0x2d4>
 800681e:	4b31      	ldr	r3, [pc, #196]	@ (80068e4 <UART_SetConfig+0x338>)
 8006820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b05      	cmp	r3, #5
 8006828:	d826      	bhi.n	8006878 <UART_SetConfig+0x2cc>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <UART_SetConfig+0x284>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006849 	.word	0x08006849
 8006834:	08006851 	.word	0x08006851
 8006838:	08006859 	.word	0x08006859
 800683c:	08006861 	.word	0x08006861
 8006840:	08006869 	.word	0x08006869
 8006844:	08006871 	.word	0x08006871
 8006848:	2300      	movs	r3, #0
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684e:	e284      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006850:	2304      	movs	r3, #4
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006856:	e280      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006858:	2308      	movs	r3, #8
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685e:	e27c      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006860:	2310      	movs	r3, #16
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006866:	e278      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006868:	2320      	movs	r3, #32
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686e:	e274      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006870:	2340      	movs	r3, #64	@ 0x40
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006876:	e270      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006878:	2380      	movs	r3, #128	@ 0x80
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687e:	e26c      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a1b      	ldr	r2, [pc, #108]	@ (80068f4 <UART_SetConfig+0x348>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d142      	bne.n	8006910 <UART_SetConfig+0x364>
 800688a:	4b16      	ldr	r3, [pc, #88]	@ (80068e4 <UART_SetConfig+0x338>)
 800688c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	2b05      	cmp	r3, #5
 8006894:	d838      	bhi.n	8006908 <UART_SetConfig+0x35c>
 8006896:	a201      	add	r2, pc, #4	@ (adr r2, 800689c <UART_SetConfig+0x2f0>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	080068b5 	.word	0x080068b5
 80068a0:	080068bd 	.word	0x080068bd
 80068a4:	080068c5 	.word	0x080068c5
 80068a8:	080068cd 	.word	0x080068cd
 80068ac:	080068f9 	.word	0x080068f9
 80068b0:	08006901 	.word	0x08006901
 80068b4:	2300      	movs	r3, #0
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ba:	e24e      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80068bc:	2304      	movs	r3, #4
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c2:	e24a      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80068c4:	2308      	movs	r3, #8
 80068c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ca:	e246      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80068cc:	2310      	movs	r3, #16
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d2:	e242      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80068d4:	cfff69f3 	.word	0xcfff69f3
 80068d8:	58000c00 	.word	0x58000c00
 80068dc:	11fff4ff 	.word	0x11fff4ff
 80068e0:	40011000 	.word	0x40011000
 80068e4:	58024400 	.word	0x58024400
 80068e8:	40004400 	.word	0x40004400
 80068ec:	40004800 	.word	0x40004800
 80068f0:	40004c00 	.word	0x40004c00
 80068f4:	40005000 	.word	0x40005000
 80068f8:	2320      	movs	r3, #32
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fe:	e22c      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006900:	2340      	movs	r3, #64	@ 0x40
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006906:	e228      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006908:	2380      	movs	r3, #128	@ 0x80
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690e:	e224      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4ab1      	ldr	r2, [pc, #708]	@ (8006bdc <UART_SetConfig+0x630>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d176      	bne.n	8006a08 <UART_SetConfig+0x45c>
 800691a:	4bb1      	ldr	r3, [pc, #708]	@ (8006be0 <UART_SetConfig+0x634>)
 800691c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006922:	2b28      	cmp	r3, #40	@ 0x28
 8006924:	d86c      	bhi.n	8006a00 <UART_SetConfig+0x454>
 8006926:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <UART_SetConfig+0x380>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	080069d1 	.word	0x080069d1
 8006930:	08006a01 	.word	0x08006a01
 8006934:	08006a01 	.word	0x08006a01
 8006938:	08006a01 	.word	0x08006a01
 800693c:	08006a01 	.word	0x08006a01
 8006940:	08006a01 	.word	0x08006a01
 8006944:	08006a01 	.word	0x08006a01
 8006948:	08006a01 	.word	0x08006a01
 800694c:	080069d9 	.word	0x080069d9
 8006950:	08006a01 	.word	0x08006a01
 8006954:	08006a01 	.word	0x08006a01
 8006958:	08006a01 	.word	0x08006a01
 800695c:	08006a01 	.word	0x08006a01
 8006960:	08006a01 	.word	0x08006a01
 8006964:	08006a01 	.word	0x08006a01
 8006968:	08006a01 	.word	0x08006a01
 800696c:	080069e1 	.word	0x080069e1
 8006970:	08006a01 	.word	0x08006a01
 8006974:	08006a01 	.word	0x08006a01
 8006978:	08006a01 	.word	0x08006a01
 800697c:	08006a01 	.word	0x08006a01
 8006980:	08006a01 	.word	0x08006a01
 8006984:	08006a01 	.word	0x08006a01
 8006988:	08006a01 	.word	0x08006a01
 800698c:	080069e9 	.word	0x080069e9
 8006990:	08006a01 	.word	0x08006a01
 8006994:	08006a01 	.word	0x08006a01
 8006998:	08006a01 	.word	0x08006a01
 800699c:	08006a01 	.word	0x08006a01
 80069a0:	08006a01 	.word	0x08006a01
 80069a4:	08006a01 	.word	0x08006a01
 80069a8:	08006a01 	.word	0x08006a01
 80069ac:	080069f1 	.word	0x080069f1
 80069b0:	08006a01 	.word	0x08006a01
 80069b4:	08006a01 	.word	0x08006a01
 80069b8:	08006a01 	.word	0x08006a01
 80069bc:	08006a01 	.word	0x08006a01
 80069c0:	08006a01 	.word	0x08006a01
 80069c4:	08006a01 	.word	0x08006a01
 80069c8:	08006a01 	.word	0x08006a01
 80069cc:	080069f9 	.word	0x080069f9
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d6:	e1c0      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80069d8:	2304      	movs	r3, #4
 80069da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069de:	e1bc      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80069e0:	2308      	movs	r3, #8
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e6:	e1b8      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80069e8:	2310      	movs	r3, #16
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ee:	e1b4      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80069f0:	2320      	movs	r3, #32
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f6:	e1b0      	b.n	8006d5a <UART_SetConfig+0x7ae>
 80069f8:	2340      	movs	r3, #64	@ 0x40
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fe:	e1ac      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006a00:	2380      	movs	r3, #128	@ 0x80
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a06:	e1a8      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a75      	ldr	r2, [pc, #468]	@ (8006be4 <UART_SetConfig+0x638>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d130      	bne.n	8006a74 <UART_SetConfig+0x4c8>
 8006a12:	4b73      	ldr	r3, [pc, #460]	@ (8006be0 <UART_SetConfig+0x634>)
 8006a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	2b05      	cmp	r3, #5
 8006a1c:	d826      	bhi.n	8006a6c <UART_SetConfig+0x4c0>
 8006a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a24 <UART_SetConfig+0x478>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a3d 	.word	0x08006a3d
 8006a28:	08006a45 	.word	0x08006a45
 8006a2c:	08006a4d 	.word	0x08006a4d
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a42:	e18a      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006a44:	2304      	movs	r3, #4
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4a:	e186      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a52:	e182      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006a54:	2310      	movs	r3, #16
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5a:	e17e      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006a5c:	2320      	movs	r3, #32
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a62:	e17a      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006a64:	2340      	movs	r3, #64	@ 0x40
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e176      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006a6c:	2380      	movs	r3, #128	@ 0x80
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a72:	e172      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a5b      	ldr	r2, [pc, #364]	@ (8006be8 <UART_SetConfig+0x63c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d130      	bne.n	8006ae0 <UART_SetConfig+0x534>
 8006a7e:	4b58      	ldr	r3, [pc, #352]	@ (8006be0 <UART_SetConfig+0x634>)
 8006a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	d826      	bhi.n	8006ad8 <UART_SetConfig+0x52c>
 8006a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <UART_SetConfig+0x4e4>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006aa9 	.word	0x08006aa9
 8006a94:	08006ab1 	.word	0x08006ab1
 8006a98:	08006ab9 	.word	0x08006ab9
 8006a9c:	08006ac1 	.word	0x08006ac1
 8006aa0:	08006ac9 	.word	0x08006ac9
 8006aa4:	08006ad1 	.word	0x08006ad1
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aae:	e154      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab6:	e150      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006ab8:	2308      	movs	r3, #8
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006abe:	e14c      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac6:	e148      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006ac8:	2320      	movs	r3, #32
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ace:	e144      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006ad0:	2340      	movs	r3, #64	@ 0x40
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad6:	e140      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006ad8:	2380      	movs	r3, #128	@ 0x80
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ade:	e13c      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a41      	ldr	r2, [pc, #260]	@ (8006bec <UART_SetConfig+0x640>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	f040 8082 	bne.w	8006bf0 <UART_SetConfig+0x644>
 8006aec:	4b3c      	ldr	r3, [pc, #240]	@ (8006be0 <UART_SetConfig+0x634>)
 8006aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006af4:	2b28      	cmp	r3, #40	@ 0x28
 8006af6:	d86d      	bhi.n	8006bd4 <UART_SetConfig+0x628>
 8006af8:	a201      	add	r2, pc, #4	@ (adr r2, 8006b00 <UART_SetConfig+0x554>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006ba5 	.word	0x08006ba5
 8006b04:	08006bd5 	.word	0x08006bd5
 8006b08:	08006bd5 	.word	0x08006bd5
 8006b0c:	08006bd5 	.word	0x08006bd5
 8006b10:	08006bd5 	.word	0x08006bd5
 8006b14:	08006bd5 	.word	0x08006bd5
 8006b18:	08006bd5 	.word	0x08006bd5
 8006b1c:	08006bd5 	.word	0x08006bd5
 8006b20:	08006bad 	.word	0x08006bad
 8006b24:	08006bd5 	.word	0x08006bd5
 8006b28:	08006bd5 	.word	0x08006bd5
 8006b2c:	08006bd5 	.word	0x08006bd5
 8006b30:	08006bd5 	.word	0x08006bd5
 8006b34:	08006bd5 	.word	0x08006bd5
 8006b38:	08006bd5 	.word	0x08006bd5
 8006b3c:	08006bd5 	.word	0x08006bd5
 8006b40:	08006bb5 	.word	0x08006bb5
 8006b44:	08006bd5 	.word	0x08006bd5
 8006b48:	08006bd5 	.word	0x08006bd5
 8006b4c:	08006bd5 	.word	0x08006bd5
 8006b50:	08006bd5 	.word	0x08006bd5
 8006b54:	08006bd5 	.word	0x08006bd5
 8006b58:	08006bd5 	.word	0x08006bd5
 8006b5c:	08006bd5 	.word	0x08006bd5
 8006b60:	08006bbd 	.word	0x08006bbd
 8006b64:	08006bd5 	.word	0x08006bd5
 8006b68:	08006bd5 	.word	0x08006bd5
 8006b6c:	08006bd5 	.word	0x08006bd5
 8006b70:	08006bd5 	.word	0x08006bd5
 8006b74:	08006bd5 	.word	0x08006bd5
 8006b78:	08006bd5 	.word	0x08006bd5
 8006b7c:	08006bd5 	.word	0x08006bd5
 8006b80:	08006bc5 	.word	0x08006bc5
 8006b84:	08006bd5 	.word	0x08006bd5
 8006b88:	08006bd5 	.word	0x08006bd5
 8006b8c:	08006bd5 	.word	0x08006bd5
 8006b90:	08006bd5 	.word	0x08006bd5
 8006b94:	08006bd5 	.word	0x08006bd5
 8006b98:	08006bd5 	.word	0x08006bd5
 8006b9c:	08006bd5 	.word	0x08006bd5
 8006ba0:	08006bcd 	.word	0x08006bcd
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006baa:	e0d6      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006bac:	2304      	movs	r3, #4
 8006bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb2:	e0d2      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006bb4:	2308      	movs	r3, #8
 8006bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bba:	e0ce      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006bbc:	2310      	movs	r3, #16
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc2:	e0ca      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006bc4:	2320      	movs	r3, #32
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bca:	e0c6      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006bcc:	2340      	movs	r3, #64	@ 0x40
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd2:	e0c2      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006bd4:	2380      	movs	r3, #128	@ 0x80
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e0be      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006bdc:	40011400 	.word	0x40011400
 8006be0:	58024400 	.word	0x58024400
 8006be4:	40007800 	.word	0x40007800
 8006be8:	40007c00 	.word	0x40007c00
 8006bec:	40011800 	.word	0x40011800
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4aad      	ldr	r2, [pc, #692]	@ (8006eac <UART_SetConfig+0x900>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d176      	bne.n	8006ce8 <UART_SetConfig+0x73c>
 8006bfa:	4bad      	ldr	r3, [pc, #692]	@ (8006eb0 <UART_SetConfig+0x904>)
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c02:	2b28      	cmp	r3, #40	@ 0x28
 8006c04:	d86c      	bhi.n	8006ce0 <UART_SetConfig+0x734>
 8006c06:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <UART_SetConfig+0x660>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006cb1 	.word	0x08006cb1
 8006c10:	08006ce1 	.word	0x08006ce1
 8006c14:	08006ce1 	.word	0x08006ce1
 8006c18:	08006ce1 	.word	0x08006ce1
 8006c1c:	08006ce1 	.word	0x08006ce1
 8006c20:	08006ce1 	.word	0x08006ce1
 8006c24:	08006ce1 	.word	0x08006ce1
 8006c28:	08006ce1 	.word	0x08006ce1
 8006c2c:	08006cb9 	.word	0x08006cb9
 8006c30:	08006ce1 	.word	0x08006ce1
 8006c34:	08006ce1 	.word	0x08006ce1
 8006c38:	08006ce1 	.word	0x08006ce1
 8006c3c:	08006ce1 	.word	0x08006ce1
 8006c40:	08006ce1 	.word	0x08006ce1
 8006c44:	08006ce1 	.word	0x08006ce1
 8006c48:	08006ce1 	.word	0x08006ce1
 8006c4c:	08006cc1 	.word	0x08006cc1
 8006c50:	08006ce1 	.word	0x08006ce1
 8006c54:	08006ce1 	.word	0x08006ce1
 8006c58:	08006ce1 	.word	0x08006ce1
 8006c5c:	08006ce1 	.word	0x08006ce1
 8006c60:	08006ce1 	.word	0x08006ce1
 8006c64:	08006ce1 	.word	0x08006ce1
 8006c68:	08006ce1 	.word	0x08006ce1
 8006c6c:	08006cc9 	.word	0x08006cc9
 8006c70:	08006ce1 	.word	0x08006ce1
 8006c74:	08006ce1 	.word	0x08006ce1
 8006c78:	08006ce1 	.word	0x08006ce1
 8006c7c:	08006ce1 	.word	0x08006ce1
 8006c80:	08006ce1 	.word	0x08006ce1
 8006c84:	08006ce1 	.word	0x08006ce1
 8006c88:	08006ce1 	.word	0x08006ce1
 8006c8c:	08006cd1 	.word	0x08006cd1
 8006c90:	08006ce1 	.word	0x08006ce1
 8006c94:	08006ce1 	.word	0x08006ce1
 8006c98:	08006ce1 	.word	0x08006ce1
 8006c9c:	08006ce1 	.word	0x08006ce1
 8006ca0:	08006ce1 	.word	0x08006ce1
 8006ca4:	08006ce1 	.word	0x08006ce1
 8006ca8:	08006ce1 	.word	0x08006ce1
 8006cac:	08006cd9 	.word	0x08006cd9
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb6:	e050      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cbe:	e04c      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc6:	e048      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cce:	e044      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd6:	e040      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006cd8:	2340      	movs	r3, #64	@ 0x40
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cde:	e03c      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006ce0:	2380      	movs	r3, #128	@ 0x80
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce6:	e038      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a71      	ldr	r2, [pc, #452]	@ (8006eb4 <UART_SetConfig+0x908>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d130      	bne.n	8006d54 <UART_SetConfig+0x7a8>
 8006cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8006eb0 <UART_SetConfig+0x904>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	2b05      	cmp	r3, #5
 8006cfc:	d826      	bhi.n	8006d4c <UART_SetConfig+0x7a0>
 8006cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8006d04 <UART_SetConfig+0x758>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d1d 	.word	0x08006d1d
 8006d08:	08006d25 	.word	0x08006d25
 8006d0c:	08006d2d 	.word	0x08006d2d
 8006d10:	08006d35 	.word	0x08006d35
 8006d14:	08006d3d 	.word	0x08006d3d
 8006d18:	08006d45 	.word	0x08006d45
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d22:	e01a      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006d24:	2304      	movs	r3, #4
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d2a:	e016      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d32:	e012      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006d34:	2310      	movs	r3, #16
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3a:	e00e      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d42:	e00a      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006d44:	2340      	movs	r3, #64	@ 0x40
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4a:	e006      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006d4c:	2380      	movs	r3, #128	@ 0x80
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d52:	e002      	b.n	8006d5a <UART_SetConfig+0x7ae>
 8006d54:	2380      	movs	r3, #128	@ 0x80
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a55      	ldr	r2, [pc, #340]	@ (8006eb4 <UART_SetConfig+0x908>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	f040 80f8 	bne.w	8006f56 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	dc46      	bgt.n	8006dfc <UART_SetConfig+0x850>
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	db75      	blt.n	8006e5e <UART_SetConfig+0x8b2>
 8006d72:	3b02      	subs	r3, #2
 8006d74:	2b1e      	cmp	r3, #30
 8006d76:	d872      	bhi.n	8006e5e <UART_SetConfig+0x8b2>
 8006d78:	a201      	add	r2, pc, #4	@ (adr r2, 8006d80 <UART_SetConfig+0x7d4>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006e03 	.word	0x08006e03
 8006d84:	08006e5f 	.word	0x08006e5f
 8006d88:	08006e0b 	.word	0x08006e0b
 8006d8c:	08006e5f 	.word	0x08006e5f
 8006d90:	08006e5f 	.word	0x08006e5f
 8006d94:	08006e5f 	.word	0x08006e5f
 8006d98:	08006e1b 	.word	0x08006e1b
 8006d9c:	08006e5f 	.word	0x08006e5f
 8006da0:	08006e5f 	.word	0x08006e5f
 8006da4:	08006e5f 	.word	0x08006e5f
 8006da8:	08006e5f 	.word	0x08006e5f
 8006dac:	08006e5f 	.word	0x08006e5f
 8006db0:	08006e5f 	.word	0x08006e5f
 8006db4:	08006e5f 	.word	0x08006e5f
 8006db8:	08006e2b 	.word	0x08006e2b
 8006dbc:	08006e5f 	.word	0x08006e5f
 8006dc0:	08006e5f 	.word	0x08006e5f
 8006dc4:	08006e5f 	.word	0x08006e5f
 8006dc8:	08006e5f 	.word	0x08006e5f
 8006dcc:	08006e5f 	.word	0x08006e5f
 8006dd0:	08006e5f 	.word	0x08006e5f
 8006dd4:	08006e5f 	.word	0x08006e5f
 8006dd8:	08006e5f 	.word	0x08006e5f
 8006ddc:	08006e5f 	.word	0x08006e5f
 8006de0:	08006e5f 	.word	0x08006e5f
 8006de4:	08006e5f 	.word	0x08006e5f
 8006de8:	08006e5f 	.word	0x08006e5f
 8006dec:	08006e5f 	.word	0x08006e5f
 8006df0:	08006e5f 	.word	0x08006e5f
 8006df4:	08006e5f 	.word	0x08006e5f
 8006df8:	08006e51 	.word	0x08006e51
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d02a      	beq.n	8006e56 <UART_SetConfig+0x8aa>
 8006e00:	e02d      	b.n	8006e5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e02:	f7fe fed3 	bl	8005bac <HAL_RCCEx_GetD3PCLK1Freq>
 8006e06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e08:	e02f      	b.n	8006e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe fee2 	bl	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e18:	e027      	b.n	8006e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e1a:	f107 0318 	add.w	r3, r7, #24
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff f82e 	bl	8005e80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e28:	e01f      	b.n	8006e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e2a:	4b21      	ldr	r3, [pc, #132]	@ (8006eb0 <UART_SetConfig+0x904>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e36:	4b1e      	ldr	r3, [pc, #120]	@ (8006eb0 <UART_SetConfig+0x904>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	08db      	lsrs	r3, r3, #3
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb8 <UART_SetConfig+0x90c>)
 8006e42:	fa22 f303 	lsr.w	r3, r2, r3
 8006e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e48:	e00f      	b.n	8006e6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006eb8 <UART_SetConfig+0x90c>)
 8006e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4e:	e00c      	b.n	8006e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e50:	4b1a      	ldr	r3, [pc, #104]	@ (8006ebc <UART_SetConfig+0x910>)
 8006e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e54:	e009      	b.n	8006e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5c:	e005      	b.n	8006e6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 81ee 	beq.w	800724e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	4a12      	ldr	r2, [pc, #72]	@ (8006ec0 <UART_SetConfig+0x914>)
 8006e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e84:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	4413      	add	r3, r2
 8006e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d305      	bcc.n	8006ea2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d910      	bls.n	8006ec4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006ea8:	e1d1      	b.n	800724e <UART_SetConfig+0xca2>
 8006eaa:	bf00      	nop
 8006eac:	40011c00 	.word	0x40011c00
 8006eb0:	58024400 	.word	0x58024400
 8006eb4:	58000c00 	.word	0x58000c00
 8006eb8:	03d09000 	.word	0x03d09000
 8006ebc:	003d0900 	.word	0x003d0900
 8006ec0:	0800bed4 	.word	0x0800bed4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	60bb      	str	r3, [r7, #8]
 8006eca:	60fa      	str	r2, [r7, #12]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	4ac0      	ldr	r2, [pc, #768]	@ (80071d4 <UART_SetConfig+0xc28>)
 8006ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2200      	movs	r2, #0
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	607a      	str	r2, [r7, #4]
 8006ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ee6:	f7f9 fa6b 	bl	80003c0 <__aeabi_uldivmod>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	020b      	lsls	r3, r1, #8
 8006efc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f00:	0202      	lsls	r2, r0, #8
 8006f02:	6979      	ldr	r1, [r7, #20]
 8006f04:	6849      	ldr	r1, [r1, #4]
 8006f06:	0849      	lsrs	r1, r1, #1
 8006f08:	2000      	movs	r0, #0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	eb12 0804 	adds.w	r8, r2, r4
 8006f12:	eb43 0905 	adc.w	r9, r3, r5
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	469a      	mov	sl, r3
 8006f1e:	4693      	mov	fp, r2
 8006f20:	4652      	mov	r2, sl
 8006f22:	465b      	mov	r3, fp
 8006f24:	4640      	mov	r0, r8
 8006f26:	4649      	mov	r1, r9
 8006f28:	f7f9 fa4a 	bl	80003c0 <__aeabi_uldivmod>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4613      	mov	r3, r2
 8006f32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f3a:	d308      	bcc.n	8006f4e <UART_SetConfig+0x9a2>
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f42:	d204      	bcs.n	8006f4e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f4a:	60da      	str	r2, [r3, #12]
 8006f4c:	e17f      	b.n	800724e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f54:	e17b      	b.n	800724e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f5e:	f040 80bd 	bne.w	80070dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006f62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	dc48      	bgt.n	8006ffc <UART_SetConfig+0xa50>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	db7b      	blt.n	8007066 <UART_SetConfig+0xaba>
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d879      	bhi.n	8007066 <UART_SetConfig+0xaba>
 8006f72:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <UART_SetConfig+0x9cc>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08007003 	.word	0x08007003
 8006f7c:	0800700b 	.word	0x0800700b
 8006f80:	08007067 	.word	0x08007067
 8006f84:	08007067 	.word	0x08007067
 8006f88:	08007013 	.word	0x08007013
 8006f8c:	08007067 	.word	0x08007067
 8006f90:	08007067 	.word	0x08007067
 8006f94:	08007067 	.word	0x08007067
 8006f98:	08007023 	.word	0x08007023
 8006f9c:	08007067 	.word	0x08007067
 8006fa0:	08007067 	.word	0x08007067
 8006fa4:	08007067 	.word	0x08007067
 8006fa8:	08007067 	.word	0x08007067
 8006fac:	08007067 	.word	0x08007067
 8006fb0:	08007067 	.word	0x08007067
 8006fb4:	08007067 	.word	0x08007067
 8006fb8:	08007033 	.word	0x08007033
 8006fbc:	08007067 	.word	0x08007067
 8006fc0:	08007067 	.word	0x08007067
 8006fc4:	08007067 	.word	0x08007067
 8006fc8:	08007067 	.word	0x08007067
 8006fcc:	08007067 	.word	0x08007067
 8006fd0:	08007067 	.word	0x08007067
 8006fd4:	08007067 	.word	0x08007067
 8006fd8:	08007067 	.word	0x08007067
 8006fdc:	08007067 	.word	0x08007067
 8006fe0:	08007067 	.word	0x08007067
 8006fe4:	08007067 	.word	0x08007067
 8006fe8:	08007067 	.word	0x08007067
 8006fec:	08007067 	.word	0x08007067
 8006ff0:	08007067 	.word	0x08007067
 8006ff4:	08007067 	.word	0x08007067
 8006ff8:	08007059 	.word	0x08007059
 8006ffc:	2b40      	cmp	r3, #64	@ 0x40
 8006ffe:	d02e      	beq.n	800705e <UART_SetConfig+0xab2>
 8007000:	e031      	b.n	8007066 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007002:	f7fd fc07 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8007006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007008:	e033      	b.n	8007072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800700a:	f7fd fc19 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 800700e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007010:	e02f      	b.n	8007072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fdde 	bl	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007020:	e027      	b.n	8007072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007022:	f107 0318 	add.w	r3, r7, #24
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe ff2a 	bl	8005e80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007030:	e01f      	b.n	8007072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007032:	4b69      	ldr	r3, [pc, #420]	@ (80071d8 <UART_SetConfig+0xc2c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b00      	cmp	r3, #0
 800703c:	d009      	beq.n	8007052 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800703e:	4b66      	ldr	r3, [pc, #408]	@ (80071d8 <UART_SetConfig+0xc2c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	08db      	lsrs	r3, r3, #3
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	4a64      	ldr	r2, [pc, #400]	@ (80071dc <UART_SetConfig+0xc30>)
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007050:	e00f      	b.n	8007072 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007052:	4b62      	ldr	r3, [pc, #392]	@ (80071dc <UART_SetConfig+0xc30>)
 8007054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007056:	e00c      	b.n	8007072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007058:	4b61      	ldr	r3, [pc, #388]	@ (80071e0 <UART_SetConfig+0xc34>)
 800705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705c:	e009      	b.n	8007072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800705e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007064:	e005      	b.n	8007072 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 80ea 	beq.w	800724e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	4a55      	ldr	r2, [pc, #340]	@ (80071d4 <UART_SetConfig+0xc28>)
 8007080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007084:	461a      	mov	r2, r3
 8007086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007088:	fbb3 f3f2 	udiv	r3, r3, r2
 800708c:	005a      	lsls	r2, r3, #1
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	441a      	add	r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	fbb2 f3f3 	udiv	r3, r2, r3
 800709e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a2:	2b0f      	cmp	r3, #15
 80070a4:	d916      	bls.n	80070d4 <UART_SetConfig+0xb28>
 80070a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ac:	d212      	bcs.n	80070d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f023 030f 	bic.w	r3, r3, #15
 80070b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80070c6:	4313      	orrs	r3, r2
 80070c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	e0bc      	b.n	800724e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070da:	e0b8      	b.n	800724e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	dc4b      	bgt.n	800717c <UART_SetConfig+0xbd0>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f2c0 8087 	blt.w	80071f8 <UART_SetConfig+0xc4c>
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	f200 8084 	bhi.w	80071f8 <UART_SetConfig+0xc4c>
 80070f0:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <UART_SetConfig+0xb4c>)
 80070f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f6:	bf00      	nop
 80070f8:	08007183 	.word	0x08007183
 80070fc:	0800718b 	.word	0x0800718b
 8007100:	080071f9 	.word	0x080071f9
 8007104:	080071f9 	.word	0x080071f9
 8007108:	08007193 	.word	0x08007193
 800710c:	080071f9 	.word	0x080071f9
 8007110:	080071f9 	.word	0x080071f9
 8007114:	080071f9 	.word	0x080071f9
 8007118:	080071a3 	.word	0x080071a3
 800711c:	080071f9 	.word	0x080071f9
 8007120:	080071f9 	.word	0x080071f9
 8007124:	080071f9 	.word	0x080071f9
 8007128:	080071f9 	.word	0x080071f9
 800712c:	080071f9 	.word	0x080071f9
 8007130:	080071f9 	.word	0x080071f9
 8007134:	080071f9 	.word	0x080071f9
 8007138:	080071b3 	.word	0x080071b3
 800713c:	080071f9 	.word	0x080071f9
 8007140:	080071f9 	.word	0x080071f9
 8007144:	080071f9 	.word	0x080071f9
 8007148:	080071f9 	.word	0x080071f9
 800714c:	080071f9 	.word	0x080071f9
 8007150:	080071f9 	.word	0x080071f9
 8007154:	080071f9 	.word	0x080071f9
 8007158:	080071f9 	.word	0x080071f9
 800715c:	080071f9 	.word	0x080071f9
 8007160:	080071f9 	.word	0x080071f9
 8007164:	080071f9 	.word	0x080071f9
 8007168:	080071f9 	.word	0x080071f9
 800716c:	080071f9 	.word	0x080071f9
 8007170:	080071f9 	.word	0x080071f9
 8007174:	080071f9 	.word	0x080071f9
 8007178:	080071eb 	.word	0x080071eb
 800717c:	2b40      	cmp	r3, #64	@ 0x40
 800717e:	d037      	beq.n	80071f0 <UART_SetConfig+0xc44>
 8007180:	e03a      	b.n	80071f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007182:	f7fd fb47 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8007186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007188:	e03c      	b.n	8007204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800718a:	f7fd fb59 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 800718e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007190:	e038      	b.n	8007204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fd1e 	bl	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800719c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a0:	e030      	b.n	8007204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a2:	f107 0318 	add.w	r3, r7, #24
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fe6a 	bl	8005e80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b0:	e028      	b.n	8007204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071b2:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <UART_SetConfig+0xc2c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d012      	beq.n	80071e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071be:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <UART_SetConfig+0xc2c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	08db      	lsrs	r3, r3, #3
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	4a04      	ldr	r2, [pc, #16]	@ (80071dc <UART_SetConfig+0xc30>)
 80071ca:	fa22 f303 	lsr.w	r3, r2, r3
 80071ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071d0:	e018      	b.n	8007204 <UART_SetConfig+0xc58>
 80071d2:	bf00      	nop
 80071d4:	0800bed4 	.word	0x0800bed4
 80071d8:	58024400 	.word	0x58024400
 80071dc:	03d09000 	.word	0x03d09000
 80071e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80071e4:	4b24      	ldr	r3, [pc, #144]	@ (8007278 <UART_SetConfig+0xccc>)
 80071e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e8:	e00c      	b.n	8007204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071ea:	4b24      	ldr	r3, [pc, #144]	@ (800727c <UART_SetConfig+0xcd0>)
 80071ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ee:	e009      	b.n	8007204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f6:	e005      	b.n	8007204 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007202:	bf00      	nop
    }

    if (pclk != 0U)
 8007204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d021      	beq.n	800724e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	4a1c      	ldr	r2, [pc, #112]	@ (8007280 <UART_SetConfig+0xcd4>)
 8007210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007214:	461a      	mov	r2, r3
 8007216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007218:	fbb3 f2f2 	udiv	r2, r3, r2
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	441a      	add	r2, r3
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	fbb2 f3f3 	udiv	r3, r2, r3
 800722c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800722e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007230:	2b0f      	cmp	r3, #15
 8007232:	d909      	bls.n	8007248 <UART_SetConfig+0xc9c>
 8007234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800723a:	d205      	bcs.n	8007248 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800723c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723e:	b29a      	uxth	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60da      	str	r2, [r3, #12]
 8007246:	e002      	b.n	800724e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2201      	movs	r2, #1
 8007252:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2201      	movs	r2, #1
 800725a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2200      	movs	r2, #0
 8007268:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800726a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800726e:	4618      	mov	r0, r3
 8007270:	3748      	adds	r7, #72	@ 0x48
 8007272:	46bd      	mov	sp, r7
 8007274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007278:	03d09000 	.word	0x03d09000
 800727c:	003d0900 	.word	0x003d0900
 8007280:	0800bed4 	.word	0x0800bed4

08007284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00a      	beq.n	80072f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01a      	beq.n	800739a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007382:	d10a      	bne.n	800739a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	605a      	str	r2, [r3, #4]
  }
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b098      	sub	sp, #96	@ 0x60
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073d8:	f7fa fcb0 	bl	8001d3c <HAL_GetTick>
 80073dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d12f      	bne.n	800744c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f4:	2200      	movs	r2, #0
 80073f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f88e 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d022      	beq.n	800744c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800741a:	653b      	str	r3, [r7, #80]	@ 0x50
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007424:	647b      	str	r3, [r7, #68]	@ 0x44
 8007426:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800742a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e6      	bne.n	8007406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e063      	b.n	8007514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b04      	cmp	r3, #4
 8007458:	d149      	bne.n	80074ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800745a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007462:	2200      	movs	r2, #0
 8007464:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f857 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d03c      	beq.n	80074ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	623b      	str	r3, [r7, #32]
   return(result);
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007492:	633b      	str	r3, [r7, #48]	@ 0x30
 8007494:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e6      	bne.n	8007474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f023 0301 	bic.w	r3, r3, #1
 80074bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3308      	adds	r3, #8
 80074c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074c6:	61fa      	str	r2, [r7, #28]
 80074c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	69b9      	ldr	r1, [r7, #24]
 80074cc:	69fa      	ldr	r2, [r7, #28]
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	617b      	str	r3, [r7, #20]
   return(result);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e012      	b.n	8007514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3758      	adds	r7, #88	@ 0x58
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752c:	e04f      	b.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d04b      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007536:	f7fa fc01 	bl	8001d3c <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	429a      	cmp	r2, r3
 8007544:	d302      	bcc.n	800754c <UART_WaitOnFlagUntilTimeout+0x30>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e04e      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d037      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b80      	cmp	r3, #128	@ 0x80
 8007562:	d034      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d031      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b08      	cmp	r3, #8
 8007576:	d110      	bne.n	800759a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2208      	movs	r2, #8
 800757e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f839 	bl	80075f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2208      	movs	r2, #8
 800758a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e029      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a8:	d111      	bne.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 f81f 	bl	80075f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e00f      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4013      	ands	r3, r2
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	bf0c      	ite	eq
 80075de:	2301      	moveq	r3, #1
 80075e0:	2300      	movne	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d0a0      	beq.n	800752e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b095      	sub	sp, #84	@ 0x54
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800761e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007620:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007624:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e6      	bne.n	8007600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3308      	adds	r3, #8
 8007638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	61fb      	str	r3, [r7, #28]
   return(result);
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	4b1e      	ldr	r3, [pc, #120]	@ (80076c0 <UART_EndRxTransfer+0xc8>)
 8007646:	4013      	ands	r3, r2
 8007648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3308      	adds	r3, #8
 8007650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e5      	bne.n	8007632 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800766a:	2b01      	cmp	r3, #1
 800766c:	d118      	bne.n	80076a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	60bb      	str	r3, [r7, #8]
   return(result);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f023 0310 	bic.w	r3, r3, #16
 8007682:	647b      	str	r3, [r7, #68]	@ 0x44
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6979      	ldr	r1, [r7, #20]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	613b      	str	r3, [r7, #16]
   return(result);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80076b4:	bf00      	nop
 80076b6:	3754      	adds	r7, #84	@ 0x54
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	effffffe 	.word	0xeffffffe

080076c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_UARTEx_DisableFifoMode+0x16>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e027      	b.n	800772a <HAL_UARTEx_DisableFifoMode+0x66>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2224      	movs	r2, #36	@ 0x24
 80076e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007708:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800774a:	2302      	movs	r3, #2
 800774c:	e02d      	b.n	80077aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2224      	movs	r2, #36	@ 0x24
 800775a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0201 	bic.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f850 	bl	8007830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d101      	bne.n	80077ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077c6:	2302      	movs	r3, #2
 80077c8:	e02d      	b.n	8007826 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2224      	movs	r2, #36	@ 0x24
 80077d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0201 	bic.w	r2, r2, #1
 80077f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f812 	bl	8007830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2220      	movs	r2, #32
 8007818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800783c:	2b00      	cmp	r3, #0
 800783e:	d108      	bne.n	8007852 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007850:	e031      	b.n	80078b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007852:	2310      	movs	r3, #16
 8007854:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007856:	2310      	movs	r3, #16
 8007858:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	0e5b      	lsrs	r3, r3, #25
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	0f5b      	lsrs	r3, r3, #29
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 0307 	and.w	r3, r3, #7
 8007878:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	7b3a      	ldrb	r2, [r7, #12]
 800787e:	4911      	ldr	r1, [pc, #68]	@ (80078c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007880:	5c8a      	ldrb	r2, [r1, r2]
 8007882:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007886:	7b3a      	ldrb	r2, [r7, #12]
 8007888:	490f      	ldr	r1, [pc, #60]	@ (80078c8 <UARTEx_SetNbDataToProcess+0x98>)
 800788a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800788c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007890:	b29a      	uxth	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	7b7a      	ldrb	r2, [r7, #13]
 800789c:	4909      	ldr	r1, [pc, #36]	@ (80078c4 <UARTEx_SetNbDataToProcess+0x94>)
 800789e:	5c8a      	ldrb	r2, [r1, r2]
 80078a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078a4:	7b7a      	ldrb	r2, [r7, #13]
 80078a6:	4908      	ldr	r1, [pc, #32]	@ (80078c8 <UARTEx_SetNbDataToProcess+0x98>)
 80078a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80078b6:	bf00      	nop
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	0800beec 	.word	0x0800beec
 80078c8:	0800bef4 	.word	0x0800bef4

080078cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078cc:	b084      	sub	sp, #16
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	f107 001c 	add.w	r0, r7, #28
 80078da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d121      	bne.n	800792a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	4b2c      	ldr	r3, [pc, #176]	@ (80079a8 <USB_CoreInit+0xdc>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800790a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800790e:	2b01      	cmp	r3, #1
 8007910:	d105      	bne.n	800791e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fafa 	bl	8008f18 <USB_CoreReset>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
 8007928:	e01b      	b.n	8007962 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 faee 	bl	8008f18 <USB_CoreReset>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007940:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	639a      	str	r2, [r3, #56]	@ 0x38
 8007954:	e005      	b.n	8007962 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007962:	7fbb      	ldrb	r3, [r7, #30]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d116      	bne.n	8007996 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800796c:	b29a      	uxth	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007976:	4b0d      	ldr	r3, [pc, #52]	@ (80079ac <USB_CoreInit+0xe0>)
 8007978:	4313      	orrs	r3, r2
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f043 0206 	orr.w	r2, r3, #6
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f043 0220 	orr.w	r2, r3, #32
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079a2:	b004      	add	sp, #16
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	ffbdffbf 	.word	0xffbdffbf
 80079ac:	03ee0000 	.word	0x03ee0000

080079b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	4613      	mov	r3, r2
 80079bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d165      	bne.n	8007a90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4a41      	ldr	r2, [pc, #260]	@ (8007acc <USB_SetTurnaroundTime+0x11c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d906      	bls.n	80079da <USB_SetTurnaroundTime+0x2a>
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4a40      	ldr	r2, [pc, #256]	@ (8007ad0 <USB_SetTurnaroundTime+0x120>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d202      	bcs.n	80079da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80079d4:	230f      	movs	r3, #15
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	e062      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4a3c      	ldr	r2, [pc, #240]	@ (8007ad0 <USB_SetTurnaroundTime+0x120>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d306      	bcc.n	80079f0 <USB_SetTurnaroundTime+0x40>
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	4a3b      	ldr	r2, [pc, #236]	@ (8007ad4 <USB_SetTurnaroundTime+0x124>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d202      	bcs.n	80079f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079ea:	230e      	movs	r3, #14
 80079ec:	617b      	str	r3, [r7, #20]
 80079ee:	e057      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4a38      	ldr	r2, [pc, #224]	@ (8007ad4 <USB_SetTurnaroundTime+0x124>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d306      	bcc.n	8007a06 <USB_SetTurnaroundTime+0x56>
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4a37      	ldr	r2, [pc, #220]	@ (8007ad8 <USB_SetTurnaroundTime+0x128>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d202      	bcs.n	8007a06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a00:	230d      	movs	r3, #13
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	e04c      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4a33      	ldr	r2, [pc, #204]	@ (8007ad8 <USB_SetTurnaroundTime+0x128>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d306      	bcc.n	8007a1c <USB_SetTurnaroundTime+0x6c>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	4a32      	ldr	r2, [pc, #200]	@ (8007adc <USB_SetTurnaroundTime+0x12c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d802      	bhi.n	8007a1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a16:	230c      	movs	r3, #12
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	e041      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8007adc <USB_SetTurnaroundTime+0x12c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d906      	bls.n	8007a32 <USB_SetTurnaroundTime+0x82>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae0 <USB_SetTurnaroundTime+0x130>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d802      	bhi.n	8007a32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a2c:	230b      	movs	r3, #11
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	e036      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae0 <USB_SetTurnaroundTime+0x130>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d906      	bls.n	8007a48 <USB_SetTurnaroundTime+0x98>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4a29      	ldr	r2, [pc, #164]	@ (8007ae4 <USB_SetTurnaroundTime+0x134>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d802      	bhi.n	8007a48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a42:	230a      	movs	r3, #10
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	e02b      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4a26      	ldr	r2, [pc, #152]	@ (8007ae4 <USB_SetTurnaroundTime+0x134>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d906      	bls.n	8007a5e <USB_SetTurnaroundTime+0xae>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4a25      	ldr	r2, [pc, #148]	@ (8007ae8 <USB_SetTurnaroundTime+0x138>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d202      	bcs.n	8007a5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a58:	2309      	movs	r3, #9
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e020      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	4a21      	ldr	r2, [pc, #132]	@ (8007ae8 <USB_SetTurnaroundTime+0x138>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d306      	bcc.n	8007a74 <USB_SetTurnaroundTime+0xc4>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	4a20      	ldr	r2, [pc, #128]	@ (8007aec <USB_SetTurnaroundTime+0x13c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d802      	bhi.n	8007a74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a6e:	2308      	movs	r3, #8
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e015      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4a1d      	ldr	r2, [pc, #116]	@ (8007aec <USB_SetTurnaroundTime+0x13c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d906      	bls.n	8007a8a <USB_SetTurnaroundTime+0xda>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007af0 <USB_SetTurnaroundTime+0x140>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d202      	bcs.n	8007a8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a84:	2307      	movs	r3, #7
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	e00a      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a8a:	2306      	movs	r3, #6
 8007a8c:	617b      	str	r3, [r7, #20]
 8007a8e:	e007      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a96:	2309      	movs	r3, #9
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	e001      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a9c:	2309      	movs	r3, #9
 8007a9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	029b      	lsls	r3, r3, #10
 8007ab4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	00d8acbf 	.word	0x00d8acbf
 8007ad0:	00e4e1c0 	.word	0x00e4e1c0
 8007ad4:	00f42400 	.word	0x00f42400
 8007ad8:	01067380 	.word	0x01067380
 8007adc:	011a499f 	.word	0x011a499f
 8007ae0:	01312cff 	.word	0x01312cff
 8007ae4:	014ca43f 	.word	0x014ca43f
 8007ae8:	016e3600 	.word	0x016e3600
 8007aec:	01a6ab1f 	.word	0x01a6ab1f
 8007af0:	01e84800 	.word	0x01e84800

08007af4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f043 0201 	orr.w	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f023 0201 	bic.w	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d115      	bne.n	8007b86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b66:	200a      	movs	r0, #10
 8007b68:	f7fa f8f4 	bl	8001d54 <HAL_Delay>
      ms += 10U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	330a      	adds	r3, #10
 8007b70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 f93f 	bl	8008df6 <USB_GetMode>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d01e      	beq.n	8007bbc <USB_SetCurrentMode+0x84>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b82:	d9f0      	bls.n	8007b66 <USB_SetCurrentMode+0x2e>
 8007b84:	e01a      	b.n	8007bbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b86:	78fb      	ldrb	r3, [r7, #3]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d115      	bne.n	8007bb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b98:	200a      	movs	r0, #10
 8007b9a:	f7fa f8db 	bl	8001d54 <HAL_Delay>
      ms += 10U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	330a      	adds	r3, #10
 8007ba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f926 	bl	8008df6 <USB_GetMode>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <USB_SetCurrentMode+0x84>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2bc7      	cmp	r3, #199	@ 0xc7
 8007bb4:	d9f0      	bls.n	8007b98 <USB_SetCurrentMode+0x60>
 8007bb6:	e001      	b.n	8007bbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e005      	b.n	8007bc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2bc8      	cmp	r3, #200	@ 0xc8
 8007bc0:	d101      	bne.n	8007bc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b086      	sub	sp, #24
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bea:	2300      	movs	r3, #0
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	e009      	b.n	8007c04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	3340      	adds	r3, #64	@ 0x40
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	3301      	adds	r3, #1
 8007c02:	613b      	str	r3, [r7, #16]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b0e      	cmp	r3, #14
 8007c08:	d9f2      	bls.n	8007bf0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d11c      	bne.n	8007c4c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c20:	f043 0302 	orr.w	r3, r3, #2
 8007c24:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e005      	b.n	8007c58 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c50:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c5e:	461a      	mov	r2, r3
 8007c60:	2300      	movs	r3, #0
 8007c62:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d10d      	bne.n	8007c88 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d104      	bne.n	8007c7e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c74:	2100      	movs	r1, #0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f968 	bl	8007f4c <USB_SetDevSpeed>
 8007c7c:	e008      	b.n	8007c90 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c7e:	2101      	movs	r1, #1
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f963 	bl	8007f4c <USB_SetDevSpeed>
 8007c86:	e003      	b.n	8007c90 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c88:	2103      	movs	r1, #3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f95e 	bl	8007f4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c90:	2110      	movs	r1, #16
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f8fa 	bl	8007e8c <USB_FlushTxFifo>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f924 	bl	8007ef0 <USB_FlushRxFifo>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cb8:	461a      	mov	r2, r3
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	e043      	b.n	8007d64 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cf2:	d118      	bne.n	8007d26 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d06:	461a      	mov	r2, r3
 8007d08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	e013      	b.n	8007d38 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	e008      	b.n	8007d38 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d32:	461a      	mov	r2, r3
 8007d34:	2300      	movs	r3, #0
 8007d36:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d44:	461a      	mov	r2, r3
 8007d46:	2300      	movs	r3, #0
 8007d48:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d56:	461a      	mov	r2, r3
 8007d58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3301      	adds	r3, #1
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d68:	461a      	mov	r2, r3
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d3b5      	bcc.n	8007cdc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	e043      	b.n	8007dfe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d8c:	d118      	bne.n	8007dc0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da0:	461a      	mov	r2, r3
 8007da2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	e013      	b.n	8007dd2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db6:	461a      	mov	r2, r3
 8007db8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	e008      	b.n	8007dd2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dde:	461a      	mov	r2, r3
 8007de0:	2300      	movs	r3, #0
 8007de2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df0:	461a      	mov	r2, r3
 8007df2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007df6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	613b      	str	r3, [r7, #16]
 8007dfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007e02:	461a      	mov	r2, r3
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d3b5      	bcc.n	8007d76 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007e2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f043 0210 	orr.w	r2, r3, #16
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	4b0f      	ldr	r3, [pc, #60]	@ (8007e84 <USB_DevInit+0x2b4>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	f043 0208 	orr.w	r2, r3, #8
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d105      	bne.n	8007e74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699a      	ldr	r2, [r3, #24]
 8007e6c:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <USB_DevInit+0x2b8>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e80:	b004      	add	sp, #16
 8007e82:	4770      	bx	lr
 8007e84:	803c3800 	.word	0x803c3800
 8007e88:	40000004 	.word	0x40000004

08007e8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ea6:	d901      	bls.n	8007eac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e01b      	b.n	8007ee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	daf2      	bge.n	8007e9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	019b      	lsls	r3, r3, #6
 8007ebc:	f043 0220 	orr.w	r2, r3, #32
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ed0:	d901      	bls.n	8007ed6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e006      	b.n	8007ee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d0f0      	beq.n	8007ec4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f08:	d901      	bls.n	8007f0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e018      	b.n	8007f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	daf2      	bge.n	8007efc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2210      	movs	r2, #16
 8007f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f2c:	d901      	bls.n	8007f32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e006      	b.n	8007f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f003 0310 	and.w	r3, r3, #16
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d0f0      	beq.n	8007f20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b087      	sub	sp, #28
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 0306 	and.w	r3, r3, #6
 8007f96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d102      	bne.n	8007fa4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	75fb      	strb	r3, [r7, #23]
 8007fa2:	e00a      	b.n	8007fba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d002      	beq.n	8007fb0 <USB_GetDevSpeed+0x32>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b06      	cmp	r3, #6
 8007fae:	d102      	bne.n	8007fb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	75fb      	strb	r3, [r7, #23]
 8007fb4:	e001      	b.n	8007fba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007fb6:	230f      	movs	r3, #15
 8007fb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d139      	bne.n	8008058 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fea:	69da      	ldr	r2, [r3, #28]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	68f9      	ldr	r1, [r7, #12]
 8007ffe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008002:	4313      	orrs	r3, r2
 8008004:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d153      	bne.n	80080c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	791b      	ldrb	r3, [r3, #4]
 8008036:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008038:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	059b      	lsls	r3, r3, #22
 800803e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008040:	431a      	orrs	r2, r3
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	0159      	lsls	r1, r3, #5
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	440b      	add	r3, r1
 800804a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804e:	4619      	mov	r1, r3
 8008050:	4b20      	ldr	r3, [pc, #128]	@ (80080d4 <USB_ActivateEndpoint+0x10c>)
 8008052:	4313      	orrs	r3, r2
 8008054:	600b      	str	r3, [r1, #0]
 8008056:	e035      	b.n	80080c4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800805e:	69da      	ldr	r2, [r3, #28]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	2101      	movs	r1, #1
 800806a:	fa01 f303 	lsl.w	r3, r1, r3
 800806e:	041b      	lsls	r3, r3, #16
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008076:	4313      	orrs	r3, r2
 8008078:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d119      	bne.n	80080c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	791b      	ldrb	r3, [r3, #4]
 80080aa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080ac:	430b      	orrs	r3, r1
 80080ae:	431a      	orrs	r2, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	0159      	lsls	r1, r3, #5
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	440b      	add	r3, r1
 80080b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080bc:	4619      	mov	r1, r3
 80080be:	4b05      	ldr	r3, [pc, #20]	@ (80080d4 <USB_ActivateEndpoint+0x10c>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	10008000 	.word	0x10008000

080080d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	785b      	ldrb	r3, [r3, #1]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d161      	bne.n	80081b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800810a:	d11f      	bne.n	800814c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	440a      	add	r2, r1
 8008122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008126:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800812a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	440a      	add	r2, r1
 8008142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008146:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800814a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	f003 030f 	and.w	r3, r3, #15
 800815c:	2101      	movs	r1, #1
 800815e:	fa01 f303 	lsl.w	r3, r1, r3
 8008162:	b29b      	uxth	r3, r3
 8008164:	43db      	mvns	r3, r3
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800816c:	4013      	ands	r3, r2
 800816e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008176:	69da      	ldr	r2, [r3, #28]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	2101      	movs	r1, #1
 8008182:	fa01 f303 	lsl.w	r3, r1, r3
 8008186:	b29b      	uxth	r3, r3
 8008188:	43db      	mvns	r3, r3
 800818a:	68f9      	ldr	r1, [r7, #12]
 800818c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008190:	4013      	ands	r3, r2
 8008192:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	0159      	lsls	r1, r3, #5
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	440b      	add	r3, r1
 80081aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ae:	4619      	mov	r1, r3
 80081b0:	4b35      	ldr	r3, [pc, #212]	@ (8008288 <USB_DeactivateEndpoint+0x1b0>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	600b      	str	r3, [r1, #0]
 80081b6:	e060      	b.n	800827a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081ce:	d11f      	bne.n	8008210 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	0151      	lsls	r1, r2, #5
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	440a      	add	r2, r1
 80081e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	0151      	lsls	r1, r2, #5
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	440a      	add	r2, r1
 8008206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800820a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800820e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	f003 030f 	and.w	r3, r3, #15
 8008220:	2101      	movs	r1, #1
 8008222:	fa01 f303 	lsl.w	r3, r1, r3
 8008226:	041b      	lsls	r3, r3, #16
 8008228:	43db      	mvns	r3, r3
 800822a:	68f9      	ldr	r1, [r7, #12]
 800822c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008230:	4013      	ands	r3, r2
 8008232:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800823a:	69da      	ldr	r2, [r3, #28]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	f003 030f 	and.w	r3, r3, #15
 8008244:	2101      	movs	r1, #1
 8008246:	fa01 f303 	lsl.w	r3, r1, r3
 800824a:	041b      	lsls	r3, r3, #16
 800824c:	43db      	mvns	r3, r3
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008254:	4013      	ands	r3, r2
 8008256:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	0159      	lsls	r1, r3, #5
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	440b      	add	r3, r1
 800826e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008272:	4619      	mov	r1, r3
 8008274:	4b05      	ldr	r3, [pc, #20]	@ (800828c <USB_DeactivateEndpoint+0x1b4>)
 8008276:	4013      	ands	r3, r2
 8008278:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	ec337800 	.word	0xec337800
 800828c:	eff37800 	.word	0xeff37800

08008290 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	@ 0x28
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	4613      	mov	r3, r2
 800829c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	785b      	ldrb	r3, [r3, #1]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	f040 8185 	bne.w	80085bc <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d132      	bne.n	8008320 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c6:	691a      	ldr	r2, [r3, #16]
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	0159      	lsls	r1, r3, #5
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	440b      	add	r3, r1
 80082d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d4:	4619      	mov	r1, r3
 80082d6:	4ba7      	ldr	r3, [pc, #668]	@ (8008574 <USB_EPStartXfer+0x2e4>)
 80082d8:	4013      	ands	r3, r2
 80082da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008308:	691a      	ldr	r2, [r3, #16]
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	0159      	lsls	r1, r3, #5
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	440b      	add	r3, r1
 8008312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008316:	4619      	mov	r1, r3
 8008318:	4b97      	ldr	r3, [pc, #604]	@ (8008578 <USB_EPStartXfer+0x2e8>)
 800831a:	4013      	ands	r3, r2
 800831c:	610b      	str	r3, [r1, #16]
 800831e:	e097      	b.n	8008450 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	0159      	lsls	r1, r3, #5
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	440b      	add	r3, r1
 8008336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800833a:	4619      	mov	r1, r3
 800833c:	4b8e      	ldr	r3, [pc, #568]	@ (8008578 <USB_EPStartXfer+0x2e8>)
 800833e:	4013      	ands	r3, r2
 8008340:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	0159      	lsls	r1, r3, #5
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	440b      	add	r3, r1
 8008358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800835c:	4619      	mov	r1, r3
 800835e:	4b85      	ldr	r3, [pc, #532]	@ (8008574 <USB_EPStartXfer+0x2e4>)
 8008360:	4013      	ands	r3, r2
 8008362:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d11a      	bne.n	80083a0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	429a      	cmp	r2, r3
 8008374:	d903      	bls.n	800837e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	0151      	lsls	r1, r2, #5
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	440a      	add	r2, r1
 8008394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008398:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800839c:	6113      	str	r3, [r2, #16]
 800839e:	e044      	b.n	800842a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	4413      	add	r3, r2
 80083aa:	1e5a      	subs	r2, r3, #1
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	8afb      	ldrh	r3, [r7, #22]
 80083c6:	04d9      	lsls	r1, r3, #19
 80083c8:	4b6c      	ldr	r3, [pc, #432]	@ (800857c <USB_EPStartXfer+0x2ec>)
 80083ca:	400b      	ands	r3, r1
 80083cc:	69b9      	ldr	r1, [r7, #24]
 80083ce:	0148      	lsls	r0, r1, #5
 80083d0:	69f9      	ldr	r1, [r7, #28]
 80083d2:	4401      	add	r1, r0
 80083d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80083d8:	4313      	orrs	r3, r2
 80083da:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	791b      	ldrb	r3, [r3, #4]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d122      	bne.n	800842a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	0151      	lsls	r1, r2, #5
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	440a      	add	r2, r1
 80083fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083fe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008402:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	8afb      	ldrh	r3, [r7, #22]
 8008414:	075b      	lsls	r3, r3, #29
 8008416:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800841a:	69b9      	ldr	r1, [r7, #24]
 800841c:	0148      	lsls	r0, r1, #5
 800841e:	69f9      	ldr	r1, [r7, #28]
 8008420:	4401      	add	r1, r0
 8008422:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008426:	4313      	orrs	r3, r2
 8008428:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008440:	69b9      	ldr	r1, [r7, #24]
 8008442:	0148      	lsls	r0, r1, #5
 8008444:	69f9      	ldr	r1, [r7, #28]
 8008446:	4401      	add	r1, r0
 8008448:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800844c:	4313      	orrs	r3, r2
 800844e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d14b      	bne.n	80084ee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d009      	beq.n	8008472 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800846a:	461a      	mov	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	791b      	ldrb	r3, [r3, #4]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d128      	bne.n	80084cc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008486:	2b00      	cmp	r3, #0
 8008488:	d110      	bne.n	80084ac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	e00f      	b.n	80084cc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	0151      	lsls	r1, r2, #5
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	440a      	add	r2, r1
 80084c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084ca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	0151      	lsls	r1, r2, #5
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	440a      	add	r2, r1
 80084e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	e169      	b.n	80087c2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	0151      	lsls	r1, r2, #5
 8008500:	69fa      	ldr	r2, [r7, #28]
 8008502:	440a      	add	r2, r1
 8008504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008508:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800850c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	791b      	ldrb	r3, [r3, #4]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d015      	beq.n	8008542 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 8151 	beq.w	80087c2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	2101      	movs	r1, #1
 8008532:	fa01 f303 	lsl.w	r3, r1, r3
 8008536:	69f9      	ldr	r1, [r7, #28]
 8008538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800853c:	4313      	orrs	r3, r2
 800853e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008540:	e13f      	b.n	80087c2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800854e:	2b00      	cmp	r3, #0
 8008550:	d116      	bne.n	8008580 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	4413      	add	r3, r2
 800855a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	0151      	lsls	r1, r2, #5
 8008564:	69fa      	ldr	r2, [r7, #28]
 8008566:	440a      	add	r2, r1
 8008568:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800856c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008570:	6013      	str	r3, [r2, #0]
 8008572:	e015      	b.n	80085a0 <USB_EPStartXfer+0x310>
 8008574:	e007ffff 	.word	0xe007ffff
 8008578:	fff80000 	.word	0xfff80000
 800857c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800859a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800859e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	68d9      	ldr	r1, [r3, #12]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	b298      	uxth	r0, r3
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	4603      	mov	r3, r0
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 f9b9 	bl	800892c <USB_WritePacket>
 80085ba:	e102      	b.n	80087c2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	0159      	lsls	r1, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	440b      	add	r3, r1
 80085d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d6:	4619      	mov	r1, r3
 80085d8:	4b7c      	ldr	r3, [pc, #496]	@ (80087cc <USB_EPStartXfer+0x53c>)
 80085da:	4013      	ands	r3, r2
 80085dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	0159      	lsls	r1, r3, #5
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	440b      	add	r3, r1
 80085f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f8:	4619      	mov	r1, r3
 80085fa:	4b75      	ldr	r3, [pc, #468]	@ (80087d0 <USB_EPStartXfer+0x540>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d12f      	bne.n	8008666 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008634:	69b9      	ldr	r1, [r7, #24]
 8008636:	0148      	lsls	r0, r1, #5
 8008638:	69f9      	ldr	r1, [r7, #28]
 800863a:	4401      	add	r1, r0
 800863c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008640:	4313      	orrs	r3, r2
 8008642:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	440a      	add	r2, r1
 800865a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800865e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008662:	6113      	str	r3, [r2, #16]
 8008664:	e05f      	b.n	8008726 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d123      	bne.n	80086b6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800867a:	691a      	ldr	r2, [r3, #16]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008684:	69b9      	ldr	r1, [r7, #24]
 8008686:	0148      	lsls	r0, r1, #5
 8008688:	69f9      	ldr	r1, [r7, #28]
 800868a:	4401      	add	r1, r0
 800868c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008690:	4313      	orrs	r3, r2
 8008692:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086b2:	6113      	str	r3, [r2, #16]
 80086b4:	e037      	b.n	8008726 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	4413      	add	r3, r2
 80086c0:	1e5a      	subs	r2, r3, #1
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ca:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	8afa      	ldrh	r2, [r7, #22]
 80086d2:	fb03 f202 	mul.w	r2, r3, r2
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	8afb      	ldrh	r3, [r7, #22]
 80086ea:	04d9      	lsls	r1, r3, #19
 80086ec:	4b39      	ldr	r3, [pc, #228]	@ (80087d4 <USB_EPStartXfer+0x544>)
 80086ee:	400b      	ands	r3, r1
 80086f0:	69b9      	ldr	r1, [r7, #24]
 80086f2:	0148      	lsls	r0, r1, #5
 80086f4:	69f9      	ldr	r1, [r7, #28]
 80086f6:	4401      	add	r1, r0
 80086f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80086fc:	4313      	orrs	r3, r2
 80086fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008716:	69b9      	ldr	r1, [r7, #24]
 8008718:	0148      	lsls	r0, r1, #5
 800871a:	69f9      	ldr	r1, [r7, #28]
 800871c:	4401      	add	r1, r0
 800871e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008722:	4313      	orrs	r3, r2
 8008724:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d10d      	bne.n	8008748 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d009      	beq.n	8008748 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	68d9      	ldr	r1, [r3, #12]
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008744:	460a      	mov	r2, r1
 8008746:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	791b      	ldrb	r3, [r3, #4]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d128      	bne.n	80087a2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800875c:	2b00      	cmp	r3, #0
 800875e:	d110      	bne.n	8008782 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	0151      	lsls	r1, r2, #5
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	440a      	add	r2, r1
 8008776:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800877a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	e00f      	b.n	80087a2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800879c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087a0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80087c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	fff80000 	.word	0xfff80000
 80087d0:	e007ffff 	.word	0xe007ffff
 80087d4:	1ff80000 	.word	0x1ff80000

080087d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d14a      	bne.n	800888c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800880a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800880e:	f040 8086 	bne.w	800891e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	7812      	ldrb	r2, [r2, #0]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008830:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008834:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	7812      	ldrb	r2, [r2, #0]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	440a      	add	r2, r1
 8008850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008854:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008866:	4293      	cmp	r3, r2
 8008868:	d902      	bls.n	8008870 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	75fb      	strb	r3, [r7, #23]
          break;
 800886e:	e056      	b.n	800891e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008888:	d0e7      	beq.n	800885a <USB_EPStopXfer+0x82>
 800888a:	e048      	b.n	800891e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088a4:	d13b      	bne.n	800891e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	7812      	ldrb	r2, [r2, #0]
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80088c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	0151      	lsls	r1, r2, #5
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	440a      	add	r2, r1
 80088e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d902      	bls.n	8008904 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	75fb      	strb	r3, [r7, #23]
          break;
 8008902:	e00c      	b.n	800891e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800891c:	d0e7      	beq.n	80088ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008920:	4618      	mov	r0, r3
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800892c:	b480      	push	{r7}
 800892e:	b089      	sub	sp, #36	@ 0x24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	4611      	mov	r1, r2
 8008938:	461a      	mov	r2, r3
 800893a:	460b      	mov	r3, r1
 800893c:	71fb      	strb	r3, [r7, #7]
 800893e:	4613      	mov	r3, r2
 8008940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800894a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800894e:	2b00      	cmp	r3, #0
 8008950:	d123      	bne.n	800899a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008952:	88bb      	ldrh	r3, [r7, #4]
 8008954:	3303      	adds	r3, #3
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800895a:	2300      	movs	r3, #0
 800895c:	61bb      	str	r3, [r7, #24]
 800895e:	e018      	b.n	8008992 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	031a      	lsls	r2, r3, #12
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	4413      	add	r3, r2
 8008968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800896c:	461a      	mov	r2, r3
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	3301      	adds	r3, #1
 8008978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	3301      	adds	r3, #1
 800897e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	3301      	adds	r3, #1
 8008984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3301      	adds	r3, #1
 800898a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	3301      	adds	r3, #1
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	429a      	cmp	r2, r3
 8008998:	d3e2      	bcc.n	8008960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3724      	adds	r7, #36	@ 0x24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b08b      	sub	sp, #44	@ 0x2c
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	4613      	mov	r3, r2
 80089b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089be:	88fb      	ldrh	r3, [r7, #6]
 80089c0:	089b      	lsrs	r3, r3, #2
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089ce:	2300      	movs	r3, #0
 80089d0:	623b      	str	r3, [r7, #32]
 80089d2:	e014      	b.n	80089fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089de:	601a      	str	r2, [r3, #0]
    pDest++;
 80089e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e2:	3301      	adds	r3, #1
 80089e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	3301      	adds	r3, #1
 80089ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	3301      	adds	r3, #1
 80089f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f4:	3301      	adds	r3, #1
 80089f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	3301      	adds	r3, #1
 80089fc:	623b      	str	r3, [r7, #32]
 80089fe:	6a3a      	ldr	r2, [r7, #32]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d3e6      	bcc.n	80089d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a06:	8bfb      	ldrh	r3, [r7, #30]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01e      	beq.n	8008a4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a16:	461a      	mov	r2, r3
 8008a18:	f107 0310 	add.w	r3, r7, #16
 8008a1c:	6812      	ldr	r2, [r2, #0]
 8008a1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	00db      	lsls	r3, r3, #3
 8008a28:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a30:	701a      	strb	r2, [r3, #0]
      i++;
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	3301      	adds	r3, #1
 8008a36:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008a3e:	8bfb      	ldrh	r3, [r7, #30]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a44:	8bfb      	ldrh	r3, [r7, #30]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1ea      	bne.n	8008a20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	372c      	adds	r7, #44	@ 0x2c
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d12c      	bne.n	8008ace <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	db12      	blt.n	8008aac <USB_EPSetStall+0x54>
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00f      	beq.n	8008aac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008aaa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	0151      	lsls	r1, r2, #5
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	440a      	add	r2, r1
 8008ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	e02b      	b.n	8008b26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	db12      	blt.n	8008b06 <USB_EPSetStall+0xae>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00f      	beq.n	8008b06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	0151      	lsls	r1, r2, #5
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	440a      	add	r2, r1
 8008afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d128      	bne.n	8008ba2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	0151      	lsls	r1, r2, #5
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	440a      	add	r2, r1
 8008b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	791b      	ldrb	r3, [r3, #4]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d003      	beq.n	8008b80 <USB_EPClearStall+0x4c>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	791b      	ldrb	r3, [r3, #4]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d138      	bne.n	8008bf2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	e027      	b.n	8008bf2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bbc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008bc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	791b      	ldrb	r3, [r3, #4]
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d003      	beq.n	8008bd2 <USB_EPClearStall+0x9e>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	791b      	ldrb	r3, [r3, #4]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d10f      	bne.n	8008bf2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	0151      	lsls	r1, r2, #5
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	440a      	add	r2, r1
 8008be8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bf0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008c22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	011b      	lsls	r3, r3, #4
 8008c30:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008c34:	68f9      	ldr	r1, [r7, #12]
 8008c36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c66:	f023 0303 	bic.w	r3, r3, #3
 8008c6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c7a:	f023 0302 	bic.w	r3, r3, #2
 8008c7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008ca8:	f023 0303 	bic.w	r3, r3, #3
 8008cac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008cbc:	f043 0302 	orr.w	r3, r3, #2
 8008cc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	4013      	ands	r3, r2
 8008d18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	0c1b      	lsrs	r3, r3, #16
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	b29b      	uxth	r3, r3
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b087      	sub	sp, #28
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008dbe:	78fb      	ldrb	r3, [r7, #3]
 8008dc0:	f003 030f 	and.w	r3, r3, #15
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dca:	01db      	lsls	r3, r3, #7
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	4013      	ands	r3, r2
 8008de6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008de8:	68bb      	ldr	r3, [r7, #8]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	371c      	adds	r7, #28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	f003 0301 	and.w	r3, r3, #1
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
	...

08008e14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4b09      	ldr	r3, [pc, #36]	@ (8008e58 <USB_ActivateSetup+0x44>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	fffff800 	.word	0xfffff800

08008e5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	460b      	mov	r3, r1
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	333c      	adds	r3, #60	@ 0x3c
 8008e72:	3304      	adds	r3, #4
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	4a26      	ldr	r2, [pc, #152]	@ (8008f14 <USB_EP0_OutStart+0xb8>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d90a      	bls.n	8008e96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e90:	d101      	bne.n	8008e96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	e037      	b.n	8008f06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ec4:	f043 0318 	orr.w	r3, r3, #24
 8008ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ed8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008edc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008ede:	7afb      	ldrb	r3, [r7, #11]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d10f      	bne.n	8008f04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008efe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	4f54300a 	.word	0x4f54300a

08008f18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3301      	adds	r3, #1
 8008f28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f30:	d901      	bls.n	8008f36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e01b      	b.n	8008f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	daf2      	bge.n	8008f24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f043 0201 	orr.w	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3301      	adds	r3, #1
 8008f52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f5a:	d901      	bls.n	8008f60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e006      	b.n	8008f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d0f0      	beq.n	8008f4e <USB_CoreReset+0x36>

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
	...

08008f7c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008f88:	2010      	movs	r0, #16
 8008f8a:	f002 f9d9 	bl	800b340 <USBD_static_malloc>
 8008f8e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	32b0      	adds	r2, #176	@ 0xb0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e048      	b.n	800903c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	32b0      	adds	r2, #176	@ 0xb0
 8008fb4:	68f9      	ldr	r1, [r7, #12]
 8008fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	32b0      	adds	r2, #176	@ 0xb0
 8008fc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7c1b      	ldrb	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10d      	bne.n	8008ff2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8009044 <USBD_HID_Init+0xc8>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	f003 020f 	and.w	r2, r3, #15
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	440b      	add	r3, r1
 8008fea:	3326      	adds	r3, #38	@ 0x26
 8008fec:	2207      	movs	r2, #7
 8008fee:	801a      	strh	r2, [r3, #0]
 8008ff0:	e00c      	b.n	800900c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008ff2:	4b14      	ldr	r3, [pc, #80]	@ (8009044 <USBD_HID_Init+0xc8>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f003 020f 	and.w	r2, r3, #15
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	3326      	adds	r3, #38	@ 0x26
 8009008:	220a      	movs	r2, #10
 800900a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800900c:	4b0d      	ldr	r3, [pc, #52]	@ (8009044 <USBD_HID_Init+0xc8>)
 800900e:	7819      	ldrb	r1, [r3, #0]
 8009010:	2304      	movs	r3, #4
 8009012:	2203      	movs	r2, #3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f002 f882 	bl	800b11e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800901a:	4b0a      	ldr	r3, [pc, #40]	@ (8009044 <USBD_HID_Init+0xc8>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	f003 020f 	and.w	r2, r3, #15
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	440b      	add	r3, r1
 800902e:	3324      	adds	r3, #36	@ 0x24
 8009030:	2201      	movs	r2, #1
 8009032:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	24000273 	.word	0x24000273

08009048 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009054:	4b1f      	ldr	r3, [pc, #124]	@ (80090d4 <USBD_HID_DeInit+0x8c>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f002 f885 	bl	800b16a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009060:	4b1c      	ldr	r3, [pc, #112]	@ (80090d4 <USBD_HID_DeInit+0x8c>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	f003 020f 	and.w	r2, r3, #15
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	440b      	add	r3, r1
 8009074:	3324      	adds	r3, #36	@ 0x24
 8009076:	2200      	movs	r2, #0
 8009078:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800907a:	4b16      	ldr	r3, [pc, #88]	@ (80090d4 <USBD_HID_DeInit+0x8c>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	f003 020f 	and.w	r2, r3, #15
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	3326      	adds	r3, #38	@ 0x26
 8009090:	2200      	movs	r2, #0
 8009092:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	32b0      	adds	r2, #176	@ 0xb0
 800909e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d011      	beq.n	80090ca <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	32b0      	adds	r2, #176	@ 0xb0
 80090b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f002 f951 	bl	800b35c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	32b0      	adds	r2, #176	@ 0xb0
 80090c4:	2100      	movs	r1, #0
 80090c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	24000273 	.word	0x24000273

080090d8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	32b0      	adds	r2, #176	@ 0xb0
 80090ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009100:	2303      	movs	r3, #3
 8009102:	e0e8      	b.n	80092d6 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800910c:	2b00      	cmp	r3, #0
 800910e:	d046      	beq.n	800919e <USBD_HID_Setup+0xc6>
 8009110:	2b20      	cmp	r3, #32
 8009112:	f040 80d8 	bne.w	80092c6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	785b      	ldrb	r3, [r3, #1]
 800911a:	3b02      	subs	r3, #2
 800911c:	2b09      	cmp	r3, #9
 800911e:	d836      	bhi.n	800918e <USBD_HID_Setup+0xb6>
 8009120:	a201      	add	r2, pc, #4	@ (adr r2, 8009128 <USBD_HID_Setup+0x50>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	0800917f 	.word	0x0800917f
 800912c:	0800915f 	.word	0x0800915f
 8009130:	0800918f 	.word	0x0800918f
 8009134:	0800918f 	.word	0x0800918f
 8009138:	0800918f 	.word	0x0800918f
 800913c:	0800918f 	.word	0x0800918f
 8009140:	0800918f 	.word	0x0800918f
 8009144:	0800918f 	.word	0x0800918f
 8009148:	0800916d 	.word	0x0800916d
 800914c:	08009151 	.word	0x08009151
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	885b      	ldrh	r3, [r3, #2]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	601a      	str	r2, [r3, #0]
          break;
 800915c:	e01e      	b.n	800919c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 fc0f 	bl	800a988 <USBD_CtlSendData>
          break;
 800916a:	e017      	b.n	800919c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	885b      	ldrh	r3, [r3, #2]
 8009170:	0a1b      	lsrs	r3, r3, #8
 8009172:	b29b      	uxth	r3, r3
 8009174:	b2db      	uxtb	r3, r3
 8009176:	461a      	mov	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	605a      	str	r2, [r3, #4]
          break;
 800917c:	e00e      	b.n	800919c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3304      	adds	r3, #4
 8009182:	2201      	movs	r2, #1
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f001 fbfe 	bl	800a988 <USBD_CtlSendData>
          break;
 800918c:	e006      	b.n	800919c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 fb7c 	bl	800a88e <USBD_CtlError>
          ret = USBD_FAIL;
 8009196:	2303      	movs	r3, #3
 8009198:	75fb      	strb	r3, [r7, #23]
          break;
 800919a:	bf00      	nop
      }
      break;
 800919c:	e09a      	b.n	80092d4 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	785b      	ldrb	r3, [r3, #1]
 80091a2:	2b0b      	cmp	r3, #11
 80091a4:	f200 8086 	bhi.w	80092b4 <USBD_HID_Setup+0x1dc>
 80091a8:	a201      	add	r2, pc, #4	@ (adr r2, 80091b0 <USBD_HID_Setup+0xd8>)
 80091aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ae:	bf00      	nop
 80091b0:	080091e1 	.word	0x080091e1
 80091b4:	080092c3 	.word	0x080092c3
 80091b8:	080092b5 	.word	0x080092b5
 80091bc:	080092b5 	.word	0x080092b5
 80091c0:	080092b5 	.word	0x080092b5
 80091c4:	080092b5 	.word	0x080092b5
 80091c8:	0800920b 	.word	0x0800920b
 80091cc:	080092b5 	.word	0x080092b5
 80091d0:	080092b5 	.word	0x080092b5
 80091d4:	080092b5 	.word	0x080092b5
 80091d8:	08009263 	.word	0x08009263
 80091dc:	0800928d 	.word	0x0800928d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d107      	bne.n	80091fc <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80091ec:	f107 030a 	add.w	r3, r7, #10
 80091f0:	2202      	movs	r2, #2
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 fbc7 	bl	800a988 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091fa:	e063      	b.n	80092c4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f001 fb45 	bl	800a88e <USBD_CtlError>
            ret = USBD_FAIL;
 8009204:	2303      	movs	r3, #3
 8009206:	75fb      	strb	r3, [r7, #23]
          break;
 8009208:	e05c      	b.n	80092c4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	885b      	ldrh	r3, [r3, #2]
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	b29b      	uxth	r3, r3
 8009212:	2b22      	cmp	r3, #34	@ 0x22
 8009214:	d108      	bne.n	8009228 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	88db      	ldrh	r3, [r3, #6]
 800921a:	2b3f      	cmp	r3, #63	@ 0x3f
 800921c:	bf28      	it	cs
 800921e:	233f      	movcs	r3, #63	@ 0x3f
 8009220:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009222:	4b2f      	ldr	r3, [pc, #188]	@ (80092e0 <USBD_HID_Setup+0x208>)
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	e015      	b.n	8009254 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	885b      	ldrh	r3, [r3, #2]
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	b29b      	uxth	r3, r3
 8009230:	2b21      	cmp	r3, #33	@ 0x21
 8009232:	d108      	bne.n	8009246 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009234:	4b2b      	ldr	r3, [pc, #172]	@ (80092e4 <USBD_HID_Setup+0x20c>)
 8009236:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	88db      	ldrh	r3, [r3, #6]
 800923c:	2b09      	cmp	r3, #9
 800923e:	bf28      	it	cs
 8009240:	2309      	movcs	r3, #9
 8009242:	82bb      	strh	r3, [r7, #20]
 8009244:	e006      	b.n	8009254 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 fb20 	bl	800a88e <USBD_CtlError>
            ret = USBD_FAIL;
 800924e:	2303      	movs	r3, #3
 8009250:	75fb      	strb	r3, [r7, #23]
            break;
 8009252:	e037      	b.n	80092c4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009254:	8abb      	ldrh	r3, [r7, #20]
 8009256:	461a      	mov	r2, r3
 8009258:	6939      	ldr	r1, [r7, #16]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 fb94 	bl	800a988 <USBD_CtlSendData>
          break;
 8009260:	e030      	b.n	80092c4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b03      	cmp	r3, #3
 800926c:	d107      	bne.n	800927e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3308      	adds	r3, #8
 8009272:	2201      	movs	r2, #1
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 fb86 	bl	800a988 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800927c:	e022      	b.n	80092c4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 fb04 	bl	800a88e <USBD_CtlError>
            ret = USBD_FAIL;
 8009286:	2303      	movs	r3, #3
 8009288:	75fb      	strb	r3, [r7, #23]
          break;
 800928a:	e01b      	b.n	80092c4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b03      	cmp	r3, #3
 8009296:	d106      	bne.n	80092a6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	885b      	ldrh	r3, [r3, #2]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	461a      	mov	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092a4:	e00e      	b.n	80092c4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 faf0 	bl	800a88e <USBD_CtlError>
            ret = USBD_FAIL;
 80092ae:	2303      	movs	r3, #3
 80092b0:	75fb      	strb	r3, [r7, #23]
          break;
 80092b2:	e007      	b.n	80092c4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 fae9 	bl	800a88e <USBD_CtlError>
          ret = USBD_FAIL;
 80092bc:	2303      	movs	r3, #3
 80092be:	75fb      	strb	r3, [r7, #23]
          break;
 80092c0:	e000      	b.n	80092c4 <USBD_HID_Setup+0x1ec>
          break;
 80092c2:	bf00      	nop
      }
      break;
 80092c4:	e006      	b.n	80092d4 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fae0 	bl	800a88e <USBD_CtlError>
      ret = USBD_FAIL;
 80092ce:	2303      	movs	r3, #3
 80092d0:	75fb      	strb	r3, [r7, #23]
      break;
 80092d2:	bf00      	nop
  }

  return (uint8_t)ret;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	24000234 	.word	0x24000234
 80092e4:	2400021c 	.word	0x2400021c

080092e8 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	32b0      	adds	r2, #176	@ 0xb0
 8009300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009304:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800930c:	2303      	movs	r3, #3
 800930e:	e014      	b.n	800933a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b03      	cmp	r3, #3
 800931a:	d10d      	bne.n	8009338 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	7b1b      	ldrb	r3, [r3, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d109      	bne.n	8009338 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	2201      	movs	r2, #1
 8009328:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800932a:	4b06      	ldr	r3, [pc, #24]	@ (8009344 <USBD_HID_SendReport+0x5c>)
 800932c:	7819      	ldrb	r1, [r3, #0]
 800932e:	88fb      	ldrh	r3, [r7, #6]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f001 ffc1 	bl	800b2ba <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	24000273 	.word	0x24000273

08009348 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009350:	2181      	movs	r1, #129	@ 0x81
 8009352:	4809      	ldr	r0, [pc, #36]	@ (8009378 <USBD_HID_GetFSCfgDesc+0x30>)
 8009354:	f000 fc3b 	bl	8009bce <USBD_GetEpDesc>
 8009358:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	220a      	movs	r2, #10
 8009364:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2222      	movs	r2, #34	@ 0x22
 800936a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800936c:	4b02      	ldr	r3, [pc, #8]	@ (8009378 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	240001f8 	.word	0x240001f8

0800937c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009384:	2181      	movs	r1, #129	@ 0x81
 8009386:	4809      	ldr	r0, [pc, #36]	@ (80093ac <USBD_HID_GetHSCfgDesc+0x30>)
 8009388:	f000 fc21 	bl	8009bce <USBD_GetEpDesc>
 800938c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2207      	movs	r2, #7
 8009398:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2222      	movs	r2, #34	@ 0x22
 800939e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80093a0:	4b02      	ldr	r3, [pc, #8]	@ (80093ac <USBD_HID_GetHSCfgDesc+0x30>)
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	240001f8 	.word	0x240001f8

080093b0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80093b8:	2181      	movs	r1, #129	@ 0x81
 80093ba:	4809      	ldr	r0, [pc, #36]	@ (80093e0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80093bc:	f000 fc07 	bl	8009bce <USBD_GetEpDesc>
 80093c0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	220a      	movs	r2, #10
 80093cc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2222      	movs	r2, #34	@ 0x22
 80093d2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80093d4:	4b02      	ldr	r3, [pc, #8]	@ (80093e0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	240001f8 	.word	0x240001f8

080093e4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	32b0      	adds	r2, #176	@ 0xb0
 80093fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fe:	2200      	movs	r2, #0
 8009400:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	220a      	movs	r2, #10
 800941c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800941e:	4b03      	ldr	r3, [pc, #12]	@ (800942c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	24000228 	.word	0x24000228

08009430 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	4613      	mov	r3, r2
 800943c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009444:	2303      	movs	r3, #3
 8009446:	e01f      	b.n	8009488 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	79fa      	ldrb	r2, [r7, #7]
 800947a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f001 fde1 	bl	800b044 <USBD_LL_Init>
 8009482:	4603      	mov	r3, r0
 8009484:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e025      	b.n	80094f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	32ae      	adds	r2, #174	@ 0xae
 80094ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00f      	beq.n	80094e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	32ae      	adds	r2, #174	@ 0xae
 80094ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d4:	f107 020e 	add.w	r2, r7, #14
 80094d8:	4610      	mov	r0, r2
 80094da:	4798      	blx	r3
 80094dc:	4602      	mov	r2, r0
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80094ea:	1c5a      	adds	r2, r3, #1
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 fdef 	bl	800b0e8 <USBD_LL_Start>
 800950a:	4603      	mov	r3, r0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800951c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	460b      	mov	r3, r1
 8009534:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	78fa      	ldrb	r2, [r7, #3]
 800954e:	4611      	mov	r1, r2
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	4798      	blx	r3
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	78fa      	ldrb	r2, [r7, #3]
 800957c:	4611      	mov	r1, r2
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	4798      	blx	r3
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009588:	2303      	movs	r3, #3
 800958a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800958c:	7bfb      	ldrb	r3, [r7, #15]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f001 f936 	bl	800a81a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80095bc:	461a      	mov	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d01a      	beq.n	8009608 <USBD_LL_SetupStage+0x72>
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d822      	bhi.n	800961c <USBD_LL_SetupStage+0x86>
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <USBD_LL_SetupStage+0x4a>
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d00a      	beq.n	80095f4 <USBD_LL_SetupStage+0x5e>
 80095de:	e01d      	b.n	800961c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fb63 	bl	8009cb4 <USBD_StdDevReq>
 80095ee:	4603      	mov	r3, r0
 80095f0:	73fb      	strb	r3, [r7, #15]
      break;
 80095f2:	e020      	b.n	8009636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fbcb 	bl	8009d98 <USBD_StdItfReq>
 8009602:	4603      	mov	r3, r0
 8009604:	73fb      	strb	r3, [r7, #15]
      break;
 8009606:	e016      	b.n	8009636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fc2d 	bl	8009e70 <USBD_StdEPReq>
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]
      break;
 800961a:	e00c      	b.n	8009636 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009622:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009626:	b2db      	uxtb	r3, r3
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f001 fdbc 	bl	800b1a8 <USBD_LL_StallEP>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]
      break;
 8009634:	bf00      	nop
  }

  return ret;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	460b      	mov	r3, r1
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d16e      	bne.n	8009736 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800965e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009666:	2b03      	cmp	r3, #3
 8009668:	f040 8098 	bne.w	800979c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	429a      	cmp	r2, r3
 8009676:	d913      	bls.n	80096a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	1ad2      	subs	r2, r2, r3
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	4293      	cmp	r3, r2
 8009690:	bf28      	it	cs
 8009692:	4613      	movcs	r3, r2
 8009694:	461a      	mov	r2, r3
 8009696:	6879      	ldr	r1, [r7, #4]
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f001 f9a1 	bl	800a9e0 <USBD_CtlContinueRx>
 800969e:	e07d      	b.n	800979c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096a6:	f003 031f 	and.w	r3, r3, #31
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d014      	beq.n	80096d8 <USBD_LL_DataOutStage+0x98>
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d81d      	bhi.n	80096ee <USBD_LL_DataOutStage+0xae>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <USBD_LL_DataOutStage+0x7c>
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d003      	beq.n	80096c2 <USBD_LL_DataOutStage+0x82>
 80096ba:	e018      	b.n	80096ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	75bb      	strb	r3, [r7, #22]
            break;
 80096c0:	e018      	b.n	80096f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	4619      	mov	r1, r3
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 fa64 	bl	8009b9a <USBD_CoreFindIF>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75bb      	strb	r3, [r7, #22]
            break;
 80096d6:	e00d      	b.n	80096f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 fa66 	bl	8009bb4 <USBD_CoreFindEP>
 80096e8:	4603      	mov	r3, r0
 80096ea:	75bb      	strb	r3, [r7, #22]
            break;
 80096ec:	e002      	b.n	80096f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	75bb      	strb	r3, [r7, #22]
            break;
 80096f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80096f4:	7dbb      	ldrb	r3, [r7, #22]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d119      	bne.n	800972e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b03      	cmp	r3, #3
 8009704:	d113      	bne.n	800972e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009706:	7dba      	ldrb	r2, [r7, #22]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	32ae      	adds	r2, #174	@ 0xae
 800970c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00b      	beq.n	800972e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009716:	7dba      	ldrb	r2, [r7, #22]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800971e:	7dba      	ldrb	r2, [r7, #22]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	32ae      	adds	r2, #174	@ 0xae
 8009724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f001 f967 	bl	800aa02 <USBD_CtlSendStatus>
 8009734:	e032      	b.n	800979c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009736:	7afb      	ldrb	r3, [r7, #11]
 8009738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800973c:	b2db      	uxtb	r3, r3
 800973e:	4619      	mov	r1, r3
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 fa37 	bl	8009bb4 <USBD_CoreFindEP>
 8009746:	4603      	mov	r3, r0
 8009748:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800974a:	7dbb      	ldrb	r3, [r7, #22]
 800974c:	2bff      	cmp	r3, #255	@ 0xff
 800974e:	d025      	beq.n	800979c <USBD_LL_DataOutStage+0x15c>
 8009750:	7dbb      	ldrb	r3, [r7, #22]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d122      	bne.n	800979c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b03      	cmp	r3, #3
 8009760:	d117      	bne.n	8009792 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009762:	7dba      	ldrb	r2, [r7, #22]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	32ae      	adds	r2, #174	@ 0xae
 8009768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00f      	beq.n	8009792 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009772:	7dba      	ldrb	r2, [r7, #22]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800977a:	7dba      	ldrb	r2, [r7, #22]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	32ae      	adds	r2, #174	@ 0xae
 8009780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	7afa      	ldrb	r2, [r7, #11]
 8009788:	4611      	mov	r1, r2
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	4798      	blx	r3
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d001      	beq.n	800979c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	e000      	b.n	800979e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b086      	sub	sp, #24
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	460b      	mov	r3, r1
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80097b4:	7afb      	ldrb	r3, [r7, #11]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d16f      	bne.n	800989a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3314      	adds	r3, #20
 80097be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d15a      	bne.n	8009880 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d914      	bls.n	8009800 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	689a      	ldr	r2, [r3, #8]
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	461a      	mov	r2, r3
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f001 f8e6 	bl	800a9be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097f2:	2300      	movs	r3, #0
 80097f4:	2200      	movs	r2, #0
 80097f6:	2100      	movs	r1, #0
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f001 fd7f 	bl	800b2fc <USBD_LL_PrepareReceive>
 80097fe:	e03f      	b.n	8009880 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	68da      	ldr	r2, [r3, #12]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	429a      	cmp	r2, r3
 800980a:	d11c      	bne.n	8009846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009814:	429a      	cmp	r2, r3
 8009816:	d316      	bcc.n	8009846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009822:	429a      	cmp	r2, r3
 8009824:	d20f      	bcs.n	8009846 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009826:	2200      	movs	r2, #0
 8009828:	2100      	movs	r1, #0
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f001 f8c7 	bl	800a9be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009838:	2300      	movs	r3, #0
 800983a:	2200      	movs	r2, #0
 800983c:	2100      	movs	r1, #0
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f001 fd5c 	bl	800b2fc <USBD_LL_PrepareReceive>
 8009844:	e01c      	b.n	8009880 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b03      	cmp	r3, #3
 8009850:	d10f      	bne.n	8009872 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d009      	beq.n	8009872 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009872:	2180      	movs	r1, #128	@ 0x80
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f001 fc97 	bl	800b1a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f001 f8d4 	bl	800aa28 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d03a      	beq.n	8009900 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f7ff fe42 	bl	8009514 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009898:	e032      	b.n	8009900 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800989a:	7afb      	ldrb	r3, [r7, #11]
 800989c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	4619      	mov	r1, r3
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 f985 	bl	8009bb4 <USBD_CoreFindEP>
 80098aa:	4603      	mov	r3, r0
 80098ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	2bff      	cmp	r3, #255	@ 0xff
 80098b2:	d025      	beq.n	8009900 <USBD_LL_DataInStage+0x15a>
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d122      	bne.n	8009900 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d11c      	bne.n	8009900 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80098c6:	7dfa      	ldrb	r2, [r7, #23]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	32ae      	adds	r2, #174	@ 0xae
 80098cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d014      	beq.n	8009900 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80098d6:	7dfa      	ldrb	r2, [r7, #23]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80098de:	7dfa      	ldrb	r2, [r7, #23]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	32ae      	adds	r2, #174	@ 0xae
 80098e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	7afa      	ldrb	r2, [r7, #11]
 80098ec:	4611      	mov	r1, r2
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	4798      	blx	r3
 80098f2:	4603      	mov	r3, r0
 80098f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80098f6:	7dbb      	ldrb	r3, [r7, #22]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80098fc:	7dbb      	ldrb	r3, [r7, #22]
 80098fe:	e000      	b.n	8009902 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b084      	sub	sp, #16
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009942:	2b00      	cmp	r3, #0
 8009944:	d014      	beq.n	8009970 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00e      	beq.n	8009970 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	6852      	ldr	r2, [r2, #4]
 800995e:	b2d2      	uxtb	r2, r2
 8009960:	4611      	mov	r1, r2
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	4798      	blx	r3
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800996c:	2303      	movs	r3, #3
 800996e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009970:	2340      	movs	r3, #64	@ 0x40
 8009972:	2200      	movs	r2, #0
 8009974:	2100      	movs	r1, #0
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 fbd1 	bl	800b11e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2240      	movs	r2, #64	@ 0x40
 8009988:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800998c:	2340      	movs	r3, #64	@ 0x40
 800998e:	2200      	movs	r2, #0
 8009990:	2180      	movs	r1, #128	@ 0x80
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fbc3 	bl	800b11e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2240      	movs	r2, #64	@ 0x40
 80099a2:	621a      	str	r2, [r3, #32]

  return ret;
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	78fa      	ldrb	r2, [r7, #3]
 80099be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d006      	beq.n	80099f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2204      	movs	r2, #4
 80099f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	d106      	bne.n	8009a28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d110      	bne.n	8009a6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00b      	beq.n	8009a6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	32ae      	adds	r2, #174	@ 0xae
 8009a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e01c      	b.n	8009ad2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d115      	bne.n	8009ad0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	32ae      	adds	r2, #174	@ 0xae
 8009aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00b      	beq.n	8009ad0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	32ae      	adds	r2, #174	@ 0xae
 8009ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	78fa      	ldrb	r2, [r7, #3]
 8009aca:	4611      	mov	r1, r2
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	32ae      	adds	r2, #174	@ 0xae
 8009af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e01c      	b.n	8009b36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d115      	bne.n	8009b34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	32ae      	adds	r2, #174	@ 0xae
 8009b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00b      	beq.n	8009b34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	32ae      	adds	r2, #174	@ 0xae
 8009b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2c:	78fa      	ldrb	r2, [r7, #3]
 8009b2e:	4611      	mov	r1, r2
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00e      	beq.n	8009b90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	6852      	ldr	r2, [r2, #4]
 8009b7e:	b2d2      	uxtb	r2, r2
 8009b80:	4611      	mov	r1, r2
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	4798      	blx	r3
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ba6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009bc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b086      	sub	sp, #24
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	885b      	ldrh	r3, [r3, #2]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	7812      	ldrb	r2, [r2, #0]
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d91f      	bls.n	8009c34 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009bfa:	e013      	b.n	8009c24 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009bfc:	f107 030a 	add.w	r3, r7, #10
 8009c00:	4619      	mov	r1, r3
 8009c02:	6978      	ldr	r0, [r7, #20]
 8009c04:	f000 f81b 	bl	8009c3e <USBD_GetNextDesc>
 8009c08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	785b      	ldrb	r3, [r3, #1]
 8009c0e:	2b05      	cmp	r3, #5
 8009c10:	d108      	bne.n	8009c24 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	789b      	ldrb	r3, [r3, #2]
 8009c1a:	78fa      	ldrb	r2, [r7, #3]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d008      	beq.n	8009c32 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	885b      	ldrh	r3, [r3, #2]
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	897b      	ldrh	r3, [r7, #10]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d8e5      	bhi.n	8009bfc <USBD_GetEpDesc+0x2e>
 8009c30:	e000      	b.n	8009c34 <USBD_GetEpDesc+0x66>
          break;
 8009c32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009c34:	693b      	ldr	r3, [r7, #16]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b085      	sub	sp, #20
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	7812      	ldrb	r2, [r2, #0]
 8009c54:	4413      	add	r3, r2
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4413      	add	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c68:	68fb      	ldr	r3, [r7, #12]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b087      	sub	sp, #28
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c94:	8a3b      	ldrh	r3, [r7, #16]
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	b21a      	sxth	r2, r3
 8009c9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	b21b      	sxth	r3, r3
 8009ca2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ca4:	89fb      	ldrh	r3, [r7, #14]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cca:	2b40      	cmp	r3, #64	@ 0x40
 8009ccc:	d005      	beq.n	8009cda <USBD_StdDevReq+0x26>
 8009cce:	2b40      	cmp	r3, #64	@ 0x40
 8009cd0:	d857      	bhi.n	8009d82 <USBD_StdDevReq+0xce>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00f      	beq.n	8009cf6 <USBD_StdDevReq+0x42>
 8009cd6:	2b20      	cmp	r3, #32
 8009cd8:	d153      	bne.n	8009d82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	32ae      	adds	r2, #174	@ 0xae
 8009ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	4798      	blx	r3
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cf4:	e04a      	b.n	8009d8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	2b09      	cmp	r3, #9
 8009cfc:	d83b      	bhi.n	8009d76 <USBD_StdDevReq+0xc2>
 8009cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009d04 <USBD_StdDevReq+0x50>)
 8009d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d04:	08009d59 	.word	0x08009d59
 8009d08:	08009d6d 	.word	0x08009d6d
 8009d0c:	08009d77 	.word	0x08009d77
 8009d10:	08009d63 	.word	0x08009d63
 8009d14:	08009d77 	.word	0x08009d77
 8009d18:	08009d37 	.word	0x08009d37
 8009d1c:	08009d2d 	.word	0x08009d2d
 8009d20:	08009d77 	.word	0x08009d77
 8009d24:	08009d4f 	.word	0x08009d4f
 8009d28:	08009d41 	.word	0x08009d41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa3c 	bl	800a1ac <USBD_GetDescriptor>
          break;
 8009d34:	e024      	b.n	8009d80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d36:	6839      	ldr	r1, [r7, #0]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fbcb 	bl	800a4d4 <USBD_SetAddress>
          break;
 8009d3e:	e01f      	b.n	8009d80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fc0a 	bl	800a55c <USBD_SetConfig>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]
          break;
 8009d4c:	e018      	b.n	8009d80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fcad 	bl	800a6b0 <USBD_GetConfig>
          break;
 8009d56:	e013      	b.n	8009d80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fcde 	bl	800a71c <USBD_GetStatus>
          break;
 8009d60:	e00e      	b.n	8009d80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fd0d 	bl	800a784 <USBD_SetFeature>
          break;
 8009d6a:	e009      	b.n	8009d80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fd31 	bl	800a7d6 <USBD_ClrFeature>
          break;
 8009d74:	e004      	b.n	8009d80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fd88 	bl	800a88e <USBD_CtlError>
          break;
 8009d7e:	bf00      	nop
      }
      break;
 8009d80:	e004      	b.n	8009d8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fd82 	bl	800a88e <USBD_CtlError>
      break;
 8009d8a:	bf00      	nop
  }

  return ret;
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop

08009d98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dae:	2b40      	cmp	r3, #64	@ 0x40
 8009db0:	d005      	beq.n	8009dbe <USBD_StdItfReq+0x26>
 8009db2:	2b40      	cmp	r3, #64	@ 0x40
 8009db4:	d852      	bhi.n	8009e5c <USBD_StdItfReq+0xc4>
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <USBD_StdItfReq+0x26>
 8009dba:	2b20      	cmp	r3, #32
 8009dbc:	d14e      	bne.n	8009e5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d840      	bhi.n	8009e4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	889b      	ldrh	r3, [r3, #4]
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d836      	bhi.n	8009e44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	889b      	ldrh	r3, [r3, #4]
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff fedb 	bl	8009b9a <USBD_CoreFindIF>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	2bff      	cmp	r3, #255	@ 0xff
 8009dec:	d01d      	beq.n	8009e2a <USBD_StdItfReq+0x92>
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d11a      	bne.n	8009e2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009df4:	7bba      	ldrb	r2, [r7, #14]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	32ae      	adds	r2, #174	@ 0xae
 8009dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00f      	beq.n	8009e24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009e04:	7bba      	ldrb	r2, [r7, #14]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e0c:	7bba      	ldrb	r2, [r7, #14]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	32ae      	adds	r2, #174	@ 0xae
 8009e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009e22:	e004      	b.n	8009e2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009e24:	2303      	movs	r3, #3
 8009e26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009e28:	e001      	b.n	8009e2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	88db      	ldrh	r3, [r3, #6]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d110      	bne.n	8009e58 <USBD_StdItfReq+0xc0>
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10d      	bne.n	8009e58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fde0 	bl	800aa02 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e42:	e009      	b.n	8009e58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fd21 	bl	800a88e <USBD_CtlError>
          break;
 8009e4c:	e004      	b.n	8009e58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fd1c 	bl	800a88e <USBD_CtlError>
          break;
 8009e56:	e000      	b.n	8009e5a <USBD_StdItfReq+0xc2>
          break;
 8009e58:	bf00      	nop
      }
      break;
 8009e5a:	e004      	b.n	8009e66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fd15 	bl	800a88e <USBD_CtlError>
      break;
 8009e64:	bf00      	nop
  }

  return ret;
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	889b      	ldrh	r3, [r3, #4]
 8009e82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e8c:	2b40      	cmp	r3, #64	@ 0x40
 8009e8e:	d007      	beq.n	8009ea0 <USBD_StdEPReq+0x30>
 8009e90:	2b40      	cmp	r3, #64	@ 0x40
 8009e92:	f200 817f 	bhi.w	800a194 <USBD_StdEPReq+0x324>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d02a      	beq.n	8009ef0 <USBD_StdEPReq+0x80>
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	f040 817a 	bne.w	800a194 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff fe85 	bl	8009bb4 <USBD_CoreFindEP>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009eae:	7b7b      	ldrb	r3, [r7, #13]
 8009eb0:	2bff      	cmp	r3, #255	@ 0xff
 8009eb2:	f000 8174 	beq.w	800a19e <USBD_StdEPReq+0x32e>
 8009eb6:	7b7b      	ldrb	r3, [r7, #13]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f040 8170 	bne.w	800a19e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009ebe:	7b7a      	ldrb	r2, [r7, #13]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009ec6:	7b7a      	ldrb	r2, [r7, #13]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	32ae      	adds	r2, #174	@ 0xae
 8009ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 8163 	beq.w	800a19e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ed8:	7b7a      	ldrb	r2, [r7, #13]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	32ae      	adds	r2, #174	@ 0xae
 8009ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	4798      	blx	r3
 8009eea:	4603      	mov	r3, r0
 8009eec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009eee:	e156      	b.n	800a19e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d008      	beq.n	8009f0a <USBD_StdEPReq+0x9a>
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	f300 8145 	bgt.w	800a188 <USBD_StdEPReq+0x318>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 809b 	beq.w	800a03a <USBD_StdEPReq+0x1ca>
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d03c      	beq.n	8009f82 <USBD_StdEPReq+0x112>
 8009f08:	e13e      	b.n	800a188 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d002      	beq.n	8009f1c <USBD_StdEPReq+0xac>
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d016      	beq.n	8009f48 <USBD_StdEPReq+0xd8>
 8009f1a:	e02c      	b.n	8009f76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00d      	beq.n	8009f3e <USBD_StdEPReq+0xce>
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b80      	cmp	r3, #128	@ 0x80
 8009f26:	d00a      	beq.n	8009f3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f28:	7bbb      	ldrb	r3, [r7, #14]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 f93b 	bl	800b1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f32:	2180      	movs	r1, #128	@ 0x80
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 f937 	bl	800b1a8 <USBD_LL_StallEP>
 8009f3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f3c:	e020      	b.n	8009f80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009f3e:	6839      	ldr	r1, [r7, #0]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fca4 	bl	800a88e <USBD_CtlError>
              break;
 8009f46:	e01b      	b.n	8009f80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	885b      	ldrh	r3, [r3, #2]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10e      	bne.n	8009f6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00b      	beq.n	8009f6e <USBD_StdEPReq+0xfe>
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
 8009f58:	2b80      	cmp	r3, #128	@ 0x80
 8009f5a:	d008      	beq.n	8009f6e <USBD_StdEPReq+0xfe>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	88db      	ldrh	r3, [r3, #6]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d104      	bne.n	8009f6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 f91d 	bl	800b1a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fd47 	bl	800aa02 <USBD_CtlSendStatus>

              break;
 8009f74:	e004      	b.n	8009f80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fc88 	bl	800a88e <USBD_CtlError>
              break;
 8009f7e:	bf00      	nop
          }
          break;
 8009f80:	e107      	b.n	800a192 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d002      	beq.n	8009f94 <USBD_StdEPReq+0x124>
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d016      	beq.n	8009fc0 <USBD_StdEPReq+0x150>
 8009f92:	e04b      	b.n	800a02c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00d      	beq.n	8009fb6 <USBD_StdEPReq+0x146>
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	2b80      	cmp	r3, #128	@ 0x80
 8009f9e:	d00a      	beq.n	8009fb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 f8ff 	bl	800b1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009faa:	2180      	movs	r1, #128	@ 0x80
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 f8fb 	bl	800b1a8 <USBD_LL_StallEP>
 8009fb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fb4:	e040      	b.n	800a038 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fc68 	bl	800a88e <USBD_CtlError>
              break;
 8009fbe:	e03b      	b.n	800a038 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	885b      	ldrh	r3, [r3, #2]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d136      	bne.n	800a036 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d004      	beq.n	8009fdc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f001 f905 	bl	800b1e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fd10 	bl	800aa02 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff fde4 	bl	8009bb4 <USBD_CoreFindEP>
 8009fec:	4603      	mov	r3, r0
 8009fee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ff0:	7b7b      	ldrb	r3, [r7, #13]
 8009ff2:	2bff      	cmp	r3, #255	@ 0xff
 8009ff4:	d01f      	beq.n	800a036 <USBD_StdEPReq+0x1c6>
 8009ff6:	7b7b      	ldrb	r3, [r7, #13]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d11c      	bne.n	800a036 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ffc:	7b7a      	ldrb	r2, [r7, #13]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a004:	7b7a      	ldrb	r2, [r7, #13]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	32ae      	adds	r2, #174	@ 0xae
 800a00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d010      	beq.n	800a036 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a014:	7b7a      	ldrb	r2, [r7, #13]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	32ae      	adds	r2, #174	@ 0xae
 800a01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
 800a026:	4603      	mov	r3, r0
 800a028:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a02a:	e004      	b.n	800a036 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fc2d 	bl	800a88e <USBD_CtlError>
              break;
 800a034:	e000      	b.n	800a038 <USBD_StdEPReq+0x1c8>
              break;
 800a036:	bf00      	nop
          }
          break;
 800a038:	e0ab      	b.n	800a192 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b02      	cmp	r3, #2
 800a044:	d002      	beq.n	800a04c <USBD_StdEPReq+0x1dc>
 800a046:	2b03      	cmp	r3, #3
 800a048:	d032      	beq.n	800a0b0 <USBD_StdEPReq+0x240>
 800a04a:	e097      	b.n	800a17c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d007      	beq.n	800a062 <USBD_StdEPReq+0x1f2>
 800a052:	7bbb      	ldrb	r3, [r7, #14]
 800a054:	2b80      	cmp	r3, #128	@ 0x80
 800a056:	d004      	beq.n	800a062 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fc17 	bl	800a88e <USBD_CtlError>
                break;
 800a060:	e091      	b.n	800a186 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a066:	2b00      	cmp	r3, #0
 800a068:	da0b      	bge.n	800a082 <USBD_StdEPReq+0x212>
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	3310      	adds	r3, #16
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	4413      	add	r3, r2
 800a07e:	3304      	adds	r3, #4
 800a080:	e00b      	b.n	800a09a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a082:	7bbb      	ldrb	r3, [r7, #14]
 800a084:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	4413      	add	r3, r2
 800a098:	3304      	adds	r3, #4
 800a09a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fc6d 	bl	800a988 <USBD_CtlSendData>
              break;
 800a0ae:	e06a      	b.n	800a186 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da11      	bge.n	800a0dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	f003 020f 	and.w	r2, r3, #15
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	440b      	add	r3, r1
 800a0ca:	3324      	adds	r3, #36	@ 0x24
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d117      	bne.n	800a102 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fbda 	bl	800a88e <USBD_CtlError>
                  break;
 800a0da:	e054      	b.n	800a186 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	f003 020f 	and.w	r2, r3, #15
 800a0e2:	6879      	ldr	r1, [r7, #4]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d104      	bne.n	800a102 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fbc7 	bl	800a88e <USBD_CtlError>
                  break;
 800a100:	e041      	b.n	800a186 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a106:	2b00      	cmp	r3, #0
 800a108:	da0b      	bge.n	800a122 <USBD_StdEPReq+0x2b2>
 800a10a:	7bbb      	ldrb	r3, [r7, #14]
 800a10c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a110:	4613      	mov	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	3310      	adds	r3, #16
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	4413      	add	r3, r2
 800a11e:	3304      	adds	r3, #4
 800a120:	e00b      	b.n	800a13a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a122:	7bbb      	ldrb	r3, [r7, #14]
 800a124:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a128:	4613      	mov	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	4413      	add	r3, r2
 800a138:	3304      	adds	r3, #4
 800a13a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <USBD_StdEPReq+0x2d8>
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	2b80      	cmp	r3, #128	@ 0x80
 800a146:	d103      	bne.n	800a150 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e00e      	b.n	800a16e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a150:	7bbb      	ldrb	r3, [r7, #14]
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 f865 	bl	800b224 <USBD_LL_IsStallEP>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d003      	beq.n	800a168 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2201      	movs	r2, #1
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	e002      	b.n	800a16e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2200      	movs	r2, #0
 800a16c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2202      	movs	r2, #2
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fc07 	bl	800a988 <USBD_CtlSendData>
              break;
 800a17a:	e004      	b.n	800a186 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fb85 	bl	800a88e <USBD_CtlError>
              break;
 800a184:	bf00      	nop
          }
          break;
 800a186:	e004      	b.n	800a192 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fb7f 	bl	800a88e <USBD_CtlError>
          break;
 800a190:	bf00      	nop
      }
      break;
 800a192:	e005      	b.n	800a1a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fb79 	bl	800a88e <USBD_CtlError>
      break;
 800a19c:	e000      	b.n	800a1a0 <USBD_StdEPReq+0x330>
      break;
 800a19e:	bf00      	nop
  }

  return ret;
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
	...

0800a1ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	885b      	ldrh	r3, [r3, #2]
 800a1c6:	0a1b      	lsrs	r3, r3, #8
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	2b0e      	cmp	r3, #14
 800a1ce:	f200 8152 	bhi.w	800a476 <USBD_GetDescriptor+0x2ca>
 800a1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d8 <USBD_GetDescriptor+0x2c>)
 800a1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d8:	0800a249 	.word	0x0800a249
 800a1dc:	0800a261 	.word	0x0800a261
 800a1e0:	0800a2a1 	.word	0x0800a2a1
 800a1e4:	0800a477 	.word	0x0800a477
 800a1e8:	0800a477 	.word	0x0800a477
 800a1ec:	0800a417 	.word	0x0800a417
 800a1f0:	0800a443 	.word	0x0800a443
 800a1f4:	0800a477 	.word	0x0800a477
 800a1f8:	0800a477 	.word	0x0800a477
 800a1fc:	0800a477 	.word	0x0800a477
 800a200:	0800a477 	.word	0x0800a477
 800a204:	0800a477 	.word	0x0800a477
 800a208:	0800a477 	.word	0x0800a477
 800a20c:	0800a477 	.word	0x0800a477
 800a210:	0800a215 	.word	0x0800a215
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	7c12      	ldrb	r2, [r2, #16]
 800a22c:	f107 0108 	add.w	r1, r7, #8
 800a230:	4610      	mov	r0, r2
 800a232:	4798      	blx	r3
 800a234:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a236:	e126      	b.n	800a486 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fb27 	bl	800a88e <USBD_CtlError>
        err++;
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	3301      	adds	r3, #1
 800a244:	72fb      	strb	r3, [r7, #11]
      break;
 800a246:	e11e      	b.n	800a486 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	7c12      	ldrb	r2, [r2, #16]
 800a254:	f107 0108 	add.w	r1, r7, #8
 800a258:	4610      	mov	r0, r2
 800a25a:	4798      	blx	r3
 800a25c:	60f8      	str	r0, [r7, #12]
      break;
 800a25e:	e112      	b.n	800a486 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	7c1b      	ldrb	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10d      	bne.n	800a284 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a270:	f107 0208 	add.w	r2, r7, #8
 800a274:	4610      	mov	r0, r2
 800a276:	4798      	blx	r3
 800a278:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	2202      	movs	r2, #2
 800a280:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a282:	e100      	b.n	800a486 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28c:	f107 0208 	add.w	r2, r7, #8
 800a290:	4610      	mov	r0, r2
 800a292:	4798      	blx	r3
 800a294:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3301      	adds	r3, #1
 800a29a:	2202      	movs	r2, #2
 800a29c:	701a      	strb	r2, [r3, #0]
      break;
 800a29e:	e0f2      	b.n	800a486 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	885b      	ldrh	r3, [r3, #2]
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b05      	cmp	r3, #5
 800a2a8:	f200 80ac 	bhi.w	800a404 <USBD_GetDescriptor+0x258>
 800a2ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b4 <USBD_GetDescriptor+0x108>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a2cd 	.word	0x0800a2cd
 800a2b8:	0800a301 	.word	0x0800a301
 800a2bc:	0800a335 	.word	0x0800a335
 800a2c0:	0800a369 	.word	0x0800a369
 800a2c4:	0800a39d 	.word	0x0800a39d
 800a2c8:	0800a3d1 	.word	0x0800a3d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	7c12      	ldrb	r2, [r2, #16]
 800a2e4:	f107 0108 	add.w	r1, r7, #8
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3
 800a2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ee:	e091      	b.n	800a414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 facb 	bl	800a88e <USBD_CtlError>
            err++;
 800a2f8:	7afb      	ldrb	r3, [r7, #11]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2fe:	e089      	b.n	800a414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00b      	beq.n	800a324 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	7c12      	ldrb	r2, [r2, #16]
 800a318:	f107 0108 	add.w	r1, r7, #8
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
 800a320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a322:	e077      	b.n	800a414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fab1 	bl	800a88e <USBD_CtlError>
            err++;
 800a32c:	7afb      	ldrb	r3, [r7, #11]
 800a32e:	3301      	adds	r3, #1
 800a330:	72fb      	strb	r3, [r7, #11]
          break;
 800a332:	e06f      	b.n	800a414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	7c12      	ldrb	r2, [r2, #16]
 800a34c:	f107 0108 	add.w	r1, r7, #8
 800a350:	4610      	mov	r0, r2
 800a352:	4798      	blx	r3
 800a354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a356:	e05d      	b.n	800a414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fa97 	bl	800a88e <USBD_CtlError>
            err++;
 800a360:	7afb      	ldrb	r3, [r7, #11]
 800a362:	3301      	adds	r3, #1
 800a364:	72fb      	strb	r3, [r7, #11]
          break;
 800a366:	e055      	b.n	800a414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00b      	beq.n	800a38c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	7c12      	ldrb	r2, [r2, #16]
 800a380:	f107 0108 	add.w	r1, r7, #8
 800a384:	4610      	mov	r0, r2
 800a386:	4798      	blx	r3
 800a388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a38a:	e043      	b.n	800a414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fa7d 	bl	800a88e <USBD_CtlError>
            err++;
 800a394:	7afb      	ldrb	r3, [r7, #11]
 800a396:	3301      	adds	r3, #1
 800a398:	72fb      	strb	r3, [r7, #11]
          break;
 800a39a:	e03b      	b.n	800a414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00b      	beq.n	800a3c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	7c12      	ldrb	r2, [r2, #16]
 800a3b4:	f107 0108 	add.w	r1, r7, #8
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4798      	blx	r3
 800a3bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3be:	e029      	b.n	800a414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fa63 	bl	800a88e <USBD_CtlError>
            err++;
 800a3c8:	7afb      	ldrb	r3, [r7, #11]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a3ce:	e021      	b.n	800a414 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00b      	beq.n	800a3f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	7c12      	ldrb	r2, [r2, #16]
 800a3e8:	f107 0108 	add.w	r1, r7, #8
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	4798      	blx	r3
 800a3f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3f2:	e00f      	b.n	800a414 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fa49 	bl	800a88e <USBD_CtlError>
            err++;
 800a3fc:	7afb      	ldrb	r3, [r7, #11]
 800a3fe:	3301      	adds	r3, #1
 800a400:	72fb      	strb	r3, [r7, #11]
          break;
 800a402:	e007      	b.n	800a414 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fa41 	bl	800a88e <USBD_CtlError>
          err++;
 800a40c:	7afb      	ldrb	r3, [r7, #11]
 800a40e:	3301      	adds	r3, #1
 800a410:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a412:	bf00      	nop
      }
      break;
 800a414:	e037      	b.n	800a486 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	7c1b      	ldrb	r3, [r3, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d109      	bne.n	800a432 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a426:	f107 0208 	add.w	r2, r7, #8
 800a42a:	4610      	mov	r0, r2
 800a42c:	4798      	blx	r3
 800a42e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a430:	e029      	b.n	800a486 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fa2a 	bl	800a88e <USBD_CtlError>
        err++;
 800a43a:	7afb      	ldrb	r3, [r7, #11]
 800a43c:	3301      	adds	r3, #1
 800a43e:	72fb      	strb	r3, [r7, #11]
      break;
 800a440:	e021      	b.n	800a486 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	7c1b      	ldrb	r3, [r3, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10d      	bne.n	800a466 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a452:	f107 0208 	add.w	r2, r7, #8
 800a456:	4610      	mov	r0, r2
 800a458:	4798      	blx	r3
 800a45a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3301      	adds	r3, #1
 800a460:	2207      	movs	r2, #7
 800a462:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a464:	e00f      	b.n	800a486 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fa10 	bl	800a88e <USBD_CtlError>
        err++;
 800a46e:	7afb      	ldrb	r3, [r7, #11]
 800a470:	3301      	adds	r3, #1
 800a472:	72fb      	strb	r3, [r7, #11]
      break;
 800a474:	e007      	b.n	800a486 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fa08 	bl	800a88e <USBD_CtlError>
      err++;
 800a47e:	7afb      	ldrb	r3, [r7, #11]
 800a480:	3301      	adds	r3, #1
 800a482:	72fb      	strb	r3, [r7, #11]
      break;
 800a484:	bf00      	nop
  }

  if (err != 0U)
 800a486:	7afb      	ldrb	r3, [r7, #11]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d11e      	bne.n	800a4ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	88db      	ldrh	r3, [r3, #6]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d016      	beq.n	800a4c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a494:	893b      	ldrh	r3, [r7, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00e      	beq.n	800a4b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	88da      	ldrh	r2, [r3, #6]
 800a49e:	893b      	ldrh	r3, [r7, #8]
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	bf28      	it	cs
 800a4a4:	4613      	movcs	r3, r2
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a4aa:	893b      	ldrh	r3, [r7, #8]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	68f9      	ldr	r1, [r7, #12]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fa69 	bl	800a988 <USBD_CtlSendData>
 800a4b6:	e009      	b.n	800a4cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f9e7 	bl	800a88e <USBD_CtlError>
 800a4c0:	e004      	b.n	800a4cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa9d 	bl	800aa02 <USBD_CtlSendStatus>
 800a4c8:	e000      	b.n	800a4cc <USBD_GetDescriptor+0x320>
    return;
 800a4ca:	bf00      	nop
  }
}
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop

0800a4d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	889b      	ldrh	r3, [r3, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d131      	bne.n	800a54a <USBD_SetAddress+0x76>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	88db      	ldrh	r3, [r3, #6]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d12d      	bne.n	800a54a <USBD_SetAddress+0x76>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	885b      	ldrh	r3, [r3, #2]
 800a4f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4f4:	d829      	bhi.n	800a54a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	885b      	ldrh	r3, [r3, #2]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a500:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d104      	bne.n	800a518 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f9bc 	bl	800a88e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a516:	e01d      	b.n	800a554 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	7bfa      	ldrb	r2, [r7, #15]
 800a51c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fea9 	bl	800b27c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fa69 	bl	800aa02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a530:	7bfb      	ldrb	r3, [r7, #15]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d004      	beq.n	800a540 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2202      	movs	r2, #2
 800a53a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a53e:	e009      	b.n	800a554 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a548:	e004      	b.n	800a554 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f99e 	bl	800a88e <USBD_CtlError>
  }
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	885b      	ldrh	r3, [r3, #2]
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	4b4e      	ldr	r3, [pc, #312]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a572:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a574:	4b4d      	ldr	r3, [pc, #308]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d905      	bls.n	800a588 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f985 	bl	800a88e <USBD_CtlError>
    return USBD_FAIL;
 800a584:	2303      	movs	r3, #3
 800a586:	e08c      	b.n	800a6a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	2b02      	cmp	r3, #2
 800a592:	d002      	beq.n	800a59a <USBD_SetConfig+0x3e>
 800a594:	2b03      	cmp	r3, #3
 800a596:	d029      	beq.n	800a5ec <USBD_SetConfig+0x90>
 800a598:	e075      	b.n	800a686 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a59a:	4b44      	ldr	r3, [pc, #272]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d020      	beq.n	800a5e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a5a2:	4b42      	ldr	r3, [pc, #264]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5ac:	4b3f      	ldr	r3, [pc, #252]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7fe ffb9 	bl	800952a <USBD_SetClassConfig>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d008      	beq.n	800a5d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f962 	bl	800a88e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a5d2:	e065      	b.n	800a6a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fa14 	bl	800aa02 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2203      	movs	r2, #3
 800a5de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a5e2:	e05d      	b.n	800a6a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fa0c 	bl	800aa02 <USBD_CtlSendStatus>
      break;
 800a5ea:	e059      	b.n	800a6a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a5ec:	4b2f      	ldr	r3, [pc, #188]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d112      	bne.n	800a61a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a5fc:	4b2b      	ldr	r3, [pc, #172]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a606:	4b29      	ldr	r3, [pc, #164]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7fe ffa8 	bl	8009562 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f9f5 	bl	800aa02 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a618:	e042      	b.n	800a6a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a61a:	4b24      	ldr	r3, [pc, #144]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	429a      	cmp	r2, r3
 800a626:	d02a      	beq.n	800a67e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	4619      	mov	r1, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7fe ff96 	bl	8009562 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a636:	4b1d      	ldr	r3, [pc, #116]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a640:	4b1a      	ldr	r3, [pc, #104]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7fe ff6f 	bl	800952a <USBD_SetClassConfig>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00f      	beq.n	800a676 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f918 	bl	800a88e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	b2db      	uxtb	r3, r3
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7fe ff7b 	bl	8009562 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2202      	movs	r2, #2
 800a670:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a674:	e014      	b.n	800a6a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f9c3 	bl	800aa02 <USBD_CtlSendStatus>
      break;
 800a67c:	e010      	b.n	800a6a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f9bf 	bl	800aa02 <USBD_CtlSendStatus>
      break;
 800a684:	e00c      	b.n	800a6a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f900 	bl	800a88e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a68e:	4b07      	ldr	r3, [pc, #28]	@ (800a6ac <USBD_SetConfig+0x150>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7fe ff64 	bl	8009562 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a69a:	2303      	movs	r3, #3
 800a69c:	73fb      	strb	r3, [r7, #15]
      break;
 800a69e:	bf00      	nop
  }

  return ret;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	240007b0 	.word	0x240007b0

0800a6b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	88db      	ldrh	r3, [r3, #6]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d004      	beq.n	800a6cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f8e2 	bl	800a88e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a6ca:	e023      	b.n	800a714 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	dc02      	bgt.n	800a6de <USBD_GetConfig+0x2e>
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dc03      	bgt.n	800a6e4 <USBD_GetConfig+0x34>
 800a6dc:	e015      	b.n	800a70a <USBD_GetConfig+0x5a>
 800a6de:	2b03      	cmp	r3, #3
 800a6e0:	d00b      	beq.n	800a6fa <USBD_GetConfig+0x4a>
 800a6e2:	e012      	b.n	800a70a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f948 	bl	800a988 <USBD_CtlSendData>
        break;
 800a6f8:	e00c      	b.n	800a714 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	2201      	movs	r2, #1
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f940 	bl	800a988 <USBD_CtlSendData>
        break;
 800a708:	e004      	b.n	800a714 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f8be 	bl	800a88e <USBD_CtlError>
        break;
 800a712:	bf00      	nop
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	3b01      	subs	r3, #1
 800a730:	2b02      	cmp	r3, #2
 800a732:	d81e      	bhi.n	800a772 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	88db      	ldrh	r3, [r3, #6]
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d004      	beq.n	800a746 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f8a5 	bl	800a88e <USBD_CtlError>
        break;
 800a744:	e01a      	b.n	800a77c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a752:	2b00      	cmp	r3, #0
 800a754:	d005      	beq.n	800a762 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	f043 0202 	orr.w	r2, r3, #2
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	330c      	adds	r3, #12
 800a766:	2202      	movs	r2, #2
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f90c 	bl	800a988 <USBD_CtlSendData>
      break;
 800a770:	e004      	b.n	800a77c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f88a 	bl	800a88e <USBD_CtlError>
      break;
 800a77a:	bf00      	nop
  }
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	885b      	ldrh	r3, [r3, #2]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d107      	bne.n	800a7a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f92f 	bl	800aa02 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a7a4:	e013      	b.n	800a7ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	885b      	ldrh	r3, [r3, #2]
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d10b      	bne.n	800a7c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	889b      	ldrh	r3, [r3, #4]
 800a7b2:	0a1b      	lsrs	r3, r3, #8
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f91f 	bl	800aa02 <USBD_CtlSendStatus>
}
 800a7c4:	e003      	b.n	800a7ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f860 	bl	800a88e <USBD_CtlError>
}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d80b      	bhi.n	800a806 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	885b      	ldrh	r3, [r3, #2]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d10c      	bne.n	800a810 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f8ff 	bl	800aa02 <USBD_CtlSendStatus>
      }
      break;
 800a804:	e004      	b.n	800a810 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f840 	bl	800a88e <USBD_CtlError>
      break;
 800a80e:	e000      	b.n	800a812 <USBD_ClrFeature+0x3c>
      break;
 800a810:	bf00      	nop
  }
}
 800a812:	bf00      	nop
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	781a      	ldrb	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	3301      	adds	r3, #1
 800a834:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	781a      	ldrb	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3301      	adds	r3, #1
 800a842:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f7ff fa16 	bl	8009c76 <SWAPBYTE>
 800a84a:	4603      	mov	r3, r0
 800a84c:	461a      	mov	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3301      	adds	r3, #1
 800a856:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3301      	adds	r3, #1
 800a85c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7ff fa09 	bl	8009c76 <SWAPBYTE>
 800a864:	4603      	mov	r3, r0
 800a866:	461a      	mov	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3301      	adds	r3, #1
 800a870:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3301      	adds	r3, #1
 800a876:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f7ff f9fc 	bl	8009c76 <SWAPBYTE>
 800a87e:	4603      	mov	r3, r0
 800a880:	461a      	mov	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	80da      	strh	r2, [r3, #6]
}
 800a886:	bf00      	nop
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a898:	2180      	movs	r1, #128	@ 0x80
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fc84 	bl	800b1a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fc80 	bl	800b1a8 <USBD_LL_StallEP>
}
 800a8a8:	bf00      	nop
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d042      	beq.n	800a94c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a8ca:	6938      	ldr	r0, [r7, #16]
 800a8cc:	f000 f842 	bl	800a954 <USBD_GetLen>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8da:	d808      	bhi.n	800a8ee <USBD_GetString+0x3e>
 800a8dc:	6938      	ldr	r0, [r7, #16]
 800a8de:	f000 f839 	bl	800a954 <USBD_GetLen>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	005b      	lsls	r3, r3, #1
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	e001      	b.n	800a8f2 <USBD_GetString+0x42>
 800a8ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	7812      	ldrb	r2, [r2, #0]
 800a900:	701a      	strb	r2, [r3, #0]
  idx++;
 800a902:	7dfb      	ldrb	r3, [r7, #23]
 800a904:	3301      	adds	r3, #1
 800a906:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a908:	7dfb      	ldrb	r3, [r7, #23]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	4413      	add	r3, r2
 800a90e:	2203      	movs	r2, #3
 800a910:	701a      	strb	r2, [r3, #0]
  idx++;
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	3301      	adds	r3, #1
 800a916:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a918:	e013      	b.n	800a942 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	4413      	add	r3, r2
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	7812      	ldrb	r2, [r2, #0]
 800a924:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	3301      	adds	r3, #1
 800a92a:	613b      	str	r3, [r7, #16]
    idx++;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	3301      	adds	r3, #1
 800a930:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	4413      	add	r3, r2
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a93c:	7dfb      	ldrb	r3, [r7, #23]
 800a93e:	3301      	adds	r3, #1
 800a940:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e7      	bne.n	800a91a <USBD_GetString+0x6a>
 800a94a:	e000      	b.n	800a94e <USBD_GetString+0x9e>
    return;
 800a94c:	bf00      	nop
  }
}
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a964:	e005      	b.n	800a972 <USBD_GetLen+0x1e>
  {
    len++;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	3301      	adds	r3, #1
 800a96a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	3301      	adds	r3, #1
 800a970:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1f5      	bne.n	800a966 <USBD_GetLen+0x12>
  }

  return len;
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2202      	movs	r2, #2
 800a998:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f000 fc83 	bl	800b2ba <USBD_LL_Transmit>

  return USBD_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fc72 	bl	800b2ba <USBD_LL_Transmit>

  return USBD_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 fc82 	bl	800b2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b082      	sub	sp, #8
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2204      	movs	r2, #4
 800aa0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aa12:	2300      	movs	r3, #0
 800aa14:	2200      	movs	r2, #0
 800aa16:	2100      	movs	r1, #0
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fc4e 	bl	800b2ba <USBD_LL_Transmit>

  return USBD_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2205      	movs	r2, #5
 800aa34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa38:	2300      	movs	r3, #0
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fc5c 	bl	800b2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800aa54:	2201      	movs	r2, #1
 800aa56:	490f      	ldr	r1, [pc, #60]	@ (800aa94 <MX_USB_DEVICE_Init+0x44>)
 800aa58:	480f      	ldr	r0, [pc, #60]	@ (800aa98 <MX_USB_DEVICE_Init+0x48>)
 800aa5a:	f7fe fce9 	bl	8009430 <USBD_Init>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa64:	f7f6 ff18 	bl	8001898 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800aa68:	490c      	ldr	r1, [pc, #48]	@ (800aa9c <MX_USB_DEVICE_Init+0x4c>)
 800aa6a:	480b      	ldr	r0, [pc, #44]	@ (800aa98 <MX_USB_DEVICE_Init+0x48>)
 800aa6c:	f7fe fd10 	bl	8009490 <USBD_RegisterClass>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa76:	f7f6 ff0f 	bl	8001898 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800aa7a:	4807      	ldr	r0, [pc, #28]	@ (800aa98 <MX_USB_DEVICE_Init+0x48>)
 800aa7c:	f7fe fd3e 	bl	80094fc <USBD_Start>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800aa86:	f7f6 ff07 	bl	8001898 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800aa8a:	f7f8 ff79 	bl	8003980 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa8e:	bf00      	nop
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	24000274 	.word	0x24000274
 800aa98:	240007b4 	.word	0x240007b4
 800aa9c:	240001c0 	.word	0x240001c0

0800aaa0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	6039      	str	r1, [r7, #0]
 800aaaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2212      	movs	r2, #18
 800aab0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800aab2:	4b03      	ldr	r3, [pc, #12]	@ (800aac0 <USBD_HS_DeviceDescriptor+0x20>)
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	24000294 	.word	0x24000294

0800aac4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	4603      	mov	r3, r0
 800aacc:	6039      	str	r1, [r7, #0]
 800aace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2204      	movs	r2, #4
 800aad4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aad6:	4b03      	ldr	r3, [pc, #12]	@ (800aae4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800aad8:	4618      	mov	r0, r3
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	240002a8 	.word	0x240002a8

0800aae8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	4603      	mov	r3, r0
 800aaf0:	6039      	str	r1, [r7, #0]
 800aaf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d105      	bne.n	800ab06 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4907      	ldr	r1, [pc, #28]	@ (800ab1c <USBD_HS_ProductStrDescriptor+0x34>)
 800aafe:	4808      	ldr	r0, [pc, #32]	@ (800ab20 <USBD_HS_ProductStrDescriptor+0x38>)
 800ab00:	f7ff fed6 	bl	800a8b0 <USBD_GetString>
 800ab04:	e004      	b.n	800ab10 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	4904      	ldr	r1, [pc, #16]	@ (800ab1c <USBD_HS_ProductStrDescriptor+0x34>)
 800ab0a:	4805      	ldr	r0, [pc, #20]	@ (800ab20 <USBD_HS_ProductStrDescriptor+0x38>)
 800ab0c:	f7ff fed0 	bl	800a8b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab10:	4b02      	ldr	r3, [pc, #8]	@ (800ab1c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	24000a90 	.word	0x24000a90
 800ab20:	0800be7c 	.word	0x0800be7c

0800ab24 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	6039      	str	r1, [r7, #0]
 800ab2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	4904      	ldr	r1, [pc, #16]	@ (800ab44 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ab34:	4804      	ldr	r0, [pc, #16]	@ (800ab48 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ab36:	f7ff febb 	bl	800a8b0 <USBD_GetString>
  return USBD_StrDesc;
 800ab3a:	4b02      	ldr	r3, [pc, #8]	@ (800ab44 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	24000a90 	.word	0x24000a90
 800ab48:	0800be94 	.word	0x0800be94

0800ab4c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	6039      	str	r1, [r7, #0]
 800ab56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	221a      	movs	r2, #26
 800ab5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab5e:	f000 f843 	bl	800abe8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ab62:	4b02      	ldr	r3, [pc, #8]	@ (800ab6c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	240002ac 	.word	0x240002ac

0800ab70 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	6039      	str	r1, [r7, #0]
 800ab7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab7c:	79fb      	ldrb	r3, [r7, #7]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d105      	bne.n	800ab8e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	4907      	ldr	r1, [pc, #28]	@ (800aba4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ab86:	4808      	ldr	r0, [pc, #32]	@ (800aba8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ab88:	f7ff fe92 	bl	800a8b0 <USBD_GetString>
 800ab8c:	e004      	b.n	800ab98 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	4904      	ldr	r1, [pc, #16]	@ (800aba4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ab92:	4805      	ldr	r0, [pc, #20]	@ (800aba8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ab94:	f7ff fe8c 	bl	800a8b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab98:	4b02      	ldr	r3, [pc, #8]	@ (800aba4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	24000a90 	.word	0x24000a90
 800aba8:	0800bea8 	.word	0x0800bea8

0800abac <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	6039      	str	r1, [r7, #0]
 800abb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abb8:	79fb      	ldrb	r3, [r7, #7]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d105      	bne.n	800abca <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	4907      	ldr	r1, [pc, #28]	@ (800abe0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800abc2:	4808      	ldr	r0, [pc, #32]	@ (800abe4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800abc4:	f7ff fe74 	bl	800a8b0 <USBD_GetString>
 800abc8:	e004      	b.n	800abd4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	4904      	ldr	r1, [pc, #16]	@ (800abe0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800abce:	4805      	ldr	r0, [pc, #20]	@ (800abe4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800abd0:	f7ff fe6e 	bl	800a8b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abd4:	4b02      	ldr	r3, [pc, #8]	@ (800abe0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	24000a90 	.word	0x24000a90
 800abe4:	0800beb4 	.word	0x0800beb4

0800abe8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abee:	4b0f      	ldr	r3, [pc, #60]	@ (800ac2c <Get_SerialNum+0x44>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abf4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac30 <Get_SerialNum+0x48>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abfa:	4b0e      	ldr	r3, [pc, #56]	@ (800ac34 <Get_SerialNum+0x4c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4413      	add	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d009      	beq.n	800ac22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac0e:	2208      	movs	r2, #8
 800ac10:	4909      	ldr	r1, [pc, #36]	@ (800ac38 <Get_SerialNum+0x50>)
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f000 f814 	bl	800ac40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac18:	2204      	movs	r2, #4
 800ac1a:	4908      	ldr	r1, [pc, #32]	@ (800ac3c <Get_SerialNum+0x54>)
 800ac1c:	68b8      	ldr	r0, [r7, #8]
 800ac1e:	f000 f80f 	bl	800ac40 <IntToUnicode>
  }
}
 800ac22:	bf00      	nop
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	1ff1e800 	.word	0x1ff1e800
 800ac30:	1ff1e804 	.word	0x1ff1e804
 800ac34:	1ff1e808 	.word	0x1ff1e808
 800ac38:	240002ae 	.word	0x240002ae
 800ac3c:	240002be 	.word	0x240002be

0800ac40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b087      	sub	sp, #28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac52:	2300      	movs	r3, #0
 800ac54:	75fb      	strb	r3, [r7, #23]
 800ac56:	e027      	b.n	800aca8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	0f1b      	lsrs	r3, r3, #28
 800ac5c:	2b09      	cmp	r3, #9
 800ac5e:	d80b      	bhi.n	800ac78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	0f1b      	lsrs	r3, r3, #28
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
 800ac68:	005b      	lsls	r3, r3, #1
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	440b      	add	r3, r1
 800ac70:	3230      	adds	r2, #48	@ 0x30
 800ac72:	b2d2      	uxtb	r2, r2
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	e00a      	b.n	800ac8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	0f1b      	lsrs	r3, r3, #28
 800ac7c:	b2da      	uxtb	r2, r3
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	005b      	lsls	r3, r3, #1
 800ac82:	4619      	mov	r1, r3
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	440b      	add	r3, r1
 800ac88:	3237      	adds	r2, #55	@ 0x37
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	011b      	lsls	r3, r3, #4
 800ac92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	3301      	adds	r3, #1
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	2200      	movs	r2, #0
 800aca0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	3301      	adds	r3, #1
 800aca6:	75fb      	strb	r3, [r7, #23]
 800aca8:	7dfa      	ldrb	r2, [r7, #23]
 800acaa:	79fb      	ldrb	r3, [r7, #7]
 800acac:	429a      	cmp	r2, r3
 800acae:	d3d3      	bcc.n	800ac58 <IntToUnicode+0x18>
  }
}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	371c      	adds	r7, #28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
	...

0800acc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b0bc      	sub	sp, #240	@ 0xf0
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	605a      	str	r2, [r3, #4]
 800acd2:	609a      	str	r2, [r3, #8]
 800acd4:	60da      	str	r2, [r3, #12]
 800acd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800acd8:	f107 0320 	add.w	r3, r7, #32
 800acdc:	22b8      	movs	r2, #184	@ 0xb8
 800acde:	2100      	movs	r1, #0
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fb91 	bl	800b408 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a58      	ldr	r2, [pc, #352]	@ (800ae4c <HAL_PCD_MspInit+0x18c>)
 800acec:	4293      	cmp	r3, r2
 800acee:	f040 80a9 	bne.w	800ae44 <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800acf2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800acf6:	f04f 0300 	mov.w	r3, #0
 800acfa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800acfe:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800ad02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad06:	f107 0320 	add.w	r3, r7, #32
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7f9 fdae 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800ad16:	f7f6 fdbf 	bl	8001898 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ad1a:	f7f8 fe31 	bl	8003980 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad1e:	4b4c      	ldr	r3, [pc, #304]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ad20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad24:	4a4a      	ldr	r2, [pc, #296]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ad26:	f043 0304 	orr.w	r3, r3, #4
 800ad2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ad2e:	4b48      	ldr	r3, [pc, #288]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ad30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad34:	f003 0304 	and.w	r3, r3, #4
 800ad38:	61fb      	str	r3, [r7, #28]
 800ad3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad3c:	4b44      	ldr	r3, [pc, #272]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ad3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad42:	4a43      	ldr	r2, [pc, #268]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ad4c:	4b40      	ldr	r3, [pc, #256]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ad4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	61bb      	str	r3, [r7, #24]
 800ad58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad5a:	4b3d      	ldr	r3, [pc, #244]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ad5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad60:	4a3b      	ldr	r2, [pc, #236]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ad62:	f043 0302 	orr.w	r3, r3, #2
 800ad66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ad6a:	4b39      	ldr	r3, [pc, #228]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ad6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad70:	f003 0302 	and.w	r3, r3, #2
 800ad74:	617b      	str	r3, [r7, #20]
 800ad76:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800ad78:	230d      	movs	r3, #13
 800ad7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad84:	2300      	movs	r3, #0
 800ad86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800ad90:	230a      	movs	r3, #10
 800ad92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad96:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	482d      	ldr	r0, [pc, #180]	@ (800ae54 <HAL_PCD_MspInit+0x194>)
 800ad9e:	f7f7 f985 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800ada2:	2328      	movs	r3, #40	@ 0x28
 800ada4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ada8:	2302      	movs	r3, #2
 800adaa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800adb4:	2302      	movs	r3, #2
 800adb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800adba:	230a      	movs	r3, #10
 800adbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adc0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800adc4:	4619      	mov	r1, r3
 800adc6:	4824      	ldr	r0, [pc, #144]	@ (800ae58 <HAL_PCD_MspInit+0x198>)
 800adc8:	f7f7 f970 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800adcc:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800add0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add4:	2302      	movs	r3, #2
 800add6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adda:	2300      	movs	r3, #0
 800addc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ade0:	2302      	movs	r3, #2
 800ade2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800ade6:	230a      	movs	r3, #10
 800ade8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800adf0:	4619      	mov	r1, r3
 800adf2:	481a      	ldr	r0, [pc, #104]	@ (800ae5c <HAL_PCD_MspInit+0x19c>)
 800adf4:	f7f7 f95a 	bl	80020ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800adf8:	4b15      	ldr	r3, [pc, #84]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800adfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800adfe:	4a14      	ldr	r2, [pc, #80]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ae00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ae04:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ae08:	4b11      	ldr	r3, [pc, #68]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ae0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ae0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae12:	613b      	str	r3, [r7, #16]
 800ae14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800ae16:	4b0e      	ldr	r3, [pc, #56]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ae18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ae1c:	4a0c      	ldr	r2, [pc, #48]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ae1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ae26:	4b0a      	ldr	r3, [pc, #40]	@ (800ae50 <HAL_PCD_MspInit+0x190>)
 800ae28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ae2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ae30:	60fb      	str	r3, [r7, #12]
 800ae32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ae34:	2200      	movs	r2, #0
 800ae36:	2100      	movs	r1, #0
 800ae38:	204d      	movs	r0, #77	@ 0x4d
 800ae3a:	f7f7 f88a 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ae3e:	204d      	movs	r0, #77	@ 0x4d
 800ae40:	f7f7 f8a1 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ae44:	bf00      	nop
 800ae46:	37f0      	adds	r7, #240	@ 0xf0
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	40040000 	.word	0x40040000
 800ae50:	58024400 	.word	0x58024400
 800ae54:	58020800 	.word	0x58020800
 800ae58:	58020000 	.word	0x58020000
 800ae5c:	58020400 	.word	0x58020400

0800ae60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ae74:	4619      	mov	r1, r3
 800ae76:	4610      	mov	r0, r2
 800ae78:	f7fe fb8d 	bl	8009596 <USBD_LL_SetupStage>
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae96:	78fa      	ldrb	r2, [r7, #3]
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	00db      	lsls	r3, r3, #3
 800ae9e:	4413      	add	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	440b      	add	r3, r1
 800aea4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	78fb      	ldrb	r3, [r7, #3]
 800aeac:	4619      	mov	r1, r3
 800aeae:	f7fe fbc7 	bl	8009640 <USBD_LL_DataOutStage>
}
 800aeb2:	bf00      	nop
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b082      	sub	sp, #8
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	460b      	mov	r3, r1
 800aec4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aecc:	78fa      	ldrb	r2, [r7, #3]
 800aece:	6879      	ldr	r1, [r7, #4]
 800aed0:	4613      	mov	r3, r2
 800aed2:	00db      	lsls	r3, r3, #3
 800aed4:	4413      	add	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	440b      	add	r3, r1
 800aeda:	3320      	adds	r3, #32
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	4619      	mov	r1, r3
 800aee2:	f7fe fc60 	bl	80097a6 <USBD_LL_DataInStage>
}
 800aee6:	bf00      	nop
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b082      	sub	sp, #8
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fd9a 	bl	8009a36 <USBD_LL_SOF>
}
 800af02:	bf00      	nop
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af12:	2301      	movs	r3, #1
 800af14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	79db      	ldrb	r3, [r3, #7]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d102      	bne.n	800af24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800af1e:	2300      	movs	r3, #0
 800af20:	73fb      	strb	r3, [r7, #15]
 800af22:	e008      	b.n	800af36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	79db      	ldrb	r3, [r3, #7]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d102      	bne.n	800af32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800af2c:	2301      	movs	r3, #1
 800af2e:	73fb      	strb	r3, [r7, #15]
 800af30:	e001      	b.n	800af36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800af32:	f7f6 fcb1 	bl	8001898 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af3c:	7bfa      	ldrb	r2, [r7, #15]
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f7fe fd34 	bl	80099ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fe fcdc 	bl	800990a <USBD_LL_Reset>
}
 800af52:	bf00      	nop
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fe fd2f 	bl	80099ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	6812      	ldr	r2, [r2, #0]
 800af7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800af82:	f043 0301 	orr.w	r3, r3, #1
 800af86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	7adb      	ldrb	r3, [r3, #11]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d005      	beq.n	800af9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af90:	4b04      	ldr	r3, [pc, #16]	@ (800afa4 <HAL_PCD_SuspendCallback+0x48>)
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	4a03      	ldr	r2, [pc, #12]	@ (800afa4 <HAL_PCD_SuspendCallback+0x48>)
 800af96:	f043 0306 	orr.w	r3, r3, #6
 800af9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	e000ed00 	.word	0xe000ed00

0800afa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe fd25 	bl	8009a06 <USBD_LL_Resume>
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afd6:	78fa      	ldrb	r2, [r7, #3]
 800afd8:	4611      	mov	r1, r2
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe fd7d 	bl	8009ada <USBD_LL_IsoOUTIncomplete>
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800affa:	78fa      	ldrb	r2, [r7, #3]
 800affc:	4611      	mov	r1, r2
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe fd39 	bl	8009a76 <USBD_LL_IsoINIncomplete>
}
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fd8f 	bl	8009b3e <USBD_LL_DevConnected>
}
 800b020:	bf00      	nop
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b036:	4618      	mov	r0, r3
 800b038:	f7fe fd8c 	bl	8009b54 <USBD_LL_DevDisconnected>
}
 800b03c:	bf00      	nop
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d140      	bne.n	800b0d6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b054:	4a22      	ldr	r2, [pc, #136]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a20      	ldr	r2, [pc, #128]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b060:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b064:	4b1e      	ldr	r3, [pc, #120]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b066:	4a1f      	ldr	r2, [pc, #124]	@ (800b0e4 <USBD_LL_Init+0xa0>)
 800b068:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800b06a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b06c:	2209      	movs	r2, #9
 800b06e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800b070:	4b1b      	ldr	r3, [pc, #108]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b072:	2200      	movs	r2, #0
 800b074:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b076:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b078:	2200      	movs	r2, #0
 800b07a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800b07c:	4b18      	ldr	r3, [pc, #96]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b07e:	2201      	movs	r2, #1
 800b080:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b082:	4b17      	ldr	r3, [pc, #92]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b084:	2200      	movs	r2, #0
 800b086:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b088:	4b15      	ldr	r3, [pc, #84]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b08e:	4b14      	ldr	r3, [pc, #80]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b090:	2200      	movs	r2, #0
 800b092:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b094:	4b12      	ldr	r3, [pc, #72]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b096:	2200      	movs	r2, #0
 800b098:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b09a:	4b11      	ldr	r3, [pc, #68]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b0a6:	480e      	ldr	r0, [pc, #56]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b0a8:	f7f7 f9a8 	bl	80023fc <HAL_PCD_Init>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b0b2:	f7f6 fbf1 	bl	8001898 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b0b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b0ba:	4809      	ldr	r0, [pc, #36]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b0bc:	f7f8 fbe5 	bl	800388a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b0c0:	2280      	movs	r2, #128	@ 0x80
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4806      	ldr	r0, [pc, #24]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b0c6:	f7f8 fb99 	bl	80037fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b0ca:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b0ce:	2101      	movs	r1, #1
 800b0d0:	4803      	ldr	r0, [pc, #12]	@ (800b0e0 <USBD_LL_Init+0x9c>)
 800b0d2:	f7f8 fb93 	bl	80037fc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	24000c90 	.word	0x24000c90
 800b0e4:	40040000 	.word	0x40040000

0800b0e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7f7 fa88 	bl	8002614 <HAL_PCD_Start>
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 f930 	bl	800b370 <USBD_Get_USB_Status>
 800b110:	4603      	mov	r3, r0
 800b112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b114:	7bbb      	ldrb	r3, [r7, #14]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	4608      	mov	r0, r1
 800b128:	4611      	mov	r1, r2
 800b12a:	461a      	mov	r2, r3
 800b12c:	4603      	mov	r3, r0
 800b12e:	70fb      	strb	r3, [r7, #3]
 800b130:	460b      	mov	r3, r1
 800b132:	70bb      	strb	r3, [r7, #2]
 800b134:	4613      	mov	r3, r2
 800b136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b146:	78bb      	ldrb	r3, [r7, #2]
 800b148:	883a      	ldrh	r2, [r7, #0]
 800b14a:	78f9      	ldrb	r1, [r7, #3]
 800b14c:	f7f7 ff89 	bl	8003062 <HAL_PCD_EP_Open>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 f90a 	bl	800b370 <USBD_Get_USB_Status>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b160:	7bbb      	ldrb	r3, [r7, #14]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	460b      	mov	r3, r1
 800b174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f7 ffd4 	bl	8003136 <HAL_PCD_EP_Close>
 800b18e:	4603      	mov	r3, r0
 800b190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	4618      	mov	r0, r3
 800b196:	f000 f8eb 	bl	800b370 <USBD_Get_USB_Status>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1c2:	78fa      	ldrb	r2, [r7, #3]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7f8 f874 	bl	80032b4 <HAL_PCD_EP_SetStall>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f000 f8cc 	bl	800b370 <USBD_Get_USB_Status>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b200:	78fa      	ldrb	r2, [r7, #3]
 800b202:	4611      	mov	r1, r2
 800b204:	4618      	mov	r0, r3
 800b206:	f7f8 f8b8 	bl	800337a <HAL_PCD_EP_ClrStall>
 800b20a:	4603      	mov	r3, r0
 800b20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	4618      	mov	r0, r3
 800b212:	f000 f8ad 	bl	800b370 <USBD_Get_USB_Status>
 800b216:	4603      	mov	r3, r0
 800b218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b236:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	da0b      	bge.n	800b258 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b246:	68f9      	ldr	r1, [r7, #12]
 800b248:	4613      	mov	r3, r2
 800b24a:	00db      	lsls	r3, r3, #3
 800b24c:	4413      	add	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	440b      	add	r3, r1
 800b252:	3316      	adds	r3, #22
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	e00b      	b.n	800b270 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b258:	78fb      	ldrb	r3, [r7, #3]
 800b25a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b25e:	68f9      	ldr	r1, [r7, #12]
 800b260:	4613      	mov	r3, r2
 800b262:	00db      	lsls	r3, r3, #3
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	440b      	add	r3, r1
 800b26a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b26e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b296:	78fa      	ldrb	r2, [r7, #3]
 800b298:	4611      	mov	r1, r2
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7f7 febd 	bl	800301a <HAL_PCD_SetAddress>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f862 	bl	800b370 <USBD_Get_USB_Status>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b086      	sub	sp, #24
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	607a      	str	r2, [r7, #4]
 800b2c4:	603b      	str	r3, [r7, #0]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b2d8:	7af9      	ldrb	r1, [r7, #11]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	f7f7 ffaf 	bl	8003240 <HAL_PCD_EP_Transmit>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 f841 	bl	800b370 <USBD_Get_USB_Status>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	607a      	str	r2, [r7, #4]
 800b306:	603b      	str	r3, [r7, #0]
 800b308:	460b      	mov	r3, r1
 800b30a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b310:	2300      	movs	r3, #0
 800b312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b31a:	7af9      	ldrb	r1, [r7, #11]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	f7f7 ff53 	bl	80031ca <HAL_PCD_EP_Receive>
 800b324:	4603      	mov	r3, r0
 800b326:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b328:	7dfb      	ldrb	r3, [r7, #23]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 f820 	bl	800b370 <USBD_Get_USB_Status>
 800b330:	4603      	mov	r3, r0
 800b332:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b334:	7dbb      	ldrb	r3, [r7, #22]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b348:	4b03      	ldr	r3, [pc, #12]	@ (800b358 <USBD_static_malloc+0x18>)
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	24001174 	.word	0x24001174

0800b35c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	2b03      	cmp	r3, #3
 800b382:	d817      	bhi.n	800b3b4 <USBD_Get_USB_Status+0x44>
 800b384:	a201      	add	r2, pc, #4	@ (adr r2, 800b38c <USBD_Get_USB_Status+0x1c>)
 800b386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38a:	bf00      	nop
 800b38c:	0800b39d 	.word	0x0800b39d
 800b390:	0800b3a3 	.word	0x0800b3a3
 800b394:	0800b3a9 	.word	0x0800b3a9
 800b398:	0800b3af 	.word	0x0800b3af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a0:	e00b      	b.n	800b3ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a6:	e008      	b.n	800b3ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ac:	e005      	b.n	800b3ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b2:	e002      	b.n	800b3ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b8:	bf00      	nop
  }
  return usb_status;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <siprintf>:
 800b3c8:	b40e      	push	{r1, r2, r3}
 800b3ca:	b500      	push	{lr}
 800b3cc:	b09c      	sub	sp, #112	@ 0x70
 800b3ce:	ab1d      	add	r3, sp, #116	@ 0x74
 800b3d0:	9002      	str	r0, [sp, #8]
 800b3d2:	9006      	str	r0, [sp, #24]
 800b3d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b3d8:	4809      	ldr	r0, [pc, #36]	@ (800b400 <siprintf+0x38>)
 800b3da:	9107      	str	r1, [sp, #28]
 800b3dc:	9104      	str	r1, [sp, #16]
 800b3de:	4909      	ldr	r1, [pc, #36]	@ (800b404 <siprintf+0x3c>)
 800b3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3e4:	9105      	str	r1, [sp, #20]
 800b3e6:	6800      	ldr	r0, [r0, #0]
 800b3e8:	9301      	str	r3, [sp, #4]
 800b3ea:	a902      	add	r1, sp, #8
 800b3ec:	f000 f994 	bl	800b718 <_svfiprintf_r>
 800b3f0:	9b02      	ldr	r3, [sp, #8]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	701a      	strb	r2, [r3, #0]
 800b3f6:	b01c      	add	sp, #112	@ 0x70
 800b3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3fc:	b003      	add	sp, #12
 800b3fe:	4770      	bx	lr
 800b400:	240002c8 	.word	0x240002c8
 800b404:	ffff0208 	.word	0xffff0208

0800b408 <memset>:
 800b408:	4402      	add	r2, r0
 800b40a:	4603      	mov	r3, r0
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d100      	bne.n	800b412 <memset+0xa>
 800b410:	4770      	bx	lr
 800b412:	f803 1b01 	strb.w	r1, [r3], #1
 800b416:	e7f9      	b.n	800b40c <memset+0x4>

0800b418 <__errno>:
 800b418:	4b01      	ldr	r3, [pc, #4]	@ (800b420 <__errno+0x8>)
 800b41a:	6818      	ldr	r0, [r3, #0]
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	240002c8 	.word	0x240002c8

0800b424 <__libc_init_array>:
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	4d0d      	ldr	r5, [pc, #52]	@ (800b45c <__libc_init_array+0x38>)
 800b428:	4c0d      	ldr	r4, [pc, #52]	@ (800b460 <__libc_init_array+0x3c>)
 800b42a:	1b64      	subs	r4, r4, r5
 800b42c:	10a4      	asrs	r4, r4, #2
 800b42e:	2600      	movs	r6, #0
 800b430:	42a6      	cmp	r6, r4
 800b432:	d109      	bne.n	800b448 <__libc_init_array+0x24>
 800b434:	4d0b      	ldr	r5, [pc, #44]	@ (800b464 <__libc_init_array+0x40>)
 800b436:	4c0c      	ldr	r4, [pc, #48]	@ (800b468 <__libc_init_array+0x44>)
 800b438:	f000 fc66 	bl	800bd08 <_init>
 800b43c:	1b64      	subs	r4, r4, r5
 800b43e:	10a4      	asrs	r4, r4, #2
 800b440:	2600      	movs	r6, #0
 800b442:	42a6      	cmp	r6, r4
 800b444:	d105      	bne.n	800b452 <__libc_init_array+0x2e>
 800b446:	bd70      	pop	{r4, r5, r6, pc}
 800b448:	f855 3b04 	ldr.w	r3, [r5], #4
 800b44c:	4798      	blx	r3
 800b44e:	3601      	adds	r6, #1
 800b450:	e7ee      	b.n	800b430 <__libc_init_array+0xc>
 800b452:	f855 3b04 	ldr.w	r3, [r5], #4
 800b456:	4798      	blx	r3
 800b458:	3601      	adds	r6, #1
 800b45a:	e7f2      	b.n	800b442 <__libc_init_array+0x1e>
 800b45c:	0800bf38 	.word	0x0800bf38
 800b460:	0800bf38 	.word	0x0800bf38
 800b464:	0800bf38 	.word	0x0800bf38
 800b468:	0800bf3c 	.word	0x0800bf3c

0800b46c <__retarget_lock_acquire_recursive>:
 800b46c:	4770      	bx	lr

0800b46e <__retarget_lock_release_recursive>:
 800b46e:	4770      	bx	lr

0800b470 <_free_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4605      	mov	r5, r0
 800b474:	2900      	cmp	r1, #0
 800b476:	d041      	beq.n	800b4fc <_free_r+0x8c>
 800b478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b47c:	1f0c      	subs	r4, r1, #4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	bfb8      	it	lt
 800b482:	18e4      	addlt	r4, r4, r3
 800b484:	f000 f8e0 	bl	800b648 <__malloc_lock>
 800b488:	4a1d      	ldr	r2, [pc, #116]	@ (800b500 <_free_r+0x90>)
 800b48a:	6813      	ldr	r3, [r2, #0]
 800b48c:	b933      	cbnz	r3, 800b49c <_free_r+0x2c>
 800b48e:	6063      	str	r3, [r4, #4]
 800b490:	6014      	str	r4, [r2, #0]
 800b492:	4628      	mov	r0, r5
 800b494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b498:	f000 b8dc 	b.w	800b654 <__malloc_unlock>
 800b49c:	42a3      	cmp	r3, r4
 800b49e:	d908      	bls.n	800b4b2 <_free_r+0x42>
 800b4a0:	6820      	ldr	r0, [r4, #0]
 800b4a2:	1821      	adds	r1, r4, r0
 800b4a4:	428b      	cmp	r3, r1
 800b4a6:	bf01      	itttt	eq
 800b4a8:	6819      	ldreq	r1, [r3, #0]
 800b4aa:	685b      	ldreq	r3, [r3, #4]
 800b4ac:	1809      	addeq	r1, r1, r0
 800b4ae:	6021      	streq	r1, [r4, #0]
 800b4b0:	e7ed      	b.n	800b48e <_free_r+0x1e>
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	b10b      	cbz	r3, 800b4bc <_free_r+0x4c>
 800b4b8:	42a3      	cmp	r3, r4
 800b4ba:	d9fa      	bls.n	800b4b2 <_free_r+0x42>
 800b4bc:	6811      	ldr	r1, [r2, #0]
 800b4be:	1850      	adds	r0, r2, r1
 800b4c0:	42a0      	cmp	r0, r4
 800b4c2:	d10b      	bne.n	800b4dc <_free_r+0x6c>
 800b4c4:	6820      	ldr	r0, [r4, #0]
 800b4c6:	4401      	add	r1, r0
 800b4c8:	1850      	adds	r0, r2, r1
 800b4ca:	4283      	cmp	r3, r0
 800b4cc:	6011      	str	r1, [r2, #0]
 800b4ce:	d1e0      	bne.n	800b492 <_free_r+0x22>
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	6053      	str	r3, [r2, #4]
 800b4d6:	4408      	add	r0, r1
 800b4d8:	6010      	str	r0, [r2, #0]
 800b4da:	e7da      	b.n	800b492 <_free_r+0x22>
 800b4dc:	d902      	bls.n	800b4e4 <_free_r+0x74>
 800b4de:	230c      	movs	r3, #12
 800b4e0:	602b      	str	r3, [r5, #0]
 800b4e2:	e7d6      	b.n	800b492 <_free_r+0x22>
 800b4e4:	6820      	ldr	r0, [r4, #0]
 800b4e6:	1821      	adds	r1, r4, r0
 800b4e8:	428b      	cmp	r3, r1
 800b4ea:	bf04      	itt	eq
 800b4ec:	6819      	ldreq	r1, [r3, #0]
 800b4ee:	685b      	ldreq	r3, [r3, #4]
 800b4f0:	6063      	str	r3, [r4, #4]
 800b4f2:	bf04      	itt	eq
 800b4f4:	1809      	addeq	r1, r1, r0
 800b4f6:	6021      	streq	r1, [r4, #0]
 800b4f8:	6054      	str	r4, [r2, #4]
 800b4fa:	e7ca      	b.n	800b492 <_free_r+0x22>
 800b4fc:	bd38      	pop	{r3, r4, r5, pc}
 800b4fe:	bf00      	nop
 800b500:	240012cc 	.word	0x240012cc

0800b504 <sbrk_aligned>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	4e0f      	ldr	r6, [pc, #60]	@ (800b544 <sbrk_aligned+0x40>)
 800b508:	460c      	mov	r4, r1
 800b50a:	6831      	ldr	r1, [r6, #0]
 800b50c:	4605      	mov	r5, r0
 800b50e:	b911      	cbnz	r1, 800b516 <sbrk_aligned+0x12>
 800b510:	f000 fba6 	bl	800bc60 <_sbrk_r>
 800b514:	6030      	str	r0, [r6, #0]
 800b516:	4621      	mov	r1, r4
 800b518:	4628      	mov	r0, r5
 800b51a:	f000 fba1 	bl	800bc60 <_sbrk_r>
 800b51e:	1c43      	adds	r3, r0, #1
 800b520:	d103      	bne.n	800b52a <sbrk_aligned+0x26>
 800b522:	f04f 34ff 	mov.w	r4, #4294967295
 800b526:	4620      	mov	r0, r4
 800b528:	bd70      	pop	{r4, r5, r6, pc}
 800b52a:	1cc4      	adds	r4, r0, #3
 800b52c:	f024 0403 	bic.w	r4, r4, #3
 800b530:	42a0      	cmp	r0, r4
 800b532:	d0f8      	beq.n	800b526 <sbrk_aligned+0x22>
 800b534:	1a21      	subs	r1, r4, r0
 800b536:	4628      	mov	r0, r5
 800b538:	f000 fb92 	bl	800bc60 <_sbrk_r>
 800b53c:	3001      	adds	r0, #1
 800b53e:	d1f2      	bne.n	800b526 <sbrk_aligned+0x22>
 800b540:	e7ef      	b.n	800b522 <sbrk_aligned+0x1e>
 800b542:	bf00      	nop
 800b544:	240012c8 	.word	0x240012c8

0800b548 <_malloc_r>:
 800b548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b54c:	1ccd      	adds	r5, r1, #3
 800b54e:	f025 0503 	bic.w	r5, r5, #3
 800b552:	3508      	adds	r5, #8
 800b554:	2d0c      	cmp	r5, #12
 800b556:	bf38      	it	cc
 800b558:	250c      	movcc	r5, #12
 800b55a:	2d00      	cmp	r5, #0
 800b55c:	4606      	mov	r6, r0
 800b55e:	db01      	blt.n	800b564 <_malloc_r+0x1c>
 800b560:	42a9      	cmp	r1, r5
 800b562:	d904      	bls.n	800b56e <_malloc_r+0x26>
 800b564:	230c      	movs	r3, #12
 800b566:	6033      	str	r3, [r6, #0]
 800b568:	2000      	movs	r0, #0
 800b56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b644 <_malloc_r+0xfc>
 800b572:	f000 f869 	bl	800b648 <__malloc_lock>
 800b576:	f8d8 3000 	ldr.w	r3, [r8]
 800b57a:	461c      	mov	r4, r3
 800b57c:	bb44      	cbnz	r4, 800b5d0 <_malloc_r+0x88>
 800b57e:	4629      	mov	r1, r5
 800b580:	4630      	mov	r0, r6
 800b582:	f7ff ffbf 	bl	800b504 <sbrk_aligned>
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	4604      	mov	r4, r0
 800b58a:	d158      	bne.n	800b63e <_malloc_r+0xf6>
 800b58c:	f8d8 4000 	ldr.w	r4, [r8]
 800b590:	4627      	mov	r7, r4
 800b592:	2f00      	cmp	r7, #0
 800b594:	d143      	bne.n	800b61e <_malloc_r+0xd6>
 800b596:	2c00      	cmp	r4, #0
 800b598:	d04b      	beq.n	800b632 <_malloc_r+0xea>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	4639      	mov	r1, r7
 800b59e:	4630      	mov	r0, r6
 800b5a0:	eb04 0903 	add.w	r9, r4, r3
 800b5a4:	f000 fb5c 	bl	800bc60 <_sbrk_r>
 800b5a8:	4581      	cmp	r9, r0
 800b5aa:	d142      	bne.n	800b632 <_malloc_r+0xea>
 800b5ac:	6821      	ldr	r1, [r4, #0]
 800b5ae:	1a6d      	subs	r5, r5, r1
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7ff ffa6 	bl	800b504 <sbrk_aligned>
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	d03a      	beq.n	800b632 <_malloc_r+0xea>
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	442b      	add	r3, r5
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	bb62      	cbnz	r2, 800b624 <_malloc_r+0xdc>
 800b5ca:	f8c8 7000 	str.w	r7, [r8]
 800b5ce:	e00f      	b.n	800b5f0 <_malloc_r+0xa8>
 800b5d0:	6822      	ldr	r2, [r4, #0]
 800b5d2:	1b52      	subs	r2, r2, r5
 800b5d4:	d420      	bmi.n	800b618 <_malloc_r+0xd0>
 800b5d6:	2a0b      	cmp	r2, #11
 800b5d8:	d917      	bls.n	800b60a <_malloc_r+0xc2>
 800b5da:	1961      	adds	r1, r4, r5
 800b5dc:	42a3      	cmp	r3, r4
 800b5de:	6025      	str	r5, [r4, #0]
 800b5e0:	bf18      	it	ne
 800b5e2:	6059      	strne	r1, [r3, #4]
 800b5e4:	6863      	ldr	r3, [r4, #4]
 800b5e6:	bf08      	it	eq
 800b5e8:	f8c8 1000 	streq.w	r1, [r8]
 800b5ec:	5162      	str	r2, [r4, r5]
 800b5ee:	604b      	str	r3, [r1, #4]
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f000 f82f 	bl	800b654 <__malloc_unlock>
 800b5f6:	f104 000b 	add.w	r0, r4, #11
 800b5fa:	1d23      	adds	r3, r4, #4
 800b5fc:	f020 0007 	bic.w	r0, r0, #7
 800b600:	1ac2      	subs	r2, r0, r3
 800b602:	bf1c      	itt	ne
 800b604:	1a1b      	subne	r3, r3, r0
 800b606:	50a3      	strne	r3, [r4, r2]
 800b608:	e7af      	b.n	800b56a <_malloc_r+0x22>
 800b60a:	6862      	ldr	r2, [r4, #4]
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	bf0c      	ite	eq
 800b610:	f8c8 2000 	streq.w	r2, [r8]
 800b614:	605a      	strne	r2, [r3, #4]
 800b616:	e7eb      	b.n	800b5f0 <_malloc_r+0xa8>
 800b618:	4623      	mov	r3, r4
 800b61a:	6864      	ldr	r4, [r4, #4]
 800b61c:	e7ae      	b.n	800b57c <_malloc_r+0x34>
 800b61e:	463c      	mov	r4, r7
 800b620:	687f      	ldr	r7, [r7, #4]
 800b622:	e7b6      	b.n	800b592 <_malloc_r+0x4a>
 800b624:	461a      	mov	r2, r3
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	42a3      	cmp	r3, r4
 800b62a:	d1fb      	bne.n	800b624 <_malloc_r+0xdc>
 800b62c:	2300      	movs	r3, #0
 800b62e:	6053      	str	r3, [r2, #4]
 800b630:	e7de      	b.n	800b5f0 <_malloc_r+0xa8>
 800b632:	230c      	movs	r3, #12
 800b634:	6033      	str	r3, [r6, #0]
 800b636:	4630      	mov	r0, r6
 800b638:	f000 f80c 	bl	800b654 <__malloc_unlock>
 800b63c:	e794      	b.n	800b568 <_malloc_r+0x20>
 800b63e:	6005      	str	r5, [r0, #0]
 800b640:	e7d6      	b.n	800b5f0 <_malloc_r+0xa8>
 800b642:	bf00      	nop
 800b644:	240012cc 	.word	0x240012cc

0800b648 <__malloc_lock>:
 800b648:	4801      	ldr	r0, [pc, #4]	@ (800b650 <__malloc_lock+0x8>)
 800b64a:	f7ff bf0f 	b.w	800b46c <__retarget_lock_acquire_recursive>
 800b64e:	bf00      	nop
 800b650:	240012c4 	.word	0x240012c4

0800b654 <__malloc_unlock>:
 800b654:	4801      	ldr	r0, [pc, #4]	@ (800b65c <__malloc_unlock+0x8>)
 800b656:	f7ff bf0a 	b.w	800b46e <__retarget_lock_release_recursive>
 800b65a:	bf00      	nop
 800b65c:	240012c4 	.word	0x240012c4

0800b660 <__ssputs_r>:
 800b660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b664:	688e      	ldr	r6, [r1, #8]
 800b666:	461f      	mov	r7, r3
 800b668:	42be      	cmp	r6, r7
 800b66a:	680b      	ldr	r3, [r1, #0]
 800b66c:	4682      	mov	sl, r0
 800b66e:	460c      	mov	r4, r1
 800b670:	4690      	mov	r8, r2
 800b672:	d82d      	bhi.n	800b6d0 <__ssputs_r+0x70>
 800b674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b678:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b67c:	d026      	beq.n	800b6cc <__ssputs_r+0x6c>
 800b67e:	6965      	ldr	r5, [r4, #20]
 800b680:	6909      	ldr	r1, [r1, #16]
 800b682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b686:	eba3 0901 	sub.w	r9, r3, r1
 800b68a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b68e:	1c7b      	adds	r3, r7, #1
 800b690:	444b      	add	r3, r9
 800b692:	106d      	asrs	r5, r5, #1
 800b694:	429d      	cmp	r5, r3
 800b696:	bf38      	it	cc
 800b698:	461d      	movcc	r5, r3
 800b69a:	0553      	lsls	r3, r2, #21
 800b69c:	d527      	bpl.n	800b6ee <__ssputs_r+0x8e>
 800b69e:	4629      	mov	r1, r5
 800b6a0:	f7ff ff52 	bl	800b548 <_malloc_r>
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	b360      	cbz	r0, 800b702 <__ssputs_r+0xa2>
 800b6a8:	6921      	ldr	r1, [r4, #16]
 800b6aa:	464a      	mov	r2, r9
 800b6ac:	f000 fae8 	bl	800bc80 <memcpy>
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b6b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	6126      	str	r6, [r4, #16]
 800b6be:	6165      	str	r5, [r4, #20]
 800b6c0:	444e      	add	r6, r9
 800b6c2:	eba5 0509 	sub.w	r5, r5, r9
 800b6c6:	6026      	str	r6, [r4, #0]
 800b6c8:	60a5      	str	r5, [r4, #8]
 800b6ca:	463e      	mov	r6, r7
 800b6cc:	42be      	cmp	r6, r7
 800b6ce:	d900      	bls.n	800b6d2 <__ssputs_r+0x72>
 800b6d0:	463e      	mov	r6, r7
 800b6d2:	6820      	ldr	r0, [r4, #0]
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	4641      	mov	r1, r8
 800b6d8:	f000 faa8 	bl	800bc2c <memmove>
 800b6dc:	68a3      	ldr	r3, [r4, #8]
 800b6de:	1b9b      	subs	r3, r3, r6
 800b6e0:	60a3      	str	r3, [r4, #8]
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	4433      	add	r3, r6
 800b6e6:	6023      	str	r3, [r4, #0]
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ee:	462a      	mov	r2, r5
 800b6f0:	f000 fad4 	bl	800bc9c <_realloc_r>
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d1e0      	bne.n	800b6bc <__ssputs_r+0x5c>
 800b6fa:	6921      	ldr	r1, [r4, #16]
 800b6fc:	4650      	mov	r0, sl
 800b6fe:	f7ff feb7 	bl	800b470 <_free_r>
 800b702:	230c      	movs	r3, #12
 800b704:	f8ca 3000 	str.w	r3, [sl]
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b70e:	81a3      	strh	r3, [r4, #12]
 800b710:	f04f 30ff 	mov.w	r0, #4294967295
 800b714:	e7e9      	b.n	800b6ea <__ssputs_r+0x8a>
	...

0800b718 <_svfiprintf_r>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	4698      	mov	r8, r3
 800b71e:	898b      	ldrh	r3, [r1, #12]
 800b720:	061b      	lsls	r3, r3, #24
 800b722:	b09d      	sub	sp, #116	@ 0x74
 800b724:	4607      	mov	r7, r0
 800b726:	460d      	mov	r5, r1
 800b728:	4614      	mov	r4, r2
 800b72a:	d510      	bpl.n	800b74e <_svfiprintf_r+0x36>
 800b72c:	690b      	ldr	r3, [r1, #16]
 800b72e:	b973      	cbnz	r3, 800b74e <_svfiprintf_r+0x36>
 800b730:	2140      	movs	r1, #64	@ 0x40
 800b732:	f7ff ff09 	bl	800b548 <_malloc_r>
 800b736:	6028      	str	r0, [r5, #0]
 800b738:	6128      	str	r0, [r5, #16]
 800b73a:	b930      	cbnz	r0, 800b74a <_svfiprintf_r+0x32>
 800b73c:	230c      	movs	r3, #12
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	f04f 30ff 	mov.w	r0, #4294967295
 800b744:	b01d      	add	sp, #116	@ 0x74
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	2340      	movs	r3, #64	@ 0x40
 800b74c:	616b      	str	r3, [r5, #20]
 800b74e:	2300      	movs	r3, #0
 800b750:	9309      	str	r3, [sp, #36]	@ 0x24
 800b752:	2320      	movs	r3, #32
 800b754:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b758:	f8cd 800c 	str.w	r8, [sp, #12]
 800b75c:	2330      	movs	r3, #48	@ 0x30
 800b75e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b8fc <_svfiprintf_r+0x1e4>
 800b762:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b766:	f04f 0901 	mov.w	r9, #1
 800b76a:	4623      	mov	r3, r4
 800b76c:	469a      	mov	sl, r3
 800b76e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b772:	b10a      	cbz	r2, 800b778 <_svfiprintf_r+0x60>
 800b774:	2a25      	cmp	r2, #37	@ 0x25
 800b776:	d1f9      	bne.n	800b76c <_svfiprintf_r+0x54>
 800b778:	ebba 0b04 	subs.w	fp, sl, r4
 800b77c:	d00b      	beq.n	800b796 <_svfiprintf_r+0x7e>
 800b77e:	465b      	mov	r3, fp
 800b780:	4622      	mov	r2, r4
 800b782:	4629      	mov	r1, r5
 800b784:	4638      	mov	r0, r7
 800b786:	f7ff ff6b 	bl	800b660 <__ssputs_r>
 800b78a:	3001      	adds	r0, #1
 800b78c:	f000 80a7 	beq.w	800b8de <_svfiprintf_r+0x1c6>
 800b790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b792:	445a      	add	r2, fp
 800b794:	9209      	str	r2, [sp, #36]	@ 0x24
 800b796:	f89a 3000 	ldrb.w	r3, [sl]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 809f 	beq.w	800b8de <_svfiprintf_r+0x1c6>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7aa:	f10a 0a01 	add.w	sl, sl, #1
 800b7ae:	9304      	str	r3, [sp, #16]
 800b7b0:	9307      	str	r3, [sp, #28]
 800b7b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7b8:	4654      	mov	r4, sl
 800b7ba:	2205      	movs	r2, #5
 800b7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c0:	484e      	ldr	r0, [pc, #312]	@ (800b8fc <_svfiprintf_r+0x1e4>)
 800b7c2:	f7f4 fdad 	bl	8000320 <memchr>
 800b7c6:	9a04      	ldr	r2, [sp, #16]
 800b7c8:	b9d8      	cbnz	r0, 800b802 <_svfiprintf_r+0xea>
 800b7ca:	06d0      	lsls	r0, r2, #27
 800b7cc:	bf44      	itt	mi
 800b7ce:	2320      	movmi	r3, #32
 800b7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7d4:	0711      	lsls	r1, r2, #28
 800b7d6:	bf44      	itt	mi
 800b7d8:	232b      	movmi	r3, #43	@ 0x2b
 800b7da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7de:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7e4:	d015      	beq.n	800b812 <_svfiprintf_r+0xfa>
 800b7e6:	9a07      	ldr	r2, [sp, #28]
 800b7e8:	4654      	mov	r4, sl
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	f04f 0c0a 	mov.w	ip, #10
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7f6:	3b30      	subs	r3, #48	@ 0x30
 800b7f8:	2b09      	cmp	r3, #9
 800b7fa:	d94b      	bls.n	800b894 <_svfiprintf_r+0x17c>
 800b7fc:	b1b0      	cbz	r0, 800b82c <_svfiprintf_r+0x114>
 800b7fe:	9207      	str	r2, [sp, #28]
 800b800:	e014      	b.n	800b82c <_svfiprintf_r+0x114>
 800b802:	eba0 0308 	sub.w	r3, r0, r8
 800b806:	fa09 f303 	lsl.w	r3, r9, r3
 800b80a:	4313      	orrs	r3, r2
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	46a2      	mov	sl, r4
 800b810:	e7d2      	b.n	800b7b8 <_svfiprintf_r+0xa0>
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	1d19      	adds	r1, r3, #4
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	9103      	str	r1, [sp, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	bfbb      	ittet	lt
 800b81e:	425b      	neglt	r3, r3
 800b820:	f042 0202 	orrlt.w	r2, r2, #2
 800b824:	9307      	strge	r3, [sp, #28]
 800b826:	9307      	strlt	r3, [sp, #28]
 800b828:	bfb8      	it	lt
 800b82a:	9204      	strlt	r2, [sp, #16]
 800b82c:	7823      	ldrb	r3, [r4, #0]
 800b82e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b830:	d10a      	bne.n	800b848 <_svfiprintf_r+0x130>
 800b832:	7863      	ldrb	r3, [r4, #1]
 800b834:	2b2a      	cmp	r3, #42	@ 0x2a
 800b836:	d132      	bne.n	800b89e <_svfiprintf_r+0x186>
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	1d1a      	adds	r2, r3, #4
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	9203      	str	r2, [sp, #12]
 800b840:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b844:	3402      	adds	r4, #2
 800b846:	9305      	str	r3, [sp, #20]
 800b848:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b90c <_svfiprintf_r+0x1f4>
 800b84c:	7821      	ldrb	r1, [r4, #0]
 800b84e:	2203      	movs	r2, #3
 800b850:	4650      	mov	r0, sl
 800b852:	f7f4 fd65 	bl	8000320 <memchr>
 800b856:	b138      	cbz	r0, 800b868 <_svfiprintf_r+0x150>
 800b858:	9b04      	ldr	r3, [sp, #16]
 800b85a:	eba0 000a 	sub.w	r0, r0, sl
 800b85e:	2240      	movs	r2, #64	@ 0x40
 800b860:	4082      	lsls	r2, r0
 800b862:	4313      	orrs	r3, r2
 800b864:	3401      	adds	r4, #1
 800b866:	9304      	str	r3, [sp, #16]
 800b868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86c:	4824      	ldr	r0, [pc, #144]	@ (800b900 <_svfiprintf_r+0x1e8>)
 800b86e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b872:	2206      	movs	r2, #6
 800b874:	f7f4 fd54 	bl	8000320 <memchr>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d036      	beq.n	800b8ea <_svfiprintf_r+0x1d2>
 800b87c:	4b21      	ldr	r3, [pc, #132]	@ (800b904 <_svfiprintf_r+0x1ec>)
 800b87e:	bb1b      	cbnz	r3, 800b8c8 <_svfiprintf_r+0x1b0>
 800b880:	9b03      	ldr	r3, [sp, #12]
 800b882:	3307      	adds	r3, #7
 800b884:	f023 0307 	bic.w	r3, r3, #7
 800b888:	3308      	adds	r3, #8
 800b88a:	9303      	str	r3, [sp, #12]
 800b88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b88e:	4433      	add	r3, r6
 800b890:	9309      	str	r3, [sp, #36]	@ 0x24
 800b892:	e76a      	b.n	800b76a <_svfiprintf_r+0x52>
 800b894:	fb0c 3202 	mla	r2, ip, r2, r3
 800b898:	460c      	mov	r4, r1
 800b89a:	2001      	movs	r0, #1
 800b89c:	e7a8      	b.n	800b7f0 <_svfiprintf_r+0xd8>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	3401      	adds	r4, #1
 800b8a2:	9305      	str	r3, [sp, #20]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f04f 0c0a 	mov.w	ip, #10
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8b0:	3a30      	subs	r2, #48	@ 0x30
 800b8b2:	2a09      	cmp	r2, #9
 800b8b4:	d903      	bls.n	800b8be <_svfiprintf_r+0x1a6>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d0c6      	beq.n	800b848 <_svfiprintf_r+0x130>
 800b8ba:	9105      	str	r1, [sp, #20]
 800b8bc:	e7c4      	b.n	800b848 <_svfiprintf_r+0x130>
 800b8be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e7f0      	b.n	800b8aa <_svfiprintf_r+0x192>
 800b8c8:	ab03      	add	r3, sp, #12
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b908 <_svfiprintf_r+0x1f0>)
 800b8d0:	a904      	add	r1, sp, #16
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	f3af 8000 	nop.w
 800b8d8:	1c42      	adds	r2, r0, #1
 800b8da:	4606      	mov	r6, r0
 800b8dc:	d1d6      	bne.n	800b88c <_svfiprintf_r+0x174>
 800b8de:	89ab      	ldrh	r3, [r5, #12]
 800b8e0:	065b      	lsls	r3, r3, #25
 800b8e2:	f53f af2d 	bmi.w	800b740 <_svfiprintf_r+0x28>
 800b8e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8e8:	e72c      	b.n	800b744 <_svfiprintf_r+0x2c>
 800b8ea:	ab03      	add	r3, sp, #12
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	462a      	mov	r2, r5
 800b8f0:	4b05      	ldr	r3, [pc, #20]	@ (800b908 <_svfiprintf_r+0x1f0>)
 800b8f2:	a904      	add	r1, sp, #16
 800b8f4:	4638      	mov	r0, r7
 800b8f6:	f000 f879 	bl	800b9ec <_printf_i>
 800b8fa:	e7ed      	b.n	800b8d8 <_svfiprintf_r+0x1c0>
 800b8fc:	0800befc 	.word	0x0800befc
 800b900:	0800bf06 	.word	0x0800bf06
 800b904:	00000000 	.word	0x00000000
 800b908:	0800b661 	.word	0x0800b661
 800b90c:	0800bf02 	.word	0x0800bf02

0800b910 <_printf_common>:
 800b910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b914:	4616      	mov	r6, r2
 800b916:	4698      	mov	r8, r3
 800b918:	688a      	ldr	r2, [r1, #8]
 800b91a:	690b      	ldr	r3, [r1, #16]
 800b91c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b920:	4293      	cmp	r3, r2
 800b922:	bfb8      	it	lt
 800b924:	4613      	movlt	r3, r2
 800b926:	6033      	str	r3, [r6, #0]
 800b928:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b92c:	4607      	mov	r7, r0
 800b92e:	460c      	mov	r4, r1
 800b930:	b10a      	cbz	r2, 800b936 <_printf_common+0x26>
 800b932:	3301      	adds	r3, #1
 800b934:	6033      	str	r3, [r6, #0]
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	0699      	lsls	r1, r3, #26
 800b93a:	bf42      	ittt	mi
 800b93c:	6833      	ldrmi	r3, [r6, #0]
 800b93e:	3302      	addmi	r3, #2
 800b940:	6033      	strmi	r3, [r6, #0]
 800b942:	6825      	ldr	r5, [r4, #0]
 800b944:	f015 0506 	ands.w	r5, r5, #6
 800b948:	d106      	bne.n	800b958 <_printf_common+0x48>
 800b94a:	f104 0a19 	add.w	sl, r4, #25
 800b94e:	68e3      	ldr	r3, [r4, #12]
 800b950:	6832      	ldr	r2, [r6, #0]
 800b952:	1a9b      	subs	r3, r3, r2
 800b954:	42ab      	cmp	r3, r5
 800b956:	dc26      	bgt.n	800b9a6 <_printf_common+0x96>
 800b958:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b95c:	6822      	ldr	r2, [r4, #0]
 800b95e:	3b00      	subs	r3, #0
 800b960:	bf18      	it	ne
 800b962:	2301      	movne	r3, #1
 800b964:	0692      	lsls	r2, r2, #26
 800b966:	d42b      	bmi.n	800b9c0 <_printf_common+0xb0>
 800b968:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b96c:	4641      	mov	r1, r8
 800b96e:	4638      	mov	r0, r7
 800b970:	47c8      	blx	r9
 800b972:	3001      	adds	r0, #1
 800b974:	d01e      	beq.n	800b9b4 <_printf_common+0xa4>
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	6922      	ldr	r2, [r4, #16]
 800b97a:	f003 0306 	and.w	r3, r3, #6
 800b97e:	2b04      	cmp	r3, #4
 800b980:	bf02      	ittt	eq
 800b982:	68e5      	ldreq	r5, [r4, #12]
 800b984:	6833      	ldreq	r3, [r6, #0]
 800b986:	1aed      	subeq	r5, r5, r3
 800b988:	68a3      	ldr	r3, [r4, #8]
 800b98a:	bf0c      	ite	eq
 800b98c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b990:	2500      	movne	r5, #0
 800b992:	4293      	cmp	r3, r2
 800b994:	bfc4      	itt	gt
 800b996:	1a9b      	subgt	r3, r3, r2
 800b998:	18ed      	addgt	r5, r5, r3
 800b99a:	2600      	movs	r6, #0
 800b99c:	341a      	adds	r4, #26
 800b99e:	42b5      	cmp	r5, r6
 800b9a0:	d11a      	bne.n	800b9d8 <_printf_common+0xc8>
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	e008      	b.n	800b9b8 <_printf_common+0xa8>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	4652      	mov	r2, sl
 800b9aa:	4641      	mov	r1, r8
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	47c8      	blx	r9
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	d103      	bne.n	800b9bc <_printf_common+0xac>
 800b9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9bc:	3501      	adds	r5, #1
 800b9be:	e7c6      	b.n	800b94e <_printf_common+0x3e>
 800b9c0:	18e1      	adds	r1, r4, r3
 800b9c2:	1c5a      	adds	r2, r3, #1
 800b9c4:	2030      	movs	r0, #48	@ 0x30
 800b9c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9ca:	4422      	add	r2, r4
 800b9cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b9d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b9d4:	3302      	adds	r3, #2
 800b9d6:	e7c7      	b.n	800b968 <_printf_common+0x58>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	4622      	mov	r2, r4
 800b9dc:	4641      	mov	r1, r8
 800b9de:	4638      	mov	r0, r7
 800b9e0:	47c8      	blx	r9
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	d0e6      	beq.n	800b9b4 <_printf_common+0xa4>
 800b9e6:	3601      	adds	r6, #1
 800b9e8:	e7d9      	b.n	800b99e <_printf_common+0x8e>
	...

0800b9ec <_printf_i>:
 800b9ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f0:	7e0f      	ldrb	r7, [r1, #24]
 800b9f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b9f4:	2f78      	cmp	r7, #120	@ 0x78
 800b9f6:	4691      	mov	r9, r2
 800b9f8:	4680      	mov	r8, r0
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	469a      	mov	sl, r3
 800b9fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba02:	d807      	bhi.n	800ba14 <_printf_i+0x28>
 800ba04:	2f62      	cmp	r7, #98	@ 0x62
 800ba06:	d80a      	bhi.n	800ba1e <_printf_i+0x32>
 800ba08:	2f00      	cmp	r7, #0
 800ba0a:	f000 80d2 	beq.w	800bbb2 <_printf_i+0x1c6>
 800ba0e:	2f58      	cmp	r7, #88	@ 0x58
 800ba10:	f000 80b9 	beq.w	800bb86 <_printf_i+0x19a>
 800ba14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba1c:	e03a      	b.n	800ba94 <_printf_i+0xa8>
 800ba1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba22:	2b15      	cmp	r3, #21
 800ba24:	d8f6      	bhi.n	800ba14 <_printf_i+0x28>
 800ba26:	a101      	add	r1, pc, #4	@ (adr r1, 800ba2c <_printf_i+0x40>)
 800ba28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba2c:	0800ba85 	.word	0x0800ba85
 800ba30:	0800ba99 	.word	0x0800ba99
 800ba34:	0800ba15 	.word	0x0800ba15
 800ba38:	0800ba15 	.word	0x0800ba15
 800ba3c:	0800ba15 	.word	0x0800ba15
 800ba40:	0800ba15 	.word	0x0800ba15
 800ba44:	0800ba99 	.word	0x0800ba99
 800ba48:	0800ba15 	.word	0x0800ba15
 800ba4c:	0800ba15 	.word	0x0800ba15
 800ba50:	0800ba15 	.word	0x0800ba15
 800ba54:	0800ba15 	.word	0x0800ba15
 800ba58:	0800bb99 	.word	0x0800bb99
 800ba5c:	0800bac3 	.word	0x0800bac3
 800ba60:	0800bb53 	.word	0x0800bb53
 800ba64:	0800ba15 	.word	0x0800ba15
 800ba68:	0800ba15 	.word	0x0800ba15
 800ba6c:	0800bbbb 	.word	0x0800bbbb
 800ba70:	0800ba15 	.word	0x0800ba15
 800ba74:	0800bac3 	.word	0x0800bac3
 800ba78:	0800ba15 	.word	0x0800ba15
 800ba7c:	0800ba15 	.word	0x0800ba15
 800ba80:	0800bb5b 	.word	0x0800bb5b
 800ba84:	6833      	ldr	r3, [r6, #0]
 800ba86:	1d1a      	adds	r2, r3, #4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6032      	str	r2, [r6, #0]
 800ba8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba94:	2301      	movs	r3, #1
 800ba96:	e09d      	b.n	800bbd4 <_printf_i+0x1e8>
 800ba98:	6833      	ldr	r3, [r6, #0]
 800ba9a:	6820      	ldr	r0, [r4, #0]
 800ba9c:	1d19      	adds	r1, r3, #4
 800ba9e:	6031      	str	r1, [r6, #0]
 800baa0:	0606      	lsls	r6, r0, #24
 800baa2:	d501      	bpl.n	800baa8 <_printf_i+0xbc>
 800baa4:	681d      	ldr	r5, [r3, #0]
 800baa6:	e003      	b.n	800bab0 <_printf_i+0xc4>
 800baa8:	0645      	lsls	r5, r0, #25
 800baaa:	d5fb      	bpl.n	800baa4 <_printf_i+0xb8>
 800baac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bab0:	2d00      	cmp	r5, #0
 800bab2:	da03      	bge.n	800babc <_printf_i+0xd0>
 800bab4:	232d      	movs	r3, #45	@ 0x2d
 800bab6:	426d      	negs	r5, r5
 800bab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800babc:	4859      	ldr	r0, [pc, #356]	@ (800bc24 <_printf_i+0x238>)
 800babe:	230a      	movs	r3, #10
 800bac0:	e011      	b.n	800bae6 <_printf_i+0xfa>
 800bac2:	6821      	ldr	r1, [r4, #0]
 800bac4:	6833      	ldr	r3, [r6, #0]
 800bac6:	0608      	lsls	r0, r1, #24
 800bac8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bacc:	d402      	bmi.n	800bad4 <_printf_i+0xe8>
 800bace:	0649      	lsls	r1, r1, #25
 800bad0:	bf48      	it	mi
 800bad2:	b2ad      	uxthmi	r5, r5
 800bad4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bad6:	4853      	ldr	r0, [pc, #332]	@ (800bc24 <_printf_i+0x238>)
 800bad8:	6033      	str	r3, [r6, #0]
 800bada:	bf14      	ite	ne
 800badc:	230a      	movne	r3, #10
 800bade:	2308      	moveq	r3, #8
 800bae0:	2100      	movs	r1, #0
 800bae2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bae6:	6866      	ldr	r6, [r4, #4]
 800bae8:	60a6      	str	r6, [r4, #8]
 800baea:	2e00      	cmp	r6, #0
 800baec:	bfa2      	ittt	ge
 800baee:	6821      	ldrge	r1, [r4, #0]
 800baf0:	f021 0104 	bicge.w	r1, r1, #4
 800baf4:	6021      	strge	r1, [r4, #0]
 800baf6:	b90d      	cbnz	r5, 800bafc <_printf_i+0x110>
 800baf8:	2e00      	cmp	r6, #0
 800bafa:	d04b      	beq.n	800bb94 <_printf_i+0x1a8>
 800bafc:	4616      	mov	r6, r2
 800bafe:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb02:	fb03 5711 	mls	r7, r3, r1, r5
 800bb06:	5dc7      	ldrb	r7, [r0, r7]
 800bb08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb0c:	462f      	mov	r7, r5
 800bb0e:	42bb      	cmp	r3, r7
 800bb10:	460d      	mov	r5, r1
 800bb12:	d9f4      	bls.n	800bafe <_printf_i+0x112>
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	d10b      	bne.n	800bb30 <_printf_i+0x144>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	07df      	lsls	r7, r3, #31
 800bb1c:	d508      	bpl.n	800bb30 <_printf_i+0x144>
 800bb1e:	6923      	ldr	r3, [r4, #16]
 800bb20:	6861      	ldr	r1, [r4, #4]
 800bb22:	4299      	cmp	r1, r3
 800bb24:	bfde      	ittt	le
 800bb26:	2330      	movle	r3, #48	@ 0x30
 800bb28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb30:	1b92      	subs	r2, r2, r6
 800bb32:	6122      	str	r2, [r4, #16]
 800bb34:	f8cd a000 	str.w	sl, [sp]
 800bb38:	464b      	mov	r3, r9
 800bb3a:	aa03      	add	r2, sp, #12
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f7ff fee6 	bl	800b910 <_printf_common>
 800bb44:	3001      	adds	r0, #1
 800bb46:	d14a      	bne.n	800bbde <_printf_i+0x1f2>
 800bb48:	f04f 30ff 	mov.w	r0, #4294967295
 800bb4c:	b004      	add	sp, #16
 800bb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	f043 0320 	orr.w	r3, r3, #32
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	4833      	ldr	r0, [pc, #204]	@ (800bc28 <_printf_i+0x23c>)
 800bb5c:	2778      	movs	r7, #120	@ 0x78
 800bb5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	6831      	ldr	r1, [r6, #0]
 800bb66:	061f      	lsls	r7, r3, #24
 800bb68:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb6c:	d402      	bmi.n	800bb74 <_printf_i+0x188>
 800bb6e:	065f      	lsls	r7, r3, #25
 800bb70:	bf48      	it	mi
 800bb72:	b2ad      	uxthmi	r5, r5
 800bb74:	6031      	str	r1, [r6, #0]
 800bb76:	07d9      	lsls	r1, r3, #31
 800bb78:	bf44      	itt	mi
 800bb7a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb7e:	6023      	strmi	r3, [r4, #0]
 800bb80:	b11d      	cbz	r5, 800bb8a <_printf_i+0x19e>
 800bb82:	2310      	movs	r3, #16
 800bb84:	e7ac      	b.n	800bae0 <_printf_i+0xf4>
 800bb86:	4827      	ldr	r0, [pc, #156]	@ (800bc24 <_printf_i+0x238>)
 800bb88:	e7e9      	b.n	800bb5e <_printf_i+0x172>
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	f023 0320 	bic.w	r3, r3, #32
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	e7f6      	b.n	800bb82 <_printf_i+0x196>
 800bb94:	4616      	mov	r6, r2
 800bb96:	e7bd      	b.n	800bb14 <_printf_i+0x128>
 800bb98:	6833      	ldr	r3, [r6, #0]
 800bb9a:	6825      	ldr	r5, [r4, #0]
 800bb9c:	6961      	ldr	r1, [r4, #20]
 800bb9e:	1d18      	adds	r0, r3, #4
 800bba0:	6030      	str	r0, [r6, #0]
 800bba2:	062e      	lsls	r6, r5, #24
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	d501      	bpl.n	800bbac <_printf_i+0x1c0>
 800bba8:	6019      	str	r1, [r3, #0]
 800bbaa:	e002      	b.n	800bbb2 <_printf_i+0x1c6>
 800bbac:	0668      	lsls	r0, r5, #25
 800bbae:	d5fb      	bpl.n	800bba8 <_printf_i+0x1bc>
 800bbb0:	8019      	strh	r1, [r3, #0]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	6123      	str	r3, [r4, #16]
 800bbb6:	4616      	mov	r6, r2
 800bbb8:	e7bc      	b.n	800bb34 <_printf_i+0x148>
 800bbba:	6833      	ldr	r3, [r6, #0]
 800bbbc:	1d1a      	adds	r2, r3, #4
 800bbbe:	6032      	str	r2, [r6, #0]
 800bbc0:	681e      	ldr	r6, [r3, #0]
 800bbc2:	6862      	ldr	r2, [r4, #4]
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f7f4 fbaa 	bl	8000320 <memchr>
 800bbcc:	b108      	cbz	r0, 800bbd2 <_printf_i+0x1e6>
 800bbce:	1b80      	subs	r0, r0, r6
 800bbd0:	6060      	str	r0, [r4, #4]
 800bbd2:	6863      	ldr	r3, [r4, #4]
 800bbd4:	6123      	str	r3, [r4, #16]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbdc:	e7aa      	b.n	800bb34 <_printf_i+0x148>
 800bbde:	6923      	ldr	r3, [r4, #16]
 800bbe0:	4632      	mov	r2, r6
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	47d0      	blx	sl
 800bbe8:	3001      	adds	r0, #1
 800bbea:	d0ad      	beq.n	800bb48 <_printf_i+0x15c>
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	079b      	lsls	r3, r3, #30
 800bbf0:	d413      	bmi.n	800bc1a <_printf_i+0x22e>
 800bbf2:	68e0      	ldr	r0, [r4, #12]
 800bbf4:	9b03      	ldr	r3, [sp, #12]
 800bbf6:	4298      	cmp	r0, r3
 800bbf8:	bfb8      	it	lt
 800bbfa:	4618      	movlt	r0, r3
 800bbfc:	e7a6      	b.n	800bb4c <_printf_i+0x160>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	4632      	mov	r2, r6
 800bc02:	4649      	mov	r1, r9
 800bc04:	4640      	mov	r0, r8
 800bc06:	47d0      	blx	sl
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d09d      	beq.n	800bb48 <_printf_i+0x15c>
 800bc0c:	3501      	adds	r5, #1
 800bc0e:	68e3      	ldr	r3, [r4, #12]
 800bc10:	9903      	ldr	r1, [sp, #12]
 800bc12:	1a5b      	subs	r3, r3, r1
 800bc14:	42ab      	cmp	r3, r5
 800bc16:	dcf2      	bgt.n	800bbfe <_printf_i+0x212>
 800bc18:	e7eb      	b.n	800bbf2 <_printf_i+0x206>
 800bc1a:	2500      	movs	r5, #0
 800bc1c:	f104 0619 	add.w	r6, r4, #25
 800bc20:	e7f5      	b.n	800bc0e <_printf_i+0x222>
 800bc22:	bf00      	nop
 800bc24:	0800bf0d 	.word	0x0800bf0d
 800bc28:	0800bf1e 	.word	0x0800bf1e

0800bc2c <memmove>:
 800bc2c:	4288      	cmp	r0, r1
 800bc2e:	b510      	push	{r4, lr}
 800bc30:	eb01 0402 	add.w	r4, r1, r2
 800bc34:	d902      	bls.n	800bc3c <memmove+0x10>
 800bc36:	4284      	cmp	r4, r0
 800bc38:	4623      	mov	r3, r4
 800bc3a:	d807      	bhi.n	800bc4c <memmove+0x20>
 800bc3c:	1e43      	subs	r3, r0, #1
 800bc3e:	42a1      	cmp	r1, r4
 800bc40:	d008      	beq.n	800bc54 <memmove+0x28>
 800bc42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc4a:	e7f8      	b.n	800bc3e <memmove+0x12>
 800bc4c:	4402      	add	r2, r0
 800bc4e:	4601      	mov	r1, r0
 800bc50:	428a      	cmp	r2, r1
 800bc52:	d100      	bne.n	800bc56 <memmove+0x2a>
 800bc54:	bd10      	pop	{r4, pc}
 800bc56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc5e:	e7f7      	b.n	800bc50 <memmove+0x24>

0800bc60 <_sbrk_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d06      	ldr	r5, [pc, #24]	@ (800bc7c <_sbrk_r+0x1c>)
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	602b      	str	r3, [r5, #0]
 800bc6c:	f7f5 fed6 	bl	8001a1c <_sbrk>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_sbrk_r+0x1a>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_sbrk_r+0x1a>
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	240012c0 	.word	0x240012c0

0800bc80 <memcpy>:
 800bc80:	440a      	add	r2, r1
 800bc82:	4291      	cmp	r1, r2
 800bc84:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc88:	d100      	bne.n	800bc8c <memcpy+0xc>
 800bc8a:	4770      	bx	lr
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc96:	4291      	cmp	r1, r2
 800bc98:	d1f9      	bne.n	800bc8e <memcpy+0xe>
 800bc9a:	bd10      	pop	{r4, pc}

0800bc9c <_realloc_r>:
 800bc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca0:	4680      	mov	r8, r0
 800bca2:	4615      	mov	r5, r2
 800bca4:	460c      	mov	r4, r1
 800bca6:	b921      	cbnz	r1, 800bcb2 <_realloc_r+0x16>
 800bca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcac:	4611      	mov	r1, r2
 800bcae:	f7ff bc4b 	b.w	800b548 <_malloc_r>
 800bcb2:	b92a      	cbnz	r2, 800bcc0 <_realloc_r+0x24>
 800bcb4:	f7ff fbdc 	bl	800b470 <_free_r>
 800bcb8:	2400      	movs	r4, #0
 800bcba:	4620      	mov	r0, r4
 800bcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc0:	f000 f81a 	bl	800bcf8 <_malloc_usable_size_r>
 800bcc4:	4285      	cmp	r5, r0
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	d802      	bhi.n	800bcd0 <_realloc_r+0x34>
 800bcca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bcce:	d8f4      	bhi.n	800bcba <_realloc_r+0x1e>
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	f7ff fc38 	bl	800b548 <_malloc_r>
 800bcd8:	4607      	mov	r7, r0
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d0ec      	beq.n	800bcb8 <_realloc_r+0x1c>
 800bcde:	42b5      	cmp	r5, r6
 800bce0:	462a      	mov	r2, r5
 800bce2:	4621      	mov	r1, r4
 800bce4:	bf28      	it	cs
 800bce6:	4632      	movcs	r2, r6
 800bce8:	f7ff ffca 	bl	800bc80 <memcpy>
 800bcec:	4621      	mov	r1, r4
 800bcee:	4640      	mov	r0, r8
 800bcf0:	f7ff fbbe 	bl	800b470 <_free_r>
 800bcf4:	463c      	mov	r4, r7
 800bcf6:	e7e0      	b.n	800bcba <_realloc_r+0x1e>

0800bcf8 <_malloc_usable_size_r>:
 800bcf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcfc:	1f18      	subs	r0, r3, #4
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	bfbc      	itt	lt
 800bd02:	580b      	ldrlt	r3, [r1, r0]
 800bd04:	18c0      	addlt	r0, r0, r3
 800bd06:	4770      	bx	lr

0800bd08 <_init>:
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	bf00      	nop
 800bd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd0e:	bc08      	pop	{r3}
 800bd10:	469e      	mov	lr, r3
 800bd12:	4770      	bx	lr

0800bd14 <_fini>:
 800bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd16:	bf00      	nop
 800bd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd1a:	bc08      	pop	{r3}
 800bd1c:	469e      	mov	lr, r3
 800bd1e:	4770      	bx	lr
