
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b884  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800bb54  0800bb54  0000cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bd20  0800bd20  0000cd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bd28  0800bd28  0000cd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bd2c  0800bd2c  0000cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000318  24000000  0800bd30  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000fa8  24000318  0800c048  0000d318  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240012c0  0800c048  0000e2c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019485  00000000  00000000  0000d346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003695  00000000  00000000  000267cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001190  00000000  00000000  00029e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d5c  00000000  00000000  0002aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010698  00000000  00000000  0002bd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00006558  00000000  00000000  0003c3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0004293c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004dc0  00000000  00000000  00042980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  00047740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000318 	.word	0x24000318
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bb3c 	.word	0x0800bb3c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400031c 	.word	0x2400031c
 800030c:	0800bb3c 	.word	0x0800bb3c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:




// GPIO 상태를 스캔하고 변경된 핀 정보를 반환하는 함수
MatrixScanResult MatrixScan() {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b0cf      	sub	sp, #316	@ 0x13c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80006ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80006be:	6018      	str	r0, [r3, #0]
    static uint32_t Last_gpioG_state = 0;
    static uint32_t Last_gpioH_state = 0;
    //static uint32_t Last_gpioI_state = 0;

    // 현재 GPIO 상태 읽기
    uint32_t gpioA_state = (~(GPIOA->IDR)) & 0b1001111111010100;
 80006c0:	4bce      	ldr	r3, [pc, #824]	@ (80009fc <MatrixScan+0x34c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	43da      	mvns	r2, r3
 80006c6:	f649 73d4 	movw	r3, #40916	@ 0x9fd4
 80006ca:	4013      	ands	r3, r2
 80006cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    uint32_t gpioB_state = (~(GPIOB->IDR)) & 0b1100001111011100;
 80006d0:	4bcb      	ldr	r3, [pc, #812]	@ (8000a00 <MatrixScan+0x350>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	43da      	mvns	r2, r3
 80006d6:	f24c 33dc 	movw	r3, #50140	@ 0xc3dc
 80006da:	4013      	ands	r3, r2
 80006dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    uint32_t gpioC_state = (~(GPIOC->IDR)) & 0b1111111111110010;
 80006e0:	4bc8      	ldr	r3, [pc, #800]	@ (8000a04 <MatrixScan+0x354>)
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	43da      	mvns	r2, r3
 80006e6:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80006ea:	4013      	ands	r3, r2
 80006ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    uint32_t gpioD_state = (~(GPIOD->IDR)) & 0b1111111111111111;
 80006f0:	4bc5      	ldr	r3, [pc, #788]	@ (8000a08 <MatrixScan+0x358>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    uint32_t gpioE_state = (~(GPIOE->IDR)) & 0b1111111111110111;
 80006fc:	4bc3      	ldr	r3, [pc, #780]	@ (8000a0c <MatrixScan+0x35c>)
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	43da      	mvns	r2, r3
 8000702:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8000706:	4013      	ands	r3, r2
 8000708:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    uint32_t gpioF_state = (~(GPIOF->IDR)) & 0b1111111111111111;
 800070c:	4bc0      	ldr	r3, [pc, #768]	@ (8000a10 <MatrixScan+0x360>)
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	43db      	mvns	r3, r3
 8000712:	b29b      	uxth	r3, r3
 8000714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    uint32_t gpioG_state = (~(GPIOG->IDR)) & 0b1111111111111111;
 8000718:	4bbe      	ldr	r3, [pc, #760]	@ (8000a14 <MatrixScan+0x364>)
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	43db      	mvns	r3, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    uint32_t gpioH_state = (~(GPIOH->IDR)) & 0b1111111111111100;
 8000724:	4bbc      	ldr	r3, [pc, #752]	@ (8000a18 <MatrixScan+0x368>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	43da      	mvns	r2, r3
 800072a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800072e:	4013      	ands	r3, r2
 8000730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    //uint32_t gpioI_state = (-(GPIOI->IDR)) & 0b1111111111111111;


    // 변경된 비트 계산 (XOR 연산)
    uint32_t changedPinA = gpioA_state ^ Last_gpioA_state;
 8000734:	4bb9      	ldr	r3, [pc, #740]	@ (8000a1c <MatrixScan+0x36c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800073c:	4053      	eors	r3, r2
 800073e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    uint32_t changedPinB = gpioB_state ^ Last_gpioB_state;
 8000742:	4bb7      	ldr	r3, [pc, #732]	@ (8000a20 <MatrixScan+0x370>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800074a:	4053      	eors	r3, r2
 800074c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    uint32_t changedPinC = gpioC_state ^ Last_gpioC_state;
 8000750:	4bb4      	ldr	r3, [pc, #720]	@ (8000a24 <MatrixScan+0x374>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000758:	4053      	eors	r3, r2
 800075a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 800075e:	4bb2      	ldr	r3, [pc, #712]	@ (8000a28 <MatrixScan+0x378>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000766:	4053      	eors	r3, r2
 8000768:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 800076c:	4baf      	ldr	r3, [pc, #700]	@ (8000a2c <MatrixScan+0x37c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000774:	4053      	eors	r3, r2
 8000776:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    uint32_t changedPinF = gpioF_state ^ Last_gpioF_state;
 800077a:	4bad      	ldr	r3, [pc, #692]	@ (8000a30 <MatrixScan+0x380>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000782:	4053      	eors	r3, r2
 8000784:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint32_t changedPinG = gpioG_state ^ Last_gpioG_state;
 8000788:	4baa      	ldr	r3, [pc, #680]	@ (8000a34 <MatrixScan+0x384>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000790:	4053      	eors	r3, r2
 8000792:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    uint32_t changedPinH = gpioH_state ^ Last_gpioH_state;
 8000796:	4ba8      	ldr	r3, [pc, #672]	@ (8000a38 <MatrixScan+0x388>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800079e:	4053      	eors	r3, r2
 80007a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    //uint32_t changedPinI = gpioI_state ^ Last_gpioI_state;

    MatrixScanResult result;
    result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
 80007a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    result.pinState = -1;
 80007ac:	23ff      	movs	r3, #255	@ 0xff
 80007ae:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
    //char message[100];
    //sprintf(message, "A = %u | B = %u | C = %u | D = %u | E = %u \n\r", gpioA_state,gpioB_state,gpioC_state,gpioD_state,gpioE_state );
    //HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    // 포트 A~E 순서대로 변경된 핀 확인
    if (changedPinA != 0)
 80007b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d023      	beq.n	8000802 <MatrixScan+0x152>
    {
        int bitPosition = -1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        while ( changedPinA )
 80007c2:	e009      	b.n	80007d8 <MatrixScan+0x128>
        {
            changedPinA >>= 1; // 오른쪽으로 시프트
 80007c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            bitPosition++;
 80007ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80007d2:	3301      	adds	r3, #1
 80007d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        while ( changedPinA )
 80007d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f1      	bne.n	80007c4 <MatrixScan+0x114>
        }

        result.pinNumber = bitPosition; // 핀 번호 (포트 A는 0 ~ 15)
 80007e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80007e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioA_state >> bitPosition) & 1; // 현재 상태
 80007e8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80007ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80007f0:	fa22 f303 	lsr.w	r3, r2, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 8000800:	e13b      	b.n	8000a7a <MatrixScan+0x3ca>
//        char message[100];
//        sprintf(message, "A | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinB != 0 )
 8000802:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000806:	2b00      	cmp	r3, #0
 8000808:	d024      	beq.n	8000854 <MatrixScan+0x1a4>
    {
        int bitPosition = -1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        while ( changedPinB )
 8000812:	e009      	b.n	8000828 <MatrixScan+0x178>
        {
            changedPinB >>= 1;
 8000814:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
            bitPosition++;
 800081e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000822:	3301      	adds	r3, #1
 8000824:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        while ( changedPinB )
 8000828:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f1      	bne.n	8000814 <MatrixScan+0x164>
        }

        result.pinNumber = bitPosition + 16; // 핀 번호 (포트 B는 16 ~ 31)
 8000830:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000834:	3310      	adds	r3, #16
 8000836:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioB_state >> bitPosition) & 1;
 800083a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800083e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000842:	fa22 f303 	lsr.w	r3, r2, r3
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 8000852:	e112      	b.n	8000a7a <MatrixScan+0x3ca>
//        char message[100];
//        sprintf(message, "B | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinC != 0 )
 8000854:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000858:	2b00      	cmp	r3, #0
 800085a:	d024      	beq.n	80008a6 <MatrixScan+0x1f6>
    {
        int bitPosition = -1;
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        while ( changedPinC )
 8000864:	e009      	b.n	800087a <MatrixScan+0x1ca>
        {
            changedPinC >>= 1;
 8000866:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800086a:	085b      	lsrs	r3, r3, #1
 800086c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
            bitPosition++;
 8000870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000874:	3301      	adds	r3, #1
 8000876:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        while ( changedPinC )
 800087a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f1      	bne.n	8000866 <MatrixScan+0x1b6>
        }

        result.pinNumber = bitPosition + 32; // 핀 번호 (포트 C는 32 ~ 47)
 8000882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000886:	3320      	adds	r3, #32
 8000888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioC_state >> bitPosition) & 1;
 800088c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000894:	fa22 f303 	lsr.w	r3, r2, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 80008a4:	e0e9      	b.n	8000a7a <MatrixScan+0x3ca>
//        char message[100];
//        sprintf(message, "C | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinD != 0 )
 80008a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d024      	beq.n	80008f8 <MatrixScan+0x248>
    {
        int bitPosition = -1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        while ( changedPinD )
 80008b6:	e009      	b.n	80008cc <MatrixScan+0x21c>
        {
            changedPinD >>= 1;
 80008b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            bitPosition++;
 80008c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80008c6:	3301      	adds	r3, #1
 80008c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        while ( changedPinD )
 80008cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f1      	bne.n	80008b8 <MatrixScan+0x208>
        }

        result.pinNumber = bitPosition + 48; // 핀 번호 (포트 D는 48 ~ 63)
 80008d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80008d8:	3330      	adds	r3, #48	@ 0x30
 80008da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioD_state >> bitPosition) & 1;
 80008de:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80008e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80008e6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 80008f6:	e0c0      	b.n	8000a7a <MatrixScan+0x3ca>
//        char message[100];
//        sprintf(message, "D | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinE != 0 )
 80008f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d024      	beq.n	800094a <MatrixScan+0x29a>
    {
        int bitPosition = -1;
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        while ( changedPinE )
 8000908:	e009      	b.n	800091e <MatrixScan+0x26e>
        {
            changedPinE >>= 1;
 800090a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800090e:	085b      	lsrs	r3, r3, #1
 8000910:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            bitPosition++;
 8000914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000918:	3301      	adds	r3, #1
 800091a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        while ( changedPinE )
 800091e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1f1      	bne.n	800090a <MatrixScan+0x25a>
        }

        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800092a:	3340      	adds	r3, #64	@ 0x40
 800092c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioE_state >> bitPosition) & 1;
 8000930:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000938:	fa22 f303 	lsr.w	r3, r2, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 8000948:	e097      	b.n	8000a7a <MatrixScan+0x3ca>
//        char message[100];
//        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinF != 0 )
 800094a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800094e:	2b00      	cmp	r3, #0
 8000950:	d024      	beq.n	800099c <MatrixScan+0x2ec>
    {
        int bitPosition = -1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        while ( changedPinF )
 800095a:	e009      	b.n	8000970 <MatrixScan+0x2c0>
        {
            changedPinF >>= 1;
 800095c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            bitPosition++;
 8000966:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800096a:	3301      	adds	r3, #1
 800096c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        while ( changedPinF )
 8000970:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1f1      	bne.n	800095c <MatrixScan+0x2ac>
        }

        result.pinNumber = bitPosition + 80; // 핀 번호 (포트 E는 64 ~ 79)
 8000978:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800097c:	3350      	adds	r3, #80	@ 0x50
 800097e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioF_state >> bitPosition) & 1;
 8000982:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000986:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800098a:	fa22 f303 	lsr.w	r3, r2, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 800099a:	e06e      	b.n	8000a7a <MatrixScan+0x3ca>
//        char message[100];
//        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinG != 0 )
 800099c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d023      	beq.n	80009ec <MatrixScan+0x33c>
    {
        int bitPosition = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
        while ( changedPinG )
 80009aa:	e009      	b.n	80009c0 <MatrixScan+0x310>
        {
        	changedPinG >>= 1;
 80009ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
            bitPosition++;
 80009b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80009ba:	3301      	adds	r3, #1
 80009bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
        while ( changedPinG )
 80009c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f1      	bne.n	80009ac <MatrixScan+0x2fc>
        }

        result.pinNumber = bitPosition + 96; // 핀 번호 (포트 E는 64 ~ 79)
 80009c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80009cc:	3360      	adds	r3, #96	@ 0x60
 80009ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioG_state >> bitPosition) & 1;
 80009d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80009d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80009da:	fa22 f303 	lsr.w	r3, r2, r3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 80009ea:	e046      	b.n	8000a7a <MatrixScan+0x3ca>
//        char message[100];
//        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinH != 0 )
 80009ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d042      	beq.n	8000a7a <MatrixScan+0x3ca>
    {
        int bitPosition = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        while ( changedPinH )
 80009fa:	e029      	b.n	8000a50 <MatrixScan+0x3a0>
 80009fc:	58020000 	.word	0x58020000
 8000a00:	58020400 	.word	0x58020400
 8000a04:	58020800 	.word	0x58020800
 8000a08:	58020c00 	.word	0x58020c00
 8000a0c:	58021000 	.word	0x58021000
 8000a10:	58021400 	.word	0x58021400
 8000a14:	58021800 	.word	0x58021800
 8000a18:	58021c00 	.word	0x58021c00
 8000a1c:	24000778 	.word	0x24000778
 8000a20:	2400077c 	.word	0x2400077c
 8000a24:	24000780 	.word	0x24000780
 8000a28:	24000784 	.word	0x24000784
 8000a2c:	24000788 	.word	0x24000788
 8000a30:	2400078c 	.word	0x2400078c
 8000a34:	24000790 	.word	0x24000790
 8000a38:	24000794 	.word	0x24000794
        {
        	changedPinH >>= 1;
 8000a3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000a40:	085b      	lsrs	r3, r3, #1
 8000a42:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            bitPosition++;
 8000a46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        while ( changedPinH )
 8000a50:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f1      	bne.n	8000a3c <MatrixScan+0x38c>
        }

        result.pinNumber = bitPosition + 112; // 핀 번호 (포트 E는 64 ~ 79)
 8000a58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000a5c:	3370      	adds	r3, #112	@ 0x70
 8000a5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioH_state >> bitPosition) & 1;
 8000a62:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4


    // 이전 상태 업데이트

    char message[100];
	sprintf(message, "GENERAL | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a7e:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8000a82:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8000a86:	493f      	ldr	r1, [pc, #252]	@ (8000b84 <MatrixScan+0x4d4>)
 8000a88:	f00a fbb8 	bl	800b1fc <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000a8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fc3d 	bl	8000310 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	4839      	ldr	r0, [pc, #228]	@ (8000b88 <MatrixScan+0x4d8>)
 8000aa4:	f005 fc0e 	bl	80062c4 <HAL_UART_Transmit>

    if ( HAL_GetTick() - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME)
 8000aa8:	f001 f862 	bl	8001b70 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000ab2:	4936      	ldr	r1, [pc, #216]	@ (8000b8c <MatrixScan+0x4dc>)
 8000ab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b05      	cmp	r3, #5
 8000abc:	d928      	bls.n	8000b10 <MatrixScan+0x460>
    {



        DebounceTimer[result.pinNumber] = HAL_GetTick();
 8000abe:	f8d7 40d0 	ldr.w	r4, [r7, #208]	@ 0xd0
 8000ac2:	f001 f855 	bl	8001b70 <HAL_GetTick>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a30      	ldr	r2, [pc, #192]	@ (8000b8c <MatrixScan+0x4dc>)
 8000aca:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        Last_gpioA_state = gpioA_state;
 8000ace:	4a30      	ldr	r2, [pc, #192]	@ (8000b90 <MatrixScan+0x4e0>)
 8000ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000ad4:	6013      	str	r3, [r2, #0]
        Last_gpioB_state = gpioB_state;
 8000ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b94 <MatrixScan+0x4e4>)
 8000ad8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000adc:	6013      	str	r3, [r2, #0]
        Last_gpioC_state = gpioC_state;
 8000ade:	4a2e      	ldr	r2, [pc, #184]	@ (8000b98 <MatrixScan+0x4e8>)
 8000ae0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000ae4:	6013      	str	r3, [r2, #0]
        Last_gpioD_state = gpioD_state;
 8000ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8000b9c <MatrixScan+0x4ec>)
 8000ae8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000aec:	6013      	str	r3, [r2, #0]
        Last_gpioE_state = gpioE_state;
 8000aee:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba0 <MatrixScan+0x4f0>)
 8000af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000af4:	6013      	str	r3, [r2, #0]
        Last_gpioF_state = gpioF_state;
 8000af6:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba4 <MatrixScan+0x4f4>)
 8000af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000afc:	6013      	str	r3, [r2, #0]
        Last_gpioG_state = gpioG_state;
 8000afe:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba8 <MatrixScan+0x4f8>)
 8000b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000b04:	6013      	str	r3, [r2, #0]
        Last_gpioH_state = gpioH_state;
 8000b06:	4a29      	ldr	r2, [pc, #164]	@ (8000bac <MatrixScan+0x4fc>)
 8000b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e023      	b.n	8000b58 <MatrixScan+0x4a8>
        // Last_gpioI_state = gpioI_s tate;
    }
    else
    {
        result.pinNumber = -1; // 핀 번호 (포트 E는 64 ~ 79)
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = -1;
 8000b18:	23ff      	movs	r3, #255	@ 0xff
 8000b1a:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

		char message[100];
		sprintf(message, "DEB %d \n\r", HAL_GetTick() - DebounceTimer[result.pinNumber]);
 8000b1e:	f001 f827 	bl	8001b70 <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000b28:	4918      	ldr	r1, [pc, #96]	@ (8000b8c <MatrixScan+0x4dc>)
 8000b2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b2e:	1ad2      	subs	r2, r2, r3
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	491e      	ldr	r1, [pc, #120]	@ (8000bb0 <MatrixScan+0x500>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00a fb60 	bl	800b1fc <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fbe5 	bl	8000310 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f107 0108 	add.w	r1, r7, #8
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <MatrixScan+0x4d8>)
 8000b54:	f005 fbb6 	bl	80062c4 <HAL_UART_Transmit>

    }
    return result;
 8000b58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b6c:	e882 0003 	stmia.w	r2, {r0, r1}





}
 8000b70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b74:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	0800bb54 	.word	0x0800bb54
 8000b88:	2400033c 	.word	0x2400033c
 8000b8c:	24000578 	.word	0x24000578
 8000b90:	24000778 	.word	0x24000778
 8000b94:	2400077c 	.word	0x2400077c
 8000b98:	24000780 	.word	0x24000780
 8000b9c:	24000784 	.word	0x24000784
 8000ba0:	24000788 	.word	0x24000788
 8000ba4:	2400078c 	.word	0x2400078c
 8000ba8:	24000790 	.word	0x24000790
 8000bac:	24000794 	.word	0x24000794
 8000bb0:	0800bb80 	.word	0x0800bb80

08000bb4 <SetKeycode>:




void SetKeycode(int keycode)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == 0x00)
 8000bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8000ce8 <SetKeycode+0x134>)
 8000bbe:	789b      	ldrb	r3, [r3, #2]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d104      	bne.n	8000bce <SetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = keycode;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b47      	ldr	r3, [pc, #284]	@ (8000ce8 <SetKeycode+0x134>)
 8000bca:	709a      	strb	r2, [r3, #2]
    }
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
    {
        keyboardReport.Keycode6 = keycode;
    }
}
 8000bcc:	e086      	b.n	8000cdc <SetKeycode+0x128>
    else if (keyboardReport.Keycode2 == 0x00 && keycode != keyboardReport.Keycode1)
 8000bce:	4b46      	ldr	r3, [pc, #280]	@ (8000ce8 <SetKeycode+0x134>)
 8000bd0:	78db      	ldrb	r3, [r3, #3]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10a      	bne.n	8000bec <SetKeycode+0x38>
 8000bd6:	4b44      	ldr	r3, [pc, #272]	@ (8000ce8 <SetKeycode+0x134>)
 8000bd8:	789b      	ldrb	r3, [r3, #2]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d004      	beq.n	8000bec <SetKeycode+0x38>
        keyboardReport.Keycode2 = keycode;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b40      	ldr	r3, [pc, #256]	@ (8000ce8 <SetKeycode+0x134>)
 8000be8:	70da      	strb	r2, [r3, #3]
 8000bea:	e077      	b.n	8000cdc <SetKeycode+0x128>
    else if (keyboardReport.Keycode3 == 0x00 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000bec:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce8 <SetKeycode+0x134>)
 8000bee:	791b      	ldrb	r3, [r3, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d110      	bne.n	8000c16 <SetKeycode+0x62>
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce8 <SetKeycode+0x134>)
 8000bf6:	78db      	ldrb	r3, [r3, #3]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d00a      	beq.n	8000c16 <SetKeycode+0x62>
 8000c00:	4b39      	ldr	r3, [pc, #228]	@ (8000ce8 <SetKeycode+0x134>)
 8000c02:	789b      	ldrb	r3, [r3, #2]
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d004      	beq.n	8000c16 <SetKeycode+0x62>
        keyboardReport.Keycode3 = keycode;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <SetKeycode+0x134>)
 8000c12:	711a      	strb	r2, [r3, #4]
 8000c14:	e062      	b.n	8000cdc <SetKeycode+0x128>
    else if (keyboardReport.Keycode4 == 0x00 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000c16:	4b34      	ldr	r3, [pc, #208]	@ (8000ce8 <SetKeycode+0x134>)
 8000c18:	795b      	ldrb	r3, [r3, #5]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d116      	bne.n	8000c4c <SetKeycode+0x98>
 8000c1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ce8 <SetKeycode+0x134>)
 8000c20:	791b      	ldrb	r3, [r3, #4]
 8000c22:	461a      	mov	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d010      	beq.n	8000c4c <SetKeycode+0x98>
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <SetKeycode+0x134>)
 8000c2c:	78db      	ldrb	r3, [r3, #3]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d00a      	beq.n	8000c4c <SetKeycode+0x98>
 8000c36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <SetKeycode+0x134>)
 8000c38:	789b      	ldrb	r3, [r3, #2]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d004      	beq.n	8000c4c <SetKeycode+0x98>
        keyboardReport.Keycode4 = keycode;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <SetKeycode+0x134>)
 8000c48:	715a      	strb	r2, [r3, #5]
 8000c4a:	e047      	b.n	8000cdc <SetKeycode+0x128>
    else if (keyboardReport.Keycode5 == 0x00 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000c4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ce8 <SetKeycode+0x134>)
 8000c4e:	799b      	ldrb	r3, [r3, #6]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11c      	bne.n	8000c8e <SetKeycode+0xda>
 8000c54:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <SetKeycode+0x134>)
 8000c56:	795b      	ldrb	r3, [r3, #5]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d016      	beq.n	8000c8e <SetKeycode+0xda>
 8000c60:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <SetKeycode+0x134>)
 8000c62:	791b      	ldrb	r3, [r3, #4]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d010      	beq.n	8000c8e <SetKeycode+0xda>
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <SetKeycode+0x134>)
 8000c6e:	78db      	ldrb	r3, [r3, #3]
 8000c70:	461a      	mov	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d00a      	beq.n	8000c8e <SetKeycode+0xda>
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <SetKeycode+0x134>)
 8000c7a:	789b      	ldrb	r3, [r3, #2]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d004      	beq.n	8000c8e <SetKeycode+0xda>
        keyboardReport.Keycode5 = keycode;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <SetKeycode+0x134>)
 8000c8a:	719a      	strb	r2, [r3, #6]
 8000c8c:	e026      	b.n	8000cdc <SetKeycode+0x128>
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <SetKeycode+0x134>)
 8000c90:	79db      	ldrb	r3, [r3, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d122      	bne.n	8000cdc <SetKeycode+0x128>
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <SetKeycode+0x134>)
 8000c98:	799b      	ldrb	r3, [r3, #6]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d01c      	beq.n	8000cdc <SetKeycode+0x128>
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <SetKeycode+0x134>)
 8000ca4:	795b      	ldrb	r3, [r3, #5]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d016      	beq.n	8000cdc <SetKeycode+0x128>
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <SetKeycode+0x134>)
 8000cb0:	791b      	ldrb	r3, [r3, #4]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d010      	beq.n	8000cdc <SetKeycode+0x128>
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <SetKeycode+0x134>)
 8000cbc:	78db      	ldrb	r3, [r3, #3]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d00a      	beq.n	8000cdc <SetKeycode+0x128>
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <SetKeycode+0x134>)
 8000cc8:	789b      	ldrb	r3, [r3, #2]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d004      	beq.n	8000cdc <SetKeycode+0x128>
        keyboardReport.Keycode6 = keycode;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <SetKeycode+0x134>)
 8000cd8:	71da      	strb	r2, [r3, #7]
}
 8000cda:	e7ff      	b.n	8000cdc <SetKeycode+0x128>
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	24000334 	.word	0x24000334

08000cec <ResetKeycode>:

void ResetKeycode(int keycode)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == keycode)
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <ResetKeycode+0x80>)
 8000cf6:	789b      	ldrb	r3, [r3, #2]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d102      	bne.n	8000d06 <ResetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = 0x00;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <ResetKeycode+0x80>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	709a      	strb	r2, [r3, #2]
    }
    if (keyboardReport.Keycode2 == keycode)
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <ResetKeycode+0x80>)
 8000d08:	78db      	ldrb	r3, [r3, #3]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d102      	bne.n	8000d18 <ResetKeycode+0x2c>
    {
        keyboardReport.Keycode2 = 0x00;
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <ResetKeycode+0x80>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	70da      	strb	r2, [r3, #3]
    }
    if (keyboardReport.Keycode3 == keycode)
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <ResetKeycode+0x80>)
 8000d1a:	791b      	ldrb	r3, [r3, #4]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d102      	bne.n	8000d2a <ResetKeycode+0x3e>
    {
        keyboardReport.Keycode3 = 0x00;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <ResetKeycode+0x80>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	711a      	strb	r2, [r3, #4]
    }
    if (keyboardReport.Keycode4 == keycode)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <ResetKeycode+0x80>)
 8000d2c:	795b      	ldrb	r3, [r3, #5]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d102      	bne.n	8000d3c <ResetKeycode+0x50>
    {
        keyboardReport.Keycode4 = 0x00;
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <ResetKeycode+0x80>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	715a      	strb	r2, [r3, #5]
    }
    if (keyboardReport.Keycode5 == keycode)
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <ResetKeycode+0x80>)
 8000d3e:	799b      	ldrb	r3, [r3, #6]
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d102      	bne.n	8000d4e <ResetKeycode+0x62>
    {
        keyboardReport.Keycode5 = 0x00;
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <ResetKeycode+0x80>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	719a      	strb	r2, [r3, #6]
    }
    if (keyboardReport.Keycode6 == keycode)
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <ResetKeycode+0x80>)
 8000d50:	79db      	ldrb	r3, [r3, #7]
 8000d52:	461a      	mov	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d102      	bne.n	8000d60 <ResetKeycode+0x74>
    {
        keyboardReport.Keycode6 = 0x00;
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <ResetKeycode+0x80>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	71da      	strb	r2, [r3, #7]
    }
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	24000334 	.word	0x24000334

08000d70 <KeycodeSend>:

void KeycodeSend()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b09a      	sub	sp, #104	@ 0x68
 8000d74:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t *)&keyboardReport, sizeof(keyboardReport));
 8000d76:	2208      	movs	r2, #8
 8000d78:	490c      	ldr	r1, [pc, #48]	@ (8000dac <KeycodeSend+0x3c>)
 8000d7a:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <KeycodeSend+0x40>)
 8000d7c:	f008 f9ce 	bl	800911c <USBD_HID_SendReport>

    char message[100];
    sprintf(message, "KeycodeSend \n\r");
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	490c      	ldr	r1, [pc, #48]	@ (8000db4 <KeycodeSend+0x44>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00a fa39 	bl	800b1fc <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fabf 	bl	8000310 <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	1d39      	adds	r1, r7, #4
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <KeycodeSend+0x48>)
 8000d9e:	f005 fa91 	bl	80062c4 <HAL_UART_Transmit>
}
 8000da2:	bf00      	nop
 8000da4:	3768      	adds	r7, #104	@ 0x68
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000334 	.word	0x24000334
 8000db0:	240007a4 	.word	0x240007a4
 8000db4:	0800bb8c 	.word	0x0800bb8c
 8000db8:	2400033c 	.word	0x2400033c

08000dbc <PressKeycodes>:

void PressKeycodes(int i)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b09c      	sub	sp, #112	@ 0x70
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

	if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000dc4:	4b89      	ldr	r3, [pc, #548]	@ (8000fec <PressKeycodes+0x230>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4989      	ldr	r1, [pc, #548]	@ (8000ff0 <PressKeycodes+0x234>)
 8000dca:	2264      	movs	r2, #100	@ 0x64
 8000dcc:	fb03 f202 	mul.w	r2, r3, r2
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dd8:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d925      	bls.n	8000e2c <PressKeycodes+0x70>
	{
		KeyTimer = HAL_GetTick();
 8000de0:	f000 fec6 	bl	8001b70 <HAL_GetTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b82      	ldr	r3, [pc, #520]	@ (8000ff4 <PressKeycodes+0x238>)
 8000dea:	601a      	str	r2, [r3, #0]

		char message5[100];
		sprintf(message5, "HoldTapPress = %d \n\r", Keycode[LayerState][i]);
 8000dec:	4b7f      	ldr	r3, [pc, #508]	@ (8000fec <PressKeycodes+0x230>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	497f      	ldr	r1, [pc, #508]	@ (8000ff0 <PressKeycodes+0x234>)
 8000df2:	2264      	movs	r2, #100	@ 0x64
 8000df4:	fb03 f202 	mul.w	r2, r3, r2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e00:	461a      	mov	r2, r3
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	497c      	ldr	r1, [pc, #496]	@ (8000ff8 <PressKeycodes+0x23c>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00a f9f7 	bl	800b1fc <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fa7c 	bl	8000310 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	f107 010c 	add.w	r1, r7, #12
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	4875      	ldr	r0, [pc, #468]	@ (8000ffc <PressKeycodes+0x240>)
 8000e26:	f005 fa4d 	bl	80062c4 <HAL_UART_Transmit>

		char message4[100];
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
	}
}
 8000e2a:	e0db      	b.n	8000fe4 <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 10000)
 8000e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8000fec <PressKeycodes+0x230>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	496f      	ldr	r1, [pc, #444]	@ (8000ff0 <PressKeycodes+0x234>)
 8000e32:	2264      	movs	r2, #100	@ 0x64
 8000e34:	fb03 f202 	mul.w	r2, r3, r2
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e40:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d941      	bls.n	8000ecc <PressKeycodes+0x110>
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i] - 10000];
 8000e48:	4b68      	ldr	r3, [pc, #416]	@ (8000fec <PressKeycodes+0x230>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4968      	ldr	r1, [pc, #416]	@ (8000ff0 <PressKeycodes+0x234>)
 8000e4e:	2264      	movs	r2, #100	@ 0x64
 8000e50:	fb03 f202 	mul.w	r2, r3, r2
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b68      	ldr	r3, [pc, #416]	@ (8001000 <PressKeycodes+0x244>)
 8000e60:	4413      	add	r3, r2
 8000e62:	4a68      	ldr	r2, [pc, #416]	@ (8001004 <PressKeycodes+0x248>)
 8000e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	4b67      	ldr	r3, [pc, #412]	@ (8001008 <PressKeycodes+0x24c>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b64      	ldr	r3, [pc, #400]	@ (8001008 <PressKeycodes+0x24c>)
 8000e78:	701a      	strb	r2, [r3, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 8000e7a:	4b63      	ldr	r3, [pc, #396]	@ (8001008 <PressKeycodes+0x24c>)
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	4b63      	ldr	r3, [pc, #396]	@ (800100c <PressKeycodes+0x250>)
 8000e80:	701a      	strb	r2, [r3, #0]
		sprintf(message1, "ModifierPress = %d \n\r", Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8000e82:	4b5a      	ldr	r3, [pc, #360]	@ (8000fec <PressKeycodes+0x230>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	495a      	ldr	r1, [pc, #360]	@ (8000ff0 <PressKeycodes+0x234>)
 8000e88:	2264      	movs	r2, #100	@ 0x64
 8000e8a:	fb03 f202 	mul.w	r2, r3, r2
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b59      	ldr	r3, [pc, #356]	@ (8001000 <PressKeycodes+0x244>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a59      	ldr	r2, [pc, #356]	@ (8001004 <PressKeycodes+0x248>)
 8000e9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	495a      	ldr	r1, [pc, #360]	@ (8001010 <PressKeycodes+0x254>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00a f9a7 	bl	800b1fc <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fa2c 	bl	8000310 <strlen>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	f107 010c 	add.w	r1, r7, #12
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	484d      	ldr	r0, [pc, #308]	@ (8000ffc <PressKeycodes+0x240>)
 8000ec6:	f005 f9fd 	bl	80062c4 <HAL_UART_Transmit>
}
 8000eca:	e08b      	b.n	8000fe4 <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 5000)
 8000ecc:	4b47      	ldr	r3, [pc, #284]	@ (8000fec <PressKeycodes+0x230>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4947      	ldr	r1, [pc, #284]	@ (8000ff0 <PressKeycodes+0x234>)
 8000ed2:	2264      	movs	r2, #100	@ 0x64
 8000ed4:	fb03 f202 	mul.w	r2, r3, r2
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ee0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d94b      	bls.n	8000f80 <PressKeycodes+0x1c4>
		if ( Keycode[LayerState][i] == KC_FN1)
 8000ee8:	4b40      	ldr	r3, [pc, #256]	@ (8000fec <PressKeycodes+0x230>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4940      	ldr	r1, [pc, #256]	@ (8000ff0 <PressKeycodes+0x234>)
 8000eee:	2264      	movs	r2, #100	@ 0x64
 8000ef0:	fb03 f202 	mul.w	r2, r3, r2
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d103      	bne.n	8000f0c <PressKeycodes+0x150>
			LayerState = 1; // Layer1 when pressed
 8000f04:	4b39      	ldr	r3, [pc, #228]	@ (8000fec <PressKeycodes+0x230>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e022      	b.n	8000f52 <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD0)
 8000f0c:	4b37      	ldr	r3, [pc, #220]	@ (8000fec <PressKeycodes+0x230>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4937      	ldr	r1, [pc, #220]	@ (8000ff0 <PressKeycodes+0x234>)
 8000f12:	2264      	movs	r2, #100	@ 0x64
 8000f14:	fb03 f202 	mul.w	r2, r3, r2
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f20:	f241 3289 	movw	r2, #5001	@ 0x1389
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d103      	bne.n	8000f30 <PressKeycodes+0x174>
			LayerState = 0;
 8000f28:	4b30      	ldr	r3, [pc, #192]	@ (8000fec <PressKeycodes+0x230>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e010      	b.n	8000f52 <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD1)
 8000f30:	4b2e      	ldr	r3, [pc, #184]	@ (8000fec <PressKeycodes+0x230>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	492e      	ldr	r1, [pc, #184]	@ (8000ff0 <PressKeycodes+0x234>)
 8000f36:	2264      	movs	r2, #100	@ 0x64
 8000f38:	fb03 f202 	mul.w	r2, r3, r2
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f44:	f241 328a 	movw	r2, #5002	@ 0x138a
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d102      	bne.n	8000f52 <PressKeycodes+0x196>
			LayerState = 1;
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <PressKeycodes+0x230>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
		sprintf(message1, "Current Layer = %d \n\r", LayerState);
 8000f52:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <PressKeycodes+0x230>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	492e      	ldr	r1, [pc, #184]	@ (8001014 <PressKeycodes+0x258>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00a f94d 	bl	800b1fc <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f9d2 	bl	8000310 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f107 010c 	add.w	r1, r7, #12
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	4820      	ldr	r0, [pc, #128]	@ (8000ffc <PressKeycodes+0x240>)
 8000f7a:	f005 f9a3 	bl	80062c4 <HAL_UART_Transmit>
}
 8000f7e:	e031      	b.n	8000fe4 <PressKeycodes+0x228>
		SetKeycode(Keycode[LayerState][i]);
 8000f80:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <PressKeycodes+0x230>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	491a      	ldr	r1, [pc, #104]	@ (8000ff0 <PressKeycodes+0x234>)
 8000f86:	2264      	movs	r2, #100	@ 0x64
 8000f88:	fb03 f202 	mul.w	r2, r3, r2
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe0d 	bl	8000bb4 <SetKeycode>
		WhichLayer[i] = LayerState;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <PressKeycodes+0x230>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	491e      	ldr	r1, [pc, #120]	@ (8001018 <PressKeycodes+0x25c>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <PressKeycodes+0x230>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4911      	ldr	r1, [pc, #68]	@ (8000ff0 <PressKeycodes+0x234>)
 8000fac:	2264      	movs	r2, #100	@ 0x64
 8000fae:	fb03 f202 	mul.w	r2, r3, r2
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4916      	ldr	r1, [pc, #88]	@ (800101c <PressKeycodes+0x260>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00a f91a 	bl	800b1fc <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f99f 	bl	8000310 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	f107 010c 	add.w	r1, r7, #12
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <PressKeycodes+0x240>)
 8000fe0:	f005 f970 	bl	80062c4 <HAL_UART_Transmit>
}
 8000fe4:	bf00      	nop
 8000fe6:	3770      	adds	r7, #112	@ 0x70
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	240003dc 	.word	0x240003dc
 8000ff0:	24000000 	.word	0x24000000
 8000ff4:	24000574 	.word	0x24000574
 8000ff8:	0800bb9c 	.word	0x0800bb9c
 8000ffc:	2400033c 	.word	0x2400033c
 8001000:	ffffd8f0 	.word	0xffffd8f0
 8001004:	24000190 	.word	0x24000190
 8001008:	240003d8 	.word	0x240003d8
 800100c:	24000334 	.word	0x24000334
 8001010:	0800bbb4 	.word	0x0800bbb4
 8001014:	0800bbcc 	.word	0x0800bbcc
 8001018:	240003e0 	.word	0x240003e0
 800101c:	0800bbe4 	.word	0x0800bbe4

08001020 <ReleaseKeycodes>:

void ReleaseKeycodes(int i)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09c      	sub	sp, #112	@ 0x70
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8001028:	4b8c      	ldr	r3, [pc, #560]	@ (800125c <ReleaseKeycodes+0x23c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	498c      	ldr	r1, [pc, #560]	@ (8001260 <ReleaseKeycodes+0x240>)
 800102e:	2264      	movs	r2, #100	@ 0x64
 8001030:	fb03 f202 	mul.w	r2, r3, r2
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800103c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001040:	4293      	cmp	r3, r2
 8001042:	d959      	bls.n	80010f8 <ReleaseKeycodes+0xd8>
    {
        if (HAL_GetTick() - KeyTimer > HOLD_TIME)
 8001044:	f000 fd94 	bl	8001b70 <HAL_GetTick>
 8001048:	4603      	mov	r3, r0
 800104a:	4a86      	ldr	r2, [pc, #536]	@ (8001264 <ReleaseKeycodes+0x244>)
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	2bfa      	cmp	r3, #250	@ 0xfa
 8001052:	d90e      	bls.n	8001072 <ReleaseKeycodes+0x52>
        {
            TempKeycode = Keycode[LayerState + 1][i]; // Hold 작동시 다음 레이어에 있는 키코드 전송
 8001054:	4b81      	ldr	r3, [pc, #516]	@ (800125c <ReleaseKeycodes+0x23c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4981      	ldr	r1, [pc, #516]	@ (8001260 <ReleaseKeycodes+0x240>)
 800105c:	2264      	movs	r2, #100	@ 0x64
 800105e:	fb03 f202 	mul.w	r2, r3, r2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800106a:	461a      	mov	r2, r3
 800106c:	4b7e      	ldr	r3, [pc, #504]	@ (8001268 <ReleaseKeycodes+0x248>)
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e00e      	b.n	8001090 <ReleaseKeycodes+0x70>
        }
        else
        {
            TempKeycode = Keycode[LayerState][i] - 30000; // Tap 작동시 현재 레이어에 있는 키코드 -30000 전송
 8001072:	4b7a      	ldr	r3, [pc, #488]	@ (800125c <ReleaseKeycodes+0x23c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	497a      	ldr	r1, [pc, #488]	@ (8001260 <ReleaseKeycodes+0x240>)
 8001078:	2264      	movs	r2, #100	@ 0x64
 800107a:	fb03 f202 	mul.w	r2, r3, r2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001086:	461a      	mov	r2, r3
 8001088:	4b78      	ldr	r3, [pc, #480]	@ (800126c <ReleaseKeycodes+0x24c>)
 800108a:	4413      	add	r3, r2
 800108c:	4a76      	ldr	r2, [pc, #472]	@ (8001268 <ReleaseKeycodes+0x248>)
 800108e:	6013      	str	r3, [r2, #0]
        }
        SetKeycode(TempKeycode);
 8001090:	4b75      	ldr	r3, [pc, #468]	@ (8001268 <ReleaseKeycodes+0x248>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fd8d 	bl	8000bb4 <SetKeycode>
        KeycodeSend();
 800109a:	f7ff fe69 	bl	8000d70 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 800109e:	2032      	movs	r0, #50	@ 0x32
 80010a0:	f000 fd72 	bl	8001b88 <HAL_Delay>
        ResetKeycode(TempKeycode);
 80010a4:	4b70      	ldr	r3, [pc, #448]	@ (8001268 <ReleaseKeycodes+0x248>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe1f 	bl	8000cec <ResetKeycode>
        KeycodeSend();
 80010ae:	f7ff fe5f 	bl	8000d70 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 80010b2:	2032      	movs	r0, #50	@ 0x32
 80010b4:	f000 fd68 	bl	8001b88 <HAL_Delay>

        char message5[100];
        sprintf(message5, "HoldTapRelease = %d \n\r", Keycode[LayerState][i]);
 80010b8:	4b68      	ldr	r3, [pc, #416]	@ (800125c <ReleaseKeycodes+0x23c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4968      	ldr	r1, [pc, #416]	@ (8001260 <ReleaseKeycodes+0x240>)
 80010be:	2264      	movs	r2, #100	@ 0x64
 80010c0:	fb03 f202 	mul.w	r2, r3, r2
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010cc:	461a      	mov	r2, r3
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4967      	ldr	r1, [pc, #412]	@ (8001270 <ReleaseKeycodes+0x250>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00a f891 	bl	800b1fc <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f916 	bl	8000310 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f107 010c 	add.w	r1, r7, #12
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	4860      	ldr	r0, [pc, #384]	@ (8001274 <ReleaseKeycodes+0x254>)
 80010f2:	f005 f8e7 	bl	80062c4 <HAL_UART_Transmit>
        char message5[100];
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
    }

}
 80010f6:	e0ac      	b.n	8001252 <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 10000)
 80010f8:	4b58      	ldr	r3, [pc, #352]	@ (800125c <ReleaseKeycodes+0x23c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4958      	ldr	r1, [pc, #352]	@ (8001260 <ReleaseKeycodes+0x240>)
 80010fe:	2264      	movs	r2, #100	@ 0x64
 8001100:	fb03 f202 	mul.w	r2, r3, r2
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800110c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001110:	4293      	cmp	r3, r2
 8001112:	d93e      	bls.n	8001192 <ReleaseKeycodes+0x172>
        Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8001114:	4b51      	ldr	r3, [pc, #324]	@ (800125c <ReleaseKeycodes+0x23c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4951      	ldr	r1, [pc, #324]	@ (8001260 <ReleaseKeycodes+0x240>)
 800111a:	2264      	movs	r2, #100	@ 0x64
 800111c:	fb03 f202 	mul.w	r2, r3, r2
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001128:	461a      	mov	r2, r3
 800112a:	4b53      	ldr	r3, [pc, #332]	@ (8001278 <ReleaseKeycodes+0x258>)
 800112c:	4413      	add	r3, r2
 800112e:	4a53      	ldr	r2, [pc, #332]	@ (800127c <ReleaseKeycodes+0x25c>)
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	b25b      	sxtb	r3, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	b25a      	sxtb	r2, r3
 800113a:	4b51      	ldr	r3, [pc, #324]	@ (8001280 <ReleaseKeycodes+0x260>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b25b      	sxtb	r3, r3
 8001140:	4013      	ands	r3, r2
 8001142:	b25b      	sxtb	r3, r3
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b4e      	ldr	r3, [pc, #312]	@ (8001280 <ReleaseKeycodes+0x260>)
 8001148:	701a      	strb	r2, [r3, #0]
        keyboardReport.MODIFIER = Modifier_Sum;
 800114a:	4b4d      	ldr	r3, [pc, #308]	@ (8001280 <ReleaseKeycodes+0x260>)
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	4b4d      	ldr	r3, [pc, #308]	@ (8001284 <ReleaseKeycodes+0x264>)
 8001150:	701a      	strb	r2, [r3, #0]
        sprintf(message2, "ModifierRelease = %d\n\r", Keycode[LayerState][i]);
 8001152:	4b42      	ldr	r3, [pc, #264]	@ (800125c <ReleaseKeycodes+0x23c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4942      	ldr	r1, [pc, #264]	@ (8001260 <ReleaseKeycodes+0x240>)
 8001158:	2264      	movs	r2, #100	@ 0x64
 800115a:	fb03 f202 	mul.w	r2, r3, r2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001166:	461a      	mov	r2, r3
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4946      	ldr	r1, [pc, #280]	@ (8001288 <ReleaseKeycodes+0x268>)
 800116e:	4618      	mov	r0, r3
 8001170:	f00a f844 	bl	800b1fc <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message2, strlen(message2), HAL_MAX_DELAY);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f8c9 	bl	8000310 <strlen>
 800117e:	4603      	mov	r3, r0
 8001180:	b29a      	uxth	r2, r3
 8001182:	f107 010c 	add.w	r1, r7, #12
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	483a      	ldr	r0, [pc, #232]	@ (8001274 <ReleaseKeycodes+0x254>)
 800118c:	f005 f89a 	bl	80062c4 <HAL_UART_Transmit>
}
 8001190:	e05f      	b.n	8001252 <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 5000 )
 8001192:	4b32      	ldr	r3, [pc, #200]	@ (800125c <ReleaseKeycodes+0x23c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4932      	ldr	r1, [pc, #200]	@ (8001260 <ReleaseKeycodes+0x240>)
 8001198:	2264      	movs	r2, #100	@ 0x64
 800119a:	fb03 f202 	mul.w	r2, r3, r2
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011a6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d927      	bls.n	80011fe <ReleaseKeycodes+0x1de>
    	if ( Keycode[LayerState][i] == KC_FN1 )
 80011ae:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <ReleaseKeycodes+0x23c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	492b      	ldr	r1, [pc, #172]	@ (8001260 <ReleaseKeycodes+0x240>)
 80011b4:	2264      	movs	r2, #100	@ 0x64
 80011b6:	fb03 f202 	mul.w	r2, r3, r2
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d143      	bne.n	8001252 <ReleaseKeycodes+0x232>
            LayerState = 0; // Layer0 when released
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <ReleaseKeycodes+0x23c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
            sprintf(message1, "Current Layer = %d \n\r", LayerState);
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <ReleaseKeycodes+0x23c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	492c      	ldr	r1, [pc, #176]	@ (800128c <ReleaseKeycodes+0x26c>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a f80e 	bl	800b1fc <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f893 	bl	8000310 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	f107 010c 	add.w	r1, r7, #12
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	481f      	ldr	r0, [pc, #124]	@ (8001274 <ReleaseKeycodes+0x254>)
 80011f8:	f005 f864 	bl	80062c4 <HAL_UART_Transmit>
}
 80011fc:	e029      	b.n	8001252 <ReleaseKeycodes+0x232>
        TempKeycode = Keycode[WhichLayer[i]][i];
 80011fe:	4a24      	ldr	r2, [pc, #144]	@ (8001290 <ReleaseKeycodes+0x270>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	4916      	ldr	r1, [pc, #88]	@ (8001260 <ReleaseKeycodes+0x240>)
 8001208:	2264      	movs	r2, #100	@ 0x64
 800120a:	fb03 f202 	mul.w	r2, r3, r2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001216:	461a      	mov	r2, r3
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <ReleaseKeycodes+0x248>)
 800121a:	601a      	str	r2, [r3, #0]
        ResetKeycode(TempKeycode);
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <ReleaseKeycodes+0x248>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd63 	bl	8000cec <ResetKeycode>
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <ReleaseKeycodes+0x248>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4919      	ldr	r1, [pc, #100]	@ (8001294 <ReleaseKeycodes+0x274>)
 8001230:	4618      	mov	r0, r3
 8001232:	f009 ffe3 	bl	800b1fc <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f868 	bl	8000310 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	f107 010c 	add.w	r1, r7, #12
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	4809      	ldr	r0, [pc, #36]	@ (8001274 <ReleaseKeycodes+0x254>)
 800124e:	f005 f839 	bl	80062c4 <HAL_UART_Transmit>
}
 8001252:	bf00      	nop
 8001254:	3770      	adds	r7, #112	@ 0x70
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	240003dc 	.word	0x240003dc
 8001260:	24000000 	.word	0x24000000
 8001264:	24000574 	.word	0x24000574
 8001268:	24000570 	.word	0x24000570
 800126c:	ffff8ad0 	.word	0xffff8ad0
 8001270:	0800bbfc 	.word	0x0800bbfc
 8001274:	2400033c 	.word	0x2400033c
 8001278:	ffffd8f0 	.word	0xffffd8f0
 800127c:	24000190 	.word	0x24000190
 8001280:	240003d8 	.word	0x240003d8
 8001284:	24000334 	.word	0x24000334
 8001288:	0800bc14 	.word	0x0800bc14
 800128c:	0800bbcc 	.word	0x0800bbcc
 8001290:	240003e0 	.word	0x240003e0
 8001294:	0800bc2c 	.word	0x0800bc2c

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09e      	sub	sp, #120	@ 0x78
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800129e:	f000 f9e9 	bl	8001674 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a2:	f000 fbdf 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a6:	f000 f865 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012aa:	f000 f91f 	bl	80014ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012ae:	f009 fae9 	bl	800a884 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80012b2:	f000 f8cf 	bl	8001454 <MX_UART4_Init>
    {
        //Timer = HAL_GetTick(); // Get Current Time

    	//CheckScanrate();

        if (HAL_GetTick() - LastTimer >= 10000)
 80012b6:	f000 fc5b 	bl	8001b70 <HAL_GetTick>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <main+0xc8>)
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d927      	bls.n	800131a <main+0x82>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", HAL_GetTick(), Scanrate / 10);
 80012ca:	f000 fc51 	bl	8001b70 <HAL_GetTick>
 80012ce:	4601      	mov	r1, r0
 80012d0:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <main+0xcc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a24      	ldr	r2, [pc, #144]	@ (8001368 <main+0xd0>)
 80012d6:	fb82 0203 	smull	r0, r2, r2, r3
 80012da:	1092      	asrs	r2, r2, #2
 80012dc:	17db      	asrs	r3, r3, #31
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f107 000c 	add.w	r0, r7, #12
 80012e4:	460a      	mov	r2, r1
 80012e6:	4921      	ldr	r1, [pc, #132]	@ (800136c <main+0xd4>)
 80012e8:	f009 ff88 	bl	800b1fc <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f80d 	bl	8000310 <strlen>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f107 010c 	add.w	r1, r7, #12
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	481b      	ldr	r0, [pc, #108]	@ (8001370 <main+0xd8>)
 8001304:	f004 ffde 	bl	80062c4 <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 8001308:	f000 fc32 	bl	8001b70 <HAL_GetTick>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <main+0xc8>)
 8001312:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <main+0xcc>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <main+0xcc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4a10      	ldr	r2, [pc, #64]	@ (8001364 <main+0xcc>)
 8001322:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

        MatrixScan();
 8001324:	463b      	mov	r3, r7
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f9c2 	bl	80006b0 <MatrixScan>
        MatrixScanResult Matrix = MatrixScan();
 800132c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f9bd 	bl	80006b0 <MatrixScan>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY); */




        if ( Matrix.pinNumber != -1 )
 8001336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d0bb      	beq.n	80012b6 <main+0x1e>
        {

			if ( Matrix.pinState == 1)
 800133e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001342:	2b01      	cmp	r3, #1
 8001344:	d104      	bne.n	8001350 <main+0xb8>
			{
				PressKeycodes(Matrix.pinNumber);
 8001346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fd37 	bl	8000dbc <PressKeycodes>
 800134e:	e003      	b.n	8001358 <main+0xc0>
			}
			else
			{
				ReleaseKeycodes(Matrix.pinNumber);
 8001350:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fe64 	bl	8001020 <ReleaseKeycodes>
			}
        	KeycodeSend();
 8001358:	f7ff fd0a 	bl	8000d70 <KeycodeSend>
    {
 800135c:	e7ab      	b.n	80012b6 <main+0x1e>
 800135e:	bf00      	nop
 8001360:	240003d4 	.word	0x240003d4
 8001364:	240003d0 	.word	0x240003d0
 8001368:	66666667 	.word	0x66666667
 800136c:	0800bc44 	.word	0x0800bc44
 8001370:	2400033c 	.word	0x2400033c

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b09c      	sub	sp, #112	@ 0x70
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137e:	224c      	movs	r2, #76	@ 0x4c
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f009 ff5a 	bl	800b23c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2220      	movs	r2, #32
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f009 ff54 	bl	800b23c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001394:	2002      	movs	r0, #2
 8001396:	f002 f9d3 	bl	8003740 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <SystemClock_Config+0xdc>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001450 <SystemClock_Config+0xdc>)
 80013a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013a8:	6193      	str	r3, [r2, #24]
 80013aa:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <SystemClock_Config+0xdc>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013b6:	bf00      	nop
 80013b8:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <SystemClock_Config+0xdc>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013c4:	d1f8      	bne.n	80013b8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013c6:	2321      	movs	r3, #33	@ 0x21
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d8:	2302      	movs	r3, #2
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80013dc:	2305      	movs	r3, #5
 80013de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80013e0:	236e      	movs	r3, #110	@ 0x6e
 80013e2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80013f0:	2308      	movs	r3, #8
 80013f2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001400:	4618      	mov	r0, r3
 8001402:	f002 f9e7 	bl	80037d4 <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800140c:	f000 f95e 	bl	80016cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	233f      	movs	r3, #63	@ 0x3f
 8001412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2303      	movs	r3, #3
 8001416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800141c:	2308      	movs	r3, #8
 800141e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001420:	2340      	movs	r3, #64	@ 0x40
 8001422:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001424:	2340      	movs	r3, #64	@ 0x40
 8001426:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800142c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 800142e:	2350      	movs	r3, #80	@ 0x50
 8001430:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2103      	movs	r1, #3
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fda6 	bl	8003f88 <HAL_RCC_ClockConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001442:	f000 f943 	bl	80016cc <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	3770      	adds	r7, #112	@ 0x70
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	58024800 	.word	0x58024800

08001454 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <MX_UART4_Init+0x90>)
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <MX_UART4_Init+0x94>)
 800145c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <MX_UART4_Init+0x90>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <MX_UART4_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <MX_UART4_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <MX_UART4_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_UART4_Init+0x90>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <MX_UART4_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <MX_UART4_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_UART4_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_UART4_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_UART4_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800149c:	4811      	ldr	r0, [pc, #68]	@ (80014e4 <MX_UART4_Init+0x90>)
 800149e:	f004 fec1 	bl	8006224 <HAL_UART_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80014a8:	f000 f910 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <MX_UART4_Init+0x90>)
 80014b0:	f006 f85b 	bl	800756a <HAL_UARTEx_SetTxFifoThreshold>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80014ba:	f000 f907 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <MX_UART4_Init+0x90>)
 80014c2:	f006 f890 	bl	80075e6 <HAL_UARTEx_SetRxFifoThreshold>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 f8fe 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_UART4_Init+0x90>)
 80014d2:	f006 f811 	bl	80074f8 <HAL_UARTEx_DisableFifoMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80014dc:	f000 f8f6 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2400033c 	.word	0x2400033c
 80014e8:	40004c00 	.word	0x40004c00

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	@ 0x30
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001502:	4b56      	ldr	r3, [pc, #344]	@ (800165c <MX_GPIO_Init+0x170>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	4a54      	ldr	r2, [pc, #336]	@ (800165c <MX_GPIO_Init+0x170>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001512:	4b52      	ldr	r3, [pc, #328]	@ (800165c <MX_GPIO_Init+0x170>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	4b4e      	ldr	r3, [pc, #312]	@ (800165c <MX_GPIO_Init+0x170>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	4a4d      	ldr	r2, [pc, #308]	@ (800165c <MX_GPIO_Init+0x170>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001530:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <MX_GPIO_Init+0x170>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	4b47      	ldr	r3, [pc, #284]	@ (800165c <MX_GPIO_Init+0x170>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001544:	4a45      	ldr	r2, [pc, #276]	@ (800165c <MX_GPIO_Init+0x170>)
 8001546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154e:	4b43      	ldr	r3, [pc, #268]	@ (800165c <MX_GPIO_Init+0x170>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b3f      	ldr	r3, [pc, #252]	@ (800165c <MX_GPIO_Init+0x170>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	4a3e      	ldr	r2, [pc, #248]	@ (800165c <MX_GPIO_Init+0x170>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156c:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <MX_GPIO_Init+0x170>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b38      	ldr	r3, [pc, #224]	@ (800165c <MX_GPIO_Init+0x170>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001580:	4a36      	ldr	r2, [pc, #216]	@ (800165c <MX_GPIO_Init+0x170>)
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <MX_GPIO_Init+0x170>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	4b30      	ldr	r3, [pc, #192]	@ (800165c <MX_GPIO_Init+0x170>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159e:	4a2f      	ldr	r2, [pc, #188]	@ (800165c <MX_GPIO_Init+0x170>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a8:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <MX_GPIO_Init+0x170>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80015b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4825      	ldr	r0, [pc, #148]	@ (8001660 <MX_GPIO_Init+0x174>)
 80015cc:	f000 fc88 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80015d0:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80015d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015da:	2301      	movs	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	481f      	ldr	r0, [pc, #124]	@ (8001664 <MX_GPIO_Init+0x178>)
 80015e6:	f000 fc7b 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 80015ea:	f649 73d4 	movw	r3, #40916	@ 0x9fd4
 80015ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	481a      	ldr	r0, [pc, #104]	@ (8001668 <MX_GPIO_Init+0x17c>)
 8001600:	f000 fc6e 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB3 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 8001604:	f244 33dc 	movw	r3, #17372	@ 0x43dc
 8001608:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160e:	2301      	movs	r3, #1
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4814      	ldr	r0, [pc, #80]	@ (800166c <MX_GPIO_Init+0x180>)
 800161a:	f000 fc61 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800161e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001624:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	2301      	movs	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	480d      	ldr	r0, [pc, #52]	@ (800166c <MX_GPIO_Init+0x180>)
 8001636:	f000 fc53 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800163a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800163e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001644:	2301      	movs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4808      	ldr	r0, [pc, #32]	@ (8001670 <MX_GPIO_Init+0x184>)
 8001650:	f000 fc46 	bl	8001ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	@ 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	58024400 	.word	0x58024400
 8001660:	58021000 	.word	0x58021000
 8001664:	58020800 	.word	0x58020800
 8001668:	58020000 	.word	0x58020000
 800166c:	58020400 	.word	0x58020400
 8001670:	58020c00 	.word	0x58020c00

08001674 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800167a:	463b      	mov	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001686:	f000 fbb3 	bl	8001df0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800168e:	2300      	movs	r3, #0
 8001690:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001696:	231f      	movs	r3, #31
 8001698:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800169a:	2387      	movs	r3, #135	@ 0x87
 800169c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800169e:	2300      	movs	r3, #0
 80016a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016a2:	2300      	movs	r3, #0
 80016a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016b6:	463b      	mov	r3, r7
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fbd1 	bl	8001e60 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016be:	2004      	movs	r0, #4
 80016c0:	f000 fbae 	bl	8001e20 <HAL_MPU_Enable>

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <Error_Handler+0x8>

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_MspInit+0x30>)
 80016e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016e4:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_MspInit+0x30>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_MspInit+0x30>)
 80016f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	58024400 	.word	0x58024400

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0b8      	sub	sp, #224	@ 0xe0
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	22b8      	movs	r2, #184	@ 0xb8
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f009 fd85 	bl	800b23c <memset>
  if(huart->Instance==UART4)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a26      	ldr	r2, [pc, #152]	@ (80017d0 <HAL_UART_MspInit+0xc4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d145      	bne.n	80017c8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800173c:	f04f 0202 	mov.w	r2, #2
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4618      	mov	r0, r3
 8001754:	f002 ffa4 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800175e:	f7ff ffb5 	bl	80016cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001762:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <HAL_UART_MspInit+0xc8>)
 8001764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_UART_MspInit+0xc8>)
 800176a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800176e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001772:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_UART_MspInit+0xc8>)
 8001774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_UART_MspInit+0xc8>)
 8001782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001786:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <HAL_UART_MspInit+0xc8>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <HAL_UART_MspInit+0xc8>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800179e:	2303      	movs	r3, #3
 80017a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017b6:	2308      	movs	r3, #8
 80017b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80017c0:	4619      	mov	r1, r3
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <HAL_UART_MspInit+0xcc>)
 80017c4:	f000 fb8c 	bl	8001ee0 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80017c8:	bf00      	nop
 80017ca:	37e0      	adds	r7, #224	@ 0xe0
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40004c00 	.word	0x40004c00
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58020000 	.word	0x58020000

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 f989 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <OTG_HS_IRQHandler+0x10>)
 8001842:	f000 fe36 	bl	80024b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000c80 	.word	0x24000c80

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f009 fce4 	bl	800b24c <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	24050000 	.word	0x24050000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	24000798 	.word	0x24000798
 80018b8:	240012c0 	.word	0x240012c0

080018bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018c0:	4b3e      	ldr	r3, [pc, #248]	@ (80019bc <SystemInit+0x100>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	4a3d      	ldr	r2, [pc, #244]	@ (80019bc <SystemInit+0x100>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018d0:	4b3b      	ldr	r3, [pc, #236]	@ (80019c0 <SystemInit+0x104>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	2b06      	cmp	r3, #6
 80018da:	d807      	bhi.n	80018ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018dc:	4b38      	ldr	r3, [pc, #224]	@ (80019c0 <SystemInit+0x104>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 030f 	bic.w	r3, r3, #15
 80018e4:	4a36      	ldr	r2, [pc, #216]	@ (80019c0 <SystemInit+0x104>)
 80018e6:	f043 0307 	orr.w	r3, r3, #7
 80018ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018ec:	4b35      	ldr	r3, [pc, #212]	@ (80019c4 <SystemInit+0x108>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a34      	ldr	r2, [pc, #208]	@ (80019c4 <SystemInit+0x108>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018f8:	4b32      	ldr	r3, [pc, #200]	@ (80019c4 <SystemInit+0x108>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018fe:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <SystemInit+0x108>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4930      	ldr	r1, [pc, #192]	@ (80019c4 <SystemInit+0x108>)
 8001904:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <SystemInit+0x10c>)
 8001906:	4013      	ands	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800190a:	4b2d      	ldr	r3, [pc, #180]	@ (80019c0 <SystemInit+0x104>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001916:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <SystemInit+0x104>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 030f 	bic.w	r3, r3, #15
 800191e:	4a28      	ldr	r2, [pc, #160]	@ (80019c0 <SystemInit+0x104>)
 8001920:	f043 0307 	orr.w	r3, r3, #7
 8001924:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001926:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <SystemInit+0x108>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800192c:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <SystemInit+0x108>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <SystemInit+0x108>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <SystemInit+0x108>)
 800193a:	4a24      	ldr	r2, [pc, #144]	@ (80019cc <SystemInit+0x110>)
 800193c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <SystemInit+0x108>)
 8001940:	4a23      	ldr	r2, [pc, #140]	@ (80019d0 <SystemInit+0x114>)
 8001942:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001944:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <SystemInit+0x108>)
 8001946:	4a23      	ldr	r2, [pc, #140]	@ (80019d4 <SystemInit+0x118>)
 8001948:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800194a:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <SystemInit+0x108>)
 800194c:	2200      	movs	r2, #0
 800194e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001950:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <SystemInit+0x108>)
 8001952:	4a20      	ldr	r2, [pc, #128]	@ (80019d4 <SystemInit+0x118>)
 8001954:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <SystemInit+0x108>)
 8001958:	2200      	movs	r2, #0
 800195a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <SystemInit+0x108>)
 800195e:	4a1d      	ldr	r2, [pc, #116]	@ (80019d4 <SystemInit+0x118>)
 8001960:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <SystemInit+0x108>)
 8001964:	2200      	movs	r2, #0
 8001966:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <SystemInit+0x108>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <SystemInit+0x108>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001972:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <SystemInit+0x108>)
 8001976:	2200      	movs	r2, #0
 8001978:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <SystemInit+0x108>)
 800197c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d113      	bne.n	80019b0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <SystemInit+0x108>)
 800198a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800198e:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <SystemInit+0x108>)
 8001990:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001994:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <SystemInit+0x11c>)
 800199a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800199e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <SystemInit+0x108>)
 80019a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019a6:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <SystemInit+0x108>)
 80019a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00
 80019c0:	52002000 	.word	0x52002000
 80019c4:	58024400 	.word	0x58024400
 80019c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80019cc:	02020200 	.word	0x02020200
 80019d0:	01ff0000 	.word	0x01ff0000
 80019d4:	01010280 	.word	0x01010280
 80019d8:	52004000 	.word	0x52004000

080019dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <ExitRun0Mode+0x2c>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <ExitRun0Mode+0x2c>)
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80019ec:	bf00      	nop
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <ExitRun0Mode+0x2c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f9      	beq.n	80019ee <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	58024800 	.word	0x58024800

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a48 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a10:	f7ff ffe4 	bl	80019dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a14:	f7ff ff52 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a18:	480c      	ldr	r0, [pc, #48]	@ (8001a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1a:	490d      	ldr	r1, [pc, #52]	@ (8001a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a30:	4c0a      	ldr	r4, [pc, #40]	@ (8001a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f009 fc0b 	bl	800b258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff fc29 	bl	8001298 <main>
  bx  lr
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a50:	24000318 	.word	0x24000318
  ldr r2, =_sidata
 8001a54:	0800bd30 	.word	0x0800bd30
  ldr r2, =_sbss
 8001a58:	24000318 	.word	0x24000318
  ldr r4, =_ebss
 8001a5c:	240012c0 	.word	0x240012c0

08001a60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC3_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f000 f980 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a70:	f002 fc40 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_Init+0x68>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	4913      	ldr	r1, [pc, #76]	@ (8001ad0 <HAL_Init+0x6c>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_Init+0x68>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad0 <HAL_Init+0x6c>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <HAL_Init+0x70>)
 8001aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad8 <HAL_Init+0x74>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f814 	bl	8001adc <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e002      	b.n	8001ac4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001abe:	f7ff fe0b 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	0800bcb4 	.word	0x0800bcb4
 8001ad4:	240001b4 	.word	0x240001b4
 8001ad8:	240001b0 	.word	0x240001b0

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ae4:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HAL_InitTick+0x60>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e021      	b.n	8001b34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <HAL_InitTick+0x64>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <HAL_InitTick+0x60>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f965 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 f92f 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	@ (8001b44 <HAL_InitTick+0x68>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	240001bc 	.word	0x240001bc
 8001b40:	240001b0 	.word	0x240001b0
 8001b44:	240001b8 	.word	0x240001b8

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	240001bc 	.word	0x240001bc
 8001b6c:	2400079c 	.word	0x2400079c

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	@ (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	2400079c 	.word	0x2400079c

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff ffee 	bl	8001b70 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	240001bc 	.word	0x240001bc

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <__NVIC_SetPriorityGrouping+0x40>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <__NVIC_SetPriorityGrouping+0x40>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	05fa0000 	.word	0x05fa0000

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	@ (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	@ (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	@ (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	@ 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	@ 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff40 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff90 	bl	8001cc4 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5f 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff33 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffa4 	bl	8001d2c <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001df4:	f3bf 8f5f 	dmb	sy
}
 8001df8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <HAL_MPU_Disable+0x28>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	4a06      	ldr	r2, [pc, #24]	@ (8001e18 <HAL_MPU_Disable+0x28>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e04:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e06:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_MPU_Disable+0x2c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00
 8001e1c:	e000ed90 	.word	0xe000ed90

08001e20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e28:	4a0b      	ldr	r2, [pc, #44]	@ (8001e58 <HAL_MPU_Enable+0x38>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_MPU_Enable+0x3c>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	4a09      	ldr	r2, [pc, #36]	@ (8001e5c <HAL_MPU_Enable+0x3c>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3e:	f3bf 8f4f 	dsb	sy
}
 8001e42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e44:	f3bf 8f6f 	isb	sy
}
 8001e48:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed90 	.word	0xe000ed90
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	785a      	ldrb	r2, [r3, #1]
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e7c:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7b1b      	ldrb	r3, [r3, #12]
 8001e88:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7adb      	ldrb	r3, [r3, #11]
 8001e8e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7a9b      	ldrb	r3, [r3, #10]
 8001e96:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7b5b      	ldrb	r3, [r3, #13]
 8001e9e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7b9b      	ldrb	r3, [r3, #14]
 8001ea6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7bdb      	ldrb	r3, [r3, #15]
 8001eae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7a5b      	ldrb	r3, [r3, #9]
 8001eb6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7a1b      	ldrb	r3, [r3, #8]
 8001ebe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ec0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ec8:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ecc:	6113      	str	r3, [r2, #16]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed90 	.word	0xe000ed90

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001eee:	4b86      	ldr	r3, [pc, #536]	@ (8002108 <HAL_GPIO_Init+0x228>)
 8001ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ef2:	e18c      	b.n	800220e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 817e 	beq.w	8002208 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d005      	beq.n	8001f24 <HAL_GPIO_Init+0x44>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d130      	bne.n	8001f86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f003 0201 	and.w	r2, r3, #1
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d017      	beq.n	8001fc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d123      	bne.n	8002016 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	08da      	lsrs	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3208      	adds	r2, #8
 8001fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	69b9      	ldr	r1, [r7, #24]
 8002012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0203 	and.w	r2, r3, #3
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80d8 	beq.w	8002208 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002058:	4b2c      	ldr	r3, [pc, #176]	@ (800210c <HAL_GPIO_Init+0x22c>)
 800205a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800205e:	4a2b      	ldr	r2, [pc, #172]	@ (800210c <HAL_GPIO_Init+0x22c>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002068:	4b28      	ldr	r3, [pc, #160]	@ (800210c <HAL_GPIO_Init+0x22c>)
 800206a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a26      	ldr	r2, [pc, #152]	@ (8002110 <HAL_GPIO_Init+0x230>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <HAL_GPIO_Init+0x234>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d04a      	beq.n	8002138 <HAL_GPIO_Init+0x258>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_GPIO_Init+0x238>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02b      	beq.n	8002102 <HAL_GPIO_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_GPIO_Init+0x23c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d025      	beq.n	80020fe <HAL_GPIO_Init+0x21e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <HAL_GPIO_Init+0x240>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_Init+0x21a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a19      	ldr	r2, [pc, #100]	@ (8002124 <HAL_GPIO_Init+0x244>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_GPIO_Init+0x216>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a18      	ldr	r2, [pc, #96]	@ (8002128 <HAL_GPIO_Init+0x248>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0x212>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a17      	ldr	r2, [pc, #92]	@ (800212c <HAL_GPIO_Init+0x24c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_Init+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a16      	ldr	r2, [pc, #88]	@ (8002130 <HAL_GPIO_Init+0x250>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x20a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a15      	ldr	r2, [pc, #84]	@ (8002134 <HAL_GPIO_Init+0x254>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_Init+0x206>
 80020e2:	2309      	movs	r3, #9
 80020e4:	e029      	b.n	800213a <HAL_GPIO_Init+0x25a>
 80020e6:	230a      	movs	r3, #10
 80020e8:	e027      	b.n	800213a <HAL_GPIO_Init+0x25a>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e025      	b.n	800213a <HAL_GPIO_Init+0x25a>
 80020ee:	2306      	movs	r3, #6
 80020f0:	e023      	b.n	800213a <HAL_GPIO_Init+0x25a>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e021      	b.n	800213a <HAL_GPIO_Init+0x25a>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e01f      	b.n	800213a <HAL_GPIO_Init+0x25a>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e01d      	b.n	800213a <HAL_GPIO_Init+0x25a>
 80020fe:	2302      	movs	r3, #2
 8002100:	e01b      	b.n	800213a <HAL_GPIO_Init+0x25a>
 8002102:	2301      	movs	r3, #1
 8002104:	e019      	b.n	800213a <HAL_GPIO_Init+0x25a>
 8002106:	bf00      	nop
 8002108:	58000080 	.word	0x58000080
 800210c:	58024400 	.word	0x58024400
 8002110:	58000400 	.word	0x58000400
 8002114:	58020000 	.word	0x58020000
 8002118:	58020400 	.word	0x58020400
 800211c:	58020800 	.word	0x58020800
 8002120:	58020c00 	.word	0x58020c00
 8002124:	58021000 	.word	0x58021000
 8002128:	58021400 	.word	0x58021400
 800212c:	58021800 	.word	0x58021800
 8002130:	58021c00 	.word	0x58021c00
 8002134:	58022400 	.word	0x58022400
 8002138:	2300      	movs	r3, #0
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	f002 0203 	and.w	r2, r2, #3
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	4093      	lsls	r3, r2
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800214a:	4938      	ldr	r1, [pc, #224]	@ (800222c <HAL_GPIO_Init+0x34c>)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800217e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	3301      	adds	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f ae6b 	bne.w	8001ef4 <HAL_GPIO_Init+0x14>
  }
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	3724      	adds	r7, #36	@ 0x24
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	58000400 	.word	0x58000400

08002230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0fe      	b.n	8002440 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f008 fc4c 	bl	800aaf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2203      	movs	r2, #3
 8002260:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f005 fb6e 	bl	800794a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7c1a      	ldrb	r2, [r3, #16]
 8002276:	f88d 2000 	strb.w	r2, [sp]
 800227a:	3304      	adds	r3, #4
 800227c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227e:	f005 fa3f 	bl	8007700 <USB_CoreInit>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0d5      	b.n	8002440 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f005 fb66 	bl	800796c <USB_SetCurrentMode>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0c6      	b.n	8002440 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	e04a      	b.n	800234e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3315      	adds	r3, #21
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3314      	adds	r3, #20
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	b298      	uxth	r0, r3
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	332e      	adds	r3, #46	@ 0x2e
 80022f4:	4602      	mov	r2, r0
 80022f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3318      	adds	r3, #24
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	331c      	adds	r3, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3320      	adds	r3, #32
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3324      	adds	r3, #36	@ 0x24
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	3301      	adds	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	791b      	ldrb	r3, [r3, #4]
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3af      	bcc.n	80022b8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e044      	b.n	80023e8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	3301      	adds	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	791b      	ldrb	r3, [r3, #4]
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d3b5      	bcc.n	800235e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	7c1a      	ldrb	r2, [r3, #16]
 80023fa:	f88d 2000 	strb.w	r2, [sp]
 80023fe:	3304      	adds	r3, #4
 8002400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002402:	f005 faff 	bl	8007a04 <USB_DevInit>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e013      	b.n	8002440 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7b1b      	ldrb	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f001 f956 	bl	80036e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f006 fb42 	bl	8008ac2 <USB_DevDisconnect>

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_PCD_Start+0x1c>
 8002460:	2302      	movs	r3, #2
 8002462:	e022      	b.n	80024aa <HAL_PCD_Start+0x62>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002484:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f005 fa49 	bl	8007928 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f006 faf0 	bl	8008a80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024b2:	b590      	push	{r4, r7, lr}
 80024b4:	b08d      	sub	sp, #52	@ 0x34
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f006 fbae 	bl	8008c2a <USB_GetMode>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 84b9 	bne.w	8002e48 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f006 fb12 	bl	8008b04 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 84af 	beq.w	8002e46 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f006 faff 	bl	8008b04 <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d107      	bne.n	8002520 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f002 0202 	and.w	r2, r2, #2
 800251e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f006 faed 	bl	8008b04 <USB_ReadInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b10      	cmp	r3, #16
 8002532:	d161      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0210 	bic.w	r2, r2, #16
 8002542:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f003 020f 	and.w	r2, r3, #15
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	0c5b      	lsrs	r3, r3, #17
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	2b02      	cmp	r3, #2
 800256e:	d124      	bne.n	80025ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d035      	beq.n	80025e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	6a38      	ldr	r0, [r7, #32]
 8002590:	f006 f924 	bl	80087dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a0:	441a      	add	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b2:	441a      	add	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	615a      	str	r2, [r3, #20]
 80025b8:	e016      	b.n	80025e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	0c5b      	lsrs	r3, r3, #17
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d110      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025cc:	2208      	movs	r2, #8
 80025ce:	4619      	mov	r1, r3
 80025d0:	6a38      	ldr	r0, [r7, #32]
 80025d2:	f006 f903 	bl	80087dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e2:	441a      	add	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0210 	orr.w	r2, r2, #16
 80025f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f006 fa81 	bl	8008b04 <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002608:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800260c:	f040 80a7 	bne.w	800275e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f006 fa86 	bl	8008b2a <USB_ReadDevAllOutEpInterrupt>
 800261e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002620:	e099      	b.n	8002756 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 808e 	beq.w	800274a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f006 faaa 	bl	8008b92 <USB_ReadDevOutEPInterrupt>
 800263e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002656:	461a      	mov	r2, r3
 8002658:	2301      	movs	r3, #1
 800265a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800265c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 feb8 	bl	80033d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800267a:	461a      	mov	r2, r3
 800267c:	2308      	movs	r3, #8
 800267e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 ff8e 	bl	80035a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800269e:	461a      	mov	r2, r3
 80026a0:	2310      	movs	r3, #16
 80026a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d030      	beq.n	8002710 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	2b80      	cmp	r3, #128	@ 0x80
 80026b8:	d109      	bne.n	80026ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	3304      	adds	r3, #4
 80026e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	78db      	ldrb	r3, [r3, #3]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d108      	bne.n	80026fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2200      	movs	r2, #0
 80026f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f008 fb7d 	bl	800adf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800270a:	461a      	mov	r2, r3
 800270c:	2302      	movs	r3, #2
 800270e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002726:	461a      	mov	r2, r3
 8002728:	2320      	movs	r3, #32
 800272a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002742:	461a      	mov	r2, r3
 8002744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002748:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	3301      	adds	r3, #1
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	f47f af62 	bne.w	8002622 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f006 f9ce 	bl	8008b04 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800276e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002772:	f040 80db 	bne.w	800292c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f006 f9ef 	bl	8008b5e <USB_ReadDevAllInEpInterrupt>
 8002780:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002786:	e0cd      	b.n	8002924 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80c2 	beq.w	8002918 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f006 fa15 	bl	8008bce <USB_ReadDevInEPInterrupt>
 80027a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d057      	beq.n	8002860 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	2201      	movs	r2, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69f9      	ldr	r1, [r7, #28]
 80027cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027d0:	4013      	ands	r3, r2
 80027d2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027e0:	461a      	mov	r2, r3
 80027e2:	2301      	movs	r3, #1
 80027e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	799b      	ldrb	r3, [r3, #6]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d132      	bne.n	8002854 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3320      	adds	r3, #32
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4403      	add	r3, r0
 800280e:	331c      	adds	r3, #28
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4419      	add	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4403      	add	r3, r0
 8002822:	3320      	adds	r3, #32
 8002824:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	2b00      	cmp	r3, #0
 800282a:	d113      	bne.n	8002854 <HAL_PCD_IRQHandler+0x3a2>
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3324      	adds	r3, #36	@ 0x24
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d108      	bne.n	8002854 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800284c:	461a      	mov	r2, r3
 800284e:	2101      	movs	r1, #1
 8002850:	f006 fa1e 	bl	8008c90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4619      	mov	r1, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f008 fa47 	bl	800acee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002876:	461a      	mov	r2, r3
 8002878:	2308      	movs	r3, #8
 800287a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	4413      	add	r3, r2
 800288e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002892:	461a      	mov	r2, r3
 8002894:	2310      	movs	r3, #16
 8002896:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ae:	461a      	mov	r2, r3
 80028b0:	2340      	movs	r3, #64	@ 0x40
 80028b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d023      	beq.n	8002906 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028c0:	6a38      	ldr	r0, [r7, #32]
 80028c2:	f005 f9fd 	bl	8007cc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	3310      	adds	r3, #16
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	78db      	ldrb	r3, [r3, #3]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d108      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f008 fa94 	bl	800ae1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002900:	461a      	mov	r2, r3
 8002902:	2302      	movs	r3, #2
 8002904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fcd2 	bl	80032bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	3301      	adds	r3, #1
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002926:	2b00      	cmp	r3, #0
 8002928:	f47f af2e 	bne.w	8002788 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f006 f8e7 	bl	8008b04 <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800293c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002940:	d122      	bne.n	8002988 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800295c:	2b01      	cmp	r3, #1
 800295e:	d108      	bne.n	8002972 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002968:	2100      	movs	r1, #0
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fedc 	bl	8003728 <HAL_PCDEx_LPM_Callback>
 8002970:	e002      	b.n	8002978 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f008 fa32 	bl	800addc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f006 f8b9 	bl	8008b04 <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800299c:	d112      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f008 f9ee 	bl	800ad90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f006 f89b 	bl	8008b04 <USB_ReadInterrupts>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d8:	d121      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80029e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	f003 020f 	and.w	r2, r3, #15
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a0e:	2101      	movs	r1, #1
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fe89 	bl	8003728 <HAL_PCDEx_LPM_Callback>
 8002a16:	e002      	b.n	8002a1e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f008 f9b9 	bl	800ad90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f006 f86e 	bl	8008b04 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a32:	f040 80b7 	bne.w	8002ba4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2110      	movs	r1, #16
 8002a50:	4618      	mov	r0, r3
 8002a52:	f005 f935 	bl	8007cc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a5a:	e046      	b.n	8002aea <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a80:	0151      	lsls	r1, r2, #5
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	440a      	add	r2, r1
 8002a86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002aa2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab4:	0151      	lsls	r1, r2, #5
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	440a      	add	r2, r1
 8002aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002abe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ac2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ad4:	0151      	lsls	r1, r2, #5
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	440a      	add	r2, r1
 8002ada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ade:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ae2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d3b2      	bcc.n	8002a5c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b04:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7bdb      	ldrb	r3, [r3, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b22:	f043 030b 	orr.w	r3, r3, #11
 8002b26:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b38:	f043 030b 	orr.w	r3, r3, #11
 8002b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b3e:	e015      	b.n	8002b6c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002b54:	4313      	orrs	r3, r2
 8002b56:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b66:	f043 030b 	orr.w	r3, r3, #11
 8002b6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f006 f87e 	bl	8008c90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f005 ffab 	bl	8008b04 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bb8:	d123      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f006 f842 	bl	8008c48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f005 f8f2 	bl	8007db2 <USB_GetDevSpeed>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681c      	ldr	r4, [r3, #0]
 8002bda:	f001 fd05 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8002bde:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002be4:	461a      	mov	r2, r3
 8002be6:	4620      	mov	r0, r4
 8002be8:	f004 fdfc 	bl	80077e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f008 f8a6 	bl	800ad3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 ff7c 	bl	8008b04 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d10a      	bne.n	8002c2c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f008 f883 	bl	800ad22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f002 0208 	and.w	r2, r2, #8
 8002c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f005 ff67 	bl	8008b04 <USB_ReadInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3c:	2b80      	cmp	r3, #128	@ 0x80
 8002c3e:	d123      	bne.n	8002c88 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c50:	e014      	b.n	8002c7c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 faf2 	bl	800325a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	3301      	adds	r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	791b      	ldrb	r3, [r3, #4]
 8002c80:	461a      	mov	r2, r3
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d3e4      	bcc.n	8002c52 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f005 ff39 	bl	8008b04 <USB_ReadInterrupts>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c9c:	d13c      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca2:	e02b      	b.n	8002cfc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d115      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	da12      	bge.n	8002cf6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3317      	adds	r3, #23
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fab2 	bl	800325a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	791b      	ldrb	r3, [r3, #4]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d3cd      	bcc.n	8002ca4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 fef1 	bl	8008b04 <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d2c:	d156      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d2e:	2301      	movs	r3, #1
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d32:	e045      	b.n	8002dc0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d12e      	bne.n	8002dba <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da2b      	bge.n	8002dba <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	0c1a      	lsrs	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d6c:	4053      	eors	r3, r2
 8002d6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d121      	bne.n	8002dba <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002db6:	6053      	str	r3, [r2, #4]
            break;
 8002db8:	e008      	b.n	8002dcc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	791b      	ldrb	r3, [r3, #4]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d3b3      	bcc.n	8002d34 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f005 fe8f 	bl	8008b04 <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df0:	d10a      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f008 f824 	bl	800ae40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f005 fe79 	bl	8008b04 <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d115      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f008 f814 	bl	800ae5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	e000      	b.n	8002e48 <HAL_PCD_IRQHandler+0x996>
      return;
 8002e46:	bf00      	nop
    }
  }
}
 8002e48:	3734      	adds	r7, #52	@ 0x34
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd90      	pop	{r4, r7, pc}

08002e4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_PCD_SetAddress+0x1a>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e012      	b.n	8002e8e <HAL_PCD_SetAddress+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f005 fdd8 	bl	8008a34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	4608      	mov	r0, r1
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	70fb      	strb	r3, [r7, #3]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	803b      	strh	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da0f      	bge.n	8002edc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	3310      	adds	r3, #16
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	705a      	strb	r2, [r3, #1]
 8002eda:	e00f      	b.n	8002efc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002f08:	883b      	ldrh	r3, [r7, #0]
 8002f0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	78ba      	ldrb	r2, [r7, #2]
 8002f16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f2a:	78bb      	ldrb	r3, [r7, #2]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d102      	bne.n	8002f36 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_PCD_EP_Open+0xae>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e00e      	b.n	8002f62 <HAL_PCD_EP_Open+0xcc>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 ff52 	bl	8007dfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f60:	7afb      	ldrb	r3, [r7, #11]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da0f      	bge.n	8002f9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	3310      	adds	r3, #16
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	3304      	adds	r3, #4
 8002f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	705a      	strb	r2, [r3, #1]
 8002f9c:	e00f      	b.n	8002fbe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_PCD_EP_Close+0x6e>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e00e      	b.n	8002ff6 <HAL_PCD_EP_Close+0x8c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68f9      	ldr	r1, [r7, #12]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 ff90 	bl	8007f0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b086      	sub	sp, #24
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	460b      	mov	r3, r1
 800300c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800300e:	7afb      	ldrb	r3, [r7, #11]
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	b2da      	uxtb	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	799b      	ldrb	r3, [r3, #6]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d102      	bne.n	800305a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	799b      	ldrb	r3, [r3, #6]
 8003062:	461a      	mov	r2, r3
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	f005 f82d 	bl	80080c4 <USB_EPStartXfer>

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	460b      	mov	r3, r1
 8003082:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003084:	7afb      	ldrb	r3, [r7, #11]
 8003086:	f003 020f 	and.w	r2, r3, #15
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	3310      	adds	r3, #16
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	3304      	adds	r3, #4
 800309a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2200      	movs	r2, #0
 80030ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2201      	movs	r2, #1
 80030b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030b4:	7afb      	ldrb	r3, [r7, #11]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	799b      	ldrb	r3, [r3, #6]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d102      	bne.n	80030ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	799b      	ldrb	r3, [r3, #6]
 80030d6:	461a      	mov	r2, r3
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	f004 fff3 	bl	80080c4 <USB_EPStartXfer>

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	7912      	ldrb	r2, [r2, #4]
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e04f      	b.n	80031a6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800310a:	2b00      	cmp	r3, #0
 800310c:	da0f      	bge.n	800312e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 020f 	and.w	r2, r3, #15
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	3310      	adds	r3, #16
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	705a      	strb	r2, [r3, #1]
 800312c:	e00d      	b.n	800314a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	3304      	adds	r3, #4
 8003142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	b2da      	uxtb	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_PCD_EP_SetStall+0x82>
 8003166:	2302      	movs	r3, #2
 8003168:	e01d      	b.n	80031a6 <HAL_PCD_EP_SetStall+0xbe>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	4618      	mov	r0, r3
 800317a:	f005 fb87 	bl	800888c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7999      	ldrb	r1, [r3, #6]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003196:	461a      	mov	r2, r3
 8003198:	f005 fd7a 	bl	8008c90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	7912      	ldrb	r2, [r2, #4]
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e042      	b.n	8003252 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da0f      	bge.n	80031f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 020f 	and.w	r2, r3, #15
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	3310      	adds	r3, #16
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	705a      	strb	r2, [r3, #1]
 80031f2:	e00f      	b.n	8003214 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_PCD_EP_ClrStall+0x86>
 8003230:	2302      	movs	r3, #2
 8003232:	e00e      	b.n	8003252 <HAL_PCD_EP_ClrStall+0xa4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	4618      	mov	r0, r3
 8003244:	f005 fb90 	bl	8008968 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326a:	2b00      	cmp	r3, #0
 800326c:	da0c      	bge.n	8003288 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 020f 	and.w	r2, r3, #15
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	3310      	adds	r3, #16
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e00c      	b.n	80032a2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 020f 	and.w	r2, r3, #15
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f005 f9af 	bl	800860c <USB_EPStopXfer>
 80032ae:	4603      	mov	r3, r0
 80032b0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032b2:	7afb      	ldrb	r3, [r7, #11]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	@ 0x28
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	3310      	adds	r3, #16
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	3304      	adds	r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d901      	bls.n	80032f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e06b      	b.n	80033cc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	429a      	cmp	r2, r3
 8003308:	d902      	bls.n	8003310 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	3303      	adds	r3, #3
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003318:	e02a      	b.n	8003370 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	429a      	cmp	r2, r3
 800332e:	d902      	bls.n	8003336 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3303      	adds	r3, #3
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68d9      	ldr	r1, [r3, #12]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4603      	mov	r3, r0
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f005 fa04 	bl	8008760 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	441a      	add	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	441a      	add	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	429a      	cmp	r2, r3
 8003384:	d809      	bhi.n	800339a <PCD_WriteEmptyTxFifo+0xde>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800338e:	429a      	cmp	r2, r3
 8003390:	d203      	bcs.n	800339a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1bf      	bne.n	800331a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d811      	bhi.n	80033ca <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	2201      	movs	r2, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	43db      	mvns	r3, r3
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033c6:	4013      	ands	r3, r2
 80033c8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	333c      	adds	r3, #60	@ 0x3c
 80033ec:	3304      	adds	r3, #4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	799b      	ldrb	r3, [r3, #6]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d17b      	bne.n	8003502 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d015      	beq.n	8003440 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	4a61      	ldr	r2, [pc, #388]	@ (800359c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	f240 80b9 	bls.w	8003590 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80b3 	beq.w	8003590 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003436:	461a      	mov	r2, r3
 8003438:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800343c:	6093      	str	r3, [r2, #8]
 800343e:	e0a7      	b.n	8003590 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003456:	461a      	mov	r2, r3
 8003458:	2320      	movs	r3, #32
 800345a:	6093      	str	r3, [r2, #8]
 800345c:	e098      	b.n	8003590 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	f040 8093 	bne.w	8003590 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4a4b      	ldr	r2, [pc, #300]	@ (800359c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d90f      	bls.n	8003492 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003488:	461a      	mov	r2, r3
 800348a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800348e:	6093      	str	r3, [r2, #8]
 8003490:	e07e      	b.n	8003590 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a1a      	ldr	r2, [r3, #32]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	0159      	lsls	r1, r3, #5
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	440b      	add	r3, r1
 80034b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034be:	1ad2      	subs	r2, r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d114      	bne.n	80034f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034dc:	461a      	mov	r2, r3
 80034de:	2101      	movs	r1, #1
 80034e0:	f005 fbd6 	bl	8008c90 <USB_EP0_OutStart>
 80034e4:	e006      	b.n	80034f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	441a      	add	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	4619      	mov	r1, r3
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f007 fbdc 	bl	800acb8 <HAL_PCD_DataOutStageCallback>
 8003500:	e046      	b.n	8003590 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	4a26      	ldr	r2, [pc, #152]	@ (80035a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d124      	bne.n	8003554 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003520:	461a      	mov	r2, r3
 8003522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003526:	6093      	str	r3, [r2, #8]
 8003528:	e032      	b.n	8003590 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003540:	461a      	mov	r2, r3
 8003542:	2320      	movs	r3, #32
 8003544:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f007 fbb3 	bl	800acb8 <HAL_PCD_DataOutStageCallback>
 8003552:	e01d      	b.n	8003590 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d114      	bne.n	8003584 <PCD_EP_OutXfrComplete_int+0x1b0>
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800357c:	461a      	mov	r2, r3
 800357e:	2100      	movs	r1, #0
 8003580:	f005 fb86 	bl	8008c90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f007 fb94 	bl	800acb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	4f54300a 	.word	0x4f54300a
 80035a0:	4f54310a 	.word	0x4f54310a

080035a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	333c      	adds	r3, #60	@ 0x3c
 80035bc:	3304      	adds	r3, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a15      	ldr	r2, [pc, #84]	@ (800362c <PCD_EP_OutSetupPacket_int+0x88>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d90e      	bls.n	80035f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f007 fb4b 	bl	800ac94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <PCD_EP_OutSetupPacket_int+0x88>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d90c      	bls.n	8003620 <PCD_EP_OutSetupPacket_int+0x7c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	799b      	ldrb	r3, [r3, #6]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d108      	bne.n	8003620 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003618:	461a      	mov	r2, r3
 800361a:	2101      	movs	r1, #1
 800361c:	f005 fb38 	bl	8008c90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	4f54300a 	.word	0x4f54300a

08003630 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	70fb      	strb	r3, [r7, #3]
 800363c:	4613      	mov	r3, r2
 800363e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800364e:	883b      	ldrh	r3, [r7, #0]
 8003650:	0419      	lsls	r1, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	430a      	orrs	r2, r1
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28
 800365c:	e028      	b.n	80036b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	4413      	add	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e00d      	b.n	800368e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	3340      	adds	r3, #64	@ 0x40
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4413      	add	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	3301      	adds	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	3b01      	subs	r3, #1
 8003694:	429a      	cmp	r2, r3
 8003696:	d3ec      	bcc.n	8003672 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003698:	883b      	ldrh	r3, [r7, #0]
 800369a:	0418      	lsls	r0, r3, #16
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	4302      	orrs	r2, r0
 80036a8:	3340      	adds	r3, #64	@ 0x40
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800370e:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <HAL_PCDEx_ActivateLPM+0x44>)
 8003710:	4313      	orrs	r3, r2
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	10000003 	.word	0x10000003

08003728 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003748:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <HAL_PWREx_ConfigSupply+0x70>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d00a      	beq.n	800376a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003754:	4b16      	ldr	r3, [pc, #88]	@ (80037b0 <HAL_PWREx_ConfigSupply+0x70>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e01f      	b.n	80037a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e01d      	b.n	80037a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800376a:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <HAL_PWREx_ConfigSupply+0x70>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f023 0207 	bic.w	r2, r3, #7
 8003772:	490f      	ldr	r1, [pc, #60]	@ (80037b0 <HAL_PWREx_ConfigSupply+0x70>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4313      	orrs	r3, r2
 8003778:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800377a:	f7fe f9f9 	bl	8001b70 <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003780:	e009      	b.n	8003796 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003782:	f7fe f9f5 	bl	8001b70 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003790:	d901      	bls.n	8003796 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e007      	b.n	80037a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003796:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <HAL_PWREx_ConfigSupply+0x70>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800379e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a2:	d1ee      	bne.n	8003782 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	58024800 	.word	0x58024800

080037b4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80037b8:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a04      	ldr	r2, [pc, #16]	@ (80037d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80037be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c2:	60d3      	str	r3, [r2, #12]
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	58024800 	.word	0x58024800

080037d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	@ 0x30
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e3c8      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8087 	beq.w	8003902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f4:	4b88      	ldr	r3, [pc, #544]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037fe:	4b86      	ldr	r3, [pc, #536]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	2b10      	cmp	r3, #16
 8003808:	d007      	beq.n	800381a <HAL_RCC_OscConfig+0x46>
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	2b18      	cmp	r3, #24
 800380e:	d110      	bne.n	8003832 <HAL_RCC_OscConfig+0x5e>
 8003810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d10b      	bne.n	8003832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d06c      	beq.n	8003900 <HAL_RCC_OscConfig+0x12c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d168      	bne.n	8003900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e3a2      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x76>
 800383c:	4b76      	ldr	r3, [pc, #472]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a75      	ldr	r2, [pc, #468]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	e02e      	b.n	80038a8 <HAL_RCC_OscConfig+0xd4>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x98>
 8003852:	4b71      	ldr	r3, [pc, #452]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a70      	ldr	r2, [pc, #448]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b6e      	ldr	r3, [pc, #440]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6d      	ldr	r2, [pc, #436]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e01d      	b.n	80038a8 <HAL_RCC_OscConfig+0xd4>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0xbc>
 8003876:	4b68      	ldr	r3, [pc, #416]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a67      	ldr	r2, [pc, #412]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b65      	ldr	r3, [pc, #404]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a64      	ldr	r2, [pc, #400]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0xd4>
 8003890:	4b61      	ldr	r3, [pc, #388]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a60      	ldr	r2, [pc, #384]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b5e      	ldr	r3, [pc, #376]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe f95e 	bl	8001b70 <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fe f95a 	bl	8001b70 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	@ 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e356      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038ca:	4b53      	ldr	r3, [pc, #332]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0xe4>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe f94a 	bl	8001b70 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fe f946 	bl	8001b70 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	@ 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e342      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038f2:	4b49      	ldr	r3, [pc, #292]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x10c>
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 808c 	beq.w	8003a28 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003910:	4b41      	ldr	r3, [pc, #260]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003918:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800391a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 800391c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_RCC_OscConfig+0x162>
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2b18      	cmp	r3, #24
 800392a:	d137      	bne.n	800399c <HAL_RCC_OscConfig+0x1c8>
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d132      	bne.n	800399c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003936:	4b38      	ldr	r3, [pc, #224]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_RCC_OscConfig+0x17a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e314      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800394e:	4b32      	ldr	r3, [pc, #200]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0219 	bic.w	r2, r3, #25
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	492f      	ldr	r1, [pc, #188]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe f906 	bl	8001b70 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003968:	f7fe f902 	bl	8001b70 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e2fe      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800397a:	4b27      	ldr	r3, [pc, #156]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	4920      	ldr	r1, [pc, #128]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800399a:	e045      	b.n	8003a28 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d026      	beq.n	80039f2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 0219 	bic.w	r2, r3, #25
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4919      	ldr	r1, [pc, #100]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fe f8db 	bl	8001b70 <HAL_GetTick>
 80039ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fe f8d7 	bl	8001b70 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e2d3      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039d0:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	061b      	lsls	r3, r3, #24
 80039ea:	490b      	ldr	r1, [pc, #44]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	e01a      	b.n	8003a28 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a08      	ldr	r2, [pc, #32]	@ (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fe f8b7 	bl	8001b70 <HAL_GetTick>
 8003a02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fe f8b3 	bl	8001b70 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d903      	bls.n	8003a1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e2af      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
 8003a18:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a1c:	4b96      	ldr	r3, [pc, #600]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ee      	bne.n	8003a06 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d06a      	beq.n	8003b0a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a34:	4b90      	ldr	r3, [pc, #576]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a3c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a3e:	4b8e      	ldr	r3, [pc, #568]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a42:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d007      	beq.n	8003a5a <HAL_RCC_OscConfig+0x286>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b18      	cmp	r3, #24
 8003a4e:	d11b      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2b4>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d116      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a5a:	4b87      	ldr	r3, [pc, #540]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_RCC_OscConfig+0x29e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	2b80      	cmp	r3, #128	@ 0x80
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e282      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a72:	4b81      	ldr	r3, [pc, #516]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	497d      	ldr	r1, [pc, #500]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a86:	e040      	b.n	8003b0a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d023      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a90:	4b79      	ldr	r3, [pc, #484]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a78      	ldr	r2, [pc, #480]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe f868 	bl	8001b70 <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003aa4:	f7fe f864 	bl	8001b70 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e260      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ab6:	4b70      	ldr	r3, [pc, #448]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	4969      	ldr	r1, [pc, #420]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60cb      	str	r3, [r1, #12]
 8003ad6:	e018      	b.n	8003b0a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ad8:	4b67      	ldr	r3, [pc, #412]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a66      	ldr	r2, [pc, #408]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ade:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f844 	bl	8001b70 <HAL_GetTick>
 8003ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003aec:	f7fe f840 	bl	8001b70 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e23c      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003afe:	4b5e      	ldr	r3, [pc, #376]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d036      	beq.n	8003b84 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d019      	beq.n	8003b52 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b56      	ldr	r3, [pc, #344]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b22:	4a55      	ldr	r2, [pc, #340]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fe f821 	bl	8001b70 <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b32:	f7fe f81d 	bl	8001b70 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e219      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b44:	4b4c      	ldr	r3, [pc, #304]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x35e>
 8003b50:	e018      	b.n	8003b84 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b52:	4b49      	ldr	r3, [pc, #292]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b56:	4a48      	ldr	r2, [pc, #288]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fe f807 	bl	8001b70 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b66:	f7fe f803 	bl	8001b70 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e1ff      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b78:	4b3f      	ldr	r3, [pc, #252]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d036      	beq.n	8003bfe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d019      	beq.n	8003bcc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b98:	4b37      	ldr	r3, [pc, #220]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a36      	ldr	r2, [pc, #216]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ba4:	f7fd ffe4 	bl	8001b70 <HAL_GetTick>
 8003ba8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bac:	f7fd ffe0 	bl	8001b70 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1dc      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x3d8>
 8003bca:	e018      	b.n	8003bfe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003bd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bd8:	f7fd ffca 	bl	8001b70 <HAL_GetTick>
 8003bdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be0:	f7fd ffc6 	bl	8001b70 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1c2      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bf2:	4b21      	ldr	r3, [pc, #132]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8086 	beq.w	8003d18 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <HAL_RCC_OscConfig+0x4a8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1a      	ldr	r2, [pc, #104]	@ (8003c7c <HAL_RCC_OscConfig+0x4a8>)
 8003c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c18:	f7fd ffaa 	bl	8001b70 <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c20:	f7fd ffa6 	bl	8001b70 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	@ 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1a2      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c32:	4b12      	ldr	r3, [pc, #72]	@ (8003c7c <HAL_RCC_OscConfig+0x4a8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d106      	bne.n	8003c54 <HAL_RCC_OscConfig+0x480>
 8003c46:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c52:	e032      	b.n	8003cba <HAL_RCC_OscConfig+0x4e6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d111      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4ac>
 8003c5c:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c60:	4a05      	ldr	r2, [pc, #20]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c68:	4b03      	ldr	r3, [pc, #12]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6c:	4a02      	ldr	r2, [pc, #8]	@ (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c6e:	f023 0304 	bic.w	r3, r3, #4
 8003c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c74:	e021      	b.n	8003cba <HAL_RCC_OscConfig+0x4e6>
 8003c76:	bf00      	nop
 8003c78:	58024400 	.word	0x58024400
 8003c7c:	58024800 	.word	0x58024800
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d10c      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x4ce>
 8003c88:	4b83      	ldr	r3, [pc, #524]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8c:	4a82      	ldr	r2, [pc, #520]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003c8e:	f043 0304 	orr.w	r3, r3, #4
 8003c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c94:	4b80      	ldr	r3, [pc, #512]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c98:	4a7f      	ldr	r2, [pc, #508]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca0:	e00b      	b.n	8003cba <HAL_RCC_OscConfig+0x4e6>
 8003ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cae:	4b7a      	ldr	r3, [pc, #488]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb2:	4a79      	ldr	r2, [pc, #484]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d015      	beq.n	8003cee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc2:	f7fd ff55 	bl	8001b70 <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fd ff51 	bl	8001b70 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e14b      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ce0:	4b6d      	ldr	r3, [pc, #436]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ee      	beq.n	8003cca <HAL_RCC_OscConfig+0x4f6>
 8003cec:	e014      	b.n	8003d18 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fd ff3f 	bl	8001b70 <HAL_GetTick>
 8003cf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fd ff3b 	bl	8001b70 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e135      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d0c:	4b62      	ldr	r3, [pc, #392]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ee      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 812a 	beq.w	8003f76 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d22:	4b5d      	ldr	r3, [pc, #372]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d2a:	2b18      	cmp	r3, #24
 8003d2c:	f000 80ba 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	f040 8095 	bne.w	8003e64 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b57      	ldr	r3, [pc, #348]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a56      	ldr	r2, [pc, #344]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fd ff13 	bl	8001b70 <HAL_GetTick>
 8003d4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4e:	f7fd ff0f 	bl	8001b70 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e10b      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d60:	4b4d      	ldr	r3, [pc, #308]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d70:	4b4a      	ldr	r3, [pc, #296]	@ (8003e9c <HAL_RCC_OscConfig+0x6c8>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	4945      	ldr	r1, [pc, #276]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d94:	3b01      	subs	r3, #1
 8003d96:	025b      	lsls	r3, r3, #9
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	3b01      	subs	r3, #1
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dae:	3b01      	subs	r3, #1
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003db6:	4938      	ldr	r1, [pc, #224]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003dbc:	4b36      	ldr	r3, [pc, #216]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	4a35      	ldr	r2, [pc, #212]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dc8:	4b33      	ldr	r3, [pc, #204]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dcc:	4b34      	ldr	r3, [pc, #208]	@ (8003ea0 <HAL_RCC_OscConfig+0x6cc>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003dd4:	00d2      	lsls	r2, r2, #3
 8003dd6:	4930      	ldr	r1, [pc, #192]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	f023 020c 	bic.w	r2, r3, #12
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	492b      	ldr	r1, [pc, #172]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003dee:	4b2a      	ldr	r3, [pc, #168]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df2:	f023 0202 	bic.w	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	4927      	ldr	r1, [pc, #156]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e00:	4b25      	ldr	r3, [pc, #148]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	4a24      	ldr	r2, [pc, #144]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0c:	4b22      	ldr	r3, [pc, #136]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	4a21      	ldr	r2, [pc, #132]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e18:	4b1f      	ldr	r3, [pc, #124]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e24:	4b1c      	ldr	r3, [pc, #112]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	4a1b      	ldr	r2, [pc, #108]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e30:	4b19      	ldr	r3, [pc, #100]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fe98 	bl	8001b70 <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd fe94 	bl	8001b70 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e090      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e56:	4b10      	ldr	r3, [pc, #64]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x670>
 8003e62:	e088      	b.n	8003f76 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0b      	ldr	r2, [pc, #44]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fd fe7e 	bl	8001b70 <HAL_GetTick>
 8003e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fd fe7a 	bl	8001b70 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e076      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e8a:	4b03      	ldr	r3, [pc, #12]	@ (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x6a4>
 8003e96:	e06e      	b.n	8003f76 <HAL_RCC_OscConfig+0x7a2>
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	fffffc0c 	.word	0xfffffc0c
 8003ea0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ea4:	4b36      	ldr	r3, [pc, #216]	@ (8003f80 <HAL_RCC_OscConfig+0x7ac>)
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003eaa:	4b35      	ldr	r3, [pc, #212]	@ (8003f80 <HAL_RCC_OscConfig+0x7ac>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d031      	beq.n	8003f1c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f003 0203 	and.w	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d12a      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d122      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d11a      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	0a5b      	lsrs	r3, r3, #9
 8003eea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d111      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d108      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	0e1b      	lsrs	r3, r3, #24
 8003f0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e02b      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f20:	4b17      	ldr	r3, [pc, #92]	@ (8003f80 <HAL_RCC_OscConfig+0x7ac>)
 8003f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f24:	08db      	lsrs	r3, r3, #3
 8003f26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d01f      	beq.n	8003f76 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f36:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <HAL_RCC_OscConfig+0x7ac>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3a:	4a11      	ldr	r2, [pc, #68]	@ (8003f80 <HAL_RCC_OscConfig+0x7ac>)
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f42:	f7fd fe15 	bl	8001b70 <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f48:	bf00      	nop
 8003f4a:	f7fd fe11 	bl	8001b70 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d0f9      	beq.n	8003f4a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <HAL_RCC_OscConfig+0x7ac>)
 8003f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <HAL_RCC_OscConfig+0x7b0>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f62:	00d2      	lsls	r2, r2, #3
 8003f64:	4906      	ldr	r1, [pc, #24]	@ (8003f80 <HAL_RCC_OscConfig+0x7ac>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f6a:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <HAL_RCC_OscConfig+0x7ac>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	4a04      	ldr	r2, [pc, #16]	@ (8003f80 <HAL_RCC_OscConfig+0x7ac>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3730      	adds	r7, #48	@ 0x30
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	58024400 	.word	0x58024400
 8003f84:	ffff0007 	.word	0xffff0007

08003f88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e19c      	b.n	80042d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b8a      	ldr	r3, [pc, #552]	@ (80041c8 <HAL_RCC_ClockConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d910      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b87      	ldr	r3, [pc, #540]	@ (80041c8 <HAL_RCC_ClockConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 020f 	bic.w	r2, r3, #15
 8003fb2:	4985      	ldr	r1, [pc, #532]	@ (80041c8 <HAL_RCC_ClockConfig+0x240>)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b83      	ldr	r3, [pc, #524]	@ (80041c8 <HAL_RCC_ClockConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e184      	b.n	80042d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d010      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d908      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fe8:	4b78      	ldr	r3, [pc, #480]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	4975      	ldr	r1, [pc, #468]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d010      	beq.n	8004028 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	4b70      	ldr	r3, [pc, #448]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004012:	429a      	cmp	r2, r3
 8004014:	d908      	bls.n	8004028 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004016:	4b6d      	ldr	r3, [pc, #436]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	496a      	ldr	r1, [pc, #424]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004024:	4313      	orrs	r3, r2
 8004026:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699a      	ldr	r2, [r3, #24]
 8004038:	4b64      	ldr	r3, [pc, #400]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004040:	429a      	cmp	r2, r3
 8004042:	d908      	bls.n	8004056 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004044:	4b61      	ldr	r3, [pc, #388]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	495e      	ldr	r1, [pc, #376]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004052:	4313      	orrs	r3, r2
 8004054:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	4b59      	ldr	r3, [pc, #356]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800406e:	429a      	cmp	r2, r3
 8004070:	d908      	bls.n	8004084 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004072:	4b56      	ldr	r3, [pc, #344]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4953      	ldr	r1, [pc, #332]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004080:	4313      	orrs	r3, r2
 8004082:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d010      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	4b4d      	ldr	r3, [pc, #308]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	429a      	cmp	r2, r3
 800409e:	d908      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a0:	4b4a      	ldr	r3, [pc, #296]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f023 020f 	bic.w	r2, r3, #15
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4947      	ldr	r1, [pc, #284]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d055      	beq.n	800416a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040be:	4b43      	ldr	r3, [pc, #268]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4940      	ldr	r1, [pc, #256]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040d8:	4b3c      	ldr	r3, [pc, #240]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d121      	bne.n	8004128 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0f6      	b.n	80042d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040f0:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d115      	bne.n	8004128 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0ea      	b.n	80042d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004108:	4b30      	ldr	r3, [pc, #192]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0de      	b.n	80042d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004118:	4b2c      	ldr	r3, [pc, #176]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0d6      	b.n	80042d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004128:	4b28      	ldr	r3, [pc, #160]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f023 0207 	bic.w	r2, r3, #7
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4925      	ldr	r1, [pc, #148]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004136:	4313      	orrs	r3, r2
 8004138:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413a:	f7fd fd19 	bl	8001b70 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004140:	e00a      	b.n	8004158 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004142:	f7fd fd15 	bl	8001b70 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e0be      	b.n	80042d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004158:	4b1c      	ldr	r3, [pc, #112]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	429a      	cmp	r2, r3
 8004168:	d1eb      	bne.n	8004142 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d010      	beq.n	8004198 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	4b14      	ldr	r3, [pc, #80]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	429a      	cmp	r2, r3
 8004184:	d208      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004186:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f023 020f 	bic.w	r2, r3, #15
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	490e      	ldr	r1, [pc, #56]	@ (80041cc <HAL_RCC_ClockConfig+0x244>)
 8004194:	4313      	orrs	r3, r2
 8004196:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004198:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <HAL_RCC_ClockConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d214      	bcs.n	80041d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b08      	ldr	r3, [pc, #32]	@ (80041c8 <HAL_RCC_ClockConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 020f 	bic.w	r2, r3, #15
 80041ae:	4906      	ldr	r1, [pc, #24]	@ (80041c8 <HAL_RCC_ClockConfig+0x240>)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b04      	ldr	r3, [pc, #16]	@ (80041c8 <HAL_RCC_ClockConfig+0x240>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e086      	b.n	80042d6 <HAL_RCC_ClockConfig+0x34e>
 80041c8:	52002000 	.word	0x52002000
 80041cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	4b3f      	ldr	r3, [pc, #252]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d208      	bcs.n	80041fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041ec:	4b3c      	ldr	r3, [pc, #240]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	4939      	ldr	r1, [pc, #228]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d010      	beq.n	800422c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	4b34      	ldr	r3, [pc, #208]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004216:	429a      	cmp	r2, r3
 8004218:	d208      	bcs.n	800422c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800421a:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	492e      	ldr	r1, [pc, #184]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 8004228:	4313      	orrs	r3, r2
 800422a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699a      	ldr	r2, [r3, #24]
 800423c:	4b28      	ldr	r3, [pc, #160]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004244:	429a      	cmp	r2, r3
 8004246:	d208      	bcs.n	800425a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004248:	4b25      	ldr	r3, [pc, #148]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4922      	ldr	r1, [pc, #136]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 8004256:	4313      	orrs	r3, r2
 8004258:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d010      	beq.n	8004288 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004272:	429a      	cmp	r2, r3
 8004274:	d208      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004276:	4b1a      	ldr	r3, [pc, #104]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	4917      	ldr	r1, [pc, #92]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 8004284:	4313      	orrs	r3, r2
 8004286:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004288:	f000 f834 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	0a1b      	lsrs	r3, r3, #8
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	4912      	ldr	r1, [pc, #72]	@ (80042e4 <HAL_RCC_ClockConfig+0x35c>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042a6:	4b0e      	ldr	r3, [pc, #56]	@ (80042e0 <HAL_RCC_ClockConfig+0x358>)
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	4a0d      	ldr	r2, [pc, #52]	@ (80042e4 <HAL_RCC_ClockConfig+0x35c>)
 80042b0:	5cd3      	ldrb	r3, [r2, r3]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	4a0a      	ldr	r2, [pc, #40]	@ (80042e8 <HAL_RCC_ClockConfig+0x360>)
 80042be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042c0:	4a0a      	ldr	r2, [pc, #40]	@ (80042ec <HAL_RCC_ClockConfig+0x364>)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80042c6:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <HAL_RCC_ClockConfig+0x368>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd fc06 	bl	8001adc <HAL_InitTick>
 80042d0:	4603      	mov	r3, r0
 80042d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	58024400 	.word	0x58024400
 80042e4:	0800bcb4 	.word	0x0800bcb4
 80042e8:	240001b4 	.word	0x240001b4
 80042ec:	240001b0 	.word	0x240001b0
 80042f0:	240001b8 	.word	0x240001b8

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	@ 0x24
 80042f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042fa:	4bb3      	ldr	r3, [pc, #716]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004302:	2b18      	cmp	r3, #24
 8004304:	f200 8155 	bhi.w	80045b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004308:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <HAL_RCC_GetSysClockFreq+0x1c>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004375 	.word	0x08004375
 8004314:	080045b3 	.word	0x080045b3
 8004318:	080045b3 	.word	0x080045b3
 800431c:	080045b3 	.word	0x080045b3
 8004320:	080045b3 	.word	0x080045b3
 8004324:	080045b3 	.word	0x080045b3
 8004328:	080045b3 	.word	0x080045b3
 800432c:	080045b3 	.word	0x080045b3
 8004330:	0800439b 	.word	0x0800439b
 8004334:	080045b3 	.word	0x080045b3
 8004338:	080045b3 	.word	0x080045b3
 800433c:	080045b3 	.word	0x080045b3
 8004340:	080045b3 	.word	0x080045b3
 8004344:	080045b3 	.word	0x080045b3
 8004348:	080045b3 	.word	0x080045b3
 800434c:	080045b3 	.word	0x080045b3
 8004350:	080043a1 	.word	0x080043a1
 8004354:	080045b3 	.word	0x080045b3
 8004358:	080045b3 	.word	0x080045b3
 800435c:	080045b3 	.word	0x080045b3
 8004360:	080045b3 	.word	0x080045b3
 8004364:	080045b3 	.word	0x080045b3
 8004368:	080045b3 	.word	0x080045b3
 800436c:	080045b3 	.word	0x080045b3
 8004370:	080043a7 	.word	0x080043a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004374:	4b94      	ldr	r3, [pc, #592]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004380:	4b91      	ldr	r3, [pc, #580]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	08db      	lsrs	r3, r3, #3
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	4a90      	ldr	r2, [pc, #576]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004392:	e111      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004394:	4b8d      	ldr	r3, [pc, #564]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004396:	61bb      	str	r3, [r7, #24]
      break;
 8004398:	e10e      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800439a:	4b8d      	ldr	r3, [pc, #564]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800439c:	61bb      	str	r3, [r7, #24]
      break;
 800439e:	e10b      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80043a0:	4b8c      	ldr	r3, [pc, #560]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043a2:	61bb      	str	r3, [r7, #24]
      break;
 80043a4:	e108      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043a6:	4b88      	ldr	r3, [pc, #544]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043b0:	4b85      	ldr	r3, [pc, #532]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043bc:	4b82      	ldr	r3, [pc, #520]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043c6:	4b80      	ldr	r3, [pc, #512]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ca:	08db      	lsrs	r3, r3, #3
 80043cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80e1 	beq.w	80045ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	f000 8083 	beq.w	80044f8 <HAL_RCC_GetSysClockFreq+0x204>
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	f200 80a1 	bhi.w	800453c <HAL_RCC_GetSysClockFreq+0x248>
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x114>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d056      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004406:	e099      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004408:	4b6f      	ldr	r3, [pc, #444]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d02d      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004414:	4b6c      	ldr	r3, [pc, #432]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	08db      	lsrs	r3, r3, #3
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	4a6b      	ldr	r2, [pc, #428]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
 8004424:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443e:	4b62      	ldr	r3, [pc, #392]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004452:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80045d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800446e:	e087      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80045dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800447e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004482:	4b51      	ldr	r3, [pc, #324]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004492:	ed97 6a02 	vldr	s12, [r7, #8]
 8004496:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80045d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800449a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044b2:	e065      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80045e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c6:	4b40      	ldr	r3, [pc, #256]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80045d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044f6:	e043      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004502:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80045e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450a:	4b2f      	ldr	r3, [pc, #188]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451a:	ed97 6a02 	vldr	s12, [r7, #8]
 800451e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80045d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800452e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004536:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800453a:	e021      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80045e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800454a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454e:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004562:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80045d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800457e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004580:	4b11      	ldr	r3, [pc, #68]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	0a5b      	lsrs	r3, r3, #9
 8004586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800458a:	3301      	adds	r3, #1
 800458c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004598:	edd7 6a07 	vldr	s13, [r7, #28]
 800459c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a4:	ee17 3a90 	vmov	r3, s15
 80045a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045aa:	e005      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
      break;
 80045b0:	e002      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80045b2:	4b07      	ldr	r3, [pc, #28]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045b4:	61bb      	str	r3, [r7, #24]
      break;
 80045b6:	bf00      	nop
  }

  return sysclockfreq;
 80045b8:	69bb      	ldr	r3, [r7, #24]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3724      	adds	r7, #36	@ 0x24
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	58024400 	.word	0x58024400
 80045cc:	03d09000 	.word	0x03d09000
 80045d0:	003d0900 	.word	0x003d0900
 80045d4:	017d7840 	.word	0x017d7840
 80045d8:	46000000 	.word	0x46000000
 80045dc:	4c742400 	.word	0x4c742400
 80045e0:	4a742400 	.word	0x4a742400
 80045e4:	4bbebc20 	.word	0x4bbebc20

080045e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80045ee:	f7ff fe81 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <HAL_RCC_GetHCLKFreq+0x50>)
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	490f      	ldr	r1, [pc, #60]	@ (800463c <HAL_RCC_GetHCLKFreq+0x54>)
 8004600:	5ccb      	ldrb	r3, [r1, r3]
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	fa22 f303 	lsr.w	r3, r2, r3
 800460a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800460c:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <HAL_RCC_GetHCLKFreq+0x50>)
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	4a09      	ldr	r2, [pc, #36]	@ (800463c <HAL_RCC_GetHCLKFreq+0x54>)
 8004616:	5cd3      	ldrb	r3, [r2, r3]
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	4a07      	ldr	r2, [pc, #28]	@ (8004640 <HAL_RCC_GetHCLKFreq+0x58>)
 8004624:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004626:	4a07      	ldr	r2, [pc, #28]	@ (8004644 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800462c:	4b04      	ldr	r3, [pc, #16]	@ (8004640 <HAL_RCC_GetHCLKFreq+0x58>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	58024400 	.word	0x58024400
 800463c:	0800bcb4 	.word	0x0800bcb4
 8004640:	240001b4 	.word	0x240001b4
 8004644:	240001b0 	.word	0x240001b0

08004648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800464c:	f7ff ffcc 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b06      	ldr	r3, [pc, #24]	@ (800466c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	4904      	ldr	r1, [pc, #16]	@ (8004670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	58024400 	.word	0x58024400
 8004670:	0800bcb4 	.word	0x0800bcb4

08004674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004678:	f7ff ffb6 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4904      	ldr	r1, [pc, #16]	@ (800469c <HAL_RCC_GetPCLK2Freq+0x28>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	58024400 	.word	0x58024400
 800469c:	0800bcb4 	.word	0x0800bcb4

080046a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a4:	b0c6      	sub	sp, #280	@ 0x118
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80046c4:	2500      	movs	r5, #0
 80046c6:	ea54 0305 	orrs.w	r3, r4, r5
 80046ca:	d049      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80046cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046d6:	d02f      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80046d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046dc:	d828      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046e2:	d01a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80046e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046e8:	d822      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046f2:	d007      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046f4:	e01c      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f6:	4bab      	ldr	r3, [pc, #684]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	4aaa      	ldr	r2, [pc, #680]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004700:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004702:	e01a      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004708:	3308      	adds	r3, #8
 800470a:	2102      	movs	r1, #2
 800470c:	4618      	mov	r0, r3
 800470e:	f001 fc25 	bl	8005f5c <RCCEx_PLL2_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004718:	e00f      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800471a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471e:	3328      	adds	r3, #40	@ 0x28
 8004720:	2102      	movs	r1, #2
 8004722:	4618      	mov	r0, r3
 8004724:	f001 fccc 	bl	80060c0 <RCCEx_PLL3_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800472e:	e004      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004736:	e000      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004742:	4b98      	ldr	r3, [pc, #608]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004746:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800474a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800474e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004750:	4a94      	ldr	r2, [pc, #592]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004752:	430b      	orrs	r3, r1
 8004754:	6513      	str	r3, [r2, #80]	@ 0x50
 8004756:	e003      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800475c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800476c:	f04f 0900 	mov.w	r9, #0
 8004770:	ea58 0309 	orrs.w	r3, r8, r9
 8004774:	d047      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	2b04      	cmp	r3, #4
 800477e:	d82a      	bhi.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004780:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	0800479d 	.word	0x0800479d
 800478c:	080047ab 	.word	0x080047ab
 8004790:	080047c1 	.word	0x080047c1
 8004794:	080047df 	.word	0x080047df
 8004798:	080047df 	.word	0x080047df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479c:	4b81      	ldr	r3, [pc, #516]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	4a80      	ldr	r2, [pc, #512]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047a8:	e01a      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ae:	3308      	adds	r3, #8
 80047b0:	2100      	movs	r1, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	f001 fbd2 	bl	8005f5c <RCCEx_PLL2_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047be:	e00f      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c4:	3328      	adds	r3, #40	@ 0x28
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 fc79 	bl	80060c0 <RCCEx_PLL3_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047d4:	e004      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047dc:	e000      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80047de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047e8:	4b6e      	ldr	r3, [pc, #440]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ec:	f023 0107 	bic.w	r1, r3, #7
 80047f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	4a6b      	ldr	r2, [pc, #428]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004802:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004812:	f04f 0b00 	mov.w	fp, #0
 8004816:	ea5a 030b 	orrs.w	r3, sl, fp
 800481a:	d05b      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800481c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004824:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004828:	d03b      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800482a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800482e:	d834      	bhi.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004830:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004834:	d037      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004836:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800483a:	d82e      	bhi.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800483c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004840:	d033      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004842:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004846:	d828      	bhi.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800484c:	d01a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800484e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004852:	d822      	bhi.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004858:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800485c:	d007      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800485e:	e01c      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004860:	4b50      	ldr	r3, [pc, #320]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	4a4f      	ldr	r2, [pc, #316]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800486a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800486c:	e01e      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800486e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004872:	3308      	adds	r3, #8
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f001 fb70 	bl	8005f5c <RCCEx_PLL2_Config>
 800487c:	4603      	mov	r3, r0
 800487e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004882:	e013      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004888:	3328      	adds	r3, #40	@ 0x28
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f001 fc17 	bl	80060c0 <RCCEx_PLL3_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004898:	e008      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048a0:	e004      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80048a2:	bf00      	nop
 80048a4:	e002      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80048aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048b4:	4b3b      	ldr	r3, [pc, #236]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80048bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048c4:	4a37      	ldr	r2, [pc, #220]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048c6:	430b      	orrs	r3, r1
 80048c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ca:	e003      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80048e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80048e4:	2300      	movs	r3, #0
 80048e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80048ee:	460b      	mov	r3, r1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	d05d      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004900:	d03b      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004902:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004906:	d834      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004908:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800490c:	d037      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800490e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004912:	d82e      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004914:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004918:	d033      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800491a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800491e:	d828      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004924:	d01a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800492a:	d822      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004934:	d007      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004936:	e01c      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004938:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	4a19      	ldr	r2, [pc, #100]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800493e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004944:	e01e      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494a:	3308      	adds	r3, #8
 800494c:	2100      	movs	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f001 fb04 	bl	8005f5c <RCCEx_PLL2_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800495a:	e013      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800495c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004960:	3328      	adds	r3, #40	@ 0x28
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f001 fbab 	bl	80060c0 <RCCEx_PLL3_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004970:	e008      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004978:	e004      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800497a:	bf00      	nop
 800497c:	e002      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10d      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004990:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004998:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800499c:	4a01      	ldr	r2, [pc, #4]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049a2:	e005      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80049a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80049c6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4313      	orrs	r3, r2
 80049ce:	d03a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80049d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d6:	2b30      	cmp	r3, #48	@ 0x30
 80049d8:	d01f      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80049da:	2b30      	cmp	r3, #48	@ 0x30
 80049dc:	d819      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d00c      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d815      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d019      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d111      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ee:	4baa      	ldr	r3, [pc, #680]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	4aa9      	ldr	r2, [pc, #676]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80049fa:	e011      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a00:	3308      	adds	r3, #8
 8004a02:	2102      	movs	r1, #2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 faa9 	bl	8005f5c <RCCEx_PLL2_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004a10:	e006      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a18:	e002      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a28:	4b9b      	ldr	r3, [pc, #620]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a36:	4a98      	ldr	r2, [pc, #608]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a3c:	e003      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a56:	2300      	movs	r3, #0
 8004a58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004a60:	460b      	mov	r3, r1
 8004a62:	4313      	orrs	r3, r2
 8004a64:	d051      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a70:	d035      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004a72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a76:	d82e      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004a78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a7c:	d031      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004a7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a82:	d828      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a88:	d01a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a8e:	d822      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a98:	d007      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004a9a:	e01c      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	4a7d      	ldr	r2, [pc, #500]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004aa8:	e01c      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aae:	3308      	adds	r3, #8
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 fa52 	bl	8005f5c <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004abe:	e011      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac4:	3328      	adds	r3, #40	@ 0x28
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 faf9 	bl	80060c0 <RCCEx_PLL3_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ad4:	e006      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004adc:	e002      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004ade:	bf00      	nop
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004aec:	4b6a      	ldr	r3, [pc, #424]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afa:	4a67      	ldr	r2, [pc, #412]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b00:	e003      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b20:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4313      	orrs	r3, r2
 8004b28:	d053      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b34:	d033      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004b36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b3a:	d82c      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004b3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b40:	d02f      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004b42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b46:	d826      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004b48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b4c:	d02b      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004b4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b52:	d820      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004b54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b58:	d012      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b5e:	d81a      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d022      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b68:	d115      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6e:	3308      	adds	r3, #8
 8004b70:	2101      	movs	r1, #1
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 f9f2 	bl	8005f5c <RCCEx_PLL2_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b7e:	e015      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b84:	3328      	adds	r3, #40	@ 0x28
 8004b86:	2101      	movs	r1, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 fa99 	bl	80060c0 <RCCEx_PLL3_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b94:	e00a      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bb4:	4b38      	ldr	r3, [pc, #224]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc2:	4a35      	ldr	r2, [pc, #212]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bc8:	e003      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004bde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004be8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d058      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bfe:	d033      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c04:	d82c      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0a:	d02f      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c10:	d826      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004c12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c16:	d02b      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004c18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c1c:	d820      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c22:	d012      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c28:	d81a      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d022      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c32:	d115      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c38:	3308      	adds	r3, #8
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f98d 	bl	8005f5c <RCCEx_PLL2_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c48:	e015      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4e:	3328      	adds	r3, #40	@ 0x28
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 fa34 	bl	80060c0 <RCCEx_PLL3_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c66:	e006      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c68:	bf00      	nop
 8004c6a:	e004      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c6c:	bf00      	nop
 8004c6e:	e002      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10e      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c7e:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c8e:	4a02      	ldr	r2, [pc, #8]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c94:	e006      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004c96:	bf00      	nop
 8004c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004cba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d037      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cce:	d00e      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cd4:	d816      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d018      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cde:	d111      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce0:	4bc4      	ldr	r3, [pc, #784]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	4ac3      	ldr	r2, [pc, #780]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cec:	e00f      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 f930 	bl	8005f5c <RCCEx_PLL2_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d02:	e004      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d0a:	e000      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d16:	4bb7      	ldr	r3, [pc, #732]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d24:	4ab3      	ldr	r2, [pc, #716]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d26:	430b      	orrs	r3, r1
 8004d28:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d2a:	e003      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d44:	2300      	movs	r3, #0
 8004d46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4313      	orrs	r3, r2
 8004d52:	d039      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d81c      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004da1 	.word	0x08004da1
 8004d68:	08004d75 	.word	0x08004d75
 8004d6c:	08004d83 	.word	0x08004d83
 8004d70:	08004da1 	.word	0x08004da1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d74:	4b9f      	ldr	r3, [pc, #636]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	4a9e      	ldr	r2, [pc, #632]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d80:	e00f      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d86:	3308      	adds	r3, #8
 8004d88:	2102      	movs	r1, #2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 f8e6 	bl	8005f5c <RCCEx_PLL2_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d96:	e004      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d9e:	e000      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004daa:	4b92      	ldr	r3, [pc, #584]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dae:	f023 0103 	bic.w	r1, r3, #3
 8004db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db8:	4a8e      	ldr	r2, [pc, #568]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dbe:	e003      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f000 8099 	beq.w	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dea:	4b83      	ldr	r3, [pc, #524]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a82      	ldr	r2, [pc, #520]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004df6:	f7fc febb 	bl	8001b70 <HAL_GetTick>
 8004dfa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e00:	f7fc feb6 	bl	8001b70 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b64      	cmp	r3, #100	@ 0x64
 8004e0e:	d903      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e16:	e005      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e18:	4b77      	ldr	r3, [pc, #476]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ed      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004e24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d173      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e2c:	4b71      	ldr	r3, [pc, #452]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e38:	4053      	eors	r3, r2
 8004e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d015      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e42:	4b6c      	ldr	r3, [pc, #432]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e4e:	4b69      	ldr	r3, [pc, #420]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e52:	4a68      	ldr	r2, [pc, #416]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e58:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5a:	4b66      	ldr	r3, [pc, #408]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5e:	4a65      	ldr	r2, [pc, #404]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e64:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e66:	4a63      	ldr	r2, [pc, #396]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e6c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7a:	d118      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fc fe78 	bl	8001b70 <HAL_GetTick>
 8004e80:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e84:	e00d      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fc fe73 	bl	8001b70 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004e90:	1ad2      	subs	r2, r2, r3
 8004e92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d903      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004ea0:	e005      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ea2:	4b54      	ldr	r3, [pc, #336]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0eb      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004eae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d129      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ec6:	d10e      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ed8:	091a      	lsrs	r2, r3, #4
 8004eda:	4b48      	ldr	r3, [pc, #288]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	4a45      	ldr	r2, [pc, #276]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6113      	str	r3, [r2, #16]
 8004ee4:	e005      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004ee6:	4b43      	ldr	r3, [pc, #268]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	4a42      	ldr	r2, [pc, #264]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ef0:	6113      	str	r3, [r2, #16]
 8004ef2:	4b40      	ldr	r3, [pc, #256]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f02:	4a3c      	ldr	r2, [pc, #240]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f08:	e008      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004f12:	e003      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f002 0301 	and.w	r3, r2, #1
 8004f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004f32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004f36:	460b      	mov	r3, r1
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f000 808f 	beq.w	800505c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f44:	2b28      	cmp	r3, #40	@ 0x28
 8004f46:	d871      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004f48:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08005035 	.word	0x08005035
 8004f54:	0800502d 	.word	0x0800502d
 8004f58:	0800502d 	.word	0x0800502d
 8004f5c:	0800502d 	.word	0x0800502d
 8004f60:	0800502d 	.word	0x0800502d
 8004f64:	0800502d 	.word	0x0800502d
 8004f68:	0800502d 	.word	0x0800502d
 8004f6c:	0800502d 	.word	0x0800502d
 8004f70:	08005001 	.word	0x08005001
 8004f74:	0800502d 	.word	0x0800502d
 8004f78:	0800502d 	.word	0x0800502d
 8004f7c:	0800502d 	.word	0x0800502d
 8004f80:	0800502d 	.word	0x0800502d
 8004f84:	0800502d 	.word	0x0800502d
 8004f88:	0800502d 	.word	0x0800502d
 8004f8c:	0800502d 	.word	0x0800502d
 8004f90:	08005017 	.word	0x08005017
 8004f94:	0800502d 	.word	0x0800502d
 8004f98:	0800502d 	.word	0x0800502d
 8004f9c:	0800502d 	.word	0x0800502d
 8004fa0:	0800502d 	.word	0x0800502d
 8004fa4:	0800502d 	.word	0x0800502d
 8004fa8:	0800502d 	.word	0x0800502d
 8004fac:	0800502d 	.word	0x0800502d
 8004fb0:	08005035 	.word	0x08005035
 8004fb4:	0800502d 	.word	0x0800502d
 8004fb8:	0800502d 	.word	0x0800502d
 8004fbc:	0800502d 	.word	0x0800502d
 8004fc0:	0800502d 	.word	0x0800502d
 8004fc4:	0800502d 	.word	0x0800502d
 8004fc8:	0800502d 	.word	0x0800502d
 8004fcc:	0800502d 	.word	0x0800502d
 8004fd0:	08005035 	.word	0x08005035
 8004fd4:	0800502d 	.word	0x0800502d
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	0800502d 	.word	0x0800502d
 8004fe0:	0800502d 	.word	0x0800502d
 8004fe4:	0800502d 	.word	0x0800502d
 8004fe8:	0800502d 	.word	0x0800502d
 8004fec:	0800502d 	.word	0x0800502d
 8004ff0:	08005035 	.word	0x08005035
 8004ff4:	58024400 	.word	0x58024400
 8004ff8:	58024800 	.word	0x58024800
 8004ffc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005004:	3308      	adds	r3, #8
 8005006:	2101      	movs	r1, #1
 8005008:	4618      	mov	r0, r3
 800500a:	f000 ffa7 	bl	8005f5c <RCCEx_PLL2_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005014:	e00f      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501a:	3328      	adds	r3, #40	@ 0x28
 800501c:	2101      	movs	r1, #1
 800501e:	4618      	mov	r0, r3
 8005020:	f001 f84e 	bl	80060c0 <RCCEx_PLL3_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800502a:	e004      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005032:	e000      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800503e:	4bbf      	ldr	r3, [pc, #764]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005042:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800504c:	4abb      	ldr	r2, [pc, #748]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800504e:	430b      	orrs	r3, r1
 8005050:	6553      	str	r3, [r2, #84]	@ 0x54
 8005052:	e003      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005058:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800505c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f002 0302 	and.w	r3, r2, #2
 8005068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005072:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005076:	460b      	mov	r3, r1
 8005078:	4313      	orrs	r3, r2
 800507a:	d041      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005082:	2b05      	cmp	r3, #5
 8005084:	d824      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005086:	a201      	add	r2, pc, #4	@ (adr r2, 800508c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050d9 	.word	0x080050d9
 8005090:	080050a5 	.word	0x080050a5
 8005094:	080050bb 	.word	0x080050bb
 8005098:	080050d9 	.word	0x080050d9
 800509c:	080050d9 	.word	0x080050d9
 80050a0:	080050d9 	.word	0x080050d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a8:	3308      	adds	r3, #8
 80050aa:	2101      	movs	r1, #1
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 ff55 	bl	8005f5c <RCCEx_PLL2_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050b8:	e00f      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050be:	3328      	adds	r3, #40	@ 0x28
 80050c0:	2101      	movs	r1, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fffc 	bl	80060c0 <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050ce:	e004      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80050d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050e2:	4b96      	ldr	r3, [pc, #600]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e6:	f023 0107 	bic.w	r1, r3, #7
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f0:	4a92      	ldr	r2, [pc, #584]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050f2:	430b      	orrs	r3, r1
 80050f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80050f6:	e003      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f002 0304 	and.w	r3, r2, #4
 800510c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005110:	2300      	movs	r3, #0
 8005112:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005116:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800511a:	460b      	mov	r3, r1
 800511c:	4313      	orrs	r3, r2
 800511e:	d044      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005128:	2b05      	cmp	r3, #5
 800512a:	d825      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800512c:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005181 	.word	0x08005181
 8005138:	0800514d 	.word	0x0800514d
 800513c:	08005163 	.word	0x08005163
 8005140:	08005181 	.word	0x08005181
 8005144:	08005181 	.word	0x08005181
 8005148:	08005181 	.word	0x08005181
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800514c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005150:	3308      	adds	r3, #8
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f000 ff01 	bl	8005f5c <RCCEx_PLL2_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005160:	e00f      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005166:	3328      	adds	r3, #40	@ 0x28
 8005168:	2101      	movs	r1, #1
 800516a:	4618      	mov	r0, r3
 800516c:	f000 ffa8 	bl	80060c0 <RCCEx_PLL3_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005176:	e004      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800517e:	e000      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005182:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800518a:	4b6c      	ldr	r3, [pc, #432]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800518c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518e:	f023 0107 	bic.w	r1, r3, #7
 8005192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519a:	4a68      	ldr	r2, [pc, #416]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800519c:	430b      	orrs	r3, r1
 800519e:	6593      	str	r3, [r2, #88]	@ 0x58
 80051a0:	e003      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f002 0320 	and.w	r3, r2, #32
 80051b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051ba:	2300      	movs	r3, #0
 80051bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80051c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4313      	orrs	r3, r2
 80051c8:	d055      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051d6:	d033      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80051d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051dc:	d82c      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e2:	d02f      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e8:	d826      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80051ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051ee:	d02b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80051f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f4:	d820      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80051f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051fa:	d012      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80051fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005200:	d81a      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d022      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800520a:	d115      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005210:	3308      	adds	r3, #8
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fea1 	bl	8005f5c <RCCEx_PLL2_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005220:	e015      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005226:	3328      	adds	r3, #40	@ 0x28
 8005228:	2102      	movs	r1, #2
 800522a:	4618      	mov	r0, r3
 800522c:	f000 ff48 	bl	80060c0 <RCCEx_PLL3_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005236:	e00a      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800523e:	e006      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005240:	bf00      	nop
 8005242:	e004      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005244:	bf00      	nop
 8005246:	e002      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005248:	bf00      	nop
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800524c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005256:	4b39      	ldr	r3, [pc, #228]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005266:	4a35      	ldr	r2, [pc, #212]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005268:	430b      	orrs	r3, r1
 800526a:	6553      	str	r3, [r2, #84]	@ 0x54
 800526c:	e003      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005272:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005282:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005286:	2300      	movs	r3, #0
 8005288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800528c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005290:	460b      	mov	r3, r1
 8005292:	4313      	orrs	r3, r2
 8005294:	d058      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800529e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052a2:	d033      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80052a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052a8:	d82c      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ae:	d02f      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b4:	d826      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80052b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052ba:	d02b      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80052bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052c0:	d820      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80052c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c6:	d012      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80052c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052cc:	d81a      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d022      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80052d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d6:	d115      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052dc:	3308      	adds	r3, #8
 80052de:	2100      	movs	r1, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fe3b 	bl	8005f5c <RCCEx_PLL2_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052ec:	e015      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f2:	3328      	adds	r3, #40	@ 0x28
 80052f4:	2102      	movs	r1, #2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fee2 	bl	80060c0 <RCCEx_PLL3_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005302:	e00a      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800530a:	e006      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800530c:	bf00      	nop
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10e      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005326:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800532a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005332:	4a02      	ldr	r2, [pc, #8]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6593      	str	r3, [r2, #88]	@ 0x58
 8005338:	e006      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800533a:	bf00      	nop
 800533c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005354:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800535e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d055      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005370:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005374:	d033      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005376:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800537a:	d82c      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005380:	d02f      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005386:	d826      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005388:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800538c:	d02b      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800538e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005392:	d820      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005398:	d012      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800539a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800539e:	d81a      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d022      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053a8:	d115      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ae:	3308      	adds	r3, #8
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fdd2 	bl	8005f5c <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053be:	e015      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c4:	3328      	adds	r3, #40	@ 0x28
 80053c6:	2102      	movs	r1, #2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fe79 	bl	80060c0 <RCCEx_PLL3_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053d4:	e00a      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053dc:	e006      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80053de:	bf00      	nop
 80053e0:	e004      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80053e2:	bf00      	nop
 80053e4:	e002      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80053e6:	bf00      	nop
 80053e8:	e000      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80053ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053f4:	4ba0      	ldr	r3, [pc, #640]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80053fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005400:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005404:	4a9c      	ldr	r2, [pc, #624]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005406:	430b      	orrs	r3, r1
 8005408:	6593      	str	r3, [r2, #88]	@ 0x58
 800540a:	e003      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f002 0308 	and.w	r3, r2, #8
 8005420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005424:	2300      	movs	r3, #0
 8005426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800542a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800542e:	460b      	mov	r3, r1
 8005430:	4313      	orrs	r3, r2
 8005432:	d01e      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005440:	d10c      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005446:	3328      	adds	r3, #40	@ 0x28
 8005448:	2102      	movs	r1, #2
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fe38 	bl	80060c0 <RCCEx_PLL3_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800545c:	4b86      	ldr	r3, [pc, #536]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800545e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005460:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800546c:	4a82      	ldr	r2, [pc, #520]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800546e:	430b      	orrs	r3, r1
 8005470:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f002 0310 	and.w	r3, r2, #16
 800547e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005482:	2300      	movs	r3, #0
 8005484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005488:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800548c:	460b      	mov	r3, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	d01e      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800549a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800549e:	d10c      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a4:	3328      	adds	r3, #40	@ 0x28
 80054a6:	2102      	movs	r1, #2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fe09 	bl	80060c0 <RCCEx_PLL3_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ba:	4b6f      	ldr	r3, [pc, #444]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80054dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054de:	2300      	movs	r3, #0
 80054e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80054e6:	460b      	mov	r3, r1
 80054e8:	4313      	orrs	r3, r2
 80054ea:	d03e      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054f8:	d022      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80054fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054fe:	d81b      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005508:	d00b      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800550a:	e015      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005510:	3308      	adds	r3, #8
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fd21 	bl	8005f5c <RCCEx_PLL2_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005520:	e00f      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005526:	3328      	adds	r3, #40	@ 0x28
 8005528:	2102      	movs	r1, #2
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fdc8 	bl	80060c0 <RCCEx_PLL3_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005536:	e004      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800553e:	e000      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005542:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800554a:	4b4b      	ldr	r3, [pc, #300]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005556:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800555a:	4a47      	ldr	r2, [pc, #284]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800555c:	430b      	orrs	r3, r1
 800555e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005566:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800556a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005576:	673b      	str	r3, [r7, #112]	@ 0x70
 8005578:	2300      	movs	r3, #0
 800557a:	677b      	str	r3, [r7, #116]	@ 0x74
 800557c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005580:	460b      	mov	r3, r1
 8005582:	4313      	orrs	r3, r2
 8005584:	d03b      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800558e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005592:	d01f      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005594:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005598:	d818      	bhi.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800559e:	d003      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80055a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055a4:	d007      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80055a6:	e011      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a8:	4b33      	ldr	r3, [pc, #204]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	4a32      	ldr	r2, [pc, #200]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055b4:	e00f      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ba:	3328      	adds	r3, #40	@ 0x28
 80055bc:	2101      	movs	r1, #1
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fd7e 	bl	80060c0 <RCCEx_PLL3_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80055ca:	e004      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80055d2:	e000      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80055d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055de:	4b26      	ldr	r3, [pc, #152]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ee:	4a22      	ldr	r2, [pc, #136]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80055f4:	e003      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800560a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800560c:	2300      	movs	r3, #0
 800560e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005610:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005614:	460b      	mov	r3, r1
 8005616:	4313      	orrs	r3, r2
 8005618:	d034      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005628:	d007      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800562a:	e011      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562c:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	4a11      	ldr	r2, [pc, #68]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005638:	e00e      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800563a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563e:	3308      	adds	r3, #8
 8005640:	2102      	movs	r1, #2
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fc8a 	bl	8005f5c <RCCEx_PLL2_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800564e:	e003      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005664:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566e:	4a02      	ldr	r2, [pc, #8]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005670:	430b      	orrs	r3, r1
 8005672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005674:	e006      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005676:	bf00      	nop
 8005678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005690:	663b      	str	r3, [r7, #96]	@ 0x60
 8005692:	2300      	movs	r3, #0
 8005694:	667b      	str	r3, [r7, #100]	@ 0x64
 8005696:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800569a:	460b      	mov	r3, r1
 800569c:	4313      	orrs	r3, r2
 800569e:	d00c      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a4:	3328      	adds	r3, #40	@ 0x28
 80056a6:	2102      	movs	r1, #2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fd09 	bl	80060c0 <RCCEx_PLL3_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80056c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056c8:	2300      	movs	r3, #0
 80056ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056cc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d036      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e0:	d018      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80056e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e6:	d811      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80056e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ec:	d014      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80056ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f2:	d80b      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d011      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80056f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056fc:	d106      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056fe:	4bb7      	ldr	r3, [pc, #732]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005702:	4ab6      	ldr	r2, [pc, #728]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800570a:	e008      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005712:	e004      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005714:	bf00      	nop
 8005716:	e002      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005718:	bf00      	nop
 800571a:	e000      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800571c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005726:	4bad      	ldr	r3, [pc, #692]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800572e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005734:	4aa9      	ldr	r2, [pc, #676]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005736:	430b      	orrs	r3, r1
 8005738:	6553      	str	r3, [r2, #84]	@ 0x54
 800573a:	e003      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005750:	653b      	str	r3, [r7, #80]	@ 0x50
 8005752:	2300      	movs	r3, #0
 8005754:	657b      	str	r3, [r7, #84]	@ 0x54
 8005756:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800575a:	460b      	mov	r3, r1
 800575c:	4313      	orrs	r3, r2
 800575e:	d009      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005760:	4b9e      	ldr	r3, [pc, #632]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005764:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576e:	4a9b      	ldr	r2, [pc, #620]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005770:	430b      	orrs	r3, r1
 8005772:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005782:	2300      	movs	r3, #0
 8005784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005786:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800578a:	460b      	mov	r3, r1
 800578c:	4313      	orrs	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005790:	4b92      	ldr	r3, [pc, #584]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005794:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800579e:	4a8f      	ldr	r2, [pc, #572]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80057b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80057b2:	2300      	movs	r3, #0
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80057ba:	460b      	mov	r3, r1
 80057bc:	4313      	orrs	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057c0:	4b86      	ldr	r3, [pc, #536]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	4a85      	ldr	r2, [pc, #532]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057ca:	6113      	str	r3, [r2, #16]
 80057cc:	4b83      	ldr	r3, [pc, #524]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057ce:	6919      	ldr	r1, [r3, #16]
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057d8:	4a80      	ldr	r2, [pc, #512]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057da:	430b      	orrs	r3, r1
 80057dc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80057ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ec:	2300      	movs	r3, #0
 80057ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80057f4:	460b      	mov	r3, r1
 80057f6:	4313      	orrs	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057fa:	4b78      	ldr	r3, [pc, #480]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005808:	4a74      	ldr	r2, [pc, #464]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800580a:	430b      	orrs	r3, r1
 800580c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800580e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30
 800581c:	2300      	movs	r3, #0
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005820:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005824:	460b      	mov	r3, r1
 8005826:	4313      	orrs	r3, r2
 8005828:	d00a      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800582a:	4b6c      	ldr	r3, [pc, #432]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800582c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583a:	4a68      	ldr	r2, [pc, #416]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800583c:	430b      	orrs	r3, r1
 800583e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	2100      	movs	r1, #0
 800584a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005852:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005856:	460b      	mov	r3, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	d011      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800585c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005860:	3308      	adds	r3, #8
 8005862:	2100      	movs	r1, #0
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fb79 	bl	8005f5c <RCCEx_PLL2_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800587c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	2100      	movs	r1, #0
 800588a:	6239      	str	r1, [r7, #32]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
 8005892:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005896:	460b      	mov	r3, r1
 8005898:	4313      	orrs	r3, r2
 800589a:	d011      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800589c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a0:	3308      	adds	r3, #8
 80058a2:	2101      	movs	r1, #1
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fb59 	bl	8005f5c <RCCEx_PLL2_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80058b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	2100      	movs	r1, #0
 80058ca:	61b9      	str	r1, [r7, #24]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80058d6:	460b      	mov	r3, r1
 80058d8:	4313      	orrs	r3, r2
 80058da:	d011      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e0:	3308      	adds	r3, #8
 80058e2:	2102      	movs	r1, #2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fb39 	bl	8005f5c <RCCEx_PLL2_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80058f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	2100      	movs	r1, #0
 800590a:	6139      	str	r1, [r7, #16]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005916:	460b      	mov	r3, r1
 8005918:	4313      	orrs	r3, r2
 800591a:	d011      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005920:	3328      	adds	r3, #40	@ 0x28
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fbcb 	bl	80060c0 <RCCEx_PLL3_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800593c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	2100      	movs	r1, #0
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	d011      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005960:	3328      	adds	r3, #40	@ 0x28
 8005962:	2101      	movs	r1, #1
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fbab 	bl	80060c0 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800597c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	2100      	movs	r1, #0
 800598a:	6039      	str	r1, [r7, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005996:	460b      	mov	r3, r1
 8005998:	4313      	orrs	r3, r2
 800599a:	d011      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a0:	3328      	adds	r3, #40	@ 0x28
 80059a2:	2102      	movs	r1, #2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fb8b 	bl	80060c0 <RCCEx_PLL3_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80059b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80059c0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e000      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059da:	bf00      	nop
 80059dc:	58024400 	.word	0x58024400

080059e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80059e4:	f7fe fe00 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4904      	ldr	r1, [pc, #16]	@ (8005a08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	58024400 	.word	0x58024400
 8005a08:	0800bcb4 	.word	0x0800bcb4

08005a0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b089      	sub	sp, #36	@ 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a14:	4ba1      	ldr	r3, [pc, #644]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a1e:	4b9f      	ldr	r3, [pc, #636]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a22:	0b1b      	lsrs	r3, r3, #12
 8005a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a2a:	4b9c      	ldr	r3, [pc, #624]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a36:	4b99      	ldr	r3, [pc, #612]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3a:	08db      	lsrs	r3, r3, #3
 8005a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8111 	beq.w	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	f000 8083 	beq.w	8005b68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	f200 80a1 	bhi.w	8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d056      	beq.n	8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005a76:	e099      	b.n	8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a78:	4b88      	ldr	r3, [pc, #544]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d02d      	beq.n	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a84:	4b85      	ldr	r3, [pc, #532]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	08db      	lsrs	r3, r3, #3
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	4a84      	ldr	r2, [pc, #528]	@ (8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
 8005a94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	ee07 3a90 	vmov	s15, r3
 8005a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aae:	4b7b      	ldr	r3, [pc, #492]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ade:	e087      	b.n	8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b22:	e065      	b.n	8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b36:	4b59      	ldr	r3, [pc, #356]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b66:	e043      	b.n	8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7a:	4b48      	ldr	r3, [pc, #288]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005baa:	e021      	b.n	8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bbe:	4b37      	ldr	r3, [pc, #220]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	0a5b      	lsrs	r3, r3, #9
 8005bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c16:	ee17 2a90 	vmov	r2, s15
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c22:	0c1b      	lsrs	r3, r3, #16
 8005c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c44:	ee17 2a90 	vmov	r2, s15
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c4c:	4b13      	ldr	r3, [pc, #76]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c50:	0e1b      	lsrs	r3, r3, #24
 8005c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c72:	ee17 2a90 	vmov	r2, s15
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c7a:	e008      	b.n	8005c8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	609a      	str	r2, [r3, #8]
}
 8005c8e:	bf00      	nop
 8005c90:	3724      	adds	r7, #36	@ 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	58024400 	.word	0x58024400
 8005ca0:	03d09000 	.word	0x03d09000
 8005ca4:	46000000 	.word	0x46000000
 8005ca8:	4c742400 	.word	0x4c742400
 8005cac:	4a742400 	.word	0x4a742400
 8005cb0:	4bbebc20 	.word	0x4bbebc20

08005cb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b089      	sub	sp, #36	@ 0x24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005cc6:	4b9f      	ldr	r3, [pc, #636]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	0d1b      	lsrs	r3, r3, #20
 8005ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005cd2:	4b9c      	ldr	r3, [pc, #624]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005cde:	4b99      	ldr	r3, [pc, #612]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce2:	08db      	lsrs	r3, r3, #3
 8005ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8111 	beq.w	8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	f000 8083 	beq.w	8005e10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	f200 80a1 	bhi.w	8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d056      	beq.n	8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d1e:	e099      	b.n	8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d20:	4b88      	ldr	r3, [pc, #544]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d02d      	beq.n	8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d2c:	4b85      	ldr	r3, [pc, #532]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	08db      	lsrs	r3, r3, #3
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	4a84      	ldr	r2, [pc, #528]	@ (8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	4b7b      	ldr	r3, [pc, #492]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d86:	e087      	b.n	8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dca:	e065      	b.n	8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dde:	4b59      	ldr	r3, [pc, #356]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e0e:	e043      	b.n	8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b48      	ldr	r3, [pc, #288]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e52:	e021      	b.n	8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b37      	ldr	r3, [pc, #220]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e98:	4b2a      	ldr	r3, [pc, #168]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9c:	0a5b      	lsrs	r3, r3, #9
 8005e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ebe:	ee17 2a90 	vmov	r2, s15
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	0c1b      	lsrs	r3, r3, #16
 8005ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eec:	ee17 2a90 	vmov	r2, s15
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005ef4:	4b13      	ldr	r3, [pc, #76]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef8:	0e1b      	lsrs	r3, r3, #24
 8005efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f1a:	ee17 2a90 	vmov	r2, s15
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f22:	e008      	b.n	8005f36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	609a      	str	r2, [r3, #8]
}
 8005f36:	bf00      	nop
 8005f38:	3724      	adds	r7, #36	@ 0x24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	58024400 	.word	0x58024400
 8005f48:	03d09000 	.word	0x03d09000
 8005f4c:	46000000 	.word	0x46000000
 8005f50:	4c742400 	.word	0x4c742400
 8005f54:	4a742400 	.word	0x4a742400
 8005f58:	4bbebc20 	.word	0x4bbebc20

08005f5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f6a:	4b53      	ldr	r3, [pc, #332]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d101      	bne.n	8005f7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e099      	b.n	80060ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a4e      	ldr	r2, [pc, #312]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8005f80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f86:	f7fb fdf3 	bl	8001b70 <HAL_GetTick>
 8005f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f8c:	e008      	b.n	8005fa0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f8e:	f7fb fdef 	bl	8001b70 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d901      	bls.n	8005fa0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e086      	b.n	80060ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fa0:	4b45      	ldr	r3, [pc, #276]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f0      	bne.n	8005f8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005fac:	4b42      	ldr	r3, [pc, #264]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	031b      	lsls	r3, r3, #12
 8005fba:	493f      	ldr	r1, [pc, #252]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	025b      	lsls	r3, r3, #9
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	041b      	lsls	r3, r3, #16
 8005fde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	061b      	lsls	r3, r3, #24
 8005fec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005ff0:	4931      	ldr	r1, [pc, #196]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ff6:	4b30      	ldr	r3, [pc, #192]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	492d      	ldr	r1, [pc, #180]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006004:	4313      	orrs	r3, r2
 8006006:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006008:	4b2b      	ldr	r3, [pc, #172]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	f023 0220 	bic.w	r2, r3, #32
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	4928      	ldr	r1, [pc, #160]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006016:	4313      	orrs	r3, r2
 8006018:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800601a:	4b27      	ldr	r3, [pc, #156]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	4a26      	ldr	r2, [pc, #152]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006020:	f023 0310 	bic.w	r3, r3, #16
 8006024:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006026:	4b24      	ldr	r3, [pc, #144]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800602a:	4b24      	ldr	r3, [pc, #144]	@ (80060bc <RCCEx_PLL2_Config+0x160>)
 800602c:	4013      	ands	r3, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	69d2      	ldr	r2, [r2, #28]
 8006032:	00d2      	lsls	r2, r2, #3
 8006034:	4920      	ldr	r1, [pc, #128]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006036:	4313      	orrs	r3, r2
 8006038:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800603a:	4b1f      	ldr	r3, [pc, #124]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 800603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603e:	4a1e      	ldr	r2, [pc, #120]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006040:	f043 0310 	orr.w	r3, r3, #16
 8006044:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800604c:	4b1a      	ldr	r3, [pc, #104]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	4a19      	ldr	r2, [pc, #100]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006052:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006056:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006058:	e00f      	b.n	800607a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d106      	bne.n	800606e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006060:	4b15      	ldr	r3, [pc, #84]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006064:	4a14      	ldr	r2, [pc, #80]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800606a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800606c:	e005      	b.n	800607a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800606e:	4b12      	ldr	r3, [pc, #72]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006072:	4a11      	ldr	r2, [pc, #68]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006074:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006078:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800607a:	4b0f      	ldr	r3, [pc, #60]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a0e      	ldr	r2, [pc, #56]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 8006080:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006086:	f7fb fd73 	bl	8001b70 <HAL_GetTick>
 800608a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800608c:	e008      	b.n	80060a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800608e:	f7fb fd6f 	bl	8001b70 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e006      	b.n	80060ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060a0:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <RCCEx_PLL2_Config+0x15c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	58024400 	.word	0x58024400
 80060bc:	ffff0007 	.word	0xffff0007

080060c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060ce:	4b53      	ldr	r3, [pc, #332]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d101      	bne.n	80060de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e099      	b.n	8006212 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060de:	4b4f      	ldr	r3, [pc, #316]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a4e      	ldr	r2, [pc, #312]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80060e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ea:	f7fb fd41 	bl	8001b70 <HAL_GetTick>
 80060ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060f0:	e008      	b.n	8006104 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060f2:	f7fb fd3d 	bl	8001b70 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e086      	b.n	8006212 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006104:	4b45      	ldr	r3, [pc, #276]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f0      	bne.n	80060f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006110:	4b42      	ldr	r3, [pc, #264]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 8006112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006114:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	051b      	lsls	r3, r3, #20
 800611e:	493f      	ldr	r1, [pc, #252]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 8006120:	4313      	orrs	r3, r2
 8006122:	628b      	str	r3, [r1, #40]	@ 0x28
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	3b01      	subs	r3, #1
 800612a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	3b01      	subs	r3, #1
 8006134:	025b      	lsls	r3, r3, #9
 8006136:	b29b      	uxth	r3, r3
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	3b01      	subs	r3, #1
 8006140:	041b      	lsls	r3, r3, #16
 8006142:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	3b01      	subs	r3, #1
 800614e:	061b      	lsls	r3, r3, #24
 8006150:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006154:	4931      	ldr	r1, [pc, #196]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 8006156:	4313      	orrs	r3, r2
 8006158:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800615a:	4b30      	ldr	r3, [pc, #192]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 800615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	492d      	ldr	r1, [pc, #180]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 8006168:	4313      	orrs	r3, r2
 800616a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800616c:	4b2b      	ldr	r3, [pc, #172]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	4928      	ldr	r1, [pc, #160]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 800617a:	4313      	orrs	r3, r2
 800617c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800617e:	4b27      	ldr	r3, [pc, #156]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 8006180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006182:	4a26      	ldr	r2, [pc, #152]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 8006184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006188:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800618a:	4b24      	ldr	r3, [pc, #144]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 800618c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800618e:	4b24      	ldr	r3, [pc, #144]	@ (8006220 <RCCEx_PLL3_Config+0x160>)
 8006190:	4013      	ands	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	69d2      	ldr	r2, [r2, #28]
 8006196:	00d2      	lsls	r2, r2, #3
 8006198:	4920      	ldr	r1, [pc, #128]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 800619a:	4313      	orrs	r3, r2
 800619c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800619e:	4b1f      	ldr	r3, [pc, #124]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a2:	4a1e      	ldr	r2, [pc, #120]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80061b0:	4b1a      	ldr	r3, [pc, #104]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b4:	4a19      	ldr	r2, [pc, #100]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80061ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061bc:	e00f      	b.n	80061de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d106      	bne.n	80061d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80061c4:	4b15      	ldr	r3, [pc, #84]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c8:	4a14      	ldr	r2, [pc, #80]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061d0:	e005      	b.n	80061de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80061d2:	4b12      	ldr	r3, [pc, #72]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	4a11      	ldr	r2, [pc, #68]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061de:	4b0f      	ldr	r3, [pc, #60]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a0e      	ldr	r2, [pc, #56]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 80061e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ea:	f7fb fcc1 	bl	8001b70 <HAL_GetTick>
 80061ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061f0:	e008      	b.n	8006204 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061f2:	f7fb fcbd 	bl	8001b70 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e006      	b.n	8006212 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006204:	4b05      	ldr	r3, [pc, #20]	@ (800621c <RCCEx_PLL3_Config+0x15c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f0      	beq.n	80061f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	58024400 	.word	0x58024400
 8006220:	ffff0007 	.word	0xffff0007

08006224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e042      	b.n	80062bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fb fa5f 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2224      	movs	r2, #36	@ 0x24
 8006252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 ff22 	bl	80070b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f8b3 	bl	80063e0 <UART_SetConfig>
 800627a:	4603      	mov	r3, r0
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e01b      	b.n	80062bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 ffa1 	bl	80071fc <UART_CheckIdleState>
 80062ba:	4603      	mov	r3, r0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	@ 0x28
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d17b      	bne.n	80063d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_UART_Transmit+0x26>
 80062e4:	88fb      	ldrh	r3, [r7, #6]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e074      	b.n	80063d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2221      	movs	r2, #33	@ 0x21
 80062fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062fe:	f7fb fc37 	bl	8001b70 <HAL_GetTick>
 8006302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800631c:	d108      	bne.n	8006330 <HAL_UART_Transmit+0x6c>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e003      	b.n	8006338 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006338:	e030      	b.n	800639c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	2180      	movs	r1, #128	@ 0x80
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f001 f803 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e03d      	b.n	80063d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006370:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	3302      	adds	r3, #2
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e007      	b.n	800638a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3301      	adds	r3, #1
 8006388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1c8      	bne.n	800633a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2200      	movs	r2, #0
 80063b0:	2140      	movs	r1, #64	@ 0x40
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 ffcc 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e006      	b.n	80063d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e000      	b.n	80063d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
  }
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e4:	b092      	sub	sp, #72	@ 0x48
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	431a      	orrs	r2, r3
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	4313      	orrs	r3, r2
 8006406:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4bbe      	ldr	r3, [pc, #760]	@ (8006708 <UART_SetConfig+0x328>)
 8006410:	4013      	ands	r3, r2
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	6812      	ldr	r2, [r2, #0]
 8006416:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006418:	430b      	orrs	r3, r1
 800641a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4ab3      	ldr	r2, [pc, #716]	@ (800670c <UART_SetConfig+0x32c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d004      	beq.n	800644c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006448:	4313      	orrs	r3, r2
 800644a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	4baf      	ldr	r3, [pc, #700]	@ (8006710 <UART_SetConfig+0x330>)
 8006454:	4013      	ands	r3, r2
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800645c:	430b      	orrs	r3, r1
 800645e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006466:	f023 010f 	bic.w	r1, r3, #15
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4aa6      	ldr	r2, [pc, #664]	@ (8006714 <UART_SetConfig+0x334>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d177      	bne.n	8006570 <UART_SetConfig+0x190>
 8006480:	4ba5      	ldr	r3, [pc, #660]	@ (8006718 <UART_SetConfig+0x338>)
 8006482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006488:	2b28      	cmp	r3, #40	@ 0x28
 800648a:	d86d      	bhi.n	8006568 <UART_SetConfig+0x188>
 800648c:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <UART_SetConfig+0xb4>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	08006539 	.word	0x08006539
 8006498:	08006569 	.word	0x08006569
 800649c:	08006569 	.word	0x08006569
 80064a0:	08006569 	.word	0x08006569
 80064a4:	08006569 	.word	0x08006569
 80064a8:	08006569 	.word	0x08006569
 80064ac:	08006569 	.word	0x08006569
 80064b0:	08006569 	.word	0x08006569
 80064b4:	08006541 	.word	0x08006541
 80064b8:	08006569 	.word	0x08006569
 80064bc:	08006569 	.word	0x08006569
 80064c0:	08006569 	.word	0x08006569
 80064c4:	08006569 	.word	0x08006569
 80064c8:	08006569 	.word	0x08006569
 80064cc:	08006569 	.word	0x08006569
 80064d0:	08006569 	.word	0x08006569
 80064d4:	08006549 	.word	0x08006549
 80064d8:	08006569 	.word	0x08006569
 80064dc:	08006569 	.word	0x08006569
 80064e0:	08006569 	.word	0x08006569
 80064e4:	08006569 	.word	0x08006569
 80064e8:	08006569 	.word	0x08006569
 80064ec:	08006569 	.word	0x08006569
 80064f0:	08006569 	.word	0x08006569
 80064f4:	08006551 	.word	0x08006551
 80064f8:	08006569 	.word	0x08006569
 80064fc:	08006569 	.word	0x08006569
 8006500:	08006569 	.word	0x08006569
 8006504:	08006569 	.word	0x08006569
 8006508:	08006569 	.word	0x08006569
 800650c:	08006569 	.word	0x08006569
 8006510:	08006569 	.word	0x08006569
 8006514:	08006559 	.word	0x08006559
 8006518:	08006569 	.word	0x08006569
 800651c:	08006569 	.word	0x08006569
 8006520:	08006569 	.word	0x08006569
 8006524:	08006569 	.word	0x08006569
 8006528:	08006569 	.word	0x08006569
 800652c:	08006569 	.word	0x08006569
 8006530:	08006569 	.word	0x08006569
 8006534:	08006561 	.word	0x08006561
 8006538:	2301      	movs	r3, #1
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653e:	e326      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006540:	2304      	movs	r3, #4
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e322      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006548:	2308      	movs	r3, #8
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e31e      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006550:	2310      	movs	r3, #16
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e31a      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006558:	2320      	movs	r3, #32
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e316      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006560:	2340      	movs	r3, #64	@ 0x40
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e312      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006568:	2380      	movs	r3, #128	@ 0x80
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656e:	e30e      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a69      	ldr	r2, [pc, #420]	@ (800671c <UART_SetConfig+0x33c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d130      	bne.n	80065dc <UART_SetConfig+0x1fc>
 800657a:	4b67      	ldr	r3, [pc, #412]	@ (8006718 <UART_SetConfig+0x338>)
 800657c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	2b05      	cmp	r3, #5
 8006584:	d826      	bhi.n	80065d4 <UART_SetConfig+0x1f4>
 8006586:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <UART_SetConfig+0x1ac>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065a5 	.word	0x080065a5
 8006590:	080065ad 	.word	0x080065ad
 8006594:	080065b5 	.word	0x080065b5
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065cd 	.word	0x080065cd
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e2f0      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80065ac:	2304      	movs	r3, #4
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e2ec      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80065b4:	2308      	movs	r3, #8
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e2e8      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c2:	e2e4      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80065c4:	2320      	movs	r3, #32
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ca:	e2e0      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80065cc:	2340      	movs	r3, #64	@ 0x40
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d2:	e2dc      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80065d4:	2380      	movs	r3, #128	@ 0x80
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065da:	e2d8      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a4f      	ldr	r2, [pc, #316]	@ (8006720 <UART_SetConfig+0x340>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d130      	bne.n	8006648 <UART_SetConfig+0x268>
 80065e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006718 <UART_SetConfig+0x338>)
 80065e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	2b05      	cmp	r3, #5
 80065f0:	d826      	bhi.n	8006640 <UART_SetConfig+0x260>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0x218>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	08006611 	.word	0x08006611
 80065fc:	08006619 	.word	0x08006619
 8006600:	08006621 	.word	0x08006621
 8006604:	08006629 	.word	0x08006629
 8006608:	08006631 	.word	0x08006631
 800660c:	08006639 	.word	0x08006639
 8006610:	2300      	movs	r3, #0
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006616:	e2ba      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006618:	2304      	movs	r3, #4
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661e:	e2b6      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006620:	2308      	movs	r3, #8
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006626:	e2b2      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006628:	2310      	movs	r3, #16
 800662a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800662e:	e2ae      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006630:	2320      	movs	r3, #32
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006636:	e2aa      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006638:	2340      	movs	r3, #64	@ 0x40
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663e:	e2a6      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006640:	2380      	movs	r3, #128	@ 0x80
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e2a2      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a35      	ldr	r2, [pc, #212]	@ (8006724 <UART_SetConfig+0x344>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d130      	bne.n	80066b4 <UART_SetConfig+0x2d4>
 8006652:	4b31      	ldr	r3, [pc, #196]	@ (8006718 <UART_SetConfig+0x338>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b05      	cmp	r3, #5
 800665c:	d826      	bhi.n	80066ac <UART_SetConfig+0x2cc>
 800665e:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <UART_SetConfig+0x284>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	0800667d 	.word	0x0800667d
 8006668:	08006685 	.word	0x08006685
 800666c:	0800668d 	.word	0x0800668d
 8006670:	08006695 	.word	0x08006695
 8006674:	0800669d 	.word	0x0800669d
 8006678:	080066a5 	.word	0x080066a5
 800667c:	2300      	movs	r3, #0
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e284      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006684:	2304      	movs	r3, #4
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668a:	e280      	b.n	8006b8e <UART_SetConfig+0x7ae>
 800668c:	2308      	movs	r3, #8
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006692:	e27c      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006694:	2310      	movs	r3, #16
 8006696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669a:	e278      	b.n	8006b8e <UART_SetConfig+0x7ae>
 800669c:	2320      	movs	r3, #32
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a2:	e274      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80066a4:	2340      	movs	r3, #64	@ 0x40
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066aa:	e270      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80066ac:	2380      	movs	r3, #128	@ 0x80
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b2:	e26c      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006728 <UART_SetConfig+0x348>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d142      	bne.n	8006744 <UART_SetConfig+0x364>
 80066be:	4b16      	ldr	r3, [pc, #88]	@ (8006718 <UART_SetConfig+0x338>)
 80066c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d838      	bhi.n	800673c <UART_SetConfig+0x35c>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <UART_SetConfig+0x2f0>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066e9 	.word	0x080066e9
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	080066f9 	.word	0x080066f9
 80066dc:	08006701 	.word	0x08006701
 80066e0:	0800672d 	.word	0x0800672d
 80066e4:	08006735 	.word	0x08006735
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e24e      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e24a      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fe:	e246      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006706:	e242      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006708:	cfff69f3 	.word	0xcfff69f3
 800670c:	58000c00 	.word	0x58000c00
 8006710:	11fff4ff 	.word	0x11fff4ff
 8006714:	40011000 	.word	0x40011000
 8006718:	58024400 	.word	0x58024400
 800671c:	40004400 	.word	0x40004400
 8006720:	40004800 	.word	0x40004800
 8006724:	40004c00 	.word	0x40004c00
 8006728:	40005000 	.word	0x40005000
 800672c:	2320      	movs	r3, #32
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006732:	e22c      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006734:	2340      	movs	r3, #64	@ 0x40
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673a:	e228      	b.n	8006b8e <UART_SetConfig+0x7ae>
 800673c:	2380      	movs	r3, #128	@ 0x80
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006742:	e224      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4ab1      	ldr	r2, [pc, #708]	@ (8006a10 <UART_SetConfig+0x630>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d176      	bne.n	800683c <UART_SetConfig+0x45c>
 800674e:	4bb1      	ldr	r3, [pc, #708]	@ (8006a14 <UART_SetConfig+0x634>)
 8006750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006756:	2b28      	cmp	r3, #40	@ 0x28
 8006758:	d86c      	bhi.n	8006834 <UART_SetConfig+0x454>
 800675a:	a201      	add	r2, pc, #4	@ (adr r2, 8006760 <UART_SetConfig+0x380>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	08006805 	.word	0x08006805
 8006764:	08006835 	.word	0x08006835
 8006768:	08006835 	.word	0x08006835
 800676c:	08006835 	.word	0x08006835
 8006770:	08006835 	.word	0x08006835
 8006774:	08006835 	.word	0x08006835
 8006778:	08006835 	.word	0x08006835
 800677c:	08006835 	.word	0x08006835
 8006780:	0800680d 	.word	0x0800680d
 8006784:	08006835 	.word	0x08006835
 8006788:	08006835 	.word	0x08006835
 800678c:	08006835 	.word	0x08006835
 8006790:	08006835 	.word	0x08006835
 8006794:	08006835 	.word	0x08006835
 8006798:	08006835 	.word	0x08006835
 800679c:	08006835 	.word	0x08006835
 80067a0:	08006815 	.word	0x08006815
 80067a4:	08006835 	.word	0x08006835
 80067a8:	08006835 	.word	0x08006835
 80067ac:	08006835 	.word	0x08006835
 80067b0:	08006835 	.word	0x08006835
 80067b4:	08006835 	.word	0x08006835
 80067b8:	08006835 	.word	0x08006835
 80067bc:	08006835 	.word	0x08006835
 80067c0:	0800681d 	.word	0x0800681d
 80067c4:	08006835 	.word	0x08006835
 80067c8:	08006835 	.word	0x08006835
 80067cc:	08006835 	.word	0x08006835
 80067d0:	08006835 	.word	0x08006835
 80067d4:	08006835 	.word	0x08006835
 80067d8:	08006835 	.word	0x08006835
 80067dc:	08006835 	.word	0x08006835
 80067e0:	08006825 	.word	0x08006825
 80067e4:	08006835 	.word	0x08006835
 80067e8:	08006835 	.word	0x08006835
 80067ec:	08006835 	.word	0x08006835
 80067f0:	08006835 	.word	0x08006835
 80067f4:	08006835 	.word	0x08006835
 80067f8:	08006835 	.word	0x08006835
 80067fc:	08006835 	.word	0x08006835
 8006800:	0800682d 	.word	0x0800682d
 8006804:	2301      	movs	r3, #1
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e1c0      	b.n	8006b8e <UART_SetConfig+0x7ae>
 800680c:	2304      	movs	r3, #4
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e1bc      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006814:	2308      	movs	r3, #8
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e1b8      	b.n	8006b8e <UART_SetConfig+0x7ae>
 800681c:	2310      	movs	r3, #16
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006822:	e1b4      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006824:	2320      	movs	r3, #32
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682a:	e1b0      	b.n	8006b8e <UART_SetConfig+0x7ae>
 800682c:	2340      	movs	r3, #64	@ 0x40
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006832:	e1ac      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006834:	2380      	movs	r3, #128	@ 0x80
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683a:	e1a8      	b.n	8006b8e <UART_SetConfig+0x7ae>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a75      	ldr	r2, [pc, #468]	@ (8006a18 <UART_SetConfig+0x638>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d130      	bne.n	80068a8 <UART_SetConfig+0x4c8>
 8006846:	4b73      	ldr	r3, [pc, #460]	@ (8006a14 <UART_SetConfig+0x634>)
 8006848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	2b05      	cmp	r3, #5
 8006850:	d826      	bhi.n	80068a0 <UART_SetConfig+0x4c0>
 8006852:	a201      	add	r2, pc, #4	@ (adr r2, 8006858 <UART_SetConfig+0x478>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	08006871 	.word	0x08006871
 800685c:	08006879 	.word	0x08006879
 8006860:	08006881 	.word	0x08006881
 8006864:	08006889 	.word	0x08006889
 8006868:	08006891 	.word	0x08006891
 800686c:	08006899 	.word	0x08006899
 8006870:	2300      	movs	r3, #0
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006876:	e18a      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006878:	2304      	movs	r3, #4
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687e:	e186      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006880:	2308      	movs	r3, #8
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006886:	e182      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006888:	2310      	movs	r3, #16
 800688a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688e:	e17e      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006890:	2320      	movs	r3, #32
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006896:	e17a      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006898:	2340      	movs	r3, #64	@ 0x40
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689e:	e176      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80068a0:	2380      	movs	r3, #128	@ 0x80
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a6:	e172      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a5b      	ldr	r2, [pc, #364]	@ (8006a1c <UART_SetConfig+0x63c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d130      	bne.n	8006914 <UART_SetConfig+0x534>
 80068b2:	4b58      	ldr	r3, [pc, #352]	@ (8006a14 <UART_SetConfig+0x634>)
 80068b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	d826      	bhi.n	800690c <UART_SetConfig+0x52c>
 80068be:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <UART_SetConfig+0x4e4>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	080068dd 	.word	0x080068dd
 80068c8:	080068e5 	.word	0x080068e5
 80068cc:	080068ed 	.word	0x080068ed
 80068d0:	080068f5 	.word	0x080068f5
 80068d4:	080068fd 	.word	0x080068fd
 80068d8:	08006905 	.word	0x08006905
 80068dc:	2300      	movs	r3, #0
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e2:	e154      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80068e4:	2304      	movs	r3, #4
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ea:	e150      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80068ec:	2308      	movs	r3, #8
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f2:	e14c      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80068f4:	2310      	movs	r3, #16
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fa:	e148      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80068fc:	2320      	movs	r3, #32
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006902:	e144      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006904:	2340      	movs	r3, #64	@ 0x40
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690a:	e140      	b.n	8006b8e <UART_SetConfig+0x7ae>
 800690c:	2380      	movs	r3, #128	@ 0x80
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e13c      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a41      	ldr	r2, [pc, #260]	@ (8006a20 <UART_SetConfig+0x640>)
 800691a:	4293      	cmp	r3, r2
 800691c:	f040 8082 	bne.w	8006a24 <UART_SetConfig+0x644>
 8006920:	4b3c      	ldr	r3, [pc, #240]	@ (8006a14 <UART_SetConfig+0x634>)
 8006922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006924:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006928:	2b28      	cmp	r3, #40	@ 0x28
 800692a:	d86d      	bhi.n	8006a08 <UART_SetConfig+0x628>
 800692c:	a201      	add	r2, pc, #4	@ (adr r2, 8006934 <UART_SetConfig+0x554>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	080069d9 	.word	0x080069d9
 8006938:	08006a09 	.word	0x08006a09
 800693c:	08006a09 	.word	0x08006a09
 8006940:	08006a09 	.word	0x08006a09
 8006944:	08006a09 	.word	0x08006a09
 8006948:	08006a09 	.word	0x08006a09
 800694c:	08006a09 	.word	0x08006a09
 8006950:	08006a09 	.word	0x08006a09
 8006954:	080069e1 	.word	0x080069e1
 8006958:	08006a09 	.word	0x08006a09
 800695c:	08006a09 	.word	0x08006a09
 8006960:	08006a09 	.word	0x08006a09
 8006964:	08006a09 	.word	0x08006a09
 8006968:	08006a09 	.word	0x08006a09
 800696c:	08006a09 	.word	0x08006a09
 8006970:	08006a09 	.word	0x08006a09
 8006974:	080069e9 	.word	0x080069e9
 8006978:	08006a09 	.word	0x08006a09
 800697c:	08006a09 	.word	0x08006a09
 8006980:	08006a09 	.word	0x08006a09
 8006984:	08006a09 	.word	0x08006a09
 8006988:	08006a09 	.word	0x08006a09
 800698c:	08006a09 	.word	0x08006a09
 8006990:	08006a09 	.word	0x08006a09
 8006994:	080069f1 	.word	0x080069f1
 8006998:	08006a09 	.word	0x08006a09
 800699c:	08006a09 	.word	0x08006a09
 80069a0:	08006a09 	.word	0x08006a09
 80069a4:	08006a09 	.word	0x08006a09
 80069a8:	08006a09 	.word	0x08006a09
 80069ac:	08006a09 	.word	0x08006a09
 80069b0:	08006a09 	.word	0x08006a09
 80069b4:	080069f9 	.word	0x080069f9
 80069b8:	08006a09 	.word	0x08006a09
 80069bc:	08006a09 	.word	0x08006a09
 80069c0:	08006a09 	.word	0x08006a09
 80069c4:	08006a09 	.word	0x08006a09
 80069c8:	08006a09 	.word	0x08006a09
 80069cc:	08006a09 	.word	0x08006a09
 80069d0:	08006a09 	.word	0x08006a09
 80069d4:	08006a01 	.word	0x08006a01
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069de:	e0d6      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80069e0:	2304      	movs	r3, #4
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e6:	e0d2      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80069e8:	2308      	movs	r3, #8
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ee:	e0ce      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80069f0:	2310      	movs	r3, #16
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f6:	e0ca      	b.n	8006b8e <UART_SetConfig+0x7ae>
 80069f8:	2320      	movs	r3, #32
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fe:	e0c6      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006a00:	2340      	movs	r3, #64	@ 0x40
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a06:	e0c2      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006a08:	2380      	movs	r3, #128	@ 0x80
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0e:	e0be      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006a10:	40011400 	.word	0x40011400
 8006a14:	58024400 	.word	0x58024400
 8006a18:	40007800 	.word	0x40007800
 8006a1c:	40007c00 	.word	0x40007c00
 8006a20:	40011800 	.word	0x40011800
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4aad      	ldr	r2, [pc, #692]	@ (8006ce0 <UART_SetConfig+0x900>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d176      	bne.n	8006b1c <UART_SetConfig+0x73c>
 8006a2e:	4bad      	ldr	r3, [pc, #692]	@ (8006ce4 <UART_SetConfig+0x904>)
 8006a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a36:	2b28      	cmp	r3, #40	@ 0x28
 8006a38:	d86c      	bhi.n	8006b14 <UART_SetConfig+0x734>
 8006a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <UART_SetConfig+0x660>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006ae5 	.word	0x08006ae5
 8006a44:	08006b15 	.word	0x08006b15
 8006a48:	08006b15 	.word	0x08006b15
 8006a4c:	08006b15 	.word	0x08006b15
 8006a50:	08006b15 	.word	0x08006b15
 8006a54:	08006b15 	.word	0x08006b15
 8006a58:	08006b15 	.word	0x08006b15
 8006a5c:	08006b15 	.word	0x08006b15
 8006a60:	08006aed 	.word	0x08006aed
 8006a64:	08006b15 	.word	0x08006b15
 8006a68:	08006b15 	.word	0x08006b15
 8006a6c:	08006b15 	.word	0x08006b15
 8006a70:	08006b15 	.word	0x08006b15
 8006a74:	08006b15 	.word	0x08006b15
 8006a78:	08006b15 	.word	0x08006b15
 8006a7c:	08006b15 	.word	0x08006b15
 8006a80:	08006af5 	.word	0x08006af5
 8006a84:	08006b15 	.word	0x08006b15
 8006a88:	08006b15 	.word	0x08006b15
 8006a8c:	08006b15 	.word	0x08006b15
 8006a90:	08006b15 	.word	0x08006b15
 8006a94:	08006b15 	.word	0x08006b15
 8006a98:	08006b15 	.word	0x08006b15
 8006a9c:	08006b15 	.word	0x08006b15
 8006aa0:	08006afd 	.word	0x08006afd
 8006aa4:	08006b15 	.word	0x08006b15
 8006aa8:	08006b15 	.word	0x08006b15
 8006aac:	08006b15 	.word	0x08006b15
 8006ab0:	08006b15 	.word	0x08006b15
 8006ab4:	08006b15 	.word	0x08006b15
 8006ab8:	08006b15 	.word	0x08006b15
 8006abc:	08006b15 	.word	0x08006b15
 8006ac0:	08006b05 	.word	0x08006b05
 8006ac4:	08006b15 	.word	0x08006b15
 8006ac8:	08006b15 	.word	0x08006b15
 8006acc:	08006b15 	.word	0x08006b15
 8006ad0:	08006b15 	.word	0x08006b15
 8006ad4:	08006b15 	.word	0x08006b15
 8006ad8:	08006b15 	.word	0x08006b15
 8006adc:	08006b15 	.word	0x08006b15
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aea:	e050      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006aec:	2304      	movs	r3, #4
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006af2:	e04c      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006af4:	2308      	movs	r3, #8
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afa:	e048      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006afc:	2310      	movs	r3, #16
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b02:	e044      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b04:	2320      	movs	r3, #32
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0a:	e040      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b0c:	2340      	movs	r3, #64	@ 0x40
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b12:	e03c      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b14:	2380      	movs	r3, #128	@ 0x80
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b1a:	e038      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a71      	ldr	r2, [pc, #452]	@ (8006ce8 <UART_SetConfig+0x908>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d130      	bne.n	8006b88 <UART_SetConfig+0x7a8>
 8006b26:	4b6f      	ldr	r3, [pc, #444]	@ (8006ce4 <UART_SetConfig+0x904>)
 8006b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d826      	bhi.n	8006b80 <UART_SetConfig+0x7a0>
 8006b32:	a201      	add	r2, pc, #4	@ (adr r2, 8006b38 <UART_SetConfig+0x758>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b51 	.word	0x08006b51
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b61 	.word	0x08006b61
 8006b44:	08006b69 	.word	0x08006b69
 8006b48:	08006b71 	.word	0x08006b71
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	2302      	movs	r3, #2
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b56:	e01a      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5e:	e016      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b66:	e012      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6e:	e00e      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b70:	2320      	movs	r3, #32
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b76:	e00a      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b78:	2340      	movs	r3, #64	@ 0x40
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7e:	e006      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b80:	2380      	movs	r3, #128	@ 0x80
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b86:	e002      	b.n	8006b8e <UART_SetConfig+0x7ae>
 8006b88:	2380      	movs	r3, #128	@ 0x80
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a55      	ldr	r2, [pc, #340]	@ (8006ce8 <UART_SetConfig+0x908>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	f040 80f8 	bne.w	8006d8a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	dc46      	bgt.n	8006c30 <UART_SetConfig+0x850>
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	db75      	blt.n	8006c92 <UART_SetConfig+0x8b2>
 8006ba6:	3b02      	subs	r3, #2
 8006ba8:	2b1e      	cmp	r3, #30
 8006baa:	d872      	bhi.n	8006c92 <UART_SetConfig+0x8b2>
 8006bac:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb4 <UART_SetConfig+0x7d4>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006c37 	.word	0x08006c37
 8006bb8:	08006c93 	.word	0x08006c93
 8006bbc:	08006c3f 	.word	0x08006c3f
 8006bc0:	08006c93 	.word	0x08006c93
 8006bc4:	08006c93 	.word	0x08006c93
 8006bc8:	08006c93 	.word	0x08006c93
 8006bcc:	08006c4f 	.word	0x08006c4f
 8006bd0:	08006c93 	.word	0x08006c93
 8006bd4:	08006c93 	.word	0x08006c93
 8006bd8:	08006c93 	.word	0x08006c93
 8006bdc:	08006c93 	.word	0x08006c93
 8006be0:	08006c93 	.word	0x08006c93
 8006be4:	08006c93 	.word	0x08006c93
 8006be8:	08006c93 	.word	0x08006c93
 8006bec:	08006c5f 	.word	0x08006c5f
 8006bf0:	08006c93 	.word	0x08006c93
 8006bf4:	08006c93 	.word	0x08006c93
 8006bf8:	08006c93 	.word	0x08006c93
 8006bfc:	08006c93 	.word	0x08006c93
 8006c00:	08006c93 	.word	0x08006c93
 8006c04:	08006c93 	.word	0x08006c93
 8006c08:	08006c93 	.word	0x08006c93
 8006c0c:	08006c93 	.word	0x08006c93
 8006c10:	08006c93 	.word	0x08006c93
 8006c14:	08006c93 	.word	0x08006c93
 8006c18:	08006c93 	.word	0x08006c93
 8006c1c:	08006c93 	.word	0x08006c93
 8006c20:	08006c93 	.word	0x08006c93
 8006c24:	08006c93 	.word	0x08006c93
 8006c28:	08006c93 	.word	0x08006c93
 8006c2c:	08006c85 	.word	0x08006c85
 8006c30:	2b40      	cmp	r3, #64	@ 0x40
 8006c32:	d02a      	beq.n	8006c8a <UART_SetConfig+0x8aa>
 8006c34:	e02d      	b.n	8006c92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c36:	f7fe fed3 	bl	80059e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c3c:	e02f      	b.n	8006c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fee2 	bl	8005a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c4c:	e027      	b.n	8006c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c4e:	f107 0318 	add.w	r3, r7, #24
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff f82e 	bl	8005cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c5c:	e01f      	b.n	8006c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c5e:	4b21      	ldr	r3, [pc, #132]	@ (8006ce4 <UART_SetConfig+0x904>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce4 <UART_SetConfig+0x904>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	08db      	lsrs	r3, r3, #3
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	4a1d      	ldr	r2, [pc, #116]	@ (8006cec <UART_SetConfig+0x90c>)
 8006c76:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c7c:	e00f      	b.n	8006c9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cec <UART_SetConfig+0x90c>)
 8006c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c82:	e00c      	b.n	8006c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c84:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf0 <UART_SetConfig+0x910>)
 8006c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c88:	e009      	b.n	8006c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c90:	e005      	b.n	8006c9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 81ee 	beq.w	8007082 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006caa:	4a12      	ldr	r2, [pc, #72]	@ (8006cf4 <UART_SetConfig+0x914>)
 8006cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d305      	bcc.n	8006cd6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d910      	bls.n	8006cf8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006cdc:	e1d1      	b.n	8007082 <UART_SetConfig+0xca2>
 8006cde:	bf00      	nop
 8006ce0:	40011c00 	.word	0x40011c00
 8006ce4:	58024400 	.word	0x58024400
 8006ce8:	58000c00 	.word	0x58000c00
 8006cec:	03d09000 	.word	0x03d09000
 8006cf0:	003d0900 	.word	0x003d0900
 8006cf4:	0800bcc4 	.word	0x0800bcc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	60fa      	str	r2, [r7, #12]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	4ac0      	ldr	r2, [pc, #768]	@ (8007008 <UART_SetConfig+0xc28>)
 8006d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d1a:	f7f9 fb51 	bl	80003c0 <__aeabi_uldivmod>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	020b      	lsls	r3, r1, #8
 8006d30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d34:	0202      	lsls	r2, r0, #8
 8006d36:	6979      	ldr	r1, [r7, #20]
 8006d38:	6849      	ldr	r1, [r1, #4]
 8006d3a:	0849      	lsrs	r1, r1, #1
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	4605      	mov	r5, r0
 8006d42:	eb12 0804 	adds.w	r8, r2, r4
 8006d46:	eb43 0905 	adc.w	r9, r3, r5
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	469a      	mov	sl, r3
 8006d52:	4693      	mov	fp, r2
 8006d54:	4652      	mov	r2, sl
 8006d56:	465b      	mov	r3, fp
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	f7f9 fb30 	bl	80003c0 <__aeabi_uldivmod>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4613      	mov	r3, r2
 8006d66:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d6e:	d308      	bcc.n	8006d82 <UART_SetConfig+0x9a2>
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d76:	d204      	bcs.n	8006d82 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d7e:	60da      	str	r2, [r3, #12]
 8006d80:	e17f      	b.n	8007082 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d88:	e17b      	b.n	8007082 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d92:	f040 80bd 	bne.w	8006f10 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006d96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	dc48      	bgt.n	8006e30 <UART_SetConfig+0xa50>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	db7b      	blt.n	8006e9a <UART_SetConfig+0xaba>
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d879      	bhi.n	8006e9a <UART_SetConfig+0xaba>
 8006da6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dac <UART_SetConfig+0x9cc>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006e37 	.word	0x08006e37
 8006db0:	08006e3f 	.word	0x08006e3f
 8006db4:	08006e9b 	.word	0x08006e9b
 8006db8:	08006e9b 	.word	0x08006e9b
 8006dbc:	08006e47 	.word	0x08006e47
 8006dc0:	08006e9b 	.word	0x08006e9b
 8006dc4:	08006e9b 	.word	0x08006e9b
 8006dc8:	08006e9b 	.word	0x08006e9b
 8006dcc:	08006e57 	.word	0x08006e57
 8006dd0:	08006e9b 	.word	0x08006e9b
 8006dd4:	08006e9b 	.word	0x08006e9b
 8006dd8:	08006e9b 	.word	0x08006e9b
 8006ddc:	08006e9b 	.word	0x08006e9b
 8006de0:	08006e9b 	.word	0x08006e9b
 8006de4:	08006e9b 	.word	0x08006e9b
 8006de8:	08006e9b 	.word	0x08006e9b
 8006dec:	08006e67 	.word	0x08006e67
 8006df0:	08006e9b 	.word	0x08006e9b
 8006df4:	08006e9b 	.word	0x08006e9b
 8006df8:	08006e9b 	.word	0x08006e9b
 8006dfc:	08006e9b 	.word	0x08006e9b
 8006e00:	08006e9b 	.word	0x08006e9b
 8006e04:	08006e9b 	.word	0x08006e9b
 8006e08:	08006e9b 	.word	0x08006e9b
 8006e0c:	08006e9b 	.word	0x08006e9b
 8006e10:	08006e9b 	.word	0x08006e9b
 8006e14:	08006e9b 	.word	0x08006e9b
 8006e18:	08006e9b 	.word	0x08006e9b
 8006e1c:	08006e9b 	.word	0x08006e9b
 8006e20:	08006e9b 	.word	0x08006e9b
 8006e24:	08006e9b 	.word	0x08006e9b
 8006e28:	08006e9b 	.word	0x08006e9b
 8006e2c:	08006e8d 	.word	0x08006e8d
 8006e30:	2b40      	cmp	r3, #64	@ 0x40
 8006e32:	d02e      	beq.n	8006e92 <UART_SetConfig+0xab2>
 8006e34:	e031      	b.n	8006e9a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e36:	f7fd fc07 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8006e3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e3c:	e033      	b.n	8006ea6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e3e:	f7fd fc19 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 8006e42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e44:	e02f      	b.n	8006ea6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fdde 	bl	8005a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e54:	e027      	b.n	8006ea6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e56:	f107 0318 	add.w	r3, r7, #24
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe ff2a 	bl	8005cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e64:	e01f      	b.n	8006ea6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e66:	4b69      	ldr	r3, [pc, #420]	@ (800700c <UART_SetConfig+0xc2c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e72:	4b66      	ldr	r3, [pc, #408]	@ (800700c <UART_SetConfig+0xc2c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	4a64      	ldr	r2, [pc, #400]	@ (8007010 <UART_SetConfig+0xc30>)
 8006e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e84:	e00f      	b.n	8006ea6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006e86:	4b62      	ldr	r3, [pc, #392]	@ (8007010 <UART_SetConfig+0xc30>)
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e8a:	e00c      	b.n	8006ea6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e8c:	4b61      	ldr	r3, [pc, #388]	@ (8007014 <UART_SetConfig+0xc34>)
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e90:	e009      	b.n	8006ea6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e98:	e005      	b.n	8006ea6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80ea 	beq.w	8007082 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	4a55      	ldr	r2, [pc, #340]	@ (8007008 <UART_SetConfig+0xc28>)
 8006eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec0:	005a      	lsls	r2, r3, #1
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	441a      	add	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed6:	2b0f      	cmp	r3, #15
 8006ed8:	d916      	bls.n	8006f08 <UART_SetConfig+0xb28>
 8006eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee0:	d212      	bcs.n	8006f08 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f023 030f 	bic.w	r3, r3, #15
 8006eea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006efa:	4313      	orrs	r3, r2
 8006efc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006f04:	60da      	str	r2, [r3, #12]
 8006f06:	e0bc      	b.n	8007082 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f0e:	e0b8      	b.n	8007082 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f10:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	dc4b      	bgt.n	8006fb0 <UART_SetConfig+0xbd0>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f2c0 8087 	blt.w	800702c <UART_SetConfig+0xc4c>
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	f200 8084 	bhi.w	800702c <UART_SetConfig+0xc4c>
 8006f24:	a201      	add	r2, pc, #4	@ (adr r2, 8006f2c <UART_SetConfig+0xb4c>)
 8006f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2a:	bf00      	nop
 8006f2c:	08006fb7 	.word	0x08006fb7
 8006f30:	08006fbf 	.word	0x08006fbf
 8006f34:	0800702d 	.word	0x0800702d
 8006f38:	0800702d 	.word	0x0800702d
 8006f3c:	08006fc7 	.word	0x08006fc7
 8006f40:	0800702d 	.word	0x0800702d
 8006f44:	0800702d 	.word	0x0800702d
 8006f48:	0800702d 	.word	0x0800702d
 8006f4c:	08006fd7 	.word	0x08006fd7
 8006f50:	0800702d 	.word	0x0800702d
 8006f54:	0800702d 	.word	0x0800702d
 8006f58:	0800702d 	.word	0x0800702d
 8006f5c:	0800702d 	.word	0x0800702d
 8006f60:	0800702d 	.word	0x0800702d
 8006f64:	0800702d 	.word	0x0800702d
 8006f68:	0800702d 	.word	0x0800702d
 8006f6c:	08006fe7 	.word	0x08006fe7
 8006f70:	0800702d 	.word	0x0800702d
 8006f74:	0800702d 	.word	0x0800702d
 8006f78:	0800702d 	.word	0x0800702d
 8006f7c:	0800702d 	.word	0x0800702d
 8006f80:	0800702d 	.word	0x0800702d
 8006f84:	0800702d 	.word	0x0800702d
 8006f88:	0800702d 	.word	0x0800702d
 8006f8c:	0800702d 	.word	0x0800702d
 8006f90:	0800702d 	.word	0x0800702d
 8006f94:	0800702d 	.word	0x0800702d
 8006f98:	0800702d 	.word	0x0800702d
 8006f9c:	0800702d 	.word	0x0800702d
 8006fa0:	0800702d 	.word	0x0800702d
 8006fa4:	0800702d 	.word	0x0800702d
 8006fa8:	0800702d 	.word	0x0800702d
 8006fac:	0800701f 	.word	0x0800701f
 8006fb0:	2b40      	cmp	r3, #64	@ 0x40
 8006fb2:	d037      	beq.n	8007024 <UART_SetConfig+0xc44>
 8006fb4:	e03a      	b.n	800702c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb6:	f7fd fb47 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8006fba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fbc:	e03c      	b.n	8007038 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fbe:	f7fd fb59 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 8006fc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fc4:	e038      	b.n	8007038 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fd1e 	bl	8005a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fd4:	e030      	b.n	8007038 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd6:	f107 0318 	add.w	r3, r7, #24
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fe6a 	bl	8005cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe4:	e028      	b.n	8007038 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe6:	4b09      	ldr	r3, [pc, #36]	@ (800700c <UART_SetConfig+0xc2c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d012      	beq.n	8007018 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ff2:	4b06      	ldr	r3, [pc, #24]	@ (800700c <UART_SetConfig+0xc2c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	08db      	lsrs	r3, r3, #3
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	4a04      	ldr	r2, [pc, #16]	@ (8007010 <UART_SetConfig+0xc30>)
 8006ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8007002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007004:	e018      	b.n	8007038 <UART_SetConfig+0xc58>
 8007006:	bf00      	nop
 8007008:	0800bcc4 	.word	0x0800bcc4
 800700c:	58024400 	.word	0x58024400
 8007010:	03d09000 	.word	0x03d09000
 8007014:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007018:	4b24      	ldr	r3, [pc, #144]	@ (80070ac <UART_SetConfig+0xccc>)
 800701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800701c:	e00c      	b.n	8007038 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800701e:	4b24      	ldr	r3, [pc, #144]	@ (80070b0 <UART_SetConfig+0xcd0>)
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007022:	e009      	b.n	8007038 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007024:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800702a:	e005      	b.n	8007038 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007036:	bf00      	nop
    }

    if (pclk != 0U)
 8007038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d021      	beq.n	8007082 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007042:	4a1c      	ldr	r2, [pc, #112]	@ (80070b4 <UART_SetConfig+0xcd4>)
 8007044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007048:	461a      	mov	r2, r3
 800704a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	441a      	add	r2, r3
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	2b0f      	cmp	r3, #15
 8007066:	d909      	bls.n	800707c <UART_SetConfig+0xc9c>
 8007068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800706e:	d205      	bcs.n	800707c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007072:	b29a      	uxth	r2, r3
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	60da      	str	r2, [r3, #12]
 800707a:	e002      	b.n	8007082 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2201      	movs	r2, #1
 8007086:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2201      	movs	r2, #1
 800708e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2200      	movs	r2, #0
 8007096:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2200      	movs	r2, #0
 800709c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800709e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3748      	adds	r7, #72	@ 0x48
 80070a6:	46bd      	mov	sp, r7
 80070a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ac:	03d09000 	.word	0x03d09000
 80070b0:	003d0900 	.word	0x003d0900
 80070b4:	0800bcc4 	.word	0x0800bcc4

080070b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01a      	beq.n	80071ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071b6:	d10a      	bne.n	80071ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b098      	sub	sp, #96	@ 0x60
 8007200:	af02      	add	r7, sp, #8
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800720c:	f7fa fcb0 	bl	8001b70 <HAL_GetTick>
 8007210:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b08      	cmp	r3, #8
 800721e:	d12f      	bne.n	8007280 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007220:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f88e 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d022      	beq.n	8007280 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800724a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800724e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007258:	647b      	str	r3, [r7, #68]	@ 0x44
 800725a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800725e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e6      	bne.n	800723a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e063      	b.n	8007348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b04      	cmp	r3, #4
 800728c:	d149      	bne.n	8007322 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007296:	2200      	movs	r2, #0
 8007298:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f857 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d03c      	beq.n	8007322 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	623b      	str	r3, [r7, #32]
   return(result);
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e6      	bne.n	80072a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3308      	adds	r3, #8
 80072e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072fa:	61fa      	str	r2, [r7, #28]
 80072fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	69b9      	ldr	r1, [r7, #24]
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	617b      	str	r3, [r7, #20]
   return(result);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e5      	bne.n	80072da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e012      	b.n	8007348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3758      	adds	r7, #88	@ 0x58
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	4613      	mov	r3, r2
 800735e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007360:	e04f      	b.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d04b      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736a:	f7fa fc01 	bl	8001b70 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	429a      	cmp	r2, r3
 8007378:	d302      	bcc.n	8007380 <UART_WaitOnFlagUntilTimeout+0x30>
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e04e      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d037      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b80      	cmp	r3, #128	@ 0x80
 8007396:	d034      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b40      	cmp	r3, #64	@ 0x40
 800739c:	d031      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d110      	bne.n	80073ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2208      	movs	r2, #8
 80073b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f839 	bl	800742c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2208      	movs	r2, #8
 80073be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e029      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073dc:	d111      	bne.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f81f 	bl	800742c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e00f      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69da      	ldr	r2, [r3, #28]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4013      	ands	r3, r2
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	429a      	cmp	r2, r3
 8007410:	bf0c      	ite	eq
 8007412:	2301      	moveq	r3, #1
 8007414:	2300      	movne	r3, #0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	429a      	cmp	r2, r3
 800741e:	d0a0      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b095      	sub	sp, #84	@ 0x54
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007452:	643b      	str	r3, [r7, #64]	@ 0x40
 8007454:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	61fb      	str	r3, [r7, #28]
   return(result);
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	4b1e      	ldr	r3, [pc, #120]	@ (80074f4 <UART_EndRxTransfer+0xc8>)
 800747a:	4013      	ands	r3, r2
 800747c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007488:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800748c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d118      	bne.n	80074d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f023 0310 	bic.w	r3, r3, #16
 80074b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6979      	ldr	r1, [r7, #20]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	613b      	str	r3, [r7, #16]
   return(result);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80074e8:	bf00      	nop
 80074ea:	3754      	adds	r7, #84	@ 0x54
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	effffffe 	.word	0xeffffffe

080074f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_UARTEx_DisableFifoMode+0x16>
 800750a:	2302      	movs	r3, #2
 800750c:	e027      	b.n	800755e <HAL_UARTEx_DisableFifoMode+0x66>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2224      	movs	r2, #36	@ 0x24
 800751a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0201 	bic.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800753c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800757e:	2302      	movs	r3, #2
 8007580:	e02d      	b.n	80075de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2224      	movs	r2, #36	@ 0x24
 800758e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0201 	bic.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f850 	bl	8007664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d101      	bne.n	80075fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075fa:	2302      	movs	r3, #2
 80075fc:	e02d      	b.n	800765a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2224      	movs	r2, #36	@ 0x24
 800760a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0201 	bic.w	r2, r2, #1
 8007624:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f812 	bl	8007664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007670:	2b00      	cmp	r3, #0
 8007672:	d108      	bne.n	8007686 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007684:	e031      	b.n	80076ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007686:	2310      	movs	r3, #16
 8007688:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800768a:	2310      	movs	r3, #16
 800768c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	0e5b      	lsrs	r3, r3, #25
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	0f5b      	lsrs	r3, r3, #29
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	7b3a      	ldrb	r2, [r7, #12]
 80076b2:	4911      	ldr	r1, [pc, #68]	@ (80076f8 <UARTEx_SetNbDataToProcess+0x94>)
 80076b4:	5c8a      	ldrb	r2, [r1, r2]
 80076b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076ba:	7b3a      	ldrb	r2, [r7, #12]
 80076bc:	490f      	ldr	r1, [pc, #60]	@ (80076fc <UARTEx_SetNbDataToProcess+0x98>)
 80076be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	7b7a      	ldrb	r2, [r7, #13]
 80076d0:	4909      	ldr	r1, [pc, #36]	@ (80076f8 <UARTEx_SetNbDataToProcess+0x94>)
 80076d2:	5c8a      	ldrb	r2, [r1, r2]
 80076d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076d8:	7b7a      	ldrb	r2, [r7, #13]
 80076da:	4908      	ldr	r1, [pc, #32]	@ (80076fc <UARTEx_SetNbDataToProcess+0x98>)
 80076dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076de:	fb93 f3f2 	sdiv	r3, r3, r2
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	0800bcdc 	.word	0x0800bcdc
 80076fc:	0800bce4 	.word	0x0800bce4

08007700 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007700:	b084      	sub	sp, #16
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	f107 001c 	add.w	r0, r7, #28
 800770e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007712:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007716:	2b01      	cmp	r3, #1
 8007718:	d121      	bne.n	800775e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	4b2c      	ldr	r3, [pc, #176]	@ (80077dc <USB_CoreInit+0xdc>)
 800772c:	4013      	ands	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800773e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007742:	2b01      	cmp	r3, #1
 8007744:	d105      	bne.n	8007752 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 fafa 	bl	8008d4c <USB_CoreReset>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
 800775c:	e01b      	b.n	8007796 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 faee 	bl	8008d4c <USB_CoreReset>
 8007770:	4603      	mov	r3, r0
 8007772:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007774:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007778:	2b00      	cmp	r3, #0
 800777a:	d106      	bne.n	800778a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007780:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	639a      	str	r2, [r3, #56]	@ 0x38
 8007788:	e005      	b.n	8007796 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007796:	7fbb      	ldrb	r3, [r7, #30]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d116      	bne.n	80077ca <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077aa:	4b0d      	ldr	r3, [pc, #52]	@ (80077e0 <USB_CoreInit+0xe0>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f043 0206 	orr.w	r2, r3, #6
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f043 0220 	orr.w	r2, r3, #32
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077d6:	b004      	add	sp, #16
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	ffbdffbf 	.word	0xffbdffbf
 80077e0:	03ee0000 	.word	0x03ee0000

080077e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d165      	bne.n	80078c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4a41      	ldr	r2, [pc, #260]	@ (8007900 <USB_SetTurnaroundTime+0x11c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d906      	bls.n	800780e <USB_SetTurnaroundTime+0x2a>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4a40      	ldr	r2, [pc, #256]	@ (8007904 <USB_SetTurnaroundTime+0x120>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d202      	bcs.n	800780e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007808:	230f      	movs	r3, #15
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	e062      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	4a3c      	ldr	r2, [pc, #240]	@ (8007904 <USB_SetTurnaroundTime+0x120>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d306      	bcc.n	8007824 <USB_SetTurnaroundTime+0x40>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4a3b      	ldr	r2, [pc, #236]	@ (8007908 <USB_SetTurnaroundTime+0x124>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d202      	bcs.n	8007824 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800781e:	230e      	movs	r3, #14
 8007820:	617b      	str	r3, [r7, #20]
 8007822:	e057      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4a38      	ldr	r2, [pc, #224]	@ (8007908 <USB_SetTurnaroundTime+0x124>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d306      	bcc.n	800783a <USB_SetTurnaroundTime+0x56>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4a37      	ldr	r2, [pc, #220]	@ (800790c <USB_SetTurnaroundTime+0x128>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d202      	bcs.n	800783a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007834:	230d      	movs	r3, #13
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	e04c      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	4a33      	ldr	r2, [pc, #204]	@ (800790c <USB_SetTurnaroundTime+0x128>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d306      	bcc.n	8007850 <USB_SetTurnaroundTime+0x6c>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4a32      	ldr	r2, [pc, #200]	@ (8007910 <USB_SetTurnaroundTime+0x12c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d802      	bhi.n	8007850 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800784a:	230c      	movs	r3, #12
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	e041      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4a2f      	ldr	r2, [pc, #188]	@ (8007910 <USB_SetTurnaroundTime+0x12c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d906      	bls.n	8007866 <USB_SetTurnaroundTime+0x82>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4a2e      	ldr	r2, [pc, #184]	@ (8007914 <USB_SetTurnaroundTime+0x130>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d802      	bhi.n	8007866 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007860:	230b      	movs	r3, #11
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	e036      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	4a2a      	ldr	r2, [pc, #168]	@ (8007914 <USB_SetTurnaroundTime+0x130>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d906      	bls.n	800787c <USB_SetTurnaroundTime+0x98>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4a29      	ldr	r2, [pc, #164]	@ (8007918 <USB_SetTurnaroundTime+0x134>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d802      	bhi.n	800787c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007876:	230a      	movs	r3, #10
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	e02b      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4a26      	ldr	r2, [pc, #152]	@ (8007918 <USB_SetTurnaroundTime+0x134>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d906      	bls.n	8007892 <USB_SetTurnaroundTime+0xae>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4a25      	ldr	r2, [pc, #148]	@ (800791c <USB_SetTurnaroundTime+0x138>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d202      	bcs.n	8007892 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800788c:	2309      	movs	r3, #9
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e020      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	4a21      	ldr	r2, [pc, #132]	@ (800791c <USB_SetTurnaroundTime+0x138>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d306      	bcc.n	80078a8 <USB_SetTurnaroundTime+0xc4>
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	4a20      	ldr	r2, [pc, #128]	@ (8007920 <USB_SetTurnaroundTime+0x13c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d802      	bhi.n	80078a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80078a2:	2308      	movs	r3, #8
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	e015      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007920 <USB_SetTurnaroundTime+0x13c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d906      	bls.n	80078be <USB_SetTurnaroundTime+0xda>
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007924 <USB_SetTurnaroundTime+0x140>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d202      	bcs.n	80078be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80078b8:	2307      	movs	r3, #7
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	e00a      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80078be:	2306      	movs	r3, #6
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	e007      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d102      	bne.n	80078d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80078ca:	2309      	movs	r3, #9
 80078cc:	617b      	str	r3, [r7, #20]
 80078ce:	e001      	b.n	80078d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80078d0:	2309      	movs	r3, #9
 80078d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	029b      	lsls	r3, r3, #10
 80078e8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80078ec:	431a      	orrs	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	00d8acbf 	.word	0x00d8acbf
 8007904:	00e4e1c0 	.word	0x00e4e1c0
 8007908:	00f42400 	.word	0x00f42400
 800790c:	01067380 	.word	0x01067380
 8007910:	011a499f 	.word	0x011a499f
 8007914:	01312cff 	.word	0x01312cff
 8007918:	014ca43f 	.word	0x014ca43f
 800791c:	016e3600 	.word	0x016e3600
 8007920:	01a6ab1f 	.word	0x01a6ab1f
 8007924:	01e84800 	.word	0x01e84800

08007928 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f043 0201 	orr.w	r2, r3, #1
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f023 0201 	bic.w	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d115      	bne.n	80079ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800799a:	200a      	movs	r0, #10
 800799c:	f7fa f8f4 	bl	8001b88 <HAL_Delay>
      ms += 10U;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	330a      	adds	r3, #10
 80079a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 f93f 	bl	8008c2a <USB_GetMode>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d01e      	beq.n	80079f0 <USB_SetCurrentMode+0x84>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80079b6:	d9f0      	bls.n	800799a <USB_SetCurrentMode+0x2e>
 80079b8:	e01a      	b.n	80079f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d115      	bne.n	80079ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079cc:	200a      	movs	r0, #10
 80079ce:	f7fa f8db 	bl	8001b88 <HAL_Delay>
      ms += 10U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	330a      	adds	r3, #10
 80079d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 f926 	bl	8008c2a <USB_GetMode>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <USB_SetCurrentMode+0x84>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80079e8:	d9f0      	bls.n	80079cc <USB_SetCurrentMode+0x60>
 80079ea:	e001      	b.n	80079f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e005      	b.n	80079fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80079f4:	d101      	bne.n	80079fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a04:	b084      	sub	sp, #16
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a1e:	2300      	movs	r3, #0
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	e009      	b.n	8007a38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	3340      	adds	r3, #64	@ 0x40
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	2200      	movs	r2, #0
 8007a30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	3301      	adds	r3, #1
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b0e      	cmp	r3, #14
 8007a3c:	d9f2      	bls.n	8007a24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d11c      	bne.n	8007a80 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a54:	f043 0302 	orr.w	r3, r3, #2
 8007a58:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	e005      	b.n	8007a8c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a84:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a92:	461a      	mov	r2, r3
 8007a94:	2300      	movs	r3, #0
 8007a96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10d      	bne.n	8007abc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f968 	bl	8007d80 <USB_SetDevSpeed>
 8007ab0:	e008      	b.n	8007ac4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f963 	bl	8007d80 <USB_SetDevSpeed>
 8007aba:	e003      	b.n	8007ac4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007abc:	2103      	movs	r1, #3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f95e 	bl	8007d80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ac4:	2110      	movs	r1, #16
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f8fa 	bl	8007cc0 <USB_FlushTxFifo>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f924 	bl	8007d24 <USB_FlushRxFifo>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aec:	461a      	mov	r2, r3
 8007aee:	2300      	movs	r3, #0
 8007af0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af8:	461a      	mov	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b04:	461a      	mov	r2, r3
 8007b06:	2300      	movs	r3, #0
 8007b08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	e043      	b.n	8007b98 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b26:	d118      	bne.n	8007b5a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	e013      	b.n	8007b6c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b50:	461a      	mov	r2, r3
 8007b52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	e008      	b.n	8007b6c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b66:	461a      	mov	r2, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	3301      	adds	r3, #1
 8007b96:	613b      	str	r3, [r7, #16]
 8007b98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d3b5      	bcc.n	8007b10 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	613b      	str	r3, [r7, #16]
 8007ba8:	e043      	b.n	8007c32 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bc0:	d118      	bne.n	8007bf4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	e013      	b.n	8007c06 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bea:	461a      	mov	r2, r3
 8007bec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	e008      	b.n	8007c06 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c00:	461a      	mov	r2, r3
 8007c02:	2300      	movs	r3, #0
 8007c04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c12:	461a      	mov	r2, r3
 8007c14:	2300      	movs	r3, #0
 8007c16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c24:	461a      	mov	r2, r3
 8007c26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	613b      	str	r3, [r7, #16]
 8007c32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c36:	461a      	mov	r2, r3
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d3b5      	bcc.n	8007baa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007c5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d105      	bne.n	8007c74 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	f043 0210 	orr.w	r2, r3, #16
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699a      	ldr	r2, [r3, #24]
 8007c78:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb8 <USB_DevInit+0x2b4>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d005      	beq.n	8007c94 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f043 0208 	orr.w	r2, r3, #8
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d105      	bne.n	8007ca8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699a      	ldr	r2, [r3, #24]
 8007ca0:	4b06      	ldr	r3, [pc, #24]	@ (8007cbc <USB_DevInit+0x2b8>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cb4:	b004      	add	sp, #16
 8007cb6:	4770      	bx	lr
 8007cb8:	803c3800 	.word	0x803c3800
 8007cbc:	40000004 	.word	0x40000004

08007cc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cda:	d901      	bls.n	8007ce0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e01b      	b.n	8007d18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	daf2      	bge.n	8007cce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	019b      	lsls	r3, r3, #6
 8007cf0:	f043 0220 	orr.w	r2, r3, #32
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d04:	d901      	bls.n	8007d0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e006      	b.n	8007d18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d0f0      	beq.n	8007cf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d3c:	d901      	bls.n	8007d42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e018      	b.n	8007d74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	daf2      	bge.n	8007d30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2210      	movs	r2, #16
 8007d52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3301      	adds	r3, #1
 8007d58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d60:	d901      	bls.n	8007d66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e006      	b.n	8007d74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 0310 	and.w	r3, r3, #16
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d0f0      	beq.n	8007d54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	68f9      	ldr	r1, [r7, #12]
 8007d9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007da0:	4313      	orrs	r3, r2
 8007da2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b087      	sub	sp, #28
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f003 0306 	and.w	r3, r3, #6
 8007dca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]
 8007dd6:	e00a      	b.n	8007dee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d002      	beq.n	8007de4 <USB_GetDevSpeed+0x32>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b06      	cmp	r3, #6
 8007de2:	d102      	bne.n	8007dea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007de4:	2302      	movs	r3, #2
 8007de6:	75fb      	strb	r3, [r7, #23]
 8007de8:	e001      	b.n	8007dee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007dea:	230f      	movs	r3, #15
 8007dec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d139      	bne.n	8007e8c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	2101      	movs	r1, #1
 8007e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	68f9      	ldr	r1, [r7, #12]
 8007e32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e36:	4313      	orrs	r3, r2
 8007e38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d153      	bne.n	8007ef8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	791b      	ldrb	r3, [r3, #4]
 8007e6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	059b      	lsls	r3, r3, #22
 8007e72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e74:	431a      	orrs	r2, r3
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	0159      	lsls	r1, r3, #5
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	440b      	add	r3, r1
 8007e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e82:	4619      	mov	r1, r3
 8007e84:	4b20      	ldr	r3, [pc, #128]	@ (8007f08 <USB_ActivateEndpoint+0x10c>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	600b      	str	r3, [r1, #0]
 8007e8a:	e035      	b.n	8007ef8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e92:	69da      	ldr	r2, [r3, #28]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea2:	041b      	lsls	r3, r3, #16
 8007ea4:	68f9      	ldr	r1, [r7, #12]
 8007ea6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d119      	bne.n	8007ef8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	791b      	ldrb	r3, [r3, #4]
 8007ede:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	0159      	lsls	r1, r3, #5
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	440b      	add	r3, r1
 8007eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4b05      	ldr	r3, [pc, #20]	@ (8007f08 <USB_ActivateEndpoint+0x10c>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	10008000 	.word	0x10008000

08007f0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d161      	bne.n	8007fec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f3e:	d11f      	bne.n	8007f80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	0151      	lsls	r1, r2, #5
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	440a      	add	r2, r1
 8007f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	2101      	movs	r1, #1
 8007f92:	fa01 f303 	lsl.w	r3, r1, r3
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	68f9      	ldr	r1, [r7, #12]
 8007f9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 030f 	and.w	r3, r3, #15
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	0159      	lsls	r1, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	440b      	add	r3, r1
 8007fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4b35      	ldr	r3, [pc, #212]	@ (80080bc <USB_DeactivateEndpoint+0x1b0>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	600b      	str	r3, [r1, #0]
 8007fea:	e060      	b.n	80080ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008002:	d11f      	bne.n	8008044 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	0151      	lsls	r1, r2, #5
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	440a      	add	r2, r1
 800801a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800801e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008022:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	0151      	lsls	r1, r2, #5
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	440a      	add	r2, r1
 800803a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800803e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008042:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800804a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	2101      	movs	r1, #1
 8008056:	fa01 f303 	lsl.w	r3, r1, r3
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	43db      	mvns	r3, r3
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008064:	4013      	ands	r3, r2
 8008066:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800806e:	69da      	ldr	r2, [r3, #28]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	2101      	movs	r1, #1
 800807a:	fa01 f303 	lsl.w	r3, r1, r3
 800807e:	041b      	lsls	r3, r3, #16
 8008080:	43db      	mvns	r3, r3
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008088:	4013      	ands	r3, r2
 800808a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	0159      	lsls	r1, r3, #5
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	440b      	add	r3, r1
 80080a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a6:	4619      	mov	r1, r3
 80080a8:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <USB_DeactivateEndpoint+0x1b4>)
 80080aa:	4013      	ands	r3, r2
 80080ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	ec337800 	.word	0xec337800
 80080c0:	eff37800 	.word	0xeff37800

080080c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08a      	sub	sp, #40	@ 0x28
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	f040 8185 	bne.w	80083f0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d132      	bne.n	8008154 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fa:	691a      	ldr	r2, [r3, #16]
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	0159      	lsls	r1, r3, #5
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	440b      	add	r3, r1
 8008104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008108:	4619      	mov	r1, r3
 800810a:	4ba7      	ldr	r3, [pc, #668]	@ (80083a8 <USB_EPStartXfer+0x2e4>)
 800810c:	4013      	ands	r3, r2
 800810e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	440a      	add	r2, r1
 8008126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800812a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800812e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	0159      	lsls	r1, r3, #5
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	440b      	add	r3, r1
 8008146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800814a:	4619      	mov	r1, r3
 800814c:	4b97      	ldr	r3, [pc, #604]	@ (80083ac <USB_EPStartXfer+0x2e8>)
 800814e:	4013      	ands	r3, r2
 8008150:	610b      	str	r3, [r1, #16]
 8008152:	e097      	b.n	8008284 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	4413      	add	r3, r2
 800815c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008160:	691a      	ldr	r2, [r3, #16]
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	0159      	lsls	r1, r3, #5
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	440b      	add	r3, r1
 800816a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800816e:	4619      	mov	r1, r3
 8008170:	4b8e      	ldr	r3, [pc, #568]	@ (80083ac <USB_EPStartXfer+0x2e8>)
 8008172:	4013      	ands	r3, r2
 8008174:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008182:	691a      	ldr	r2, [r3, #16]
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	0159      	lsls	r1, r3, #5
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	440b      	add	r3, r1
 800818c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008190:	4619      	mov	r1, r3
 8008192:	4b85      	ldr	r3, [pc, #532]	@ (80083a8 <USB_EPStartXfer+0x2e4>)
 8008194:	4013      	ands	r3, r2
 8008196:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d11a      	bne.n	80081d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	691a      	ldr	r2, [r3, #16]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d903      	bls.n	80081b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	689a      	ldr	r2, [r3, #8]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	0151      	lsls	r1, r2, #5
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	440a      	add	r2, r1
 80081c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081d0:	6113      	str	r3, [r2, #16]
 80081d2:	e044      	b.n	800825e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	4413      	add	r3, r2
 80081de:	1e5a      	subs	r2, r3, #1
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	8afb      	ldrh	r3, [r7, #22]
 80081fa:	04d9      	lsls	r1, r3, #19
 80081fc:	4b6c      	ldr	r3, [pc, #432]	@ (80083b0 <USB_EPStartXfer+0x2ec>)
 80081fe:	400b      	ands	r3, r1
 8008200:	69b9      	ldr	r1, [r7, #24]
 8008202:	0148      	lsls	r0, r1, #5
 8008204:	69f9      	ldr	r1, [r7, #28]
 8008206:	4401      	add	r1, r0
 8008208:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800820c:	4313      	orrs	r3, r2
 800820e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	791b      	ldrb	r3, [r3, #4]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d122      	bne.n	800825e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	0151      	lsls	r1, r2, #5
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	440a      	add	r2, r1
 800822e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008232:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008236:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	8afb      	ldrh	r3, [r7, #22]
 8008248:	075b      	lsls	r3, r3, #29
 800824a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800824e:	69b9      	ldr	r1, [r7, #24]
 8008250:	0148      	lsls	r0, r1, #5
 8008252:	69f9      	ldr	r1, [r7, #28]
 8008254:	4401      	add	r1, r0
 8008256:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800825a:	4313      	orrs	r3, r2
 800825c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	4413      	add	r3, r2
 8008266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008274:	69b9      	ldr	r1, [r7, #24]
 8008276:	0148      	lsls	r0, r1, #5
 8008278:	69f9      	ldr	r1, [r7, #28]
 800827a:	4401      	add	r1, r0
 800827c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008280:	4313      	orrs	r3, r2
 8008282:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d14b      	bne.n	8008322 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800829e:	461a      	mov	r2, r3
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	791b      	ldrb	r3, [r3, #4]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d128      	bne.n	8008300 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d110      	bne.n	80082e0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	e00f      	b.n	8008300 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	0151      	lsls	r1, r2, #5
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	440a      	add	r2, r1
 80082f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082fe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	440a      	add	r2, r1
 8008316:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800831a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	e169      	b.n	80085f6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	0151      	lsls	r1, r2, #5
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	440a      	add	r2, r1
 8008338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800833c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008340:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	791b      	ldrb	r3, [r3, #4]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d015      	beq.n	8008376 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8151 	beq.w	80085f6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800835a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	f003 030f 	and.w	r3, r3, #15
 8008364:	2101      	movs	r1, #1
 8008366:	fa01 f303 	lsl.w	r3, r1, r3
 800836a:	69f9      	ldr	r1, [r7, #28]
 800836c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008370:	4313      	orrs	r3, r2
 8008372:	634b      	str	r3, [r1, #52]	@ 0x34
 8008374:	e13f      	b.n	80085f6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008382:	2b00      	cmp	r3, #0
 8008384:	d116      	bne.n	80083b4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	4413      	add	r3, r2
 800838e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	0151      	lsls	r1, r2, #5
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	440a      	add	r2, r1
 800839c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	e015      	b.n	80083d4 <USB_EPStartXfer+0x310>
 80083a8:	e007ffff 	.word	0xe007ffff
 80083ac:	fff80000 	.word	0xfff80000
 80083b0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	0151      	lsls	r1, r2, #5
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	440a      	add	r2, r1
 80083ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083d2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	68d9      	ldr	r1, [r3, #12]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	781a      	ldrb	r2, [r3, #0]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	b298      	uxth	r0, r3
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	4603      	mov	r3, r0
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 f9b9 	bl	8008760 <USB_WritePacket>
 80083ee:	e102      	b.n	80085f6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083fc:	691a      	ldr	r2, [r3, #16]
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	0159      	lsls	r1, r3, #5
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	440b      	add	r3, r1
 8008406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800840a:	4619      	mov	r1, r3
 800840c:	4b7c      	ldr	r3, [pc, #496]	@ (8008600 <USB_EPStartXfer+0x53c>)
 800840e:	4013      	ands	r3, r2
 8008410:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800841e:	691a      	ldr	r2, [r3, #16]
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	0159      	lsls	r1, r3, #5
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	440b      	add	r3, r1
 8008428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800842c:	4619      	mov	r1, r3
 800842e:	4b75      	ldr	r3, [pc, #468]	@ (8008604 <USB_EPStartXfer+0x540>)
 8008430:	4013      	ands	r3, r2
 8008432:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d12f      	bne.n	800849a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	689a      	ldr	r2, [r3, #8]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008468:	69b9      	ldr	r1, [r7, #24]
 800846a:	0148      	lsls	r0, r1, #5
 800846c:	69f9      	ldr	r1, [r7, #28]
 800846e:	4401      	add	r1, r0
 8008470:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008474:	4313      	orrs	r3, r2
 8008476:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	0151      	lsls	r1, r2, #5
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	440a      	add	r2, r1
 800848e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008492:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008496:	6113      	str	r3, [r2, #16]
 8008498:	e05f      	b.n	800855a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d123      	bne.n	80084ea <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ae:	691a      	ldr	r2, [r3, #16]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b8:	69b9      	ldr	r1, [r7, #24]
 80084ba:	0148      	lsls	r0, r1, #5
 80084bc:	69f9      	ldr	r1, [r7, #28]
 80084be:	4401      	add	r1, r0
 80084c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80084c4:	4313      	orrs	r3, r2
 80084c6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084e6:	6113      	str	r3, [r2, #16]
 80084e8:	e037      	b.n	800855a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	691a      	ldr	r2, [r3, #16]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	4413      	add	r3, r2
 80084f4:	1e5a      	subs	r2, r3, #1
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fe:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	8afa      	ldrh	r2, [r7, #22]
 8008506:	fb03 f202 	mul.w	r2, r3, r2
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800851a:	691a      	ldr	r2, [r3, #16]
 800851c:	8afb      	ldrh	r3, [r7, #22]
 800851e:	04d9      	lsls	r1, r3, #19
 8008520:	4b39      	ldr	r3, [pc, #228]	@ (8008608 <USB_EPStartXfer+0x544>)
 8008522:	400b      	ands	r3, r1
 8008524:	69b9      	ldr	r1, [r7, #24]
 8008526:	0148      	lsls	r0, r1, #5
 8008528:	69f9      	ldr	r1, [r7, #28]
 800852a:	4401      	add	r1, r0
 800852c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008530:	4313      	orrs	r3, r2
 8008532:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800854a:	69b9      	ldr	r1, [r7, #24]
 800854c:	0148      	lsls	r0, r1, #5
 800854e:	69f9      	ldr	r1, [r7, #28]
 8008550:	4401      	add	r1, r0
 8008552:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008556:	4313      	orrs	r3, r2
 8008558:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d10d      	bne.n	800857c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d009      	beq.n	800857c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	68d9      	ldr	r1, [r3, #12]
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008578:	460a      	mov	r2, r1
 800857a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	791b      	ldrb	r3, [r3, #4]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d128      	bne.n	80085d6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008590:	2b00      	cmp	r3, #0
 8008592:	d110      	bne.n	80085b6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	e00f      	b.n	80085d6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	0151      	lsls	r1, r2, #5
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	440a      	add	r2, r1
 80085cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085d4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	0151      	lsls	r1, r2, #5
 80085e8:	69fa      	ldr	r2, [r7, #28]
 80085ea:	440a      	add	r2, r1
 80085ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80085f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3720      	adds	r7, #32
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	fff80000 	.word	0xfff80000
 8008604:	e007ffff 	.word	0xe007ffff
 8008608:	1ff80000 	.word	0x1ff80000

0800860c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d14a      	bne.n	80086c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800863e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008642:	f040 8086 	bne.w	8008752 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	4413      	add	r3, r2
 8008650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	7812      	ldrb	r2, [r2, #0]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008664:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008668:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	7812      	ldrb	r2, [r2, #0]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	440a      	add	r2, r1
 8008684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800868c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f242 7210 	movw	r2, #10000	@ 0x2710
 800869a:	4293      	cmp	r3, r2
 800869c:	d902      	bls.n	80086a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	75fb      	strb	r3, [r7, #23]
          break;
 80086a2:	e056      	b.n	8008752 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086bc:	d0e7      	beq.n	800868e <USB_EPStopXfer+0x82>
 80086be:	e048      	b.n	8008752 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086d8:	d13b      	bne.n	8008752 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	7812      	ldrb	r2, [r2, #0]
 8008712:	0151      	lsls	r1, r2, #5
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	440a      	add	r2, r1
 8008718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800871c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008720:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3301      	adds	r3, #1
 8008726:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800872e:	4293      	cmp	r3, r2
 8008730:	d902      	bls.n	8008738 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
          break;
 8008736:	e00c      	b.n	8008752 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800874c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008750:	d0e7      	beq.n	8008722 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008752:	7dfb      	ldrb	r3, [r7, #23]
}
 8008754:	4618      	mov	r0, r3
 8008756:	371c      	adds	r7, #28
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008760:	b480      	push	{r7}
 8008762:	b089      	sub	sp, #36	@ 0x24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	4611      	mov	r1, r2
 800876c:	461a      	mov	r2, r3
 800876e:	460b      	mov	r3, r1
 8008770:	71fb      	strb	r3, [r7, #7]
 8008772:	4613      	mov	r3, r2
 8008774:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800877e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008782:	2b00      	cmp	r3, #0
 8008784:	d123      	bne.n	80087ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008786:	88bb      	ldrh	r3, [r7, #4]
 8008788:	3303      	adds	r3, #3
 800878a:	089b      	lsrs	r3, r3, #2
 800878c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800878e:	2300      	movs	r3, #0
 8008790:	61bb      	str	r3, [r7, #24]
 8008792:	e018      	b.n	80087c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	031a      	lsls	r2, r3, #12
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	4413      	add	r3, r2
 800879c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087a0:	461a      	mov	r2, r3
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	3301      	adds	r3, #1
 80087ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	3301      	adds	r3, #1
 80087b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	3301      	adds	r3, #1
 80087b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	3301      	adds	r3, #1
 80087be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	3301      	adds	r3, #1
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d3e2      	bcc.n	8008794 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3724      	adds	r7, #36	@ 0x24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80087dc:	b480      	push	{r7}
 80087de:	b08b      	sub	sp, #44	@ 0x2c
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80087f2:	88fb      	ldrh	r3, [r7, #6]
 80087f4:	089b      	lsrs	r3, r3, #2
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	f003 0303 	and.w	r3, r3, #3
 8008800:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008802:	2300      	movs	r3, #0
 8008804:	623b      	str	r3, [r7, #32]
 8008806:	e014      	b.n	8008832 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008812:	601a      	str	r2, [r3, #0]
    pDest++;
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	3301      	adds	r3, #1
 8008818:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	3301      	adds	r3, #1
 800881e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008822:	3301      	adds	r3, #1
 8008824:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	3301      	adds	r3, #1
 800882a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	3301      	adds	r3, #1
 8008830:	623b      	str	r3, [r7, #32]
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	429a      	cmp	r2, r3
 8008838:	d3e6      	bcc.n	8008808 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800883a:	8bfb      	ldrh	r3, [r7, #30]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d01e      	beq.n	800887e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800884a:	461a      	mov	r2, r3
 800884c:	f107 0310 	add.w	r3, r7, #16
 8008850:	6812      	ldr	r2, [r2, #0]
 8008852:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	fa22 f303 	lsr.w	r3, r2, r3
 8008860:	b2da      	uxtb	r2, r3
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	701a      	strb	r2, [r3, #0]
      i++;
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	3301      	adds	r3, #1
 800886a:	623b      	str	r3, [r7, #32]
      pDest++;
 800886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886e:	3301      	adds	r3, #1
 8008870:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008872:	8bfb      	ldrh	r3, [r7, #30]
 8008874:	3b01      	subs	r3, #1
 8008876:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008878:	8bfb      	ldrh	r3, [r7, #30]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1ea      	bne.n	8008854 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008880:	4618      	mov	r0, r3
 8008882:	372c      	adds	r7, #44	@ 0x2c
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d12c      	bne.n	8008902 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	db12      	blt.n	80088e0 <USB_EPSetStall+0x54>
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00f      	beq.n	80088e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	0151      	lsls	r1, r2, #5
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	440a      	add	r2, r1
 80088d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80088de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	0151      	lsls	r1, r2, #5
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	440a      	add	r2, r1
 80088f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	e02b      	b.n	800895a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	db12      	blt.n	800893a <USB_EPSetStall+0xae>
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00f      	beq.n	800893a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	440a      	add	r2, r1
 8008930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008934:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008938:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	440a      	add	r2, r1
 8008950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008954:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008958:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d128      	bne.n	80089d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	0151      	lsls	r1, r2, #5
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	440a      	add	r2, r1
 800899a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800899e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	791b      	ldrb	r3, [r3, #4]
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d003      	beq.n	80089b4 <USB_EPClearStall+0x4c>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	791b      	ldrb	r3, [r3, #4]
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d138      	bne.n	8008a26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	e027      	b.n	8008a26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	0151      	lsls	r1, r2, #5
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	440a      	add	r2, r1
 80089ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	791b      	ldrb	r3, [r3, #4]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d003      	beq.n	8008a06 <USB_EPClearStall+0x9e>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	791b      	ldrb	r3, [r3, #4]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d10f      	bne.n	8008a26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	0151      	lsls	r1, r2, #5
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	440a      	add	r2, r1
 8008a1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008a56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008a68:	68f9      	ldr	r1, [r7, #12]
 8008a6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008a9a:	f023 0303 	bic.w	r3, r3, #3
 8008a9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008aae:	f023 0302 	bic.w	r3, r3, #2
 8008ab2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008adc:	f023 0303 	bic.w	r3, r3, #3
 8008ae0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008af0:	f043 0302 	orr.w	r3, r3, #2
 8008af4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	0c1b      	lsrs	r3, r3, #16
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	b29b      	uxth	r3, r3
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b087      	sub	sp, #28
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008bf2:	78fb      	ldrb	r3, [r7, #3]
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfe:	01db      	lsls	r3, r3, #7
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	f003 0301 	and.w	r3, r3, #1
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c62:	4619      	mov	r1, r3
 8008c64:	4b09      	ldr	r3, [pc, #36]	@ (8008c8c <USB_ActivateSetup+0x44>)
 8008c66:	4013      	ands	r3, r2
 8008c68:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	fffff800 	.word	0xfffff800

08008c90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	333c      	adds	r3, #60	@ 0x3c
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	4a26      	ldr	r2, [pc, #152]	@ (8008d48 <USB_EP0_OutStart+0xb8>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d90a      	bls.n	8008cca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cc4:	d101      	bne.n	8008cca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e037      	b.n	8008d3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ce4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ce8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cf8:	f043 0318 	orr.w	r3, r3, #24
 8008cfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d0c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008d10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d10f      	bne.n	8008d38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1e:	461a      	mov	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d32:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008d36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	4f54300a 	.word	0x4f54300a

08008d4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d64:	d901      	bls.n	8008d6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e01b      	b.n	8008da2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	daf2      	bge.n	8008d58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f043 0201 	orr.w	r2, r3, #1
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3301      	adds	r3, #1
 8008d86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d8e:	d901      	bls.n	8008d94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e006      	b.n	8008da2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d0f0      	beq.n	8008d82 <USB_CoreReset+0x36>

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
	...

08008db0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008dbc:	2010      	movs	r0, #16
 8008dbe:	f002 f9d9 	bl	800b174 <USBD_static_malloc>
 8008dc2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d109      	bne.n	8008dde <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	32b0      	adds	r2, #176	@ 0xb0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008dda:	2302      	movs	r3, #2
 8008ddc:	e048      	b.n	8008e70 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	32b0      	adds	r2, #176	@ 0xb0
 8008de8:	68f9      	ldr	r1, [r7, #12]
 8008dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	32b0      	adds	r2, #176	@ 0xb0
 8008df8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	7c1b      	ldrb	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10d      	bne.n	8008e26 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e78 <USBD_HID_Init+0xc8>)
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	f003 020f 	and.w	r2, r3, #15
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	3326      	adds	r3, #38	@ 0x26
 8008e20:	2207      	movs	r2, #7
 8008e22:	801a      	strh	r2, [r3, #0]
 8008e24:	e00c      	b.n	8008e40 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008e26:	4b14      	ldr	r3, [pc, #80]	@ (8008e78 <USBD_HID_Init+0xc8>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	f003 020f 	and.w	r2, r3, #15
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	3326      	adds	r3, #38	@ 0x26
 8008e3c:	220a      	movs	r2, #10
 8008e3e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008e40:	4b0d      	ldr	r3, [pc, #52]	@ (8008e78 <USBD_HID_Init+0xc8>)
 8008e42:	7819      	ldrb	r1, [r3, #0]
 8008e44:	2304      	movs	r3, #4
 8008e46:	2203      	movs	r2, #3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f002 f882 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e78 <USBD_HID_Init+0xc8>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	f003 020f 	and.w	r2, r3, #15
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	440b      	add	r3, r1
 8008e62:	3324      	adds	r3, #36	@ 0x24
 8008e64:	2201      	movs	r2, #1
 8008e66:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	24000273 	.word	0x24000273

08008e7c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008e88:	4b1f      	ldr	r3, [pc, #124]	@ (8008f08 <USBD_HID_DeInit+0x8c>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f002 f885 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008e94:	4b1c      	ldr	r3, [pc, #112]	@ (8008f08 <USBD_HID_DeInit+0x8c>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	f003 020f 	and.w	r2, r3, #15
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	3324      	adds	r3, #36	@ 0x24
 8008eaa:	2200      	movs	r2, #0
 8008eac:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008eae:	4b16      	ldr	r3, [pc, #88]	@ (8008f08 <USBD_HID_DeInit+0x8c>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	f003 020f 	and.w	r2, r3, #15
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	440b      	add	r3, r1
 8008ec2:	3326      	adds	r3, #38	@ 0x26
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	32b0      	adds	r2, #176	@ 0xb0
 8008ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d011      	beq.n	8008efe <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	32b0      	adds	r2, #176	@ 0xb0
 8008ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f002 f951 	bl	800b190 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	32b0      	adds	r2, #176	@ 0xb0
 8008ef8:	2100      	movs	r1, #0
 8008efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	24000273 	.word	0x24000273

08008f0c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	32b0      	adds	r2, #176	@ 0xb0
 8008f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f24:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e0e8      	b.n	800910a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d046      	beq.n	8008fd2 <USBD_HID_Setup+0xc6>
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	f040 80d8 	bne.w	80090fa <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	785b      	ldrb	r3, [r3, #1]
 8008f4e:	3b02      	subs	r3, #2
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d836      	bhi.n	8008fc2 <USBD_HID_Setup+0xb6>
 8008f54:	a201      	add	r2, pc, #4	@ (adr r2, 8008f5c <USBD_HID_Setup+0x50>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08008fb3 	.word	0x08008fb3
 8008f60:	08008f93 	.word	0x08008f93
 8008f64:	08008fc3 	.word	0x08008fc3
 8008f68:	08008fc3 	.word	0x08008fc3
 8008f6c:	08008fc3 	.word	0x08008fc3
 8008f70:	08008fc3 	.word	0x08008fc3
 8008f74:	08008fc3 	.word	0x08008fc3
 8008f78:	08008fc3 	.word	0x08008fc3
 8008f7c:	08008fa1 	.word	0x08008fa1
 8008f80:	08008f85 	.word	0x08008f85
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	885b      	ldrh	r3, [r3, #2]
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	601a      	str	r2, [r3, #0]
          break;
 8008f90:	e01e      	b.n	8008fd0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 fc0f 	bl	800a7bc <USBD_CtlSendData>
          break;
 8008f9e:	e017      	b.n	8008fd0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	885b      	ldrh	r3, [r3, #2]
 8008fa4:	0a1b      	lsrs	r3, r3, #8
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	461a      	mov	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	605a      	str	r2, [r3, #4]
          break;
 8008fb0:	e00e      	b.n	8008fd0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 fbfe 	bl	800a7bc <USBD_CtlSendData>
          break;
 8008fc0:	e006      	b.n	8008fd0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 fb7c 	bl	800a6c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8008fce:	bf00      	nop
      }
      break;
 8008fd0:	e09a      	b.n	8009108 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	2b0b      	cmp	r3, #11
 8008fd8:	f200 8086 	bhi.w	80090e8 <USBD_HID_Setup+0x1dc>
 8008fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe4 <USBD_HID_Setup+0xd8>)
 8008fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe2:	bf00      	nop
 8008fe4:	08009015 	.word	0x08009015
 8008fe8:	080090f7 	.word	0x080090f7
 8008fec:	080090e9 	.word	0x080090e9
 8008ff0:	080090e9 	.word	0x080090e9
 8008ff4:	080090e9 	.word	0x080090e9
 8008ff8:	080090e9 	.word	0x080090e9
 8008ffc:	0800903f 	.word	0x0800903f
 8009000:	080090e9 	.word	0x080090e9
 8009004:	080090e9 	.word	0x080090e9
 8009008:	080090e9 	.word	0x080090e9
 800900c:	08009097 	.word	0x08009097
 8009010:	080090c1 	.word	0x080090c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b03      	cmp	r3, #3
 800901e:	d107      	bne.n	8009030 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009020:	f107 030a 	add.w	r3, r7, #10
 8009024:	2202      	movs	r2, #2
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 fbc7 	bl	800a7bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800902e:	e063      	b.n	80090f8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fb45 	bl	800a6c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009038:	2303      	movs	r3, #3
 800903a:	75fb      	strb	r3, [r7, #23]
          break;
 800903c:	e05c      	b.n	80090f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	885b      	ldrh	r3, [r3, #2]
 8009042:	0a1b      	lsrs	r3, r3, #8
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b22      	cmp	r3, #34	@ 0x22
 8009048:	d108      	bne.n	800905c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	88db      	ldrh	r3, [r3, #6]
 800904e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009050:	bf28      	it	cs
 8009052:	233f      	movcs	r3, #63	@ 0x3f
 8009054:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009056:	4b2f      	ldr	r3, [pc, #188]	@ (8009114 <USBD_HID_Setup+0x208>)
 8009058:	613b      	str	r3, [r7, #16]
 800905a:	e015      	b.n	8009088 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	0a1b      	lsrs	r3, r3, #8
 8009062:	b29b      	uxth	r3, r3
 8009064:	2b21      	cmp	r3, #33	@ 0x21
 8009066:	d108      	bne.n	800907a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009068:	4b2b      	ldr	r3, [pc, #172]	@ (8009118 <USBD_HID_Setup+0x20c>)
 800906a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	88db      	ldrh	r3, [r3, #6]
 8009070:	2b09      	cmp	r3, #9
 8009072:	bf28      	it	cs
 8009074:	2309      	movcs	r3, #9
 8009076:	82bb      	strh	r3, [r7, #20]
 8009078:	e006      	b.n	8009088 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fb20 	bl	800a6c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009082:	2303      	movs	r3, #3
 8009084:	75fb      	strb	r3, [r7, #23]
            break;
 8009086:	e037      	b.n	80090f8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009088:	8abb      	ldrh	r3, [r7, #20]
 800908a:	461a      	mov	r2, r3
 800908c:	6939      	ldr	r1, [r7, #16]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 fb94 	bl	800a7bc <USBD_CtlSendData>
          break;
 8009094:	e030      	b.n	80090f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d107      	bne.n	80090b2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3308      	adds	r3, #8
 80090a6:	2201      	movs	r2, #1
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 fb86 	bl	800a7bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090b0:	e022      	b.n	80090f8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 fb04 	bl	800a6c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80090ba:	2303      	movs	r3, #3
 80090bc:	75fb      	strb	r3, [r7, #23]
          break;
 80090be:	e01b      	b.n	80090f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d106      	bne.n	80090da <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	885b      	ldrh	r3, [r3, #2]
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	461a      	mov	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090d8:	e00e      	b.n	80090f8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f001 faf0 	bl	800a6c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80090e2:	2303      	movs	r3, #3
 80090e4:	75fb      	strb	r3, [r7, #23]
          break;
 80090e6:	e007      	b.n	80090f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 fae9 	bl	800a6c2 <USBD_CtlError>
          ret = USBD_FAIL;
 80090f0:	2303      	movs	r3, #3
 80090f2:	75fb      	strb	r3, [r7, #23]
          break;
 80090f4:	e000      	b.n	80090f8 <USBD_HID_Setup+0x1ec>
          break;
 80090f6:	bf00      	nop
      }
      break;
 80090f8:	e006      	b.n	8009108 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 fae0 	bl	800a6c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009102:	2303      	movs	r3, #3
 8009104:	75fb      	strb	r3, [r7, #23]
      break;
 8009106:	bf00      	nop
  }

  return (uint8_t)ret;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	24000234 	.word	0x24000234
 8009118:	2400021c 	.word	0x2400021c

0800911c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	32b0      	adds	r2, #176	@ 0xb0
 8009134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009138:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	e014      	b.n	800916e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b03      	cmp	r3, #3
 800914e:	d10d      	bne.n	800916c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	7b1b      	ldrb	r3, [r3, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d109      	bne.n	800916c <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2201      	movs	r2, #1
 800915c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800915e:	4b06      	ldr	r3, [pc, #24]	@ (8009178 <USBD_HID_SendReport+0x5c>)
 8009160:	7819      	ldrb	r1, [r3, #0]
 8009162:	88fb      	ldrh	r3, [r7, #6]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f001 ffc1 	bl	800b0ee <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	24000273 	.word	0x24000273

0800917c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009184:	2181      	movs	r1, #129	@ 0x81
 8009186:	4809      	ldr	r0, [pc, #36]	@ (80091ac <USBD_HID_GetFSCfgDesc+0x30>)
 8009188:	f000 fc3b 	bl	8009a02 <USBD_GetEpDesc>
 800918c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	220a      	movs	r2, #10
 8009198:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2222      	movs	r2, #34	@ 0x22
 800919e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80091a0:	4b02      	ldr	r3, [pc, #8]	@ (80091ac <USBD_HID_GetFSCfgDesc+0x30>)
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	240001f8 	.word	0x240001f8

080091b0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80091b8:	2181      	movs	r1, #129	@ 0x81
 80091ba:	4809      	ldr	r0, [pc, #36]	@ (80091e0 <USBD_HID_GetHSCfgDesc+0x30>)
 80091bc:	f000 fc21 	bl	8009a02 <USBD_GetEpDesc>
 80091c0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2207      	movs	r2, #7
 80091cc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2222      	movs	r2, #34	@ 0x22
 80091d2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80091d4:	4b02      	ldr	r3, [pc, #8]	@ (80091e0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	240001f8 	.word	0x240001f8

080091e4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80091ec:	2181      	movs	r1, #129	@ 0x81
 80091ee:	4809      	ldr	r0, [pc, #36]	@ (8009214 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80091f0:	f000 fc07 	bl	8009a02 <USBD_GetEpDesc>
 80091f4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	220a      	movs	r2, #10
 8009200:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2222      	movs	r2, #34	@ 0x22
 8009206:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009208:	4b02      	ldr	r3, [pc, #8]	@ (8009214 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	240001f8 	.word	0x240001f8

08009218 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	32b0      	adds	r2, #176	@ 0xb0
 800922e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009232:	2200      	movs	r2, #0
 8009234:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	220a      	movs	r2, #10
 8009250:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8009252:	4b03      	ldr	r3, [pc, #12]	@ (8009260 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	24000228 	.word	0x24000228

08009264 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	4613      	mov	r3, r2
 8009270:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009278:	2303      	movs	r3, #3
 800927a:	e01f      	b.n	80092bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	79fa      	ldrb	r2, [r7, #7]
 80092ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f001 fde1 	bl	800ae78 <USBD_LL_Init>
 80092b6:	4603      	mov	r3, r0
 80092b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092d8:	2303      	movs	r3, #3
 80092da:	e025      	b.n	8009328 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	32ae      	adds	r2, #174	@ 0xae
 80092ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00f      	beq.n	8009318 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	32ae      	adds	r2, #174	@ 0xae
 8009302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	f107 020e 	add.w	r2, r7, #14
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	4602      	mov	r2, r0
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 fdef 	bl	800af1c <USBD_LL_Start>
 800933e:	4603      	mov	r3, r0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009350:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009374:	2b00      	cmp	r3, #0
 8009376:	d009      	beq.n	800938c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	78fa      	ldrb	r2, [r7, #3]
 8009382:	4611      	mov	r1, r2
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	4798      	blx	r3
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	78fa      	ldrb	r2, [r7, #3]
 80093b0:	4611      	mov	r1, r2
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	4798      	blx	r3
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80093bc:	2303      	movs	r3, #3
 80093be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	4618      	mov	r0, r3
 80093de:	f001 f936 	bl	800a64e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80093f0:	461a      	mov	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80093fe:	f003 031f 	and.w	r3, r3, #31
 8009402:	2b02      	cmp	r3, #2
 8009404:	d01a      	beq.n	800943c <USBD_LL_SetupStage+0x72>
 8009406:	2b02      	cmp	r3, #2
 8009408:	d822      	bhi.n	8009450 <USBD_LL_SetupStage+0x86>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <USBD_LL_SetupStage+0x4a>
 800940e:	2b01      	cmp	r3, #1
 8009410:	d00a      	beq.n	8009428 <USBD_LL_SetupStage+0x5e>
 8009412:	e01d      	b.n	8009450 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fb63 	bl	8009ae8 <USBD_StdDevReq>
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]
      break;
 8009426:	e020      	b.n	800946a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fbcb 	bl	8009bcc <USBD_StdItfReq>
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]
      break;
 800943a:	e016      	b.n	800946a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fc2d 	bl	8009ca4 <USBD_StdEPReq>
 800944a:	4603      	mov	r3, r0
 800944c:	73fb      	strb	r3, [r7, #15]
      break;
 800944e:	e00c      	b.n	800946a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009456:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800945a:	b2db      	uxtb	r3, r3
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f001 fdbc 	bl	800afdc <USBD_LL_StallEP>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
      break;
 8009468:	bf00      	nop
  }

  return ret;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	460b      	mov	r3, r1
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009486:	7afb      	ldrb	r3, [r7, #11]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d16e      	bne.n	800956a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009492:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800949a:	2b03      	cmp	r3, #3
 800949c:	f040 8098 	bne.w	80095d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d913      	bls.n	80094d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bf28      	it	cs
 80094c6:	4613      	movcs	r3, r2
 80094c8:	461a      	mov	r2, r3
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f001 f9a1 	bl	800a814 <USBD_CtlContinueRx>
 80094d2:	e07d      	b.n	80095d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094da:	f003 031f 	and.w	r3, r3, #31
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d014      	beq.n	800950c <USBD_LL_DataOutStage+0x98>
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d81d      	bhi.n	8009522 <USBD_LL_DataOutStage+0xae>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <USBD_LL_DataOutStage+0x7c>
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d003      	beq.n	80094f6 <USBD_LL_DataOutStage+0x82>
 80094ee:	e018      	b.n	8009522 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	75bb      	strb	r3, [r7, #22]
            break;
 80094f4:	e018      	b.n	8009528 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	4619      	mov	r1, r3
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fa64 	bl	80099ce <USBD_CoreFindIF>
 8009506:	4603      	mov	r3, r0
 8009508:	75bb      	strb	r3, [r7, #22]
            break;
 800950a:	e00d      	b.n	8009528 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009512:	b2db      	uxtb	r3, r3
 8009514:	4619      	mov	r1, r3
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f000 fa66 	bl	80099e8 <USBD_CoreFindEP>
 800951c:	4603      	mov	r3, r0
 800951e:	75bb      	strb	r3, [r7, #22]
            break;
 8009520:	e002      	b.n	8009528 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	75bb      	strb	r3, [r7, #22]
            break;
 8009526:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009528:	7dbb      	ldrb	r3, [r7, #22]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d119      	bne.n	8009562 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b03      	cmp	r3, #3
 8009538:	d113      	bne.n	8009562 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800953a:	7dba      	ldrb	r2, [r7, #22]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	32ae      	adds	r2, #174	@ 0xae
 8009540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00b      	beq.n	8009562 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800954a:	7dba      	ldrb	r2, [r7, #22]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009552:	7dba      	ldrb	r2, [r7, #22]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	32ae      	adds	r2, #174	@ 0xae
 8009558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f001 f967 	bl	800a836 <USBD_CtlSendStatus>
 8009568:	e032      	b.n	80095d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800956a:	7afb      	ldrb	r3, [r7, #11]
 800956c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009570:	b2db      	uxtb	r3, r3
 8009572:	4619      	mov	r1, r3
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 fa37 	bl	80099e8 <USBD_CoreFindEP>
 800957a:	4603      	mov	r3, r0
 800957c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800957e:	7dbb      	ldrb	r3, [r7, #22]
 8009580:	2bff      	cmp	r3, #255	@ 0xff
 8009582:	d025      	beq.n	80095d0 <USBD_LL_DataOutStage+0x15c>
 8009584:	7dbb      	ldrb	r3, [r7, #22]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d122      	bne.n	80095d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b03      	cmp	r3, #3
 8009594:	d117      	bne.n	80095c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009596:	7dba      	ldrb	r2, [r7, #22]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	32ae      	adds	r2, #174	@ 0xae
 800959c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00f      	beq.n	80095c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80095a6:	7dba      	ldrb	r2, [r7, #22]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80095ae:	7dba      	ldrb	r2, [r7, #22]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	32ae      	adds	r2, #174	@ 0xae
 80095b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	7afa      	ldrb	r2, [r7, #11]
 80095bc:	4611      	mov	r1, r2
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	4798      	blx	r3
 80095c2:	4603      	mov	r3, r0
 80095c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	e000      	b.n	80095d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b086      	sub	sp, #24
 80095de:	af00      	add	r7, sp, #0
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	460b      	mov	r3, r1
 80095e4:	607a      	str	r2, [r7, #4]
 80095e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095e8:	7afb      	ldrb	r3, [r7, #11]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d16f      	bne.n	80096ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3314      	adds	r3, #20
 80095f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d15a      	bne.n	80096b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	429a      	cmp	r2, r3
 8009608:	d914      	bls.n	8009634 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	1ad2      	subs	r2, r2, r3
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	461a      	mov	r2, r3
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f001 f8e6 	bl	800a7f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009626:	2300      	movs	r3, #0
 8009628:	2200      	movs	r2, #0
 800962a:	2100      	movs	r1, #0
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f001 fd7f 	bl	800b130 <USBD_LL_PrepareReceive>
 8009632:	e03f      	b.n	80096b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	429a      	cmp	r2, r3
 800963e:	d11c      	bne.n	800967a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009648:	429a      	cmp	r2, r3
 800964a:	d316      	bcc.n	800967a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009656:	429a      	cmp	r2, r3
 8009658:	d20f      	bcs.n	800967a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800965a:	2200      	movs	r2, #0
 800965c:	2100      	movs	r1, #0
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f001 f8c7 	bl	800a7f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800966c:	2300      	movs	r3, #0
 800966e:	2200      	movs	r2, #0
 8009670:	2100      	movs	r1, #0
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f001 fd5c 	bl	800b130 <USBD_LL_PrepareReceive>
 8009678:	e01c      	b.n	80096b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b03      	cmp	r3, #3
 8009684:	d10f      	bne.n	80096a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d009      	beq.n	80096a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096a6:	2180      	movs	r1, #128	@ 0x80
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f001 fc97 	bl	800afdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f001 f8d4 	bl	800a85c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d03a      	beq.n	8009734 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff fe42 	bl	8009348 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80096cc:	e032      	b.n	8009734 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096ce:	7afb      	ldrb	r3, [r7, #11]
 80096d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	4619      	mov	r1, r3
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 f985 	bl	80099e8 <USBD_CoreFindEP>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2bff      	cmp	r3, #255	@ 0xff
 80096e6:	d025      	beq.n	8009734 <USBD_LL_DataInStage+0x15a>
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d122      	bne.n	8009734 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d11c      	bne.n	8009734 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80096fa:	7dfa      	ldrb	r2, [r7, #23]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	32ae      	adds	r2, #174	@ 0xae
 8009700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d014      	beq.n	8009734 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800970a:	7dfa      	ldrb	r2, [r7, #23]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009712:	7dfa      	ldrb	r2, [r7, #23]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	32ae      	adds	r2, #174	@ 0xae
 8009718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	7afa      	ldrb	r2, [r7, #11]
 8009720:	4611      	mov	r1, r2
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	4798      	blx	r3
 8009726:	4603      	mov	r3, r0
 8009728:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800972a:	7dbb      	ldrb	r3, [r7, #22]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009730:	7dbb      	ldrb	r3, [r7, #22]
 8009732:	e000      	b.n	8009736 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009776:	2b00      	cmp	r3, #0
 8009778:	d014      	beq.n	80097a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00e      	beq.n	80097a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6852      	ldr	r2, [r2, #4]
 8009792:	b2d2      	uxtb	r2, r2
 8009794:	4611      	mov	r1, r2
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80097a0:	2303      	movs	r3, #3
 80097a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097a4:	2340      	movs	r3, #64	@ 0x40
 80097a6:	2200      	movs	r2, #0
 80097a8:	2100      	movs	r1, #0
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 fbd1 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2240      	movs	r2, #64	@ 0x40
 80097bc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097c0:	2340      	movs	r3, #64	@ 0x40
 80097c2:	2200      	movs	r2, #0
 80097c4:	2180      	movs	r1, #128	@ 0x80
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f001 fbc3 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2240      	movs	r2, #64	@ 0x40
 80097d6:	621a      	str	r2, [r3, #32]

  return ret;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b083      	sub	sp, #12
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	460b      	mov	r3, r1
 80097ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b04      	cmp	r3, #4
 8009814:	d006      	beq.n	8009824 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800981c:	b2da      	uxtb	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2204      	movs	r2, #4
 8009828:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b04      	cmp	r3, #4
 800984c:	d106      	bne.n	800985c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009854:	b2da      	uxtb	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b03      	cmp	r3, #3
 800987c:	d110      	bne.n	80098a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	32ae      	adds	r2, #174	@ 0xae
 80098c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e01c      	b.n	8009906 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	d115      	bne.n	8009904 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	32ae      	adds	r2, #174	@ 0xae
 80098e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e6:	6a1b      	ldr	r3, [r3, #32]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00b      	beq.n	8009904 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	@ 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	78fa      	ldrb	r2, [r7, #3]
 80098fe:	4611      	mov	r1, r2
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	32ae      	adds	r2, #174	@ 0xae
 8009924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800992c:	2303      	movs	r3, #3
 800992e:	e01c      	b.n	800996a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b03      	cmp	r3, #3
 800993a:	d115      	bne.n	8009968 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	32ae      	adds	r2, #174	@ 0xae
 8009946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00b      	beq.n	8009968 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	32ae      	adds	r2, #174	@ 0xae
 800995a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009960:	78fa      	ldrb	r2, [r7, #3]
 8009962:	4611      	mov	r1, r2
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00e      	beq.n	80099c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6852      	ldr	r2, [r2, #4]
 80099b2:	b2d2      	uxtb	r2, r2
 80099b4:	4611      	mov	r1, r2
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	4798      	blx	r3
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80099c0:	2303      	movs	r3, #3
 80099c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	460b      	mov	r3, r1
 80099d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099dc:	4618      	mov	r0, r3
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b086      	sub	sp, #24
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	885b      	ldrh	r3, [r3, #2]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	7812      	ldrb	r2, [r2, #0]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d91f      	bls.n	8009a68 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a2e:	e013      	b.n	8009a58 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a30:	f107 030a 	add.w	r3, r7, #10
 8009a34:	4619      	mov	r1, r3
 8009a36:	6978      	ldr	r0, [r7, #20]
 8009a38:	f000 f81b 	bl	8009a72 <USBD_GetNextDesc>
 8009a3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	785b      	ldrb	r3, [r3, #1]
 8009a42:	2b05      	cmp	r3, #5
 8009a44:	d108      	bne.n	8009a58 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	789b      	ldrb	r3, [r3, #2]
 8009a4e:	78fa      	ldrb	r2, [r7, #3]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d008      	beq.n	8009a66 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a54:	2300      	movs	r3, #0
 8009a56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	885b      	ldrh	r3, [r3, #2]
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	897b      	ldrh	r3, [r7, #10]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d8e5      	bhi.n	8009a30 <USBD_GetEpDesc+0x2e>
 8009a64:	e000      	b.n	8009a68 <USBD_GetEpDesc+0x66>
          break;
 8009a66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a68:	693b      	ldr	r3, [r7, #16]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b085      	sub	sp, #20
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	7812      	ldrb	r2, [r2, #0]
 8009a88:	4413      	add	r3, r2
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	461a      	mov	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4413      	add	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b087      	sub	sp, #28
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ac8:	8a3b      	ldrh	r3, [r7, #16]
 8009aca:	021b      	lsls	r3, r3, #8
 8009acc:	b21a      	sxth	r2, r3
 8009ace:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	b21b      	sxth	r3, r3
 8009ad6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
	...

08009ae8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009afe:	2b40      	cmp	r3, #64	@ 0x40
 8009b00:	d005      	beq.n	8009b0e <USBD_StdDevReq+0x26>
 8009b02:	2b40      	cmp	r3, #64	@ 0x40
 8009b04:	d857      	bhi.n	8009bb6 <USBD_StdDevReq+0xce>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00f      	beq.n	8009b2a <USBD_StdDevReq+0x42>
 8009b0a:	2b20      	cmp	r3, #32
 8009b0c:	d153      	bne.n	8009bb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	32ae      	adds	r2, #174	@ 0xae
 8009b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	4798      	blx	r3
 8009b24:	4603      	mov	r3, r0
 8009b26:	73fb      	strb	r3, [r7, #15]
      break;
 8009b28:	e04a      	b.n	8009bc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	785b      	ldrb	r3, [r3, #1]
 8009b2e:	2b09      	cmp	r3, #9
 8009b30:	d83b      	bhi.n	8009baa <USBD_StdDevReq+0xc2>
 8009b32:	a201      	add	r2, pc, #4	@ (adr r2, 8009b38 <USBD_StdDevReq+0x50>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b8d 	.word	0x08009b8d
 8009b3c:	08009ba1 	.word	0x08009ba1
 8009b40:	08009bab 	.word	0x08009bab
 8009b44:	08009b97 	.word	0x08009b97
 8009b48:	08009bab 	.word	0x08009bab
 8009b4c:	08009b6b 	.word	0x08009b6b
 8009b50:	08009b61 	.word	0x08009b61
 8009b54:	08009bab 	.word	0x08009bab
 8009b58:	08009b83 	.word	0x08009b83
 8009b5c:	08009b75 	.word	0x08009b75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa3c 	bl	8009fe0 <USBD_GetDescriptor>
          break;
 8009b68:	e024      	b.n	8009bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fbcb 	bl	800a308 <USBD_SetAddress>
          break;
 8009b72:	e01f      	b.n	8009bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fc0a 	bl	800a390 <USBD_SetConfig>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8009b80:	e018      	b.n	8009bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fcad 	bl	800a4e4 <USBD_GetConfig>
          break;
 8009b8a:	e013      	b.n	8009bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fcde 	bl	800a550 <USBD_GetStatus>
          break;
 8009b94:	e00e      	b.n	8009bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fd0d 	bl	800a5b8 <USBD_SetFeature>
          break;
 8009b9e:	e009      	b.n	8009bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fd31 	bl	800a60a <USBD_ClrFeature>
          break;
 8009ba8:	e004      	b.n	8009bb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fd88 	bl	800a6c2 <USBD_CtlError>
          break;
 8009bb2:	bf00      	nop
      }
      break;
 8009bb4:	e004      	b.n	8009bc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fd82 	bl	800a6c2 <USBD_CtlError>
      break;
 8009bbe:	bf00      	nop
  }

  return ret;
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop

08009bcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009be2:	2b40      	cmp	r3, #64	@ 0x40
 8009be4:	d005      	beq.n	8009bf2 <USBD_StdItfReq+0x26>
 8009be6:	2b40      	cmp	r3, #64	@ 0x40
 8009be8:	d852      	bhi.n	8009c90 <USBD_StdItfReq+0xc4>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <USBD_StdItfReq+0x26>
 8009bee:	2b20      	cmp	r3, #32
 8009bf0:	d14e      	bne.n	8009c90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d840      	bhi.n	8009c82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	889b      	ldrh	r3, [r3, #4]
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d836      	bhi.n	8009c78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	889b      	ldrh	r3, [r3, #4]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff fedb 	bl	80099ce <USBD_CoreFindIF>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	2bff      	cmp	r3, #255	@ 0xff
 8009c20:	d01d      	beq.n	8009c5e <USBD_StdItfReq+0x92>
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d11a      	bne.n	8009c5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c28:	7bba      	ldrb	r2, [r7, #14]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	32ae      	adds	r2, #174	@ 0xae
 8009c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00f      	beq.n	8009c58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c38:	7bba      	ldrb	r2, [r7, #14]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c40:	7bba      	ldrb	r2, [r7, #14]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	32ae      	adds	r2, #174	@ 0xae
 8009c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
 8009c52:	4603      	mov	r3, r0
 8009c54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c56:	e004      	b.n	8009c62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c5c:	e001      	b.n	8009c62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	88db      	ldrh	r3, [r3, #6]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d110      	bne.n	8009c8c <USBD_StdItfReq+0xc0>
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10d      	bne.n	8009c8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fde0 	bl	800a836 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c76:	e009      	b.n	8009c8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fd21 	bl	800a6c2 <USBD_CtlError>
          break;
 8009c80:	e004      	b.n	8009c8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fd1c 	bl	800a6c2 <USBD_CtlError>
          break;
 8009c8a:	e000      	b.n	8009c8e <USBD_StdItfReq+0xc2>
          break;
 8009c8c:	bf00      	nop
      }
      break;
 8009c8e:	e004      	b.n	8009c9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fd15 	bl	800a6c2 <USBD_CtlError>
      break;
 8009c98:	bf00      	nop
  }

  return ret;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	889b      	ldrh	r3, [r3, #4]
 8009cb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cc0:	2b40      	cmp	r3, #64	@ 0x40
 8009cc2:	d007      	beq.n	8009cd4 <USBD_StdEPReq+0x30>
 8009cc4:	2b40      	cmp	r3, #64	@ 0x40
 8009cc6:	f200 817f 	bhi.w	8009fc8 <USBD_StdEPReq+0x324>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d02a      	beq.n	8009d24 <USBD_StdEPReq+0x80>
 8009cce:	2b20      	cmp	r3, #32
 8009cd0:	f040 817a 	bne.w	8009fc8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff fe85 	bl	80099e8 <USBD_CoreFindEP>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ce2:	7b7b      	ldrb	r3, [r7, #13]
 8009ce4:	2bff      	cmp	r3, #255	@ 0xff
 8009ce6:	f000 8174 	beq.w	8009fd2 <USBD_StdEPReq+0x32e>
 8009cea:	7b7b      	ldrb	r3, [r7, #13]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f040 8170 	bne.w	8009fd2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009cf2:	7b7a      	ldrb	r2, [r7, #13]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009cfa:	7b7a      	ldrb	r2, [r7, #13]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	32ae      	adds	r2, #174	@ 0xae
 8009d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 8163 	beq.w	8009fd2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d0c:	7b7a      	ldrb	r2, [r7, #13]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	32ae      	adds	r2, #174	@ 0xae
 8009d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	4798      	blx	r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d22:	e156      	b.n	8009fd2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	785b      	ldrb	r3, [r3, #1]
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d008      	beq.n	8009d3e <USBD_StdEPReq+0x9a>
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	f300 8145 	bgt.w	8009fbc <USBD_StdEPReq+0x318>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 809b 	beq.w	8009e6e <USBD_StdEPReq+0x1ca>
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d03c      	beq.n	8009db6 <USBD_StdEPReq+0x112>
 8009d3c:	e13e      	b.n	8009fbc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d002      	beq.n	8009d50 <USBD_StdEPReq+0xac>
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d016      	beq.n	8009d7c <USBD_StdEPReq+0xd8>
 8009d4e:	e02c      	b.n	8009daa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d50:	7bbb      	ldrb	r3, [r7, #14]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00d      	beq.n	8009d72 <USBD_StdEPReq+0xce>
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
 8009d58:	2b80      	cmp	r3, #128	@ 0x80
 8009d5a:	d00a      	beq.n	8009d72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 f93b 	bl	800afdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d66:	2180      	movs	r1, #128	@ 0x80
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 f937 	bl	800afdc <USBD_LL_StallEP>
 8009d6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d70:	e020      	b.n	8009db4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fca4 	bl	800a6c2 <USBD_CtlError>
              break;
 8009d7a:	e01b      	b.n	8009db4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	885b      	ldrh	r3, [r3, #2]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10e      	bne.n	8009da2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00b      	beq.n	8009da2 <USBD_StdEPReq+0xfe>
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	2b80      	cmp	r3, #128	@ 0x80
 8009d8e:	d008      	beq.n	8009da2 <USBD_StdEPReq+0xfe>
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	88db      	ldrh	r3, [r3, #6]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 f91d 	bl	800afdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fd47 	bl	800a836 <USBD_CtlSendStatus>

              break;
 8009da8:	e004      	b.n	8009db4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fc88 	bl	800a6c2 <USBD_CtlError>
              break;
 8009db2:	bf00      	nop
          }
          break;
 8009db4:	e107      	b.n	8009fc6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d002      	beq.n	8009dc8 <USBD_StdEPReq+0x124>
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d016      	beq.n	8009df4 <USBD_StdEPReq+0x150>
 8009dc6:	e04b      	b.n	8009e60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00d      	beq.n	8009dea <USBD_StdEPReq+0x146>
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b80      	cmp	r3, #128	@ 0x80
 8009dd2:	d00a      	beq.n	8009dea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 f8ff 	bl	800afdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dde:	2180      	movs	r1, #128	@ 0x80
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 f8fb 	bl	800afdc <USBD_LL_StallEP>
 8009de6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009de8:	e040      	b.n	8009e6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fc68 	bl	800a6c2 <USBD_CtlError>
              break;
 8009df2:	e03b      	b.n	8009e6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	885b      	ldrh	r3, [r3, #2]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d136      	bne.n	8009e6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d004      	beq.n	8009e10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 f905 	bl	800b01a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fd10 	bl	800a836 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7ff fde4 	bl	80099e8 <USBD_CoreFindEP>
 8009e20:	4603      	mov	r3, r0
 8009e22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e24:	7b7b      	ldrb	r3, [r7, #13]
 8009e26:	2bff      	cmp	r3, #255	@ 0xff
 8009e28:	d01f      	beq.n	8009e6a <USBD_StdEPReq+0x1c6>
 8009e2a:	7b7b      	ldrb	r3, [r7, #13]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d11c      	bne.n	8009e6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e30:	7b7a      	ldrb	r2, [r7, #13]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e38:	7b7a      	ldrb	r2, [r7, #13]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	32ae      	adds	r2, #174	@ 0xae
 8009e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d010      	beq.n	8009e6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e48:	7b7a      	ldrb	r2, [r7, #13]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	32ae      	adds	r2, #174	@ 0xae
 8009e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	4798      	blx	r3
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e5e:	e004      	b.n	8009e6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fc2d 	bl	800a6c2 <USBD_CtlError>
              break;
 8009e68:	e000      	b.n	8009e6c <USBD_StdEPReq+0x1c8>
              break;
 8009e6a:	bf00      	nop
          }
          break;
 8009e6c:	e0ab      	b.n	8009fc6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d002      	beq.n	8009e80 <USBD_StdEPReq+0x1dc>
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d032      	beq.n	8009ee4 <USBD_StdEPReq+0x240>
 8009e7e:	e097      	b.n	8009fb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d007      	beq.n	8009e96 <USBD_StdEPReq+0x1f2>
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	2b80      	cmp	r3, #128	@ 0x80
 8009e8a:	d004      	beq.n	8009e96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fc17 	bl	800a6c2 <USBD_CtlError>
                break;
 8009e94:	e091      	b.n	8009fba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	da0b      	bge.n	8009eb6 <USBD_StdEPReq+0x212>
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	3310      	adds	r3, #16
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	e00b      	b.n	8009ece <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	4413      	add	r3, r2
 8009ecc:	3304      	adds	r3, #4
 8009ece:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fc6d 	bl	800a7bc <USBD_CtlSendData>
              break;
 8009ee2:	e06a      	b.n	8009fba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	da11      	bge.n	8009f10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	f003 020f 	and.w	r2, r3, #15
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	3324      	adds	r3, #36	@ 0x24
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d117      	bne.n	8009f36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fbda 	bl	800a6c2 <USBD_CtlError>
                  break;
 8009f0e:	e054      	b.n	8009fba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
 8009f12:	f003 020f 	and.w	r2, r3, #15
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	440b      	add	r3, r1
 8009f22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d104      	bne.n	8009f36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fbc7 	bl	800a6c2 <USBD_CtlError>
                  break;
 8009f34:	e041      	b.n	8009fba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	da0b      	bge.n	8009f56 <USBD_StdEPReq+0x2b2>
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	3310      	adds	r3, #16
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	4413      	add	r3, r2
 8009f52:	3304      	adds	r3, #4
 8009f54:	e00b      	b.n	8009f6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
 8009f58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d002      	beq.n	8009f7c <USBD_StdEPReq+0x2d8>
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	2b80      	cmp	r3, #128	@ 0x80
 8009f7a:	d103      	bne.n	8009f84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]
 8009f82:	e00e      	b.n	8009fa2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f84:	7bbb      	ldrb	r3, [r7, #14]
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f001 f865 	bl	800b058 <USBD_LL_IsStallEP>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2201      	movs	r2, #1
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e002      	b.n	8009fa2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2202      	movs	r2, #2
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fc07 	bl	800a7bc <USBD_CtlSendData>
              break;
 8009fae:	e004      	b.n	8009fba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fb85 	bl	800a6c2 <USBD_CtlError>
              break;
 8009fb8:	bf00      	nop
          }
          break;
 8009fba:	e004      	b.n	8009fc6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fb7f 	bl	800a6c2 <USBD_CtlError>
          break;
 8009fc4:	bf00      	nop
      }
      break;
 8009fc6:	e005      	b.n	8009fd4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fb79 	bl	800a6c2 <USBD_CtlError>
      break;
 8009fd0:	e000      	b.n	8009fd4 <USBD_StdEPReq+0x330>
      break;
 8009fd2:	bf00      	nop
  }

  return ret;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fea:	2300      	movs	r3, #0
 8009fec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	885b      	ldrh	r3, [r3, #2]
 8009ffa:	0a1b      	lsrs	r3, r3, #8
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	2b0e      	cmp	r3, #14
 800a002:	f200 8152 	bhi.w	800a2aa <USBD_GetDescriptor+0x2ca>
 800a006:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <USBD_GetDescriptor+0x2c>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a07d 	.word	0x0800a07d
 800a010:	0800a095 	.word	0x0800a095
 800a014:	0800a0d5 	.word	0x0800a0d5
 800a018:	0800a2ab 	.word	0x0800a2ab
 800a01c:	0800a2ab 	.word	0x0800a2ab
 800a020:	0800a24b 	.word	0x0800a24b
 800a024:	0800a277 	.word	0x0800a277
 800a028:	0800a2ab 	.word	0x0800a2ab
 800a02c:	0800a2ab 	.word	0x0800a2ab
 800a030:	0800a2ab 	.word	0x0800a2ab
 800a034:	0800a2ab 	.word	0x0800a2ab
 800a038:	0800a2ab 	.word	0x0800a2ab
 800a03c:	0800a2ab 	.word	0x0800a2ab
 800a040:	0800a2ab 	.word	0x0800a2ab
 800a044:	0800a049 	.word	0x0800a049
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a05a:	69db      	ldr	r3, [r3, #28]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	7c12      	ldrb	r2, [r2, #16]
 800a060:	f107 0108 	add.w	r1, r7, #8
 800a064:	4610      	mov	r0, r2
 800a066:	4798      	blx	r3
 800a068:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a06a:	e126      	b.n	800a2ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fb27 	bl	800a6c2 <USBD_CtlError>
        err++;
 800a074:	7afb      	ldrb	r3, [r7, #11]
 800a076:	3301      	adds	r3, #1
 800a078:	72fb      	strb	r3, [r7, #11]
      break;
 800a07a:	e11e      	b.n	800a2ba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	7c12      	ldrb	r2, [r2, #16]
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	4610      	mov	r0, r2
 800a08e:	4798      	blx	r3
 800a090:	60f8      	str	r0, [r7, #12]
      break;
 800a092:	e112      	b.n	800a2ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	7c1b      	ldrb	r3, [r3, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10d      	bne.n	800a0b8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a4:	f107 0208 	add.w	r2, r7, #8
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0b6:	e100      	b.n	800a2ba <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c0:	f107 0208 	add.w	r2, r7, #8
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	4798      	blx	r3
 800a0c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	701a      	strb	r2, [r3, #0]
      break;
 800a0d2:	e0f2      	b.n	800a2ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	885b      	ldrh	r3, [r3, #2]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	2b05      	cmp	r3, #5
 800a0dc:	f200 80ac 	bhi.w	800a238 <USBD_GetDescriptor+0x258>
 800a0e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e8 <USBD_GetDescriptor+0x108>)
 800a0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e6:	bf00      	nop
 800a0e8:	0800a101 	.word	0x0800a101
 800a0ec:	0800a135 	.word	0x0800a135
 800a0f0:	0800a169 	.word	0x0800a169
 800a0f4:	0800a19d 	.word	0x0800a19d
 800a0f8:	0800a1d1 	.word	0x0800a1d1
 800a0fc:	0800a205 	.word	0x0800a205
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00b      	beq.n	800a124 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	7c12      	ldrb	r2, [r2, #16]
 800a118:	f107 0108 	add.w	r1, r7, #8
 800a11c:	4610      	mov	r0, r2
 800a11e:	4798      	blx	r3
 800a120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a122:	e091      	b.n	800a248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 facb 	bl	800a6c2 <USBD_CtlError>
            err++;
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	3301      	adds	r3, #1
 800a130:	72fb      	strb	r3, [r7, #11]
          break;
 800a132:	e089      	b.n	800a248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00b      	beq.n	800a158 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	7c12      	ldrb	r2, [r2, #16]
 800a14c:	f107 0108 	add.w	r1, r7, #8
 800a150:	4610      	mov	r0, r2
 800a152:	4798      	blx	r3
 800a154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a156:	e077      	b.n	800a248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fab1 	bl	800a6c2 <USBD_CtlError>
            err++;
 800a160:	7afb      	ldrb	r3, [r7, #11]
 800a162:	3301      	adds	r3, #1
 800a164:	72fb      	strb	r3, [r7, #11]
          break;
 800a166:	e06f      	b.n	800a248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	7c12      	ldrb	r2, [r2, #16]
 800a180:	f107 0108 	add.w	r1, r7, #8
 800a184:	4610      	mov	r0, r2
 800a186:	4798      	blx	r3
 800a188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a18a:	e05d      	b.n	800a248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fa97 	bl	800a6c2 <USBD_CtlError>
            err++;
 800a194:	7afb      	ldrb	r3, [r7, #11]
 800a196:	3301      	adds	r3, #1
 800a198:	72fb      	strb	r3, [r7, #11]
          break;
 800a19a:	e055      	b.n	800a248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00b      	beq.n	800a1c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	7c12      	ldrb	r2, [r2, #16]
 800a1b4:	f107 0108 	add.w	r1, r7, #8
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	4798      	blx	r3
 800a1bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1be:	e043      	b.n	800a248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fa7d 	bl	800a6c2 <USBD_CtlError>
            err++;
 800a1c8:	7afb      	ldrb	r3, [r7, #11]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ce:	e03b      	b.n	800a248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00b      	beq.n	800a1f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	7c12      	ldrb	r2, [r2, #16]
 800a1e8:	f107 0108 	add.w	r1, r7, #8
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4798      	blx	r3
 800a1f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1f2:	e029      	b.n	800a248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fa63 	bl	800a6c2 <USBD_CtlError>
            err++;
 800a1fc:	7afb      	ldrb	r3, [r7, #11]
 800a1fe:	3301      	adds	r3, #1
 800a200:	72fb      	strb	r3, [r7, #11]
          break;
 800a202:	e021      	b.n	800a248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00b      	beq.n	800a228 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	7c12      	ldrb	r2, [r2, #16]
 800a21c:	f107 0108 	add.w	r1, r7, #8
 800a220:	4610      	mov	r0, r2
 800a222:	4798      	blx	r3
 800a224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a226:	e00f      	b.n	800a248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fa49 	bl	800a6c2 <USBD_CtlError>
            err++;
 800a230:	7afb      	ldrb	r3, [r7, #11]
 800a232:	3301      	adds	r3, #1
 800a234:	72fb      	strb	r3, [r7, #11]
          break;
 800a236:	e007      	b.n	800a248 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fa41 	bl	800a6c2 <USBD_CtlError>
          err++;
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	3301      	adds	r3, #1
 800a244:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a246:	bf00      	nop
      }
      break;
 800a248:	e037      	b.n	800a2ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	7c1b      	ldrb	r3, [r3, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d109      	bne.n	800a266 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a25a:	f107 0208 	add.w	r2, r7, #8
 800a25e:	4610      	mov	r0, r2
 800a260:	4798      	blx	r3
 800a262:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a264:	e029      	b.n	800a2ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fa2a 	bl	800a6c2 <USBD_CtlError>
        err++;
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	3301      	adds	r3, #1
 800a272:	72fb      	strb	r3, [r7, #11]
      break;
 800a274:	e021      	b.n	800a2ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	7c1b      	ldrb	r3, [r3, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10d      	bne.n	800a29a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a286:	f107 0208 	add.w	r2, r7, #8
 800a28a:	4610      	mov	r0, r2
 800a28c:	4798      	blx	r3
 800a28e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3301      	adds	r3, #1
 800a294:	2207      	movs	r2, #7
 800a296:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a298:	e00f      	b.n	800a2ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fa10 	bl	800a6c2 <USBD_CtlError>
        err++;
 800a2a2:	7afb      	ldrb	r3, [r7, #11]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2a8:	e007      	b.n	800a2ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fa08 	bl	800a6c2 <USBD_CtlError>
      err++;
 800a2b2:	7afb      	ldrb	r3, [r7, #11]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2b8:	bf00      	nop
  }

  if (err != 0U)
 800a2ba:	7afb      	ldrb	r3, [r7, #11]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d11e      	bne.n	800a2fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	88db      	ldrh	r3, [r3, #6]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d016      	beq.n	800a2f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a2c8:	893b      	ldrh	r3, [r7, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00e      	beq.n	800a2ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	88da      	ldrh	r2, [r3, #6]
 800a2d2:	893b      	ldrh	r3, [r7, #8]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	bf28      	it	cs
 800a2d8:	4613      	movcs	r3, r2
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2de:	893b      	ldrh	r3, [r7, #8]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	68f9      	ldr	r1, [r7, #12]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fa69 	bl	800a7bc <USBD_CtlSendData>
 800a2ea:	e009      	b.n	800a300 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f9e7 	bl	800a6c2 <USBD_CtlError>
 800a2f4:	e004      	b.n	800a300 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fa9d 	bl	800a836 <USBD_CtlSendStatus>
 800a2fc:	e000      	b.n	800a300 <USBD_GetDescriptor+0x320>
    return;
 800a2fe:	bf00      	nop
  }
}
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop

0800a308 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	889b      	ldrh	r3, [r3, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d131      	bne.n	800a37e <USBD_SetAddress+0x76>
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	88db      	ldrh	r3, [r3, #6]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d12d      	bne.n	800a37e <USBD_SetAddress+0x76>
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	885b      	ldrh	r3, [r3, #2]
 800a326:	2b7f      	cmp	r3, #127	@ 0x7f
 800a328:	d829      	bhi.n	800a37e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	885b      	ldrh	r3, [r3, #2]
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a334:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d104      	bne.n	800a34c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f9bc 	bl	800a6c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34a:	e01d      	b.n	800a388 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	7bfa      	ldrb	r2, [r7, #15]
 800a350:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a354:	7bfb      	ldrb	r3, [r7, #15]
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fea9 	bl	800b0b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa69 	bl	800a836 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d004      	beq.n	800a374 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2202      	movs	r2, #2
 800a36e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a372:	e009      	b.n	800a388 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a37c:	e004      	b.n	800a388 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f99e 	bl	800a6c2 <USBD_CtlError>
  }
}
 800a386:	bf00      	nop
 800a388:	bf00      	nop
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	885b      	ldrh	r3, [r3, #2]
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	4b4e      	ldr	r3, [pc, #312]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a3a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3a8:	4b4d      	ldr	r3, [pc, #308]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d905      	bls.n	800a3bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f985 	bl	800a6c2 <USBD_CtlError>
    return USBD_FAIL;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e08c      	b.n	800a4d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d002      	beq.n	800a3ce <USBD_SetConfig+0x3e>
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d029      	beq.n	800a420 <USBD_SetConfig+0x90>
 800a3cc:	e075      	b.n	800a4ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a3ce:	4b44      	ldr	r3, [pc, #272]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d020      	beq.n	800a418 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a3d6:	4b42      	ldr	r3, [pc, #264]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3e0:	4b3f      	ldr	r3, [pc, #252]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7fe ffb9 	bl	800935e <USBD_SetClassConfig>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d008      	beq.n	800a408 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f962 	bl	800a6c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2202      	movs	r2, #2
 800a402:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a406:	e065      	b.n	800a4d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fa14 	bl	800a836 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2203      	movs	r2, #3
 800a412:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a416:	e05d      	b.n	800a4d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fa0c 	bl	800a836 <USBD_CtlSendStatus>
      break;
 800a41e:	e059      	b.n	800a4d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a420:	4b2f      	ldr	r3, [pc, #188]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d112      	bne.n	800a44e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a430:	4b2b      	ldr	r3, [pc, #172]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a43a:	4b29      	ldr	r3, [pc, #164]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7fe ffa8 	bl	8009396 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f9f5 	bl	800a836 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a44c:	e042      	b.n	800a4d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a44e:	4b24      	ldr	r3, [pc, #144]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d02a      	beq.n	800a4b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	b2db      	uxtb	r3, r3
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7fe ff96 	bl	8009396 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a46a:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a474:	4b1a      	ldr	r3, [pc, #104]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7fe ff6f 	bl	800935e <USBD_SetClassConfig>
 800a480:	4603      	mov	r3, r0
 800a482:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00f      	beq.n	800a4aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f918 	bl	800a6c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	b2db      	uxtb	r3, r3
 800a498:	4619      	mov	r1, r3
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7fe ff7b 	bl	8009396 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4a8:	e014      	b.n	800a4d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f9c3 	bl	800a836 <USBD_CtlSendStatus>
      break;
 800a4b0:	e010      	b.n	800a4d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f9bf 	bl	800a836 <USBD_CtlSendStatus>
      break;
 800a4b8:	e00c      	b.n	800a4d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f900 	bl	800a6c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4c2:	4b07      	ldr	r3, [pc, #28]	@ (800a4e0 <USBD_SetConfig+0x150>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7fe ff64 	bl	8009396 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d2:	bf00      	nop
  }

  return ret;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	240007a0 	.word	0x240007a0

0800a4e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	88db      	ldrh	r3, [r3, #6]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d004      	beq.n	800a500 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f8e2 	bl	800a6c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4fe:	e023      	b.n	800a548 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b02      	cmp	r3, #2
 800a50a:	dc02      	bgt.n	800a512 <USBD_GetConfig+0x2e>
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	dc03      	bgt.n	800a518 <USBD_GetConfig+0x34>
 800a510:	e015      	b.n	800a53e <USBD_GetConfig+0x5a>
 800a512:	2b03      	cmp	r3, #3
 800a514:	d00b      	beq.n	800a52e <USBD_GetConfig+0x4a>
 800a516:	e012      	b.n	800a53e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	3308      	adds	r3, #8
 800a522:	2201      	movs	r2, #1
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f948 	bl	800a7bc <USBD_CtlSendData>
        break;
 800a52c:	e00c      	b.n	800a548 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3304      	adds	r3, #4
 800a532:	2201      	movs	r2, #1
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f940 	bl	800a7bc <USBD_CtlSendData>
        break;
 800a53c:	e004      	b.n	800a548 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f8be 	bl	800a6c2 <USBD_CtlError>
        break;
 800a546:	bf00      	nop
}
 800a548:	bf00      	nop
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a560:	b2db      	uxtb	r3, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	2b02      	cmp	r3, #2
 800a566:	d81e      	bhi.n	800a5a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	88db      	ldrh	r3, [r3, #6]
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d004      	beq.n	800a57a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f8a5 	bl	800a6c2 <USBD_CtlError>
        break;
 800a578:	e01a      	b.n	800a5b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a586:	2b00      	cmp	r3, #0
 800a588:	d005      	beq.n	800a596 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	f043 0202 	orr.w	r2, r3, #2
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	330c      	adds	r3, #12
 800a59a:	2202      	movs	r2, #2
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f90c 	bl	800a7bc <USBD_CtlSendData>
      break;
 800a5a4:	e004      	b.n	800a5b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f88a 	bl	800a6c2 <USBD_CtlError>
      break;
 800a5ae:	bf00      	nop
  }
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	885b      	ldrh	r3, [r3, #2]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d107      	bne.n	800a5da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f92f 	bl	800a836 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a5d8:	e013      	b.n	800a602 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	885b      	ldrh	r3, [r3, #2]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d10b      	bne.n	800a5fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	889b      	ldrh	r3, [r3, #4]
 800a5e6:	0a1b      	lsrs	r3, r3, #8
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f91f 	bl	800a836 <USBD_CtlSendStatus>
}
 800a5f8:	e003      	b.n	800a602 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f860 	bl	800a6c2 <USBD_CtlError>
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b082      	sub	sp, #8
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	3b01      	subs	r3, #1
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d80b      	bhi.n	800a63a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	885b      	ldrh	r3, [r3, #2]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d10c      	bne.n	800a644 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f8ff 	bl	800a836 <USBD_CtlSendStatus>
      }
      break;
 800a638:	e004      	b.n	800a644 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f840 	bl	800a6c2 <USBD_CtlError>
      break;
 800a642:	e000      	b.n	800a646 <USBD_ClrFeature+0x3c>
      break;
 800a644:	bf00      	nop
  }
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	781a      	ldrb	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3301      	adds	r3, #1
 800a668:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	781a      	ldrb	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3301      	adds	r3, #1
 800a676:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7ff fa16 	bl	8009aaa <SWAPBYTE>
 800a67e:	4603      	mov	r3, r0
 800a680:	461a      	mov	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3301      	adds	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	3301      	adds	r3, #1
 800a690:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f7ff fa09 	bl	8009aaa <SWAPBYTE>
 800a698:	4603      	mov	r3, r0
 800a69a:	461a      	mov	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f7ff f9fc 	bl	8009aaa <SWAPBYTE>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	80da      	strh	r2, [r3, #6]
}
 800a6ba:	bf00      	nop
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6cc:	2180      	movs	r1, #128	@ 0x80
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fc84 	bl	800afdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fc80 	bl	800afdc <USBD_LL_StallEP>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d042      	beq.n	800a780 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a6fe:	6938      	ldr	r0, [r7, #16]
 800a700:	f000 f842 	bl	800a788 <USBD_GetLen>
 800a704:	4603      	mov	r3, r0
 800a706:	3301      	adds	r3, #1
 800a708:	005b      	lsls	r3, r3, #1
 800a70a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a70e:	d808      	bhi.n	800a722 <USBD_GetString+0x3e>
 800a710:	6938      	ldr	r0, [r7, #16]
 800a712:	f000 f839 	bl	800a788 <USBD_GetLen>
 800a716:	4603      	mov	r3, r0
 800a718:	3301      	adds	r3, #1
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	005b      	lsls	r3, r3, #1
 800a71e:	b29a      	uxth	r2, r3
 800a720:	e001      	b.n	800a726 <USBD_GetString+0x42>
 800a722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	4413      	add	r3, r2
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	7812      	ldrb	r2, [r2, #0]
 800a734:	701a      	strb	r2, [r3, #0]
  idx++;
 800a736:	7dfb      	ldrb	r3, [r7, #23]
 800a738:	3301      	adds	r3, #1
 800a73a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	4413      	add	r3, r2
 800a742:	2203      	movs	r2, #3
 800a744:	701a      	strb	r2, [r3, #0]
  idx++;
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	3301      	adds	r3, #1
 800a74a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a74c:	e013      	b.n	800a776 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a74e:	7dfb      	ldrb	r3, [r7, #23]
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	4413      	add	r3, r2
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	7812      	ldrb	r2, [r2, #0]
 800a758:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	3301      	adds	r3, #1
 800a75e:	613b      	str	r3, [r7, #16]
    idx++;
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	3301      	adds	r3, #1
 800a764:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	4413      	add	r3, r2
 800a76c:	2200      	movs	r2, #0
 800a76e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a770:	7dfb      	ldrb	r3, [r7, #23]
 800a772:	3301      	adds	r3, #1
 800a774:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1e7      	bne.n	800a74e <USBD_GetString+0x6a>
 800a77e:	e000      	b.n	800a782 <USBD_GetString+0x9e>
    return;
 800a780:	bf00      	nop
  }
}
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a798:	e005      	b.n	800a7a6 <USBD_GetLen+0x1e>
  {
    len++;
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	3301      	adds	r3, #1
 800a79e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1f5      	bne.n	800a79a <USBD_GetLen+0x12>
  }

  return len;
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 fc83 	bl	800b0ee <USBD_LL_Transmit>

  return USBD_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	2100      	movs	r1, #0
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 fc72 	bl	800b0ee <USBD_LL_Transmit>

  return USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	2100      	movs	r1, #0
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f000 fc82 	bl	800b130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2204      	movs	r2, #4
 800a842:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a846:	2300      	movs	r3, #0
 800a848:	2200      	movs	r2, #0
 800a84a:	2100      	movs	r1, #0
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fc4e 	bl	800b0ee <USBD_LL_Transmit>

  return USBD_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2205      	movs	r2, #5
 800a868:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a86c:	2300      	movs	r3, #0
 800a86e:	2200      	movs	r2, #0
 800a870:	2100      	movs	r1, #0
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fc5c 	bl	800b130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
	...

0800a884 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a888:	2201      	movs	r2, #1
 800a88a:	490f      	ldr	r1, [pc, #60]	@ (800a8c8 <MX_USB_DEVICE_Init+0x44>)
 800a88c:	480f      	ldr	r0, [pc, #60]	@ (800a8cc <MX_USB_DEVICE_Init+0x48>)
 800a88e:	f7fe fce9 	bl	8009264 <USBD_Init>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a898:	f7f6 ff18 	bl	80016cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800a89c:	490c      	ldr	r1, [pc, #48]	@ (800a8d0 <MX_USB_DEVICE_Init+0x4c>)
 800a89e:	480b      	ldr	r0, [pc, #44]	@ (800a8cc <MX_USB_DEVICE_Init+0x48>)
 800a8a0:	f7fe fd10 	bl	80092c4 <USBD_RegisterClass>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a8aa:	f7f6 ff0f 	bl	80016cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a8ae:	4807      	ldr	r0, [pc, #28]	@ (800a8cc <MX_USB_DEVICE_Init+0x48>)
 800a8b0:	f7fe fd3e 	bl	8009330 <USBD_Start>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a8ba:	f7f6 ff07 	bl	80016cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a8be:	f7f8 ff79 	bl	80037b4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8c2:	bf00      	nop
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	24000274 	.word	0x24000274
 800a8cc:	240007a4 	.word	0x240007a4
 800a8d0:	240001c0 	.word	0x240001c0

0800a8d4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	4603      	mov	r3, r0
 800a8dc:	6039      	str	r1, [r7, #0]
 800a8de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2212      	movs	r2, #18
 800a8e4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a8e6:	4b03      	ldr	r3, [pc, #12]	@ (800a8f4 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	24000294 	.word	0x24000294

0800a8f8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	6039      	str	r1, [r7, #0]
 800a902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2204      	movs	r2, #4
 800a908:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a90a:	4b03      	ldr	r3, [pc, #12]	@ (800a918 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	240002a8 	.word	0x240002a8

0800a91c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	4603      	mov	r3, r0
 800a924:	6039      	str	r1, [r7, #0]
 800a926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d105      	bne.n	800a93a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	4907      	ldr	r1, [pc, #28]	@ (800a950 <USBD_HS_ProductStrDescriptor+0x34>)
 800a932:	4808      	ldr	r0, [pc, #32]	@ (800a954 <USBD_HS_ProductStrDescriptor+0x38>)
 800a934:	f7ff fed6 	bl	800a6e4 <USBD_GetString>
 800a938:	e004      	b.n	800a944 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	4904      	ldr	r1, [pc, #16]	@ (800a950 <USBD_HS_ProductStrDescriptor+0x34>)
 800a93e:	4805      	ldr	r0, [pc, #20]	@ (800a954 <USBD_HS_ProductStrDescriptor+0x38>)
 800a940:	f7ff fed0 	bl	800a6e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a944:	4b02      	ldr	r3, [pc, #8]	@ (800a950 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a946:	4618      	mov	r0, r3
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	24000a80 	.word	0x24000a80
 800a954:	0800bc6c 	.word	0x0800bc6c

0800a958 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	6039      	str	r1, [r7, #0]
 800a962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	4904      	ldr	r1, [pc, #16]	@ (800a978 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a968:	4804      	ldr	r0, [pc, #16]	@ (800a97c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a96a:	f7ff febb 	bl	800a6e4 <USBD_GetString>
  return USBD_StrDesc;
 800a96e:	4b02      	ldr	r3, [pc, #8]	@ (800a978 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	24000a80 	.word	0x24000a80
 800a97c:	0800bc84 	.word	0x0800bc84

0800a980 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	6039      	str	r1, [r7, #0]
 800a98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	221a      	movs	r2, #26
 800a990:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a992:	f000 f843 	bl	800aa1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a996:	4b02      	ldr	r3, [pc, #8]	@ (800a9a0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	240002ac 	.word	0x240002ac

0800a9a4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	6039      	str	r1, [r7, #0]
 800a9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9b0:	79fb      	ldrb	r3, [r7, #7]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d105      	bne.n	800a9c2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	4907      	ldr	r1, [pc, #28]	@ (800a9d8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a9ba:	4808      	ldr	r0, [pc, #32]	@ (800a9dc <USBD_HS_ConfigStrDescriptor+0x38>)
 800a9bc:	f7ff fe92 	bl	800a6e4 <USBD_GetString>
 800a9c0:	e004      	b.n	800a9cc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	4904      	ldr	r1, [pc, #16]	@ (800a9d8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a9c6:	4805      	ldr	r0, [pc, #20]	@ (800a9dc <USBD_HS_ConfigStrDescriptor+0x38>)
 800a9c8:	f7ff fe8c 	bl	800a6e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9cc:	4b02      	ldr	r3, [pc, #8]	@ (800a9d8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	24000a80 	.word	0x24000a80
 800a9dc:	0800bc98 	.word	0x0800bc98

0800a9e0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	6039      	str	r1, [r7, #0]
 800a9ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d105      	bne.n	800a9fe <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	4907      	ldr	r1, [pc, #28]	@ (800aa14 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a9f6:	4808      	ldr	r0, [pc, #32]	@ (800aa18 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a9f8:	f7ff fe74 	bl	800a6e4 <USBD_GetString>
 800a9fc:	e004      	b.n	800aa08 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	4904      	ldr	r1, [pc, #16]	@ (800aa14 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aa02:	4805      	ldr	r0, [pc, #20]	@ (800aa18 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aa04:	f7ff fe6e 	bl	800a6e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa08:	4b02      	ldr	r3, [pc, #8]	@ (800aa14 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	24000a80 	.word	0x24000a80
 800aa18:	0800bca4 	.word	0x0800bca4

0800aa1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa22:	4b0f      	ldr	r3, [pc, #60]	@ (800aa60 <Get_SerialNum+0x44>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa28:	4b0e      	ldr	r3, [pc, #56]	@ (800aa64 <Get_SerialNum+0x48>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa2e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa68 <Get_SerialNum+0x4c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4413      	add	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d009      	beq.n	800aa56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa42:	2208      	movs	r2, #8
 800aa44:	4909      	ldr	r1, [pc, #36]	@ (800aa6c <Get_SerialNum+0x50>)
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f000 f814 	bl	800aa74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa4c:	2204      	movs	r2, #4
 800aa4e:	4908      	ldr	r1, [pc, #32]	@ (800aa70 <Get_SerialNum+0x54>)
 800aa50:	68b8      	ldr	r0, [r7, #8]
 800aa52:	f000 f80f 	bl	800aa74 <IntToUnicode>
  }
}
 800aa56:	bf00      	nop
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	1ff1e800 	.word	0x1ff1e800
 800aa64:	1ff1e804 	.word	0x1ff1e804
 800aa68:	1ff1e808 	.word	0x1ff1e808
 800aa6c:	240002ae 	.word	0x240002ae
 800aa70:	240002be 	.word	0x240002be

0800aa74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa86:	2300      	movs	r3, #0
 800aa88:	75fb      	strb	r3, [r7, #23]
 800aa8a:	e027      	b.n	800aadc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	0f1b      	lsrs	r3, r3, #28
 800aa90:	2b09      	cmp	r3, #9
 800aa92:	d80b      	bhi.n	800aaac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	0f1b      	lsrs	r3, r3, #28
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	005b      	lsls	r3, r3, #1
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	440b      	add	r3, r1
 800aaa4:	3230      	adds	r2, #48	@ 0x30
 800aaa6:	b2d2      	uxtb	r2, r2
 800aaa8:	701a      	strb	r2, [r3, #0]
 800aaaa:	e00a      	b.n	800aac2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	0f1b      	lsrs	r3, r3, #28
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	4619      	mov	r1, r3
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	440b      	add	r3, r1
 800aabc:	3237      	adds	r2, #55	@ 0x37
 800aabe:	b2d2      	uxtb	r2, r2
 800aac0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	011b      	lsls	r3, r3, #4
 800aac6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	3301      	adds	r3, #1
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	4413      	add	r3, r2
 800aad2:	2200      	movs	r2, #0
 800aad4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	3301      	adds	r3, #1
 800aada:	75fb      	strb	r3, [r7, #23]
 800aadc:	7dfa      	ldrb	r2, [r7, #23]
 800aade:	79fb      	ldrb	r3, [r7, #7]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d3d3      	bcc.n	800aa8c <IntToUnicode+0x18>
  }
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop
 800aae8:	371c      	adds	r7, #28
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
	...

0800aaf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b0bc      	sub	sp, #240	@ 0xf0
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aafc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ab00:	2200      	movs	r2, #0
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	605a      	str	r2, [r3, #4]
 800ab06:	609a      	str	r2, [r3, #8]
 800ab08:	60da      	str	r2, [r3, #12]
 800ab0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ab0c:	f107 0320 	add.w	r3, r7, #32
 800ab10:	22b8      	movs	r2, #184	@ 0xb8
 800ab12:	2100      	movs	r1, #0
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 fb91 	bl	800b23c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a58      	ldr	r2, [pc, #352]	@ (800ac80 <HAL_PCD_MspInit+0x18c>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	f040 80a9 	bne.w	800ac78 <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ab26:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ab2a:	f04f 0300 	mov.w	r3, #0
 800ab2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ab32:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800ab36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ab3a:	f107 0320 	add.w	r3, r7, #32
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7f9 fdae 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800ab4a:	f7f6 fdbf 	bl	80016cc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ab4e:	f7f8 fe31 	bl	80037b4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab52:	4b4c      	ldr	r3, [pc, #304]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ab54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab58:	4a4a      	ldr	r2, [pc, #296]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ab5a:	f043 0304 	orr.w	r3, r3, #4
 800ab5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ab62:	4b48      	ldr	r3, [pc, #288]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ab64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab68:	f003 0304 	and.w	r3, r3, #4
 800ab6c:	61fb      	str	r3, [r7, #28]
 800ab6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab70:	4b44      	ldr	r3, [pc, #272]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ab72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab76:	4a43      	ldr	r2, [pc, #268]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ab78:	f043 0301 	orr.w	r3, r3, #1
 800ab7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ab80:	4b40      	ldr	r3, [pc, #256]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ab82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	61bb      	str	r3, [r7, #24]
 800ab8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab8e:	4b3d      	ldr	r3, [pc, #244]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ab90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab94:	4a3b      	ldr	r2, [pc, #236]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ab96:	f043 0302 	orr.w	r3, r3, #2
 800ab9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ab9e:	4b39      	ldr	r3, [pc, #228]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800aba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aba4:	f003 0302 	and.w	r3, r3, #2
 800aba8:	617b      	str	r3, [r7, #20]
 800abaa:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800abac:	230d      	movs	r3, #13
 800abae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abb2:	2302      	movs	r3, #2
 800abb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb8:	2300      	movs	r3, #0
 800abba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800abbe:	2302      	movs	r3, #2
 800abc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800abc4:	230a      	movs	r3, #10
 800abc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800abce:	4619      	mov	r1, r3
 800abd0:	482d      	ldr	r0, [pc, #180]	@ (800ac88 <HAL_PCD_MspInit+0x194>)
 800abd2:	f7f7 f985 	bl	8001ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800abd6:	2328      	movs	r3, #40	@ 0x28
 800abd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abdc:	2302      	movs	r3, #2
 800abde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800abe8:	2302      	movs	r3, #2
 800abea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800abee:	230a      	movs	r3, #10
 800abf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abf4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800abf8:	4619      	mov	r1, r3
 800abfa:	4824      	ldr	r0, [pc, #144]	@ (800ac8c <HAL_PCD_MspInit+0x198>)
 800abfc:	f7f7 f970 	bl	8001ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800ac00:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800ac04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac08:	2302      	movs	r3, #2
 800ac0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ac14:	2302      	movs	r3, #2
 800ac16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800ac1a:	230a      	movs	r3, #10
 800ac1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ac24:	4619      	mov	r1, r3
 800ac26:	481a      	ldr	r0, [pc, #104]	@ (800ac90 <HAL_PCD_MspInit+0x19c>)
 800ac28:	f7f7 f95a 	bl	8001ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ac2c:	4b15      	ldr	r3, [pc, #84]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ac2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ac32:	4a14      	ldr	r2, [pc, #80]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ac34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ac38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ac3c:	4b11      	ldr	r3, [pc, #68]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ac3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ac42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac46:	613b      	str	r3, [r7, #16]
 800ac48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800ac4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ac4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ac50:	4a0c      	ldr	r2, [pc, #48]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ac52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ac5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ac84 <HAL_PCD_MspInit+0x190>)
 800ac5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ac60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ac68:	2200      	movs	r2, #0
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	204d      	movs	r0, #77	@ 0x4d
 800ac6e:	f7f7 f88a 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ac72:	204d      	movs	r0, #77	@ 0x4d
 800ac74:	f7f7 f8a1 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ac78:	bf00      	nop
 800ac7a:	37f0      	adds	r7, #240	@ 0xf0
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	40040000 	.word	0x40040000
 800ac84:	58024400 	.word	0x58024400
 800ac88:	58020800 	.word	0x58020800
 800ac8c:	58020000 	.word	0x58020000
 800ac90:	58020400 	.word	0x58020400

0800ac94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aca8:	4619      	mov	r1, r3
 800acaa:	4610      	mov	r0, r2
 800acac:	f7fe fb8d 	bl	80093ca <USBD_LL_SetupStage>
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800acca:	78fa      	ldrb	r2, [r7, #3]
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4613      	mov	r3, r2
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	78fb      	ldrb	r3, [r7, #3]
 800ace0:	4619      	mov	r1, r3
 800ace2:	f7fe fbc7 	bl	8009474 <USBD_LL_DataOutStage>
}
 800ace6:	bf00      	nop
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	460b      	mov	r3, r1
 800acf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ad00:	78fa      	ldrb	r2, [r7, #3]
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	4613      	mov	r3, r2
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	440b      	add	r3, r1
 800ad0e:	3320      	adds	r3, #32
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	4619      	mov	r1, r3
 800ad16:	f7fe fc60 	bl	80095da <USBD_LL_DataInStage>
}
 800ad1a:	bf00      	nop
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe fd9a 	bl	800986a <USBD_LL_SOF>
}
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad46:	2301      	movs	r3, #1
 800ad48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	79db      	ldrb	r3, [r3, #7]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d102      	bne.n	800ad58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]
 800ad56:	e008      	b.n	800ad6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	79db      	ldrb	r3, [r3, #7]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d102      	bne.n	800ad66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ad60:	2301      	movs	r3, #1
 800ad62:	73fb      	strb	r3, [r7, #15]
 800ad64:	e001      	b.n	800ad6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ad66:	f7f6 fcb1 	bl	80016cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad70:	7bfa      	ldrb	r2, [r7, #15]
 800ad72:	4611      	mov	r1, r2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fe fd34 	bl	80097e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fe fcdc 	bl	800973e <USBD_LL_Reset>
}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fd2f 	bl	8009802 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	6812      	ldr	r2, [r2, #0]
 800adb2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800adb6:	f043 0301 	orr.w	r3, r3, #1
 800adba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	7adb      	ldrb	r3, [r3, #11]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d005      	beq.n	800add0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adc4:	4b04      	ldr	r3, [pc, #16]	@ (800add8 <HAL_PCD_SuspendCallback+0x48>)
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	4a03      	ldr	r2, [pc, #12]	@ (800add8 <HAL_PCD_SuspendCallback+0x48>)
 800adca:	f043 0306 	orr.w	r3, r3, #6
 800adce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	e000ed00 	.word	0xe000ed00

0800addc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe fd25 	bl	800983a <USBD_LL_Resume>
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	460b      	mov	r3, r1
 800ae02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae0a:	78fa      	ldrb	r2, [r7, #3]
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fd7d 	bl	800990e <USBD_LL_IsoOUTIncomplete>
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae2e:	78fa      	ldrb	r2, [r7, #3]
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe fd39 	bl	80098aa <USBD_LL_IsoINIncomplete>
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe fd8f 	bl	8009972 <USBD_LL_DevConnected>
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fe fd8c 	bl	8009988 <USBD_LL_DevDisconnected>
}
 800ae70:	bf00      	nop
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d140      	bne.n	800af0a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ae88:	4a22      	ldr	r2, [pc, #136]	@ (800af14 <USBD_LL_Init+0x9c>)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a20      	ldr	r2, [pc, #128]	@ (800af14 <USBD_LL_Init+0x9c>)
 800ae94:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ae98:	4b1e      	ldr	r3, [pc, #120]	@ (800af14 <USBD_LL_Init+0x9c>)
 800ae9a:	4a1f      	ldr	r2, [pc, #124]	@ (800af18 <USBD_LL_Init+0xa0>)
 800ae9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800ae9e:	4b1d      	ldr	r3, [pc, #116]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aea0:	2209      	movs	r2, #9
 800aea2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800aea4:	4b1b      	ldr	r3, [pc, #108]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800aeaa:	4b1a      	ldr	r3, [pc, #104]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800aeb0:	4b18      	ldr	r3, [pc, #96]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800aeb6:	4b17      	ldr	r3, [pc, #92]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800aebc:	4b15      	ldr	r3, [pc, #84]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800aec2:	4b14      	ldr	r3, [pc, #80]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800aec8:	4b12      	ldr	r3, [pc, #72]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800aece:	4b11      	ldr	r3, [pc, #68]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800aed4:	4b0f      	ldr	r3, [pc, #60]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800aeda:	480e      	ldr	r0, [pc, #56]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aedc:	f7f7 f9a8 	bl	8002230 <HAL_PCD_Init>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800aee6:	f7f6 fbf1 	bl	80016cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800aeea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aeee:	4809      	ldr	r0, [pc, #36]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aef0:	f7f8 fbe5 	bl	80036be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800aef4:	2280      	movs	r2, #128	@ 0x80
 800aef6:	2100      	movs	r1, #0
 800aef8:	4806      	ldr	r0, [pc, #24]	@ (800af14 <USBD_LL_Init+0x9c>)
 800aefa:	f7f8 fb99 	bl	8003630 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800aefe:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800af02:	2101      	movs	r1, #1
 800af04:	4803      	ldr	r0, [pc, #12]	@ (800af14 <USBD_LL_Init+0x9c>)
 800af06:	f7f8 fb93 	bl	8003630 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	24000c80 	.word	0x24000c80
 800af18:	40040000 	.word	0x40040000

0800af1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af32:	4618      	mov	r0, r3
 800af34:	f7f7 fa88 	bl	8002448 <HAL_PCD_Start>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 f930 	bl	800b1a4 <USBD_Get_USB_Status>
 800af44:	4603      	mov	r3, r0
 800af46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af48:	7bbb      	ldrb	r3, [r7, #14]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	4608      	mov	r0, r1
 800af5c:	4611      	mov	r1, r2
 800af5e:	461a      	mov	r2, r3
 800af60:	4603      	mov	r3, r0
 800af62:	70fb      	strb	r3, [r7, #3]
 800af64:	460b      	mov	r3, r1
 800af66:	70bb      	strb	r3, [r7, #2]
 800af68:	4613      	mov	r3, r2
 800af6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af7a:	78bb      	ldrb	r3, [r7, #2]
 800af7c:	883a      	ldrh	r2, [r7, #0]
 800af7e:	78f9      	ldrb	r1, [r7, #3]
 800af80:	f7f7 ff89 	bl	8002e96 <HAL_PCD_EP_Open>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f90a 	bl	800b1a4 <USBD_Get_USB_Status>
 800af90:	4603      	mov	r3, r0
 800af92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af94:	7bbb      	ldrb	r3, [r7, #14]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afb8:	78fa      	ldrb	r2, [r7, #3]
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f7 ffd4 	bl	8002f6a <HAL_PCD_EP_Close>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f8eb 	bl	800b1a4 <USBD_Get_USB_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aff6:	78fa      	ldrb	r2, [r7, #3]
 800aff8:	4611      	mov	r1, r2
 800affa:	4618      	mov	r0, r3
 800affc:	f7f8 f874 	bl	80030e8 <HAL_PCD_EP_SetStall>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f8cc 	bl	800b1a4 <USBD_Get_USB_Status>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b034:	78fa      	ldrb	r2, [r7, #3]
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7f8 f8b8 	bl	80031ae <HAL_PCD_EP_ClrStall>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	4618      	mov	r0, r3
 800b046:	f000 f8ad 	bl	800b1a4 <USBD_Get_USB_Status>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b06a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b06c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b070:	2b00      	cmp	r3, #0
 800b072:	da0b      	bge.n	800b08c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b07a:	68f9      	ldr	r1, [r7, #12]
 800b07c:	4613      	mov	r3, r2
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	3316      	adds	r3, #22
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	e00b      	b.n	800b0a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b08c:	78fb      	ldrb	r3, [r7, #3]
 800b08e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b092:	68f9      	ldr	r1, [r7, #12]
 800b094:	4613      	mov	r3, r2
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b0a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0ca:	78fa      	ldrb	r2, [r7, #3]
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7f7 febd 	bl	8002e4e <HAL_PCD_SetAddress>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 f862 	bl	800b1a4 <USBD_Get_USB_Status>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b086      	sub	sp, #24
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b10c:	7af9      	ldrb	r1, [r7, #11]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	f7f7 ffaf 	bl	8003074 <HAL_PCD_EP_Transmit>
 800b116:	4603      	mov	r3, r0
 800b118:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 f841 	bl	800b1a4 <USBD_Get_USB_Status>
 800b122:	4603      	mov	r3, r0
 800b124:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b126:	7dbb      	ldrb	r3, [r7, #22]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	607a      	str	r2, [r7, #4]
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	460b      	mov	r3, r1
 800b13e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b14e:	7af9      	ldrb	r1, [r7, #11]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	f7f7 ff53 	bl	8002ffe <HAL_PCD_EP_Receive>
 800b158:	4603      	mov	r3, r0
 800b15a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 f820 	bl	800b1a4 <USBD_Get_USB_Status>
 800b164:	4603      	mov	r3, r0
 800b166:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b168:	7dbb      	ldrb	r3, [r7, #22]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b17c:	4b03      	ldr	r3, [pc, #12]	@ (800b18c <USBD_static_malloc+0x18>)
}
 800b17e:	4618      	mov	r0, r3
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	24001164 	.word	0x24001164

0800b190 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d817      	bhi.n	800b1e8 <USBD_Get_USB_Status+0x44>
 800b1b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c0 <USBD_Get_USB_Status+0x1c>)
 800b1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1be:	bf00      	nop
 800b1c0:	0800b1d1 	.word	0x0800b1d1
 800b1c4:	0800b1d7 	.word	0x0800b1d7
 800b1c8:	0800b1dd 	.word	0x0800b1dd
 800b1cc:	0800b1e3 	.word	0x0800b1e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1d4:	e00b      	b.n	800b1ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1da:	e008      	b.n	800b1ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e0:	e005      	b.n	800b1ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e6:	e002      	b.n	800b1ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ec:	bf00      	nop
  }
  return usb_status;
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <siprintf>:
 800b1fc:	b40e      	push	{r1, r2, r3}
 800b1fe:	b500      	push	{lr}
 800b200:	b09c      	sub	sp, #112	@ 0x70
 800b202:	ab1d      	add	r3, sp, #116	@ 0x74
 800b204:	9002      	str	r0, [sp, #8]
 800b206:	9006      	str	r0, [sp, #24]
 800b208:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b20c:	4809      	ldr	r0, [pc, #36]	@ (800b234 <siprintf+0x38>)
 800b20e:	9107      	str	r1, [sp, #28]
 800b210:	9104      	str	r1, [sp, #16]
 800b212:	4909      	ldr	r1, [pc, #36]	@ (800b238 <siprintf+0x3c>)
 800b214:	f853 2b04 	ldr.w	r2, [r3], #4
 800b218:	9105      	str	r1, [sp, #20]
 800b21a:	6800      	ldr	r0, [r0, #0]
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	a902      	add	r1, sp, #8
 800b220:	f000 f994 	bl	800b54c <_svfiprintf_r>
 800b224:	9b02      	ldr	r3, [sp, #8]
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	b01c      	add	sp, #112	@ 0x70
 800b22c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b230:	b003      	add	sp, #12
 800b232:	4770      	bx	lr
 800b234:	240002c8 	.word	0x240002c8
 800b238:	ffff0208 	.word	0xffff0208

0800b23c <memset>:
 800b23c:	4402      	add	r2, r0
 800b23e:	4603      	mov	r3, r0
 800b240:	4293      	cmp	r3, r2
 800b242:	d100      	bne.n	800b246 <memset+0xa>
 800b244:	4770      	bx	lr
 800b246:	f803 1b01 	strb.w	r1, [r3], #1
 800b24a:	e7f9      	b.n	800b240 <memset+0x4>

0800b24c <__errno>:
 800b24c:	4b01      	ldr	r3, [pc, #4]	@ (800b254 <__errno+0x8>)
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	240002c8 	.word	0x240002c8

0800b258 <__libc_init_array>:
 800b258:	b570      	push	{r4, r5, r6, lr}
 800b25a:	4d0d      	ldr	r5, [pc, #52]	@ (800b290 <__libc_init_array+0x38>)
 800b25c:	4c0d      	ldr	r4, [pc, #52]	@ (800b294 <__libc_init_array+0x3c>)
 800b25e:	1b64      	subs	r4, r4, r5
 800b260:	10a4      	asrs	r4, r4, #2
 800b262:	2600      	movs	r6, #0
 800b264:	42a6      	cmp	r6, r4
 800b266:	d109      	bne.n	800b27c <__libc_init_array+0x24>
 800b268:	4d0b      	ldr	r5, [pc, #44]	@ (800b298 <__libc_init_array+0x40>)
 800b26a:	4c0c      	ldr	r4, [pc, #48]	@ (800b29c <__libc_init_array+0x44>)
 800b26c:	f000 fc66 	bl	800bb3c <_init>
 800b270:	1b64      	subs	r4, r4, r5
 800b272:	10a4      	asrs	r4, r4, #2
 800b274:	2600      	movs	r6, #0
 800b276:	42a6      	cmp	r6, r4
 800b278:	d105      	bne.n	800b286 <__libc_init_array+0x2e>
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b280:	4798      	blx	r3
 800b282:	3601      	adds	r6, #1
 800b284:	e7ee      	b.n	800b264 <__libc_init_array+0xc>
 800b286:	f855 3b04 	ldr.w	r3, [r5], #4
 800b28a:	4798      	blx	r3
 800b28c:	3601      	adds	r6, #1
 800b28e:	e7f2      	b.n	800b276 <__libc_init_array+0x1e>
 800b290:	0800bd28 	.word	0x0800bd28
 800b294:	0800bd28 	.word	0x0800bd28
 800b298:	0800bd28 	.word	0x0800bd28
 800b29c:	0800bd2c 	.word	0x0800bd2c

0800b2a0 <__retarget_lock_acquire_recursive>:
 800b2a0:	4770      	bx	lr

0800b2a2 <__retarget_lock_release_recursive>:
 800b2a2:	4770      	bx	lr

0800b2a4 <_free_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	2900      	cmp	r1, #0
 800b2aa:	d041      	beq.n	800b330 <_free_r+0x8c>
 800b2ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2b0:	1f0c      	subs	r4, r1, #4
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	bfb8      	it	lt
 800b2b6:	18e4      	addlt	r4, r4, r3
 800b2b8:	f000 f8e0 	bl	800b47c <__malloc_lock>
 800b2bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b334 <_free_r+0x90>)
 800b2be:	6813      	ldr	r3, [r2, #0]
 800b2c0:	b933      	cbnz	r3, 800b2d0 <_free_r+0x2c>
 800b2c2:	6063      	str	r3, [r4, #4]
 800b2c4:	6014      	str	r4, [r2, #0]
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2cc:	f000 b8dc 	b.w	800b488 <__malloc_unlock>
 800b2d0:	42a3      	cmp	r3, r4
 800b2d2:	d908      	bls.n	800b2e6 <_free_r+0x42>
 800b2d4:	6820      	ldr	r0, [r4, #0]
 800b2d6:	1821      	adds	r1, r4, r0
 800b2d8:	428b      	cmp	r3, r1
 800b2da:	bf01      	itttt	eq
 800b2dc:	6819      	ldreq	r1, [r3, #0]
 800b2de:	685b      	ldreq	r3, [r3, #4]
 800b2e0:	1809      	addeq	r1, r1, r0
 800b2e2:	6021      	streq	r1, [r4, #0]
 800b2e4:	e7ed      	b.n	800b2c2 <_free_r+0x1e>
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	b10b      	cbz	r3, 800b2f0 <_free_r+0x4c>
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	d9fa      	bls.n	800b2e6 <_free_r+0x42>
 800b2f0:	6811      	ldr	r1, [r2, #0]
 800b2f2:	1850      	adds	r0, r2, r1
 800b2f4:	42a0      	cmp	r0, r4
 800b2f6:	d10b      	bne.n	800b310 <_free_r+0x6c>
 800b2f8:	6820      	ldr	r0, [r4, #0]
 800b2fa:	4401      	add	r1, r0
 800b2fc:	1850      	adds	r0, r2, r1
 800b2fe:	4283      	cmp	r3, r0
 800b300:	6011      	str	r1, [r2, #0]
 800b302:	d1e0      	bne.n	800b2c6 <_free_r+0x22>
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	6053      	str	r3, [r2, #4]
 800b30a:	4408      	add	r0, r1
 800b30c:	6010      	str	r0, [r2, #0]
 800b30e:	e7da      	b.n	800b2c6 <_free_r+0x22>
 800b310:	d902      	bls.n	800b318 <_free_r+0x74>
 800b312:	230c      	movs	r3, #12
 800b314:	602b      	str	r3, [r5, #0]
 800b316:	e7d6      	b.n	800b2c6 <_free_r+0x22>
 800b318:	6820      	ldr	r0, [r4, #0]
 800b31a:	1821      	adds	r1, r4, r0
 800b31c:	428b      	cmp	r3, r1
 800b31e:	bf04      	itt	eq
 800b320:	6819      	ldreq	r1, [r3, #0]
 800b322:	685b      	ldreq	r3, [r3, #4]
 800b324:	6063      	str	r3, [r4, #4]
 800b326:	bf04      	itt	eq
 800b328:	1809      	addeq	r1, r1, r0
 800b32a:	6021      	streq	r1, [r4, #0]
 800b32c:	6054      	str	r4, [r2, #4]
 800b32e:	e7ca      	b.n	800b2c6 <_free_r+0x22>
 800b330:	bd38      	pop	{r3, r4, r5, pc}
 800b332:	bf00      	nop
 800b334:	240012bc 	.word	0x240012bc

0800b338 <sbrk_aligned>:
 800b338:	b570      	push	{r4, r5, r6, lr}
 800b33a:	4e0f      	ldr	r6, [pc, #60]	@ (800b378 <sbrk_aligned+0x40>)
 800b33c:	460c      	mov	r4, r1
 800b33e:	6831      	ldr	r1, [r6, #0]
 800b340:	4605      	mov	r5, r0
 800b342:	b911      	cbnz	r1, 800b34a <sbrk_aligned+0x12>
 800b344:	f000 fba6 	bl	800ba94 <_sbrk_r>
 800b348:	6030      	str	r0, [r6, #0]
 800b34a:	4621      	mov	r1, r4
 800b34c:	4628      	mov	r0, r5
 800b34e:	f000 fba1 	bl	800ba94 <_sbrk_r>
 800b352:	1c43      	adds	r3, r0, #1
 800b354:	d103      	bne.n	800b35e <sbrk_aligned+0x26>
 800b356:	f04f 34ff 	mov.w	r4, #4294967295
 800b35a:	4620      	mov	r0, r4
 800b35c:	bd70      	pop	{r4, r5, r6, pc}
 800b35e:	1cc4      	adds	r4, r0, #3
 800b360:	f024 0403 	bic.w	r4, r4, #3
 800b364:	42a0      	cmp	r0, r4
 800b366:	d0f8      	beq.n	800b35a <sbrk_aligned+0x22>
 800b368:	1a21      	subs	r1, r4, r0
 800b36a:	4628      	mov	r0, r5
 800b36c:	f000 fb92 	bl	800ba94 <_sbrk_r>
 800b370:	3001      	adds	r0, #1
 800b372:	d1f2      	bne.n	800b35a <sbrk_aligned+0x22>
 800b374:	e7ef      	b.n	800b356 <sbrk_aligned+0x1e>
 800b376:	bf00      	nop
 800b378:	240012b8 	.word	0x240012b8

0800b37c <_malloc_r>:
 800b37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b380:	1ccd      	adds	r5, r1, #3
 800b382:	f025 0503 	bic.w	r5, r5, #3
 800b386:	3508      	adds	r5, #8
 800b388:	2d0c      	cmp	r5, #12
 800b38a:	bf38      	it	cc
 800b38c:	250c      	movcc	r5, #12
 800b38e:	2d00      	cmp	r5, #0
 800b390:	4606      	mov	r6, r0
 800b392:	db01      	blt.n	800b398 <_malloc_r+0x1c>
 800b394:	42a9      	cmp	r1, r5
 800b396:	d904      	bls.n	800b3a2 <_malloc_r+0x26>
 800b398:	230c      	movs	r3, #12
 800b39a:	6033      	str	r3, [r6, #0]
 800b39c:	2000      	movs	r0, #0
 800b39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b478 <_malloc_r+0xfc>
 800b3a6:	f000 f869 	bl	800b47c <__malloc_lock>
 800b3aa:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ae:	461c      	mov	r4, r3
 800b3b0:	bb44      	cbnz	r4, 800b404 <_malloc_r+0x88>
 800b3b2:	4629      	mov	r1, r5
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	f7ff ffbf 	bl	800b338 <sbrk_aligned>
 800b3ba:	1c43      	adds	r3, r0, #1
 800b3bc:	4604      	mov	r4, r0
 800b3be:	d158      	bne.n	800b472 <_malloc_r+0xf6>
 800b3c0:	f8d8 4000 	ldr.w	r4, [r8]
 800b3c4:	4627      	mov	r7, r4
 800b3c6:	2f00      	cmp	r7, #0
 800b3c8:	d143      	bne.n	800b452 <_malloc_r+0xd6>
 800b3ca:	2c00      	cmp	r4, #0
 800b3cc:	d04b      	beq.n	800b466 <_malloc_r+0xea>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	eb04 0903 	add.w	r9, r4, r3
 800b3d8:	f000 fb5c 	bl	800ba94 <_sbrk_r>
 800b3dc:	4581      	cmp	r9, r0
 800b3de:	d142      	bne.n	800b466 <_malloc_r+0xea>
 800b3e0:	6821      	ldr	r1, [r4, #0]
 800b3e2:	1a6d      	subs	r5, r5, r1
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f7ff ffa6 	bl	800b338 <sbrk_aligned>
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d03a      	beq.n	800b466 <_malloc_r+0xea>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	442b      	add	r3, r5
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	bb62      	cbnz	r2, 800b458 <_malloc_r+0xdc>
 800b3fe:	f8c8 7000 	str.w	r7, [r8]
 800b402:	e00f      	b.n	800b424 <_malloc_r+0xa8>
 800b404:	6822      	ldr	r2, [r4, #0]
 800b406:	1b52      	subs	r2, r2, r5
 800b408:	d420      	bmi.n	800b44c <_malloc_r+0xd0>
 800b40a:	2a0b      	cmp	r2, #11
 800b40c:	d917      	bls.n	800b43e <_malloc_r+0xc2>
 800b40e:	1961      	adds	r1, r4, r5
 800b410:	42a3      	cmp	r3, r4
 800b412:	6025      	str	r5, [r4, #0]
 800b414:	bf18      	it	ne
 800b416:	6059      	strne	r1, [r3, #4]
 800b418:	6863      	ldr	r3, [r4, #4]
 800b41a:	bf08      	it	eq
 800b41c:	f8c8 1000 	streq.w	r1, [r8]
 800b420:	5162      	str	r2, [r4, r5]
 800b422:	604b      	str	r3, [r1, #4]
 800b424:	4630      	mov	r0, r6
 800b426:	f000 f82f 	bl	800b488 <__malloc_unlock>
 800b42a:	f104 000b 	add.w	r0, r4, #11
 800b42e:	1d23      	adds	r3, r4, #4
 800b430:	f020 0007 	bic.w	r0, r0, #7
 800b434:	1ac2      	subs	r2, r0, r3
 800b436:	bf1c      	itt	ne
 800b438:	1a1b      	subne	r3, r3, r0
 800b43a:	50a3      	strne	r3, [r4, r2]
 800b43c:	e7af      	b.n	800b39e <_malloc_r+0x22>
 800b43e:	6862      	ldr	r2, [r4, #4]
 800b440:	42a3      	cmp	r3, r4
 800b442:	bf0c      	ite	eq
 800b444:	f8c8 2000 	streq.w	r2, [r8]
 800b448:	605a      	strne	r2, [r3, #4]
 800b44a:	e7eb      	b.n	800b424 <_malloc_r+0xa8>
 800b44c:	4623      	mov	r3, r4
 800b44e:	6864      	ldr	r4, [r4, #4]
 800b450:	e7ae      	b.n	800b3b0 <_malloc_r+0x34>
 800b452:	463c      	mov	r4, r7
 800b454:	687f      	ldr	r7, [r7, #4]
 800b456:	e7b6      	b.n	800b3c6 <_malloc_r+0x4a>
 800b458:	461a      	mov	r2, r3
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	42a3      	cmp	r3, r4
 800b45e:	d1fb      	bne.n	800b458 <_malloc_r+0xdc>
 800b460:	2300      	movs	r3, #0
 800b462:	6053      	str	r3, [r2, #4]
 800b464:	e7de      	b.n	800b424 <_malloc_r+0xa8>
 800b466:	230c      	movs	r3, #12
 800b468:	6033      	str	r3, [r6, #0]
 800b46a:	4630      	mov	r0, r6
 800b46c:	f000 f80c 	bl	800b488 <__malloc_unlock>
 800b470:	e794      	b.n	800b39c <_malloc_r+0x20>
 800b472:	6005      	str	r5, [r0, #0]
 800b474:	e7d6      	b.n	800b424 <_malloc_r+0xa8>
 800b476:	bf00      	nop
 800b478:	240012bc 	.word	0x240012bc

0800b47c <__malloc_lock>:
 800b47c:	4801      	ldr	r0, [pc, #4]	@ (800b484 <__malloc_lock+0x8>)
 800b47e:	f7ff bf0f 	b.w	800b2a0 <__retarget_lock_acquire_recursive>
 800b482:	bf00      	nop
 800b484:	240012b4 	.word	0x240012b4

0800b488 <__malloc_unlock>:
 800b488:	4801      	ldr	r0, [pc, #4]	@ (800b490 <__malloc_unlock+0x8>)
 800b48a:	f7ff bf0a 	b.w	800b2a2 <__retarget_lock_release_recursive>
 800b48e:	bf00      	nop
 800b490:	240012b4 	.word	0x240012b4

0800b494 <__ssputs_r>:
 800b494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b498:	688e      	ldr	r6, [r1, #8]
 800b49a:	461f      	mov	r7, r3
 800b49c:	42be      	cmp	r6, r7
 800b49e:	680b      	ldr	r3, [r1, #0]
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	4690      	mov	r8, r2
 800b4a6:	d82d      	bhi.n	800b504 <__ssputs_r+0x70>
 800b4a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4b0:	d026      	beq.n	800b500 <__ssputs_r+0x6c>
 800b4b2:	6965      	ldr	r5, [r4, #20]
 800b4b4:	6909      	ldr	r1, [r1, #16]
 800b4b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4ba:	eba3 0901 	sub.w	r9, r3, r1
 800b4be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4c2:	1c7b      	adds	r3, r7, #1
 800b4c4:	444b      	add	r3, r9
 800b4c6:	106d      	asrs	r5, r5, #1
 800b4c8:	429d      	cmp	r5, r3
 800b4ca:	bf38      	it	cc
 800b4cc:	461d      	movcc	r5, r3
 800b4ce:	0553      	lsls	r3, r2, #21
 800b4d0:	d527      	bpl.n	800b522 <__ssputs_r+0x8e>
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	f7ff ff52 	bl	800b37c <_malloc_r>
 800b4d8:	4606      	mov	r6, r0
 800b4da:	b360      	cbz	r0, 800b536 <__ssputs_r+0xa2>
 800b4dc:	6921      	ldr	r1, [r4, #16]
 800b4de:	464a      	mov	r2, r9
 800b4e0:	f000 fae8 	bl	800bab4 <memcpy>
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ee:	81a3      	strh	r3, [r4, #12]
 800b4f0:	6126      	str	r6, [r4, #16]
 800b4f2:	6165      	str	r5, [r4, #20]
 800b4f4:	444e      	add	r6, r9
 800b4f6:	eba5 0509 	sub.w	r5, r5, r9
 800b4fa:	6026      	str	r6, [r4, #0]
 800b4fc:	60a5      	str	r5, [r4, #8]
 800b4fe:	463e      	mov	r6, r7
 800b500:	42be      	cmp	r6, r7
 800b502:	d900      	bls.n	800b506 <__ssputs_r+0x72>
 800b504:	463e      	mov	r6, r7
 800b506:	6820      	ldr	r0, [r4, #0]
 800b508:	4632      	mov	r2, r6
 800b50a:	4641      	mov	r1, r8
 800b50c:	f000 faa8 	bl	800ba60 <memmove>
 800b510:	68a3      	ldr	r3, [r4, #8]
 800b512:	1b9b      	subs	r3, r3, r6
 800b514:	60a3      	str	r3, [r4, #8]
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	4433      	add	r3, r6
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	2000      	movs	r0, #0
 800b51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b522:	462a      	mov	r2, r5
 800b524:	f000 fad4 	bl	800bad0 <_realloc_r>
 800b528:	4606      	mov	r6, r0
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d1e0      	bne.n	800b4f0 <__ssputs_r+0x5c>
 800b52e:	6921      	ldr	r1, [r4, #16]
 800b530:	4650      	mov	r0, sl
 800b532:	f7ff feb7 	bl	800b2a4 <_free_r>
 800b536:	230c      	movs	r3, #12
 800b538:	f8ca 3000 	str.w	r3, [sl]
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b542:	81a3      	strh	r3, [r4, #12]
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	e7e9      	b.n	800b51e <__ssputs_r+0x8a>
	...

0800b54c <_svfiprintf_r>:
 800b54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b550:	4698      	mov	r8, r3
 800b552:	898b      	ldrh	r3, [r1, #12]
 800b554:	061b      	lsls	r3, r3, #24
 800b556:	b09d      	sub	sp, #116	@ 0x74
 800b558:	4607      	mov	r7, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	4614      	mov	r4, r2
 800b55e:	d510      	bpl.n	800b582 <_svfiprintf_r+0x36>
 800b560:	690b      	ldr	r3, [r1, #16]
 800b562:	b973      	cbnz	r3, 800b582 <_svfiprintf_r+0x36>
 800b564:	2140      	movs	r1, #64	@ 0x40
 800b566:	f7ff ff09 	bl	800b37c <_malloc_r>
 800b56a:	6028      	str	r0, [r5, #0]
 800b56c:	6128      	str	r0, [r5, #16]
 800b56e:	b930      	cbnz	r0, 800b57e <_svfiprintf_r+0x32>
 800b570:	230c      	movs	r3, #12
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	f04f 30ff 	mov.w	r0, #4294967295
 800b578:	b01d      	add	sp, #116	@ 0x74
 800b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57e:	2340      	movs	r3, #64	@ 0x40
 800b580:	616b      	str	r3, [r5, #20]
 800b582:	2300      	movs	r3, #0
 800b584:	9309      	str	r3, [sp, #36]	@ 0x24
 800b586:	2320      	movs	r3, #32
 800b588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b58c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b590:	2330      	movs	r3, #48	@ 0x30
 800b592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b730 <_svfiprintf_r+0x1e4>
 800b596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b59a:	f04f 0901 	mov.w	r9, #1
 800b59e:	4623      	mov	r3, r4
 800b5a0:	469a      	mov	sl, r3
 800b5a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a6:	b10a      	cbz	r2, 800b5ac <_svfiprintf_r+0x60>
 800b5a8:	2a25      	cmp	r2, #37	@ 0x25
 800b5aa:	d1f9      	bne.n	800b5a0 <_svfiprintf_r+0x54>
 800b5ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b5b0:	d00b      	beq.n	800b5ca <_svfiprintf_r+0x7e>
 800b5b2:	465b      	mov	r3, fp
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	f7ff ff6b 	bl	800b494 <__ssputs_r>
 800b5be:	3001      	adds	r0, #1
 800b5c0:	f000 80a7 	beq.w	800b712 <_svfiprintf_r+0x1c6>
 800b5c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5c6:	445a      	add	r2, fp
 800b5c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 809f 	beq.w	800b712 <_svfiprintf_r+0x1c6>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5de:	f10a 0a01 	add.w	sl, sl, #1
 800b5e2:	9304      	str	r3, [sp, #16]
 800b5e4:	9307      	str	r3, [sp, #28]
 800b5e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5ec:	4654      	mov	r4, sl
 800b5ee:	2205      	movs	r2, #5
 800b5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f4:	484e      	ldr	r0, [pc, #312]	@ (800b730 <_svfiprintf_r+0x1e4>)
 800b5f6:	f7f4 fe93 	bl	8000320 <memchr>
 800b5fa:	9a04      	ldr	r2, [sp, #16]
 800b5fc:	b9d8      	cbnz	r0, 800b636 <_svfiprintf_r+0xea>
 800b5fe:	06d0      	lsls	r0, r2, #27
 800b600:	bf44      	itt	mi
 800b602:	2320      	movmi	r3, #32
 800b604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b608:	0711      	lsls	r1, r2, #28
 800b60a:	bf44      	itt	mi
 800b60c:	232b      	movmi	r3, #43	@ 0x2b
 800b60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b612:	f89a 3000 	ldrb.w	r3, [sl]
 800b616:	2b2a      	cmp	r3, #42	@ 0x2a
 800b618:	d015      	beq.n	800b646 <_svfiprintf_r+0xfa>
 800b61a:	9a07      	ldr	r2, [sp, #28]
 800b61c:	4654      	mov	r4, sl
 800b61e:	2000      	movs	r0, #0
 800b620:	f04f 0c0a 	mov.w	ip, #10
 800b624:	4621      	mov	r1, r4
 800b626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b62a:	3b30      	subs	r3, #48	@ 0x30
 800b62c:	2b09      	cmp	r3, #9
 800b62e:	d94b      	bls.n	800b6c8 <_svfiprintf_r+0x17c>
 800b630:	b1b0      	cbz	r0, 800b660 <_svfiprintf_r+0x114>
 800b632:	9207      	str	r2, [sp, #28]
 800b634:	e014      	b.n	800b660 <_svfiprintf_r+0x114>
 800b636:	eba0 0308 	sub.w	r3, r0, r8
 800b63a:	fa09 f303 	lsl.w	r3, r9, r3
 800b63e:	4313      	orrs	r3, r2
 800b640:	9304      	str	r3, [sp, #16]
 800b642:	46a2      	mov	sl, r4
 800b644:	e7d2      	b.n	800b5ec <_svfiprintf_r+0xa0>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	1d19      	adds	r1, r3, #4
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	9103      	str	r1, [sp, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfbb      	ittet	lt
 800b652:	425b      	neglt	r3, r3
 800b654:	f042 0202 	orrlt.w	r2, r2, #2
 800b658:	9307      	strge	r3, [sp, #28]
 800b65a:	9307      	strlt	r3, [sp, #28]
 800b65c:	bfb8      	it	lt
 800b65e:	9204      	strlt	r2, [sp, #16]
 800b660:	7823      	ldrb	r3, [r4, #0]
 800b662:	2b2e      	cmp	r3, #46	@ 0x2e
 800b664:	d10a      	bne.n	800b67c <_svfiprintf_r+0x130>
 800b666:	7863      	ldrb	r3, [r4, #1]
 800b668:	2b2a      	cmp	r3, #42	@ 0x2a
 800b66a:	d132      	bne.n	800b6d2 <_svfiprintf_r+0x186>
 800b66c:	9b03      	ldr	r3, [sp, #12]
 800b66e:	1d1a      	adds	r2, r3, #4
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	9203      	str	r2, [sp, #12]
 800b674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b678:	3402      	adds	r4, #2
 800b67a:	9305      	str	r3, [sp, #20]
 800b67c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b740 <_svfiprintf_r+0x1f4>
 800b680:	7821      	ldrb	r1, [r4, #0]
 800b682:	2203      	movs	r2, #3
 800b684:	4650      	mov	r0, sl
 800b686:	f7f4 fe4b 	bl	8000320 <memchr>
 800b68a:	b138      	cbz	r0, 800b69c <_svfiprintf_r+0x150>
 800b68c:	9b04      	ldr	r3, [sp, #16]
 800b68e:	eba0 000a 	sub.w	r0, r0, sl
 800b692:	2240      	movs	r2, #64	@ 0x40
 800b694:	4082      	lsls	r2, r0
 800b696:	4313      	orrs	r3, r2
 800b698:	3401      	adds	r4, #1
 800b69a:	9304      	str	r3, [sp, #16]
 800b69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a0:	4824      	ldr	r0, [pc, #144]	@ (800b734 <_svfiprintf_r+0x1e8>)
 800b6a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6a6:	2206      	movs	r2, #6
 800b6a8:	f7f4 fe3a 	bl	8000320 <memchr>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d036      	beq.n	800b71e <_svfiprintf_r+0x1d2>
 800b6b0:	4b21      	ldr	r3, [pc, #132]	@ (800b738 <_svfiprintf_r+0x1ec>)
 800b6b2:	bb1b      	cbnz	r3, 800b6fc <_svfiprintf_r+0x1b0>
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	3307      	adds	r3, #7
 800b6b8:	f023 0307 	bic.w	r3, r3, #7
 800b6bc:	3308      	adds	r3, #8
 800b6be:	9303      	str	r3, [sp, #12]
 800b6c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c2:	4433      	add	r3, r6
 800b6c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6c6:	e76a      	b.n	800b59e <_svfiprintf_r+0x52>
 800b6c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6cc:	460c      	mov	r4, r1
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	e7a8      	b.n	800b624 <_svfiprintf_r+0xd8>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	9305      	str	r3, [sp, #20]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	f04f 0c0a 	mov.w	ip, #10
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6e4:	3a30      	subs	r2, #48	@ 0x30
 800b6e6:	2a09      	cmp	r2, #9
 800b6e8:	d903      	bls.n	800b6f2 <_svfiprintf_r+0x1a6>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0c6      	beq.n	800b67c <_svfiprintf_r+0x130>
 800b6ee:	9105      	str	r1, [sp, #20]
 800b6f0:	e7c4      	b.n	800b67c <_svfiprintf_r+0x130>
 800b6f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e7f0      	b.n	800b6de <_svfiprintf_r+0x192>
 800b6fc:	ab03      	add	r3, sp, #12
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	462a      	mov	r2, r5
 800b702:	4b0e      	ldr	r3, [pc, #56]	@ (800b73c <_svfiprintf_r+0x1f0>)
 800b704:	a904      	add	r1, sp, #16
 800b706:	4638      	mov	r0, r7
 800b708:	f3af 8000 	nop.w
 800b70c:	1c42      	adds	r2, r0, #1
 800b70e:	4606      	mov	r6, r0
 800b710:	d1d6      	bne.n	800b6c0 <_svfiprintf_r+0x174>
 800b712:	89ab      	ldrh	r3, [r5, #12]
 800b714:	065b      	lsls	r3, r3, #25
 800b716:	f53f af2d 	bmi.w	800b574 <_svfiprintf_r+0x28>
 800b71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b71c:	e72c      	b.n	800b578 <_svfiprintf_r+0x2c>
 800b71e:	ab03      	add	r3, sp, #12
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	462a      	mov	r2, r5
 800b724:	4b05      	ldr	r3, [pc, #20]	@ (800b73c <_svfiprintf_r+0x1f0>)
 800b726:	a904      	add	r1, sp, #16
 800b728:	4638      	mov	r0, r7
 800b72a:	f000 f879 	bl	800b820 <_printf_i>
 800b72e:	e7ed      	b.n	800b70c <_svfiprintf_r+0x1c0>
 800b730:	0800bcec 	.word	0x0800bcec
 800b734:	0800bcf6 	.word	0x0800bcf6
 800b738:	00000000 	.word	0x00000000
 800b73c:	0800b495 	.word	0x0800b495
 800b740:	0800bcf2 	.word	0x0800bcf2

0800b744 <_printf_common>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	4616      	mov	r6, r2
 800b74a:	4698      	mov	r8, r3
 800b74c:	688a      	ldr	r2, [r1, #8]
 800b74e:	690b      	ldr	r3, [r1, #16]
 800b750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b754:	4293      	cmp	r3, r2
 800b756:	bfb8      	it	lt
 800b758:	4613      	movlt	r3, r2
 800b75a:	6033      	str	r3, [r6, #0]
 800b75c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b760:	4607      	mov	r7, r0
 800b762:	460c      	mov	r4, r1
 800b764:	b10a      	cbz	r2, 800b76a <_printf_common+0x26>
 800b766:	3301      	adds	r3, #1
 800b768:	6033      	str	r3, [r6, #0]
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	0699      	lsls	r1, r3, #26
 800b76e:	bf42      	ittt	mi
 800b770:	6833      	ldrmi	r3, [r6, #0]
 800b772:	3302      	addmi	r3, #2
 800b774:	6033      	strmi	r3, [r6, #0]
 800b776:	6825      	ldr	r5, [r4, #0]
 800b778:	f015 0506 	ands.w	r5, r5, #6
 800b77c:	d106      	bne.n	800b78c <_printf_common+0x48>
 800b77e:	f104 0a19 	add.w	sl, r4, #25
 800b782:	68e3      	ldr	r3, [r4, #12]
 800b784:	6832      	ldr	r2, [r6, #0]
 800b786:	1a9b      	subs	r3, r3, r2
 800b788:	42ab      	cmp	r3, r5
 800b78a:	dc26      	bgt.n	800b7da <_printf_common+0x96>
 800b78c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b790:	6822      	ldr	r2, [r4, #0]
 800b792:	3b00      	subs	r3, #0
 800b794:	bf18      	it	ne
 800b796:	2301      	movne	r3, #1
 800b798:	0692      	lsls	r2, r2, #26
 800b79a:	d42b      	bmi.n	800b7f4 <_printf_common+0xb0>
 800b79c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7a0:	4641      	mov	r1, r8
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	47c8      	blx	r9
 800b7a6:	3001      	adds	r0, #1
 800b7a8:	d01e      	beq.n	800b7e8 <_printf_common+0xa4>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	6922      	ldr	r2, [r4, #16]
 800b7ae:	f003 0306 	and.w	r3, r3, #6
 800b7b2:	2b04      	cmp	r3, #4
 800b7b4:	bf02      	ittt	eq
 800b7b6:	68e5      	ldreq	r5, [r4, #12]
 800b7b8:	6833      	ldreq	r3, [r6, #0]
 800b7ba:	1aed      	subeq	r5, r5, r3
 800b7bc:	68a3      	ldr	r3, [r4, #8]
 800b7be:	bf0c      	ite	eq
 800b7c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7c4:	2500      	movne	r5, #0
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	bfc4      	itt	gt
 800b7ca:	1a9b      	subgt	r3, r3, r2
 800b7cc:	18ed      	addgt	r5, r5, r3
 800b7ce:	2600      	movs	r6, #0
 800b7d0:	341a      	adds	r4, #26
 800b7d2:	42b5      	cmp	r5, r6
 800b7d4:	d11a      	bne.n	800b80c <_printf_common+0xc8>
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	e008      	b.n	800b7ec <_printf_common+0xa8>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	4652      	mov	r2, sl
 800b7de:	4641      	mov	r1, r8
 800b7e0:	4638      	mov	r0, r7
 800b7e2:	47c8      	blx	r9
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d103      	bne.n	800b7f0 <_printf_common+0xac>
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f0:	3501      	adds	r5, #1
 800b7f2:	e7c6      	b.n	800b782 <_printf_common+0x3e>
 800b7f4:	18e1      	adds	r1, r4, r3
 800b7f6:	1c5a      	adds	r2, r3, #1
 800b7f8:	2030      	movs	r0, #48	@ 0x30
 800b7fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7fe:	4422      	add	r2, r4
 800b800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b808:	3302      	adds	r3, #2
 800b80a:	e7c7      	b.n	800b79c <_printf_common+0x58>
 800b80c:	2301      	movs	r3, #1
 800b80e:	4622      	mov	r2, r4
 800b810:	4641      	mov	r1, r8
 800b812:	4638      	mov	r0, r7
 800b814:	47c8      	blx	r9
 800b816:	3001      	adds	r0, #1
 800b818:	d0e6      	beq.n	800b7e8 <_printf_common+0xa4>
 800b81a:	3601      	adds	r6, #1
 800b81c:	e7d9      	b.n	800b7d2 <_printf_common+0x8e>
	...

0800b820 <_printf_i>:
 800b820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b824:	7e0f      	ldrb	r7, [r1, #24]
 800b826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b828:	2f78      	cmp	r7, #120	@ 0x78
 800b82a:	4691      	mov	r9, r2
 800b82c:	4680      	mov	r8, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	469a      	mov	sl, r3
 800b832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b836:	d807      	bhi.n	800b848 <_printf_i+0x28>
 800b838:	2f62      	cmp	r7, #98	@ 0x62
 800b83a:	d80a      	bhi.n	800b852 <_printf_i+0x32>
 800b83c:	2f00      	cmp	r7, #0
 800b83e:	f000 80d2 	beq.w	800b9e6 <_printf_i+0x1c6>
 800b842:	2f58      	cmp	r7, #88	@ 0x58
 800b844:	f000 80b9 	beq.w	800b9ba <_printf_i+0x19a>
 800b848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b84c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b850:	e03a      	b.n	800b8c8 <_printf_i+0xa8>
 800b852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b856:	2b15      	cmp	r3, #21
 800b858:	d8f6      	bhi.n	800b848 <_printf_i+0x28>
 800b85a:	a101      	add	r1, pc, #4	@ (adr r1, 800b860 <_printf_i+0x40>)
 800b85c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b860:	0800b8b9 	.word	0x0800b8b9
 800b864:	0800b8cd 	.word	0x0800b8cd
 800b868:	0800b849 	.word	0x0800b849
 800b86c:	0800b849 	.word	0x0800b849
 800b870:	0800b849 	.word	0x0800b849
 800b874:	0800b849 	.word	0x0800b849
 800b878:	0800b8cd 	.word	0x0800b8cd
 800b87c:	0800b849 	.word	0x0800b849
 800b880:	0800b849 	.word	0x0800b849
 800b884:	0800b849 	.word	0x0800b849
 800b888:	0800b849 	.word	0x0800b849
 800b88c:	0800b9cd 	.word	0x0800b9cd
 800b890:	0800b8f7 	.word	0x0800b8f7
 800b894:	0800b987 	.word	0x0800b987
 800b898:	0800b849 	.word	0x0800b849
 800b89c:	0800b849 	.word	0x0800b849
 800b8a0:	0800b9ef 	.word	0x0800b9ef
 800b8a4:	0800b849 	.word	0x0800b849
 800b8a8:	0800b8f7 	.word	0x0800b8f7
 800b8ac:	0800b849 	.word	0x0800b849
 800b8b0:	0800b849 	.word	0x0800b849
 800b8b4:	0800b98f 	.word	0x0800b98f
 800b8b8:	6833      	ldr	r3, [r6, #0]
 800b8ba:	1d1a      	adds	r2, r3, #4
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6032      	str	r2, [r6, #0]
 800b8c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e09d      	b.n	800ba08 <_printf_i+0x1e8>
 800b8cc:	6833      	ldr	r3, [r6, #0]
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	1d19      	adds	r1, r3, #4
 800b8d2:	6031      	str	r1, [r6, #0]
 800b8d4:	0606      	lsls	r6, r0, #24
 800b8d6:	d501      	bpl.n	800b8dc <_printf_i+0xbc>
 800b8d8:	681d      	ldr	r5, [r3, #0]
 800b8da:	e003      	b.n	800b8e4 <_printf_i+0xc4>
 800b8dc:	0645      	lsls	r5, r0, #25
 800b8de:	d5fb      	bpl.n	800b8d8 <_printf_i+0xb8>
 800b8e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8e4:	2d00      	cmp	r5, #0
 800b8e6:	da03      	bge.n	800b8f0 <_printf_i+0xd0>
 800b8e8:	232d      	movs	r3, #45	@ 0x2d
 800b8ea:	426d      	negs	r5, r5
 800b8ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8f0:	4859      	ldr	r0, [pc, #356]	@ (800ba58 <_printf_i+0x238>)
 800b8f2:	230a      	movs	r3, #10
 800b8f4:	e011      	b.n	800b91a <_printf_i+0xfa>
 800b8f6:	6821      	ldr	r1, [r4, #0]
 800b8f8:	6833      	ldr	r3, [r6, #0]
 800b8fa:	0608      	lsls	r0, r1, #24
 800b8fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b900:	d402      	bmi.n	800b908 <_printf_i+0xe8>
 800b902:	0649      	lsls	r1, r1, #25
 800b904:	bf48      	it	mi
 800b906:	b2ad      	uxthmi	r5, r5
 800b908:	2f6f      	cmp	r7, #111	@ 0x6f
 800b90a:	4853      	ldr	r0, [pc, #332]	@ (800ba58 <_printf_i+0x238>)
 800b90c:	6033      	str	r3, [r6, #0]
 800b90e:	bf14      	ite	ne
 800b910:	230a      	movne	r3, #10
 800b912:	2308      	moveq	r3, #8
 800b914:	2100      	movs	r1, #0
 800b916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b91a:	6866      	ldr	r6, [r4, #4]
 800b91c:	60a6      	str	r6, [r4, #8]
 800b91e:	2e00      	cmp	r6, #0
 800b920:	bfa2      	ittt	ge
 800b922:	6821      	ldrge	r1, [r4, #0]
 800b924:	f021 0104 	bicge.w	r1, r1, #4
 800b928:	6021      	strge	r1, [r4, #0]
 800b92a:	b90d      	cbnz	r5, 800b930 <_printf_i+0x110>
 800b92c:	2e00      	cmp	r6, #0
 800b92e:	d04b      	beq.n	800b9c8 <_printf_i+0x1a8>
 800b930:	4616      	mov	r6, r2
 800b932:	fbb5 f1f3 	udiv	r1, r5, r3
 800b936:	fb03 5711 	mls	r7, r3, r1, r5
 800b93a:	5dc7      	ldrb	r7, [r0, r7]
 800b93c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b940:	462f      	mov	r7, r5
 800b942:	42bb      	cmp	r3, r7
 800b944:	460d      	mov	r5, r1
 800b946:	d9f4      	bls.n	800b932 <_printf_i+0x112>
 800b948:	2b08      	cmp	r3, #8
 800b94a:	d10b      	bne.n	800b964 <_printf_i+0x144>
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	07df      	lsls	r7, r3, #31
 800b950:	d508      	bpl.n	800b964 <_printf_i+0x144>
 800b952:	6923      	ldr	r3, [r4, #16]
 800b954:	6861      	ldr	r1, [r4, #4]
 800b956:	4299      	cmp	r1, r3
 800b958:	bfde      	ittt	le
 800b95a:	2330      	movle	r3, #48	@ 0x30
 800b95c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b960:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b964:	1b92      	subs	r2, r2, r6
 800b966:	6122      	str	r2, [r4, #16]
 800b968:	f8cd a000 	str.w	sl, [sp]
 800b96c:	464b      	mov	r3, r9
 800b96e:	aa03      	add	r2, sp, #12
 800b970:	4621      	mov	r1, r4
 800b972:	4640      	mov	r0, r8
 800b974:	f7ff fee6 	bl	800b744 <_printf_common>
 800b978:	3001      	adds	r0, #1
 800b97a:	d14a      	bne.n	800ba12 <_printf_i+0x1f2>
 800b97c:	f04f 30ff 	mov.w	r0, #4294967295
 800b980:	b004      	add	sp, #16
 800b982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	f043 0320 	orr.w	r3, r3, #32
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	4833      	ldr	r0, [pc, #204]	@ (800ba5c <_printf_i+0x23c>)
 800b990:	2778      	movs	r7, #120	@ 0x78
 800b992:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	6831      	ldr	r1, [r6, #0]
 800b99a:	061f      	lsls	r7, r3, #24
 800b99c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9a0:	d402      	bmi.n	800b9a8 <_printf_i+0x188>
 800b9a2:	065f      	lsls	r7, r3, #25
 800b9a4:	bf48      	it	mi
 800b9a6:	b2ad      	uxthmi	r5, r5
 800b9a8:	6031      	str	r1, [r6, #0]
 800b9aa:	07d9      	lsls	r1, r3, #31
 800b9ac:	bf44      	itt	mi
 800b9ae:	f043 0320 	orrmi.w	r3, r3, #32
 800b9b2:	6023      	strmi	r3, [r4, #0]
 800b9b4:	b11d      	cbz	r5, 800b9be <_printf_i+0x19e>
 800b9b6:	2310      	movs	r3, #16
 800b9b8:	e7ac      	b.n	800b914 <_printf_i+0xf4>
 800b9ba:	4827      	ldr	r0, [pc, #156]	@ (800ba58 <_printf_i+0x238>)
 800b9bc:	e7e9      	b.n	800b992 <_printf_i+0x172>
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	f023 0320 	bic.w	r3, r3, #32
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	e7f6      	b.n	800b9b6 <_printf_i+0x196>
 800b9c8:	4616      	mov	r6, r2
 800b9ca:	e7bd      	b.n	800b948 <_printf_i+0x128>
 800b9cc:	6833      	ldr	r3, [r6, #0]
 800b9ce:	6825      	ldr	r5, [r4, #0]
 800b9d0:	6961      	ldr	r1, [r4, #20]
 800b9d2:	1d18      	adds	r0, r3, #4
 800b9d4:	6030      	str	r0, [r6, #0]
 800b9d6:	062e      	lsls	r6, r5, #24
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	d501      	bpl.n	800b9e0 <_printf_i+0x1c0>
 800b9dc:	6019      	str	r1, [r3, #0]
 800b9de:	e002      	b.n	800b9e6 <_printf_i+0x1c6>
 800b9e0:	0668      	lsls	r0, r5, #25
 800b9e2:	d5fb      	bpl.n	800b9dc <_printf_i+0x1bc>
 800b9e4:	8019      	strh	r1, [r3, #0]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	4616      	mov	r6, r2
 800b9ec:	e7bc      	b.n	800b968 <_printf_i+0x148>
 800b9ee:	6833      	ldr	r3, [r6, #0]
 800b9f0:	1d1a      	adds	r2, r3, #4
 800b9f2:	6032      	str	r2, [r6, #0]
 800b9f4:	681e      	ldr	r6, [r3, #0]
 800b9f6:	6862      	ldr	r2, [r4, #4]
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7f4 fc90 	bl	8000320 <memchr>
 800ba00:	b108      	cbz	r0, 800ba06 <_printf_i+0x1e6>
 800ba02:	1b80      	subs	r0, r0, r6
 800ba04:	6060      	str	r0, [r4, #4]
 800ba06:	6863      	ldr	r3, [r4, #4]
 800ba08:	6123      	str	r3, [r4, #16]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba10:	e7aa      	b.n	800b968 <_printf_i+0x148>
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	4632      	mov	r2, r6
 800ba16:	4649      	mov	r1, r9
 800ba18:	4640      	mov	r0, r8
 800ba1a:	47d0      	blx	sl
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	d0ad      	beq.n	800b97c <_printf_i+0x15c>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	079b      	lsls	r3, r3, #30
 800ba24:	d413      	bmi.n	800ba4e <_printf_i+0x22e>
 800ba26:	68e0      	ldr	r0, [r4, #12]
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	4298      	cmp	r0, r3
 800ba2c:	bfb8      	it	lt
 800ba2e:	4618      	movlt	r0, r3
 800ba30:	e7a6      	b.n	800b980 <_printf_i+0x160>
 800ba32:	2301      	movs	r3, #1
 800ba34:	4632      	mov	r2, r6
 800ba36:	4649      	mov	r1, r9
 800ba38:	4640      	mov	r0, r8
 800ba3a:	47d0      	blx	sl
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	d09d      	beq.n	800b97c <_printf_i+0x15c>
 800ba40:	3501      	adds	r5, #1
 800ba42:	68e3      	ldr	r3, [r4, #12]
 800ba44:	9903      	ldr	r1, [sp, #12]
 800ba46:	1a5b      	subs	r3, r3, r1
 800ba48:	42ab      	cmp	r3, r5
 800ba4a:	dcf2      	bgt.n	800ba32 <_printf_i+0x212>
 800ba4c:	e7eb      	b.n	800ba26 <_printf_i+0x206>
 800ba4e:	2500      	movs	r5, #0
 800ba50:	f104 0619 	add.w	r6, r4, #25
 800ba54:	e7f5      	b.n	800ba42 <_printf_i+0x222>
 800ba56:	bf00      	nop
 800ba58:	0800bcfd 	.word	0x0800bcfd
 800ba5c:	0800bd0e 	.word	0x0800bd0e

0800ba60 <memmove>:
 800ba60:	4288      	cmp	r0, r1
 800ba62:	b510      	push	{r4, lr}
 800ba64:	eb01 0402 	add.w	r4, r1, r2
 800ba68:	d902      	bls.n	800ba70 <memmove+0x10>
 800ba6a:	4284      	cmp	r4, r0
 800ba6c:	4623      	mov	r3, r4
 800ba6e:	d807      	bhi.n	800ba80 <memmove+0x20>
 800ba70:	1e43      	subs	r3, r0, #1
 800ba72:	42a1      	cmp	r1, r4
 800ba74:	d008      	beq.n	800ba88 <memmove+0x28>
 800ba76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba7e:	e7f8      	b.n	800ba72 <memmove+0x12>
 800ba80:	4402      	add	r2, r0
 800ba82:	4601      	mov	r1, r0
 800ba84:	428a      	cmp	r2, r1
 800ba86:	d100      	bne.n	800ba8a <memmove+0x2a>
 800ba88:	bd10      	pop	{r4, pc}
 800ba8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba92:	e7f7      	b.n	800ba84 <memmove+0x24>

0800ba94 <_sbrk_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	4d06      	ldr	r5, [pc, #24]	@ (800bab0 <_sbrk_r+0x1c>)
 800ba98:	2300      	movs	r3, #0
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	4608      	mov	r0, r1
 800ba9e:	602b      	str	r3, [r5, #0]
 800baa0:	f7f5 fed6 	bl	8001850 <_sbrk>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_sbrk_r+0x1a>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_sbrk_r+0x1a>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	240012b0 	.word	0x240012b0

0800bab4 <memcpy>:
 800bab4:	440a      	add	r2, r1
 800bab6:	4291      	cmp	r1, r2
 800bab8:	f100 33ff 	add.w	r3, r0, #4294967295
 800babc:	d100      	bne.n	800bac0 <memcpy+0xc>
 800babe:	4770      	bx	lr
 800bac0:	b510      	push	{r4, lr}
 800bac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baca:	4291      	cmp	r1, r2
 800bacc:	d1f9      	bne.n	800bac2 <memcpy+0xe>
 800bace:	bd10      	pop	{r4, pc}

0800bad0 <_realloc_r>:
 800bad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad4:	4680      	mov	r8, r0
 800bad6:	4615      	mov	r5, r2
 800bad8:	460c      	mov	r4, r1
 800bada:	b921      	cbnz	r1, 800bae6 <_realloc_r+0x16>
 800badc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bae0:	4611      	mov	r1, r2
 800bae2:	f7ff bc4b 	b.w	800b37c <_malloc_r>
 800bae6:	b92a      	cbnz	r2, 800baf4 <_realloc_r+0x24>
 800bae8:	f7ff fbdc 	bl	800b2a4 <_free_r>
 800baec:	2400      	movs	r4, #0
 800baee:	4620      	mov	r0, r4
 800baf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf4:	f000 f81a 	bl	800bb2c <_malloc_usable_size_r>
 800baf8:	4285      	cmp	r5, r0
 800bafa:	4606      	mov	r6, r0
 800bafc:	d802      	bhi.n	800bb04 <_realloc_r+0x34>
 800bafe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb02:	d8f4      	bhi.n	800baee <_realloc_r+0x1e>
 800bb04:	4629      	mov	r1, r5
 800bb06:	4640      	mov	r0, r8
 800bb08:	f7ff fc38 	bl	800b37c <_malloc_r>
 800bb0c:	4607      	mov	r7, r0
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d0ec      	beq.n	800baec <_realloc_r+0x1c>
 800bb12:	42b5      	cmp	r5, r6
 800bb14:	462a      	mov	r2, r5
 800bb16:	4621      	mov	r1, r4
 800bb18:	bf28      	it	cs
 800bb1a:	4632      	movcs	r2, r6
 800bb1c:	f7ff ffca 	bl	800bab4 <memcpy>
 800bb20:	4621      	mov	r1, r4
 800bb22:	4640      	mov	r0, r8
 800bb24:	f7ff fbbe 	bl	800b2a4 <_free_r>
 800bb28:	463c      	mov	r4, r7
 800bb2a:	e7e0      	b.n	800baee <_realloc_r+0x1e>

0800bb2c <_malloc_usable_size_r>:
 800bb2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb30:	1f18      	subs	r0, r3, #4
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfbc      	itt	lt
 800bb36:	580b      	ldrlt	r3, [r1, r0]
 800bb38:	18c0      	addlt	r0, r0, r3
 800bb3a:	4770      	bx	lr

0800bb3c <_init>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	bf00      	nop
 800bb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb42:	bc08      	pop	{r3}
 800bb44:	469e      	mov	lr, r3
 800bb46:	4770      	bx	lr

0800bb48 <_fini>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	bf00      	nop
 800bb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4e:	bc08      	pop	{r3}
 800bb50:	469e      	mov	lr, r3
 800bb52:	4770      	bx	lr
