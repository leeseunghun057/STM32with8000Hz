
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800b170  0800b170  0000c170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b32c  0800b32c  0000c32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b334  0800b334  0000c334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b338  0800b338  0000c338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000168  24000000  0800b33c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bf4  24000168  0800b4a4  0000d168  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000d5c  0800b4a4  0000dd5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001932e  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003695  00000000  00000000  000264c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001190  00000000  00000000  00029b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d5c  00000000  00000000  0002acf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000105ca  00000000  00000000  0002ba4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000064e2  00000000  00000000  0003c016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000424f8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004dc0  00000000  00000000  0004253c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  000472fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000168 	.word	0x24000168
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b158 	.word	0x0800b158

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400016c 	.word	0x2400016c
 800030c:	0800b158 	.word	0x0800b158

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:
extern USBD_HandleTypeDef hUsbDeviceHS;



MatrixScanResult MatrixScan()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0be      	sub	sp, #248	@ 0xf8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	uint32_t Last_gpioA_state = gpioA_state;
 80006b8:	4bb6      	ldr	r3, [pc, #728]	@ (8000994 <MatrixScan+0x2e4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	uint32_t Last_gpioB_state = gpioB_state;
 80006c0:	4bb5      	ldr	r3, [pc, #724]	@ (8000998 <MatrixScan+0x2e8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	uint32_t Last_gpioC_state = gpioC_state;
 80006c8:	4bb4      	ldr	r3, [pc, #720]	@ (800099c <MatrixScan+0x2ec>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	uint32_t Last_gpioD_state = gpioD_state;
 80006d0:	4bb3      	ldr	r3, [pc, #716]	@ (80009a0 <MatrixScan+0x2f0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	uint32_t Last_gpioE_state = gpioE_state;
 80006d8:	4bb2      	ldr	r3, [pc, #712]	@ (80009a4 <MatrixScan+0x2f4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

    uint32_t gpioA_state = GPIOA->IDR; // GPIOA의 모든 핀 상태
 80006e0:	4bb1      	ldr	r3, [pc, #708]	@ (80009a8 <MatrixScan+0x2f8>)
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    uint32_t gpioB_state = GPIOB->IDR; // GPIOB의 모든 핀 상태
 80006e8:	4bb0      	ldr	r3, [pc, #704]	@ (80009ac <MatrixScan+0x2fc>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint32_t gpioC_state = GPIOC->IDR; // GPIOC의 모든 핀 상태
 80006f0:	4baf      	ldr	r3, [pc, #700]	@ (80009b0 <MatrixScan+0x300>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint32_t gpioD_state = GPIOD->IDR; // GPIOD의 모든 핀 상태
 80006f8:	4bae      	ldr	r3, [pc, #696]	@ (80009b4 <MatrixScan+0x304>)
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint32_t gpioE_state = GPIOE->IDR; // GPIOE의 모든 핀 상태
 8000700:	4bad      	ldr	r3, [pc, #692]	@ (80009b8 <MatrixScan+0x308>)
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    uint32_t changedPinA = gpioA_state ^ Last_gpioA_state; //변한 값만 1로 바귐
 8000708:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800070c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000710:	4053      	eors	r3, r2
 8000712:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    uint32_t changedPinB = gpioB_state ^ Last_gpioB_state;
 8000716:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800071a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800071e:	4053      	eors	r3, r2
 8000720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    uint32_t changedPinC = gpioC_state ^ Last_gpioC_state;
 8000724:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8000728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800072c:	4053      	eors	r3, r2
 800072e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 8000732:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000736:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800073a:	4053      	eors	r3, r2
 800073c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 8000740:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000748:	4053      	eors	r3, r2
 800074a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4



    if ( changedPinA != 0 )
 800074e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000752:	2b00      	cmp	r3, #0
 8000754:	d02d      	beq.n	80007b2 <MatrixScan+0x102>
    {
        int WhereIsOne = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        while ( changedPinA != 1 )
 800075c:	e009      	b.n	8000772 <MatrixScan+0xc2>
        {
        	changedPinA = changedPinA >> 1;
 800075e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000762:	085b      	lsrs	r3, r3, #1
 8000764:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            WhereIsOne++;
 8000768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800076c:	3301      	adds	r3, #1
 800076e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        while ( changedPinA != 1 )
 8000772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000776:	2b01      	cmp	r3, #1
 8000778:	d1f1      	bne.n	800075e <MatrixScan+0xae>
        }

        MatrixScanResult result;

        uint8_t bitValue = (changedPinA >> WhereIsOne) & 1;
 800077a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800077e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000782:	fa22 f303 	lsr.w	r3, r2, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        result.WhereIsOne = WhereIsOne;
 8000790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000794:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        result.PinState = bitValue;
 8000798:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800079c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        return result;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	461a      	mov	r2, r3
 80007a4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80007a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007ac:	e882 0003 	stmia.w	r2, {r0, r1}

    result.WhereIsOne = -1;
    result.PinState = -1;

    return result;
}
 80007b0:	e0eb      	b.n	800098a <MatrixScan+0x2da>
    else if ( changedPinB != 0)
 80007b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d02e      	beq.n	8000818 <MatrixScan+0x168>
        int WhereIsOne = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        while ( changedPinB != 1 )
 80007c0:	e009      	b.n	80007d6 <MatrixScan+0x126>
        	changedPinB = changedPinB >> 1;
 80007c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80007c6:	085b      	lsrs	r3, r3, #1
 80007c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            WhereIsOne++;
 80007cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80007d0:	3301      	adds	r3, #1
 80007d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        while ( changedPinB != 1 )
 80007d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d1f1      	bne.n	80007c2 <MatrixScan+0x112>
        uint8_t bitValue = (changedPinB >> WhereIsOne) & 1;
 80007de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80007e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80007e6:	fa22 f303 	lsr.w	r3, r2, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
        result.WhereIsOne = WhereIsOne+16;
 80007f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80007f8:	3310      	adds	r3, #16
 80007fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        result.PinState = bitValue;
 80007fe:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 8000802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        return result;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	461a      	mov	r2, r3
 800080a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800080e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000812:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000816:	e0b8      	b.n	800098a <MatrixScan+0x2da>
    else if ( changedPinC != 0)
 8000818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800081c:	2b00      	cmp	r3, #0
 800081e:	d02e      	beq.n	800087e <MatrixScan+0x1ce>
        int WhereIsOne = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        while ( changedPinC != 1 )
 8000826:	e009      	b.n	800083c <MatrixScan+0x18c>
        	changedPinC = changedPinC >> 1;
 8000828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            WhereIsOne++;
 8000832:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000836:	3301      	adds	r3, #1
 8000838:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        while ( changedPinC != 1 )
 800083c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000840:	2b01      	cmp	r3, #1
 8000842:	d1f1      	bne.n	8000828 <MatrixScan+0x178>
        uint8_t bitValue = (changedPinC >> WhereIsOne) & 1;
 8000844:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000848:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800084c:	fa22 f303 	lsr.w	r3, r2, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
        result.WhereIsOne = WhereIsOne + 32;
 800085a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800085e:	3320      	adds	r3, #32
 8000860:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        result.PinState = bitValue;
 8000864:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8000868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        return result;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	461a      	mov	r2, r3
 8000870:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000874:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000878:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800087c:	e085      	b.n	800098a <MatrixScan+0x2da>
    else if ( changedPinD != 0)
 800087e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000882:	2b00      	cmp	r3, #0
 8000884:	d02c      	beq.n	80008e0 <MatrixScan+0x230>
        int WhereIsOne = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        while ( changedPinD != 1 )
 800088c:	e009      	b.n	80008a2 <MatrixScan+0x1f2>
        	changedPinD = changedPinD >> 1;
 800088e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000892:	085b      	lsrs	r3, r3, #1
 8000894:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            WhereIsOne++;
 8000898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800089c:	3301      	adds	r3, #1
 800089e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        while ( changedPinD != 1 )
 80008a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d1f1      	bne.n	800088e <MatrixScan+0x1de>
        uint8_t bitValue = (changedPinD >> WhereIsOne) & 1;
 80008aa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80008b2:	fa22 f303 	lsr.w	r3, r2, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
        result.WhereIsOne = WhereIsOne + 48;
 80008c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80008c4:	3330      	adds	r3, #48	@ 0x30
 80008c6:	67bb      	str	r3, [r7, #120]	@ 0x78
        result.PinState = bitValue;
 80008c8:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80008cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
        return result;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	461a      	mov	r2, r3
 80008d2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80008d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008da:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008de:	e054      	b.n	800098a <MatrixScan+0x2da>
    else if ( changedPinE != 0)
 80008e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d02c      	beq.n	8000942 <MatrixScan+0x292>
        int WhereIsOne = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        while ( changedPinE != 1 )
 80008ee:	e009      	b.n	8000904 <MatrixScan+0x254>
        	changedPinE = changedPinE >> 1;
 80008f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            WhereIsOne++;
 80008fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80008fe:	3301      	adds	r3, #1
 8000900:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        while ( changedPinE != 1 )
 8000904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000908:	2b01      	cmp	r3, #1
 800090a:	d1f1      	bne.n	80008f0 <MatrixScan+0x240>
        uint8_t bitValue = (changedPinE >> WhereIsOne) & 1;
 800090c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000910:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        result.WhereIsOne = WhereIsOne + 64;
 8000922:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000926:	3340      	adds	r3, #64	@ 0x40
 8000928:	673b      	str	r3, [r7, #112]	@ 0x70
        result.PinState = bitValue;
 800092a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800092e:	677b      	str	r3, [r7, #116]	@ 0x74
        return result;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	461a      	mov	r2, r3
 8000934:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000938:	e893 0003 	ldmia.w	r3, {r0, r1}
 800093c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000940:	e023      	b.n	800098a <MatrixScan+0x2da>
        sprintf(message, "Not Changed");
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	491d      	ldr	r1, [pc, #116]	@ (80009bc <MatrixScan+0x30c>)
 8000948:	4618      	mov	r0, r3
 800094a:	f009 ff65 	bl	800a818 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fcdc 	bl	8000310 <strlen>
 8000958:	4603      	mov	r3, r0
 800095a:	b29a      	uxth	r2, r3
 800095c:	f107 010c 	add.w	r1, r7, #12
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	4816      	ldr	r0, [pc, #88]	@ (80009c0 <MatrixScan+0x310>)
 8000966:	f004 ffeb 	bl	8005940 <HAL_UART_Transmit>
    result.WhereIsOne = -1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    result.PinState = -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    return result;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	461a      	mov	r2, r3
 800097e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000982:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000986:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	37f8      	adds	r7, #248	@ 0xf8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	24000220 	.word	0x24000220
 8000998:	24000224 	.word	0x24000224
 800099c:	24000228 	.word	0x24000228
 80009a0:	2400022c 	.word	0x2400022c
 80009a4:	24000230 	.word	0x24000230
 80009a8:	58020000 	.word	0x58020000
 80009ac:	58020400 	.word	0x58020400
 80009b0:	58020800 	.word	0x58020800
 80009b4:	58020c00 	.word	0x58020c00
 80009b8:	58021000 	.word	0x58021000
 80009bc:	0800b170 	.word	0x0800b170
 80009c0:	24000184 	.word	0x24000184

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09e      	sub	sp, #120	@ 0x78
 80009c8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009ca:	f000 f991 	bl	8000cf0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f000 fb87 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f865 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 f91f 	bl	8000c18 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80009da:	f009 fa61 	bl	8009ea0 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80009de:	f000 f8cf 	bl	8000b80 <MX_UART4_Init>
    {
        //Timer = HAL_GetTick(); // Get Current Time

    	//CheckScanrate();

        if (HAL_GetTick() - LastTimer >= 10000)
 80009e2:	f000 fc03 	bl	80011ec <HAL_GetTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a26      	ldr	r2, [pc, #152]	@ (8000a84 <main+0xc0>)
 80009ea:	6812      	ldr	r2, [r2, #0]
 80009ec:	1a9b      	subs	r3, r3, r2
 80009ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d924      	bls.n	8000a40 <main+0x7c>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", HAL_GetTick(), Scanrate / 10);
 80009f6:	f000 fbf9 	bl	80011ec <HAL_GetTick>
 80009fa:	4601      	mov	r1, r0
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <main+0xc4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <main+0xc8>)
 8000a02:	fb82 0203 	smull	r0, r2, r2, r3
 8000a06:	1092      	asrs	r2, r2, #2
 8000a08:	17db      	asrs	r3, r3, #31
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	1d38      	adds	r0, r7, #4
 8000a0e:	460a      	mov	r2, r1
 8000a10:	491f      	ldr	r1, [pc, #124]	@ (8000a90 <main+0xcc>)
 8000a12:	f009 ff01 	bl	800a818 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fc79 	bl	8000310 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	1d39      	adds	r1, r7, #4
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	481a      	ldr	r0, [pc, #104]	@ (8000a94 <main+0xd0>)
 8000a2a:	f004 ff89 	bl	8005940 <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 8000a2e:	f000 fbdd 	bl	80011ec <HAL_GetTick>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <main+0xc0>)
 8000a38:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <main+0xc4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <main+0xc4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <main+0xc4>)
 8000a48:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


        MatrixScanResult Matrix = MatrixScan();
 8000a4a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fe2e 	bl	80006b0 <MatrixScan>
        sprintf(message, "1 = %d \n\r", Temp);
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY); */


        char message[100];
        sprintf(message, "1 = %d |  2 =  %d | 3 = %d \n\r", Matrix.WhereIsOne, Matrix.PinState, gpioD_state);
 8000a54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000a56:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <main+0xd4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1d38      	adds	r0, r7, #4
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	460b      	mov	r3, r1
 8000a62:	490e      	ldr	r1, [pc, #56]	@ (8000a9c <main+0xd8>)
 8000a64:	f009 fed8 	bl	800a818 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fc50 	bl	8000310 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	1d39      	adds	r1, r7, #4
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <main+0xd0>)
 8000a7c:	f004 ff60 	bl	8005940 <HAL_UART_Transmit>
    {
 8000a80:	e7af      	b.n	80009e2 <main+0x1e>
 8000a82:	bf00      	nop
 8000a84:	2400021c 	.word	0x2400021c
 8000a88:	24000218 	.word	0x24000218
 8000a8c:	66666667 	.word	0x66666667
 8000a90:	0800b230 	.word	0x0800b230
 8000a94:	24000184 	.word	0x24000184
 8000a98:	2400022c 	.word	0x2400022c
 8000a9c:	0800b258 	.word	0x0800b258

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b09c      	sub	sp, #112	@ 0x70
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aaa:	224c      	movs	r2, #76	@ 0x4c
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f009 fed2 	bl	800a858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f009 fecc 	bl	800a858 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f002 f97b 	bl	8002dbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <SystemClock_Config+0xdc>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	4a2b      	ldr	r2, [pc, #172]	@ (8000b7c <SystemClock_Config+0xdc>)
 8000ad0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ad4:	6193      	str	r3, [r2, #24]
 8000ad6:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <SystemClock_Config+0xdc>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ae2:	bf00      	nop
 8000ae4:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <SystemClock_Config+0xdc>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000af0:	d1f8      	bne.n	8000ae4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000af2:	2321      	movs	r3, #33	@ 0x21
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000afc:	2301      	movs	r3, #1
 8000afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b08:	2305      	movs	r3, #5
 8000b0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8000b0c:	236e      	movs	r3, #110	@ 0x6e
 8000b0e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 f98f 	bl	8002e50 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b38:	f000 f906 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	233f      	movs	r3, #63	@ 0x3f
 8000b3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	2303      	movs	r3, #3
 8000b42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b4c:	2340      	movs	r3, #64	@ 0x40
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b50:	2340      	movs	r3, #64	@ 0x40
 8000b52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000b5a:	2350      	movs	r3, #80	@ 0x50
 8000b5c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2103      	movs	r1, #3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fd4e 	bl	8003604 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b6e:	f000 f8eb 	bl	8000d48 <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3770      	adds	r7, #112	@ 0x70
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58024800 	.word	0x58024800

08000b80 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000b86:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <MX_UART4_Init+0x94>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bc8:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000bca:	f004 fe69 	bl	80058a0 <HAL_UART_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f000 f8b8 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000bdc:	f006 f803 	bl	8006be6 <HAL_UARTEx_SetTxFifoThreshold>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f000 f8af 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000bee:	f006 f838 	bl	8006c62 <HAL_UARTEx_SetRxFifoThreshold>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f000 f8a6 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <MX_UART4_Init+0x90>)
 8000bfe:	f005 ffb9 	bl	8006b74 <HAL_UARTEx_DisableFifoMode>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f000 f89e 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000184 	.word	0x24000184
 8000c14:	40004c00 	.word	0x40004c00

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c34:	4a2c      	ldr	r2, [pc, #176]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c52:	4a25      	ldr	r2, [pc, #148]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_GPIO_Init+0xd0>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cc8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_GPIO_Init+0xd4>)
 8000cda:	f000 fc3f 	bl	800155c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	@ 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020c00 	.word	0x58020c00

08000cf0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d02:	f000 fbb3 	bl	800146c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d06:	2301      	movs	r3, #1
 8000d08:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d12:	231f      	movs	r3, #31
 8000d14:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d16:	2387      	movs	r3, #135	@ 0x87
 8000d18:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d26:	2301      	movs	r3, #1
 8000d28:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d32:	463b      	mov	r3, r7
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fbd1 	bl	80014dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d3a:	2004      	movs	r0, #4
 8000d3c:	f000 fbae 	bl	800149c <HAL_MPU_Enable>

}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d60:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0b8      	sub	sp, #224	@ 0xe0
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	22b8      	movs	r2, #184	@ 0xb8
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f009 fd55 	bl	800a858 <memset>
  if(huart->Instance==UART4)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a26      	ldr	r2, [pc, #152]	@ (8000e4c <HAL_UART_MspInit+0xc4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d145      	bne.n	8000e44 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000db8:	f04f 0202 	mov.w	r2, #2
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 ffa4 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dda:	f7ff ffb5 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dde:	4b1c      	ldr	r3, [pc, #112]	@ (8000e50 <HAL_UART_MspInit+0xc8>)
 8000de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000de4:	4a1a      	ldr	r2, [pc, #104]	@ (8000e50 <HAL_UART_MspInit+0xc8>)
 8000de6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <HAL_UART_MspInit+0xc8>)
 8000df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000df4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <HAL_UART_MspInit+0xc8>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <HAL_UART_MspInit+0xc8>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0c:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <HAL_UART_MspInit+0xc8>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e32:	2308      	movs	r3, #8
 8000e34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <HAL_UART_MspInit+0xcc>)
 8000e40:	f000 fb8c 	bl	800155c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000e44:	bf00      	nop
 8000e46:	37e0      	adds	r7, #224	@ 0xe0
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40004c00 	.word	0x40004c00
 8000e50:	58024400 	.word	0x58024400
 8000e54:	58020000 	.word	0x58020000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <NMI_Handler+0x4>

08000e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <MemManage_Handler+0x4>

08000e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 f989 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <OTG_HS_IRQHandler+0x10>)
 8000ebe:	f000 fe36 	bl	8001b2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2400071c 	.word	0x2400071c

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f009 fcb4 	bl	800a868 <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	24050000 	.word	0x24050000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	24000234 	.word	0x24000234
 8000f34:	24000d60 	.word	0x24000d60

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001038 <SystemInit+0x100>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a3d      	ldr	r2, [pc, #244]	@ (8001038 <SystemInit+0x100>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800103c <SystemInit+0x104>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d807      	bhi.n	8000f68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f58:	4b38      	ldr	r3, [pc, #224]	@ (800103c <SystemInit+0x104>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f023 030f 	bic.w	r3, r3, #15
 8000f60:	4a36      	ldr	r2, [pc, #216]	@ (800103c <SystemInit+0x104>)
 8000f62:	f043 0307 	orr.w	r3, r3, #7
 8000f66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f68:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <SystemInit+0x108>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a34      	ldr	r2, [pc, #208]	@ (8001040 <SystemInit+0x108>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f74:	4b32      	ldr	r3, [pc, #200]	@ (8001040 <SystemInit+0x108>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f7a:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <SystemInit+0x108>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4930      	ldr	r1, [pc, #192]	@ (8001040 <SystemInit+0x108>)
 8000f80:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <SystemInit+0x10c>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f86:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <SystemInit+0x104>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f92:	4b2a      	ldr	r3, [pc, #168]	@ (800103c <SystemInit+0x104>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 030f 	bic.w	r3, r3, #15
 8000f9a:	4a28      	ldr	r2, [pc, #160]	@ (800103c <SystemInit+0x104>)
 8000f9c:	f043 0307 	orr.w	r3, r3, #7
 8000fa0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fa2:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <SystemInit+0x108>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <SystemInit+0x108>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fae:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <SystemInit+0x108>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <SystemInit+0x108>)
 8000fb6:	4a24      	ldr	r2, [pc, #144]	@ (8001048 <SystemInit+0x110>)
 8000fb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fba:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <SystemInit+0x108>)
 8000fbc:	4a23      	ldr	r2, [pc, #140]	@ (800104c <SystemInit+0x114>)
 8000fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <SystemInit+0x108>)
 8000fc2:	4a23      	ldr	r2, [pc, #140]	@ (8001050 <SystemInit+0x118>)
 8000fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <SystemInit+0x108>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <SystemInit+0x108>)
 8000fce:	4a20      	ldr	r2, [pc, #128]	@ (8001050 <SystemInit+0x118>)
 8000fd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <SystemInit+0x108>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <SystemInit+0x108>)
 8000fda:	4a1d      	ldr	r2, [pc, #116]	@ (8001050 <SystemInit+0x118>)
 8000fdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <SystemInit+0x108>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <SystemInit+0x108>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a15      	ldr	r2, [pc, #84]	@ (8001040 <SystemInit+0x108>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <SystemInit+0x108>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <SystemInit+0x108>)
 8000ff8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d113      	bne.n	800102c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <SystemInit+0x108>)
 8001006:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800100a:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <SystemInit+0x108>)
 800100c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001010:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <SystemInit+0x11c>)
 8001016:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800101a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <SystemInit+0x108>)
 800101e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001022:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <SystemInit+0x108>)
 8001024:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001028:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00
 800103c:	52002000 	.word	0x52002000
 8001040:	58024400 	.word	0x58024400
 8001044:	eaf6ed7f 	.word	0xeaf6ed7f
 8001048:	02020200 	.word	0x02020200
 800104c:	01ff0000 	.word	0x01ff0000
 8001050:	01010280 	.word	0x01010280
 8001054:	52004000 	.word	0x52004000

08001058 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <ExitRun0Mode+0x2c>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <ExitRun0Mode+0x2c>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001068:	bf00      	nop
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <ExitRun0Mode+0x2c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f9      	beq.n	800106a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	58024800 	.word	0x58024800

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010c4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800108c:	f7ff ffe4 	bl	8001058 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001090:	f7ff ff52 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	@ (80010cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	@ (80010d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f009 fbdb 	bl	800a874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fc81 	bl	80009c4 <main>
  bx  lr
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010cc:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 80010d0:	0800b33c 	.word	0x0800b33c
  ldr r2, =_sbss
 80010d4:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 80010d8:	24000d5c 	.word	0x24000d5c

080010dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC3_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e6:	2003      	movs	r0, #3
 80010e8:	f000 f980 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010ec:	f002 fc40 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 80010f0:	4602      	mov	r2, r0
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_Init+0x68>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	4913      	ldr	r1, [pc, #76]	@ (800114c <HAL_Init+0x6c>)
 80010fe:	5ccb      	ldrb	r3, [r1, r3]
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <HAL_Init+0x68>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <HAL_Init+0x6c>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_Init+0x70>)
 8001122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001124:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <HAL_Init+0x74>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f814 	bl	8001158 <HAL_InitTick>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e002      	b.n	8001140 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800113a:	f7ff fe0b 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58024400 	.word	0x58024400
 800114c:	0800b2c0 	.word	0x0800b2c0
 8001150:	24000004 	.word	0x24000004
 8001154:	24000000 	.word	0x24000000

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_InitTick+0x60>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e021      	b.n	80011b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_InitTick+0x64>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <HAL_InitTick+0x60>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f965 	bl	8001452 <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f92f 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <HAL_InitTick+0x68>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2400000c 	.word	0x2400000c
 80011bc:	24000000 	.word	0x24000000
 80011c0:	24000008 	.word	0x24000008

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2400000c 	.word	0x2400000c
 80011e8:	24000238 	.word	0x24000238

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	24000238 	.word	0x24000238

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2400000c 	.word	0x2400000c

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <__NVIC_SetPriorityGrouping+0x40>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	4313      	orrs	r3, r2
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	@ (800128c <__NVIC_SetPriorityGrouping+0x40>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	05fa0000 	.word	0x05fa0000

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4907      	ldr	r1, [pc, #28]	@ (80012e8 <__NVIC_EnableIRQ+0x38>)
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	@ (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	@ (800133c <__NVIC_SetPriority+0x50>)
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	@ 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	@ 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff29 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff40 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff90 	bl	8001340 <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5f 	bl	80012ec <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff33 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa4 	bl	80013a8 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001470:	f3bf 8f5f 	dmb	sy
}
 8001474:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <HAL_MPU_Disable+0x28>)
 8001478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147a:	4a06      	ldr	r2, [pc, #24]	@ (8001494 <HAL_MPU_Disable+0x28>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001480:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_MPU_Disable+0x2c>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	e000ed90 	.word	0xe000ed90

0800149c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014a4:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <HAL_MPU_Enable+0x38>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_MPU_Enable+0x3c>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	4a09      	ldr	r2, [pc, #36]	@ (80014d8 <HAL_MPU_Enable+0x3c>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014ba:	f3bf 8f4f 	dsb	sy
}
 80014be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014c0:	f3bf 8f6f 	isb	sy
}
 80014c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed90 	.word	0xe000ed90
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	785a      	ldrb	r2, [r3, #1]
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_MPU_ConfigRegion+0x7c>)
 80014ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <HAL_MPU_ConfigRegion+0x7c>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a19      	ldr	r2, [pc, #100]	@ (8001558 <HAL_MPU_ConfigRegion+0x7c>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014f8:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <HAL_MPU_ConfigRegion+0x7c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7b1b      	ldrb	r3, [r3, #12]
 8001504:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7adb      	ldrb	r3, [r3, #11]
 800150a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800150c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7a9b      	ldrb	r3, [r3, #10]
 8001512:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001514:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7b5b      	ldrb	r3, [r3, #13]
 800151a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800151c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7b9b      	ldrb	r3, [r3, #14]
 8001522:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001524:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7bdb      	ldrb	r3, [r3, #15]
 800152a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800152c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7a5b      	ldrb	r3, [r3, #9]
 8001532:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001534:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7a1b      	ldrb	r3, [r3, #8]
 800153a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800153c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001544:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001546:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001548:	6113      	str	r3, [r2, #16]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed90 	.word	0xe000ed90

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800156a:	4b86      	ldr	r3, [pc, #536]	@ (8001784 <HAL_GPIO_Init+0x228>)
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800156e:	e18c      	b.n	800188a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 817e 	beq.w	8001884 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d005      	beq.n	80015a0 <HAL_GPIO_Init+0x44>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 0201 	and.w	r2, r3, #1
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b03      	cmp	r3, #3
 800160c:	d017      	beq.n	800163e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d123      	bne.n	8001692 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	69b9      	ldr	r1, [r7, #24]
 800168e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0203 	and.w	r2, r3, #3
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80d8 	beq.w	8001884 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <HAL_GPIO_Init+0x22c>)
 80016d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016da:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <HAL_GPIO_Init+0x22c>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016e4:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <HAL_GPIO_Init+0x22c>)
 80016e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f2:	4a26      	ldr	r2, [pc, #152]	@ (800178c <HAL_GPIO_Init+0x230>)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <HAL_GPIO_Init+0x234>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d04a      	beq.n	80017b4 <HAL_GPIO_Init+0x258>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a1c      	ldr	r2, [pc, #112]	@ (8001794 <HAL_GPIO_Init+0x238>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02b      	beq.n	800177e <HAL_GPIO_Init+0x222>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a1b      	ldr	r2, [pc, #108]	@ (8001798 <HAL_GPIO_Init+0x23c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d025      	beq.n	800177a <HAL_GPIO_Init+0x21e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a1a      	ldr	r2, [pc, #104]	@ (800179c <HAL_GPIO_Init+0x240>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01f      	beq.n	8001776 <HAL_GPIO_Init+0x21a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <HAL_GPIO_Init+0x244>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_GPIO_Init+0x216>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a18      	ldr	r2, [pc, #96]	@ (80017a4 <HAL_GPIO_Init+0x248>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x212>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <HAL_GPIO_Init+0x24c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x20e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <HAL_GPIO_Init+0x250>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x20a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a15      	ldr	r2, [pc, #84]	@ (80017b0 <HAL_GPIO_Init+0x254>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x206>
 800175e:	2309      	movs	r3, #9
 8001760:	e029      	b.n	80017b6 <HAL_GPIO_Init+0x25a>
 8001762:	230a      	movs	r3, #10
 8001764:	e027      	b.n	80017b6 <HAL_GPIO_Init+0x25a>
 8001766:	2307      	movs	r3, #7
 8001768:	e025      	b.n	80017b6 <HAL_GPIO_Init+0x25a>
 800176a:	2306      	movs	r3, #6
 800176c:	e023      	b.n	80017b6 <HAL_GPIO_Init+0x25a>
 800176e:	2305      	movs	r3, #5
 8001770:	e021      	b.n	80017b6 <HAL_GPIO_Init+0x25a>
 8001772:	2304      	movs	r3, #4
 8001774:	e01f      	b.n	80017b6 <HAL_GPIO_Init+0x25a>
 8001776:	2303      	movs	r3, #3
 8001778:	e01d      	b.n	80017b6 <HAL_GPIO_Init+0x25a>
 800177a:	2302      	movs	r3, #2
 800177c:	e01b      	b.n	80017b6 <HAL_GPIO_Init+0x25a>
 800177e:	2301      	movs	r3, #1
 8001780:	e019      	b.n	80017b6 <HAL_GPIO_Init+0x25a>
 8001782:	bf00      	nop
 8001784:	58000080 	.word	0x58000080
 8001788:	58024400 	.word	0x58024400
 800178c:	58000400 	.word	0x58000400
 8001790:	58020000 	.word	0x58020000
 8001794:	58020400 	.word	0x58020400
 8001798:	58020800 	.word	0x58020800
 800179c:	58020c00 	.word	0x58020c00
 80017a0:	58021000 	.word	0x58021000
 80017a4:	58021400 	.word	0x58021400
 80017a8:	58021800 	.word	0x58021800
 80017ac:	58021c00 	.word	0x58021c00
 80017b0:	58022400 	.word	0x58022400
 80017b4:	2300      	movs	r3, #0
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	f002 0203 	and.w	r2, r2, #3
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	4093      	lsls	r3, r2
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c6:	4938      	ldr	r1, [pc, #224]	@ (80018a8 <HAL_GPIO_Init+0x34c>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001828:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	3301      	adds	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	f47f ae6b 	bne.w	8001570 <HAL_GPIO_Init+0x14>
  }
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	3724      	adds	r7, #36	@ 0x24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	58000400 	.word	0x58000400

080018ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0fe      	b.n	8001abc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f008 fc1c 	bl	800a110 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f005 fb6e 	bl	8006fc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7c1a      	ldrb	r2, [r3, #16]
 80018f2:	f88d 2000 	strb.w	r2, [sp]
 80018f6:	3304      	adds	r3, #4
 80018f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018fa:	f005 fa3f 	bl	8006d7c <USB_CoreInit>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0d5      	b.n	8001abc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f005 fb66 	bl	8006fe8 <USB_SetCurrentMode>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0c6      	b.n	8001abc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e04a      	b.n	80019ca <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3315      	adds	r3, #21
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3314      	adds	r3, #20
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	b298      	uxth	r0, r3
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	332e      	adds	r3, #46	@ 0x2e
 8001970:	4602      	mov	r2, r0
 8001972:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3318      	adds	r3, #24
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	331c      	adds	r3, #28
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	3320      	adds	r3, #32
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3324      	adds	r3, #36	@ 0x24
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	3301      	adds	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	791b      	ldrb	r3, [r3, #4]
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d3af      	bcc.n	8001934 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e044      	b.n	8001a64 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	3301      	adds	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3b5      	bcc.n	80019da <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7c1a      	ldrb	r2, [r3, #16]
 8001a76:	f88d 2000 	strb.w	r2, [sp]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a7e:	f005 faff 	bl	8007080 <USB_DevInit>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e013      	b.n	8001abc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7b1b      	ldrb	r3, [r3, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f001 f956 	bl	8002d5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f006 fb42 	bl	800813e <USB_DevDisconnect>

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_PCD_Start+0x1c>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e022      	b.n	8001b26 <HAL_PCD_Start+0x62>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d009      	beq.n	8001b08 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f005 fa49 	bl	8006fa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f006 faf0 	bl	80080fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b2e:	b590      	push	{r4, r7, lr}
 8001b30:	b08d      	sub	sp, #52	@ 0x34
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f006 fbae 	bl	80082a6 <USB_GetMode>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 84b9 	bne.w	80024c4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 fb12 	bl	8008180 <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 84af 	beq.w	80024c2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f006 faff 	bl	8008180 <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d107      	bne.n	8001b9c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f002 0202 	and.w	r2, r2, #2
 8001b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f006 faed 	bl	8008180 <USB_ReadInterrupts>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d161      	bne.n	8001c74 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0210 	bic.w	r2, r2, #16
 8001bbe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	f003 020f 	and.w	r2, r3, #15
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	3304      	adds	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	0c5b      	lsrs	r3, r3, #17
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d124      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d035      	beq.n	8001c64 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	6a38      	ldr	r0, [r7, #32]
 8001c0c:	f006 f924 	bl	8007e58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c1c:	441a      	add	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c2e:	441a      	add	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	615a      	str	r2, [r3, #20]
 8001c34:	e016      	b.n	8001c64 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	0c5b      	lsrs	r3, r3, #17
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d110      	bne.n	8001c64 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c48:	2208      	movs	r2, #8
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6a38      	ldr	r0, [r7, #32]
 8001c4e:	f006 f903 	bl	8007e58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c5e:	441a      	add	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0210 	orr.w	r2, r2, #16
 8001c72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 fa81 	bl	8008180 <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c88:	f040 80a7 	bne.w	8001dda <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f006 fa86 	bl	80081a6 <USB_ReadDevAllOutEpInterrupt>
 8001c9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001c9c:	e099      	b.n	8001dd2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 808e 	beq.w	8001dc6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f006 faaa 	bl	800820e <USB_ReadDevOutEPInterrupt>
 8001cba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 feb8 	bl	8002a50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 ff8e 	bl	8002c20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d008      	beq.n	8001d20 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d030      	beq.n	8001d8c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d32:	2b80      	cmp	r3, #128	@ 0x80
 8001d34:	d109      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d48:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d108      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f008 fb4d 	bl	800a414 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d86:	461a      	mov	r2, r3
 8001d88:	2302      	movs	r3, #2
 8001d8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d008      	beq.n	8001da8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001da2:	461a      	mov	r2, r3
 8001da4:	2320      	movs	r3, #32
 8001da6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dc4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f47f af62 	bne.w	8001c9e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f006 f9ce 	bl	8008180 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001dee:	f040 80db 	bne.w	8001fa8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f006 f9ef 	bl	80081da <USB_ReadDevAllInEpInterrupt>
 8001dfc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001e02:	e0cd      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80c2 	beq.w	8001f94 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f006 fa15 	bl	800824a <USB_ReadDevInEPInterrupt>
 8001e20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d057      	beq.n	8001edc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	2201      	movs	r2, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69f9      	ldr	r1, [r7, #28]
 8001e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2301      	movs	r3, #1
 8001e60:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	799b      	ldrb	r3, [r3, #6]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d132      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	3320      	adds	r3, #32
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4403      	add	r3, r0
 8001e8a:	331c      	adds	r3, #28
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4419      	add	r1, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4403      	add	r3, r0
 8001e9e:	3320      	adds	r3, #32
 8001ea0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d113      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x3a2>
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3324      	adds	r3, #36	@ 0x24
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d108      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2101      	movs	r1, #1
 8001ecc:	f006 fa1e 	bl	800830c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f008 fa17 	bl	800a30a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2310      	movs	r3, #16
 8001f12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2340      	movs	r3, #64	@ 0x40
 8001f2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d023      	beq.n	8001f82 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f3c:	6a38      	ldr	r0, [r7, #32]
 8001f3e:	f005 f9fd 	bl	800733c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	3310      	adds	r3, #16
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	3304      	adds	r3, #4
 8001f54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	78db      	ldrb	r3, [r3, #3]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d108      	bne.n	8001f70 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2200      	movs	r2, #0
 8001f62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f008 fa64 	bl	800a438 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2302      	movs	r3, #2
 8001f80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fcd2 	bl	8002938 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	3301      	adds	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f47f af2e 	bne.w	8001e04 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f006 f8e7 	bl	8008180 <USB_ReadInterrupts>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fbc:	d122      	bne.n	8002004 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d108      	bne.n	8001fee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fedc 	bl	8002da4 <HAL_PCDEx_LPM_Callback>
 8001fec:	e002      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f008 fa02 	bl	800a3f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f006 f8b9 	bl	8008180 <USB_ReadInterrupts>
 800200e:	4603      	mov	r3, r0
 8002010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002018:	d112      	bne.n	8002040 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f008 f9be 	bl	800a3ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800203e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f006 f89b 	bl	8008180 <USB_ReadInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002050:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002054:	d121      	bne.n	800209a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002064:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800206c:	2b00      	cmp	r3, #0
 800206e:	d111      	bne.n	8002094 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	f003 020f 	and.w	r2, r3, #15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800208a:	2101      	movs	r1, #1
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fe89 	bl	8002da4 <HAL_PCDEx_LPM_Callback>
 8002092:	e002      	b.n	800209a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f008 f989 	bl	800a3ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f006 f86e 	bl	8008180 <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ae:	f040 80b7 	bne.w	8002220 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2110      	movs	r1, #16
 80020cc:	4618      	mov	r0, r3
 80020ce:	f005 f935 	bl	800733c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020d6:	e046      	b.n	8002166 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020e4:	461a      	mov	r2, r3
 80020e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80020ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020fc:	0151      	lsls	r1, r2, #5
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	440a      	add	r2, r1
 8002102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800210a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800210c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002118:	461a      	mov	r2, r3
 800211a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800211e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002130:	0151      	lsls	r1, r2, #5
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	440a      	add	r2, r1
 8002136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800213a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800213e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002150:	0151      	lsls	r1, r2, #5
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	440a      	add	r2, r1
 8002156:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800215a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800215e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002162:	3301      	adds	r3, #1
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	791b      	ldrb	r3, [r3, #4]
 800216a:	461a      	mov	r2, r3
 800216c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216e:	4293      	cmp	r3, r2
 8002170:	d3b2      	bcc.n	80020d8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002180:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002184:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7bdb      	ldrb	r3, [r3, #15]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800219e:	f043 030b 	orr.w	r3, r3, #11
 80021a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021b4:	f043 030b 	orr.w	r3, r3, #11
 80021b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ba:	e015      	b.n	80021e8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ca:	4619      	mov	r1, r3
 80021cc:	f242 032b 	movw	r3, #8235	@ 0x202b
 80021d0:	4313      	orrs	r3, r2
 80021d2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021e2:	f043 030b 	orr.w	r3, r3, #11
 80021e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80021fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800220a:	461a      	mov	r2, r3
 800220c:	f006 f87e 	bl	800830c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800221e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f005 ffab 	bl	8008180 <USB_ReadInterrupts>
 800222a:	4603      	mov	r3, r0
 800222c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002234:	d123      	bne.n	800227e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f006 f842 	bl	80082c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f005 f8f2 	bl	800742e <USB_GetDevSpeed>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681c      	ldr	r4, [r3, #0]
 8002256:	f001 fd05 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 800225a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002260:	461a      	mov	r2, r3
 8002262:	4620      	mov	r0, r4
 8002264:	f004 fdfc 	bl	8006e60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f008 f876 	bl	800a35a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800227c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f005 ff7c 	bl	8008180 <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b08      	cmp	r3, #8
 8002290:	d10a      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f008 f853 	bl	800a33e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f002 0208 	and.w	r2, r2, #8
 80022a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f005 ff67 	bl	8008180 <USB_ReadInterrupts>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b8:	2b80      	cmp	r3, #128	@ 0x80
 80022ba:	d123      	bne.n	8002304 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022c8:	2301      	movs	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80022cc:	e014      	b.n	80022f8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d105      	bne.n	80022f2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 faf2 	bl	80028d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	3301      	adds	r3, #1
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	791b      	ldrb	r3, [r3, #4]
 80022fc:	461a      	mov	r2, r3
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	4293      	cmp	r3, r2
 8002302:	d3e4      	bcc.n	80022ce <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f005 ff39 	bl	8008180 <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002318:	d13c      	bne.n	8002394 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800231a:	2301      	movs	r3, #1
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
 800231e:	e02b      	b.n	8002378 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	3318      	adds	r3, #24
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d115      	bne.n	8002372 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002346:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	da12      	bge.n	8002372 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3317      	adds	r3, #23
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fab2 	bl	80028d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	3301      	adds	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	791b      	ldrb	r3, [r3, #4]
 800237c:	461a      	mov	r2, r3
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	4293      	cmp	r3, r2
 8002382:	d3cd      	bcc.n	8002320 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f005 fef1 	bl	8008180 <USB_ReadInterrupts>
 800239e:	4603      	mov	r3, r0
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023a8:	d156      	bne.n	8002458 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023aa:	2301      	movs	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ae:	e045      	b.n	800243c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d12e      	bne.n	8002436 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	da2b      	bge.n	8002436 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	0c1a      	lsrs	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80023e8:	4053      	eors	r3, r2
 80023ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d121      	bne.n	8002436 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800242e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002432:	6053      	str	r3, [r2, #4]
            break;
 8002434:	e008      	b.n	8002448 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	3301      	adds	r3, #1
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	791b      	ldrb	r3, [r3, #4]
 8002440:	461a      	mov	r2, r3
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	4293      	cmp	r3, r2
 8002446:	d3b3      	bcc.n	80023b0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f005 fe8f 	bl	8008180 <USB_ReadInterrupts>
 8002462:	4603      	mov	r3, r0
 8002464:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246c:	d10a      	bne.n	8002484 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f007 fff4 	bl	800a45c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f005 fe79 	bl	8008180 <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b04      	cmp	r3, #4
 8002496:	d115      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f007 ffe4 	bl	800a478 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	e000      	b.n	80024c4 <HAL_PCD_IRQHandler+0x996>
      return;
 80024c2:	bf00      	nop
    }
  }
}
 80024c4:	3734      	adds	r7, #52	@ 0x34
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}

080024ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_PCD_SetAddress+0x1a>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e012      	b.n	800250a <HAL_PCD_SetAddress+0x40>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f005 fdd8 	bl	80080b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	4608      	mov	r0, r1
 800251c:	4611      	mov	r1, r2
 800251e:	461a      	mov	r2, r3
 8002520:	4603      	mov	r3, r0
 8002522:	70fb      	strb	r3, [r7, #3]
 8002524:	460b      	mov	r3, r1
 8002526:	803b      	strh	r3, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002534:	2b00      	cmp	r3, #0
 8002536:	da0f      	bge.n	8002558 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	3310      	adds	r3, #16
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	3304      	adds	r3, #4
 800254e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	705a      	strb	r2, [r3, #1]
 8002556:	e00f      	b.n	8002578 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	3304      	adds	r3, #4
 8002570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	b2da      	uxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002584:	883b      	ldrh	r3, [r7, #0]
 8002586:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	78ba      	ldrb	r2, [r7, #2]
 8002592:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025a6:	78bb      	ldrb	r3, [r7, #2]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d102      	bne.n	80025b2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_PCD_EP_Open+0xae>
 80025bc:	2302      	movs	r3, #2
 80025be:	e00e      	b.n	80025de <HAL_PCD_EP_Open+0xcc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 ff52 	bl	8007478 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80025dc:	7afb      	ldrb	r3, [r7, #11]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	da0f      	bge.n	800261a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	f003 020f 	and.w	r2, r3, #15
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	3310      	adds	r3, #16
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	705a      	strb	r2, [r3, #1]
 8002618:	e00f      	b.n	800263a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 020f 	and.w	r2, r3, #15
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	3304      	adds	r3, #4
 8002632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_PCD_EP_Close+0x6e>
 8002650:	2302      	movs	r3, #2
 8002652:	e00e      	b.n	8002672 <HAL_PCD_EP_Close+0x8c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68f9      	ldr	r1, [r7, #12]
 8002662:	4618      	mov	r0, r3
 8002664:	f004 ff90 	bl	8007588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	460b      	mov	r3, r1
 8002688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800268a:	7afb      	ldrb	r3, [r7, #11]
 800268c:	f003 020f 	and.w	r2, r3, #15
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	3304      	adds	r3, #4
 80026a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2200      	movs	r2, #0
 80026b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026bc:	7afb      	ldrb	r3, [r7, #11]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	799b      	ldrb	r3, [r3, #6]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d102      	bne.n	80026d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	799b      	ldrb	r3, [r3, #6]
 80026de:	461a      	mov	r2, r3
 80026e0:	6979      	ldr	r1, [r7, #20]
 80026e2:	f005 f82d 	bl	8007740 <USB_EPStartXfer>

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	460b      	mov	r3, r1
 80026fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002700:	7afb      	ldrb	r3, [r7, #11]
 8002702:	f003 020f 	and.w	r2, r3, #15
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	3310      	adds	r3, #16
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4413      	add	r3, r2
 8002714:	3304      	adds	r3, #4
 8002716:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2200      	movs	r2, #0
 8002728:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2201      	movs	r2, #1
 800272e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002730:	7afb      	ldrb	r3, [r7, #11]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	b2da      	uxtb	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	799b      	ldrb	r3, [r3, #6]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d102      	bne.n	800274a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	799b      	ldrb	r3, [r3, #6]
 8002752:	461a      	mov	r2, r3
 8002754:	6979      	ldr	r1, [r7, #20]
 8002756:	f004 fff3 	bl	8007740 <USB_EPStartXfer>

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	7912      	ldrb	r2, [r2, #4]
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e04f      	b.n	8002822 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002786:	2b00      	cmp	r3, #0
 8002788:	da0f      	bge.n	80027aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	f003 020f 	and.w	r2, r3, #15
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	3310      	adds	r3, #16
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	3304      	adds	r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	705a      	strb	r2, [r3, #1]
 80027a8:	e00d      	b.n	80027c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	3304      	adds	r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_PCD_EP_SetStall+0x82>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e01d      	b.n	8002822 <HAL_PCD_EP_SetStall+0xbe>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68f9      	ldr	r1, [r7, #12]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f005 fb87 	bl	8007f08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7999      	ldrb	r1, [r3, #6]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002812:	461a      	mov	r2, r3
 8002814:	f005 fd7a 	bl	800830c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	7912      	ldrb	r2, [r2, #4]
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e042      	b.n	80028ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800284c:	2b00      	cmp	r3, #0
 800284e:	da0f      	bge.n	8002870 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3310      	adds	r3, #16
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	705a      	strb	r2, [r3, #1]
 800286e:	e00f      	b.n	8002890 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	b2da      	uxtb	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_PCD_EP_ClrStall+0x86>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e00e      	b.n	80028ce <HAL_PCD_EP_ClrStall+0xa4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	4618      	mov	r0, r3
 80028c0:	f005 fb90 	bl	8007fe4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80028e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	da0c      	bge.n	8002904 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	3310      	adds	r3, #16
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	e00c      	b.n	800291e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	3304      	adds	r3, #4
 800291c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68f9      	ldr	r1, [r7, #12]
 8002924:	4618      	mov	r0, r3
 8002926:	f005 f9af 	bl	8007c88 <USB_EPStopXfer>
 800292a:	4603      	mov	r3, r0
 800292c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800292e:	7afb      	ldrb	r3, [r7, #11]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	@ 0x28
 800293c:	af02      	add	r7, sp, #8
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	3310      	adds	r3, #16
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d901      	bls.n	8002970 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e06b      	b.n	8002a48 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	429a      	cmp	r2, r3
 8002984:	d902      	bls.n	800298c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3303      	adds	r3, #3
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002994:	e02a      	b.n	80029ec <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d902      	bls.n	80029b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3303      	adds	r3, #3
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	68d9      	ldr	r1, [r3, #12]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4603      	mov	r3, r0
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f005 fa04 	bl	8007ddc <USB_WritePacket>

    ep->xfer_buff  += len;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	441a      	add	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	441a      	add	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d809      	bhi.n	8002a16 <PCD_WriteEmptyTxFifo+0xde>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d203      	bcs.n	8002a16 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1bf      	bne.n	8002996 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d811      	bhi.n	8002a46 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	2201      	movs	r2, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	6939      	ldr	r1, [r7, #16]
 8002a3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a42:	4013      	ands	r3, r2
 8002a44:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	333c      	adds	r3, #60	@ 0x3c
 8002a68:	3304      	adds	r3, #4
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	799b      	ldrb	r3, [r3, #6]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d17b      	bne.n	8002b7e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	4a61      	ldr	r2, [pc, #388]	@ (8002c18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	f240 80b9 	bls.w	8002c0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80b3 	beq.w	8002c0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ab8:	6093      	str	r3, [r2, #8]
 8002aba:	e0a7      	b.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	e098      	b.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f040 8093 	bne.w	8002c0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	4a4b      	ldr	r2, [pc, #300]	@ (8002c18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d90f      	bls.n	8002b0e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b04:	461a      	mov	r2, r3
 8002b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b0a:	6093      	str	r3, [r2, #8]
 8002b0c:	e07e      	b.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1a      	ldr	r2, [r3, #32]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	0159      	lsls	r1, r3, #5
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	440b      	add	r3, r1
 8002b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d114      	bne.n	8002b70 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	f005 fbd6 	bl	800830c <USB_EP0_OutStart>
 8002b60:	e006      	b.n	8002b70 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	441a      	add	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f007 fbac 	bl	800a2d4 <HAL_PCD_DataOutStageCallback>
 8002b7c:	e046      	b.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	4a26      	ldr	r2, [pc, #152]	@ (8002c1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d124      	bne.n	8002bd0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ba2:	6093      	str	r3, [r2, #8]
 8002ba4:	e032      	b.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f007 fb83 	bl	800a2d4 <HAL_PCD_DataOutStageCallback>
 8002bce:	e01d      	b.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d114      	bne.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d108      	bne.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	f005 fb86 	bl	800830c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f007 fb64 	bl	800a2d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	4f54300a 	.word	0x4f54300a
 8002c1c:	4f54310a 	.word	0x4f54310a

08002c20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	333c      	adds	r3, #60	@ 0x3c
 8002c38:	3304      	adds	r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a15      	ldr	r2, [pc, #84]	@ (8002ca8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d90e      	bls.n	8002c74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f007 fb1b 	bl	800a2b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d90c      	bls.n	8002c9c <PCD_EP_OutSetupPacket_int+0x7c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	799b      	ldrb	r3, [r3, #6]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d108      	bne.n	8002c9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c94:	461a      	mov	r2, r3
 8002c96:	2101      	movs	r1, #1
 8002c98:	f005 fb38 	bl	800830c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	4f54300a 	.word	0x4f54300a

08002cac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d107      	bne.n	8002cda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cca:	883b      	ldrh	r3, [r7, #0]
 8002ccc:	0419      	lsls	r1, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cd8:	e028      	b.n	8002d2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	e00d      	b.n	8002d0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	3340      	adds	r3, #64	@ 0x40
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	4413      	add	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	3301      	adds	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d3ec      	bcc.n	8002cee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d14:	883b      	ldrh	r3, [r7, #0]
 8002d16:	0418      	lsls	r0, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	4302      	orrs	r2, r0
 8002d24:	3340      	adds	r3, #64	@ 0x40
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d8a:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	10000003 	.word	0x10000003

08002da4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002dc4:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <HAL_PWREx_ConfigSupply+0x70>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d00a      	beq.n	8002de6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002dd0:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <HAL_PWREx_ConfigSupply+0x70>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d001      	beq.n	8002de2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e01f      	b.n	8002e22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e01d      	b.n	8002e22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_PWREx_ConfigSupply+0x70>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f023 0207 	bic.w	r2, r3, #7
 8002dee:	490f      	ldr	r1, [pc, #60]	@ (8002e2c <HAL_PWREx_ConfigSupply+0x70>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002df6:	f7fe f9f9 	bl	80011ec <HAL_GetTick>
 8002dfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dfc:	e009      	b.n	8002e12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dfe:	f7fe f9f5 	bl	80011ec <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e0c:	d901      	bls.n	8002e12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e007      	b.n	8002e22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_PWREx_ConfigSupply+0x70>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	58024800 	.word	0x58024800

08002e30 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a04      	ldr	r2, [pc, #16]	@ (8002e4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	60d3      	str	r3, [r2, #12]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	58024800 	.word	0x58024800

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	@ 0x30
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e3c8      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8087 	beq.w	8002f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e70:	4b88      	ldr	r3, [pc, #544]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e7a:	4b86      	ldr	r3, [pc, #536]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d007      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46>
 8002e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e88:	2b18      	cmp	r3, #24
 8002e8a:	d110      	bne.n	8002eae <HAL_RCC_OscConfig+0x5e>
 8002e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d10b      	bne.n	8002eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e96:	4b7f      	ldr	r3, [pc, #508]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d06c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x12c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d168      	bne.n	8002f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e3a2      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x76>
 8002eb8:	4b76      	ldr	r3, [pc, #472]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a75      	ldr	r2, [pc, #468]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	e02e      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b71      	ldr	r3, [pc, #452]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a70      	ldr	r2, [pc, #448]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b6e      	ldr	r3, [pc, #440]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6d      	ldr	r2, [pc, #436]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002ee0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e01d      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0xbc>
 8002ef2:	4b68      	ldr	r3, [pc, #416]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a67      	ldr	r2, [pc, #412]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b65      	ldr	r3, [pc, #404]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a64      	ldr	r2, [pc, #400]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002f0c:	4b61      	ldr	r3, [pc, #388]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a60      	ldr	r2, [pc, #384]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b5e      	ldr	r3, [pc, #376]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a5d      	ldr	r2, [pc, #372]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe f95e 	bl	80011ec <HAL_GetTick>
 8002f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe f95a 	bl	80011ec <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	@ 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e356      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f46:	4b53      	ldr	r3, [pc, #332]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0xe4>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe f94a 	bl	80011ec <HAL_GetTick>
 8002f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe f946 	bl	80011ec <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	@ 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e342      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f6e:	4b49      	ldr	r3, [pc, #292]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x10c>
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 808c 	beq.w	80030a4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8c:	4b41      	ldr	r3, [pc, #260]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f96:	4b3f      	ldr	r3, [pc, #252]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x162>
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2b18      	cmp	r3, #24
 8002fa6:	d137      	bne.n	8003018 <HAL_RCC_OscConfig+0x1c8>
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d132      	bne.n	8003018 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb2:	4b38      	ldr	r3, [pc, #224]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_RCC_OscConfig+0x17a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e314      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fca:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 0219 	bic.w	r2, r3, #25
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	492f      	ldr	r1, [pc, #188]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f906 	bl	80011ec <HAL_GetTick>
 8002fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe f902 	bl	80011ec <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e2fe      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff6:	4b27      	ldr	r3, [pc, #156]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	061b      	lsls	r3, r3, #24
 8003010:	4920      	ldr	r1, [pc, #128]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003016:	e045      	b.n	80030a4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d026      	beq.n	800306e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003020:	4b1c      	ldr	r3, [pc, #112]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 0219 	bic.w	r2, r3, #25
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4919      	ldr	r1, [pc, #100]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe f8db 	bl	80011ec <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303a:	f7fe f8d7 	bl	80011ec <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e2d3      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	490b      	ldr	r1, [pc, #44]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
 800306c:	e01a      	b.n	80030a4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a08      	ldr	r2, [pc, #32]	@ (8003094 <HAL_RCC_OscConfig+0x244>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe f8b7 	bl	80011ec <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe f8b3 	bl	80011ec <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d903      	bls.n	8003098 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e2af      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
 8003094:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003098:	4b96      	ldr	r3, [pc, #600]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ee      	bne.n	8003082 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d06a      	beq.n	8003186 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b0:	4b90      	ldr	r3, [pc, #576]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030ba:	4b8e      	ldr	r3, [pc, #568]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80030bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030be:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d007      	beq.n	80030d6 <HAL_RCC_OscConfig+0x286>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b18      	cmp	r3, #24
 80030ca:	d11b      	bne.n	8003104 <HAL_RCC_OscConfig+0x2b4>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d116      	bne.n	8003104 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030d6:	4b87      	ldr	r3, [pc, #540]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x29e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	2b80      	cmp	r3, #128	@ 0x80
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e282      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030ee:	4b81      	ldr	r3, [pc, #516]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	061b      	lsls	r3, r3, #24
 80030fc:	497d      	ldr	r1, [pc, #500]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003102:	e040      	b.n	8003186 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d023      	beq.n	8003154 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800310c:	4b79      	ldr	r3, [pc, #484]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a78      	ldr	r2, [pc, #480]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 8003112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe f868 	bl	80011ec <HAL_GetTick>
 800311c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003120:	f7fe f864 	bl	80011ec <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e260      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003132:	4b70      	ldr	r3, [pc, #448]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800313e:	4b6d      	ldr	r3, [pc, #436]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	4969      	ldr	r1, [pc, #420]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	60cb      	str	r3, [r1, #12]
 8003152:	e018      	b.n	8003186 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003154:	4b67      	ldr	r3, [pc, #412]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a66      	ldr	r2, [pc, #408]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800315a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800315e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe f844 	bl	80011ec <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003168:	f7fe f840 	bl	80011ec <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e23c      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800317a:	4b5e      	ldr	r3, [pc, #376]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d036      	beq.n	8003200 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d019      	beq.n	80031ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319a:	4b56      	ldr	r3, [pc, #344]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800319c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319e:	4a55      	ldr	r2, [pc, #340]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a6:	f7fe f821 	bl	80011ec <HAL_GetTick>
 80031aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ae:	f7fe f81d 	bl	80011ec <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e219      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031c0:	4b4c      	ldr	r3, [pc, #304]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80031c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x35e>
 80031cc:	e018      	b.n	8003200 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ce:	4b49      	ldr	r3, [pc, #292]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80031d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d2:	4a48      	ldr	r2, [pc, #288]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fe f807 	bl	80011ec <HAL_GetTick>
 80031de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e2:	f7fe f803 	bl	80011ec <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e1ff      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031f4:	4b3f      	ldr	r3, [pc, #252]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80031f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d036      	beq.n	800327a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d019      	beq.n	8003248 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003214:	4b37      	ldr	r3, [pc, #220]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a36      	ldr	r2, [pc, #216]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800321a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800321e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003220:	f7fd ffe4 	bl	80011ec <HAL_GetTick>
 8003224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003228:	f7fd ffe0 	bl	80011ec <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1dc      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800323a:	4b2e      	ldr	r3, [pc, #184]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x3d8>
 8003246:	e018      	b.n	800327a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003248:	4b2a      	ldr	r3, [pc, #168]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a29      	ldr	r2, [pc, #164]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 800324e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003252:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003254:	f7fd ffca 	bl	80011ec <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325c:	f7fd ffc6 	bl	80011ec <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e1c2      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800326e:	4b21      	ldr	r3, [pc, #132]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8086 	beq.w	8003394 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1a      	ldr	r2, [pc, #104]	@ (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003294:	f7fd ffaa 	bl	80011ec <HAL_GetTick>
 8003298:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fd ffa6 	bl	80011ec <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	@ 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1a2      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ae:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x480>
 80032c2:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c6:	4a0b      	ldr	r2, [pc, #44]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ce:	e032      	b.n	8003336 <HAL_RCC_OscConfig+0x4e6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <HAL_RCC_OscConfig+0x4ac>
 80032d8:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032dc:	4a05      	ldr	r2, [pc, #20]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e8:	4a02      	ldr	r2, [pc, #8]	@ (80032f4 <HAL_RCC_OscConfig+0x4a4>)
 80032ea:	f023 0304 	bic.w	r3, r3, #4
 80032ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f0:	e021      	b.n	8003336 <HAL_RCC_OscConfig+0x4e6>
 80032f2:	bf00      	nop
 80032f4:	58024400 	.word	0x58024400
 80032f8:	58024800 	.word	0x58024800
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d10c      	bne.n	800331e <HAL_RCC_OscConfig+0x4ce>
 8003304:	4b83      	ldr	r3, [pc, #524]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	4a82      	ldr	r2, [pc, #520]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003310:	4b80      	ldr	r3, [pc, #512]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	4a7f      	ldr	r2, [pc, #508]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	@ 0x70
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0x4e6>
 800331e:	4b7d      	ldr	r3, [pc, #500]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	4a7c      	ldr	r2, [pc, #496]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	@ 0x70
 800332a:	4b7a      	ldr	r3, [pc, #488]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	4a79      	ldr	r2, [pc, #484]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d015      	beq.n	800336a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fd ff55 	bl	80011ec <HAL_GetTick>
 8003342:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd ff51 	bl	80011ec <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e14b      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800335c:	4b6d      	ldr	r3, [pc, #436]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ee      	beq.n	8003346 <HAL_RCC_OscConfig+0x4f6>
 8003368:	e014      	b.n	8003394 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fd ff3f 	bl	80011ec <HAL_GetTick>
 800336e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd ff3b 	bl	80011ec <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e135      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003388:	4b62      	ldr	r3, [pc, #392]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ee      	bne.n	8003372 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 812a 	beq.w	80035f2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800339e:	4b5d      	ldr	r3, [pc, #372]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033a6:	2b18      	cmp	r3, #24
 80033a8:	f000 80ba 	beq.w	8003520 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	f040 8095 	bne.w	80034e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	4b57      	ldr	r3, [pc, #348]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a56      	ldr	r2, [pc, #344]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80033bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fd ff13 	bl	80011ec <HAL_GetTick>
 80033c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fd ff0f 	bl	80011ec <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e10b      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80033ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003518 <HAL_RCC_OscConfig+0x6c8>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	430a      	orrs	r2, r1
 80033fc:	4945      	ldr	r1, [pc, #276]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	628b      	str	r3, [r1, #40]	@ 0x28
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	3b01      	subs	r3, #1
 8003408:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003410:	3b01      	subs	r3, #1
 8003412:	025b      	lsls	r3, r3, #9
 8003414:	b29b      	uxth	r3, r3
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	3b01      	subs	r3, #1
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342a:	3b01      	subs	r3, #1
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003432:	4938      	ldr	r1, [pc, #224]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003438:	4b36      	ldr	r3, [pc, #216]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	4a35      	ldr	r2, [pc, #212]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003444:	4b33      	ldr	r3, [pc, #204]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003448:	4b34      	ldr	r3, [pc, #208]	@ (800351c <HAL_RCC_OscConfig+0x6cc>)
 800344a:	4013      	ands	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003450:	00d2      	lsls	r2, r2, #3
 8003452:	4930      	ldr	r1, [pc, #192]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003458:	4b2e      	ldr	r3, [pc, #184]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	f023 020c 	bic.w	r2, r3, #12
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	492b      	ldr	r1, [pc, #172]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800346a:	4b2a      	ldr	r3, [pc, #168]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	f023 0202 	bic.w	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	4927      	ldr	r1, [pc, #156]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003478:	4313      	orrs	r3, r2
 800347a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800347c:	4b25      	ldr	r3, [pc, #148]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	4a24      	ldr	r2, [pc, #144]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003488:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	4a21      	ldr	r2, [pc, #132]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800348e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003494:	4b1f      	ldr	r3, [pc, #124]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	4a1e      	ldr	r2, [pc, #120]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 800349a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800349e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80034a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a18      	ldr	r2, [pc, #96]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80034b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fd fe98 	bl	80011ec <HAL_GetTick>
 80034bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fd fe94 	bl	80011ec <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e090      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x670>
 80034de:	e088      	b.n	80035f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 80034e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fd fe7e 	bl	80011ec <HAL_GetTick>
 80034f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fd fe7a 	bl	80011ec <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e076      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003506:	4b03      	ldr	r3, [pc, #12]	@ (8003514 <HAL_RCC_OscConfig+0x6c4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x6a4>
 8003512:	e06e      	b.n	80035f2 <HAL_RCC_OscConfig+0x7a2>
 8003514:	58024400 	.word	0x58024400
 8003518:	fffffc0c 	.word	0xfffffc0c
 800351c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003520:	4b36      	ldr	r3, [pc, #216]	@ (80035fc <HAL_RCC_OscConfig+0x7ac>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003526:	4b35      	ldr	r3, [pc, #212]	@ (80035fc <HAL_RCC_OscConfig+0x7ac>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	2b01      	cmp	r3, #1
 8003532:	d031      	beq.n	8003598 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0203 	and.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d12a      	bne.n	8003598 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d122      	bne.n	8003598 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d11a      	bne.n	8003598 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	0a5b      	lsrs	r3, r3, #9
 8003566:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d111      	bne.n	8003598 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d108      	bne.n	8003598 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	0e1b      	lsrs	r3, r3, #24
 800358a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003592:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e02b      	b.n	80035f4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800359c:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <HAL_RCC_OscConfig+0x7ac>)
 800359e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a0:	08db      	lsrs	r3, r3, #3
 80035a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d01f      	beq.n	80035f2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80035b2:	4b12      	ldr	r3, [pc, #72]	@ (80035fc <HAL_RCC_OscConfig+0x7ac>)
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	4a11      	ldr	r2, [pc, #68]	@ (80035fc <HAL_RCC_OscConfig+0x7ac>)
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035be:	f7fd fe15 	bl	80011ec <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80035c4:	bf00      	nop
 80035c6:	f7fd fe11 	bl	80011ec <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d0f9      	beq.n	80035c6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035d2:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <HAL_RCC_OscConfig+0x7ac>)
 80035d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <HAL_RCC_OscConfig+0x7b0>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035de:	00d2      	lsls	r2, r2, #3
 80035e0:	4906      	ldr	r1, [pc, #24]	@ (80035fc <HAL_RCC_OscConfig+0x7ac>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_RCC_OscConfig+0x7ac>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	4a04      	ldr	r2, [pc, #16]	@ (80035fc <HAL_RCC_OscConfig+0x7ac>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3730      	adds	r7, #48	@ 0x30
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	58024400 	.word	0x58024400
 8003600:	ffff0007 	.word	0xffff0007

08003604 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e19c      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b8a      	ldr	r3, [pc, #552]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d910      	bls.n	8003648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b87      	ldr	r3, [pc, #540]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 020f 	bic.w	r2, r3, #15
 800362e:	4985      	ldr	r1, [pc, #532]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b83      	ldr	r3, [pc, #524]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e184      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d010      	beq.n	8003676 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	4b7b      	ldr	r3, [pc, #492]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003660:	429a      	cmp	r2, r3
 8003662:	d908      	bls.n	8003676 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003664:	4b78      	ldr	r3, [pc, #480]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	4975      	ldr	r1, [pc, #468]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003672:	4313      	orrs	r3, r2
 8003674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d010      	beq.n	80036a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	4b70      	ldr	r3, [pc, #448]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800368e:	429a      	cmp	r2, r3
 8003690:	d908      	bls.n	80036a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003692:	4b6d      	ldr	r3, [pc, #436]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	496a      	ldr	r1, [pc, #424]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d010      	beq.n	80036d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	4b64      	ldr	r3, [pc, #400]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036bc:	429a      	cmp	r2, r3
 80036be:	d908      	bls.n	80036d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036c0:	4b61      	ldr	r3, [pc, #388]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	495e      	ldr	r1, [pc, #376]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d010      	beq.n	8003700 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	4b59      	ldr	r3, [pc, #356]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d908      	bls.n	8003700 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036ee:	4b56      	ldr	r3, [pc, #344]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4953      	ldr	r1, [pc, #332]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	4b4d      	ldr	r3, [pc, #308]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	429a      	cmp	r2, r3
 800371a:	d908      	bls.n	800372e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f023 020f 	bic.w	r2, r3, #15
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4947      	ldr	r1, [pc, #284]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800372a:	4313      	orrs	r3, r2
 800372c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d055      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800373a:	4b43      	ldr	r3, [pc, #268]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4940      	ldr	r1, [pc, #256]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003748:	4313      	orrs	r3, r2
 800374a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d107      	bne.n	8003764 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003754:	4b3c      	ldr	r3, [pc, #240]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d121      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0f6      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d107      	bne.n	800377c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800376c:	4b36      	ldr	r3, [pc, #216]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d115      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0ea      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003784:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0de      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003794:	4b2c      	ldr	r3, [pc, #176]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0d6      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a4:	4b28      	ldr	r3, [pc, #160]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f023 0207 	bic.w	r2, r3, #7
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4925      	ldr	r1, [pc, #148]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b6:	f7fd fd19 	bl	80011ec <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037bc:	e00a      	b.n	80037d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037be:	f7fd fd15 	bl	80011ec <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0be      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d1eb      	bne.n	80037be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d010      	beq.n	8003814 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	429a      	cmp	r2, r3
 8003800:	d208      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003802:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f023 020f 	bic.w	r2, r3, #15
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	490e      	ldr	r1, [pc, #56]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003810:	4313      	orrs	r3, r2
 8003812:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d214      	bcs.n	800384c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 020f 	bic.w	r2, r3, #15
 800382a:	4906      	ldr	r1, [pc, #24]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e086      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
 8003844:	52002000 	.word	0x52002000
 8003848:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	4b3f      	ldr	r3, [pc, #252]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003864:	429a      	cmp	r2, r3
 8003866:	d208      	bcs.n	800387a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003868:	4b3c      	ldr	r3, [pc, #240]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	4939      	ldr	r1, [pc, #228]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 8003876:	4313      	orrs	r3, r2
 8003878:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d010      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	4b34      	ldr	r3, [pc, #208]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003892:	429a      	cmp	r2, r3
 8003894:	d208      	bcs.n	80038a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003896:	4b31      	ldr	r3, [pc, #196]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	492e      	ldr	r1, [pc, #184]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d010      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	4b28      	ldr	r3, [pc, #160]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d208      	bcs.n	80038d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038c4:	4b25      	ldr	r3, [pc, #148]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	4922      	ldr	r1, [pc, #136]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d010      	beq.n	8003904 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	4b1d      	ldr	r3, [pc, #116]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d208      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038f2:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4917      	ldr	r1, [pc, #92]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 8003900:	4313      	orrs	r3, r2
 8003902:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003904:	f000 f834 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b14      	ldr	r3, [pc, #80]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	4912      	ldr	r1, [pc, #72]	@ (8003960 <HAL_RCC_ClockConfig+0x35c>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
 8003920:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003922:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	4a0d      	ldr	r2, [pc, #52]	@ (8003960 <HAL_RCC_ClockConfig+0x35c>)
 800392c:	5cd3      	ldrb	r3, [r2, r3]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <HAL_RCC_ClockConfig+0x360>)
 800393a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800393c:	4a0a      	ldr	r2, [pc, #40]	@ (8003968 <HAL_RCC_ClockConfig+0x364>)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003942:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <HAL_RCC_ClockConfig+0x368>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd fc06 	bl	8001158 <HAL_InitTick>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	58024400 	.word	0x58024400
 8003960:	0800b2c0 	.word	0x0800b2c0
 8003964:	24000004 	.word	0x24000004
 8003968:	24000000 	.word	0x24000000
 800396c:	24000008 	.word	0x24000008

08003970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	@ 0x24
 8003974:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003976:	4bb3      	ldr	r3, [pc, #716]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800397e:	2b18      	cmp	r3, #24
 8003980:	f200 8155 	bhi.w	8003c2e <HAL_RCC_GetSysClockFreq+0x2be>
 8003984:	a201      	add	r2, pc, #4	@ (adr r2, 800398c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039f1 	.word	0x080039f1
 8003990:	08003c2f 	.word	0x08003c2f
 8003994:	08003c2f 	.word	0x08003c2f
 8003998:	08003c2f 	.word	0x08003c2f
 800399c:	08003c2f 	.word	0x08003c2f
 80039a0:	08003c2f 	.word	0x08003c2f
 80039a4:	08003c2f 	.word	0x08003c2f
 80039a8:	08003c2f 	.word	0x08003c2f
 80039ac:	08003a17 	.word	0x08003a17
 80039b0:	08003c2f 	.word	0x08003c2f
 80039b4:	08003c2f 	.word	0x08003c2f
 80039b8:	08003c2f 	.word	0x08003c2f
 80039bc:	08003c2f 	.word	0x08003c2f
 80039c0:	08003c2f 	.word	0x08003c2f
 80039c4:	08003c2f 	.word	0x08003c2f
 80039c8:	08003c2f 	.word	0x08003c2f
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003c2f 	.word	0x08003c2f
 80039d4:	08003c2f 	.word	0x08003c2f
 80039d8:	08003c2f 	.word	0x08003c2f
 80039dc:	08003c2f 	.word	0x08003c2f
 80039e0:	08003c2f 	.word	0x08003c2f
 80039e4:	08003c2f 	.word	0x08003c2f
 80039e8:	08003c2f 	.word	0x08003c2f
 80039ec:	08003a23 	.word	0x08003a23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039f0:	4b94      	ldr	r3, [pc, #592]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039fc:	4b91      	ldr	r3, [pc, #580]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	08db      	lsrs	r3, r3, #3
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	4a90      	ldr	r2, [pc, #576]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a0e:	e111      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a10:	4b8d      	ldr	r3, [pc, #564]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a12:	61bb      	str	r3, [r7, #24]
      break;
 8003a14:	e10e      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a16:	4b8d      	ldr	r3, [pc, #564]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a18:	61bb      	str	r3, [r7, #24]
      break;
 8003a1a:	e10b      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a1e:	61bb      	str	r3, [r7, #24]
      break;
 8003a20:	e108      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a22:	4b88      	ldr	r3, [pc, #544]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a2c:	4b85      	ldr	r3, [pc, #532]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a38:	4b82      	ldr	r3, [pc, #520]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a42:	4b80      	ldr	r3, [pc, #512]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80e1 	beq.w	8003c28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	f000 8083 	beq.w	8003b74 <HAL_RCC_GetSysClockFreq+0x204>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f200 80a1 	bhi.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x114>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d056      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a82:	e099      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a84:	4b6f      	ldr	r3, [pc, #444]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d02d      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a90:	4b6c      	ldr	r3, [pc, #432]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	4a6b      	ldr	r2, [pc, #428]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b62      	ldr	r3, [pc, #392]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ace:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003aea:	e087      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003c58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b51      	ldr	r3, [pc, #324]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b2e:	e065      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b40      	ldr	r3, [pc, #256]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b72:	e043      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003c60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b2f      	ldr	r3, [pc, #188]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bb6:	e021      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b1e      	ldr	r3, [pc, #120]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bde:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bfa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c00:	0a5b      	lsrs	r3, r3, #9
 8003c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c06:	3301      	adds	r3, #1
 8003c08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c20:	ee17 3a90 	vmov	r3, s15
 8003c24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c26:	e005      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
      break;
 8003c2c:	e002      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c2e:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c30:	61bb      	str	r3, [r7, #24]
      break;
 8003c32:	bf00      	nop
  }

  return sysclockfreq;
 8003c34:	69bb      	ldr	r3, [r7, #24]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3724      	adds	r7, #36	@ 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	58024400 	.word	0x58024400
 8003c48:	03d09000 	.word	0x03d09000
 8003c4c:	003d0900 	.word	0x003d0900
 8003c50:	017d7840 	.word	0x017d7840
 8003c54:	46000000 	.word	0x46000000
 8003c58:	4c742400 	.word	0x4c742400
 8003c5c:	4a742400 	.word	0x4a742400
 8003c60:	4bbebc20 	.word	0x4bbebc20

08003c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c6a:	f7ff fe81 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	490f      	ldr	r1, [pc, #60]	@ (8003cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c7c:	5ccb      	ldrb	r3, [r1, r3]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c88:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	4a09      	ldr	r2, [pc, #36]	@ (8003cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	4a07      	ldr	r2, [pc, #28]	@ (8003cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003ca0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ca2:	4a07      	ldr	r2, [pc, #28]	@ (8003cc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ca8:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	58024400 	.word	0x58024400
 8003cb8:	0800b2c0 	.word	0x0800b2c0
 8003cbc:	24000004 	.word	0x24000004
 8003cc0:	24000000 	.word	0x24000000

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003cc8:	f7ff ffcc 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4904      	ldr	r1, [pc, #16]	@ (8003cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	0800b2c0 	.word	0x0800b2c0

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003cf4:	f7ff ffb6 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4904      	ldr	r1, [pc, #16]	@ (8003d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	58024400 	.word	0x58024400
 8003d18:	0800b2c0 	.word	0x0800b2c0

08003d1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d20:	b0c6      	sub	sp, #280	@ 0x118
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003d40:	2500      	movs	r5, #0
 8003d42:	ea54 0305 	orrs.w	r3, r4, r5
 8003d46:	d049      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d52:	d02f      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d58:	d828      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d5e:	d01a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d64:	d822      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d6e:	d007      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d70:	e01c      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d72:	4bab      	ldr	r3, [pc, #684]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d76:	4aaa      	ldr	r2, [pc, #680]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d7e:	e01a      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d84:	3308      	adds	r3, #8
 8003d86:	2102      	movs	r1, #2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fc25 	bl	80055d8 <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d94:	e00f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9a:	3328      	adds	r3, #40	@ 0x28
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 fccc 	bl	800573c <RCCEx_PLL3_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003daa:	e004      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dbe:	4b98      	ldr	r3, [pc, #608]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dcc:	4a94      	ldr	r2, [pc, #592]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003de8:	f04f 0900 	mov.w	r9, #0
 8003dec:	ea58 0309 	orrs.w	r3, r8, r9
 8003df0:	d047      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d82a      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e19 	.word	0x08003e19
 8003e08:	08003e27 	.word	0x08003e27
 8003e0c:	08003e3d 	.word	0x08003e3d
 8003e10:	08003e5b 	.word	0x08003e5b
 8003e14:	08003e5b 	.word	0x08003e5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e18:	4b81      	ldr	r3, [pc, #516]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	4a80      	ldr	r2, [pc, #512]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e24:	e01a      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fbd2 	bl	80055d8 <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e3a:	e00f      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e40:	3328      	adds	r3, #40	@ 0x28
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 fc79 	bl	800573c <RCCEx_PLL3_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e50:	e004      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e64:	4b6e      	ldr	r3, [pc, #440]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e68:	f023 0107 	bic.w	r1, r3, #7
 8003e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	4a6b      	ldr	r2, [pc, #428]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003e8e:	f04f 0b00 	mov.w	fp, #0
 8003e92:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e96:	d05b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ea0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003ea4:	d03b      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003ea6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003eaa:	d834      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003eac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eb0:	d037      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003eb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eb6:	d82e      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003eb8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ebc:	d033      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ebe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ec2:	d828      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec8:	d01a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ece:	d822      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003ed4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ed8:	d007      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003eda:	e01c      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003edc:	4b50      	ldr	r3, [pc, #320]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ee8:	e01e      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eee:	3308      	adds	r3, #8
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 fb70 	bl	80055d8 <RCCEx_PLL2_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003efe:	e013      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f04:	3328      	adds	r3, #40	@ 0x28
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 fc17 	bl	800573c <RCCEx_PLL3_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f1c:	e004      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f30:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f34:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f40:	4a37      	ldr	r2, [pc, #220]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f46:	e003      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d05d      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f7e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003f82:	d834      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f88:	d037      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003f8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f8e:	d82e      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f94:	d033      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003f96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f9a:	d828      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fa0:	d01a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003fa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fa6:	d822      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fb0:	d007      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003fb2:	e01c      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	4a19      	ldr	r2, [pc, #100]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fc0:	e01e      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 fb04 	bl	80055d8 <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fd6:	e013      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fdc:	3328      	adds	r3, #40	@ 0x28
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 fbab 	bl	800573c <RCCEx_PLL3_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fec:	e008      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ff4:	e004      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10d      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004008:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004014:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004018:	4a01      	ldr	r2, [pc, #4]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800401a:	430b      	orrs	r3, r1
 800401c:	6593      	str	r3, [r2, #88]	@ 0x58
 800401e:	e005      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004020:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004028:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004038:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004042:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004046:	460b      	mov	r3, r1
 8004048:	4313      	orrs	r3, r2
 800404a:	d03a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004052:	2b30      	cmp	r3, #48	@ 0x30
 8004054:	d01f      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004056:	2b30      	cmp	r3, #48	@ 0x30
 8004058:	d819      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800405a:	2b20      	cmp	r3, #32
 800405c:	d00c      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800405e:	2b20      	cmp	r3, #32
 8004060:	d815      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d019      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004066:	2b10      	cmp	r3, #16
 8004068:	d111      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406a:	4baa      	ldr	r3, [pc, #680]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	4aa9      	ldr	r2, [pc, #676]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004076:	e011      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	3308      	adds	r3, #8
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f001 faa9 	bl	80055d8 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800409a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80040a4:	4b9b      	ldr	r3, [pc, #620]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80040ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b2:	4a98      	ldr	r2, [pc, #608]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80040ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80040d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d051      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80040e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ec:	d035      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80040ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f2:	d82e      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80040f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040f8:	d031      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80040fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040fe:	d828      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004104:	d01a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410a:	d822      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004114:	d007      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004116:	e01c      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004118:	4b7e      	ldr	r3, [pc, #504]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	4a7d      	ldr	r2, [pc, #500]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800411e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004124:	e01c      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412a:	3308      	adds	r3, #8
 800412c:	2100      	movs	r1, #0
 800412e:	4618      	mov	r0, r3
 8004130:	f001 fa52 	bl	80055d8 <RCCEx_PLL2_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800413a:	e011      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004140:	3328      	adds	r3, #40	@ 0x28
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f001 faf9 	bl	800573c <RCCEx_PLL3_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004150:	e006      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004158:	e002      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800415a:	bf00      	nop
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800415e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004168:	4b6a      	ldr	r3, [pc, #424]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800416a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800416c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004176:	4a67      	ldr	r2, [pc, #412]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004178:	430b      	orrs	r3, r1
 800417a:	6513      	str	r3, [r2, #80]	@ 0x50
 800417c:	e003      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004182:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004192:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004196:	2300      	movs	r3, #0
 8004198:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800419c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	d053      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041b0:	d033      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80041b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041b6:	d82c      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80041b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041bc:	d02f      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80041be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041c2:	d826      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80041c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041c8:	d02b      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80041ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041ce:	d820      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80041d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041d4:	d012      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80041d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041da:	d81a      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d022      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e4:	d115      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ea:	3308      	adds	r3, #8
 80041ec:	2101      	movs	r1, #1
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 f9f2 	bl	80055d8 <RCCEx_PLL2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80041fa:	e015      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004200:	3328      	adds	r3, #40	@ 0x28
 8004202:	2101      	movs	r1, #1
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fa99 	bl	800573c <RCCEx_PLL3_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004210:	e00a      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800421a:	bf00      	nop
 800421c:	e004      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004230:	4b38      	ldr	r3, [pc, #224]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004234:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423e:	4a35      	ldr	r2, [pc, #212]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004240:	430b      	orrs	r3, r1
 8004242:	6513      	str	r3, [r2, #80]	@ 0x50
 8004244:	e003      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800424a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800424e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800425a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004264:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004268:	460b      	mov	r3, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	d058      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800426e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004276:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800427a:	d033      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800427c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004280:	d82c      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004286:	d02f      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428c:	d826      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800428e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004292:	d02b      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004294:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004298:	d820      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800429a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800429e:	d012      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80042a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042a4:	d81a      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d022      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80042aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ae:	d115      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b4:	3308      	adds	r3, #8
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 f98d 	bl	80055d8 <RCCEx_PLL2_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042c4:	e015      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ca:	3328      	adds	r3, #40	@ 0x28
 80042cc:	2101      	movs	r1, #1
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 fa34 	bl	800573c <RCCEx_PLL3_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042da:	e00a      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042e2:	e006      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042e4:	bf00      	nop
 80042e6:	e004      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042e8:	bf00      	nop
 80042ea:	e002      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042ec:	bf00      	nop
 80042ee:	e000      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10e      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004306:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800430a:	4a02      	ldr	r2, [pc, #8]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800430c:	430b      	orrs	r3, r1
 800430e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004310:	e006      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004312:	bf00      	nop
 8004314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800431c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800432c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004336:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800433a:	460b      	mov	r3, r1
 800433c:	4313      	orrs	r3, r2
 800433e:	d037      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800434a:	d00e      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800434c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004350:	d816      	bhi.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d018      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800435a:	d111      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435c:	4bc4      	ldr	r3, [pc, #784]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	4ac3      	ldr	r2, [pc, #780]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004368:	e00f      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800436a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436e:	3308      	adds	r3, #8
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f001 f930 	bl	80055d8 <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800437e:	e004      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004386:	e000      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004392:	4bb7      	ldr	r3, [pc, #732]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004396:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800439a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a0:	4ab3      	ldr	r2, [pc, #716]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80043a6:	e003      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80043bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80043ca:	460b      	mov	r3, r1
 80043cc:	4313      	orrs	r3, r2
 80043ce:	d039      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80043d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d81c      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80043da:	a201      	add	r2, pc, #4	@ (adr r2, 80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	0800441d 	.word	0x0800441d
 80043e4:	080043f1 	.word	0x080043f1
 80043e8:	080043ff 	.word	0x080043ff
 80043ec:	0800441d 	.word	0x0800441d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f0:	4b9f      	ldr	r3, [pc, #636]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	4a9e      	ldr	r2, [pc, #632]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80043fc:	e00f      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004402:	3308      	adds	r3, #8
 8004404:	2102      	movs	r1, #2
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f8e6 	bl	80055d8 <RCCEx_PLL2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004412:	e004      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800441c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004426:	4b92      	ldr	r3, [pc, #584]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442a:	f023 0103 	bic.w	r1, r3, #3
 800442e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004434:	4a8e      	ldr	r2, [pc, #568]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004436:	430b      	orrs	r3, r1
 8004438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800443a:	e003      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004440:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800445a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	f000 8099 	beq.w	8004598 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004466:	4b83      	ldr	r3, [pc, #524]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a82      	ldr	r2, [pc, #520]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004470:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004472:	f7fc febb 	bl	80011ec <HAL_GetTick>
 8004476:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800447a:	e00b      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447c:	f7fc feb6 	bl	80011ec <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b64      	cmp	r3, #100	@ 0x64
 800448a:	d903      	bls.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004492:	e005      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004494:	4b77      	ldr	r3, [pc, #476]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0ed      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80044a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d173      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80044a8:	4b71      	ldr	r3, [pc, #452]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044b4:	4053      	eors	r3, r2
 80044b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d015      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044be:	4b6c      	ldr	r3, [pc, #432]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ca:	4b69      	ldr	r3, [pc, #420]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a68      	ldr	r2, [pc, #416]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044d6:	4b66      	ldr	r3, [pc, #408]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	4a65      	ldr	r2, [pc, #404]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80044e2:	4a63      	ldr	r2, [pc, #396]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80044ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f6:	d118      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fc fe78 	bl	80011ec <HAL_GetTick>
 80044fc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004500:	e00d      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fc fe73 	bl	80011ec <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800450c:	1ad2      	subs	r2, r2, r3
 800450e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004512:	429a      	cmp	r2, r3
 8004514:	d903      	bls.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800451c:	e005      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800451e:	4b54      	ldr	r3, [pc, #336]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0eb      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800452a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800452e:	2b00      	cmp	r3, #0
 8004530:	d129      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004536:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004542:	d10e      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004544:	4b4a      	ldr	r3, [pc, #296]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800454c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004554:	091a      	lsrs	r2, r3, #4
 8004556:	4b48      	ldr	r3, [pc, #288]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004558:	4013      	ands	r3, r2
 800455a:	4a45      	ldr	r2, [pc, #276]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800455c:	430b      	orrs	r3, r1
 800455e:	6113      	str	r3, [r2, #16]
 8004560:	e005      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004562:	4b43      	ldr	r3, [pc, #268]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	4a42      	ldr	r2, [pc, #264]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004568:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800456c:	6113      	str	r3, [r2, #16]
 800456e:	4b40      	ldr	r3, [pc, #256]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004570:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800457a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457e:	4a3c      	ldr	r2, [pc, #240]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004580:	430b      	orrs	r3, r1
 8004582:	6713      	str	r3, [r2, #112]	@ 0x70
 8004584:	e008      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004586:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800458a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f002 0301 	and.w	r3, r2, #1
 80045a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80045ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f000 808f 	beq.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80045ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045c0:	2b28      	cmp	r3, #40	@ 0x28
 80045c2:	d871      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80045c4:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080046b1 	.word	0x080046b1
 80045d0:	080046a9 	.word	0x080046a9
 80045d4:	080046a9 	.word	0x080046a9
 80045d8:	080046a9 	.word	0x080046a9
 80045dc:	080046a9 	.word	0x080046a9
 80045e0:	080046a9 	.word	0x080046a9
 80045e4:	080046a9 	.word	0x080046a9
 80045e8:	080046a9 	.word	0x080046a9
 80045ec:	0800467d 	.word	0x0800467d
 80045f0:	080046a9 	.word	0x080046a9
 80045f4:	080046a9 	.word	0x080046a9
 80045f8:	080046a9 	.word	0x080046a9
 80045fc:	080046a9 	.word	0x080046a9
 8004600:	080046a9 	.word	0x080046a9
 8004604:	080046a9 	.word	0x080046a9
 8004608:	080046a9 	.word	0x080046a9
 800460c:	08004693 	.word	0x08004693
 8004610:	080046a9 	.word	0x080046a9
 8004614:	080046a9 	.word	0x080046a9
 8004618:	080046a9 	.word	0x080046a9
 800461c:	080046a9 	.word	0x080046a9
 8004620:	080046a9 	.word	0x080046a9
 8004624:	080046a9 	.word	0x080046a9
 8004628:	080046a9 	.word	0x080046a9
 800462c:	080046b1 	.word	0x080046b1
 8004630:	080046a9 	.word	0x080046a9
 8004634:	080046a9 	.word	0x080046a9
 8004638:	080046a9 	.word	0x080046a9
 800463c:	080046a9 	.word	0x080046a9
 8004640:	080046a9 	.word	0x080046a9
 8004644:	080046a9 	.word	0x080046a9
 8004648:	080046a9 	.word	0x080046a9
 800464c:	080046b1 	.word	0x080046b1
 8004650:	080046a9 	.word	0x080046a9
 8004654:	080046a9 	.word	0x080046a9
 8004658:	080046a9 	.word	0x080046a9
 800465c:	080046a9 	.word	0x080046a9
 8004660:	080046a9 	.word	0x080046a9
 8004664:	080046a9 	.word	0x080046a9
 8004668:	080046a9 	.word	0x080046a9
 800466c:	080046b1 	.word	0x080046b1
 8004670:	58024400 	.word	0x58024400
 8004674:	58024800 	.word	0x58024800
 8004678:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004680:	3308      	adds	r3, #8
 8004682:	2101      	movs	r1, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f000 ffa7 	bl	80055d8 <RCCEx_PLL2_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004690:	e00f      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004696:	3328      	adds	r3, #40	@ 0x28
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f001 f84e 	bl	800573c <RCCEx_PLL3_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046a6:	e004      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046ae:	e000      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80046b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046ba:	4bbf      	ldr	r3, [pc, #764]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80046c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046c8:	4abb      	ldr	r2, [pc, #748]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80046ce:	e003      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f002 0302 	and.w	r3, r2, #2
 80046e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046e8:	2300      	movs	r3, #0
 80046ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4313      	orrs	r3, r2
 80046f6:	d041      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80046f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d824      	bhi.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004702:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004755 	.word	0x08004755
 800470c:	08004721 	.word	0x08004721
 8004710:	08004737 	.word	0x08004737
 8004714:	08004755 	.word	0x08004755
 8004718:	08004755 	.word	0x08004755
 800471c:	08004755 	.word	0x08004755
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004724:	3308      	adds	r3, #8
 8004726:	2101      	movs	r1, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f000 ff55 	bl	80055d8 <RCCEx_PLL2_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004734:	e00f      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800473a:	3328      	adds	r3, #40	@ 0x28
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fffc 	bl	800573c <RCCEx_PLL3_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800474a:	e004      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004756:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800475e:	4b96      	ldr	r3, [pc, #600]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004762:	f023 0107 	bic.w	r1, r3, #7
 8004766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800476a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476c:	4a92      	ldr	r2, [pc, #584]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800476e:	430b      	orrs	r3, r1
 8004770:	6553      	str	r3, [r2, #84]	@ 0x54
 8004772:	e003      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004778:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800477c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f002 0304 	and.w	r3, r2, #4
 8004788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800478c:	2300      	movs	r3, #0
 800478e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004792:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004796:	460b      	mov	r3, r1
 8004798:	4313      	orrs	r3, r2
 800479a:	d044      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800479c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d825      	bhi.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80047a8:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047fd 	.word	0x080047fd
 80047b4:	080047c9 	.word	0x080047c9
 80047b8:	080047df 	.word	0x080047df
 80047bc:	080047fd 	.word	0x080047fd
 80047c0:	080047fd 	.word	0x080047fd
 80047c4:	080047fd 	.word	0x080047fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047cc:	3308      	adds	r3, #8
 80047ce:	2101      	movs	r1, #1
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 ff01 	bl	80055d8 <RCCEx_PLL2_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80047dc:	e00f      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e2:	3328      	adds	r3, #40	@ 0x28
 80047e4:	2101      	movs	r1, #1
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 ffa8 	bl	800573c <RCCEx_PLL3_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80047f2:	e004      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80047fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004806:	4b6c      	ldr	r3, [pc, #432]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480a:	f023 0107 	bic.w	r1, r3, #7
 800480e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	4a68      	ldr	r2, [pc, #416]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004818:	430b      	orrs	r3, r1
 800481a:	6593      	str	r3, [r2, #88]	@ 0x58
 800481c:	e003      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004822:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f002 0320 	and.w	r3, r2, #32
 8004832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004836:	2300      	movs	r3, #0
 8004838:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800483c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004840:	460b      	mov	r3, r1
 8004842:	4313      	orrs	r3, r2
 8004844:	d055      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800484a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800484e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004852:	d033      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004858:	d82c      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800485e:	d02f      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004864:	d826      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800486a:	d02b      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800486c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004870:	d820      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004876:	d012      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800487c:	d81a      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d022      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004886:	d115      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800488c:	3308      	adds	r3, #8
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fea1 	bl	80055d8 <RCCEx_PLL2_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800489c:	e015      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800489e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a2:	3328      	adds	r3, #40	@ 0x28
 80048a4:	2102      	movs	r1, #2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 ff48 	bl	800573c <RCCEx_PLL3_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048b2:	e00a      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048ba:	e006      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80048bc:	bf00      	nop
 80048be:	e004      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80048c0:	bf00      	nop
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048d2:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80048da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048e2:	4a35      	ldr	r2, [pc, #212]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80048fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004908:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d058      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800491a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800491e:	d033      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004920:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004924:	d82c      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492a:	d02f      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004930:	d826      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004932:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004936:	d02b      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004938:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800493c:	d820      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800493e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004942:	d012      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004948:	d81a      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d022      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004952:	d115      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004958:	3308      	adds	r3, #8
 800495a:	2100      	movs	r1, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fe3b 	bl	80055d8 <RCCEx_PLL2_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004968:	e015      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800496a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496e:	3328      	adds	r3, #40	@ 0x28
 8004970:	2102      	movs	r1, #2
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fee2 	bl	800573c <RCCEx_PLL3_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800497e:	e00a      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004986:	e006      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004988:	bf00      	nop
 800498a:	e004      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800498c:	bf00      	nop
 800498e:	e002      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10e      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800499e:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80049a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049ae:	4a02      	ldr	r2, [pc, #8]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80049b4:	e006      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80049b6:	bf00      	nop
 80049b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80049c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80049d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049d4:	2300      	movs	r3, #0
 80049d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80049de:	460b      	mov	r3, r1
 80049e0:	4313      	orrs	r3, r2
 80049e2:	d055      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80049e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80049f0:	d033      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80049f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80049f6:	d82c      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049fc:	d02f      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80049fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a02:	d826      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a08:	d02b      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004a0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a0e:	d820      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a14:	d012      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004a16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a1a:	d81a      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d022      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a24:	d115      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fdd2 	bl	80055d8 <RCCEx_PLL2_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a3a:	e015      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a40:	3328      	adds	r3, #40	@ 0x28
 8004a42:	2102      	movs	r1, #2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fe79 	bl	800573c <RCCEx_PLL3_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a50:	e00a      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a5a:	bf00      	nop
 8004a5c:	e004      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a70:	4ba0      	ldr	r3, [pc, #640]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a80:	4a9c      	ldr	r2, [pc, #624]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a82:	430b      	orrs	r3, r1
 8004a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a86:	e003      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f002 0308 	and.w	r3, r2, #8
 8004a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004aa6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d01e      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac2:	3328      	adds	r3, #40	@ 0x28
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fe38 	bl	800573c <RCCEx_PLL3_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004ad8:	4b86      	ldr	r3, [pc, #536]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004adc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ae8:	4a82      	ldr	r2, [pc, #520]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004aea:	430b      	orrs	r3, r1
 8004aec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f002 0310 	and.w	r3, r2, #16
 8004afa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004afe:	2300      	movs	r3, #0
 8004b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b04:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	d01e      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b1a:	d10c      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b20:	3328      	adds	r3, #40	@ 0x28
 8004b22:	2102      	movs	r1, #2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fe09 	bl	800573c <RCCEx_PLL3_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b36:	4b6f      	ldr	r3, [pc, #444]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b46:	4a6b      	ldr	r2, [pc, #428]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004b58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b5e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	d03e      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b74:	d022      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b7a:	d81b      	bhi.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b84:	d00b      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004b86:	e015      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fd21 	bl	80055d8 <RCCEx_PLL2_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b9c:	e00f      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba2:	3328      	adds	r3, #40	@ 0x28
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fdc8 	bl	800573c <RCCEx_PLL3_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bb2:	e004      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bd6:	4a47      	ldr	r2, [pc, #284]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bdc:	e003      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004be2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004bf2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bf8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	d03b      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c0e:	d01f      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004c10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c14:	d818      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004c1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c20:	d007      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004c22:	e011      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c24:	4b33      	ldr	r3, [pc, #204]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	4a32      	ldr	r2, [pc, #200]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c30:	e00f      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c36:	3328      	adds	r3, #40	@ 0x28
 8004c38:	2101      	movs	r1, #1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fd7e 	bl	800573c <RCCEx_PLL3_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c46:	e004      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c4e:	e000      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c5a:	4b26      	ldr	r3, [pc, #152]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6a:	4a22      	ldr	r2, [pc, #136]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c70:	e003      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004c86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c88:	2300      	movs	r3, #0
 8004c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c8c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c90:	460b      	mov	r3, r1
 8004c92:	4313      	orrs	r3, r2
 8004c94:	d034      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca4:	d007      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004ca6:	e011      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca8:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	4a11      	ldr	r2, [pc, #68]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cb4:	e00e      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cba:	3308      	adds	r3, #8
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fc8a 	bl	80055d8 <RCCEx_PLL2_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cca:	e003      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10d      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cea:	4a02      	ldr	r2, [pc, #8]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cec:	430b      	orrs	r3, r1
 8004cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cf0:	e006      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004cf2:	bf00      	nop
 8004cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d0e:	2300      	movs	r3, #0
 8004d10:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d12:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004d16:	460b      	mov	r3, r1
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	d00c      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d20:	3328      	adds	r3, #40	@ 0x28
 8004d22:	2102      	movs	r1, #2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fd09 	bl	800573c <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004d42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d44:	2300      	movs	r3, #0
 8004d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d48:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	d036      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d5c:	d018      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004d5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d62:	d811      	bhi.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d68:	d014      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d6e:	d80b      	bhi.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d78:	d106      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7a:	4bb7      	ldr	r3, [pc, #732]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	4ab6      	ldr	r2, [pc, #728]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004d86:	e008      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d8e:	e004      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004d90:	bf00      	nop
 8004d92:	e002      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004d94:	bf00      	nop
 8004d96:	e000      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004da2:	4bad      	ldr	r3, [pc, #692]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004db0:	4aa9      	ldr	r2, [pc, #676]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004db2:	430b      	orrs	r3, r1
 8004db4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004db6:	e003      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004dcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dce:	2300      	movs	r3, #0
 8004dd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dd2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d009      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ddc:	4b9e      	ldr	r3, [pc, #632]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	4a9b      	ldr	r2, [pc, #620]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dfe:	2300      	movs	r3, #0
 8004e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e02:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e06:	460b      	mov	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	d009      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e0c:	4b92      	ldr	r3, [pc, #584]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e10:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e1a:	4a8f      	ldr	r2, [pc, #572]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004e2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e2e:	2300      	movs	r3, #0
 8004e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e32:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e3c:	4b86      	ldr	r3, [pc, #536]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	4a85      	ldr	r2, [pc, #532]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e46:	6113      	str	r3, [r2, #16]
 8004e48:	4b83      	ldr	r3, [pc, #524]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e4a:	6919      	ldr	r1, [r3, #16]
 8004e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e54:	4a80      	ldr	r2, [pc, #512]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e56:	430b      	orrs	r3, r1
 8004e58:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e68:	2300      	movs	r3, #0
 8004e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e6c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e70:	460b      	mov	r3, r1
 8004e72:	4313      	orrs	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e76:	4b78      	ldr	r3, [pc, #480]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e7a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e84:	4a74      	ldr	r2, [pc, #464]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e86:	430b      	orrs	r3, r1
 8004e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e98:	2300      	movs	r3, #0
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e9c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	d00a      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ea6:	4b6c      	ldr	r3, [pc, #432]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eaa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb6:	4a68      	ldr	r2, [pc, #416]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ece:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d011      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004edc:	3308      	adds	r3, #8
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fb79 	bl	80055d8 <RCCEx_PLL2_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004eec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ef8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	2100      	movs	r1, #0
 8004f06:	6239      	str	r1, [r7, #32]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f12:	460b      	mov	r3, r1
 8004f14:	4313      	orrs	r3, r2
 8004f16:	d011      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fb59 	bl	80055d8 <RCCEx_PLL2_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	2100      	movs	r1, #0
 8004f46:	61b9      	str	r1, [r7, #24]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d011      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	2102      	movs	r1, #2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fb39 	bl	80055d8 <RCCEx_PLL2_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	2100      	movs	r1, #0
 8004f86:	6139      	str	r1, [r7, #16]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f92:	460b      	mov	r3, r1
 8004f94:	4313      	orrs	r3, r2
 8004f96:	d011      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9c:	3328      	adds	r3, #40	@ 0x28
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fbcb 	bl	800573c <RCCEx_PLL3_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004fac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	d011      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fdc:	3328      	adds	r3, #40	@ 0x28
 8004fde:	2101      	movs	r1, #1
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fbab 	bl	800573c <RCCEx_PLL3_Config>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ff8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	2100      	movs	r1, #0
 8005006:	6039      	str	r1, [r7, #0]
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005012:	460b      	mov	r3, r1
 8005014:	4313      	orrs	r3, r2
 8005016:	d011      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501c:	3328      	adds	r3, #40	@ 0x28
 800501e:	2102      	movs	r1, #2
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fb8b 	bl	800573c <RCCEx_PLL3_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800502c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800503c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
}
 800504a:	4618      	mov	r0, r3
 800504c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005056:	bf00      	nop
 8005058:	58024400 	.word	0x58024400

0800505c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005060:	f7fe fe00 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4904      	ldr	r1, [pc, #16]	@ (8005084 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800507c:	4618      	mov	r0, r3
 800507e:	bd80      	pop	{r7, pc}
 8005080:	58024400 	.word	0x58024400
 8005084:	0800b2c0 	.word	0x0800b2c0

08005088 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	@ 0x24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005090:	4ba1      	ldr	r3, [pc, #644]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800509a:	4b9f      	ldr	r3, [pc, #636]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	0b1b      	lsrs	r3, r3, #12
 80050a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80050a6:	4b9c      	ldr	r3, [pc, #624]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80050b2:	4b99      	ldr	r3, [pc, #612]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b6:	08db      	lsrs	r3, r3, #3
 80050b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8111 	beq.w	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	f000 8083 	beq.w	80051e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	f200 80a1 	bhi.w	8005228 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d056      	beq.n	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80050f2:	e099      	b.n	8005228 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050f4:	4b88      	ldr	r3, [pc, #544]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d02d      	beq.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005100:	4b85      	ldr	r3, [pc, #532]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	08db      	lsrs	r3, r3, #3
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	4a84      	ldr	r2, [pc, #528]	@ (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
 8005110:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	ee07 3a90 	vmov	s15, r3
 8005118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512a:	4b7b      	ldr	r3, [pc, #492]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513a:	ed97 6a03 	vldr	s12, [r7, #12]
 800513e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800514e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005156:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800515a:	e087      	b.n	800526c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005166:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800516a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516e:	4b6a      	ldr	r3, [pc, #424]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005182:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800519e:	e065      	b.n	800526c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b2:	4b59      	ldr	r3, [pc, #356]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051e2:	e043      	b.n	800526c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800532c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80051f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f6:	4b48      	ldr	r3, [pc, #288]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005206:	ed97 6a03 	vldr	s12, [r7, #12]
 800520a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800520e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800521a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005226:	e021      	b.n	800526c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523a:	4b37      	ldr	r3, [pc, #220]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800523c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524a:	ed97 6a03 	vldr	s12, [r7, #12]
 800524e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800525e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800526a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800526c:	4b2a      	ldr	r3, [pc, #168]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	0a5b      	lsrs	r3, r3, #9
 8005272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005286:	edd7 6a07 	vldr	s13, [r7, #28]
 800528a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800528e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005292:	ee17 2a90 	vmov	r2, s15
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800529a:	4b1f      	ldr	r3, [pc, #124]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800529c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a4:	ee07 3a90 	vmov	s15, r3
 80052a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c0:	ee17 2a90 	vmov	r2, s15
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80052c8:	4b13      	ldr	r3, [pc, #76]	@ (8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052cc:	0e1b      	lsrs	r3, r3, #24
 80052ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ee:	ee17 2a90 	vmov	r2, s15
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052f6:	e008      	b.n	800530a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	609a      	str	r2, [r3, #8]
}
 800530a:	bf00      	nop
 800530c:	3724      	adds	r7, #36	@ 0x24
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
 800531c:	03d09000 	.word	0x03d09000
 8005320:	46000000 	.word	0x46000000
 8005324:	4c742400 	.word	0x4c742400
 8005328:	4a742400 	.word	0x4a742400
 800532c:	4bbebc20 	.word	0x4bbebc20

08005330 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005330:	b480      	push	{r7}
 8005332:	b089      	sub	sp, #36	@ 0x24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005338:	4ba1      	ldr	r3, [pc, #644]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005342:	4b9f      	ldr	r3, [pc, #636]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005346:	0d1b      	lsrs	r3, r3, #20
 8005348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800534c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800534e:	4b9c      	ldr	r3, [pc, #624]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800535a:	4b99      	ldr	r3, [pc, #612]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	08db      	lsrs	r3, r3, #3
 8005360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 8111 	beq.w	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b02      	cmp	r3, #2
 8005382:	f000 8083 	beq.w	800548c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b02      	cmp	r3, #2
 800538a:	f200 80a1 	bhi.w	80054d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d056      	beq.n	8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800539a:	e099      	b.n	80054d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800539c:	4b88      	ldr	r3, [pc, #544]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d02d      	beq.n	8005404 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053a8:	4b85      	ldr	r3, [pc, #532]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	08db      	lsrs	r3, r3, #3
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	4a84      	ldr	r2, [pc, #528]	@ (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
 80053b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	4b7b      	ldr	r3, [pc, #492]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005402:	e087      	b.n	8005514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005416:	4b6a      	ldr	r3, [pc, #424]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	ed97 6a03 	vldr	s12, [r7, #12]
 800542a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800542e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800543a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005446:	e065      	b.n	8005514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545a:	4b59      	ldr	r3, [pc, #356]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546a:	ed97 6a03 	vldr	s12, [r7, #12]
 800546e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800547e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800548a:	e043      	b.n	8005514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800549a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549e:	4b48      	ldr	r3, [pc, #288]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ce:	e021      	b.n	8005514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e2:	4b37      	ldr	r3, [pc, #220]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005512:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005514:	4b2a      	ldr	r3, [pc, #168]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005518:	0a5b      	lsrs	r3, r3, #9
 800551a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800552a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800552e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800553a:	ee17 2a90 	vmov	r2, s15
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005542:	4b1f      	ldr	r3, [pc, #124]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	0c1b      	lsrs	r3, r3, #16
 8005548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800554c:	ee07 3a90 	vmov	s15, r3
 8005550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800555c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005568:	ee17 2a90 	vmov	r2, s15
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005570:	4b13      	ldr	r3, [pc, #76]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005574:	0e1b      	lsrs	r3, r3, #24
 8005576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800558a:	edd7 6a07 	vldr	s13, [r7, #28]
 800558e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005596:	ee17 2a90 	vmov	r2, s15
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800559e:	e008      	b.n	80055b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	609a      	str	r2, [r3, #8]
}
 80055b2:	bf00      	nop
 80055b4:	3724      	adds	r7, #36	@ 0x24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400
 80055c4:	03d09000 	.word	0x03d09000
 80055c8:	46000000 	.word	0x46000000
 80055cc:	4c742400 	.word	0x4c742400
 80055d0:	4a742400 	.word	0x4a742400
 80055d4:	4bbebc20 	.word	0x4bbebc20

080055d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055e6:	4b53      	ldr	r3, [pc, #332]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d101      	bne.n	80055f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e099      	b.n	800572a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055f6:	4b4f      	ldr	r3, [pc, #316]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80055fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005602:	f7fb fdf3 	bl	80011ec <HAL_GetTick>
 8005606:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005608:	e008      	b.n	800561c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800560a:	f7fb fdef 	bl	80011ec <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e086      	b.n	800572a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800561c:	4b45      	ldr	r3, [pc, #276]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f0      	bne.n	800560a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005628:	4b42      	ldr	r3, [pc, #264]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	031b      	lsls	r3, r3, #12
 8005636:	493f      	ldr	r1, [pc, #252]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 8005638:	4313      	orrs	r3, r2
 800563a:	628b      	str	r3, [r1, #40]	@ 0x28
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	3b01      	subs	r3, #1
 8005642:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	3b01      	subs	r3, #1
 800564c:	025b      	lsls	r3, r3, #9
 800564e:	b29b      	uxth	r3, r3
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	3b01      	subs	r3, #1
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800566c:	4931      	ldr	r1, [pc, #196]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 800566e:	4313      	orrs	r3, r2
 8005670:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005672:	4b30      	ldr	r3, [pc, #192]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 8005674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005676:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	492d      	ldr	r1, [pc, #180]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005684:	4b2b      	ldr	r3, [pc, #172]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	f023 0220 	bic.w	r2, r3, #32
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	4928      	ldr	r1, [pc, #160]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 8005692:	4313      	orrs	r3, r2
 8005694:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005696:	4b27      	ldr	r3, [pc, #156]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	4a26      	ldr	r2, [pc, #152]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 800569c:	f023 0310 	bic.w	r3, r3, #16
 80056a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80056a2:	4b24      	ldr	r3, [pc, #144]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056a6:	4b24      	ldr	r3, [pc, #144]	@ (8005738 <RCCEx_PLL2_Config+0x160>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	69d2      	ldr	r2, [r2, #28]
 80056ae:	00d2      	lsls	r2, r2, #3
 80056b0:	4920      	ldr	r1, [pc, #128]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80056b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056bc:	f043 0310 	orr.w	r3, r3, #16
 80056c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d106      	bne.n	80056d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80056c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	4a19      	ldr	r2, [pc, #100]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056d4:	e00f      	b.n	80056f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d106      	bne.n	80056ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80056dc:	4b15      	ldr	r3, [pc, #84]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	4a14      	ldr	r2, [pc, #80]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056e8:	e005      	b.n	80056f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80056ea:	4b12      	ldr	r3, [pc, #72]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	4a11      	ldr	r2, [pc, #68]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 80056fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005702:	f7fb fd73 	bl	80011ec <HAL_GetTick>
 8005706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005708:	e008      	b.n	800571c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800570a:	f7fb fd6f 	bl	80011ec <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800571c:	4b05      	ldr	r3, [pc, #20]	@ (8005734 <RCCEx_PLL2_Config+0x15c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0f0      	beq.n	800570a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	58024400 	.word	0x58024400
 8005738:	ffff0007 	.word	0xffff0007

0800573c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800574a:	4b53      	ldr	r3, [pc, #332]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	2b03      	cmp	r3, #3
 8005754:	d101      	bne.n	800575a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e099      	b.n	800588e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800575a:	4b4f      	ldr	r3, [pc, #316]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4e      	ldr	r2, [pc, #312]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005766:	f7fb fd41 	bl	80011ec <HAL_GetTick>
 800576a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800576c:	e008      	b.n	8005780 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800576e:	f7fb fd3d 	bl	80011ec <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e086      	b.n	800588e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005780:	4b45      	ldr	r3, [pc, #276]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800578c:	4b42      	ldr	r3, [pc, #264]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	051b      	lsls	r3, r3, #20
 800579a:	493f      	ldr	r1, [pc, #252]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	628b      	str	r3, [r1, #40]	@ 0x28
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	025b      	lsls	r3, r3, #9
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	041b      	lsls	r3, r3, #16
 80057be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	061b      	lsls	r3, r3, #24
 80057cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057d0:	4931      	ldr	r1, [pc, #196]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057d6:	4b30      	ldr	r3, [pc, #192]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 80057d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	492d      	ldr	r1, [pc, #180]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80057e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	4928      	ldr	r1, [pc, #160]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057fa:	4b27      	ldr	r3, [pc, #156]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	4a26      	ldr	r2, [pc, #152]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005804:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005806:	4b24      	ldr	r3, [pc, #144]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800580a:	4b24      	ldr	r3, [pc, #144]	@ (800589c <RCCEx_PLL3_Config+0x160>)
 800580c:	4013      	ands	r3, r2
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	69d2      	ldr	r2, [r2, #28]
 8005812:	00d2      	lsls	r2, r2, #3
 8005814:	4920      	ldr	r1, [pc, #128]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800581a:	4b1f      	ldr	r3, [pc, #124]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 800581c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581e:	4a1e      	ldr	r2, [pc, #120]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005824:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800582c:	4b1a      	ldr	r3, [pc, #104]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 800582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005830:	4a19      	ldr	r2, [pc, #100]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005832:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005836:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005838:	e00f      	b.n	800585a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d106      	bne.n	800584e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005840:	4b15      	ldr	r3, [pc, #84]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005844:	4a14      	ldr	r2, [pc, #80]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005846:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800584a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800584c:	e005      	b.n	800585a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800584e:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005852:	4a11      	ldr	r2, [pc, #68]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005854:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005858:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800585a:	4b0f      	ldr	r3, [pc, #60]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a0e      	ldr	r2, [pc, #56]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005866:	f7fb fcc1 	bl	80011ec <HAL_GetTick>
 800586a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800586c:	e008      	b.n	8005880 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800586e:	f7fb fcbd 	bl	80011ec <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e006      	b.n	800588e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <RCCEx_PLL3_Config+0x15c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0f0      	beq.n	800586e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400
 800589c:	ffff0007 	.word	0xffff0007

080058a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e042      	b.n	8005938 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fb fa5f 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2224      	movs	r2, #36	@ 0x24
 80058ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 ff22 	bl	8006734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8b3 	bl	8005a5c <UART_SetConfig>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e01b      	b.n	8005938 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800590e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800591e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 ffa1 	bl	8006878 <UART_CheckIdleState>
 8005936:	4603      	mov	r3, r0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	@ 0x28
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005956:	2b20      	cmp	r3, #32
 8005958:	d17b      	bne.n	8005a52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_UART_Transmit+0x26>
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e074      	b.n	8005a54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2221      	movs	r2, #33	@ 0x21
 8005976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800597a:	f7fb fc37 	bl	80011ec <HAL_GetTick>
 800597e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	88fa      	ldrh	r2, [r7, #6]
 800598c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005998:	d108      	bne.n	80059ac <HAL_UART_Transmit+0x6c>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d104      	bne.n	80059ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	e003      	b.n	80059b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059b4:	e030      	b.n	8005a18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2200      	movs	r2, #0
 80059be:	2180      	movs	r1, #128	@ 0x80
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f001 f803 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e03d      	b.n	8005a54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	3302      	adds	r3, #2
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e007      	b.n	8005a06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	781a      	ldrb	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1c8      	bne.n	80059b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2140      	movs	r1, #64	@ 0x40
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 ffcc 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e006      	b.n	8005a54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e000      	b.n	8005a54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005a52:	2302      	movs	r3, #2
  }
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3720      	adds	r7, #32
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a60:	b092      	sub	sp, #72	@ 0x48
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	431a      	orrs	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4bbe      	ldr	r3, [pc, #760]	@ (8005d84 <UART_SetConfig+0x328>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a94:	430b      	orrs	r3, r1
 8005a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4ab3      	ldr	r2, [pc, #716]	@ (8005d88 <UART_SetConfig+0x32c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	4baf      	ldr	r3, [pc, #700]	@ (8005d8c <UART_SetConfig+0x330>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae2:	f023 010f 	bic.w	r1, r3, #15
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4aa6      	ldr	r2, [pc, #664]	@ (8005d90 <UART_SetConfig+0x334>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d177      	bne.n	8005bec <UART_SetConfig+0x190>
 8005afc:	4ba5      	ldr	r3, [pc, #660]	@ (8005d94 <UART_SetConfig+0x338>)
 8005afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b04:	2b28      	cmp	r3, #40	@ 0x28
 8005b06:	d86d      	bhi.n	8005be4 <UART_SetConfig+0x188>
 8005b08:	a201      	add	r2, pc, #4	@ (adr r2, 8005b10 <UART_SetConfig+0xb4>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005bb5 	.word	0x08005bb5
 8005b14:	08005be5 	.word	0x08005be5
 8005b18:	08005be5 	.word	0x08005be5
 8005b1c:	08005be5 	.word	0x08005be5
 8005b20:	08005be5 	.word	0x08005be5
 8005b24:	08005be5 	.word	0x08005be5
 8005b28:	08005be5 	.word	0x08005be5
 8005b2c:	08005be5 	.word	0x08005be5
 8005b30:	08005bbd 	.word	0x08005bbd
 8005b34:	08005be5 	.word	0x08005be5
 8005b38:	08005be5 	.word	0x08005be5
 8005b3c:	08005be5 	.word	0x08005be5
 8005b40:	08005be5 	.word	0x08005be5
 8005b44:	08005be5 	.word	0x08005be5
 8005b48:	08005be5 	.word	0x08005be5
 8005b4c:	08005be5 	.word	0x08005be5
 8005b50:	08005bc5 	.word	0x08005bc5
 8005b54:	08005be5 	.word	0x08005be5
 8005b58:	08005be5 	.word	0x08005be5
 8005b5c:	08005be5 	.word	0x08005be5
 8005b60:	08005be5 	.word	0x08005be5
 8005b64:	08005be5 	.word	0x08005be5
 8005b68:	08005be5 	.word	0x08005be5
 8005b6c:	08005be5 	.word	0x08005be5
 8005b70:	08005bcd 	.word	0x08005bcd
 8005b74:	08005be5 	.word	0x08005be5
 8005b78:	08005be5 	.word	0x08005be5
 8005b7c:	08005be5 	.word	0x08005be5
 8005b80:	08005be5 	.word	0x08005be5
 8005b84:	08005be5 	.word	0x08005be5
 8005b88:	08005be5 	.word	0x08005be5
 8005b8c:	08005be5 	.word	0x08005be5
 8005b90:	08005bd5 	.word	0x08005bd5
 8005b94:	08005be5 	.word	0x08005be5
 8005b98:	08005be5 	.word	0x08005be5
 8005b9c:	08005be5 	.word	0x08005be5
 8005ba0:	08005be5 	.word	0x08005be5
 8005ba4:	08005be5 	.word	0x08005be5
 8005ba8:	08005be5 	.word	0x08005be5
 8005bac:	08005be5 	.word	0x08005be5
 8005bb0:	08005bdd 	.word	0x08005bdd
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e326      	b.n	800620a <UART_SetConfig+0x7ae>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e322      	b.n	800620a <UART_SetConfig+0x7ae>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e31e      	b.n	800620a <UART_SetConfig+0x7ae>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e31a      	b.n	800620a <UART_SetConfig+0x7ae>
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e316      	b.n	800620a <UART_SetConfig+0x7ae>
 8005bdc:	2340      	movs	r3, #64	@ 0x40
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e312      	b.n	800620a <UART_SetConfig+0x7ae>
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e30e      	b.n	800620a <UART_SetConfig+0x7ae>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a69      	ldr	r2, [pc, #420]	@ (8005d98 <UART_SetConfig+0x33c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d130      	bne.n	8005c58 <UART_SetConfig+0x1fc>
 8005bf6:	4b67      	ldr	r3, [pc, #412]	@ (8005d94 <UART_SetConfig+0x338>)
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d826      	bhi.n	8005c50 <UART_SetConfig+0x1f4>
 8005c02:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <UART_SetConfig+0x1ac>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c21 	.word	0x08005c21
 8005c0c:	08005c29 	.word	0x08005c29
 8005c10:	08005c31 	.word	0x08005c31
 8005c14:	08005c39 	.word	0x08005c39
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c26:	e2f0      	b.n	800620a <UART_SetConfig+0x7ae>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2e:	e2ec      	b.n	800620a <UART_SetConfig+0x7ae>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c36:	e2e8      	b.n	800620a <UART_SetConfig+0x7ae>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e2e4      	b.n	800620a <UART_SetConfig+0x7ae>
 8005c40:	2320      	movs	r3, #32
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e2e0      	b.n	800620a <UART_SetConfig+0x7ae>
 8005c48:	2340      	movs	r3, #64	@ 0x40
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e2dc      	b.n	800620a <UART_SetConfig+0x7ae>
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e2d8      	b.n	800620a <UART_SetConfig+0x7ae>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8005d9c <UART_SetConfig+0x340>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d130      	bne.n	8005cc4 <UART_SetConfig+0x268>
 8005c62:	4b4c      	ldr	r3, [pc, #304]	@ (8005d94 <UART_SetConfig+0x338>)
 8005c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b05      	cmp	r3, #5
 8005c6c:	d826      	bhi.n	8005cbc <UART_SetConfig+0x260>
 8005c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <UART_SetConfig+0x218>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c8d 	.word	0x08005c8d
 8005c78:	08005c95 	.word	0x08005c95
 8005c7c:	08005c9d 	.word	0x08005c9d
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c92:	e2ba      	b.n	800620a <UART_SetConfig+0x7ae>
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e2b6      	b.n	800620a <UART_SetConfig+0x7ae>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e2b2      	b.n	800620a <UART_SetConfig+0x7ae>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e2ae      	b.n	800620a <UART_SetConfig+0x7ae>
 8005cac:	2320      	movs	r3, #32
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e2aa      	b.n	800620a <UART_SetConfig+0x7ae>
 8005cb4:	2340      	movs	r3, #64	@ 0x40
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e2a6      	b.n	800620a <UART_SetConfig+0x7ae>
 8005cbc:	2380      	movs	r3, #128	@ 0x80
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e2a2      	b.n	800620a <UART_SetConfig+0x7ae>
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a35      	ldr	r2, [pc, #212]	@ (8005da0 <UART_SetConfig+0x344>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d130      	bne.n	8005d30 <UART_SetConfig+0x2d4>
 8005cce:	4b31      	ldr	r3, [pc, #196]	@ (8005d94 <UART_SetConfig+0x338>)
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d826      	bhi.n	8005d28 <UART_SetConfig+0x2cc>
 8005cda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce0 <UART_SetConfig+0x284>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cf9 	.word	0x08005cf9
 8005ce4:	08005d01 	.word	0x08005d01
 8005ce8:	08005d09 	.word	0x08005d09
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d21 	.word	0x08005d21
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e284      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e280      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e27c      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e278      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e274      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d20:	2340      	movs	r3, #64	@ 0x40
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e270      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d28:	2380      	movs	r3, #128	@ 0x80
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e26c      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1b      	ldr	r2, [pc, #108]	@ (8005da4 <UART_SetConfig+0x348>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d142      	bne.n	8005dc0 <UART_SetConfig+0x364>
 8005d3a:	4b16      	ldr	r3, [pc, #88]	@ (8005d94 <UART_SetConfig+0x338>)
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d838      	bhi.n	8005db8 <UART_SetConfig+0x35c>
 8005d46:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <UART_SetConfig+0x2f0>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d65 	.word	0x08005d65
 8005d50:	08005d6d 	.word	0x08005d6d
 8005d54:	08005d75 	.word	0x08005d75
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005da9 	.word	0x08005da9
 8005d60:	08005db1 	.word	0x08005db1
 8005d64:	2300      	movs	r3, #0
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6a:	e24e      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d72:	e24a      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d74:	2308      	movs	r3, #8
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e246      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e242      	b.n	800620a <UART_SetConfig+0x7ae>
 8005d84:	cfff69f3 	.word	0xcfff69f3
 8005d88:	58000c00 	.word	0x58000c00
 8005d8c:	11fff4ff 	.word	0x11fff4ff
 8005d90:	40011000 	.word	0x40011000
 8005d94:	58024400 	.word	0x58024400
 8005d98:	40004400 	.word	0x40004400
 8005d9c:	40004800 	.word	0x40004800
 8005da0:	40004c00 	.word	0x40004c00
 8005da4:	40005000 	.word	0x40005000
 8005da8:	2320      	movs	r3, #32
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e22c      	b.n	800620a <UART_SetConfig+0x7ae>
 8005db0:	2340      	movs	r3, #64	@ 0x40
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e228      	b.n	800620a <UART_SetConfig+0x7ae>
 8005db8:	2380      	movs	r3, #128	@ 0x80
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e224      	b.n	800620a <UART_SetConfig+0x7ae>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4ab1      	ldr	r2, [pc, #708]	@ (800608c <UART_SetConfig+0x630>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d176      	bne.n	8005eb8 <UART_SetConfig+0x45c>
 8005dca:	4bb1      	ldr	r3, [pc, #708]	@ (8006090 <UART_SetConfig+0x634>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dd2:	2b28      	cmp	r3, #40	@ 0x28
 8005dd4:	d86c      	bhi.n	8005eb0 <UART_SetConfig+0x454>
 8005dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0x380>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005e81 	.word	0x08005e81
 8005de0:	08005eb1 	.word	0x08005eb1
 8005de4:	08005eb1 	.word	0x08005eb1
 8005de8:	08005eb1 	.word	0x08005eb1
 8005dec:	08005eb1 	.word	0x08005eb1
 8005df0:	08005eb1 	.word	0x08005eb1
 8005df4:	08005eb1 	.word	0x08005eb1
 8005df8:	08005eb1 	.word	0x08005eb1
 8005dfc:	08005e89 	.word	0x08005e89
 8005e00:	08005eb1 	.word	0x08005eb1
 8005e04:	08005eb1 	.word	0x08005eb1
 8005e08:	08005eb1 	.word	0x08005eb1
 8005e0c:	08005eb1 	.word	0x08005eb1
 8005e10:	08005eb1 	.word	0x08005eb1
 8005e14:	08005eb1 	.word	0x08005eb1
 8005e18:	08005eb1 	.word	0x08005eb1
 8005e1c:	08005e91 	.word	0x08005e91
 8005e20:	08005eb1 	.word	0x08005eb1
 8005e24:	08005eb1 	.word	0x08005eb1
 8005e28:	08005eb1 	.word	0x08005eb1
 8005e2c:	08005eb1 	.word	0x08005eb1
 8005e30:	08005eb1 	.word	0x08005eb1
 8005e34:	08005eb1 	.word	0x08005eb1
 8005e38:	08005eb1 	.word	0x08005eb1
 8005e3c:	08005e99 	.word	0x08005e99
 8005e40:	08005eb1 	.word	0x08005eb1
 8005e44:	08005eb1 	.word	0x08005eb1
 8005e48:	08005eb1 	.word	0x08005eb1
 8005e4c:	08005eb1 	.word	0x08005eb1
 8005e50:	08005eb1 	.word	0x08005eb1
 8005e54:	08005eb1 	.word	0x08005eb1
 8005e58:	08005eb1 	.word	0x08005eb1
 8005e5c:	08005ea1 	.word	0x08005ea1
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	08005eb1 	.word	0x08005eb1
 8005e68:	08005eb1 	.word	0x08005eb1
 8005e6c:	08005eb1 	.word	0x08005eb1
 8005e70:	08005eb1 	.word	0x08005eb1
 8005e74:	08005eb1 	.word	0x08005eb1
 8005e78:	08005eb1 	.word	0x08005eb1
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e1c0      	b.n	800620a <UART_SetConfig+0x7ae>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e1bc      	b.n	800620a <UART_SetConfig+0x7ae>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e1b8      	b.n	800620a <UART_SetConfig+0x7ae>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e1b4      	b.n	800620a <UART_SetConfig+0x7ae>
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e1b0      	b.n	800620a <UART_SetConfig+0x7ae>
 8005ea8:	2340      	movs	r3, #64	@ 0x40
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e1ac      	b.n	800620a <UART_SetConfig+0x7ae>
 8005eb0:	2380      	movs	r3, #128	@ 0x80
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e1a8      	b.n	800620a <UART_SetConfig+0x7ae>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a75      	ldr	r2, [pc, #468]	@ (8006094 <UART_SetConfig+0x638>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d130      	bne.n	8005f24 <UART_SetConfig+0x4c8>
 8005ec2:	4b73      	ldr	r3, [pc, #460]	@ (8006090 <UART_SetConfig+0x634>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d826      	bhi.n	8005f1c <UART_SetConfig+0x4c0>
 8005ece:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <UART_SetConfig+0x478>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005efd 	.word	0x08005efd
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e18a      	b.n	800620a <UART_SetConfig+0x7ae>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e186      	b.n	800620a <UART_SetConfig+0x7ae>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f02:	e182      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e17e      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e17a      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f14:	2340      	movs	r3, #64	@ 0x40
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e176      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f1c:	2380      	movs	r3, #128	@ 0x80
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e172      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a5b      	ldr	r2, [pc, #364]	@ (8006098 <UART_SetConfig+0x63c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d130      	bne.n	8005f90 <UART_SetConfig+0x534>
 8005f2e:	4b58      	ldr	r3, [pc, #352]	@ (8006090 <UART_SetConfig+0x634>)
 8005f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	d826      	bhi.n	8005f88 <UART_SetConfig+0x52c>
 8005f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <UART_SetConfig+0x4e4>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f59 	.word	0x08005f59
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	08005f69 	.word	0x08005f69
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5e:	e154      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f66:	e150      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e14c      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e148      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f78:	2320      	movs	r3, #32
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e144      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f80:	2340      	movs	r3, #64	@ 0x40
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e140      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f88:	2380      	movs	r3, #128	@ 0x80
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e13c      	b.n	800620a <UART_SetConfig+0x7ae>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a41      	ldr	r2, [pc, #260]	@ (800609c <UART_SetConfig+0x640>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	f040 8082 	bne.w	80060a0 <UART_SetConfig+0x644>
 8005f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8006090 <UART_SetConfig+0x634>)
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fa4:	2b28      	cmp	r3, #40	@ 0x28
 8005fa6:	d86d      	bhi.n	8006084 <UART_SetConfig+0x628>
 8005fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <UART_SetConfig+0x554>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08006055 	.word	0x08006055
 8005fb4:	08006085 	.word	0x08006085
 8005fb8:	08006085 	.word	0x08006085
 8005fbc:	08006085 	.word	0x08006085
 8005fc0:	08006085 	.word	0x08006085
 8005fc4:	08006085 	.word	0x08006085
 8005fc8:	08006085 	.word	0x08006085
 8005fcc:	08006085 	.word	0x08006085
 8005fd0:	0800605d 	.word	0x0800605d
 8005fd4:	08006085 	.word	0x08006085
 8005fd8:	08006085 	.word	0x08006085
 8005fdc:	08006085 	.word	0x08006085
 8005fe0:	08006085 	.word	0x08006085
 8005fe4:	08006085 	.word	0x08006085
 8005fe8:	08006085 	.word	0x08006085
 8005fec:	08006085 	.word	0x08006085
 8005ff0:	08006065 	.word	0x08006065
 8005ff4:	08006085 	.word	0x08006085
 8005ff8:	08006085 	.word	0x08006085
 8005ffc:	08006085 	.word	0x08006085
 8006000:	08006085 	.word	0x08006085
 8006004:	08006085 	.word	0x08006085
 8006008:	08006085 	.word	0x08006085
 800600c:	08006085 	.word	0x08006085
 8006010:	0800606d 	.word	0x0800606d
 8006014:	08006085 	.word	0x08006085
 8006018:	08006085 	.word	0x08006085
 800601c:	08006085 	.word	0x08006085
 8006020:	08006085 	.word	0x08006085
 8006024:	08006085 	.word	0x08006085
 8006028:	08006085 	.word	0x08006085
 800602c:	08006085 	.word	0x08006085
 8006030:	08006075 	.word	0x08006075
 8006034:	08006085 	.word	0x08006085
 8006038:	08006085 	.word	0x08006085
 800603c:	08006085 	.word	0x08006085
 8006040:	08006085 	.word	0x08006085
 8006044:	08006085 	.word	0x08006085
 8006048:	08006085 	.word	0x08006085
 800604c:	08006085 	.word	0x08006085
 8006050:	0800607d 	.word	0x0800607d
 8006054:	2301      	movs	r3, #1
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e0d6      	b.n	800620a <UART_SetConfig+0x7ae>
 800605c:	2304      	movs	r3, #4
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e0d2      	b.n	800620a <UART_SetConfig+0x7ae>
 8006064:	2308      	movs	r3, #8
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e0ce      	b.n	800620a <UART_SetConfig+0x7ae>
 800606c:	2310      	movs	r3, #16
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e0ca      	b.n	800620a <UART_SetConfig+0x7ae>
 8006074:	2320      	movs	r3, #32
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607a:	e0c6      	b.n	800620a <UART_SetConfig+0x7ae>
 800607c:	2340      	movs	r3, #64	@ 0x40
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006082:	e0c2      	b.n	800620a <UART_SetConfig+0x7ae>
 8006084:	2380      	movs	r3, #128	@ 0x80
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608a:	e0be      	b.n	800620a <UART_SetConfig+0x7ae>
 800608c:	40011400 	.word	0x40011400
 8006090:	58024400 	.word	0x58024400
 8006094:	40007800 	.word	0x40007800
 8006098:	40007c00 	.word	0x40007c00
 800609c:	40011800 	.word	0x40011800
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4aad      	ldr	r2, [pc, #692]	@ (800635c <UART_SetConfig+0x900>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d176      	bne.n	8006198 <UART_SetConfig+0x73c>
 80060aa:	4bad      	ldr	r3, [pc, #692]	@ (8006360 <UART_SetConfig+0x904>)
 80060ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060b2:	2b28      	cmp	r3, #40	@ 0x28
 80060b4:	d86c      	bhi.n	8006190 <UART_SetConfig+0x734>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <UART_SetConfig+0x660>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	08006161 	.word	0x08006161
 80060c0:	08006191 	.word	0x08006191
 80060c4:	08006191 	.word	0x08006191
 80060c8:	08006191 	.word	0x08006191
 80060cc:	08006191 	.word	0x08006191
 80060d0:	08006191 	.word	0x08006191
 80060d4:	08006191 	.word	0x08006191
 80060d8:	08006191 	.word	0x08006191
 80060dc:	08006169 	.word	0x08006169
 80060e0:	08006191 	.word	0x08006191
 80060e4:	08006191 	.word	0x08006191
 80060e8:	08006191 	.word	0x08006191
 80060ec:	08006191 	.word	0x08006191
 80060f0:	08006191 	.word	0x08006191
 80060f4:	08006191 	.word	0x08006191
 80060f8:	08006191 	.word	0x08006191
 80060fc:	08006171 	.word	0x08006171
 8006100:	08006191 	.word	0x08006191
 8006104:	08006191 	.word	0x08006191
 8006108:	08006191 	.word	0x08006191
 800610c:	08006191 	.word	0x08006191
 8006110:	08006191 	.word	0x08006191
 8006114:	08006191 	.word	0x08006191
 8006118:	08006191 	.word	0x08006191
 800611c:	08006179 	.word	0x08006179
 8006120:	08006191 	.word	0x08006191
 8006124:	08006191 	.word	0x08006191
 8006128:	08006191 	.word	0x08006191
 800612c:	08006191 	.word	0x08006191
 8006130:	08006191 	.word	0x08006191
 8006134:	08006191 	.word	0x08006191
 8006138:	08006191 	.word	0x08006191
 800613c:	08006181 	.word	0x08006181
 8006140:	08006191 	.word	0x08006191
 8006144:	08006191 	.word	0x08006191
 8006148:	08006191 	.word	0x08006191
 800614c:	08006191 	.word	0x08006191
 8006150:	08006191 	.word	0x08006191
 8006154:	08006191 	.word	0x08006191
 8006158:	08006191 	.word	0x08006191
 800615c:	08006189 	.word	0x08006189
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e050      	b.n	800620a <UART_SetConfig+0x7ae>
 8006168:	2304      	movs	r3, #4
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e04c      	b.n	800620a <UART_SetConfig+0x7ae>
 8006170:	2308      	movs	r3, #8
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e048      	b.n	800620a <UART_SetConfig+0x7ae>
 8006178:	2310      	movs	r3, #16
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e044      	b.n	800620a <UART_SetConfig+0x7ae>
 8006180:	2320      	movs	r3, #32
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e040      	b.n	800620a <UART_SetConfig+0x7ae>
 8006188:	2340      	movs	r3, #64	@ 0x40
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618e:	e03c      	b.n	800620a <UART_SetConfig+0x7ae>
 8006190:	2380      	movs	r3, #128	@ 0x80
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006196:	e038      	b.n	800620a <UART_SetConfig+0x7ae>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a71      	ldr	r2, [pc, #452]	@ (8006364 <UART_SetConfig+0x908>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d130      	bne.n	8006204 <UART_SetConfig+0x7a8>
 80061a2:	4b6f      	ldr	r3, [pc, #444]	@ (8006360 <UART_SetConfig+0x904>)
 80061a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	d826      	bhi.n	80061fc <UART_SetConfig+0x7a0>
 80061ae:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <UART_SetConfig+0x758>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	080061cd 	.word	0x080061cd
 80061b8:	080061d5 	.word	0x080061d5
 80061bc:	080061dd 	.word	0x080061dd
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	2302      	movs	r3, #2
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e01a      	b.n	800620a <UART_SetConfig+0x7ae>
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e016      	b.n	800620a <UART_SetConfig+0x7ae>
 80061dc:	2308      	movs	r3, #8
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e012      	b.n	800620a <UART_SetConfig+0x7ae>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e00e      	b.n	800620a <UART_SetConfig+0x7ae>
 80061ec:	2320      	movs	r3, #32
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e00a      	b.n	800620a <UART_SetConfig+0x7ae>
 80061f4:	2340      	movs	r3, #64	@ 0x40
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fa:	e006      	b.n	800620a <UART_SetConfig+0x7ae>
 80061fc:	2380      	movs	r3, #128	@ 0x80
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006202:	e002      	b.n	800620a <UART_SetConfig+0x7ae>
 8006204:	2380      	movs	r3, #128	@ 0x80
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a55      	ldr	r2, [pc, #340]	@ (8006364 <UART_SetConfig+0x908>)
 8006210:	4293      	cmp	r3, r2
 8006212:	f040 80f8 	bne.w	8006406 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006216:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800621a:	2b20      	cmp	r3, #32
 800621c:	dc46      	bgt.n	80062ac <UART_SetConfig+0x850>
 800621e:	2b02      	cmp	r3, #2
 8006220:	db75      	blt.n	800630e <UART_SetConfig+0x8b2>
 8006222:	3b02      	subs	r3, #2
 8006224:	2b1e      	cmp	r3, #30
 8006226:	d872      	bhi.n	800630e <UART_SetConfig+0x8b2>
 8006228:	a201      	add	r2, pc, #4	@ (adr r2, 8006230 <UART_SetConfig+0x7d4>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	080062b3 	.word	0x080062b3
 8006234:	0800630f 	.word	0x0800630f
 8006238:	080062bb 	.word	0x080062bb
 800623c:	0800630f 	.word	0x0800630f
 8006240:	0800630f 	.word	0x0800630f
 8006244:	0800630f 	.word	0x0800630f
 8006248:	080062cb 	.word	0x080062cb
 800624c:	0800630f 	.word	0x0800630f
 8006250:	0800630f 	.word	0x0800630f
 8006254:	0800630f 	.word	0x0800630f
 8006258:	0800630f 	.word	0x0800630f
 800625c:	0800630f 	.word	0x0800630f
 8006260:	0800630f 	.word	0x0800630f
 8006264:	0800630f 	.word	0x0800630f
 8006268:	080062db 	.word	0x080062db
 800626c:	0800630f 	.word	0x0800630f
 8006270:	0800630f 	.word	0x0800630f
 8006274:	0800630f 	.word	0x0800630f
 8006278:	0800630f 	.word	0x0800630f
 800627c:	0800630f 	.word	0x0800630f
 8006280:	0800630f 	.word	0x0800630f
 8006284:	0800630f 	.word	0x0800630f
 8006288:	0800630f 	.word	0x0800630f
 800628c:	0800630f 	.word	0x0800630f
 8006290:	0800630f 	.word	0x0800630f
 8006294:	0800630f 	.word	0x0800630f
 8006298:	0800630f 	.word	0x0800630f
 800629c:	0800630f 	.word	0x0800630f
 80062a0:	0800630f 	.word	0x0800630f
 80062a4:	0800630f 	.word	0x0800630f
 80062a8:	08006301 	.word	0x08006301
 80062ac:	2b40      	cmp	r3, #64	@ 0x40
 80062ae:	d02a      	beq.n	8006306 <UART_SetConfig+0x8aa>
 80062b0:	e02d      	b.n	800630e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062b2:	f7fe fed3 	bl	800505c <HAL_RCCEx_GetD3PCLK1Freq>
 80062b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062b8:	e02f      	b.n	800631a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe fee2 	bl	8005088 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062c8:	e027      	b.n	800631a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ca:	f107 0318 	add.w	r3, r7, #24
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff f82e 	bl	8005330 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d8:	e01f      	b.n	800631a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062da:	4b21      	ldr	r3, [pc, #132]	@ (8006360 <UART_SetConfig+0x904>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006360 <UART_SetConfig+0x904>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	08db      	lsrs	r3, r3, #3
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006368 <UART_SetConfig+0x90c>)
 80062f2:	fa22 f303 	lsr.w	r3, r2, r3
 80062f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062f8:	e00f      	b.n	800631a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006368 <UART_SetConfig+0x90c>)
 80062fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062fe:	e00c      	b.n	800631a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006300:	4b1a      	ldr	r3, [pc, #104]	@ (800636c <UART_SetConfig+0x910>)
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006304:	e009      	b.n	800631a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800630c:	e005      	b.n	800631a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006318:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800631a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 81ee 	beq.w	80066fe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006326:	4a12      	ldr	r2, [pc, #72]	@ (8006370 <UART_SetConfig+0x914>)
 8006328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800632c:	461a      	mov	r2, r3
 800632e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006330:	fbb3 f3f2 	udiv	r3, r3, r2
 8006334:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	4613      	mov	r3, r2
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	4413      	add	r3, r2
 8006340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006342:	429a      	cmp	r2, r3
 8006344:	d305      	bcc.n	8006352 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800634c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800634e:	429a      	cmp	r2, r3
 8006350:	d910      	bls.n	8006374 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006358:	e1d1      	b.n	80066fe <UART_SetConfig+0xca2>
 800635a:	bf00      	nop
 800635c:	40011c00 	.word	0x40011c00
 8006360:	58024400 	.word	0x58024400
 8006364:	58000c00 	.word	0x58000c00
 8006368:	03d09000 	.word	0x03d09000
 800636c:	003d0900 	.word	0x003d0900
 8006370:	0800b2d0 	.word	0x0800b2d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006376:	2200      	movs	r2, #0
 8006378:	60bb      	str	r3, [r7, #8]
 800637a:	60fa      	str	r2, [r7, #12]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	4ac0      	ldr	r2, [pc, #768]	@ (8006684 <UART_SetConfig+0xc28>)
 8006382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006386:	b29b      	uxth	r3, r3
 8006388:	2200      	movs	r2, #0
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006396:	f7fa f813 	bl	80003c0 <__aeabi_uldivmod>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4610      	mov	r0, r2
 80063a0:	4619      	mov	r1, r3
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	020b      	lsls	r3, r1, #8
 80063ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063b0:	0202      	lsls	r2, r0, #8
 80063b2:	6979      	ldr	r1, [r7, #20]
 80063b4:	6849      	ldr	r1, [r1, #4]
 80063b6:	0849      	lsrs	r1, r1, #1
 80063b8:	2000      	movs	r0, #0
 80063ba:	460c      	mov	r4, r1
 80063bc:	4605      	mov	r5, r0
 80063be:	eb12 0804 	adds.w	r8, r2, r4
 80063c2:	eb43 0905 	adc.w	r9, r3, r5
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	469a      	mov	sl, r3
 80063ce:	4693      	mov	fp, r2
 80063d0:	4652      	mov	r2, sl
 80063d2:	465b      	mov	r3, fp
 80063d4:	4640      	mov	r0, r8
 80063d6:	4649      	mov	r1, r9
 80063d8:	f7f9 fff2 	bl	80003c0 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4613      	mov	r3, r2
 80063e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ea:	d308      	bcc.n	80063fe <UART_SetConfig+0x9a2>
 80063ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f2:	d204      	bcs.n	80063fe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063fa:	60da      	str	r2, [r3, #12]
 80063fc:	e17f      	b.n	80066fe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006404:	e17b      	b.n	80066fe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800640e:	f040 80bd 	bne.w	800658c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006412:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006416:	2b20      	cmp	r3, #32
 8006418:	dc48      	bgt.n	80064ac <UART_SetConfig+0xa50>
 800641a:	2b00      	cmp	r3, #0
 800641c:	db7b      	blt.n	8006516 <UART_SetConfig+0xaba>
 800641e:	2b20      	cmp	r3, #32
 8006420:	d879      	bhi.n	8006516 <UART_SetConfig+0xaba>
 8006422:	a201      	add	r2, pc, #4	@ (adr r2, 8006428 <UART_SetConfig+0x9cc>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	080064b3 	.word	0x080064b3
 800642c:	080064bb 	.word	0x080064bb
 8006430:	08006517 	.word	0x08006517
 8006434:	08006517 	.word	0x08006517
 8006438:	080064c3 	.word	0x080064c3
 800643c:	08006517 	.word	0x08006517
 8006440:	08006517 	.word	0x08006517
 8006444:	08006517 	.word	0x08006517
 8006448:	080064d3 	.word	0x080064d3
 800644c:	08006517 	.word	0x08006517
 8006450:	08006517 	.word	0x08006517
 8006454:	08006517 	.word	0x08006517
 8006458:	08006517 	.word	0x08006517
 800645c:	08006517 	.word	0x08006517
 8006460:	08006517 	.word	0x08006517
 8006464:	08006517 	.word	0x08006517
 8006468:	080064e3 	.word	0x080064e3
 800646c:	08006517 	.word	0x08006517
 8006470:	08006517 	.word	0x08006517
 8006474:	08006517 	.word	0x08006517
 8006478:	08006517 	.word	0x08006517
 800647c:	08006517 	.word	0x08006517
 8006480:	08006517 	.word	0x08006517
 8006484:	08006517 	.word	0x08006517
 8006488:	08006517 	.word	0x08006517
 800648c:	08006517 	.word	0x08006517
 8006490:	08006517 	.word	0x08006517
 8006494:	08006517 	.word	0x08006517
 8006498:	08006517 	.word	0x08006517
 800649c:	08006517 	.word	0x08006517
 80064a0:	08006517 	.word	0x08006517
 80064a4:	08006517 	.word	0x08006517
 80064a8:	08006509 	.word	0x08006509
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	d02e      	beq.n	800650e <UART_SetConfig+0xab2>
 80064b0:	e031      	b.n	8006516 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b2:	f7fd fc07 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 80064b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064b8:	e033      	b.n	8006522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ba:	f7fd fc19 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 80064be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064c0:	e02f      	b.n	8006522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fdde 	bl	8005088 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d0:	e027      	b.n	8006522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064d2:	f107 0318 	add.w	r3, r7, #24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe ff2a 	bl	8005330 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e0:	e01f      	b.n	8006522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064e2:	4b69      	ldr	r3, [pc, #420]	@ (8006688 <UART_SetConfig+0xc2c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064ee:	4b66      	ldr	r3, [pc, #408]	@ (8006688 <UART_SetConfig+0xc2c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	08db      	lsrs	r3, r3, #3
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	4a64      	ldr	r2, [pc, #400]	@ (800668c <UART_SetConfig+0xc30>)
 80064fa:	fa22 f303 	lsr.w	r3, r2, r3
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006500:	e00f      	b.n	8006522 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006502:	4b62      	ldr	r3, [pc, #392]	@ (800668c <UART_SetConfig+0xc30>)
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006506:	e00c      	b.n	8006522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006508:	4b61      	ldr	r3, [pc, #388]	@ (8006690 <UART_SetConfig+0xc34>)
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650c:	e009      	b.n	8006522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006514:	e005      	b.n	8006522 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80ea 	beq.w	80066fe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652e:	4a55      	ldr	r2, [pc, #340]	@ (8006684 <UART_SetConfig+0xc28>)
 8006530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006534:	461a      	mov	r2, r3
 8006536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006538:	fbb3 f3f2 	udiv	r3, r3, r2
 800653c:	005a      	lsls	r2, r3, #1
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	441a      	add	r2, r3
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	fbb2 f3f3 	udiv	r3, r2, r3
 800654e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d916      	bls.n	8006584 <UART_SetConfig+0xb28>
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800655c:	d212      	bcs.n	8006584 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	b29b      	uxth	r3, r3
 8006562:	f023 030f 	bic.w	r3, r3, #15
 8006566:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656a:	085b      	lsrs	r3, r3, #1
 800656c:	b29b      	uxth	r3, r3
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	b29a      	uxth	r2, r3
 8006574:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006576:	4313      	orrs	r3, r2
 8006578:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006580:	60da      	str	r2, [r3, #12]
 8006582:	e0bc      	b.n	80066fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800658a:	e0b8      	b.n	80066fe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800658c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006590:	2b20      	cmp	r3, #32
 8006592:	dc4b      	bgt.n	800662c <UART_SetConfig+0xbd0>
 8006594:	2b00      	cmp	r3, #0
 8006596:	f2c0 8087 	blt.w	80066a8 <UART_SetConfig+0xc4c>
 800659a:	2b20      	cmp	r3, #32
 800659c:	f200 8084 	bhi.w	80066a8 <UART_SetConfig+0xc4c>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <UART_SetConfig+0xb4c>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	08006633 	.word	0x08006633
 80065ac:	0800663b 	.word	0x0800663b
 80065b0:	080066a9 	.word	0x080066a9
 80065b4:	080066a9 	.word	0x080066a9
 80065b8:	08006643 	.word	0x08006643
 80065bc:	080066a9 	.word	0x080066a9
 80065c0:	080066a9 	.word	0x080066a9
 80065c4:	080066a9 	.word	0x080066a9
 80065c8:	08006653 	.word	0x08006653
 80065cc:	080066a9 	.word	0x080066a9
 80065d0:	080066a9 	.word	0x080066a9
 80065d4:	080066a9 	.word	0x080066a9
 80065d8:	080066a9 	.word	0x080066a9
 80065dc:	080066a9 	.word	0x080066a9
 80065e0:	080066a9 	.word	0x080066a9
 80065e4:	080066a9 	.word	0x080066a9
 80065e8:	08006663 	.word	0x08006663
 80065ec:	080066a9 	.word	0x080066a9
 80065f0:	080066a9 	.word	0x080066a9
 80065f4:	080066a9 	.word	0x080066a9
 80065f8:	080066a9 	.word	0x080066a9
 80065fc:	080066a9 	.word	0x080066a9
 8006600:	080066a9 	.word	0x080066a9
 8006604:	080066a9 	.word	0x080066a9
 8006608:	080066a9 	.word	0x080066a9
 800660c:	080066a9 	.word	0x080066a9
 8006610:	080066a9 	.word	0x080066a9
 8006614:	080066a9 	.word	0x080066a9
 8006618:	080066a9 	.word	0x080066a9
 800661c:	080066a9 	.word	0x080066a9
 8006620:	080066a9 	.word	0x080066a9
 8006624:	080066a9 	.word	0x080066a9
 8006628:	0800669b 	.word	0x0800669b
 800662c:	2b40      	cmp	r3, #64	@ 0x40
 800662e:	d037      	beq.n	80066a0 <UART_SetConfig+0xc44>
 8006630:	e03a      	b.n	80066a8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006632:	f7fd fb47 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8006636:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006638:	e03c      	b.n	80066b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663a:	f7fd fb59 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 800663e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006640:	e038      	b.n	80066b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fd1e 	bl	8005088 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800664c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006650:	e030      	b.n	80066b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006652:	f107 0318 	add.w	r3, r7, #24
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fe6a 	bl	8005330 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006660:	e028      	b.n	80066b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006662:	4b09      	ldr	r3, [pc, #36]	@ (8006688 <UART_SetConfig+0xc2c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800666e:	4b06      	ldr	r3, [pc, #24]	@ (8006688 <UART_SetConfig+0xc2c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	08db      	lsrs	r3, r3, #3
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	4a04      	ldr	r2, [pc, #16]	@ (800668c <UART_SetConfig+0xc30>)
 800667a:	fa22 f303 	lsr.w	r3, r2, r3
 800667e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006680:	e018      	b.n	80066b4 <UART_SetConfig+0xc58>
 8006682:	bf00      	nop
 8006684:	0800b2d0 	.word	0x0800b2d0
 8006688:	58024400 	.word	0x58024400
 800668c:	03d09000 	.word	0x03d09000
 8006690:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006694:	4b24      	ldr	r3, [pc, #144]	@ (8006728 <UART_SetConfig+0xccc>)
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006698:	e00c      	b.n	80066b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800669a:	4b24      	ldr	r3, [pc, #144]	@ (800672c <UART_SetConfig+0xcd0>)
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800669e:	e009      	b.n	80066b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a6:	e005      	b.n	80066b4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80066b2:	bf00      	nop
    }

    if (pclk != 0U)
 80066b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d021      	beq.n	80066fe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066be:	4a1c      	ldr	r2, [pc, #112]	@ (8006730 <UART_SetConfig+0xcd4>)
 80066c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c4:	461a      	mov	r2, r3
 80066c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	441a      	add	r2, r3
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	d909      	bls.n	80066f8 <UART_SetConfig+0xc9c>
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ea:	d205      	bcs.n	80066f8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60da      	str	r2, [r3, #12]
 80066f6:	e002      	b.n	80066fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2201      	movs	r2, #1
 8006702:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2201      	movs	r2, #1
 800670a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2200      	movs	r2, #0
 8006712:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2200      	movs	r2, #0
 8006718:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800671a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800671e:	4618      	mov	r0, r3
 8006720:	3748      	adds	r7, #72	@ 0x48
 8006722:	46bd      	mov	sp, r7
 8006724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006728:	03d09000 	.word	0x03d09000
 800672c:	003d0900 	.word	0x003d0900
 8006730:	0800b2d0 	.word	0x0800b2d0

08006734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01a      	beq.n	800684a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006832:	d10a      	bne.n	800684a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b098      	sub	sp, #96	@ 0x60
 800687c:	af02      	add	r7, sp, #8
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006888:	f7fa fcb0 	bl	80011ec <HAL_GetTick>
 800688c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d12f      	bne.n	80068fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800689c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068a4:	2200      	movs	r2, #0
 80068a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f88e 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d022      	beq.n	80068fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e6      	bne.n	80068b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e063      	b.n	80069c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b04      	cmp	r3, #4
 8006908:	d149      	bne.n	800699e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800690a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006912:	2200      	movs	r2, #0
 8006914:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f857 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d03c      	beq.n	800699e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	623b      	str	r3, [r7, #32]
   return(result);
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006942:	633b      	str	r3, [r7, #48]	@ 0x30
 8006944:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e6      	bne.n	8006924 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	60fb      	str	r3, [r7, #12]
   return(result);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006976:	61fa      	str	r2, [r7, #28]
 8006978:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	69b9      	ldr	r1, [r7, #24]
 800697c:	69fa      	ldr	r2, [r7, #28]
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	617b      	str	r3, [r7, #20]
   return(result);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e012      	b.n	80069c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3758      	adds	r7, #88	@ 0x58
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069dc:	e04f      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d04b      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e6:	f7fa fc01 	bl	80011ec <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d302      	bcc.n	80069fc <UART_WaitOnFlagUntilTimeout+0x30>
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e04e      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d037      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b80      	cmp	r3, #128	@ 0x80
 8006a12:	d034      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b40      	cmp	r3, #64	@ 0x40
 8006a18:	d031      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d110      	bne.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f839 	bl	8006aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2208      	movs	r2, #8
 8006a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e029      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a58:	d111      	bne.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f81f 	bl	8006aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e00f      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4013      	ands	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	bf0c      	ite	eq
 8006a8e:	2301      	moveq	r3, #1
 8006a90:	2300      	movne	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d0a0      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b095      	sub	sp, #84	@ 0x54
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ace:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ad0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e6      	bne.n	8006ab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	4b1e      	ldr	r3, [pc, #120]	@ (8006b70 <UART_EndRxTransfer+0xc8>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d118      	bne.n	8006b50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f023 0310 	bic.w	r3, r3, #16
 8006b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6979      	ldr	r1, [r7, #20]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e6      	bne.n	8006b1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b64:	bf00      	nop
 8006b66:	3754      	adds	r7, #84	@ 0x54
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	effffffe 	.word	0xeffffffe

08006b74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_UARTEx_DisableFifoMode+0x16>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e027      	b.n	8006bda <HAL_UARTEx_DisableFifoMode+0x66>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2224      	movs	r2, #36	@ 0x24
 8006b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e02d      	b.n	8006c5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2224      	movs	r2, #36	@ 0x24
 8006c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f850 	bl	8006ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e02d      	b.n	8006cd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2224      	movs	r2, #36	@ 0x24
 8006c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f812 	bl	8006ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d108      	bne.n	8006d02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d00:	e031      	b.n	8006d66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d02:	2310      	movs	r3, #16
 8006d04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d06:	2310      	movs	r3, #16
 8006d08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	0e5b      	lsrs	r3, r3, #25
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	0f5b      	lsrs	r3, r3, #29
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	7b3a      	ldrb	r2, [r7, #12]
 8006d2e:	4911      	ldr	r1, [pc, #68]	@ (8006d74 <UARTEx_SetNbDataToProcess+0x94>)
 8006d30:	5c8a      	ldrb	r2, [r1, r2]
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d36:	7b3a      	ldrb	r2, [r7, #12]
 8006d38:	490f      	ldr	r1, [pc, #60]	@ (8006d78 <UARTEx_SetNbDataToProcess+0x98>)
 8006d3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	7b7a      	ldrb	r2, [r7, #13]
 8006d4c:	4909      	ldr	r1, [pc, #36]	@ (8006d74 <UARTEx_SetNbDataToProcess+0x94>)
 8006d4e:	5c8a      	ldrb	r2, [r1, r2]
 8006d50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d54:	7b7a      	ldrb	r2, [r7, #13]
 8006d56:	4908      	ldr	r1, [pc, #32]	@ (8006d78 <UARTEx_SetNbDataToProcess+0x98>)
 8006d58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	0800b2e8 	.word	0x0800b2e8
 8006d78:	0800b2f0 	.word	0x0800b2f0

08006d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	f107 001c 	add.w	r0, r7, #28
 8006d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d121      	bne.n	8006dda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	4b2c      	ldr	r3, [pc, #176]	@ (8006e58 <USB_CoreInit+0xdc>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d105      	bne.n	8006dce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fafa 	bl	80083c8 <USB_CoreReset>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
 8006dd8:	e01b      	b.n	8006e12 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 faee 	bl	80083c8 <USB_CoreReset>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006df0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d106      	bne.n	8006e06 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e04:	e005      	b.n	8006e12 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e12:	7fbb      	ldrb	r3, [r7, #30]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d116      	bne.n	8006e46 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e26:	4b0d      	ldr	r3, [pc, #52]	@ (8006e5c <USB_CoreInit+0xe0>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f043 0206 	orr.w	r2, r3, #6
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f043 0220 	orr.w	r2, r3, #32
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e52:	b004      	add	sp, #16
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	ffbdffbf 	.word	0xffbdffbf
 8006e5c:	03ee0000 	.word	0x03ee0000

08006e60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d165      	bne.n	8006f40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4a41      	ldr	r2, [pc, #260]	@ (8006f7c <USB_SetTurnaroundTime+0x11c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d906      	bls.n	8006e8a <USB_SetTurnaroundTime+0x2a>
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4a40      	ldr	r2, [pc, #256]	@ (8006f80 <USB_SetTurnaroundTime+0x120>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d202      	bcs.n	8006e8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006e84:	230f      	movs	r3, #15
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	e062      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8006f80 <USB_SetTurnaroundTime+0x120>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d306      	bcc.n	8006ea0 <USB_SetTurnaroundTime+0x40>
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4a3b      	ldr	r2, [pc, #236]	@ (8006f84 <USB_SetTurnaroundTime+0x124>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d202      	bcs.n	8006ea0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006e9a:	230e      	movs	r3, #14
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e057      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4a38      	ldr	r2, [pc, #224]	@ (8006f84 <USB_SetTurnaroundTime+0x124>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d306      	bcc.n	8006eb6 <USB_SetTurnaroundTime+0x56>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4a37      	ldr	r2, [pc, #220]	@ (8006f88 <USB_SetTurnaroundTime+0x128>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d202      	bcs.n	8006eb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006eb0:	230d      	movs	r3, #13
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e04c      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4a33      	ldr	r2, [pc, #204]	@ (8006f88 <USB_SetTurnaroundTime+0x128>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d306      	bcc.n	8006ecc <USB_SetTurnaroundTime+0x6c>
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	4a32      	ldr	r2, [pc, #200]	@ (8006f8c <USB_SetTurnaroundTime+0x12c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d802      	bhi.n	8006ecc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006ec6:	230c      	movs	r3, #12
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	e041      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4a2f      	ldr	r2, [pc, #188]	@ (8006f8c <USB_SetTurnaroundTime+0x12c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d906      	bls.n	8006ee2 <USB_SetTurnaroundTime+0x82>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8006f90 <USB_SetTurnaroundTime+0x130>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d802      	bhi.n	8006ee2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006edc:	230b      	movs	r3, #11
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	e036      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8006f90 <USB_SetTurnaroundTime+0x130>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d906      	bls.n	8006ef8 <USB_SetTurnaroundTime+0x98>
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	4a29      	ldr	r2, [pc, #164]	@ (8006f94 <USB_SetTurnaroundTime+0x134>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d802      	bhi.n	8006ef8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006ef2:	230a      	movs	r3, #10
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	e02b      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4a26      	ldr	r2, [pc, #152]	@ (8006f94 <USB_SetTurnaroundTime+0x134>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d906      	bls.n	8006f0e <USB_SetTurnaroundTime+0xae>
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4a25      	ldr	r2, [pc, #148]	@ (8006f98 <USB_SetTurnaroundTime+0x138>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d202      	bcs.n	8006f0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f08:	2309      	movs	r3, #9
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e020      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4a21      	ldr	r2, [pc, #132]	@ (8006f98 <USB_SetTurnaroundTime+0x138>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d306      	bcc.n	8006f24 <USB_SetTurnaroundTime+0xc4>
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4a20      	ldr	r2, [pc, #128]	@ (8006f9c <USB_SetTurnaroundTime+0x13c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d802      	bhi.n	8006f24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006f1e:	2308      	movs	r3, #8
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e015      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4a1d      	ldr	r2, [pc, #116]	@ (8006f9c <USB_SetTurnaroundTime+0x13c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d906      	bls.n	8006f3a <USB_SetTurnaroundTime+0xda>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006fa0 <USB_SetTurnaroundTime+0x140>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d202      	bcs.n	8006f3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006f34:	2307      	movs	r3, #7
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	e00a      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006f3a:	2306      	movs	r3, #6
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	e007      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d102      	bne.n	8006f4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006f46:	2309      	movs	r3, #9
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	e001      	b.n	8006f50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006f4c:	2309      	movs	r3, #9
 8006f4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	029b      	lsls	r3, r3, #10
 8006f64:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	00d8acbf 	.word	0x00d8acbf
 8006f80:	00e4e1c0 	.word	0x00e4e1c0
 8006f84:	00f42400 	.word	0x00f42400
 8006f88:	01067380 	.word	0x01067380
 8006f8c:	011a499f 	.word	0x011a499f
 8006f90:	01312cff 	.word	0x01312cff
 8006f94:	014ca43f 	.word	0x014ca43f
 8006f98:	016e3600 	.word	0x016e3600
 8006f9c:	01a6ab1f 	.word	0x01a6ab1f
 8006fa0:	01e84800 	.word	0x01e84800

08006fa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f043 0201 	orr.w	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f023 0201 	bic.w	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d115      	bne.n	8007036 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007016:	200a      	movs	r0, #10
 8007018:	f7fa f8f4 	bl	8001204 <HAL_Delay>
      ms += 10U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	330a      	adds	r3, #10
 8007020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 f93f 	bl	80082a6 <USB_GetMode>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d01e      	beq.n	800706c <USB_SetCurrentMode+0x84>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2bc7      	cmp	r3, #199	@ 0xc7
 8007032:	d9f0      	bls.n	8007016 <USB_SetCurrentMode+0x2e>
 8007034:	e01a      	b.n	800706c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d115      	bne.n	8007068 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007048:	200a      	movs	r0, #10
 800704a:	f7fa f8db 	bl	8001204 <HAL_Delay>
      ms += 10U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	330a      	adds	r3, #10
 8007052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f926 	bl	80082a6 <USB_GetMode>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <USB_SetCurrentMode+0x84>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2bc7      	cmp	r3, #199	@ 0xc7
 8007064:	d9f0      	bls.n	8007048 <USB_SetCurrentMode+0x60>
 8007066:	e001      	b.n	800706c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e005      	b.n	8007078 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007070:	d101      	bne.n	8007076 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007080:	b084      	sub	sp, #16
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800708e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	e009      	b.n	80070b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3340      	adds	r3, #64	@ 0x40
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3301      	adds	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b0e      	cmp	r3, #14
 80070b8:	d9f2      	bls.n	80070a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d11c      	bne.n	80070fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070d0:	f043 0302 	orr.w	r3, r3, #2
 80070d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e005      	b.n	8007108 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800710e:	461a      	mov	r2, r3
 8007110:	2300      	movs	r3, #0
 8007112:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007114:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007118:	2b01      	cmp	r3, #1
 800711a:	d10d      	bne.n	8007138 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f968 	bl	80073fc <USB_SetDevSpeed>
 800712c:	e008      	b.n	8007140 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800712e:	2101      	movs	r1, #1
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f963 	bl	80073fc <USB_SetDevSpeed>
 8007136:	e003      	b.n	8007140 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007138:	2103      	movs	r1, #3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f95e 	bl	80073fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007140:	2110      	movs	r1, #16
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f8fa 	bl	800733c <USB_FlushTxFifo>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f924 	bl	80073a0 <USB_FlushRxFifo>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007168:	461a      	mov	r2, r3
 800716a:	2300      	movs	r3, #0
 800716c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007174:	461a      	mov	r2, r3
 8007176:	2300      	movs	r3, #0
 8007178:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007180:	461a      	mov	r2, r3
 8007182:	2300      	movs	r3, #0
 8007184:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007186:	2300      	movs	r3, #0
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	e043      	b.n	8007214 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800719e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071a2:	d118      	bne.n	80071d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b6:	461a      	mov	r2, r3
 80071b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	e013      	b.n	80071e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071cc:	461a      	mov	r2, r3
 80071ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	e008      	b.n	80071e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e2:	461a      	mov	r2, r3
 80071e4:	2300      	movs	r3, #0
 80071e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f4:	461a      	mov	r2, r3
 80071f6:	2300      	movs	r3, #0
 80071f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007206:	461a      	mov	r2, r3
 8007208:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800720c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3301      	adds	r3, #1
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007218:	461a      	mov	r2, r3
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4293      	cmp	r3, r2
 800721e:	d3b5      	bcc.n	800718c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	e043      	b.n	80072ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800723c:	d118      	bne.n	8007270 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007250:	461a      	mov	r2, r3
 8007252:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	e013      	b.n	8007282 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007266:	461a      	mov	r2, r3
 8007268:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	e008      	b.n	8007282 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727c:	461a      	mov	r2, r3
 800727e:	2300      	movs	r3, #0
 8007280:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728e:	461a      	mov	r2, r3
 8007290:	2300      	movs	r3, #0
 8007292:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a0:	461a      	mov	r2, r3
 80072a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	3301      	adds	r3, #1
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80072b2:	461a      	mov	r2, r3
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d3b5      	bcc.n	8007226 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80072da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f043 0210 	orr.w	r2, r3, #16
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007334 <USB_DevInit+0x2b4>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f043 0208 	orr.w	r2, r3, #8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007310:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007314:	2b01      	cmp	r3, #1
 8007316:	d105      	bne.n	8007324 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699a      	ldr	r2, [r3, #24]
 800731c:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <USB_DevInit+0x2b8>)
 800731e:	4313      	orrs	r3, r2
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007324:	7dfb      	ldrb	r3, [r7, #23]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007330:	b004      	add	sp, #16
 8007332:	4770      	bx	lr
 8007334:	803c3800 	.word	0x803c3800
 8007338:	40000004 	.word	0x40000004

0800733c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007356:	d901      	bls.n	800735c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e01b      	b.n	8007394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	daf2      	bge.n	800734a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	019b      	lsls	r3, r3, #6
 800736c:	f043 0220 	orr.w	r2, r3, #32
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007380:	d901      	bls.n	8007386 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e006      	b.n	8007394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b20      	cmp	r3, #32
 8007390:	d0f0      	beq.n	8007374 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073b8:	d901      	bls.n	80073be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e018      	b.n	80073f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	daf2      	bge.n	80073ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2210      	movs	r2, #16
 80073ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073dc:	d901      	bls.n	80073e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e006      	b.n	80073f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b10      	cmp	r3, #16
 80073ec:	d0f0      	beq.n	80073d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800741c:	4313      	orrs	r3, r2
 800741e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800742e:	b480      	push	{r7}
 8007430:	b087      	sub	sp, #28
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 0306 	and.w	r3, r3, #6
 8007446:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]
 8007452:	e00a      	b.n	800746a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b02      	cmp	r3, #2
 8007458:	d002      	beq.n	8007460 <USB_GetDevSpeed+0x32>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b06      	cmp	r3, #6
 800745e:	d102      	bne.n	8007466 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007460:	2302      	movs	r3, #2
 8007462:	75fb      	strb	r3, [r7, #23]
 8007464:	e001      	b.n	800746a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007466:	230f      	movs	r3, #15
 8007468:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
}
 800746c:	4618      	mov	r0, r3
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d139      	bne.n	8007508 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	2101      	movs	r1, #1
 80074a6:	fa01 f303 	lsl.w	r3, r1, r3
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074b2:	4313      	orrs	r3, r2
 80074b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d153      	bne.n	8007574 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	791b      	ldrb	r3, [r3, #4]
 80074e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	059b      	lsls	r3, r3, #22
 80074ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	0159      	lsls	r1, r3, #5
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	440b      	add	r3, r1
 80074fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074fe:	4619      	mov	r1, r3
 8007500:	4b20      	ldr	r3, [pc, #128]	@ (8007584 <USB_ActivateEndpoint+0x10c>)
 8007502:	4313      	orrs	r3, r2
 8007504:	600b      	str	r3, [r1, #0]
 8007506:	e035      	b.n	8007574 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	2101      	movs	r1, #1
 800751a:	fa01 f303 	lsl.w	r3, r1, r3
 800751e:	041b      	lsls	r3, r3, #16
 8007520:	68f9      	ldr	r1, [r7, #12]
 8007522:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007526:	4313      	orrs	r3, r2
 8007528:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d119      	bne.n	8007574 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	791b      	ldrb	r3, [r3, #4]
 800755a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800755c:	430b      	orrs	r3, r1
 800755e:	431a      	orrs	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	0159      	lsls	r1, r3, #5
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	440b      	add	r3, r1
 8007568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800756c:	4619      	mov	r1, r3
 800756e:	4b05      	ldr	r3, [pc, #20]	@ (8007584 <USB_ActivateEndpoint+0x10c>)
 8007570:	4313      	orrs	r3, r2
 8007572:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	10008000 	.word	0x10008000

08007588 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d161      	bne.n	8007668 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075ba:	d11f      	bne.n	80075fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007602:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	2101      	movs	r1, #1
 800760e:	fa01 f303 	lsl.w	r3, r1, r3
 8007612:	b29b      	uxth	r3, r3
 8007614:	43db      	mvns	r3, r3
 8007616:	68f9      	ldr	r1, [r7, #12]
 8007618:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800761c:	4013      	ands	r3, r2
 800761e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007626:	69da      	ldr	r2, [r3, #28]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	2101      	movs	r1, #1
 8007632:	fa01 f303 	lsl.w	r3, r1, r3
 8007636:	b29b      	uxth	r3, r3
 8007638:	43db      	mvns	r3, r3
 800763a:	68f9      	ldr	r1, [r7, #12]
 800763c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007640:	4013      	ands	r3, r2
 8007642:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	0159      	lsls	r1, r3, #5
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	440b      	add	r3, r1
 800765a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765e:	4619      	mov	r1, r3
 8007660:	4b35      	ldr	r3, [pc, #212]	@ (8007738 <USB_DeactivateEndpoint+0x1b0>)
 8007662:	4013      	ands	r3, r2
 8007664:	600b      	str	r3, [r1, #0]
 8007666:	e060      	b.n	800772a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800767a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800767e:	d11f      	bne.n	80076c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800769a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800769e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	2101      	movs	r1, #1
 80076d2:	fa01 f303 	lsl.w	r3, r1, r3
 80076d6:	041b      	lsls	r3, r3, #16
 80076d8:	43db      	mvns	r3, r3
 80076da:	68f9      	ldr	r1, [r7, #12]
 80076dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076e0:	4013      	ands	r3, r2
 80076e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ea:	69da      	ldr	r2, [r3, #28]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	2101      	movs	r1, #1
 80076f6:	fa01 f303 	lsl.w	r3, r1, r3
 80076fa:	041b      	lsls	r3, r3, #16
 80076fc:	43db      	mvns	r3, r3
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007704:	4013      	ands	r3, r2
 8007706:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	0159      	lsls	r1, r3, #5
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	440b      	add	r3, r1
 800771e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007722:	4619      	mov	r1, r3
 8007724:	4b05      	ldr	r3, [pc, #20]	@ (800773c <USB_DeactivateEndpoint+0x1b4>)
 8007726:	4013      	ands	r3, r2
 8007728:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	ec337800 	.word	0xec337800
 800773c:	eff37800 	.word	0xeff37800

08007740 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	@ 0x28
 8007744:	af02      	add	r7, sp, #8
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b01      	cmp	r3, #1
 800775e:	f040 8185 	bne.w	8007a6c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d132      	bne.n	80077d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007776:	691a      	ldr	r2, [r3, #16]
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	0159      	lsls	r1, r3, #5
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	440b      	add	r3, r1
 8007780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007784:	4619      	mov	r1, r3
 8007786:	4ba7      	ldr	r3, [pc, #668]	@ (8007a24 <USB_EPStartXfer+0x2e4>)
 8007788:	4013      	ands	r3, r2
 800778a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	0159      	lsls	r1, r3, #5
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	440b      	add	r3, r1
 80077c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c6:	4619      	mov	r1, r3
 80077c8:	4b97      	ldr	r3, [pc, #604]	@ (8007a28 <USB_EPStartXfer+0x2e8>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	610b      	str	r3, [r1, #16]
 80077ce:	e097      	b.n	8007900 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077dc:	691a      	ldr	r2, [r3, #16]
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	0159      	lsls	r1, r3, #5
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	440b      	add	r3, r1
 80077e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ea:	4619      	mov	r1, r3
 80077ec:	4b8e      	ldr	r3, [pc, #568]	@ (8007a28 <USB_EPStartXfer+0x2e8>)
 80077ee:	4013      	ands	r3, r2
 80077f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fe:	691a      	ldr	r2, [r3, #16]
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	0159      	lsls	r1, r3, #5
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	440b      	add	r3, r1
 8007808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800780c:	4619      	mov	r1, r3
 800780e:	4b85      	ldr	r3, [pc, #532]	@ (8007a24 <USB_EPStartXfer+0x2e4>)
 8007810:	4013      	ands	r3, r2
 8007812:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d11a      	bne.n	8007850 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	691a      	ldr	r2, [r3, #16]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	429a      	cmp	r2, r3
 8007824:	d903      	bls.n	800782e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	0151      	lsls	r1, r2, #5
 8007840:	69fa      	ldr	r2, [r7, #28]
 8007842:	440a      	add	r2, r1
 8007844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007848:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800784c:	6113      	str	r3, [r2, #16]
 800784e:	e044      	b.n	80078da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4413      	add	r3, r2
 800785a:	1e5a      	subs	r2, r3, #1
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	fbb2 f3f3 	udiv	r3, r2, r3
 8007864:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	8afb      	ldrh	r3, [r7, #22]
 8007876:	04d9      	lsls	r1, r3, #19
 8007878:	4b6c      	ldr	r3, [pc, #432]	@ (8007a2c <USB_EPStartXfer+0x2ec>)
 800787a:	400b      	ands	r3, r1
 800787c:	69b9      	ldr	r1, [r7, #24]
 800787e:	0148      	lsls	r0, r1, #5
 8007880:	69f9      	ldr	r1, [r7, #28]
 8007882:	4401      	add	r1, r0
 8007884:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007888:	4313      	orrs	r3, r2
 800788a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	791b      	ldrb	r3, [r3, #4]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d122      	bne.n	80078da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80078b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	8afb      	ldrh	r3, [r7, #22]
 80078c4:	075b      	lsls	r3, r3, #29
 80078c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80078ca:	69b9      	ldr	r1, [r7, #24]
 80078cc:	0148      	lsls	r0, r1, #5
 80078ce:	69f9      	ldr	r1, [r7, #28]
 80078d0:	4401      	add	r1, r0
 80078d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80078d6:	4313      	orrs	r3, r2
 80078d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078f0:	69b9      	ldr	r1, [r7, #24]
 80078f2:	0148      	lsls	r0, r1, #5
 80078f4:	69f9      	ldr	r1, [r7, #28]
 80078f6:	4401      	add	r1, r0
 80078f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80078fc:	4313      	orrs	r3, r2
 80078fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007900:	79fb      	ldrb	r3, [r7, #7]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d14b      	bne.n	800799e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791a:	461a      	mov	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	791b      	ldrb	r3, [r3, #4]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d128      	bne.n	800797c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007936:	2b00      	cmp	r3, #0
 8007938:	d110      	bne.n	800795c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	0151      	lsls	r1, r2, #5
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	440a      	add	r2, r1
 8007950:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007954:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	e00f      	b.n	800797c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800797a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007996:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	e169      	b.n	8007c72 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	0151      	lsls	r1, r2, #5
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	440a      	add	r2, r1
 80079b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80079bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	791b      	ldrb	r3, [r3, #4]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d015      	beq.n	80079f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 8151 	beq.w	8007c72 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	2101      	movs	r1, #1
 80079e2:	fa01 f303 	lsl.w	r3, r1, r3
 80079e6:	69f9      	ldr	r1, [r7, #28]
 80079e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079ec:	4313      	orrs	r3, r2
 80079ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80079f0:	e13f      	b.n	8007c72 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d116      	bne.n	8007a30 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	0151      	lsls	r1, r2, #5
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	440a      	add	r2, r1
 8007a18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	e015      	b.n	8007a50 <USB_EPStartXfer+0x310>
 8007a24:	e007ffff 	.word	0xe007ffff
 8007a28:	fff80000 	.word	0xfff80000
 8007a2c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a4e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	68d9      	ldr	r1, [r3, #12]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	b298      	uxth	r0, r3
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	4603      	mov	r3, r0
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f9b9 	bl	8007ddc <USB_WritePacket>
 8007a6a:	e102      	b.n	8007c72 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a78:	691a      	ldr	r2, [r3, #16]
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	0159      	lsls	r1, r3, #5
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	440b      	add	r3, r1
 8007a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a86:	4619      	mov	r1, r3
 8007a88:	4b7c      	ldr	r3, [pc, #496]	@ (8007c7c <USB_EPStartXfer+0x53c>)
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9a:	691a      	ldr	r2, [r3, #16]
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	0159      	lsls	r1, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	440b      	add	r3, r1
 8007aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4b75      	ldr	r3, [pc, #468]	@ (8007c80 <USB_EPStartXfer+0x540>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d12f      	bne.n	8007b16 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ae4:	69b9      	ldr	r1, [r7, #24]
 8007ae6:	0148      	lsls	r0, r1, #5
 8007ae8:	69f9      	ldr	r1, [r7, #28]
 8007aea:	4401      	add	r1, r0
 8007aec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007af0:	4313      	orrs	r3, r2
 8007af2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	0151      	lsls	r1, r2, #5
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	440a      	add	r2, r1
 8007b0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b12:	6113      	str	r3, [r2, #16]
 8007b14:	e05f      	b.n	8007bd6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d123      	bne.n	8007b66 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b2a:	691a      	ldr	r2, [r3, #16]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b34:	69b9      	ldr	r1, [r7, #24]
 8007b36:	0148      	lsls	r0, r1, #5
 8007b38:	69f9      	ldr	r1, [r7, #28]
 8007b3a:	4401      	add	r1, r0
 8007b3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b40:	4313      	orrs	r3, r2
 8007b42:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b62:	6113      	str	r3, [r2, #16]
 8007b64:	e037      	b.n	8007bd6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	4413      	add	r3, r2
 8007b70:	1e5a      	subs	r2, r3, #1
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	8afa      	ldrh	r2, [r7, #22]
 8007b82:	fb03 f202 	mul.w	r2, r3, r2
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	8afb      	ldrh	r3, [r7, #22]
 8007b9a:	04d9      	lsls	r1, r3, #19
 8007b9c:	4b39      	ldr	r3, [pc, #228]	@ (8007c84 <USB_EPStartXfer+0x544>)
 8007b9e:	400b      	ands	r3, r1
 8007ba0:	69b9      	ldr	r1, [r7, #24]
 8007ba2:	0148      	lsls	r0, r1, #5
 8007ba4:	69f9      	ldr	r1, [r7, #28]
 8007ba6:	4401      	add	r1, r0
 8007ba8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007bac:	4313      	orrs	r3, r2
 8007bae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bbc:	691a      	ldr	r2, [r3, #16]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bc6:	69b9      	ldr	r1, [r7, #24]
 8007bc8:	0148      	lsls	r0, r1, #5
 8007bca:	69f9      	ldr	r1, [r7, #28]
 8007bcc:	4401      	add	r1, r0
 8007bce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d10d      	bne.n	8007bf8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d009      	beq.n	8007bf8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	68d9      	ldr	r1, [r3, #12]
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf4:	460a      	mov	r2, r1
 8007bf6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	791b      	ldrb	r3, [r3, #4]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d128      	bne.n	8007c52 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d110      	bne.n	8007c32 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	e00f      	b.n	8007c52 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	0151      	lsls	r1, r2, #5
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	440a      	add	r2, r1
 8007c48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c50:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	0151      	lsls	r1, r2, #5
 8007c64:	69fa      	ldr	r2, [r7, #28]
 8007c66:	440a      	add	r2, r1
 8007c68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c6c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3720      	adds	r7, #32
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	fff80000 	.word	0xfff80000
 8007c80:	e007ffff 	.word	0xe007ffff
 8007c84:	1ff80000 	.word	0x1ff80000

08007c88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d14a      	bne.n	8007d3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cbe:	f040 8086 	bne.w	8007dce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	7812      	ldrb	r2, [r2, #0]
 8007cd6:	0151      	lsls	r1, r2, #5
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	440a      	add	r2, r1
 8007cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ce0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ce4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	7812      	ldrb	r2, [r2, #0]
 8007cfa:	0151      	lsls	r1, r2, #5
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	440a      	add	r2, r1
 8007d00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d902      	bls.n	8007d20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d1e:	e056      	b.n	8007dce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d38:	d0e7      	beq.n	8007d0a <USB_EPStopXfer+0x82>
 8007d3a:	e048      	b.n	8007dce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d54:	d13b      	bne.n	8007dce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	7812      	ldrb	r2, [r2, #0]
 8007d6a:	0151      	lsls	r1, r2, #5
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	440a      	add	r2, r1
 8007d70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	7812      	ldrb	r2, [r2, #0]
 8007d8e:	0151      	lsls	r1, r2, #5
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	440a      	add	r2, r1
 8007d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d902      	bls.n	8007db4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	75fb      	strb	r3, [r7, #23]
          break;
 8007db2:	e00c      	b.n	8007dce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dcc:	d0e7      	beq.n	8007d9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b089      	sub	sp, #36	@ 0x24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4611      	mov	r1, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	460b      	mov	r3, r1
 8007dec:	71fb      	strb	r3, [r7, #7]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d123      	bne.n	8007e4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e02:	88bb      	ldrh	r3, [r7, #4]
 8007e04:	3303      	adds	r3, #3
 8007e06:	089b      	lsrs	r3, r3, #2
 8007e08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	e018      	b.n	8007e42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	031a      	lsls	r2, r3, #12
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	3301      	adds	r3, #1
 8007e28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	3301      	adds	r3, #1
 8007e34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	61bb      	str	r3, [r7, #24]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d3e2      	bcc.n	8007e10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3724      	adds	r7, #36	@ 0x24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b08b      	sub	sp, #44	@ 0x2c
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	089b      	lsrs	r3, r3, #2
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	f003 0303 	and.w	r3, r3, #3
 8007e7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e7e:	2300      	movs	r3, #0
 8007e80:	623b      	str	r3, [r7, #32]
 8007e82:	e014      	b.n	8007eae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	3301      	adds	r3, #1
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	3301      	adds	r3, #1
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	623b      	str	r3, [r7, #32]
 8007eae:	6a3a      	ldr	r2, [r7, #32]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3e6      	bcc.n	8007e84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007eb6:	8bfb      	ldrh	r3, [r7, #30]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01e      	beq.n	8007efa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f107 0310 	add.w	r3, r7, #16
 8007ecc:	6812      	ldr	r2, [r2, #0]
 8007ece:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	701a      	strb	r2, [r3, #0]
      i++;
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	3301      	adds	r3, #1
 8007eec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007eee:	8bfb      	ldrh	r3, [r7, #30]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ef4:	8bfb      	ldrh	r3, [r7, #30]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1ea      	bne.n	8007ed0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	372c      	adds	r7, #44	@ 0x2c
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d12c      	bne.n	8007f7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	db12      	blt.n	8007f5c <USB_EPSetStall+0x54>
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00f      	beq.n	8007f5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	0151      	lsls	r1, r2, #5
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	440a      	add	r2, r1
 8007f52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	0151      	lsls	r1, r2, #5
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	440a      	add	r2, r1
 8007f72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	e02b      	b.n	8007fd6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	db12      	blt.n	8007fb6 <USB_EPSetStall+0xae>
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00f      	beq.n	8007fb6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	0151      	lsls	r1, r2, #5
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	440a      	add	r2, r1
 8007fac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007fb4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007fd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d128      	bne.n	8008052 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	0151      	lsls	r1, r2, #5
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	440a      	add	r2, r1
 8008016:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800801a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800801e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	791b      	ldrb	r3, [r3, #4]
 8008024:	2b03      	cmp	r3, #3
 8008026:	d003      	beq.n	8008030 <USB_EPClearStall+0x4c>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	791b      	ldrb	r3, [r3, #4]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d138      	bne.n	80080a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	0151      	lsls	r1, r2, #5
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	440a      	add	r2, r1
 8008046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800804a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	e027      	b.n	80080a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	0151      	lsls	r1, r2, #5
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	440a      	add	r2, r1
 8008068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800806c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008070:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	791b      	ldrb	r3, [r3, #4]
 8008076:	2b03      	cmp	r3, #3
 8008078:	d003      	beq.n	8008082 <USB_EPClearStall+0x9e>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	791b      	ldrb	r3, [r3, #4]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d10f      	bne.n	80080a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	440a      	add	r2, r1
 8008098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800809c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80080d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080ea:	4313      	orrs	r3, r2
 80080ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008116:	f023 0303 	bic.w	r3, r3, #3
 800811a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800812a:	f023 0302 	bic.w	r3, r3, #2
 800812e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800813e:	b480      	push	{r7}
 8008140:	b085      	sub	sp, #20
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008158:	f023 0303 	bic.w	r3, r3, #3
 800815c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800816c:	f043 0302 	orr.w	r3, r3, #2
 8008170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	4013      	ands	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008198:	68fb      	ldr	r3, [r7, #12]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b085      	sub	sp, #20
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	4013      	ands	r3, r2
 80081c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	0c1b      	lsrs	r3, r3, #16
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	4013      	ands	r3, r2
 80081fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	b29b      	uxth	r3, r3
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	4013      	ands	r3, r2
 800823a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800823c:	68bb      	ldr	r3, [r7, #8]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800824a:	b480      	push	{r7}
 800824c:	b087      	sub	sp, #28
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800826a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800826c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	f003 030f 	and.w	r3, r3, #15
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	fa22 f303 	lsr.w	r3, r2, r3
 800827a:	01db      	lsls	r3, r3, #7
 800827c:	b2db      	uxtb	r3, r3
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4013      	ands	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008298:	68bb      	ldr	r3, [r7, #8]
}
 800829a:	4618      	mov	r0, r3
 800829c:	371c      	adds	r7, #28
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	f003 0301 	and.w	r3, r3, #1
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
	...

080082c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082de:	4619      	mov	r1, r3
 80082e0:	4b09      	ldr	r3, [pc, #36]	@ (8008308 <USB_ActivateSetup+0x44>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	fffff800 	.word	0xfffff800

0800830c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	460b      	mov	r3, r1
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	333c      	adds	r3, #60	@ 0x3c
 8008322:	3304      	adds	r3, #4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	4a26      	ldr	r2, [pc, #152]	@ (80083c4 <USB_EP0_OutStart+0xb8>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d90a      	bls.n	8008346 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800833c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008340:	d101      	bne.n	8008346 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	e037      	b.n	80083b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800834c:	461a      	mov	r2, r3
 800834e:	2300      	movs	r3, #0
 8008350:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008374:	f043 0318 	orr.w	r3, r3, #24
 8008378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008388:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800838c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800838e:	7afb      	ldrb	r3, [r7, #11]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d10f      	bne.n	80083b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839a:	461a      	mov	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80083b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	4f54300a 	.word	0x4f54300a

080083c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3301      	adds	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083e0:	d901      	bls.n	80083e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e01b      	b.n	800841e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	daf2      	bge.n	80083d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f043 0201 	orr.w	r2, r3, #1
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3301      	adds	r3, #1
 8008402:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800840a:	d901      	bls.n	8008410 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e006      	b.n	800841e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b01      	cmp	r3, #1
 800841a:	d0f0      	beq.n	80083fe <USB_CoreReset+0x36>

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008438:	2010      	movs	r0, #16
 800843a:	f002 f9a9 	bl	800a790 <USBD_static_malloc>
 800843e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d109      	bne.n	800845a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	32b0      	adds	r2, #176	@ 0xb0
 8008450:	2100      	movs	r1, #0
 8008452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008456:	2302      	movs	r3, #2
 8008458:	e048      	b.n	80084ec <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	32b0      	adds	r2, #176	@ 0xb0
 8008464:	68f9      	ldr	r1, [r7, #12]
 8008466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	32b0      	adds	r2, #176	@ 0xb0
 8008474:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	7c1b      	ldrb	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10d      	bne.n	80084a2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008486:	4b1b      	ldr	r3, [pc, #108]	@ (80084f4 <USBD_HID_Init+0xc8>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f003 020f 	and.w	r2, r3, #15
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	3326      	adds	r3, #38	@ 0x26
 800849c:	2207      	movs	r2, #7
 800849e:	801a      	strh	r2, [r3, #0]
 80084a0:	e00c      	b.n	80084bc <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80084a2:	4b14      	ldr	r3, [pc, #80]	@ (80084f4 <USBD_HID_Init+0xc8>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	f003 020f 	and.w	r2, r3, #15
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	3326      	adds	r3, #38	@ 0x26
 80084b8:	220a      	movs	r2, #10
 80084ba:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80084bc:	4b0d      	ldr	r3, [pc, #52]	@ (80084f4 <USBD_HID_Init+0xc8>)
 80084be:	7819      	ldrb	r1, [r3, #0]
 80084c0:	2304      	movs	r3, #4
 80084c2:	2203      	movs	r2, #3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f002 f852 	bl	800a56e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80084ca:	4b0a      	ldr	r3, [pc, #40]	@ (80084f4 <USBD_HID_Init+0xc8>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f003 020f 	and.w	r2, r3, #15
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	440b      	add	r3, r1
 80084de:	3324      	adds	r3, #36	@ 0x24
 80084e0:	2201      	movs	r2, #1
 80084e2:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	240000c3 	.word	0x240000c3

080084f8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008504:	4b1f      	ldr	r3, [pc, #124]	@ (8008584 <USBD_HID_DeInit+0x8c>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f002 f855 	bl	800a5ba <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008510:	4b1c      	ldr	r3, [pc, #112]	@ (8008584 <USBD_HID_DeInit+0x8c>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	f003 020f 	and.w	r2, r3, #15
 8008518:	6879      	ldr	r1, [r7, #4]
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	3324      	adds	r3, #36	@ 0x24
 8008526:	2200      	movs	r2, #0
 8008528:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800852a:	4b16      	ldr	r3, [pc, #88]	@ (8008584 <USBD_HID_DeInit+0x8c>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f003 020f 	and.w	r2, r3, #15
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	3326      	adds	r3, #38	@ 0x26
 8008540:	2200      	movs	r2, #0
 8008542:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	32b0      	adds	r2, #176	@ 0xb0
 800854e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d011      	beq.n	800857a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	32b0      	adds	r2, #176	@ 0xb0
 8008560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008564:	4618      	mov	r0, r3
 8008566:	f002 f921 	bl	800a7ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	32b0      	adds	r2, #176	@ 0xb0
 8008574:	2100      	movs	r1, #0
 8008576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	240000c3 	.word	0x240000c3

08008588 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	32b0      	adds	r2, #176	@ 0xb0
 800859c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e0e8      	b.n	8008786 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d046      	beq.n	800864e <USBD_HID_Setup+0xc6>
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	f040 80d8 	bne.w	8008776 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	3b02      	subs	r3, #2
 80085cc:	2b09      	cmp	r3, #9
 80085ce:	d836      	bhi.n	800863e <USBD_HID_Setup+0xb6>
 80085d0:	a201      	add	r2, pc, #4	@ (adr r2, 80085d8 <USBD_HID_Setup+0x50>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	0800862f 	.word	0x0800862f
 80085dc:	0800860f 	.word	0x0800860f
 80085e0:	0800863f 	.word	0x0800863f
 80085e4:	0800863f 	.word	0x0800863f
 80085e8:	0800863f 	.word	0x0800863f
 80085ec:	0800863f 	.word	0x0800863f
 80085f0:	0800863f 	.word	0x0800863f
 80085f4:	0800863f 	.word	0x0800863f
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	08008601 	.word	0x08008601
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	885b      	ldrh	r3, [r3, #2]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	461a      	mov	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	601a      	str	r2, [r3, #0]
          break;
 800860c:	e01e      	b.n	800864c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 fbdf 	bl	8009dd8 <USBD_CtlSendData>
          break;
 800861a:	e017      	b.n	800864c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	885b      	ldrh	r3, [r3, #2]
 8008620:	0a1b      	lsrs	r3, r3, #8
 8008622:	b29b      	uxth	r3, r3
 8008624:	b2db      	uxtb	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	605a      	str	r2, [r3, #4]
          break;
 800862c:	e00e      	b.n	800864c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3304      	adds	r3, #4
 8008632:	2201      	movs	r2, #1
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 fbce 	bl	8009dd8 <USBD_CtlSendData>
          break;
 800863c:	e006      	b.n	800864c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 fb4c 	bl	8009cde <USBD_CtlError>
          ret = USBD_FAIL;
 8008646:	2303      	movs	r3, #3
 8008648:	75fb      	strb	r3, [r7, #23]
          break;
 800864a:	bf00      	nop
      }
      break;
 800864c:	e09a      	b.n	8008784 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	785b      	ldrb	r3, [r3, #1]
 8008652:	2b0b      	cmp	r3, #11
 8008654:	f200 8086 	bhi.w	8008764 <USBD_HID_Setup+0x1dc>
 8008658:	a201      	add	r2, pc, #4	@ (adr r2, 8008660 <USBD_HID_Setup+0xd8>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	08008691 	.word	0x08008691
 8008664:	08008773 	.word	0x08008773
 8008668:	08008765 	.word	0x08008765
 800866c:	08008765 	.word	0x08008765
 8008670:	08008765 	.word	0x08008765
 8008674:	08008765 	.word	0x08008765
 8008678:	080086bb 	.word	0x080086bb
 800867c:	08008765 	.word	0x08008765
 8008680:	08008765 	.word	0x08008765
 8008684:	08008765 	.word	0x08008765
 8008688:	08008713 	.word	0x08008713
 800868c:	0800873d 	.word	0x0800873d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b03      	cmp	r3, #3
 800869a:	d107      	bne.n	80086ac <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800869c:	f107 030a 	add.w	r3, r7, #10
 80086a0:	2202      	movs	r2, #2
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fb97 	bl	8009dd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086aa:	e063      	b.n	8008774 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fb15 	bl	8009cde <USBD_CtlError>
            ret = USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	75fb      	strb	r3, [r7, #23]
          break;
 80086b8:	e05c      	b.n	8008774 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	885b      	ldrh	r3, [r3, #2]
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b22      	cmp	r3, #34	@ 0x22
 80086c4:	d108      	bne.n	80086d8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	88db      	ldrh	r3, [r3, #6]
 80086ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80086cc:	bf28      	it	cs
 80086ce:	233f      	movcs	r3, #63	@ 0x3f
 80086d0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80086d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008790 <USBD_HID_Setup+0x208>)
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	e015      	b.n	8008704 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	885b      	ldrh	r3, [r3, #2]
 80086dc:	0a1b      	lsrs	r3, r3, #8
 80086de:	b29b      	uxth	r3, r3
 80086e0:	2b21      	cmp	r3, #33	@ 0x21
 80086e2:	d108      	bne.n	80086f6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80086e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008794 <USBD_HID_Setup+0x20c>)
 80086e6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	88db      	ldrh	r3, [r3, #6]
 80086ec:	2b09      	cmp	r3, #9
 80086ee:	bf28      	it	cs
 80086f0:	2309      	movcs	r3, #9
 80086f2:	82bb      	strh	r3, [r7, #20]
 80086f4:	e006      	b.n	8008704 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 faf0 	bl	8009cde <USBD_CtlError>
            ret = USBD_FAIL;
 80086fe:	2303      	movs	r3, #3
 8008700:	75fb      	strb	r3, [r7, #23]
            break;
 8008702:	e037      	b.n	8008774 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008704:	8abb      	ldrh	r3, [r7, #20]
 8008706:	461a      	mov	r2, r3
 8008708:	6939      	ldr	r1, [r7, #16]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 fb64 	bl	8009dd8 <USBD_CtlSendData>
          break;
 8008710:	e030      	b.n	8008774 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b03      	cmp	r3, #3
 800871c:	d107      	bne.n	800872e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3308      	adds	r3, #8
 8008722:	2201      	movs	r2, #1
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f001 fb56 	bl	8009dd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800872c:	e022      	b.n	8008774 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 fad4 	bl	8009cde <USBD_CtlError>
            ret = USBD_FAIL;
 8008736:	2303      	movs	r3, #3
 8008738:	75fb      	strb	r3, [r7, #23]
          break;
 800873a:	e01b      	b.n	8008774 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b03      	cmp	r3, #3
 8008746:	d106      	bne.n	8008756 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	885b      	ldrh	r3, [r3, #2]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	461a      	mov	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008754:	e00e      	b.n	8008774 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 fac0 	bl	8009cde <USBD_CtlError>
            ret = USBD_FAIL;
 800875e:	2303      	movs	r3, #3
 8008760:	75fb      	strb	r3, [r7, #23]
          break;
 8008762:	e007      	b.n	8008774 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fab9 	bl	8009cde <USBD_CtlError>
          ret = USBD_FAIL;
 800876c:	2303      	movs	r3, #3
 800876e:	75fb      	strb	r3, [r7, #23]
          break;
 8008770:	e000      	b.n	8008774 <USBD_HID_Setup+0x1ec>
          break;
 8008772:	bf00      	nop
      }
      break;
 8008774:	e006      	b.n	8008784 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 fab0 	bl	8009cde <USBD_CtlError>
      ret = USBD_FAIL;
 800877e:	2303      	movs	r3, #3
 8008780:	75fb      	strb	r3, [r7, #23]
      break;
 8008782:	bf00      	nop
  }

  return (uint8_t)ret;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	24000084 	.word	0x24000084
 8008794:	2400006c 	.word	0x2400006c

08008798 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80087a0:	2181      	movs	r1, #129	@ 0x81
 80087a2:	4809      	ldr	r0, [pc, #36]	@ (80087c8 <USBD_HID_GetFSCfgDesc+0x30>)
 80087a4:	f000 fc3b 	bl	800901e <USBD_GetEpDesc>
 80087a8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	220a      	movs	r2, #10
 80087b4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2222      	movs	r2, #34	@ 0x22
 80087ba:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80087bc:	4b02      	ldr	r3, [pc, #8]	@ (80087c8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	24000048 	.word	0x24000048

080087cc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80087d4:	2181      	movs	r1, #129	@ 0x81
 80087d6:	4809      	ldr	r0, [pc, #36]	@ (80087fc <USBD_HID_GetHSCfgDesc+0x30>)
 80087d8:	f000 fc21 	bl	800901e <USBD_GetEpDesc>
 80087dc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2207      	movs	r2, #7
 80087e8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2222      	movs	r2, #34	@ 0x22
 80087ee:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80087f0:	4b02      	ldr	r3, [pc, #8]	@ (80087fc <USBD_HID_GetHSCfgDesc+0x30>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	24000048 	.word	0x24000048

08008800 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008808:	2181      	movs	r1, #129	@ 0x81
 800880a:	4809      	ldr	r0, [pc, #36]	@ (8008830 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800880c:	f000 fc07 	bl	800901e <USBD_GetEpDesc>
 8008810:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	220a      	movs	r2, #10
 800881c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2222      	movs	r2, #34	@ 0x22
 8008822:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008824:	4b02      	ldr	r3, [pc, #8]	@ (8008830 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	24000048 	.word	0x24000048

08008834 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	32b0      	adds	r2, #176	@ 0xb0
 800884a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884e:	2200      	movs	r2, #0
 8008850:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	220a      	movs	r2, #10
 800886c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800886e:	4b03      	ldr	r3, [pc, #12]	@ (800887c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	24000078 	.word	0x24000078

08008880 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008894:	2303      	movs	r3, #3
 8008896:	e01f      	b.n	80088d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	79fa      	ldrb	r2, [r7, #7]
 80088ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f001 fde1 	bl	800a494 <USBD_LL_Init>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e025      	b.n	8008944 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	32ae      	adds	r2, #174	@ 0xae
 800890a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00f      	beq.n	8008934 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	32ae      	adds	r2, #174	@ 0xae
 800891e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008924:	f107 020e 	add.w	r2, r7, #14
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	4602      	mov	r2, r0
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fdef 	bl	800a538 <USBD_LL_Start>
 800895a:	4603      	mov	r3, r0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800896c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008990:	2b00      	cmp	r3, #0
 8008992:	d009      	beq.n	80089a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	78fa      	ldrb	r2, [r7, #3]
 800899e:	4611      	mov	r1, r2
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	4798      	blx	r3
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	4611      	mov	r1, r2
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089d8:	2303      	movs	r3, #3
 80089da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 f936 	bl	8009c6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a1a:	f003 031f 	and.w	r3, r3, #31
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d01a      	beq.n	8008a58 <USBD_LL_SetupStage+0x72>
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d822      	bhi.n	8008a6c <USBD_LL_SetupStage+0x86>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <USBD_LL_SetupStage+0x4a>
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d00a      	beq.n	8008a44 <USBD_LL_SetupStage+0x5e>
 8008a2e:	e01d      	b.n	8008a6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fb63 	bl	8009104 <USBD_StdDevReq>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73fb      	strb	r3, [r7, #15]
      break;
 8008a42:	e020      	b.n	8008a86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fbcb 	bl	80091e8 <USBD_StdItfReq>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]
      break;
 8008a56:	e016      	b.n	8008a86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fc2d 	bl	80092c0 <USBD_StdEPReq>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]
      break;
 8008a6a:	e00c      	b.n	8008a86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f001 fdbc 	bl	800a5f8 <USBD_LL_StallEP>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73fb      	strb	r3, [r7, #15]
      break;
 8008a84:	bf00      	nop
  }

  return ret;
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d16e      	bne.n	8008b86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008aae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	f040 8098 	bne.w	8008bec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d913      	bls.n	8008af0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	1ad2      	subs	r2, r2, r3
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	bf28      	it	cs
 8008ae2:	4613      	movcs	r3, r2
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f001 f9a1 	bl	8009e30 <USBD_CtlContinueRx>
 8008aee:	e07d      	b.n	8008bec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008af6:	f003 031f 	and.w	r3, r3, #31
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d014      	beq.n	8008b28 <USBD_LL_DataOutStage+0x98>
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d81d      	bhi.n	8008b3e <USBD_LL_DataOutStage+0xae>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d002      	beq.n	8008b0c <USBD_LL_DataOutStage+0x7c>
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d003      	beq.n	8008b12 <USBD_LL_DataOutStage+0x82>
 8008b0a:	e018      	b.n	8008b3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	75bb      	strb	r3, [r7, #22]
            break;
 8008b10:	e018      	b.n	8008b44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 fa64 	bl	8008fea <USBD_CoreFindIF>
 8008b22:	4603      	mov	r3, r0
 8008b24:	75bb      	strb	r3, [r7, #22]
            break;
 8008b26:	e00d      	b.n	8008b44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	4619      	mov	r1, r3
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 fa66 	bl	8009004 <USBD_CoreFindEP>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	75bb      	strb	r3, [r7, #22]
            break;
 8008b3c:	e002      	b.n	8008b44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75bb      	strb	r3, [r7, #22]
            break;
 8008b42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b44:	7dbb      	ldrb	r3, [r7, #22]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d119      	bne.n	8008b7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d113      	bne.n	8008b7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b56:	7dba      	ldrb	r2, [r7, #22]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	32ae      	adds	r2, #174	@ 0xae
 8008b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00b      	beq.n	8008b7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b66:	7dba      	ldrb	r2, [r7, #22]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b6e:	7dba      	ldrb	r2, [r7, #22]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	32ae      	adds	r2, #174	@ 0xae
 8008b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f001 f967 	bl	8009e52 <USBD_CtlSendStatus>
 8008b84:	e032      	b.n	8008bec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b86:	7afb      	ldrb	r3, [r7, #11]
 8008b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	4619      	mov	r1, r3
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 fa37 	bl	8009004 <USBD_CoreFindEP>
 8008b96:	4603      	mov	r3, r0
 8008b98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b9a:	7dbb      	ldrb	r3, [r7, #22]
 8008b9c:	2bff      	cmp	r3, #255	@ 0xff
 8008b9e:	d025      	beq.n	8008bec <USBD_LL_DataOutStage+0x15c>
 8008ba0:	7dbb      	ldrb	r3, [r7, #22]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d122      	bne.n	8008bec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d117      	bne.n	8008be2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008bb2:	7dba      	ldrb	r2, [r7, #22]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	32ae      	adds	r2, #174	@ 0xae
 8008bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00f      	beq.n	8008be2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008bc2:	7dba      	ldrb	r2, [r7, #22]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008bca:	7dba      	ldrb	r2, [r7, #22]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	32ae      	adds	r2, #174	@ 0xae
 8008bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	7afa      	ldrb	r2, [r7, #11]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	4798      	blx	r3
 8008bde:	4603      	mov	r3, r0
 8008be0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	e000      	b.n	8008bee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b086      	sub	sp, #24
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	607a      	str	r2, [r7, #4]
 8008c02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d16f      	bne.n	8008cea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3314      	adds	r3, #20
 8008c0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d15a      	bne.n	8008cd0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d914      	bls.n	8008c50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6879      	ldr	r1, [r7, #4]
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f001 f8e6 	bl	8009e0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c42:	2300      	movs	r3, #0
 8008c44:	2200      	movs	r2, #0
 8008c46:	2100      	movs	r1, #0
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f001 fd7f 	bl	800a74c <USBD_LL_PrepareReceive>
 8008c4e:	e03f      	b.n	8008cd0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d11c      	bne.n	8008c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d316      	bcc.n	8008c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d20f      	bcs.n	8008c96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c76:	2200      	movs	r2, #0
 8008c78:	2100      	movs	r1, #0
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f001 f8c7 	bl	8009e0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c88:	2300      	movs	r3, #0
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f001 fd5c 	bl	800a74c <USBD_LL_PrepareReceive>
 8008c94:	e01c      	b.n	8008cd0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d10f      	bne.n	8008cc2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d009      	beq.n	8008cc2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cc2:	2180      	movs	r1, #128	@ 0x80
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f001 fc97 	bl	800a5f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f001 f8d4 	bl	8009e78 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d03a      	beq.n	8008d50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f7ff fe42 	bl	8008964 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008ce8:	e032      	b.n	8008d50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008cea:	7afb      	ldrb	r3, [r7, #11]
 8008cec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 f985 	bl	8009004 <USBD_CoreFindEP>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	2bff      	cmp	r3, #255	@ 0xff
 8008d02:	d025      	beq.n	8008d50 <USBD_LL_DataInStage+0x15a>
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d122      	bne.n	8008d50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d11c      	bne.n	8008d50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d16:	7dfa      	ldrb	r2, [r7, #23]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	32ae      	adds	r2, #174	@ 0xae
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d014      	beq.n	8008d50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d26:	7dfa      	ldrb	r2, [r7, #23]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d2e:	7dfa      	ldrb	r2, [r7, #23]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	32ae      	adds	r2, #174	@ 0xae
 8008d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	7afa      	ldrb	r2, [r7, #11]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	4798      	blx	r3
 8008d42:	4603      	mov	r3, r0
 8008d44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d46:	7dbb      	ldrb	r3, [r7, #22]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d4c:	7dbb      	ldrb	r3, [r7, #22]
 8008d4e:	e000      	b.n	8008d52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d014      	beq.n	8008dc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00e      	beq.n	8008dc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6852      	ldr	r2, [r2, #4]
 8008dae:	b2d2      	uxtb	r2, r2
 8008db0:	4611      	mov	r1, r2
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	4798      	blx	r3
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dc0:	2340      	movs	r3, #64	@ 0x40
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fbd1 	bl	800a56e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2240      	movs	r2, #64	@ 0x40
 8008dd8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ddc:	2340      	movs	r3, #64	@ 0x40
 8008dde:	2200      	movs	r2, #0
 8008de0:	2180      	movs	r1, #128	@ 0x80
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 fbc3 	bl	800a56e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2240      	movs	r2, #64	@ 0x40
 8008df2:	621a      	str	r2, [r3, #32]

  return ret;
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	78fa      	ldrb	r2, [r7, #3]
 8008e0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d006      	beq.n	8008e40 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2204      	movs	r2, #4
 8008e44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d106      	bne.n	8008e78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d110      	bne.n	8008ebc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00b      	beq.n	8008ebc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	32ae      	adds	r2, #174	@ 0xae
 8008edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e01c      	b.n	8008f22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d115      	bne.n	8008f20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	32ae      	adds	r2, #174	@ 0xae
 8008efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	32ae      	adds	r2, #174	@ 0xae
 8008f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	460b      	mov	r3, r1
 8008f34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	32ae      	adds	r2, #174	@ 0xae
 8008f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e01c      	b.n	8008f86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d115      	bne.n	8008f84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	32ae      	adds	r2, #174	@ 0xae
 8008f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	32ae      	adds	r2, #174	@ 0xae
 8008f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7c:	78fa      	ldrb	r2, [r7, #3]
 8008f7e:	4611      	mov	r1, r2
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b083      	sub	sp, #12
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00e      	beq.n	8008fe0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	6852      	ldr	r2, [r2, #4]
 8008fce:	b2d2      	uxtb	r2, r2
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	4798      	blx	r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ff6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009010:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009012:	4618      	mov	r0, r3
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b086      	sub	sp, #24
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	460b      	mov	r3, r1
 8009028:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	885b      	ldrh	r3, [r3, #2]
 800903a:	b29b      	uxth	r3, r3
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	7812      	ldrb	r2, [r2, #0]
 8009040:	4293      	cmp	r3, r2
 8009042:	d91f      	bls.n	8009084 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800904a:	e013      	b.n	8009074 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800904c:	f107 030a 	add.w	r3, r7, #10
 8009050:	4619      	mov	r1, r3
 8009052:	6978      	ldr	r0, [r7, #20]
 8009054:	f000 f81b 	bl	800908e <USBD_GetNextDesc>
 8009058:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	2b05      	cmp	r3, #5
 8009060:	d108      	bne.n	8009074 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	789b      	ldrb	r3, [r3, #2]
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	429a      	cmp	r2, r3
 800906e:	d008      	beq.n	8009082 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009070:	2300      	movs	r3, #0
 8009072:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	885b      	ldrh	r3, [r3, #2]
 8009078:	b29a      	uxth	r2, r3
 800907a:	897b      	ldrh	r3, [r7, #10]
 800907c:	429a      	cmp	r2, r3
 800907e:	d8e5      	bhi.n	800904c <USBD_GetEpDesc+0x2e>
 8009080:	e000      	b.n	8009084 <USBD_GetEpDesc+0x66>
          break;
 8009082:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009084:	693b      	ldr	r3, [r7, #16]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800908e:	b480      	push	{r7}
 8009090:	b085      	sub	sp, #20
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	7812      	ldrb	r2, [r2, #0]
 80090a4:	4413      	add	r3, r2
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4413      	add	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090b8:	68fb      	ldr	r3, [r7, #12]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b087      	sub	sp, #28
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	3301      	adds	r3, #1
 80090dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090e4:	8a3b      	ldrh	r3, [r7, #16]
 80090e6:	021b      	lsls	r3, r3, #8
 80090e8:	b21a      	sxth	r2, r3
 80090ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	b21b      	sxth	r3, r3
 80090f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090f4:	89fb      	ldrh	r3, [r7, #14]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	371c      	adds	r7, #28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
	...

08009104 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800911a:	2b40      	cmp	r3, #64	@ 0x40
 800911c:	d005      	beq.n	800912a <USBD_StdDevReq+0x26>
 800911e:	2b40      	cmp	r3, #64	@ 0x40
 8009120:	d857      	bhi.n	80091d2 <USBD_StdDevReq+0xce>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00f      	beq.n	8009146 <USBD_StdDevReq+0x42>
 8009126:	2b20      	cmp	r3, #32
 8009128:	d153      	bne.n	80091d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	32ae      	adds	r2, #174	@ 0xae
 8009134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	4798      	blx	r3
 8009140:	4603      	mov	r3, r0
 8009142:	73fb      	strb	r3, [r7, #15]
      break;
 8009144:	e04a      	b.n	80091dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	2b09      	cmp	r3, #9
 800914c:	d83b      	bhi.n	80091c6 <USBD_StdDevReq+0xc2>
 800914e:	a201      	add	r2, pc, #4	@ (adr r2, 8009154 <USBD_StdDevReq+0x50>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	080091a9 	.word	0x080091a9
 8009158:	080091bd 	.word	0x080091bd
 800915c:	080091c7 	.word	0x080091c7
 8009160:	080091b3 	.word	0x080091b3
 8009164:	080091c7 	.word	0x080091c7
 8009168:	08009187 	.word	0x08009187
 800916c:	0800917d 	.word	0x0800917d
 8009170:	080091c7 	.word	0x080091c7
 8009174:	0800919f 	.word	0x0800919f
 8009178:	08009191 	.word	0x08009191
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa3c 	bl	80095fc <USBD_GetDescriptor>
          break;
 8009184:	e024      	b.n	80091d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fbcb 	bl	8009924 <USBD_SetAddress>
          break;
 800918e:	e01f      	b.n	80091d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fc0a 	bl	80099ac <USBD_SetConfig>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]
          break;
 800919c:	e018      	b.n	80091d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fcad 	bl	8009b00 <USBD_GetConfig>
          break;
 80091a6:	e013      	b.n	80091d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fcde 	bl	8009b6c <USBD_GetStatus>
          break;
 80091b0:	e00e      	b.n	80091d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fd0d 	bl	8009bd4 <USBD_SetFeature>
          break;
 80091ba:	e009      	b.n	80091d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fd31 	bl	8009c26 <USBD_ClrFeature>
          break;
 80091c4:	e004      	b.n	80091d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fd88 	bl	8009cde <USBD_CtlError>
          break;
 80091ce:	bf00      	nop
      }
      break;
 80091d0:	e004      	b.n	80091dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fd82 	bl	8009cde <USBD_CtlError>
      break;
 80091da:	bf00      	nop
  }

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop

080091e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091fe:	2b40      	cmp	r3, #64	@ 0x40
 8009200:	d005      	beq.n	800920e <USBD_StdItfReq+0x26>
 8009202:	2b40      	cmp	r3, #64	@ 0x40
 8009204:	d852      	bhi.n	80092ac <USBD_StdItfReq+0xc4>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <USBD_StdItfReq+0x26>
 800920a:	2b20      	cmp	r3, #32
 800920c:	d14e      	bne.n	80092ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009214:	b2db      	uxtb	r3, r3
 8009216:	3b01      	subs	r3, #1
 8009218:	2b02      	cmp	r3, #2
 800921a:	d840      	bhi.n	800929e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	889b      	ldrh	r3, [r3, #4]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b01      	cmp	r3, #1
 8009224:	d836      	bhi.n	8009294 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	889b      	ldrh	r3, [r3, #4]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7ff fedb 	bl	8008fea <USBD_CoreFindIF>
 8009234:	4603      	mov	r3, r0
 8009236:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2bff      	cmp	r3, #255	@ 0xff
 800923c:	d01d      	beq.n	800927a <USBD_StdItfReq+0x92>
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d11a      	bne.n	800927a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009244:	7bba      	ldrb	r2, [r7, #14]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	32ae      	adds	r2, #174	@ 0xae
 800924a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00f      	beq.n	8009274 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009254:	7bba      	ldrb	r2, [r7, #14]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800925c:	7bba      	ldrb	r2, [r7, #14]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	32ae      	adds	r2, #174	@ 0xae
 8009262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
 800926e:	4603      	mov	r3, r0
 8009270:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009272:	e004      	b.n	800927e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009274:	2303      	movs	r3, #3
 8009276:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009278:	e001      	b.n	800927e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800927a:	2303      	movs	r3, #3
 800927c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	88db      	ldrh	r3, [r3, #6]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d110      	bne.n	80092a8 <USBD_StdItfReq+0xc0>
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10d      	bne.n	80092a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fde0 	bl	8009e52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009292:	e009      	b.n	80092a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fd21 	bl	8009cde <USBD_CtlError>
          break;
 800929c:	e004      	b.n	80092a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fd1c 	bl	8009cde <USBD_CtlError>
          break;
 80092a6:	e000      	b.n	80092aa <USBD_StdItfReq+0xc2>
          break;
 80092a8:	bf00      	nop
      }
      break;
 80092aa:	e004      	b.n	80092b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fd15 	bl	8009cde <USBD_CtlError>
      break;
 80092b4:	bf00      	nop
  }

  return ret;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	889b      	ldrh	r3, [r3, #4]
 80092d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092dc:	2b40      	cmp	r3, #64	@ 0x40
 80092de:	d007      	beq.n	80092f0 <USBD_StdEPReq+0x30>
 80092e0:	2b40      	cmp	r3, #64	@ 0x40
 80092e2:	f200 817f 	bhi.w	80095e4 <USBD_StdEPReq+0x324>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d02a      	beq.n	8009340 <USBD_StdEPReq+0x80>
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	f040 817a 	bne.w	80095e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff fe85 	bl	8009004 <USBD_CoreFindEP>
 80092fa:	4603      	mov	r3, r0
 80092fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092fe:	7b7b      	ldrb	r3, [r7, #13]
 8009300:	2bff      	cmp	r3, #255	@ 0xff
 8009302:	f000 8174 	beq.w	80095ee <USBD_StdEPReq+0x32e>
 8009306:	7b7b      	ldrb	r3, [r7, #13]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f040 8170 	bne.w	80095ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800930e:	7b7a      	ldrb	r2, [r7, #13]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009316:	7b7a      	ldrb	r2, [r7, #13]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	32ae      	adds	r2, #174	@ 0xae
 800931c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 8163 	beq.w	80095ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009328:	7b7a      	ldrb	r2, [r7, #13]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	32ae      	adds	r2, #174	@ 0xae
 800932e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800933e:	e156      	b.n	80095ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	785b      	ldrb	r3, [r3, #1]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d008      	beq.n	800935a <USBD_StdEPReq+0x9a>
 8009348:	2b03      	cmp	r3, #3
 800934a:	f300 8145 	bgt.w	80095d8 <USBD_StdEPReq+0x318>
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 809b 	beq.w	800948a <USBD_StdEPReq+0x1ca>
 8009354:	2b01      	cmp	r3, #1
 8009356:	d03c      	beq.n	80093d2 <USBD_StdEPReq+0x112>
 8009358:	e13e      	b.n	80095d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b02      	cmp	r3, #2
 8009364:	d002      	beq.n	800936c <USBD_StdEPReq+0xac>
 8009366:	2b03      	cmp	r3, #3
 8009368:	d016      	beq.n	8009398 <USBD_StdEPReq+0xd8>
 800936a:	e02c      	b.n	80093c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00d      	beq.n	800938e <USBD_StdEPReq+0xce>
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b80      	cmp	r3, #128	@ 0x80
 8009376:	d00a      	beq.n	800938e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 f93b 	bl	800a5f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009382:	2180      	movs	r1, #128	@ 0x80
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 f937 	bl	800a5f8 <USBD_LL_StallEP>
 800938a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800938c:	e020      	b.n	80093d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fca4 	bl	8009cde <USBD_CtlError>
              break;
 8009396:	e01b      	b.n	80093d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	885b      	ldrh	r3, [r3, #2]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10e      	bne.n	80093be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00b      	beq.n	80093be <USBD_StdEPReq+0xfe>
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	2b80      	cmp	r3, #128	@ 0x80
 80093aa:	d008      	beq.n	80093be <USBD_StdEPReq+0xfe>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	88db      	ldrh	r3, [r3, #6]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d104      	bne.n	80093be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 f91d 	bl	800a5f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fd47 	bl	8009e52 <USBD_CtlSendStatus>

              break;
 80093c4:	e004      	b.n	80093d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fc88 	bl	8009cde <USBD_CtlError>
              break;
 80093ce:	bf00      	nop
          }
          break;
 80093d0:	e107      	b.n	80095e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d002      	beq.n	80093e4 <USBD_StdEPReq+0x124>
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d016      	beq.n	8009410 <USBD_StdEPReq+0x150>
 80093e2:	e04b      	b.n	800947c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00d      	beq.n	8009406 <USBD_StdEPReq+0x146>
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	2b80      	cmp	r3, #128	@ 0x80
 80093ee:	d00a      	beq.n	8009406 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f001 f8ff 	bl	800a5f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093fa:	2180      	movs	r1, #128	@ 0x80
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 f8fb 	bl	800a5f8 <USBD_LL_StallEP>
 8009402:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009404:	e040      	b.n	8009488 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fc68 	bl	8009cde <USBD_CtlError>
              break;
 800940e:	e03b      	b.n	8009488 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	885b      	ldrh	r3, [r3, #2]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d136      	bne.n	8009486 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 f905 	bl	800a636 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fd10 	bl	8009e52 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff fde4 	bl	8009004 <USBD_CoreFindEP>
 800943c:	4603      	mov	r3, r0
 800943e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009440:	7b7b      	ldrb	r3, [r7, #13]
 8009442:	2bff      	cmp	r3, #255	@ 0xff
 8009444:	d01f      	beq.n	8009486 <USBD_StdEPReq+0x1c6>
 8009446:	7b7b      	ldrb	r3, [r7, #13]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d11c      	bne.n	8009486 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800944c:	7b7a      	ldrb	r2, [r7, #13]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009454:	7b7a      	ldrb	r2, [r7, #13]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	32ae      	adds	r2, #174	@ 0xae
 800945a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d010      	beq.n	8009486 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009464:	7b7a      	ldrb	r2, [r7, #13]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	32ae      	adds	r2, #174	@ 0xae
 800946a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800947a:	e004      	b.n	8009486 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fc2d 	bl	8009cde <USBD_CtlError>
              break;
 8009484:	e000      	b.n	8009488 <USBD_StdEPReq+0x1c8>
              break;
 8009486:	bf00      	nop
          }
          break;
 8009488:	e0ab      	b.n	80095e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d002      	beq.n	800949c <USBD_StdEPReq+0x1dc>
 8009496:	2b03      	cmp	r3, #3
 8009498:	d032      	beq.n	8009500 <USBD_StdEPReq+0x240>
 800949a:	e097      	b.n	80095cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d007      	beq.n	80094b2 <USBD_StdEPReq+0x1f2>
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	2b80      	cmp	r3, #128	@ 0x80
 80094a6:	d004      	beq.n	80094b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fc17 	bl	8009cde <USBD_CtlError>
                break;
 80094b0:	e091      	b.n	80095d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	da0b      	bge.n	80094d2 <USBD_StdEPReq+0x212>
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094c0:	4613      	mov	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	3310      	adds	r3, #16
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	4413      	add	r3, r2
 80094ce:	3304      	adds	r3, #4
 80094d0:	e00b      	b.n	80094ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	4413      	add	r3, r2
 80094e8:	3304      	adds	r3, #4
 80094ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2202      	movs	r2, #2
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fc6d 	bl	8009dd8 <USBD_CtlSendData>
              break;
 80094fe:	e06a      	b.n	80095d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009504:	2b00      	cmp	r3, #0
 8009506:	da11      	bge.n	800952c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	f003 020f 	and.w	r2, r3, #15
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	3324      	adds	r3, #36	@ 0x24
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d117      	bne.n	8009552 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fbda 	bl	8009cde <USBD_CtlError>
                  break;
 800952a:	e054      	b.n	80095d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	f003 020f 	and.w	r2, r3, #15
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d104      	bne.n	8009552 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fbc7 	bl	8009cde <USBD_CtlError>
                  break;
 8009550:	e041      	b.n	80095d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009556:	2b00      	cmp	r3, #0
 8009558:	da0b      	bge.n	8009572 <USBD_StdEPReq+0x2b2>
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	3310      	adds	r3, #16
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	4413      	add	r3, r2
 800956e:	3304      	adds	r3, #4
 8009570:	e00b      	b.n	800958a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	4413      	add	r3, r2
 8009588:	3304      	adds	r3, #4
 800958a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <USBD_StdEPReq+0x2d8>
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	2b80      	cmp	r3, #128	@ 0x80
 8009596:	d103      	bne.n	80095a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	e00e      	b.n	80095be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 f865 	bl	800a674 <USBD_LL_IsStallEP>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2201      	movs	r2, #1
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	e002      	b.n	80095be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2200      	movs	r2, #0
 80095bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2202      	movs	r2, #2
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fc07 	bl	8009dd8 <USBD_CtlSendData>
              break;
 80095ca:	e004      	b.n	80095d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fb85 	bl	8009cde <USBD_CtlError>
              break;
 80095d4:	bf00      	nop
          }
          break;
 80095d6:	e004      	b.n	80095e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fb7f 	bl	8009cde <USBD_CtlError>
          break;
 80095e0:	bf00      	nop
      }
      break;
 80095e2:	e005      	b.n	80095f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fb79 	bl	8009cde <USBD_CtlError>
      break;
 80095ec:	e000      	b.n	80095f0 <USBD_StdEPReq+0x330>
      break;
 80095ee:	bf00      	nop
  }

  return ret;
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800960a:	2300      	movs	r3, #0
 800960c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	885b      	ldrh	r3, [r3, #2]
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	b29b      	uxth	r3, r3
 800961a:	3b01      	subs	r3, #1
 800961c:	2b0e      	cmp	r3, #14
 800961e:	f200 8152 	bhi.w	80098c6 <USBD_GetDescriptor+0x2ca>
 8009622:	a201      	add	r2, pc, #4	@ (adr r2, 8009628 <USBD_GetDescriptor+0x2c>)
 8009624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009628:	08009699 	.word	0x08009699
 800962c:	080096b1 	.word	0x080096b1
 8009630:	080096f1 	.word	0x080096f1
 8009634:	080098c7 	.word	0x080098c7
 8009638:	080098c7 	.word	0x080098c7
 800963c:	08009867 	.word	0x08009867
 8009640:	08009893 	.word	0x08009893
 8009644:	080098c7 	.word	0x080098c7
 8009648:	080098c7 	.word	0x080098c7
 800964c:	080098c7 	.word	0x080098c7
 8009650:	080098c7 	.word	0x080098c7
 8009654:	080098c7 	.word	0x080098c7
 8009658:	080098c7 	.word	0x080098c7
 800965c:	080098c7 	.word	0x080098c7
 8009660:	08009665 	.word	0x08009665
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	7c12      	ldrb	r2, [r2, #16]
 800967c:	f107 0108 	add.w	r1, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009686:	e126      	b.n	80098d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fb27 	bl	8009cde <USBD_CtlError>
        err++;
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	3301      	adds	r3, #1
 8009694:	72fb      	strb	r3, [r7, #11]
      break;
 8009696:	e11e      	b.n	80098d6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7c12      	ldrb	r2, [r2, #16]
 80096a4:	f107 0108 	add.w	r1, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
      break;
 80096ae:	e112      	b.n	80098d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7c1b      	ldrb	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10d      	bne.n	80096d4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c0:	f107 0208 	add.w	r2, r7, #8
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
 80096c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3301      	adds	r3, #1
 80096ce:	2202      	movs	r2, #2
 80096d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096d2:	e100      	b.n	80098d6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096dc:	f107 0208 	add.w	r2, r7, #8
 80096e0:	4610      	mov	r0, r2
 80096e2:	4798      	blx	r3
 80096e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3301      	adds	r3, #1
 80096ea:	2202      	movs	r2, #2
 80096ec:	701a      	strb	r2, [r3, #0]
      break;
 80096ee:	e0f2      	b.n	80098d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	885b      	ldrh	r3, [r3, #2]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	f200 80ac 	bhi.w	8009854 <USBD_GetDescriptor+0x258>
 80096fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009704 <USBD_GetDescriptor+0x108>)
 80096fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009702:	bf00      	nop
 8009704:	0800971d 	.word	0x0800971d
 8009708:	08009751 	.word	0x08009751
 800970c:	08009785 	.word	0x08009785
 8009710:	080097b9 	.word	0x080097b9
 8009714:	080097ed 	.word	0x080097ed
 8009718:	08009821 	.word	0x08009821
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	7c12      	ldrb	r2, [r2, #16]
 8009734:	f107 0108 	add.w	r1, r7, #8
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973e:	e091      	b.n	8009864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 facb 	bl	8009cde <USBD_CtlError>
            err++;
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	3301      	adds	r3, #1
 800974c:	72fb      	strb	r3, [r7, #11]
          break;
 800974e:	e089      	b.n	8009864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009772:	e077      	b.n	8009864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fab1 	bl	8009cde <USBD_CtlError>
            err++;
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	3301      	adds	r3, #1
 8009780:	72fb      	strb	r3, [r7, #11]
          break;
 8009782:	e06f      	b.n	8009864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a6:	e05d      	b.n	8009864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa97 	bl	8009cde <USBD_CtlError>
            err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
          break;
 80097b6:	e055      	b.n	8009864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e043      	b.n	8009864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa7d 	bl	8009cde <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e03b      	b.n	8009864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980e:	e029      	b.n	8009864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa63 	bl	8009cde <USBD_CtlError>
            err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
          break;
 800981e:	e021      	b.n	8009864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009842:	e00f      	b.n	8009864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa49 	bl	8009cde <USBD_CtlError>
            err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
          break;
 8009852:	e007      	b.n	8009864 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa41 	bl	8009cde <USBD_CtlError>
          err++;
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	3301      	adds	r3, #1
 8009860:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009862:	bf00      	nop
      }
      break;
 8009864:	e037      	b.n	80098d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	7c1b      	ldrb	r3, [r3, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009876:	f107 0208 	add.w	r2, r7, #8
 800987a:	4610      	mov	r0, r2
 800987c:	4798      	blx	r3
 800987e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009880:	e029      	b.n	80098d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fa2a 	bl	8009cde <USBD_CtlError>
        err++;
 800988a:	7afb      	ldrb	r3, [r7, #11]
 800988c:	3301      	adds	r3, #1
 800988e:	72fb      	strb	r3, [r7, #11]
      break;
 8009890:	e021      	b.n	80098d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	7c1b      	ldrb	r3, [r3, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10d      	bne.n	80098b6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098a2:	f107 0208 	add.w	r2, r7, #8
 80098a6:	4610      	mov	r0, r2
 80098a8:	4798      	blx	r3
 80098aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	2207      	movs	r2, #7
 80098b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098b4:	e00f      	b.n	80098d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fa10 	bl	8009cde <USBD_CtlError>
        err++;
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	3301      	adds	r3, #1
 80098c2:	72fb      	strb	r3, [r7, #11]
      break;
 80098c4:	e007      	b.n	80098d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fa08 	bl	8009cde <USBD_CtlError>
      err++;
 80098ce:	7afb      	ldrb	r3, [r7, #11]
 80098d0:	3301      	adds	r3, #1
 80098d2:	72fb      	strb	r3, [r7, #11]
      break;
 80098d4:	bf00      	nop
  }

  if (err != 0U)
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d11e      	bne.n	800991a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	88db      	ldrh	r3, [r3, #6]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d016      	beq.n	8009912 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80098e4:	893b      	ldrh	r3, [r7, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00e      	beq.n	8009908 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	88da      	ldrh	r2, [r3, #6]
 80098ee:	893b      	ldrh	r3, [r7, #8]
 80098f0:	4293      	cmp	r3, r2
 80098f2:	bf28      	it	cs
 80098f4:	4613      	movcs	r3, r2
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098fa:	893b      	ldrh	r3, [r7, #8]
 80098fc:	461a      	mov	r2, r3
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fa69 	bl	8009dd8 <USBD_CtlSendData>
 8009906:	e009      	b.n	800991c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f9e7 	bl	8009cde <USBD_CtlError>
 8009910:	e004      	b.n	800991c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fa9d 	bl	8009e52 <USBD_CtlSendStatus>
 8009918:	e000      	b.n	800991c <USBD_GetDescriptor+0x320>
    return;
 800991a:	bf00      	nop
  }
}
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop

08009924 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	889b      	ldrh	r3, [r3, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d131      	bne.n	800999a <USBD_SetAddress+0x76>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	88db      	ldrh	r3, [r3, #6]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d12d      	bne.n	800999a <USBD_SetAddress+0x76>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	885b      	ldrh	r3, [r3, #2]
 8009942:	2b7f      	cmp	r3, #127	@ 0x7f
 8009944:	d829      	bhi.n	800999a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	885b      	ldrh	r3, [r3, #2]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009950:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b03      	cmp	r3, #3
 800995c:	d104      	bne.n	8009968 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f9bc 	bl	8009cde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009966:	e01d      	b.n	80099a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	7bfa      	ldrb	r2, [r7, #15]
 800996c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fea9 	bl	800a6cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa69 	bl	8009e52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d004      	beq.n	8009990 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2202      	movs	r2, #2
 800998a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998e:	e009      	b.n	80099a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009998:	e004      	b.n	80099a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f99e 	bl	8009cde <USBD_CtlError>
  }
}
 80099a2:	bf00      	nop
 80099a4:	bf00      	nop
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	885b      	ldrh	r3, [r3, #2]
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	4b4e      	ldr	r3, [pc, #312]	@ (8009afc <USBD_SetConfig+0x150>)
 80099c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099c4:	4b4d      	ldr	r3, [pc, #308]	@ (8009afc <USBD_SetConfig+0x150>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d905      	bls.n	80099d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f985 	bl	8009cde <USBD_CtlError>
    return USBD_FAIL;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e08c      	b.n	8009af2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d002      	beq.n	80099ea <USBD_SetConfig+0x3e>
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d029      	beq.n	8009a3c <USBD_SetConfig+0x90>
 80099e8:	e075      	b.n	8009ad6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099ea:	4b44      	ldr	r3, [pc, #272]	@ (8009afc <USBD_SetConfig+0x150>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d020      	beq.n	8009a34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80099f2:	4b42      	ldr	r3, [pc, #264]	@ (8009afc <USBD_SetConfig+0x150>)
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099fc:	4b3f      	ldr	r3, [pc, #252]	@ (8009afc <USBD_SetConfig+0x150>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7fe ffb9 	bl	800897a <USBD_SetClassConfig>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d008      	beq.n	8009a24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f962 	bl	8009cde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a22:	e065      	b.n	8009af0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fa14 	bl	8009e52 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2203      	movs	r2, #3
 8009a2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a32:	e05d      	b.n	8009af0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fa0c 	bl	8009e52 <USBD_CtlSendStatus>
      break;
 8009a3a:	e059      	b.n	8009af0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8009afc <USBD_SetConfig+0x150>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d112      	bne.n	8009a6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8009afc <USBD_SetConfig+0x150>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a56:	4b29      	ldr	r3, [pc, #164]	@ (8009afc <USBD_SetConfig+0x150>)
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7fe ffa8 	bl	80089b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f9f5 	bl	8009e52 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a68:	e042      	b.n	8009af0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a6a:	4b24      	ldr	r3, [pc, #144]	@ (8009afc <USBD_SetConfig+0x150>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d02a      	beq.n	8009ace <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7fe ff96 	bl	80089b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a86:	4b1d      	ldr	r3, [pc, #116]	@ (8009afc <USBD_SetConfig+0x150>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a90:	4b1a      	ldr	r3, [pc, #104]	@ (8009afc <USBD_SetConfig+0x150>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7fe ff6f 	bl	800897a <USBD_SetClassConfig>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00f      	beq.n	8009ac6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f918 	bl	8009cde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7fe ff7b 	bl	80089b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ac4:	e014      	b.n	8009af0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f9c3 	bl	8009e52 <USBD_CtlSendStatus>
      break;
 8009acc:	e010      	b.n	8009af0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f9bf 	bl	8009e52 <USBD_CtlSendStatus>
      break;
 8009ad4:	e00c      	b.n	8009af0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f900 	bl	8009cde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ade:	4b07      	ldr	r3, [pc, #28]	@ (8009afc <USBD_SetConfig+0x150>)
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7fe ff64 	bl	80089b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009aea:	2303      	movs	r3, #3
 8009aec:	73fb      	strb	r3, [r7, #15]
      break;
 8009aee:	bf00      	nop
  }

  return ret;
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	2400023c 	.word	0x2400023c

08009b00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	88db      	ldrh	r3, [r3, #6]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d004      	beq.n	8009b1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f8e2 	bl	8009cde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b1a:	e023      	b.n	8009b64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	dc02      	bgt.n	8009b2e <USBD_GetConfig+0x2e>
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	dc03      	bgt.n	8009b34 <USBD_GetConfig+0x34>
 8009b2c:	e015      	b.n	8009b5a <USBD_GetConfig+0x5a>
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d00b      	beq.n	8009b4a <USBD_GetConfig+0x4a>
 8009b32:	e012      	b.n	8009b5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f948 	bl	8009dd8 <USBD_CtlSendData>
        break;
 8009b48:	e00c      	b.n	8009b64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f940 	bl	8009dd8 <USBD_CtlSendData>
        break;
 8009b58:	e004      	b.n	8009b64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f8be 	bl	8009cde <USBD_CtlError>
        break;
 8009b62:	bf00      	nop
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d81e      	bhi.n	8009bc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	88db      	ldrh	r3, [r3, #6]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d004      	beq.n	8009b96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f8a5 	bl	8009cde <USBD_CtlError>
        break;
 8009b94:	e01a      	b.n	8009bcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d005      	beq.n	8009bb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f043 0202 	orr.w	r2, r3, #2
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f90c 	bl	8009dd8 <USBD_CtlSendData>
      break;
 8009bc0:	e004      	b.n	8009bcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f88a 	bl	8009cde <USBD_CtlError>
      break;
 8009bca:	bf00      	nop
  }
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	885b      	ldrh	r3, [r3, #2]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d107      	bne.n	8009bf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f92f 	bl	8009e52 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009bf4:	e013      	b.n	8009c1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	885b      	ldrh	r3, [r3, #2]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d10b      	bne.n	8009c16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	889b      	ldrh	r3, [r3, #4]
 8009c02:	0a1b      	lsrs	r3, r3, #8
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f91f 	bl	8009e52 <USBD_CtlSendStatus>
}
 8009c14:	e003      	b.n	8009c1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f860 	bl	8009cde <USBD_CtlError>
}
 8009c1e:	bf00      	nop
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d80b      	bhi.n	8009c56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	885b      	ldrh	r3, [r3, #2]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d10c      	bne.n	8009c60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8ff 	bl	8009e52 <USBD_CtlSendStatus>
      }
      break;
 8009c54:	e004      	b.n	8009c60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c56:	6839      	ldr	r1, [r7, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f840 	bl	8009cde <USBD_CtlError>
      break;
 8009c5e:	e000      	b.n	8009c62 <USBD_ClrFeature+0x3c>
      break;
 8009c60:	bf00      	nop
  }
}
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	781a      	ldrb	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3301      	adds	r3, #1
 8009c84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	781a      	ldrb	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3301      	adds	r3, #1
 8009c92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff fa16 	bl	80090c6 <SWAPBYTE>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	3301      	adds	r3, #1
 8009cac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff fa09 	bl	80090c6 <SWAPBYTE>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7ff f9fc 	bl	80090c6 <SWAPBYTE>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	80da      	strh	r2, [r3, #6]
}
 8009cd6:	bf00      	nop
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ce8:	2180      	movs	r1, #128	@ 0x80
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fc84 	bl	800a5f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fc80 	bl	800a5f8 <USBD_LL_StallEP>
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d042      	beq.n	8009d9c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009d1a:	6938      	ldr	r0, [r7, #16]
 8009d1c:	f000 f842 	bl	8009da4 <USBD_GetLen>
 8009d20:	4603      	mov	r3, r0
 8009d22:	3301      	adds	r3, #1
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d2a:	d808      	bhi.n	8009d3e <USBD_GetString+0x3e>
 8009d2c:	6938      	ldr	r0, [r7, #16]
 8009d2e:	f000 f839 	bl	8009da4 <USBD_GetLen>
 8009d32:	4603      	mov	r3, r0
 8009d34:	3301      	adds	r3, #1
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	e001      	b.n	8009d42 <USBD_GetString+0x42>
 8009d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	7812      	ldrb	r2, [r2, #0]
 8009d50:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
 8009d54:	3301      	adds	r3, #1
 8009d56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	2203      	movs	r2, #3
 8009d60:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	3301      	adds	r3, #1
 8009d66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d68:	e013      	b.n	8009d92 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	4413      	add	r3, r2
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	7812      	ldrb	r2, [r2, #0]
 8009d74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	613b      	str	r3, [r7, #16]
    idx++;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	4413      	add	r3, r2
 8009d88:	2200      	movs	r2, #0
 8009d8a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1e7      	bne.n	8009d6a <USBD_GetString+0x6a>
 8009d9a:	e000      	b.n	8009d9e <USBD_GetString+0x9e>
    return;
 8009d9c:	bf00      	nop
  }
}
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009db4:	e005      	b.n	8009dc2 <USBD_GetLen+0x1e>
  {
    len++;
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	3301      	adds	r3, #1
 8009dba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1f5      	bne.n	8009db6 <USBD_GetLen+0x12>
  }

  return len;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2202      	movs	r2, #2
 8009de8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 fc83 	bl	800a70a <USBD_LL_Transmit>

  return USBD_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	60f8      	str	r0, [r7, #12]
 8009e16:	60b9      	str	r1, [r7, #8]
 8009e18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	2100      	movs	r1, #0
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 fc72 	bl	800a70a <USBD_LL_Transmit>

  return USBD_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	2100      	movs	r1, #0
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 fc82 	bl	800a74c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2204      	movs	r2, #4
 8009e5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e62:	2300      	movs	r3, #0
 8009e64:	2200      	movs	r2, #0
 8009e66:	2100      	movs	r1, #0
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fc4e 	bl	800a70a <USBD_LL_Transmit>

  return USBD_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2205      	movs	r2, #5
 8009e84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e88:	2300      	movs	r3, #0
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fc5c 	bl	800a74c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	490f      	ldr	r1, [pc, #60]	@ (8009ee4 <MX_USB_DEVICE_Init+0x44>)
 8009ea8:	480f      	ldr	r0, [pc, #60]	@ (8009ee8 <MX_USB_DEVICE_Init+0x48>)
 8009eaa:	f7fe fce9 	bl	8008880 <USBD_Init>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009eb4:	f7f6 ff48 	bl	8000d48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8009eb8:	490c      	ldr	r1, [pc, #48]	@ (8009eec <MX_USB_DEVICE_Init+0x4c>)
 8009eba:	480b      	ldr	r0, [pc, #44]	@ (8009ee8 <MX_USB_DEVICE_Init+0x48>)
 8009ebc:	f7fe fd10 	bl	80088e0 <USBD_RegisterClass>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009ec6:	f7f6 ff3f 	bl	8000d48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009eca:	4807      	ldr	r0, [pc, #28]	@ (8009ee8 <MX_USB_DEVICE_Init+0x48>)
 8009ecc:	f7fe fd3e 	bl	800894c <USBD_Start>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009ed6:	f7f6 ff37 	bl	8000d48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009eda:	f7f8 ffa9 	bl	8002e30 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ede:	bf00      	nop
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	240000c4 	.word	0x240000c4
 8009ee8:	24000240 	.word	0x24000240
 8009eec:	24000010 	.word	0x24000010

08009ef0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2212      	movs	r2, #18
 8009f00:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009f02:	4b03      	ldr	r3, [pc, #12]	@ (8009f10 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	240000e4 	.word	0x240000e4

08009f14 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	6039      	str	r1, [r7, #0]
 8009f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2204      	movs	r2, #4
 8009f24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f26:	4b03      	ldr	r3, [pc, #12]	@ (8009f34 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	240000f8 	.word	0x240000f8

08009f38 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f44:	79fb      	ldrb	r3, [r7, #7]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d105      	bne.n	8009f56 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	4907      	ldr	r1, [pc, #28]	@ (8009f6c <USBD_HS_ProductStrDescriptor+0x34>)
 8009f4e:	4808      	ldr	r0, [pc, #32]	@ (8009f70 <USBD_HS_ProductStrDescriptor+0x38>)
 8009f50:	f7ff fed6 	bl	8009d00 <USBD_GetString>
 8009f54:	e004      	b.n	8009f60 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	4904      	ldr	r1, [pc, #16]	@ (8009f6c <USBD_HS_ProductStrDescriptor+0x34>)
 8009f5a:	4805      	ldr	r0, [pc, #20]	@ (8009f70 <USBD_HS_ProductStrDescriptor+0x38>)
 8009f5c:	f7ff fed0 	bl	8009d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f60:	4b02      	ldr	r3, [pc, #8]	@ (8009f6c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	2400051c 	.word	0x2400051c
 8009f70:	0800b278 	.word	0x0800b278

08009f74 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	6039      	str	r1, [r7, #0]
 8009f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	4904      	ldr	r1, [pc, #16]	@ (8009f94 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009f84:	4804      	ldr	r0, [pc, #16]	@ (8009f98 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009f86:	f7ff febb 	bl	8009d00 <USBD_GetString>
  return USBD_StrDesc;
 8009f8a:	4b02      	ldr	r3, [pc, #8]	@ (8009f94 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	2400051c 	.word	0x2400051c
 8009f98:	0800b290 	.word	0x0800b290

08009f9c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	6039      	str	r1, [r7, #0]
 8009fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	221a      	movs	r2, #26
 8009fac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009fae:	f000 f843 	bl	800a038 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009fb2:	4b02      	ldr	r3, [pc, #8]	@ (8009fbc <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	240000fc 	.word	0x240000fc

08009fc0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	6039      	str	r1, [r7, #0]
 8009fca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fcc:	79fb      	ldrb	r3, [r7, #7]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	4907      	ldr	r1, [pc, #28]	@ (8009ff4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009fd6:	4808      	ldr	r0, [pc, #32]	@ (8009ff8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009fd8:	f7ff fe92 	bl	8009d00 <USBD_GetString>
 8009fdc:	e004      	b.n	8009fe8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	4904      	ldr	r1, [pc, #16]	@ (8009ff4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009fe2:	4805      	ldr	r0, [pc, #20]	@ (8009ff8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009fe4:	f7ff fe8c 	bl	8009d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fe8:	4b02      	ldr	r3, [pc, #8]	@ (8009ff4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	2400051c 	.word	0x2400051c
 8009ff8:	0800b2a4 	.word	0x0800b2a4

08009ffc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	6039      	str	r1, [r7, #0]
 800a006:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d105      	bne.n	800a01a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	4907      	ldr	r1, [pc, #28]	@ (800a030 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a012:	4808      	ldr	r0, [pc, #32]	@ (800a034 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a014:	f7ff fe74 	bl	8009d00 <USBD_GetString>
 800a018:	e004      	b.n	800a024 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	4904      	ldr	r1, [pc, #16]	@ (800a030 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a01e:	4805      	ldr	r0, [pc, #20]	@ (800a034 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a020:	f7ff fe6e 	bl	8009d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a024:	4b02      	ldr	r3, [pc, #8]	@ (800a030 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	2400051c 	.word	0x2400051c
 800a034:	0800b2b0 	.word	0x0800b2b0

0800a038 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a03e:	4b0f      	ldr	r3, [pc, #60]	@ (800a07c <Get_SerialNum+0x44>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a044:	4b0e      	ldr	r3, [pc, #56]	@ (800a080 <Get_SerialNum+0x48>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a04a:	4b0e      	ldr	r3, [pc, #56]	@ (800a084 <Get_SerialNum+0x4c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4413      	add	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a05e:	2208      	movs	r2, #8
 800a060:	4909      	ldr	r1, [pc, #36]	@ (800a088 <Get_SerialNum+0x50>)
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 f814 	bl	800a090 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a068:	2204      	movs	r2, #4
 800a06a:	4908      	ldr	r1, [pc, #32]	@ (800a08c <Get_SerialNum+0x54>)
 800a06c:	68b8      	ldr	r0, [r7, #8]
 800a06e:	f000 f80f 	bl	800a090 <IntToUnicode>
  }
}
 800a072:	bf00      	nop
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	1ff1e800 	.word	0x1ff1e800
 800a080:	1ff1e804 	.word	0x1ff1e804
 800a084:	1ff1e808 	.word	0x1ff1e808
 800a088:	240000fe 	.word	0x240000fe
 800a08c:	2400010e 	.word	0x2400010e

0800a090 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	4613      	mov	r3, r2
 800a09c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	75fb      	strb	r3, [r7, #23]
 800a0a6:	e027      	b.n	800a0f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	0f1b      	lsrs	r3, r3, #28
 800a0ac:	2b09      	cmp	r3, #9
 800a0ae:	d80b      	bhi.n	800a0c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	0f1b      	lsrs	r3, r3, #28
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	440b      	add	r3, r1
 800a0c0:	3230      	adds	r2, #48	@ 0x30
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]
 800a0c6:	e00a      	b.n	800a0de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	0f1b      	lsrs	r3, r3, #28
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	440b      	add	r3, r1
 800a0d8:	3237      	adds	r2, #55	@ 0x37
 800a0da:	b2d2      	uxtb	r2, r2
 800a0dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	011b      	lsls	r3, r3, #4
 800a0e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	75fb      	strb	r3, [r7, #23]
 800a0f8:	7dfa      	ldrb	r2, [r7, #23]
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d3d3      	bcc.n	800a0a8 <IntToUnicode+0x18>
  }
}
 800a100:	bf00      	nop
 800a102:	bf00      	nop
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
	...

0800a110 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b0bc      	sub	sp, #240	@ 0xf0
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a118:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a11c:	2200      	movs	r2, #0
 800a11e:	601a      	str	r2, [r3, #0]
 800a120:	605a      	str	r2, [r3, #4]
 800a122:	609a      	str	r2, [r3, #8]
 800a124:	60da      	str	r2, [r3, #12]
 800a126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a128:	f107 0320 	add.w	r3, r7, #32
 800a12c:	22b8      	movs	r2, #184	@ 0xb8
 800a12e:	2100      	movs	r1, #0
 800a130:	4618      	mov	r0, r3
 800a132:	f000 fb91 	bl	800a858 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a58      	ldr	r2, [pc, #352]	@ (800a29c <HAL_PCD_MspInit+0x18c>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	f040 80a9 	bne.w	800a294 <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a142:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a146:	f04f 0300 	mov.w	r3, #0
 800a14a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a14e:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a152:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a156:	f107 0320 	add.w	r3, r7, #32
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7f9 fdde 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800a166:	f7f6 fdef 	bl	8000d48 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a16a:	f7f8 fe61 	bl	8002e30 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a16e:	4b4c      	ldr	r3, [pc, #304]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a174:	4a4a      	ldr	r2, [pc, #296]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a176:	f043 0304 	orr.w	r3, r3, #4
 800a17a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a17e:	4b48      	ldr	r3, [pc, #288]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a184:	f003 0304 	and.w	r3, r3, #4
 800a188:	61fb      	str	r3, [r7, #28]
 800a18a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a18c:	4b44      	ldr	r3, [pc, #272]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a18e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a192:	4a43      	ldr	r2, [pc, #268]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a194:	f043 0301 	orr.w	r3, r3, #1
 800a198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a19c:	4b40      	ldr	r3, [pc, #256]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a19e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	61bb      	str	r3, [r7, #24]
 800a1a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1aa:	4b3d      	ldr	r3, [pc, #244]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a1ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1b0:	4a3b      	ldr	r2, [pc, #236]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a1b2:	f043 0302 	orr.w	r3, r3, #2
 800a1b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a1ba:	4b39      	ldr	r3, [pc, #228]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a1bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1c0:	f003 0302 	and.w	r3, r3, #2
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800a1c8:	230d      	movs	r3, #13
 800a1ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a1da:	2302      	movs	r3, #2
 800a1dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a1e0:	230a      	movs	r3, #10
 800a1e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	482d      	ldr	r0, [pc, #180]	@ (800a2a4 <HAL_PCD_MspInit+0x194>)
 800a1ee:	f7f7 f9b5 	bl	800155c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800a1f2:	2328      	movs	r3, #40	@ 0x28
 800a1f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a204:	2302      	movs	r3, #2
 800a206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a20a:	230a      	movs	r3, #10
 800a20c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a210:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a214:	4619      	mov	r1, r3
 800a216:	4824      	ldr	r0, [pc, #144]	@ (800a2a8 <HAL_PCD_MspInit+0x198>)
 800a218:	f7f7 f9a0 	bl	800155c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800a21c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800a220:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a224:	2302      	movs	r3, #2
 800a226:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a230:	2302      	movs	r3, #2
 800a232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a236:	230a      	movs	r3, #10
 800a238:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a23c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a240:	4619      	mov	r1, r3
 800a242:	481a      	ldr	r0, [pc, #104]	@ (800a2ac <HAL_PCD_MspInit+0x19c>)
 800a244:	f7f7 f98a 	bl	800155c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a248:	4b15      	ldr	r3, [pc, #84]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a24a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a24e:	4a14      	ldr	r2, [pc, #80]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a250:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a254:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a258:	4b11      	ldr	r3, [pc, #68]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a25a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a25e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a262:	613b      	str	r3, [r7, #16]
 800a264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800a266:	4b0e      	ldr	r3, [pc, #56]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a26c:	4a0c      	ldr	r2, [pc, #48]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a26e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a272:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a276:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a0 <HAL_PCD_MspInit+0x190>)
 800a278:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a27c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	204d      	movs	r0, #77	@ 0x4d
 800a28a:	f7f7 f8ba 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a28e:	204d      	movs	r0, #77	@ 0x4d
 800a290:	f7f7 f8d1 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a294:	bf00      	nop
 800a296:	37f0      	adds	r7, #240	@ 0xf0
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	40040000 	.word	0x40040000
 800a2a0:	58024400 	.word	0x58024400
 800a2a4:	58020800 	.word	0x58020800
 800a2a8:	58020000 	.word	0x58020000
 800a2ac:	58020400 	.word	0x58020400

0800a2b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fe fb8d 	bl	80089e6 <USBD_LL_SetupStage>
}
 800a2cc:	bf00      	nop
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a2e6:	78fa      	ldrb	r2, [r7, #3]
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	00db      	lsls	r3, r3, #3
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	440b      	add	r3, r1
 800a2f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	78fb      	ldrb	r3, [r7, #3]
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	f7fe fbc7 	bl	8008a90 <USBD_LL_DataOutStage>
}
 800a302:	bf00      	nop
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b082      	sub	sp, #8
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	460b      	mov	r3, r1
 800a314:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a31c:	78fa      	ldrb	r2, [r7, #3]
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	4613      	mov	r3, r2
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	440b      	add	r3, r1
 800a32a:	3320      	adds	r3, #32
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	78fb      	ldrb	r3, [r7, #3]
 800a330:	4619      	mov	r1, r3
 800a332:	f7fe fc60 	bl	8008bf6 <USBD_LL_DataInStage>
}
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b082      	sub	sp, #8
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fe fd9a 	bl	8008e86 <USBD_LL_SOF>
}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a362:	2301      	movs	r3, #1
 800a364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	79db      	ldrb	r3, [r3, #7]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a36e:	2300      	movs	r3, #0
 800a370:	73fb      	strb	r3, [r7, #15]
 800a372:	e008      	b.n	800a386 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	79db      	ldrb	r3, [r3, #7]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d102      	bne.n	800a382 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a37c:	2301      	movs	r3, #1
 800a37e:	73fb      	strb	r3, [r7, #15]
 800a380:	e001      	b.n	800a386 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a382:	f7f6 fce1 	bl	8000d48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a38c:	7bfa      	ldrb	r2, [r7, #15]
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe fd34 	bl	8008dfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fe fcdc 	bl	8008d5a <USBD_LL_Reset>
}
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe fd2f 	bl	8008e1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	6812      	ldr	r2, [r2, #0]
 800a3ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	7adb      	ldrb	r3, [r3, #11]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d005      	beq.n	800a3ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3e0:	4b04      	ldr	r3, [pc, #16]	@ (800a3f4 <HAL_PCD_SuspendCallback+0x48>)
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	4a03      	ldr	r2, [pc, #12]	@ (800a3f4 <HAL_PCD_SuspendCallback+0x48>)
 800a3e6:	f043 0306 	orr.w	r3, r3, #6
 800a3ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	e000ed00 	.word	0xe000ed00

0800a3f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe fd25 	bl	8008e56 <USBD_LL_Resume>
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	460b      	mov	r3, r1
 800a41e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	4611      	mov	r1, r2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe fd7d 	bl	8008f2a <USBD_LL_IsoOUTIncomplete>
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a44a:	78fa      	ldrb	r2, [r7, #3]
 800a44c:	4611      	mov	r1, r2
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe fd39 	bl	8008ec6 <USBD_LL_IsoINIncomplete>
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe fd8f 	bl	8008f8e <USBD_LL_DevConnected>
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fd8c 	bl	8008fa4 <USBD_LL_DevDisconnected>
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d140      	bne.n	800a526 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a4a4:	4a22      	ldr	r2, [pc, #136]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a20      	ldr	r2, [pc, #128]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a4b4:	4b1e      	ldr	r3, [pc, #120]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4b6:	4a1f      	ldr	r2, [pc, #124]	@ (800a534 <USBD_LL_Init+0xa0>)
 800a4b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800a4ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4bc:	2209      	movs	r2, #9
 800a4be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800a4c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a4c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800a4cc:	4b18      	ldr	r3, [pc, #96]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a4d2:	4b17      	ldr	r3, [pc, #92]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a4d8:	4b15      	ldr	r3, [pc, #84]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a4de:	4b14      	ldr	r3, [pc, #80]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a4e4:	4b12      	ldr	r3, [pc, #72]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a4ea:	4b11      	ldr	r3, [pc, #68]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a4f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a4f6:	480e      	ldr	r0, [pc, #56]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a4f8:	f7f7 f9d8 	bl	80018ac <HAL_PCD_Init>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a502:	f7f6 fc21 	bl	8000d48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a506:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a50a:	4809      	ldr	r0, [pc, #36]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a50c:	f7f8 fc15 	bl	8002d3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a510:	2280      	movs	r2, #128	@ 0x80
 800a512:	2100      	movs	r1, #0
 800a514:	4806      	ldr	r0, [pc, #24]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a516:	f7f8 fbc9 	bl	8002cac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a51a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800a51e:	2101      	movs	r1, #1
 800a520:	4803      	ldr	r0, [pc, #12]	@ (800a530 <USBD_LL_Init+0x9c>)
 800a522:	f7f8 fbc3 	bl	8002cac <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	2400071c 	.word	0x2400071c
 800a534:	40040000 	.word	0x40040000

0800a538 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f7 fab8 	bl	8001ac4 <HAL_PCD_Start>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f930 	bl	800a7c0 <USBD_Get_USB_Status>
 800a560:	4603      	mov	r3, r0
 800a562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a564:	7bbb      	ldrb	r3, [r7, #14]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	4608      	mov	r0, r1
 800a578:	4611      	mov	r1, r2
 800a57a:	461a      	mov	r2, r3
 800a57c:	4603      	mov	r3, r0
 800a57e:	70fb      	strb	r3, [r7, #3]
 800a580:	460b      	mov	r3, r1
 800a582:	70bb      	strb	r3, [r7, #2]
 800a584:	4613      	mov	r3, r2
 800a586:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a596:	78bb      	ldrb	r3, [r7, #2]
 800a598:	883a      	ldrh	r2, [r7, #0]
 800a59a:	78f9      	ldrb	r1, [r7, #3]
 800a59c:	f7f7 ffb9 	bl	8002512 <HAL_PCD_EP_Open>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 f90a 	bl	800a7c0 <USBD_Get_USB_Status>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5d4:	78fa      	ldrb	r2, [r7, #3]
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7f8 f804 	bl	80025e6 <HAL_PCD_EP_Close>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 f8eb 	bl	800a7c0 <USBD_Get_USB_Status>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a612:	78fa      	ldrb	r2, [r7, #3]
 800a614:	4611      	mov	r1, r2
 800a616:	4618      	mov	r0, r3
 800a618:	f7f8 f8a4 	bl	8002764 <HAL_PCD_EP_SetStall>
 800a61c:	4603      	mov	r3, r0
 800a61e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	4618      	mov	r0, r3
 800a624:	f000 f8cc 	bl	800a7c0 <USBD_Get_USB_Status>
 800a628:	4603      	mov	r3, r0
 800a62a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a650:	78fa      	ldrb	r2, [r7, #3]
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f7f8 f8e8 	bl	800282a <HAL_PCD_EP_ClrStall>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 f8ad 	bl	800a7c0 <USBD_Get_USB_Status>
 800a666:	4603      	mov	r3, r0
 800a668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a686:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	da0b      	bge.n	800a6a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a696:	68f9      	ldr	r1, [r7, #12]
 800a698:	4613      	mov	r3, r2
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	4413      	add	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	3316      	adds	r3, #22
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	e00b      	b.n	800a6c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6a8:	78fb      	ldrb	r3, [r7, #3]
 800a6aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6ae:	68f9      	ldr	r1, [r7, #12]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	4413      	add	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	440b      	add	r3, r1
 800a6ba:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a6be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6e6:	78fa      	ldrb	r2, [r7, #3]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f7 feed 	bl	80024ca <HAL_PCD_SetAddress>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 f862 	bl	800a7c0 <USBD_Get_USB_Status>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a700:	7bbb      	ldrb	r3, [r7, #14]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b086      	sub	sp, #24
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	460b      	mov	r3, r1
 800a718:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a728:	7af9      	ldrb	r1, [r7, #11]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	f7f7 ffdf 	bl	80026f0 <HAL_PCD_EP_Transmit>
 800a732:	4603      	mov	r3, r0
 800a734:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a736:	7dfb      	ldrb	r3, [r7, #23]
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 f841 	bl	800a7c0 <USBD_Get_USB_Status>
 800a73e:	4603      	mov	r3, r0
 800a740:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a742:	7dbb      	ldrb	r3, [r7, #22]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	607a      	str	r2, [r7, #4]
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	460b      	mov	r3, r1
 800a75a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a76a:	7af9      	ldrb	r1, [r7, #11]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	f7f7 ff83 	bl	800267a <HAL_PCD_EP_Receive>
 800a774:	4603      	mov	r3, r0
 800a776:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 f820 	bl	800a7c0 <USBD_Get_USB_Status>
 800a780:	4603      	mov	r3, r0
 800a782:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a784:	7dbb      	ldrb	r3, [r7, #22]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a798:	4b03      	ldr	r3, [pc, #12]	@ (800a7a8 <USBD_static_malloc+0x18>)
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	24000c00 	.word	0x24000c00

0800a7ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7ce:	79fb      	ldrb	r3, [r7, #7]
 800a7d0:	2b03      	cmp	r3, #3
 800a7d2:	d817      	bhi.n	800a804 <USBD_Get_USB_Status+0x44>
 800a7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7dc <USBD_Get_USB_Status+0x1c>)
 800a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7da:	bf00      	nop
 800a7dc:	0800a7ed 	.word	0x0800a7ed
 800a7e0:	0800a7f3 	.word	0x0800a7f3
 800a7e4:	0800a7f9 	.word	0x0800a7f9
 800a7e8:	0800a7ff 	.word	0x0800a7ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f0:	e00b      	b.n	800a80a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f6:	e008      	b.n	800a80a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fc:	e005      	b.n	800a80a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7fe:	2303      	movs	r3, #3
 800a800:	73fb      	strb	r3, [r7, #15]
    break;
 800a802:	e002      	b.n	800a80a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a804:	2303      	movs	r3, #3
 800a806:	73fb      	strb	r3, [r7, #15]
    break;
 800a808:	bf00      	nop
  }
  return usb_status;
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <siprintf>:
 800a818:	b40e      	push	{r1, r2, r3}
 800a81a:	b500      	push	{lr}
 800a81c:	b09c      	sub	sp, #112	@ 0x70
 800a81e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a820:	9002      	str	r0, [sp, #8]
 800a822:	9006      	str	r0, [sp, #24]
 800a824:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a828:	4809      	ldr	r0, [pc, #36]	@ (800a850 <siprintf+0x38>)
 800a82a:	9107      	str	r1, [sp, #28]
 800a82c:	9104      	str	r1, [sp, #16]
 800a82e:	4909      	ldr	r1, [pc, #36]	@ (800a854 <siprintf+0x3c>)
 800a830:	f853 2b04 	ldr.w	r2, [r3], #4
 800a834:	9105      	str	r1, [sp, #20]
 800a836:	6800      	ldr	r0, [r0, #0]
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	a902      	add	r1, sp, #8
 800a83c:	f000 f994 	bl	800ab68 <_svfiprintf_r>
 800a840:	9b02      	ldr	r3, [sp, #8]
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]
 800a846:	b01c      	add	sp, #112	@ 0x70
 800a848:	f85d eb04 	ldr.w	lr, [sp], #4
 800a84c:	b003      	add	sp, #12
 800a84e:	4770      	bx	lr
 800a850:	24000118 	.word	0x24000118
 800a854:	ffff0208 	.word	0xffff0208

0800a858 <memset>:
 800a858:	4402      	add	r2, r0
 800a85a:	4603      	mov	r3, r0
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d100      	bne.n	800a862 <memset+0xa>
 800a860:	4770      	bx	lr
 800a862:	f803 1b01 	strb.w	r1, [r3], #1
 800a866:	e7f9      	b.n	800a85c <memset+0x4>

0800a868 <__errno>:
 800a868:	4b01      	ldr	r3, [pc, #4]	@ (800a870 <__errno+0x8>)
 800a86a:	6818      	ldr	r0, [r3, #0]
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	24000118 	.word	0x24000118

0800a874 <__libc_init_array>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	4d0d      	ldr	r5, [pc, #52]	@ (800a8ac <__libc_init_array+0x38>)
 800a878:	4c0d      	ldr	r4, [pc, #52]	@ (800a8b0 <__libc_init_array+0x3c>)
 800a87a:	1b64      	subs	r4, r4, r5
 800a87c:	10a4      	asrs	r4, r4, #2
 800a87e:	2600      	movs	r6, #0
 800a880:	42a6      	cmp	r6, r4
 800a882:	d109      	bne.n	800a898 <__libc_init_array+0x24>
 800a884:	4d0b      	ldr	r5, [pc, #44]	@ (800a8b4 <__libc_init_array+0x40>)
 800a886:	4c0c      	ldr	r4, [pc, #48]	@ (800a8b8 <__libc_init_array+0x44>)
 800a888:	f000 fc66 	bl	800b158 <_init>
 800a88c:	1b64      	subs	r4, r4, r5
 800a88e:	10a4      	asrs	r4, r4, #2
 800a890:	2600      	movs	r6, #0
 800a892:	42a6      	cmp	r6, r4
 800a894:	d105      	bne.n	800a8a2 <__libc_init_array+0x2e>
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	f855 3b04 	ldr.w	r3, [r5], #4
 800a89c:	4798      	blx	r3
 800a89e:	3601      	adds	r6, #1
 800a8a0:	e7ee      	b.n	800a880 <__libc_init_array+0xc>
 800a8a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a6:	4798      	blx	r3
 800a8a8:	3601      	adds	r6, #1
 800a8aa:	e7f2      	b.n	800a892 <__libc_init_array+0x1e>
 800a8ac:	0800b334 	.word	0x0800b334
 800a8b0:	0800b334 	.word	0x0800b334
 800a8b4:	0800b334 	.word	0x0800b334
 800a8b8:	0800b338 	.word	0x0800b338

0800a8bc <__retarget_lock_acquire_recursive>:
 800a8bc:	4770      	bx	lr

0800a8be <__retarget_lock_release_recursive>:
 800a8be:	4770      	bx	lr

0800a8c0 <_free_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	2900      	cmp	r1, #0
 800a8c6:	d041      	beq.n	800a94c <_free_r+0x8c>
 800a8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8cc:	1f0c      	subs	r4, r1, #4
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bfb8      	it	lt
 800a8d2:	18e4      	addlt	r4, r4, r3
 800a8d4:	f000 f8e0 	bl	800aa98 <__malloc_lock>
 800a8d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a950 <_free_r+0x90>)
 800a8da:	6813      	ldr	r3, [r2, #0]
 800a8dc:	b933      	cbnz	r3, 800a8ec <_free_r+0x2c>
 800a8de:	6063      	str	r3, [r4, #4]
 800a8e0:	6014      	str	r4, [r2, #0]
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8e8:	f000 b8dc 	b.w	800aaa4 <__malloc_unlock>
 800a8ec:	42a3      	cmp	r3, r4
 800a8ee:	d908      	bls.n	800a902 <_free_r+0x42>
 800a8f0:	6820      	ldr	r0, [r4, #0]
 800a8f2:	1821      	adds	r1, r4, r0
 800a8f4:	428b      	cmp	r3, r1
 800a8f6:	bf01      	itttt	eq
 800a8f8:	6819      	ldreq	r1, [r3, #0]
 800a8fa:	685b      	ldreq	r3, [r3, #4]
 800a8fc:	1809      	addeq	r1, r1, r0
 800a8fe:	6021      	streq	r1, [r4, #0]
 800a900:	e7ed      	b.n	800a8de <_free_r+0x1e>
 800a902:	461a      	mov	r2, r3
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	b10b      	cbz	r3, 800a90c <_free_r+0x4c>
 800a908:	42a3      	cmp	r3, r4
 800a90a:	d9fa      	bls.n	800a902 <_free_r+0x42>
 800a90c:	6811      	ldr	r1, [r2, #0]
 800a90e:	1850      	adds	r0, r2, r1
 800a910:	42a0      	cmp	r0, r4
 800a912:	d10b      	bne.n	800a92c <_free_r+0x6c>
 800a914:	6820      	ldr	r0, [r4, #0]
 800a916:	4401      	add	r1, r0
 800a918:	1850      	adds	r0, r2, r1
 800a91a:	4283      	cmp	r3, r0
 800a91c:	6011      	str	r1, [r2, #0]
 800a91e:	d1e0      	bne.n	800a8e2 <_free_r+0x22>
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	6053      	str	r3, [r2, #4]
 800a926:	4408      	add	r0, r1
 800a928:	6010      	str	r0, [r2, #0]
 800a92a:	e7da      	b.n	800a8e2 <_free_r+0x22>
 800a92c:	d902      	bls.n	800a934 <_free_r+0x74>
 800a92e:	230c      	movs	r3, #12
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	e7d6      	b.n	800a8e2 <_free_r+0x22>
 800a934:	6820      	ldr	r0, [r4, #0]
 800a936:	1821      	adds	r1, r4, r0
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf04      	itt	eq
 800a93c:	6819      	ldreq	r1, [r3, #0]
 800a93e:	685b      	ldreq	r3, [r3, #4]
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	bf04      	itt	eq
 800a944:	1809      	addeq	r1, r1, r0
 800a946:	6021      	streq	r1, [r4, #0]
 800a948:	6054      	str	r4, [r2, #4]
 800a94a:	e7ca      	b.n	800a8e2 <_free_r+0x22>
 800a94c:	bd38      	pop	{r3, r4, r5, pc}
 800a94e:	bf00      	nop
 800a950:	24000d58 	.word	0x24000d58

0800a954 <sbrk_aligned>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	4e0f      	ldr	r6, [pc, #60]	@ (800a994 <sbrk_aligned+0x40>)
 800a958:	460c      	mov	r4, r1
 800a95a:	6831      	ldr	r1, [r6, #0]
 800a95c:	4605      	mov	r5, r0
 800a95e:	b911      	cbnz	r1, 800a966 <sbrk_aligned+0x12>
 800a960:	f000 fba6 	bl	800b0b0 <_sbrk_r>
 800a964:	6030      	str	r0, [r6, #0]
 800a966:	4621      	mov	r1, r4
 800a968:	4628      	mov	r0, r5
 800a96a:	f000 fba1 	bl	800b0b0 <_sbrk_r>
 800a96e:	1c43      	adds	r3, r0, #1
 800a970:	d103      	bne.n	800a97a <sbrk_aligned+0x26>
 800a972:	f04f 34ff 	mov.w	r4, #4294967295
 800a976:	4620      	mov	r0, r4
 800a978:	bd70      	pop	{r4, r5, r6, pc}
 800a97a:	1cc4      	adds	r4, r0, #3
 800a97c:	f024 0403 	bic.w	r4, r4, #3
 800a980:	42a0      	cmp	r0, r4
 800a982:	d0f8      	beq.n	800a976 <sbrk_aligned+0x22>
 800a984:	1a21      	subs	r1, r4, r0
 800a986:	4628      	mov	r0, r5
 800a988:	f000 fb92 	bl	800b0b0 <_sbrk_r>
 800a98c:	3001      	adds	r0, #1
 800a98e:	d1f2      	bne.n	800a976 <sbrk_aligned+0x22>
 800a990:	e7ef      	b.n	800a972 <sbrk_aligned+0x1e>
 800a992:	bf00      	nop
 800a994:	24000d54 	.word	0x24000d54

0800a998 <_malloc_r>:
 800a998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a99c:	1ccd      	adds	r5, r1, #3
 800a99e:	f025 0503 	bic.w	r5, r5, #3
 800a9a2:	3508      	adds	r5, #8
 800a9a4:	2d0c      	cmp	r5, #12
 800a9a6:	bf38      	it	cc
 800a9a8:	250c      	movcc	r5, #12
 800a9aa:	2d00      	cmp	r5, #0
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	db01      	blt.n	800a9b4 <_malloc_r+0x1c>
 800a9b0:	42a9      	cmp	r1, r5
 800a9b2:	d904      	bls.n	800a9be <_malloc_r+0x26>
 800a9b4:	230c      	movs	r3, #12
 800a9b6:	6033      	str	r3, [r6, #0]
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa94 <_malloc_r+0xfc>
 800a9c2:	f000 f869 	bl	800aa98 <__malloc_lock>
 800a9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ca:	461c      	mov	r4, r3
 800a9cc:	bb44      	cbnz	r4, 800aa20 <_malloc_r+0x88>
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f7ff ffbf 	bl	800a954 <sbrk_aligned>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	4604      	mov	r4, r0
 800a9da:	d158      	bne.n	800aa8e <_malloc_r+0xf6>
 800a9dc:	f8d8 4000 	ldr.w	r4, [r8]
 800a9e0:	4627      	mov	r7, r4
 800a9e2:	2f00      	cmp	r7, #0
 800a9e4:	d143      	bne.n	800aa6e <_malloc_r+0xd6>
 800a9e6:	2c00      	cmp	r4, #0
 800a9e8:	d04b      	beq.n	800aa82 <_malloc_r+0xea>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	4639      	mov	r1, r7
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	eb04 0903 	add.w	r9, r4, r3
 800a9f4:	f000 fb5c 	bl	800b0b0 <_sbrk_r>
 800a9f8:	4581      	cmp	r9, r0
 800a9fa:	d142      	bne.n	800aa82 <_malloc_r+0xea>
 800a9fc:	6821      	ldr	r1, [r4, #0]
 800a9fe:	1a6d      	subs	r5, r5, r1
 800aa00:	4629      	mov	r1, r5
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ffa6 	bl	800a954 <sbrk_aligned>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d03a      	beq.n	800aa82 <_malloc_r+0xea>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	442b      	add	r3, r5
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	f8d8 3000 	ldr.w	r3, [r8]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	bb62      	cbnz	r2, 800aa74 <_malloc_r+0xdc>
 800aa1a:	f8c8 7000 	str.w	r7, [r8]
 800aa1e:	e00f      	b.n	800aa40 <_malloc_r+0xa8>
 800aa20:	6822      	ldr	r2, [r4, #0]
 800aa22:	1b52      	subs	r2, r2, r5
 800aa24:	d420      	bmi.n	800aa68 <_malloc_r+0xd0>
 800aa26:	2a0b      	cmp	r2, #11
 800aa28:	d917      	bls.n	800aa5a <_malloc_r+0xc2>
 800aa2a:	1961      	adds	r1, r4, r5
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	6025      	str	r5, [r4, #0]
 800aa30:	bf18      	it	ne
 800aa32:	6059      	strne	r1, [r3, #4]
 800aa34:	6863      	ldr	r3, [r4, #4]
 800aa36:	bf08      	it	eq
 800aa38:	f8c8 1000 	streq.w	r1, [r8]
 800aa3c:	5162      	str	r2, [r4, r5]
 800aa3e:	604b      	str	r3, [r1, #4]
 800aa40:	4630      	mov	r0, r6
 800aa42:	f000 f82f 	bl	800aaa4 <__malloc_unlock>
 800aa46:	f104 000b 	add.w	r0, r4, #11
 800aa4a:	1d23      	adds	r3, r4, #4
 800aa4c:	f020 0007 	bic.w	r0, r0, #7
 800aa50:	1ac2      	subs	r2, r0, r3
 800aa52:	bf1c      	itt	ne
 800aa54:	1a1b      	subne	r3, r3, r0
 800aa56:	50a3      	strne	r3, [r4, r2]
 800aa58:	e7af      	b.n	800a9ba <_malloc_r+0x22>
 800aa5a:	6862      	ldr	r2, [r4, #4]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	bf0c      	ite	eq
 800aa60:	f8c8 2000 	streq.w	r2, [r8]
 800aa64:	605a      	strne	r2, [r3, #4]
 800aa66:	e7eb      	b.n	800aa40 <_malloc_r+0xa8>
 800aa68:	4623      	mov	r3, r4
 800aa6a:	6864      	ldr	r4, [r4, #4]
 800aa6c:	e7ae      	b.n	800a9cc <_malloc_r+0x34>
 800aa6e:	463c      	mov	r4, r7
 800aa70:	687f      	ldr	r7, [r7, #4]
 800aa72:	e7b6      	b.n	800a9e2 <_malloc_r+0x4a>
 800aa74:	461a      	mov	r2, r3
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	42a3      	cmp	r3, r4
 800aa7a:	d1fb      	bne.n	800aa74 <_malloc_r+0xdc>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	6053      	str	r3, [r2, #4]
 800aa80:	e7de      	b.n	800aa40 <_malloc_r+0xa8>
 800aa82:	230c      	movs	r3, #12
 800aa84:	6033      	str	r3, [r6, #0]
 800aa86:	4630      	mov	r0, r6
 800aa88:	f000 f80c 	bl	800aaa4 <__malloc_unlock>
 800aa8c:	e794      	b.n	800a9b8 <_malloc_r+0x20>
 800aa8e:	6005      	str	r5, [r0, #0]
 800aa90:	e7d6      	b.n	800aa40 <_malloc_r+0xa8>
 800aa92:	bf00      	nop
 800aa94:	24000d58 	.word	0x24000d58

0800aa98 <__malloc_lock>:
 800aa98:	4801      	ldr	r0, [pc, #4]	@ (800aaa0 <__malloc_lock+0x8>)
 800aa9a:	f7ff bf0f 	b.w	800a8bc <__retarget_lock_acquire_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	24000d50 	.word	0x24000d50

0800aaa4 <__malloc_unlock>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	@ (800aaac <__malloc_unlock+0x8>)
 800aaa6:	f7ff bf0a 	b.w	800a8be <__retarget_lock_release_recursive>
 800aaaa:	bf00      	nop
 800aaac:	24000d50 	.word	0x24000d50

0800aab0 <__ssputs_r>:
 800aab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab4:	688e      	ldr	r6, [r1, #8]
 800aab6:	461f      	mov	r7, r3
 800aab8:	42be      	cmp	r6, r7
 800aaba:	680b      	ldr	r3, [r1, #0]
 800aabc:	4682      	mov	sl, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	4690      	mov	r8, r2
 800aac2:	d82d      	bhi.n	800ab20 <__ssputs_r+0x70>
 800aac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aac8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aacc:	d026      	beq.n	800ab1c <__ssputs_r+0x6c>
 800aace:	6965      	ldr	r5, [r4, #20]
 800aad0:	6909      	ldr	r1, [r1, #16]
 800aad2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aad6:	eba3 0901 	sub.w	r9, r3, r1
 800aada:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aade:	1c7b      	adds	r3, r7, #1
 800aae0:	444b      	add	r3, r9
 800aae2:	106d      	asrs	r5, r5, #1
 800aae4:	429d      	cmp	r5, r3
 800aae6:	bf38      	it	cc
 800aae8:	461d      	movcc	r5, r3
 800aaea:	0553      	lsls	r3, r2, #21
 800aaec:	d527      	bpl.n	800ab3e <__ssputs_r+0x8e>
 800aaee:	4629      	mov	r1, r5
 800aaf0:	f7ff ff52 	bl	800a998 <_malloc_r>
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	b360      	cbz	r0, 800ab52 <__ssputs_r+0xa2>
 800aaf8:	6921      	ldr	r1, [r4, #16]
 800aafa:	464a      	mov	r2, r9
 800aafc:	f000 fae8 	bl	800b0d0 <memcpy>
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab0a:	81a3      	strh	r3, [r4, #12]
 800ab0c:	6126      	str	r6, [r4, #16]
 800ab0e:	6165      	str	r5, [r4, #20]
 800ab10:	444e      	add	r6, r9
 800ab12:	eba5 0509 	sub.w	r5, r5, r9
 800ab16:	6026      	str	r6, [r4, #0]
 800ab18:	60a5      	str	r5, [r4, #8]
 800ab1a:	463e      	mov	r6, r7
 800ab1c:	42be      	cmp	r6, r7
 800ab1e:	d900      	bls.n	800ab22 <__ssputs_r+0x72>
 800ab20:	463e      	mov	r6, r7
 800ab22:	6820      	ldr	r0, [r4, #0]
 800ab24:	4632      	mov	r2, r6
 800ab26:	4641      	mov	r1, r8
 800ab28:	f000 faa8 	bl	800b07c <memmove>
 800ab2c:	68a3      	ldr	r3, [r4, #8]
 800ab2e:	1b9b      	subs	r3, r3, r6
 800ab30:	60a3      	str	r3, [r4, #8]
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	4433      	add	r3, r6
 800ab36:	6023      	str	r3, [r4, #0]
 800ab38:	2000      	movs	r0, #0
 800ab3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3e:	462a      	mov	r2, r5
 800ab40:	f000 fad4 	bl	800b0ec <_realloc_r>
 800ab44:	4606      	mov	r6, r0
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d1e0      	bne.n	800ab0c <__ssputs_r+0x5c>
 800ab4a:	6921      	ldr	r1, [r4, #16]
 800ab4c:	4650      	mov	r0, sl
 800ab4e:	f7ff feb7 	bl	800a8c0 <_free_r>
 800ab52:	230c      	movs	r3, #12
 800ab54:	f8ca 3000 	str.w	r3, [sl]
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab5e:	81a3      	strh	r3, [r4, #12]
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	e7e9      	b.n	800ab3a <__ssputs_r+0x8a>
	...

0800ab68 <_svfiprintf_r>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	4698      	mov	r8, r3
 800ab6e:	898b      	ldrh	r3, [r1, #12]
 800ab70:	061b      	lsls	r3, r3, #24
 800ab72:	b09d      	sub	sp, #116	@ 0x74
 800ab74:	4607      	mov	r7, r0
 800ab76:	460d      	mov	r5, r1
 800ab78:	4614      	mov	r4, r2
 800ab7a:	d510      	bpl.n	800ab9e <_svfiprintf_r+0x36>
 800ab7c:	690b      	ldr	r3, [r1, #16]
 800ab7e:	b973      	cbnz	r3, 800ab9e <_svfiprintf_r+0x36>
 800ab80:	2140      	movs	r1, #64	@ 0x40
 800ab82:	f7ff ff09 	bl	800a998 <_malloc_r>
 800ab86:	6028      	str	r0, [r5, #0]
 800ab88:	6128      	str	r0, [r5, #16]
 800ab8a:	b930      	cbnz	r0, 800ab9a <_svfiprintf_r+0x32>
 800ab8c:	230c      	movs	r3, #12
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295
 800ab94:	b01d      	add	sp, #116	@ 0x74
 800ab96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9a:	2340      	movs	r3, #64	@ 0x40
 800ab9c:	616b      	str	r3, [r5, #20]
 800ab9e:	2300      	movs	r3, #0
 800aba0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aba2:	2320      	movs	r3, #32
 800aba4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aba8:	f8cd 800c 	str.w	r8, [sp, #12]
 800abac:	2330      	movs	r3, #48	@ 0x30
 800abae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad4c <_svfiprintf_r+0x1e4>
 800abb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abb6:	f04f 0901 	mov.w	r9, #1
 800abba:	4623      	mov	r3, r4
 800abbc:	469a      	mov	sl, r3
 800abbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abc2:	b10a      	cbz	r2, 800abc8 <_svfiprintf_r+0x60>
 800abc4:	2a25      	cmp	r2, #37	@ 0x25
 800abc6:	d1f9      	bne.n	800abbc <_svfiprintf_r+0x54>
 800abc8:	ebba 0b04 	subs.w	fp, sl, r4
 800abcc:	d00b      	beq.n	800abe6 <_svfiprintf_r+0x7e>
 800abce:	465b      	mov	r3, fp
 800abd0:	4622      	mov	r2, r4
 800abd2:	4629      	mov	r1, r5
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff ff6b 	bl	800aab0 <__ssputs_r>
 800abda:	3001      	adds	r0, #1
 800abdc:	f000 80a7 	beq.w	800ad2e <_svfiprintf_r+0x1c6>
 800abe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abe2:	445a      	add	r2, fp
 800abe4:	9209      	str	r2, [sp, #36]	@ 0x24
 800abe6:	f89a 3000 	ldrb.w	r3, [sl]
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 809f 	beq.w	800ad2e <_svfiprintf_r+0x1c6>
 800abf0:	2300      	movs	r3, #0
 800abf2:	f04f 32ff 	mov.w	r2, #4294967295
 800abf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abfa:	f10a 0a01 	add.w	sl, sl, #1
 800abfe:	9304      	str	r3, [sp, #16]
 800ac00:	9307      	str	r3, [sp, #28]
 800ac02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac06:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac08:	4654      	mov	r4, sl
 800ac0a:	2205      	movs	r2, #5
 800ac0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac10:	484e      	ldr	r0, [pc, #312]	@ (800ad4c <_svfiprintf_r+0x1e4>)
 800ac12:	f7f5 fb85 	bl	8000320 <memchr>
 800ac16:	9a04      	ldr	r2, [sp, #16]
 800ac18:	b9d8      	cbnz	r0, 800ac52 <_svfiprintf_r+0xea>
 800ac1a:	06d0      	lsls	r0, r2, #27
 800ac1c:	bf44      	itt	mi
 800ac1e:	2320      	movmi	r3, #32
 800ac20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac24:	0711      	lsls	r1, r2, #28
 800ac26:	bf44      	itt	mi
 800ac28:	232b      	movmi	r3, #43	@ 0x2b
 800ac2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac34:	d015      	beq.n	800ac62 <_svfiprintf_r+0xfa>
 800ac36:	9a07      	ldr	r2, [sp, #28]
 800ac38:	4654      	mov	r4, sl
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	f04f 0c0a 	mov.w	ip, #10
 800ac40:	4621      	mov	r1, r4
 800ac42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac46:	3b30      	subs	r3, #48	@ 0x30
 800ac48:	2b09      	cmp	r3, #9
 800ac4a:	d94b      	bls.n	800ace4 <_svfiprintf_r+0x17c>
 800ac4c:	b1b0      	cbz	r0, 800ac7c <_svfiprintf_r+0x114>
 800ac4e:	9207      	str	r2, [sp, #28]
 800ac50:	e014      	b.n	800ac7c <_svfiprintf_r+0x114>
 800ac52:	eba0 0308 	sub.w	r3, r0, r8
 800ac56:	fa09 f303 	lsl.w	r3, r9, r3
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	46a2      	mov	sl, r4
 800ac60:	e7d2      	b.n	800ac08 <_svfiprintf_r+0xa0>
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	1d19      	adds	r1, r3, #4
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	9103      	str	r1, [sp, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	bfbb      	ittet	lt
 800ac6e:	425b      	neglt	r3, r3
 800ac70:	f042 0202 	orrlt.w	r2, r2, #2
 800ac74:	9307      	strge	r3, [sp, #28]
 800ac76:	9307      	strlt	r3, [sp, #28]
 800ac78:	bfb8      	it	lt
 800ac7a:	9204      	strlt	r2, [sp, #16]
 800ac7c:	7823      	ldrb	r3, [r4, #0]
 800ac7e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac80:	d10a      	bne.n	800ac98 <_svfiprintf_r+0x130>
 800ac82:	7863      	ldrb	r3, [r4, #1]
 800ac84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac86:	d132      	bne.n	800acee <_svfiprintf_r+0x186>
 800ac88:	9b03      	ldr	r3, [sp, #12]
 800ac8a:	1d1a      	adds	r2, r3, #4
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	9203      	str	r2, [sp, #12]
 800ac90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac94:	3402      	adds	r4, #2
 800ac96:	9305      	str	r3, [sp, #20]
 800ac98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad5c <_svfiprintf_r+0x1f4>
 800ac9c:	7821      	ldrb	r1, [r4, #0]
 800ac9e:	2203      	movs	r2, #3
 800aca0:	4650      	mov	r0, sl
 800aca2:	f7f5 fb3d 	bl	8000320 <memchr>
 800aca6:	b138      	cbz	r0, 800acb8 <_svfiprintf_r+0x150>
 800aca8:	9b04      	ldr	r3, [sp, #16]
 800acaa:	eba0 000a 	sub.w	r0, r0, sl
 800acae:	2240      	movs	r2, #64	@ 0x40
 800acb0:	4082      	lsls	r2, r0
 800acb2:	4313      	orrs	r3, r2
 800acb4:	3401      	adds	r4, #1
 800acb6:	9304      	str	r3, [sp, #16]
 800acb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbc:	4824      	ldr	r0, [pc, #144]	@ (800ad50 <_svfiprintf_r+0x1e8>)
 800acbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acc2:	2206      	movs	r2, #6
 800acc4:	f7f5 fb2c 	bl	8000320 <memchr>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d036      	beq.n	800ad3a <_svfiprintf_r+0x1d2>
 800accc:	4b21      	ldr	r3, [pc, #132]	@ (800ad54 <_svfiprintf_r+0x1ec>)
 800acce:	bb1b      	cbnz	r3, 800ad18 <_svfiprintf_r+0x1b0>
 800acd0:	9b03      	ldr	r3, [sp, #12]
 800acd2:	3307      	adds	r3, #7
 800acd4:	f023 0307 	bic.w	r3, r3, #7
 800acd8:	3308      	adds	r3, #8
 800acda:	9303      	str	r3, [sp, #12]
 800acdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acde:	4433      	add	r3, r6
 800ace0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ace2:	e76a      	b.n	800abba <_svfiprintf_r+0x52>
 800ace4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ace8:	460c      	mov	r4, r1
 800acea:	2001      	movs	r0, #1
 800acec:	e7a8      	b.n	800ac40 <_svfiprintf_r+0xd8>
 800acee:	2300      	movs	r3, #0
 800acf0:	3401      	adds	r4, #1
 800acf2:	9305      	str	r3, [sp, #20]
 800acf4:	4619      	mov	r1, r3
 800acf6:	f04f 0c0a 	mov.w	ip, #10
 800acfa:	4620      	mov	r0, r4
 800acfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad00:	3a30      	subs	r2, #48	@ 0x30
 800ad02:	2a09      	cmp	r2, #9
 800ad04:	d903      	bls.n	800ad0e <_svfiprintf_r+0x1a6>
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0c6      	beq.n	800ac98 <_svfiprintf_r+0x130>
 800ad0a:	9105      	str	r1, [sp, #20]
 800ad0c:	e7c4      	b.n	800ac98 <_svfiprintf_r+0x130>
 800ad0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad12:	4604      	mov	r4, r0
 800ad14:	2301      	movs	r3, #1
 800ad16:	e7f0      	b.n	800acfa <_svfiprintf_r+0x192>
 800ad18:	ab03      	add	r3, sp, #12
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	462a      	mov	r2, r5
 800ad1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad58 <_svfiprintf_r+0x1f0>)
 800ad20:	a904      	add	r1, sp, #16
 800ad22:	4638      	mov	r0, r7
 800ad24:	f3af 8000 	nop.w
 800ad28:	1c42      	adds	r2, r0, #1
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	d1d6      	bne.n	800acdc <_svfiprintf_r+0x174>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	065b      	lsls	r3, r3, #25
 800ad32:	f53f af2d 	bmi.w	800ab90 <_svfiprintf_r+0x28>
 800ad36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad38:	e72c      	b.n	800ab94 <_svfiprintf_r+0x2c>
 800ad3a:	ab03      	add	r3, sp, #12
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	462a      	mov	r2, r5
 800ad40:	4b05      	ldr	r3, [pc, #20]	@ (800ad58 <_svfiprintf_r+0x1f0>)
 800ad42:	a904      	add	r1, sp, #16
 800ad44:	4638      	mov	r0, r7
 800ad46:	f000 f879 	bl	800ae3c <_printf_i>
 800ad4a:	e7ed      	b.n	800ad28 <_svfiprintf_r+0x1c0>
 800ad4c:	0800b2f8 	.word	0x0800b2f8
 800ad50:	0800b302 	.word	0x0800b302
 800ad54:	00000000 	.word	0x00000000
 800ad58:	0800aab1 	.word	0x0800aab1
 800ad5c:	0800b2fe 	.word	0x0800b2fe

0800ad60 <_printf_common>:
 800ad60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad64:	4616      	mov	r6, r2
 800ad66:	4698      	mov	r8, r3
 800ad68:	688a      	ldr	r2, [r1, #8]
 800ad6a:	690b      	ldr	r3, [r1, #16]
 800ad6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad70:	4293      	cmp	r3, r2
 800ad72:	bfb8      	it	lt
 800ad74:	4613      	movlt	r3, r2
 800ad76:	6033      	str	r3, [r6, #0]
 800ad78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	460c      	mov	r4, r1
 800ad80:	b10a      	cbz	r2, 800ad86 <_printf_common+0x26>
 800ad82:	3301      	adds	r3, #1
 800ad84:	6033      	str	r3, [r6, #0]
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	0699      	lsls	r1, r3, #26
 800ad8a:	bf42      	ittt	mi
 800ad8c:	6833      	ldrmi	r3, [r6, #0]
 800ad8e:	3302      	addmi	r3, #2
 800ad90:	6033      	strmi	r3, [r6, #0]
 800ad92:	6825      	ldr	r5, [r4, #0]
 800ad94:	f015 0506 	ands.w	r5, r5, #6
 800ad98:	d106      	bne.n	800ada8 <_printf_common+0x48>
 800ad9a:	f104 0a19 	add.w	sl, r4, #25
 800ad9e:	68e3      	ldr	r3, [r4, #12]
 800ada0:	6832      	ldr	r2, [r6, #0]
 800ada2:	1a9b      	subs	r3, r3, r2
 800ada4:	42ab      	cmp	r3, r5
 800ada6:	dc26      	bgt.n	800adf6 <_printf_common+0x96>
 800ada8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800adac:	6822      	ldr	r2, [r4, #0]
 800adae:	3b00      	subs	r3, #0
 800adb0:	bf18      	it	ne
 800adb2:	2301      	movne	r3, #1
 800adb4:	0692      	lsls	r2, r2, #26
 800adb6:	d42b      	bmi.n	800ae10 <_printf_common+0xb0>
 800adb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800adbc:	4641      	mov	r1, r8
 800adbe:	4638      	mov	r0, r7
 800adc0:	47c8      	blx	r9
 800adc2:	3001      	adds	r0, #1
 800adc4:	d01e      	beq.n	800ae04 <_printf_common+0xa4>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	6922      	ldr	r2, [r4, #16]
 800adca:	f003 0306 	and.w	r3, r3, #6
 800adce:	2b04      	cmp	r3, #4
 800add0:	bf02      	ittt	eq
 800add2:	68e5      	ldreq	r5, [r4, #12]
 800add4:	6833      	ldreq	r3, [r6, #0]
 800add6:	1aed      	subeq	r5, r5, r3
 800add8:	68a3      	ldr	r3, [r4, #8]
 800adda:	bf0c      	ite	eq
 800addc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ade0:	2500      	movne	r5, #0
 800ade2:	4293      	cmp	r3, r2
 800ade4:	bfc4      	itt	gt
 800ade6:	1a9b      	subgt	r3, r3, r2
 800ade8:	18ed      	addgt	r5, r5, r3
 800adea:	2600      	movs	r6, #0
 800adec:	341a      	adds	r4, #26
 800adee:	42b5      	cmp	r5, r6
 800adf0:	d11a      	bne.n	800ae28 <_printf_common+0xc8>
 800adf2:	2000      	movs	r0, #0
 800adf4:	e008      	b.n	800ae08 <_printf_common+0xa8>
 800adf6:	2301      	movs	r3, #1
 800adf8:	4652      	mov	r2, sl
 800adfa:	4641      	mov	r1, r8
 800adfc:	4638      	mov	r0, r7
 800adfe:	47c8      	blx	r9
 800ae00:	3001      	adds	r0, #1
 800ae02:	d103      	bne.n	800ae0c <_printf_common+0xac>
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295
 800ae08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0c:	3501      	adds	r5, #1
 800ae0e:	e7c6      	b.n	800ad9e <_printf_common+0x3e>
 800ae10:	18e1      	adds	r1, r4, r3
 800ae12:	1c5a      	adds	r2, r3, #1
 800ae14:	2030      	movs	r0, #48	@ 0x30
 800ae16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae1a:	4422      	add	r2, r4
 800ae1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae24:	3302      	adds	r3, #2
 800ae26:	e7c7      	b.n	800adb8 <_printf_common+0x58>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	4622      	mov	r2, r4
 800ae2c:	4641      	mov	r1, r8
 800ae2e:	4638      	mov	r0, r7
 800ae30:	47c8      	blx	r9
 800ae32:	3001      	adds	r0, #1
 800ae34:	d0e6      	beq.n	800ae04 <_printf_common+0xa4>
 800ae36:	3601      	adds	r6, #1
 800ae38:	e7d9      	b.n	800adee <_printf_common+0x8e>
	...

0800ae3c <_printf_i>:
 800ae3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae40:	7e0f      	ldrb	r7, [r1, #24]
 800ae42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae44:	2f78      	cmp	r7, #120	@ 0x78
 800ae46:	4691      	mov	r9, r2
 800ae48:	4680      	mov	r8, r0
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	469a      	mov	sl, r3
 800ae4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae52:	d807      	bhi.n	800ae64 <_printf_i+0x28>
 800ae54:	2f62      	cmp	r7, #98	@ 0x62
 800ae56:	d80a      	bhi.n	800ae6e <_printf_i+0x32>
 800ae58:	2f00      	cmp	r7, #0
 800ae5a:	f000 80d2 	beq.w	800b002 <_printf_i+0x1c6>
 800ae5e:	2f58      	cmp	r7, #88	@ 0x58
 800ae60:	f000 80b9 	beq.w	800afd6 <_printf_i+0x19a>
 800ae64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae6c:	e03a      	b.n	800aee4 <_printf_i+0xa8>
 800ae6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae72:	2b15      	cmp	r3, #21
 800ae74:	d8f6      	bhi.n	800ae64 <_printf_i+0x28>
 800ae76:	a101      	add	r1, pc, #4	@ (adr r1, 800ae7c <_printf_i+0x40>)
 800ae78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae7c:	0800aed5 	.word	0x0800aed5
 800ae80:	0800aee9 	.word	0x0800aee9
 800ae84:	0800ae65 	.word	0x0800ae65
 800ae88:	0800ae65 	.word	0x0800ae65
 800ae8c:	0800ae65 	.word	0x0800ae65
 800ae90:	0800ae65 	.word	0x0800ae65
 800ae94:	0800aee9 	.word	0x0800aee9
 800ae98:	0800ae65 	.word	0x0800ae65
 800ae9c:	0800ae65 	.word	0x0800ae65
 800aea0:	0800ae65 	.word	0x0800ae65
 800aea4:	0800ae65 	.word	0x0800ae65
 800aea8:	0800afe9 	.word	0x0800afe9
 800aeac:	0800af13 	.word	0x0800af13
 800aeb0:	0800afa3 	.word	0x0800afa3
 800aeb4:	0800ae65 	.word	0x0800ae65
 800aeb8:	0800ae65 	.word	0x0800ae65
 800aebc:	0800b00b 	.word	0x0800b00b
 800aec0:	0800ae65 	.word	0x0800ae65
 800aec4:	0800af13 	.word	0x0800af13
 800aec8:	0800ae65 	.word	0x0800ae65
 800aecc:	0800ae65 	.word	0x0800ae65
 800aed0:	0800afab 	.word	0x0800afab
 800aed4:	6833      	ldr	r3, [r6, #0]
 800aed6:	1d1a      	adds	r2, r3, #4
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6032      	str	r2, [r6, #0]
 800aedc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aee0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aee4:	2301      	movs	r3, #1
 800aee6:	e09d      	b.n	800b024 <_printf_i+0x1e8>
 800aee8:	6833      	ldr	r3, [r6, #0]
 800aeea:	6820      	ldr	r0, [r4, #0]
 800aeec:	1d19      	adds	r1, r3, #4
 800aeee:	6031      	str	r1, [r6, #0]
 800aef0:	0606      	lsls	r6, r0, #24
 800aef2:	d501      	bpl.n	800aef8 <_printf_i+0xbc>
 800aef4:	681d      	ldr	r5, [r3, #0]
 800aef6:	e003      	b.n	800af00 <_printf_i+0xc4>
 800aef8:	0645      	lsls	r5, r0, #25
 800aefa:	d5fb      	bpl.n	800aef4 <_printf_i+0xb8>
 800aefc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af00:	2d00      	cmp	r5, #0
 800af02:	da03      	bge.n	800af0c <_printf_i+0xd0>
 800af04:	232d      	movs	r3, #45	@ 0x2d
 800af06:	426d      	negs	r5, r5
 800af08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af0c:	4859      	ldr	r0, [pc, #356]	@ (800b074 <_printf_i+0x238>)
 800af0e:	230a      	movs	r3, #10
 800af10:	e011      	b.n	800af36 <_printf_i+0xfa>
 800af12:	6821      	ldr	r1, [r4, #0]
 800af14:	6833      	ldr	r3, [r6, #0]
 800af16:	0608      	lsls	r0, r1, #24
 800af18:	f853 5b04 	ldr.w	r5, [r3], #4
 800af1c:	d402      	bmi.n	800af24 <_printf_i+0xe8>
 800af1e:	0649      	lsls	r1, r1, #25
 800af20:	bf48      	it	mi
 800af22:	b2ad      	uxthmi	r5, r5
 800af24:	2f6f      	cmp	r7, #111	@ 0x6f
 800af26:	4853      	ldr	r0, [pc, #332]	@ (800b074 <_printf_i+0x238>)
 800af28:	6033      	str	r3, [r6, #0]
 800af2a:	bf14      	ite	ne
 800af2c:	230a      	movne	r3, #10
 800af2e:	2308      	moveq	r3, #8
 800af30:	2100      	movs	r1, #0
 800af32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af36:	6866      	ldr	r6, [r4, #4]
 800af38:	60a6      	str	r6, [r4, #8]
 800af3a:	2e00      	cmp	r6, #0
 800af3c:	bfa2      	ittt	ge
 800af3e:	6821      	ldrge	r1, [r4, #0]
 800af40:	f021 0104 	bicge.w	r1, r1, #4
 800af44:	6021      	strge	r1, [r4, #0]
 800af46:	b90d      	cbnz	r5, 800af4c <_printf_i+0x110>
 800af48:	2e00      	cmp	r6, #0
 800af4a:	d04b      	beq.n	800afe4 <_printf_i+0x1a8>
 800af4c:	4616      	mov	r6, r2
 800af4e:	fbb5 f1f3 	udiv	r1, r5, r3
 800af52:	fb03 5711 	mls	r7, r3, r1, r5
 800af56:	5dc7      	ldrb	r7, [r0, r7]
 800af58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af5c:	462f      	mov	r7, r5
 800af5e:	42bb      	cmp	r3, r7
 800af60:	460d      	mov	r5, r1
 800af62:	d9f4      	bls.n	800af4e <_printf_i+0x112>
 800af64:	2b08      	cmp	r3, #8
 800af66:	d10b      	bne.n	800af80 <_printf_i+0x144>
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	07df      	lsls	r7, r3, #31
 800af6c:	d508      	bpl.n	800af80 <_printf_i+0x144>
 800af6e:	6923      	ldr	r3, [r4, #16]
 800af70:	6861      	ldr	r1, [r4, #4]
 800af72:	4299      	cmp	r1, r3
 800af74:	bfde      	ittt	le
 800af76:	2330      	movle	r3, #48	@ 0x30
 800af78:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af80:	1b92      	subs	r2, r2, r6
 800af82:	6122      	str	r2, [r4, #16]
 800af84:	f8cd a000 	str.w	sl, [sp]
 800af88:	464b      	mov	r3, r9
 800af8a:	aa03      	add	r2, sp, #12
 800af8c:	4621      	mov	r1, r4
 800af8e:	4640      	mov	r0, r8
 800af90:	f7ff fee6 	bl	800ad60 <_printf_common>
 800af94:	3001      	adds	r0, #1
 800af96:	d14a      	bne.n	800b02e <_printf_i+0x1f2>
 800af98:	f04f 30ff 	mov.w	r0, #4294967295
 800af9c:	b004      	add	sp, #16
 800af9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	f043 0320 	orr.w	r3, r3, #32
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	4833      	ldr	r0, [pc, #204]	@ (800b078 <_printf_i+0x23c>)
 800afac:	2778      	movs	r7, #120	@ 0x78
 800afae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	6831      	ldr	r1, [r6, #0]
 800afb6:	061f      	lsls	r7, r3, #24
 800afb8:	f851 5b04 	ldr.w	r5, [r1], #4
 800afbc:	d402      	bmi.n	800afc4 <_printf_i+0x188>
 800afbe:	065f      	lsls	r7, r3, #25
 800afc0:	bf48      	it	mi
 800afc2:	b2ad      	uxthmi	r5, r5
 800afc4:	6031      	str	r1, [r6, #0]
 800afc6:	07d9      	lsls	r1, r3, #31
 800afc8:	bf44      	itt	mi
 800afca:	f043 0320 	orrmi.w	r3, r3, #32
 800afce:	6023      	strmi	r3, [r4, #0]
 800afd0:	b11d      	cbz	r5, 800afda <_printf_i+0x19e>
 800afd2:	2310      	movs	r3, #16
 800afd4:	e7ac      	b.n	800af30 <_printf_i+0xf4>
 800afd6:	4827      	ldr	r0, [pc, #156]	@ (800b074 <_printf_i+0x238>)
 800afd8:	e7e9      	b.n	800afae <_printf_i+0x172>
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	f023 0320 	bic.w	r3, r3, #32
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	e7f6      	b.n	800afd2 <_printf_i+0x196>
 800afe4:	4616      	mov	r6, r2
 800afe6:	e7bd      	b.n	800af64 <_printf_i+0x128>
 800afe8:	6833      	ldr	r3, [r6, #0]
 800afea:	6825      	ldr	r5, [r4, #0]
 800afec:	6961      	ldr	r1, [r4, #20]
 800afee:	1d18      	adds	r0, r3, #4
 800aff0:	6030      	str	r0, [r6, #0]
 800aff2:	062e      	lsls	r6, r5, #24
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	d501      	bpl.n	800affc <_printf_i+0x1c0>
 800aff8:	6019      	str	r1, [r3, #0]
 800affa:	e002      	b.n	800b002 <_printf_i+0x1c6>
 800affc:	0668      	lsls	r0, r5, #25
 800affe:	d5fb      	bpl.n	800aff8 <_printf_i+0x1bc>
 800b000:	8019      	strh	r1, [r3, #0]
 800b002:	2300      	movs	r3, #0
 800b004:	6123      	str	r3, [r4, #16]
 800b006:	4616      	mov	r6, r2
 800b008:	e7bc      	b.n	800af84 <_printf_i+0x148>
 800b00a:	6833      	ldr	r3, [r6, #0]
 800b00c:	1d1a      	adds	r2, r3, #4
 800b00e:	6032      	str	r2, [r6, #0]
 800b010:	681e      	ldr	r6, [r3, #0]
 800b012:	6862      	ldr	r2, [r4, #4]
 800b014:	2100      	movs	r1, #0
 800b016:	4630      	mov	r0, r6
 800b018:	f7f5 f982 	bl	8000320 <memchr>
 800b01c:	b108      	cbz	r0, 800b022 <_printf_i+0x1e6>
 800b01e:	1b80      	subs	r0, r0, r6
 800b020:	6060      	str	r0, [r4, #4]
 800b022:	6863      	ldr	r3, [r4, #4]
 800b024:	6123      	str	r3, [r4, #16]
 800b026:	2300      	movs	r3, #0
 800b028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b02c:	e7aa      	b.n	800af84 <_printf_i+0x148>
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	4632      	mov	r2, r6
 800b032:	4649      	mov	r1, r9
 800b034:	4640      	mov	r0, r8
 800b036:	47d0      	blx	sl
 800b038:	3001      	adds	r0, #1
 800b03a:	d0ad      	beq.n	800af98 <_printf_i+0x15c>
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	079b      	lsls	r3, r3, #30
 800b040:	d413      	bmi.n	800b06a <_printf_i+0x22e>
 800b042:	68e0      	ldr	r0, [r4, #12]
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	4298      	cmp	r0, r3
 800b048:	bfb8      	it	lt
 800b04a:	4618      	movlt	r0, r3
 800b04c:	e7a6      	b.n	800af9c <_printf_i+0x160>
 800b04e:	2301      	movs	r3, #1
 800b050:	4632      	mov	r2, r6
 800b052:	4649      	mov	r1, r9
 800b054:	4640      	mov	r0, r8
 800b056:	47d0      	blx	sl
 800b058:	3001      	adds	r0, #1
 800b05a:	d09d      	beq.n	800af98 <_printf_i+0x15c>
 800b05c:	3501      	adds	r5, #1
 800b05e:	68e3      	ldr	r3, [r4, #12]
 800b060:	9903      	ldr	r1, [sp, #12]
 800b062:	1a5b      	subs	r3, r3, r1
 800b064:	42ab      	cmp	r3, r5
 800b066:	dcf2      	bgt.n	800b04e <_printf_i+0x212>
 800b068:	e7eb      	b.n	800b042 <_printf_i+0x206>
 800b06a:	2500      	movs	r5, #0
 800b06c:	f104 0619 	add.w	r6, r4, #25
 800b070:	e7f5      	b.n	800b05e <_printf_i+0x222>
 800b072:	bf00      	nop
 800b074:	0800b309 	.word	0x0800b309
 800b078:	0800b31a 	.word	0x0800b31a

0800b07c <memmove>:
 800b07c:	4288      	cmp	r0, r1
 800b07e:	b510      	push	{r4, lr}
 800b080:	eb01 0402 	add.w	r4, r1, r2
 800b084:	d902      	bls.n	800b08c <memmove+0x10>
 800b086:	4284      	cmp	r4, r0
 800b088:	4623      	mov	r3, r4
 800b08a:	d807      	bhi.n	800b09c <memmove+0x20>
 800b08c:	1e43      	subs	r3, r0, #1
 800b08e:	42a1      	cmp	r1, r4
 800b090:	d008      	beq.n	800b0a4 <memmove+0x28>
 800b092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b09a:	e7f8      	b.n	800b08e <memmove+0x12>
 800b09c:	4402      	add	r2, r0
 800b09e:	4601      	mov	r1, r0
 800b0a0:	428a      	cmp	r2, r1
 800b0a2:	d100      	bne.n	800b0a6 <memmove+0x2a>
 800b0a4:	bd10      	pop	{r4, pc}
 800b0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ae:	e7f7      	b.n	800b0a0 <memmove+0x24>

0800b0b0 <_sbrk_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	4d06      	ldr	r5, [pc, #24]	@ (800b0cc <_sbrk_r+0x1c>)
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	602b      	str	r3, [r5, #0]
 800b0bc:	f7f5 ff06 	bl	8000ecc <_sbrk>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d102      	bne.n	800b0ca <_sbrk_r+0x1a>
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	b103      	cbz	r3, 800b0ca <_sbrk_r+0x1a>
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	24000d4c 	.word	0x24000d4c

0800b0d0 <memcpy>:
 800b0d0:	440a      	add	r2, r1
 800b0d2:	4291      	cmp	r1, r2
 800b0d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0d8:	d100      	bne.n	800b0dc <memcpy+0xc>
 800b0da:	4770      	bx	lr
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0e6:	4291      	cmp	r1, r2
 800b0e8:	d1f9      	bne.n	800b0de <memcpy+0xe>
 800b0ea:	bd10      	pop	{r4, pc}

0800b0ec <_realloc_r>:
 800b0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f0:	4680      	mov	r8, r0
 800b0f2:	4615      	mov	r5, r2
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	b921      	cbnz	r1, 800b102 <_realloc_r+0x16>
 800b0f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	f7ff bc4b 	b.w	800a998 <_malloc_r>
 800b102:	b92a      	cbnz	r2, 800b110 <_realloc_r+0x24>
 800b104:	f7ff fbdc 	bl	800a8c0 <_free_r>
 800b108:	2400      	movs	r4, #0
 800b10a:	4620      	mov	r0, r4
 800b10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b110:	f000 f81a 	bl	800b148 <_malloc_usable_size_r>
 800b114:	4285      	cmp	r5, r0
 800b116:	4606      	mov	r6, r0
 800b118:	d802      	bhi.n	800b120 <_realloc_r+0x34>
 800b11a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b11e:	d8f4      	bhi.n	800b10a <_realloc_r+0x1e>
 800b120:	4629      	mov	r1, r5
 800b122:	4640      	mov	r0, r8
 800b124:	f7ff fc38 	bl	800a998 <_malloc_r>
 800b128:	4607      	mov	r7, r0
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d0ec      	beq.n	800b108 <_realloc_r+0x1c>
 800b12e:	42b5      	cmp	r5, r6
 800b130:	462a      	mov	r2, r5
 800b132:	4621      	mov	r1, r4
 800b134:	bf28      	it	cs
 800b136:	4632      	movcs	r2, r6
 800b138:	f7ff ffca 	bl	800b0d0 <memcpy>
 800b13c:	4621      	mov	r1, r4
 800b13e:	4640      	mov	r0, r8
 800b140:	f7ff fbbe 	bl	800a8c0 <_free_r>
 800b144:	463c      	mov	r4, r7
 800b146:	e7e0      	b.n	800b10a <_realloc_r+0x1e>

0800b148 <_malloc_usable_size_r>:
 800b148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b14c:	1f18      	subs	r0, r3, #4
 800b14e:	2b00      	cmp	r3, #0
 800b150:	bfbc      	itt	lt
 800b152:	580b      	ldrlt	r3, [r1, r0]
 800b154:	18c0      	addlt	r0, r0, r3
 800b156:	4770      	bx	lr

0800b158 <_init>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	bf00      	nop
 800b15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15e:	bc08      	pop	{r3}
 800b160:	469e      	mov	lr, r3
 800b162:	4770      	bx	lr

0800b164 <_fini>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	bf00      	nop
 800b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16a:	bc08      	pop	{r3}
 800b16c:	469e      	mov	lr, r3
 800b16e:	4770      	bx	lr
