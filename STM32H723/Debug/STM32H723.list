
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af9c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800b26c  0800b26c  0000c26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b4c4  0800b4c4  0000c4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b4cc  0800b4cc  0000c4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b4d0  0800b4d0  0000c4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000168  24000000  0800b4d4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bf4  24000168  0800b63c  0000d168  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000d5c  0800b63c  0000dd5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 10 .debug_info   000192dd  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003695  00000000  00000000  00026473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001190  00000000  00000000  00029b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d5c  00000000  00000000  0002ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001061d  00000000  00000000  0002b9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000064e4  00000000  00000000  0003c011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000424f5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004dc0  00000000  00000000  00042538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  000472f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000168 	.word	0x24000168
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b254 	.word	0x0800b254

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400016c 	.word	0x2400016c
 800030c:	0800b254 	.word	0x0800b254

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:




// GPIO 상태를 스캔하고 변경된 핀 정보를 반환하는 함수
MatrixScanResult MatrixScan() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0ac      	sub	sp, #176	@ 0xb0
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    static uint32_t Last_gpioC_state = 0;
    static uint32_t Last_gpioD_state = 0;
    static uint32_t Last_gpioE_state = 0;

    // 현재 GPIO 상태 읽기
    uint32_t gpioA_state = GPIOA->IDR;// & 0010101111111111;
 80006b8:	4b9e      	ldr	r3, [pc, #632]	@ (8000934 <MatrixScan+0x284>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t gpioB_state = GPIOB->IDR;// & 0011101111000011;
 80006c0:	4b9d      	ldr	r3, [pc, #628]	@ (8000938 <MatrixScan+0x288>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t gpioC_state = GPIOC->IDR;// & 0100111111111111;
 80006c8:	4b9c      	ldr	r3, [pc, #624]	@ (800093c <MatrixScan+0x28c>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t gpioD_state = GPIOD->IDR;// & 1111111111111111;
 80006ce:	4b9c      	ldr	r3, [pc, #624]	@ (8000940 <MatrixScan+0x290>)
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t gpioE_state = GPIOE->IDR;// & 1111111111111111;
 80006d4:	4b9b      	ldr	r3, [pc, #620]	@ (8000944 <MatrixScan+0x294>)
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	677b      	str	r3, [r7, #116]	@ 0x74

    // 변경된 비트 계산 (XOR 연산)
    uint32_t changedPinA = (gpioA_state ^ Last_gpioA_state) & 1111111111111111;
 80006da:	4b9b      	ldr	r3, [pc, #620]	@ (8000948 <MatrixScan+0x298>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80006e2:	405a      	eors	r2, r3
 80006e4:	4b99      	ldr	r3, [pc, #612]	@ (800094c <MatrixScan+0x29c>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint32_t changedPinB = (gpioB_state ^ Last_gpioB_state) & 1011111111111111;
 80006ec:	4b98      	ldr	r3, [pc, #608]	@ (8000950 <MatrixScan+0x2a0>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80006f4:	405a      	eors	r2, r3
 80006f6:	4b97      	ldr	r3, [pc, #604]	@ (8000954 <MatrixScan+0x2a4>)
 80006f8:	4013      	ands	r3, r2
 80006fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    uint32_t changedPinC = (gpioC_state ^ Last_gpioC_state) & 1111111111111111;
 80006fe:	4b96      	ldr	r3, [pc, #600]	@ (8000958 <MatrixScan+0x2a8>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000704:	405a      	eors	r2, r3
 8000706:	4b91      	ldr	r3, [pc, #580]	@ (800094c <MatrixScan+0x29c>)
 8000708:	4013      	ands	r3, r2
 800070a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 800070e:	4b93      	ldr	r3, [pc, #588]	@ (800095c <MatrixScan+0x2ac>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000714:	4053      	eors	r3, r2
 8000716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 800071a:	4b91      	ldr	r3, [pc, #580]	@ (8000960 <MatrixScan+0x2b0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000720:	4053      	eors	r3, r2
 8000722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    MatrixScanResult result;
    result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    result.pinState = -1;
 800072c:	23ff      	movs	r3, #255	@ 0xff
 800072e:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

    // 포트 A~E 순서대로 변경된 핀 확인
    if (changedPinA != 0) {
 8000732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000736:	2b00      	cmp	r3, #0
 8000738:	d039      	beq.n	80007ae <MatrixScan+0xfe>
        int bitPosition = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while ((changedPinA & 1) == 0) {
 8000740:	e009      	b.n	8000756 <MatrixScan+0xa6>
            changedPinA >>= 1; // 오른쪽으로 시프트
 8000742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000746:	085b      	lsrs	r3, r3, #1
 8000748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            bitPosition++;
 800074c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000750:	3301      	adds	r3, #1
 8000752:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while ((changedPinA & 1) == 0) {
 8000756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0ef      	beq.n	8000742 <MatrixScan+0x92>
        }
        result.pinNumber = bitPosition; // 핀 번호 (포트 A는 0 ~ 15)
 8000762:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000766:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioA_state >> bitPosition) & 1; // 현재 상태
 8000768:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800076c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000770:	fa22 f303 	lsr.w	r3, r2, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        char message[100];
        sprintf(message, "A | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000780:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000782:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000786:	f107 0008 	add.w	r0, r7, #8
 800078a:	4976      	ldr	r1, [pc, #472]	@ (8000964 <MatrixScan+0x2b4>)
 800078c:	f00a f8c2 	bl	800a914 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fdbb 	bl	8000310 <strlen>
 800079a:	4603      	mov	r3, r0
 800079c:	b29a      	uxth	r2, r3
 800079e:	f107 0108 	add.w	r1, r7, #8
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	4870      	ldr	r0, [pc, #448]	@ (8000968 <MatrixScan+0x2b8>)
 80007a8:	f005 f948 	bl	8005a3c <HAL_UART_Transmit>
 80007ac:	e119      	b.n	80009e2 <MatrixScan+0x332>

    } else if (changedPinB != 0) {
 80007ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d03a      	beq.n	800082c <MatrixScan+0x17c>
        int bitPosition = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        while ((changedPinB & 1) == 0) {
 80007bc:	e009      	b.n	80007d2 <MatrixScan+0x122>
            changedPinB >>= 1;
 80007be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80007c2:	085b      	lsrs	r3, r3, #1
 80007c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            bitPosition++;
 80007c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80007cc:	3301      	adds	r3, #1
 80007ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        while ((changedPinB & 1) == 0) {
 80007d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0ef      	beq.n	80007be <MatrixScan+0x10e>
        }
        result.pinNumber = bitPosition + 16; // 핀 번호 (포트 B는 16 ~ 31)
 80007de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80007e2:	3310      	adds	r3, #16
 80007e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioB_state >> bitPosition) & 1;
 80007e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80007ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80007ee:	fa22 f303 	lsr.w	r3, r2, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        char message[100];
        sprintf(message, "B | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80007fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000800:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000804:	f107 0008 	add.w	r0, r7, #8
 8000808:	4958      	ldr	r1, [pc, #352]	@ (800096c <MatrixScan+0x2bc>)
 800080a:	f00a f883 	bl	800a914 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fd7c 	bl	8000310 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	f107 0108 	add.w	r1, r7, #8
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	4850      	ldr	r0, [pc, #320]	@ (8000968 <MatrixScan+0x2b8>)
 8000826:	f005 f909 	bl	8005a3c <HAL_UART_Transmit>
 800082a:	e0da      	b.n	80009e2 <MatrixScan+0x332>

    } else if (changedPinC != 0) {
 800082c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000830:	2b00      	cmp	r3, #0
 8000832:	d039      	beq.n	80008a8 <MatrixScan+0x1f8>
        int bitPosition = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        while ((changedPinC & 1) == 0) {
 800083a:	e009      	b.n	8000850 <MatrixScan+0x1a0>
            changedPinC >>= 1;
 800083c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            bitPosition++;
 8000846:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800084a:	3301      	adds	r3, #1
 800084c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        while ((changedPinC & 1) == 0) {
 8000850:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0ef      	beq.n	800083c <MatrixScan+0x18c>
        }
        result.pinNumber = bitPosition + 32; // 핀 번호 (포트 C는 32 ~ 47)
 800085c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000860:	3320      	adds	r3, #32
 8000862:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioC_state >> bitPosition) & 1;
 8000864:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000866:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800086a:	fa22 f303 	lsr.w	r3, r2, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        char message[100];
        sprintf(message, "C | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 800087a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800087c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000880:	f107 0008 	add.w	r0, r7, #8
 8000884:	493a      	ldr	r1, [pc, #232]	@ (8000970 <MatrixScan+0x2c0>)
 8000886:	f00a f845 	bl	800a914 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fd3e 	bl	8000310 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	f107 0108 	add.w	r1, r7, #8
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	4831      	ldr	r0, [pc, #196]	@ (8000968 <MatrixScan+0x2b8>)
 80008a2:	f005 f8cb 	bl	8005a3c <HAL_UART_Transmit>
 80008a6:	e09c      	b.n	80009e2 <MatrixScan+0x332>

    } else if (changedPinD != 0) {
 80008a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d039      	beq.n	8000924 <MatrixScan+0x274>
        int bitPosition = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        while ((changedPinD & 1) == 0) {
 80008b6:	e009      	b.n	80008cc <MatrixScan+0x21c>
            changedPinD >>= 1;
 80008b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            bitPosition++;
 80008c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008c6:	3301      	adds	r3, #1
 80008c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        while ((changedPinD & 1) == 0) {
 80008cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0ef      	beq.n	80008b8 <MatrixScan+0x208>
        }
        result.pinNumber = bitPosition + 48; // 핀 번호 (포트 D는 48 ~ 63)
 80008d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008dc:	3330      	adds	r3, #48	@ 0x30
 80008de:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioD_state >> bitPosition) & 1;
 80008e0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80008e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008e6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        char message[100];
        sprintf(message, "D | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80008f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80008f8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80008fc:	f107 0008 	add.w	r0, r7, #8
 8000900:	491c      	ldr	r1, [pc, #112]	@ (8000974 <MatrixScan+0x2c4>)
 8000902:	f00a f807 	bl	800a914 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fd00 	bl	8000310 <strlen>
 8000910:	4603      	mov	r3, r0
 8000912:	b29a      	uxth	r2, r3
 8000914:	f107 0108 	add.w	r1, r7, #8
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	4812      	ldr	r0, [pc, #72]	@ (8000968 <MatrixScan+0x2b8>)
 800091e:	f005 f88d 	bl	8005a3c <HAL_UART_Transmit>
 8000922:	e05e      	b.n	80009e2 <MatrixScan+0x332>

    } else if (changedPinE != 0) {
 8000924:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000928:	2b00      	cmp	r3, #0
 800092a:	d05a      	beq.n	80009e2 <MatrixScan+0x332>
        int bitPosition = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while ((changedPinE & 1) == 0) {
 8000932:	e02b      	b.n	800098c <MatrixScan+0x2dc>
 8000934:	58020000 	.word	0x58020000
 8000938:	58020400 	.word	0x58020400
 800093c:	58020800 	.word	0x58020800
 8000940:	58020c00 	.word	0x58020c00
 8000944:	58021000 	.word	0x58021000
 8000948:	24000220 	.word	0x24000220
 800094c:	b71571c7 	.word	0xb71571c7
 8000950:	24000224 	.word	0x24000224
 8000954:	a69b31c7 	.word	0xa69b31c7
 8000958:	24000228 	.word	0x24000228
 800095c:	2400022c 	.word	0x2400022c
 8000960:	24000230 	.word	0x24000230
 8000964:	0800b26c 	.word	0x0800b26c
 8000968:	24000184 	.word	0x24000184
 800096c:	0800b294 	.word	0x0800b294
 8000970:	0800b2bc 	.word	0x0800b2bc
 8000974:	0800b2e4 	.word	0x0800b2e4
            changedPinE >>= 1;
 8000978:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            bitPosition++;
 8000982:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000986:	3301      	adds	r3, #1
 8000988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while ((changedPinE & 1) == 0) {
 800098c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0ef      	beq.n	8000978 <MatrixScan+0x2c8>
        }
        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000998:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800099c:	3340      	adds	r3, #64	@ 0x40
 800099e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioE_state >> bitPosition) & 1;
 80009a0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009a6:	fa22 f303 	lsr.w	r3, r2, r3
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        char message[100];
        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80009b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80009b8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80009bc:	f107 0008 	add.w	r0, r7, #8
 80009c0:	4916      	ldr	r1, [pc, #88]	@ (8000a1c <MatrixScan+0x36c>)
 80009c2:	f009 ffa7 	bl	800a914 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fca0 	bl	8000310 <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f107 0108 	add.w	r1, r7, #8
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	4810      	ldr	r0, [pc, #64]	@ (8000a20 <MatrixScan+0x370>)
 80009de:	f005 f82d 	bl	8005a3c <HAL_UART_Transmit>

    }

    // 이전 상태 업데이트
    Last_gpioA_state = gpioA_state;
 80009e2:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <MatrixScan+0x374>)
 80009e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009e8:	6013      	str	r3, [r2, #0]
    Last_gpioB_state = gpioB_state;
 80009ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000a28 <MatrixScan+0x378>)
 80009ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009f0:	6013      	str	r3, [r2, #0]
    Last_gpioC_state = gpioC_state;
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <MatrixScan+0x37c>)
 80009f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80009f6:	6013      	str	r3, [r2, #0]
    Last_gpioD_state = gpioD_state;
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <MatrixScan+0x380>)
 80009fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80009fc:	6013      	str	r3, [r2, #0]
    Last_gpioE_state = gpioE_state;
 80009fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <MatrixScan+0x384>)
 8000a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a02:	6013      	str	r3, [r2, #0]

    return result; // 변경된 핀 정보 반환
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	461a      	mov	r2, r3
 8000a08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a10:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	37b0      	adds	r7, #176	@ 0xb0
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	0800b30c 	.word	0x0800b30c
 8000a20:	24000184 	.word	0x24000184
 8000a24:	24000220 	.word	0x24000220
 8000a28:	24000224 	.word	0x24000224
 8000a2c:	24000228 	.word	0x24000228
 8000a30:	2400022c 	.word	0x2400022c
 8000a34:	24000230 	.word	0x24000230

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09e      	sub	sp, #120	@ 0x78
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a3e:	f000 f9d5 	bl	8000dec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f000 fbcb 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f851 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f000 f90b 	bl	8000c64 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000a4e:	f009 faa5 	bl	8009f9c <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000a52:	f000 f8bb 	bl	8000bcc <MX_UART4_Init>
    {
        //Timer = HAL_GetTick(); // Get Current Time

    	//CheckScanrate();

        if (HAL_GetTick() - LastTimer >= 10000)
 8000a56:	f000 fc47 	bl	80012e8 <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <main+0xa0>)
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	1a9b      	subs	r3, r3, r2
 8000a62:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d927      	bls.n	8000aba <main+0x82>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", HAL_GetTick(), Scanrate / 10);
 8000a6a:	f000 fc3d 	bl	80012e8 <HAL_GetTick>
 8000a6e:	4601      	mov	r1, r0
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <main+0xa4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1a      	ldr	r2, [pc, #104]	@ (8000ae0 <main+0xa8>)
 8000a76:	fb82 0203 	smull	r0, r2, r2, r3
 8000a7a:	1092      	asrs	r2, r2, #2
 8000a7c:	17db      	asrs	r3, r3, #31
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	f107 000c 	add.w	r0, r7, #12
 8000a84:	460a      	mov	r2, r1
 8000a86:	4917      	ldr	r1, [pc, #92]	@ (8000ae4 <main+0xac>)
 8000a88:	f009 ff44 	bl	800a914 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fc3d 	bl	8000310 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 010c 	add.w	r1, r7, #12
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	4811      	ldr	r0, [pc, #68]	@ (8000ae8 <main+0xb0>)
 8000aa4:	f004 ffca 	bl	8005a3c <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 8000aa8:	f000 fc1e 	bl	80012e8 <HAL_GetTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <main+0xa0>)
 8000ab2:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <main+0xa4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <main+0xa4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a06      	ldr	r2, [pc, #24]	@ (8000adc <main+0xa4>)
 8000ac2:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

        MatrixScan();
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fdf2 	bl	80006b0 <MatrixScan>
        MatrixScanResult Matrix = MatrixScan();
 8000acc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fded 	bl	80006b0 <MatrixScan>
    {
 8000ad6:	e7be      	b.n	8000a56 <main+0x1e>
 8000ad8:	2400021c 	.word	0x2400021c
 8000adc:	24000218 	.word	0x24000218
 8000ae0:	66666667 	.word	0x66666667
 8000ae4:	0800b3e8 	.word	0x0800b3e8
 8000ae8:	24000184 	.word	0x24000184

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b09c      	sub	sp, #112	@ 0x70
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af6:	224c      	movs	r2, #76	@ 0x4c
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f009 ff2a 	bl	800a954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2220      	movs	r2, #32
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f009 ff24 	bl	800a954 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f002 f9d3 	bl	8002eb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <SystemClock_Config+0xdc>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc8 <SystemClock_Config+0xdc>)
 8000b1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <SystemClock_Config+0xdc>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b2e:	bf00      	nop
 8000b30:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <SystemClock_Config+0xdc>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b3c:	d1f8      	bne.n	8000b30 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b3e:	2321      	movs	r3, #33	@ 0x21
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b50:	2302      	movs	r3, #2
 8000b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b54:	2305      	movs	r3, #5
 8000b56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8000b58:	236e      	movs	r3, #110	@ 0x6e
 8000b5a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 f9e7 	bl	8002f4c <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b84:	f000 f95e 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	233f      	movs	r3, #63	@ 0x3f
 8000b8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b94:	2308      	movs	r3, #8
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b98:	2340      	movs	r3, #64	@ 0x40
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b9c:	2340      	movs	r3, #64	@ 0x40
 8000b9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000ba6:	2350      	movs	r3, #80	@ 0x50
 8000ba8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2103      	movs	r1, #3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fda6 	bl	8003700 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bba:	f000 f943 	bl	8000e44 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3770      	adds	r7, #112	@ 0x70
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58024800 	.word	0x58024800

08000bcc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <MX_UART4_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000c16:	f004 fec1 	bl	800599c <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 f910 	bl	8000e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000c28:	f006 f85b 	bl	8006ce2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 f907 	bl	8000e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000c3a:	f006 f890 	bl	8006d5e <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 f8fe 	bl	8000e44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_UART4_Init+0x90>)
 8000c4a:	f006 f811 	bl	8006c70 <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f8f6 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	24000184 	.word	0x24000184
 8000c60:	40004c00 	.word	0x40004c00

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	@ 0x30
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c7a:	4b56      	ldr	r3, [pc, #344]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c80:	4a54      	ldr	r2, [pc, #336]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8a:	4b52      	ldr	r3, [pc, #328]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	4b47      	ldr	r3, [pc, #284]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	4a45      	ldr	r2, [pc, #276]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc6:	4b43      	ldr	r3, [pc, #268]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	4a3e      	ldr	r2, [pc, #248]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b38      	ldr	r3, [pc, #224]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	4a36      	ldr	r2, [pc, #216]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d02:	4b34      	ldr	r3, [pc, #208]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d10:	4b30      	ldr	r3, [pc, #192]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d20:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000d2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d32:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4825      	ldr	r0, [pc, #148]	@ (8000dd8 <MX_GPIO_Init+0x174>)
 8000d44:	f000 fc88 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8000d48:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 8000d4c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481f      	ldr	r0, [pc, #124]	@ (8000ddc <MX_GPIO_Init+0x178>)
 8000d5e:	f000 fc7b 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8000d62:	f649 73d4 	movw	r3, #40916	@ 0x9fd4
 8000d66:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	481a      	ldr	r0, [pc, #104]	@ (8000de0 <MX_GPIO_Init+0x17c>)
 8000d78:	f000 fc6e 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB3 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 8000d7c:	f244 33dc 	movw	r3, #17372	@ 0x43dc
 8000d80:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4814      	ldr	r0, [pc, #80]	@ (8000de4 <MX_GPIO_Init+0x180>)
 8000d92:	f000 fc61 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	480d      	ldr	r0, [pc, #52]	@ (8000de4 <MX_GPIO_Init+0x180>)
 8000dae:	f000 fc53 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000db2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000db6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <MX_GPIO_Init+0x184>)
 8000dc8:	f000 fc46 	bl	8001658 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	@ 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	58021000 	.word	0x58021000
 8000ddc:	58020800 	.word	0x58020800
 8000de0:	58020000 	.word	0x58020000
 8000de4:	58020400 	.word	0x58020400
 8000de8:	58020c00 	.word	0x58020c00

08000dec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dfe:	f000 fbb3 	bl	8001568 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e0e:	231f      	movs	r3, #31
 8000e10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e12:	2387      	movs	r3, #135	@ 0x87
 8000e14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e22:	2301      	movs	r3, #1
 8000e24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fbd1 	bl	80015d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e36:	2004      	movs	r0, #4
 8000e38:	f000 fbae 	bl	8001598 <HAL_MPU_Enable>

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <Error_Handler+0x8>

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_MspInit+0x30>)
 8000e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e5c:	4a08      	ldr	r2, [pc, #32]	@ (8000e80 <HAL_MspInit+0x30>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_MspInit+0x30>)
 8000e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	58024400 	.word	0x58024400

08000e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0b8      	sub	sp, #224	@ 0xe0
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	22b8      	movs	r2, #184	@ 0xb8
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 fd55 	bl	800a954 <memset>
  if(huart->Instance==UART4)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a26      	ldr	r2, [pc, #152]	@ (8000f48 <HAL_UART_MspInit+0xc4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d145      	bne.n	8000f40 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000eb4:	f04f 0202 	mov.w	r2, #2
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 ffa4 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ed6:	f7ff ffb5 	bl	8000e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <HAL_UART_MspInit+0xc8>)
 8000edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f4c <HAL_UART_MspInit+0xc8>)
 8000ee2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ee6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <HAL_UART_MspInit+0xc8>)
 8000eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <HAL_UART_MspInit+0xc8>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <HAL_UART_MspInit+0xc8>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_UART_MspInit+0xc8>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <HAL_UART_MspInit+0xcc>)
 8000f3c:	f000 fb8c 	bl	8001658 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000f40:	bf00      	nop
 8000f42:	37e0      	adds	r7, #224	@ 0xe0
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40004c00 	.word	0x40004c00
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	58020000 	.word	0x58020000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <NMI_Handler+0x4>

08000f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000faa:	f000 f989 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <OTG_HS_IRQHandler+0x10>)
 8000fba:	f000 fe36 	bl	8001c2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2400071c 	.word	0x2400071c

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f009 fcb4 	bl	800a964 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24050000 	.word	0x24050000
 8001028:	00000400 	.word	0x00000400
 800102c:	24000234 	.word	0x24000234
 8001030:	24000d60 	.word	0x24000d60

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001038:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <SystemInit+0x100>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103e:	4a3d      	ldr	r2, [pc, #244]	@ (8001134 <SystemInit+0x100>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001048:	4b3b      	ldr	r3, [pc, #236]	@ (8001138 <SystemInit+0x104>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	2b06      	cmp	r3, #6
 8001052:	d807      	bhi.n	8001064 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001054:	4b38      	ldr	r3, [pc, #224]	@ (8001138 <SystemInit+0x104>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 030f 	bic.w	r3, r3, #15
 800105c:	4a36      	ldr	r2, [pc, #216]	@ (8001138 <SystemInit+0x104>)
 800105e:	f043 0307 	orr.w	r3, r3, #7
 8001062:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001064:	4b35      	ldr	r3, [pc, #212]	@ (800113c <SystemInit+0x108>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a34      	ldr	r2, [pc, #208]	@ (800113c <SystemInit+0x108>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <SystemInit+0x108>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001076:	4b31      	ldr	r3, [pc, #196]	@ (800113c <SystemInit+0x108>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4930      	ldr	r1, [pc, #192]	@ (800113c <SystemInit+0x108>)
 800107c:	4b30      	ldr	r3, [pc, #192]	@ (8001140 <SystemInit+0x10c>)
 800107e:	4013      	ands	r3, r2
 8001080:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001082:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <SystemInit+0x104>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800108e:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <SystemInit+0x104>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 030f 	bic.w	r3, r3, #15
 8001096:	4a28      	ldr	r2, [pc, #160]	@ (8001138 <SystemInit+0x104>)
 8001098:	f043 0307 	orr.w	r3, r3, #7
 800109c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800109e:	4b27      	ldr	r3, [pc, #156]	@ (800113c <SystemInit+0x108>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <SystemInit+0x108>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010aa:	4b24      	ldr	r3, [pc, #144]	@ (800113c <SystemInit+0x108>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <SystemInit+0x108>)
 80010b2:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <SystemInit+0x110>)
 80010b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010b6:	4b21      	ldr	r3, [pc, #132]	@ (800113c <SystemInit+0x108>)
 80010b8:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <SystemInit+0x114>)
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <SystemInit+0x108>)
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <SystemInit+0x118>)
 80010c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <SystemInit+0x108>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <SystemInit+0x108>)
 80010ca:	4a20      	ldr	r2, [pc, #128]	@ (800114c <SystemInit+0x118>)
 80010cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <SystemInit+0x108>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <SystemInit+0x108>)
 80010d6:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <SystemInit+0x118>)
 80010d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <SystemInit+0x108>)
 80010dc:	2200      	movs	r2, #0
 80010de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <SystemInit+0x108>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a15      	ldr	r2, [pc, #84]	@ (800113c <SystemInit+0x108>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <SystemInit+0x108>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <SystemInit+0x108>)
 80010f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d113      	bne.n	8001128 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <SystemInit+0x108>)
 8001102:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001106:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <SystemInit+0x108>)
 8001108:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800110c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <SystemInit+0x11c>)
 8001112:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001116:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <SystemInit+0x108>)
 800111a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800111e:	4a07      	ldr	r2, [pc, #28]	@ (800113c <SystemInit+0x108>)
 8001120:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001124:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	52002000 	.word	0x52002000
 800113c:	58024400 	.word	0x58024400
 8001140:	eaf6ed7f 	.word	0xeaf6ed7f
 8001144:	02020200 	.word	0x02020200
 8001148:	01ff0000 	.word	0x01ff0000
 800114c:	01010280 	.word	0x01010280
 8001150:	52004000 	.word	0x52004000

08001154 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <ExitRun0Mode+0x2c>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4a08      	ldr	r2, [pc, #32]	@ (8001180 <ExitRun0Mode+0x2c>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001164:	bf00      	nop
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <ExitRun0Mode+0x2c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f9      	beq.n	8001166 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	58024800 	.word	0x58024800

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80011c0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001188:	f7ff ffe4 	bl	8001154 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800118c:	f7ff ff52 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f009 fbdb 	bl	800a970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fc3d 	bl	8000a38 <main>
  bx  lr
 80011be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011c8:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 80011cc:	0800b4d4 	.word	0x0800b4d4
  ldr r2, =_sbss
 80011d0:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 80011d4:	24000d5c 	.word	0x24000d5c

080011d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC3_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e2:	2003      	movs	r0, #3
 80011e4:	f000 f980 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011e8:	f002 fc40 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 80011ec:	4602      	mov	r2, r0
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_Init+0x68>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	4913      	ldr	r1, [pc, #76]	@ (8001248 <HAL_Init+0x6c>)
 80011fa:	5ccb      	ldrb	r3, [r1, r3]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <HAL_Init+0x68>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	4a0e      	ldr	r2, [pc, #56]	@ (8001248 <HAL_Init+0x6c>)
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <HAL_Init+0x70>)
 800121e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001220:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <HAL_Init+0x74>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001226:	200f      	movs	r0, #15
 8001228:	f000 f814 	bl	8001254 <HAL_InitTick>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e002      	b.n	800123c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001236:	f7ff fe0b 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400
 8001248:	0800b458 	.word	0x0800b458
 800124c:	24000004 	.word	0x24000004
 8001250:	24000000 	.word	0x24000000

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_InitTick+0x60>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e021      	b.n	80012ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_InitTick+0x64>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <HAL_InitTick+0x60>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f965 	bl	800154e <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f92f 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <HAL_InitTick+0x68>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2400000c 	.word	0x2400000c
 80012b8:	24000000 	.word	0x24000000
 80012bc:	24000008 	.word	0x24000008

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2400000c 	.word	0x2400000c
 80012e4:	24000238 	.word	0x24000238

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	24000238 	.word	0x24000238

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2400000c 	.word	0x2400000c

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <__NVIC_SetPriorityGrouping+0x40>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	4313      	orrs	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x40>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	05fa0000 	.word	0x05fa0000

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	@ (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	@ (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	@ 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	@ 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff29 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff40 	bl	8001390 <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff90 	bl	800143c <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5f 	bl	80013e8 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff33 	bl	80013ac <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa4 	bl	80014a4 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800156c:	f3bf 8f5f 	dmb	sy
}
 8001570:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <HAL_MPU_Disable+0x28>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	4a06      	ldr	r2, [pc, #24]	@ (8001590 <HAL_MPU_Disable+0x28>)
 8001578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800157c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800157e:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <HAL_MPU_Disable+0x2c>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	e000ed90 	.word	0xe000ed90

08001598 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015a0:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <HAL_MPU_Enable+0x38>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_MPU_Enable+0x3c>)
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ae:	4a09      	ldr	r2, [pc, #36]	@ (80015d4 <HAL_MPU_Enable+0x3c>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015b6:	f3bf 8f4f 	dsb	sy
}
 80015ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015bc:	f3bf 8f6f 	isb	sy
}
 80015c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed90 	.word	0xe000ed90
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785a      	ldrb	r2, [r3, #1]
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_MPU_ConfigRegion+0x7c>)
 80015e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <HAL_MPU_ConfigRegion+0x7c>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	4a19      	ldr	r2, [pc, #100]	@ (8001654 <HAL_MPU_ConfigRegion+0x7c>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015f4:	4a17      	ldr	r2, [pc, #92]	@ (8001654 <HAL_MPU_ConfigRegion+0x7c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7b1b      	ldrb	r3, [r3, #12]
 8001600:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7adb      	ldrb	r3, [r3, #11]
 8001606:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001608:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7a9b      	ldrb	r3, [r3, #10]
 800160e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001610:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7b5b      	ldrb	r3, [r3, #13]
 8001616:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001618:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7b9b      	ldrb	r3, [r3, #14]
 800161e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001620:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7bdb      	ldrb	r3, [r3, #15]
 8001626:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7a5b      	ldrb	r3, [r3, #9]
 800162e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001630:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7a1b      	ldrb	r3, [r3, #8]
 8001636:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001638:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001642:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001644:	6113      	str	r3, [r2, #16]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed90 	.word	0xe000ed90

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001666:	4b86      	ldr	r3, [pc, #536]	@ (8001880 <HAL_GPIO_Init+0x228>)
 8001668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800166a:	e18c      	b.n	8001986 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 817e 	beq.w	8001980 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d005      	beq.n	800169c <HAL_GPIO_Init+0x44>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d130      	bne.n	80016fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d2:	2201      	movs	r2, #1
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 0201 	and.w	r2, r3, #1
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b03      	cmp	r3, #3
 8001708:	d017      	beq.n	800173a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d123      	bne.n	800178e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	08da      	lsrs	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	69b9      	ldr	r1, [r7, #24]
 800178a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0203 	and.w	r2, r3, #3
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80d8 	beq.w	8001980 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001884 <HAL_GPIO_Init+0x22c>)
 80017d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001884 <HAL_GPIO_Init+0x22c>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017e0:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <HAL_GPIO_Init+0x22c>)
 80017e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ee:	4a26      	ldr	r2, [pc, #152]	@ (8001888 <HAL_GPIO_Init+0x230>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <HAL_GPIO_Init+0x234>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d04a      	beq.n	80018b0 <HAL_GPIO_Init+0x258>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <HAL_GPIO_Init+0x238>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d02b      	beq.n	800187a <HAL_GPIO_Init+0x222>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <HAL_GPIO_Init+0x23c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d025      	beq.n	8001876 <HAL_GPIO_Init+0x21e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <HAL_GPIO_Init+0x240>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d01f      	beq.n	8001872 <HAL_GPIO_Init+0x21a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a19      	ldr	r2, [pc, #100]	@ (800189c <HAL_GPIO_Init+0x244>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d019      	beq.n	800186e <HAL_GPIO_Init+0x216>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a18      	ldr	r2, [pc, #96]	@ (80018a0 <HAL_GPIO_Init+0x248>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0x212>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <HAL_GPIO_Init+0x24c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d00d      	beq.n	8001866 <HAL_GPIO_Init+0x20e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a16      	ldr	r2, [pc, #88]	@ (80018a8 <HAL_GPIO_Init+0x250>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x20a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a15      	ldr	r2, [pc, #84]	@ (80018ac <HAL_GPIO_Init+0x254>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <HAL_GPIO_Init+0x206>
 800185a:	2309      	movs	r3, #9
 800185c:	e029      	b.n	80018b2 <HAL_GPIO_Init+0x25a>
 800185e:	230a      	movs	r3, #10
 8001860:	e027      	b.n	80018b2 <HAL_GPIO_Init+0x25a>
 8001862:	2307      	movs	r3, #7
 8001864:	e025      	b.n	80018b2 <HAL_GPIO_Init+0x25a>
 8001866:	2306      	movs	r3, #6
 8001868:	e023      	b.n	80018b2 <HAL_GPIO_Init+0x25a>
 800186a:	2305      	movs	r3, #5
 800186c:	e021      	b.n	80018b2 <HAL_GPIO_Init+0x25a>
 800186e:	2304      	movs	r3, #4
 8001870:	e01f      	b.n	80018b2 <HAL_GPIO_Init+0x25a>
 8001872:	2303      	movs	r3, #3
 8001874:	e01d      	b.n	80018b2 <HAL_GPIO_Init+0x25a>
 8001876:	2302      	movs	r3, #2
 8001878:	e01b      	b.n	80018b2 <HAL_GPIO_Init+0x25a>
 800187a:	2301      	movs	r3, #1
 800187c:	e019      	b.n	80018b2 <HAL_GPIO_Init+0x25a>
 800187e:	bf00      	nop
 8001880:	58000080 	.word	0x58000080
 8001884:	58024400 	.word	0x58024400
 8001888:	58000400 	.word	0x58000400
 800188c:	58020000 	.word	0x58020000
 8001890:	58020400 	.word	0x58020400
 8001894:	58020800 	.word	0x58020800
 8001898:	58020c00 	.word	0x58020c00
 800189c:	58021000 	.word	0x58021000
 80018a0:	58021400 	.word	0x58021400
 80018a4:	58021800 	.word	0x58021800
 80018a8:	58021c00 	.word	0x58021c00
 80018ac:	58022400 	.word	0x58022400
 80018b0:	2300      	movs	r3, #0
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	f002 0203 	and.w	r2, r2, #3
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	4093      	lsls	r3, r2
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c2:	4938      	ldr	r1, [pc, #224]	@ (80019a4 <HAL_GPIO_Init+0x34c>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001924:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3301      	adds	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f ae6b 	bne.w	800166c <HAL_GPIO_Init+0x14>
  }
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	3724      	adds	r7, #36	@ 0x24
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	58000400 	.word	0x58000400

080019a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0fe      	b.n	8001bb8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f008 fc1c 	bl	800a20c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f005 fb6e 	bl	80070c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7c1a      	ldrb	r2, [r3, #16]
 80019ee:	f88d 2000 	strb.w	r2, [sp]
 80019f2:	3304      	adds	r3, #4
 80019f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f6:	f005 fa3f 	bl	8006e78 <USB_CoreInit>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0d5      	b.n	8001bb8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 fb66 	bl	80070e4 <USB_SetCurrentMode>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0c6      	b.n	8001bb8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	e04a      	b.n	8001ac6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3315      	adds	r3, #21
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	3314      	adds	r3, #20
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	b298      	uxth	r0, r3
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	332e      	adds	r3, #46	@ 0x2e
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a70:	7bfa      	ldrb	r2, [r7, #15]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3318      	adds	r3, #24
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	331c      	adds	r3, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3320      	adds	r3, #32
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	3324      	adds	r3, #36	@ 0x24
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	791b      	ldrb	r3, [r3, #4]
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3af      	bcc.n	8001a30 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e044      	b.n	8001b60 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	791b      	ldrb	r3, [r3, #4]
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d3b5      	bcc.n	8001ad6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7c1a      	ldrb	r2, [r3, #16]
 8001b72:	f88d 2000 	strb.w	r2, [sp]
 8001b76:	3304      	adds	r3, #4
 8001b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7a:	f005 faff 	bl	800717c <USB_DevInit>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e013      	b.n	8001bb8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7b1b      	ldrb	r3, [r3, #12]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f001 f956 	bl	8002e58 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f006 fb42 	bl	800823a <USB_DevDisconnect>

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_PCD_Start+0x1c>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e022      	b.n	8001c22 <HAL_PCD_Start+0x62>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f005 fa49 	bl	80070a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f006 faf0 	bl	80081f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c2a:	b590      	push	{r4, r7, lr}
 8001c2c:	b08d      	sub	sp, #52	@ 0x34
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 fbae 	bl	80083a2 <USB_GetMode>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f040 84b9 	bne.w	80025c0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 fb12 	bl	800827c <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 84af 	beq.w	80025be <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 faff 	bl	800827c <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d107      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f002 0202 	and.w	r2, r2, #2
 8001c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f006 faed 	bl	800827c <USB_ReadInterrupts>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	d161      	bne.n	8001d70 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0210 	bic.w	r2, r2, #16
 8001cba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f003 020f 	and.w	r2, r3, #15
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3304      	adds	r3, #4
 8001cda:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	0c5b      	lsrs	r3, r3, #17
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d124      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d035      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	6a38      	ldr	r0, [r7, #32]
 8001d08:	f006 f924 	bl	8007f54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d18:	441a      	add	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d2a:	441a      	add	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	615a      	str	r2, [r3, #20]
 8001d30:	e016      	b.n	8001d60 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	0c5b      	lsrs	r3, r3, #17
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d110      	bne.n	8001d60 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d44:	2208      	movs	r2, #8
 8001d46:	4619      	mov	r1, r3
 8001d48:	6a38      	ldr	r0, [r7, #32]
 8001d4a:	f006 f903 	bl	8007f54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d5a:	441a      	add	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0210 	orr.w	r2, r2, #16
 8001d6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f006 fa81 	bl	800827c <USB_ReadInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001d84:	f040 80a7 	bne.w	8001ed6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f006 fa86 	bl	80082a2 <USB_ReadDevAllOutEpInterrupt>
 8001d96:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001d98:	e099      	b.n	8001ece <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 808e 	beq.w	8001ec2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f006 faaa 	bl	800830a <USB_ReadDevOutEPInterrupt>
 8001db6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00c      	beq.n	8001ddc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 feb8 	bl	8002b4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00c      	beq.n	8001e00 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001df2:	461a      	mov	r2, r3
 8001df4:	2308      	movs	r3, #8
 8001df6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 ff8e 	bl	8002d1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e16:	461a      	mov	r2, r3
 8001e18:	2310      	movs	r3, #16
 8001e1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d030      	beq.n	8001e88 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2e:	2b80      	cmp	r3, #128	@ 0x80
 8001e30:	d109      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e44:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	78db      	ldrb	r3, [r3, #3]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d108      	bne.n	8001e76 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2200      	movs	r2, #0
 8001e68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f008 fb4d 	bl	800a510 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e82:	461a      	mov	r2, r3
 8001e84:	2302      	movs	r3, #2
 8001e86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ec0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f47f af62 	bne.w	8001d9a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f006 f9ce 	bl	800827c <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ee6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001eea:	f040 80db 	bne.w	80020a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f006 f9ef 	bl	80082d6 <USB_ReadDevAllInEpInterrupt>
 8001ef8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001efe:	e0cd      	b.n	800209c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80c2 	beq.w	8002090 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f006 fa15 	bl	8008346 <USB_ReadDevInEPInterrupt>
 8001f1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d057      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	2201      	movs	r2, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69f9      	ldr	r1, [r7, #28]
 8001f44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f48:	4013      	ands	r3, r2
 8001f4a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	799b      	ldrb	r3, [r3, #6]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d132      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3320      	adds	r3, #32
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4403      	add	r3, r0
 8001f86:	331c      	adds	r3, #28
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4419      	add	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4403      	add	r3, r0
 8001f9a:	3320      	adds	r3, #32
 8001f9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d113      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x3a2>
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3324      	adds	r3, #36	@ 0x24
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d108      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	f006 fa1e 	bl	8008408 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f008 fa17 	bl	800a406 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800200a:	461a      	mov	r2, r3
 800200c:	2310      	movs	r3, #16
 800200e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002026:	461a      	mov	r2, r3
 8002028:	2340      	movs	r3, #64	@ 0x40
 800202a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d023      	beq.n	800207e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002036:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002038:	6a38      	ldr	r0, [r7, #32]
 800203a:	f005 f9fd 	bl	8007438 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800203e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	3310      	adds	r3, #16
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	78db      	ldrb	r3, [r3, #3]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d108      	bne.n	800206c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f008 fa64 	bl	800a534 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	4413      	add	r3, r2
 8002074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002078:	461a      	mov	r2, r3
 800207a:	2302      	movs	r3, #2
 800207c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fcd2 	bl	8002a34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	3301      	adds	r3, #1
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f47f af2e 	bne.w	8001f00 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f006 f8e7 	bl	800827c <USB_ReadInterrupts>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020b8:	d122      	bne.n	8002100 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020e0:	2100      	movs	r1, #0
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fedc 	bl	8002ea0 <HAL_PCDEx_LPM_Callback>
 80020e8:	e002      	b.n	80020f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f008 fa02 	bl	800a4f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80020fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f006 f8b9 	bl	800827c <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002114:	d112      	bne.n	800213c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f008 f9be 	bl	800a4a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800213a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f006 f89b 	bl	800827c <USB_ReadInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800214c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002150:	d121      	bne.n	8002196 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002160:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002168:	2b00      	cmp	r3, #0
 800216a:	d111      	bne.n	8002190 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002186:	2101      	movs	r1, #1
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fe89 	bl	8002ea0 <HAL_PCDEx_LPM_Callback>
 800218e:	e002      	b.n	8002196 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f008 f989 	bl	800a4a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f006 f86e 	bl	800827c <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021aa:	f040 80b7 	bne.w	800231c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2110      	movs	r1, #16
 80021c8:	4618      	mov	r0, r3
 80021ca:	f005 f935 	bl	8007438 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d2:	e046      	b.n	8002262 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021e0:	461a      	mov	r2, r3
 80021e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80021e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021f8:	0151      	lsls	r1, r2, #5
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	440a      	add	r2, r1
 80021fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002202:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002206:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002214:	461a      	mov	r2, r3
 8002216:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800221a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800221c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	4413      	add	r3, r2
 8002224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800222c:	0151      	lsls	r1, r2, #5
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	440a      	add	r2, r1
 8002232:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002236:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800223a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800223c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800224c:	0151      	lsls	r1, r2, #5
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	440a      	add	r2, r1
 8002252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002256:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800225a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800225e:	3301      	adds	r3, #1
 8002260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	791b      	ldrb	r3, [r3, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226a:	4293      	cmp	r3, r2
 800226c:	d3b2      	bcc.n	80021d4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800227c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002280:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7bdb      	ldrb	r3, [r3, #15]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800229a:	f043 030b 	orr.w	r3, r3, #11
 800229e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022b0:	f043 030b 	orr.w	r3, r3, #11
 80022b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b6:	e015      	b.n	80022e4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022c6:	4619      	mov	r1, r3
 80022c8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80022cc:	4313      	orrs	r3, r2
 80022ce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022de:	f043 030b 	orr.w	r3, r3, #11
 80022e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80022f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002306:	461a      	mov	r2, r3
 8002308:	f006 f87e 	bl	8008408 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800231a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f005 ffab 	bl	800827c <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800232c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002330:	d123      	bne.n	800237a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f006 f842 	bl	80083c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f005 f8f2 	bl	800752a <USB_GetDevSpeed>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681c      	ldr	r4, [r3, #0]
 8002352:	f001 fd05 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8002356:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800235c:	461a      	mov	r2, r3
 800235e:	4620      	mov	r0, r4
 8002360:	f004 fdfc 	bl	8006f5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f008 f876 	bl	800a456 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002378:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f005 ff7c 	bl	800827c <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b08      	cmp	r3, #8
 800238c:	d10a      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f008 f853 	bl	800a43a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f002 0208 	and.w	r2, r2, #8
 80023a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f005 ff67 	bl	800827c <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b4:	2b80      	cmp	r3, #128	@ 0x80
 80023b6:	d123      	bne.n	8002400 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023c4:	2301      	movs	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c8:	e014      	b.n	80023f4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 faf2 	bl	80029d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	3301      	adds	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	791b      	ldrb	r3, [r3, #4]
 80023f8:	461a      	mov	r2, r3
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d3e4      	bcc.n	80023ca <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f005 ff39 	bl	800827c <USB_ReadInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002414:	d13c      	bne.n	8002490 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002416:	2301      	movs	r3, #1
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
 800241a:	e02b      	b.n	8002474 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3318      	adds	r3, #24
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d115      	bne.n	800246e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002442:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002444:	2b00      	cmp	r3, #0
 8002446:	da12      	bge.n	800246e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3317      	adds	r3, #23
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fab2 	bl	80029d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	3301      	adds	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	461a      	mov	r2, r3
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	4293      	cmp	r3, r2
 800247e:	d3cd      	bcc.n	800241c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800248e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f005 fef1 	bl	800827c <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024a4:	d156      	bne.n	8002554 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024a6:	2301      	movs	r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024aa:	e045      	b.n	8002538 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d12e      	bne.n	8002532 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da2b      	bge.n	8002532 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	0c1a      	lsrs	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80024e4:	4053      	eors	r3, r2
 80024e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d121      	bne.n	8002532 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800252a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800252e:	6053      	str	r3, [r2, #4]
            break;
 8002530:	e008      	b.n	8002544 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	791b      	ldrb	r3, [r3, #4]
 800253c:	461a      	mov	r2, r3
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	4293      	cmp	r3, r2
 8002542:	d3b3      	bcc.n	80024ac <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002552:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f005 fe8f 	bl	800827c <USB_ReadInterrupts>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002568:	d10a      	bne.n	8002580 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f007 fff4 	bl	800a558 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800257e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f005 fe79 	bl	800827c <USB_ReadInterrupts>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d115      	bne.n	80025c0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f007 ffe4 	bl	800a574 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	e000      	b.n	80025c0 <HAL_PCD_IRQHandler+0x996>
      return;
 80025be:	bf00      	nop
    }
  }
}
 80025c0:	3734      	adds	r7, #52	@ 0x34
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}

080025c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_PCD_SetAddress+0x1a>
 80025dc:	2302      	movs	r3, #2
 80025de:	e012      	b.n	8002606 <HAL_PCD_SetAddress+0x40>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f005 fdd8 	bl	80081ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	4608      	mov	r0, r1
 8002618:	4611      	mov	r1, r2
 800261a:	461a      	mov	r2, r3
 800261c:	4603      	mov	r3, r0
 800261e:	70fb      	strb	r3, [r7, #3]
 8002620:	460b      	mov	r3, r1
 8002622:	803b      	strh	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800262c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002630:	2b00      	cmp	r3, #0
 8002632:	da0f      	bge.n	8002654 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	f003 020f 	and.w	r2, r3, #15
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	3310      	adds	r3, #16
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	705a      	strb	r2, [r3, #1]
 8002652:	e00f      	b.n	8002674 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	3304      	adds	r3, #4
 800266c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	b2da      	uxtb	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002680:	883b      	ldrh	r3, [r7, #0]
 8002682:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	78ba      	ldrb	r2, [r7, #2]
 800268e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026a2:	78bb      	ldrb	r3, [r7, #2]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d102      	bne.n	80026ae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_PCD_EP_Open+0xae>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e00e      	b.n	80026da <HAL_PCD_EP_Open+0xcc>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68f9      	ldr	r1, [r7, #12]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 ff52 	bl	8007574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80026d8:	7afb      	ldrb	r3, [r7, #11]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	da0f      	bge.n	8002716 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	f003 020f 	and.w	r2, r3, #15
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	3310      	adds	r3, #16
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	3304      	adds	r3, #4
 800270c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	705a      	strb	r2, [r3, #1]
 8002714:	e00f      	b.n	8002736 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	f003 020f 	and.w	r2, r3, #15
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	3304      	adds	r3, #4
 800272e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	b2da      	uxtb	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_PCD_EP_Close+0x6e>
 800274c:	2302      	movs	r3, #2
 800274e:	e00e      	b.n	800276e <HAL_PCD_EP_Close+0x8c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68f9      	ldr	r1, [r7, #12]
 800275e:	4618      	mov	r0, r3
 8002760:	f004 ff90 	bl	8007684 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	460b      	mov	r3, r1
 8002784:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002786:	7afb      	ldrb	r3, [r7, #11]
 8002788:	f003 020f 	and.w	r2, r3, #15
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	3304      	adds	r3, #4
 800279e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b8:	7afb      	ldrb	r3, [r7, #11]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	799b      	ldrb	r3, [r3, #6]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d102      	bne.n	80027d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	799b      	ldrb	r3, [r3, #6]
 80027da:	461a      	mov	r2, r3
 80027dc:	6979      	ldr	r1, [r7, #20]
 80027de:	f005 f82d 	bl	800783c <USB_EPStartXfer>

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	460b      	mov	r3, r1
 80027fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fc:	7afb      	ldrb	r3, [r7, #11]
 80027fe:	f003 020f 	and.w	r2, r3, #15
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	3310      	adds	r3, #16
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2200      	movs	r2, #0
 8002824:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2201      	movs	r2, #1
 800282a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	b2da      	uxtb	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	799b      	ldrb	r3, [r3, #6]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d102      	bne.n	8002846 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	799b      	ldrb	r3, [r3, #6]
 800284e:	461a      	mov	r2, r3
 8002850:	6979      	ldr	r1, [r7, #20]
 8002852:	f004 fff3 	bl	800783c <USB_EPStartXfer>

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	7912      	ldrb	r2, [r2, #4]
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e04f      	b.n	800291e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800287e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002882:	2b00      	cmp	r3, #0
 8002884:	da0f      	bge.n	80028a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 020f 	and.w	r2, r3, #15
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	3310      	adds	r3, #16
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	705a      	strb	r2, [r3, #1]
 80028a4:	e00d      	b.n	80028c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	3304      	adds	r3, #4
 80028ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_PCD_EP_SetStall+0x82>
 80028de:	2302      	movs	r3, #2
 80028e0:	e01d      	b.n	800291e <HAL_PCD_EP_SetStall+0xbe>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68f9      	ldr	r1, [r7, #12]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f005 fb87 	bl	8008004 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7999      	ldrb	r1, [r3, #6]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800290e:	461a      	mov	r2, r3
 8002910:	f005 fd7a 	bl	8008408 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	7912      	ldrb	r2, [r2, #4]
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e042      	b.n	80029ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002948:	2b00      	cmp	r3, #0
 800294a:	da0f      	bge.n	800296c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	3310      	adds	r3, #16
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	3304      	adds	r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	705a      	strb	r2, [r3, #1]
 800296a:	e00f      	b.n	800298c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	b2da      	uxtb	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_PCD_EP_ClrStall+0x86>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e00e      	b.n	80029ca <HAL_PCD_EP_ClrStall+0xa4>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f005 fb90 	bl	80080e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	da0c      	bge.n	8002a00 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	3310      	adds	r3, #16
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	3304      	adds	r3, #4
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e00c      	b.n	8002a1a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	3304      	adds	r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f005 f9af 	bl	8007d84 <USB_EPStopXfer>
 8002a26:	4603      	mov	r3, r0
 8002a28:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	@ 0x28
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	3310      	adds	r3, #16
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d901      	bls.n	8002a6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e06b      	b.n	8002b44 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d902      	bls.n	8002a88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3303      	adds	r3, #3
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a90:	e02a      	b.n	8002ae8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d902      	bls.n	8002aae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3303      	adds	r3, #3
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	68d9      	ldr	r1, [r3, #12]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	4603      	mov	r3, r0
 8002aca:	6978      	ldr	r0, [r7, #20]
 8002acc:	f005 fa04 	bl	8007ed8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	441a      	add	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d809      	bhi.n	8002b12 <PCD_WriteEmptyTxFifo+0xde>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d203      	bcs.n	8002b12 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1bf      	bne.n	8002a92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d811      	bhi.n	8002b42 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	2201      	movs	r2, #1
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	6939      	ldr	r1, [r7, #16]
 8002b3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b3e:	4013      	ands	r3, r2
 8002b40:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	333c      	adds	r3, #60	@ 0x3c
 8002b64:	3304      	adds	r3, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	799b      	ldrb	r3, [r3, #6]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d17b      	bne.n	8002c7a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d015      	beq.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	4a61      	ldr	r2, [pc, #388]	@ (8002d14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	f240 80b9 	bls.w	8002d08 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80b3 	beq.w	8002d08 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bb4:	6093      	str	r3, [r2, #8]
 8002bb6:	e0a7      	b.n	8002d08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	6093      	str	r3, [r2, #8]
 8002bd4:	e098      	b.n	8002d08 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 8093 	bne.w	8002d08 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d90f      	bls.n	8002c0a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c00:	461a      	mov	r2, r3
 8002c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c06:	6093      	str	r3, [r2, #8]
 8002c08:	e07e      	b.n	8002d08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	0159      	lsls	r1, r3, #5
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c36:	1ad2      	subs	r2, r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d114      	bne.n	8002c6c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c54:	461a      	mov	r2, r3
 8002c56:	2101      	movs	r1, #1
 8002c58:	f005 fbd6 	bl	8008408 <USB_EP0_OutStart>
 8002c5c:	e006      	b.n	8002c6c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	441a      	add	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f007 fbac 	bl	800a3d0 <HAL_PCD_DataOutStageCallback>
 8002c78:	e046      	b.n	8002d08 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4a26      	ldr	r2, [pc, #152]	@ (8002d18 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d124      	bne.n	8002ccc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c9e:	6093      	str	r3, [r2, #8]
 8002ca0:	e032      	b.n	8002d08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2320      	movs	r3, #32
 8002cbc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f007 fb83 	bl	800a3d0 <HAL_PCD_DataOutStageCallback>
 8002cca:	e01d      	b.n	8002d08 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d114      	bne.n	8002cfc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d108      	bne.n	8002cfc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	f005 fb86 	bl	8008408 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f007 fb64 	bl	800a3d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	4f54300a 	.word	0x4f54300a
 8002d18:	4f54310a 	.word	0x4f54310a

08002d1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	333c      	adds	r3, #60	@ 0x3c
 8002d34:	3304      	adds	r3, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a15      	ldr	r2, [pc, #84]	@ (8002da4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d90e      	bls.n	8002d70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f007 fb1b 	bl	800a3ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d90c      	bls.n	8002d98 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	799b      	ldrb	r3, [r3, #6]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d108      	bne.n	8002d98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d90:	461a      	mov	r2, r3
 8002d92:	2101      	movs	r1, #1
 8002d94:	f005 fb38 	bl	8008408 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	4f54300a 	.word	0x4f54300a

08002da8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
 8002db4:	4613      	mov	r3, r2
 8002db6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002dc6:	883b      	ldrh	r3, [r7, #0]
 8002dc8:	0419      	lsls	r1, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dd4:	e028      	b.n	8002e28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4413      	add	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	e00d      	b.n	8002e06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	3340      	adds	r3, #64	@ 0x40
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	3301      	adds	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3ec      	bcc.n	8002dea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e10:	883b      	ldrh	r3, [r7, #0]
 8002e12:	0418      	lsls	r0, r3, #16
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	4302      	orrs	r2, r0
 8002e20:	3340      	adds	r3, #64	@ 0x40
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e86:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <HAL_PCDEx_ActivateLPM+0x44>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	10000003 	.word	0x10000003

08002ea0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_PWREx_ConfigSupply+0x70>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d00a      	beq.n	8002ee2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ecc:	4b16      	ldr	r3, [pc, #88]	@ (8002f28 <HAL_PWREx_ConfigSupply+0x70>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d001      	beq.n	8002ede <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e01f      	b.n	8002f1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e01d      	b.n	8002f1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ee2:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <HAL_PWREx_ConfigSupply+0x70>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f023 0207 	bic.w	r2, r3, #7
 8002eea:	490f      	ldr	r1, [pc, #60]	@ (8002f28 <HAL_PWREx_ConfigSupply+0x70>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ef2:	f7fe f9f9 	bl	80012e8 <HAL_GetTick>
 8002ef6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ef8:	e009      	b.n	8002f0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002efa:	f7fe f9f5 	bl	80012e8 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f08:	d901      	bls.n	8002f0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e007      	b.n	8002f1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f0e:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_PWREx_ConfigSupply+0x70>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f1a:	d1ee      	bne.n	8002efa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	58024800 	.word	0x58024800

08002f2c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	58024800 	.word	0x58024800

08002f4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08c      	sub	sp, #48	@ 0x30
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e3c8      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8087 	beq.w	800307a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6c:	4b88      	ldr	r3, [pc, #544]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f76:	4b86      	ldr	r3, [pc, #536]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d007      	beq.n	8002f92 <HAL_RCC_OscConfig+0x46>
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	2b18      	cmp	r3, #24
 8002f86:	d110      	bne.n	8002faa <HAL_RCC_OscConfig+0x5e>
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d10b      	bne.n	8002faa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f92:	4b7f      	ldr	r3, [pc, #508]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d06c      	beq.n	8003078 <HAL_RCC_OscConfig+0x12c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d168      	bne.n	8003078 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e3a2      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x76>
 8002fb4:	4b76      	ldr	r3, [pc, #472]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a75      	ldr	r2, [pc, #468]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	e02e      	b.n	8003020 <HAL_RCC_OscConfig+0xd4>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x98>
 8002fca:	4b71      	ldr	r3, [pc, #452]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a70      	ldr	r2, [pc, #448]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6d      	ldr	r2, [pc, #436]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002fdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e01d      	b.n	8003020 <HAL_RCC_OscConfig+0xd4>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0xbc>
 8002fee:	4b68      	ldr	r3, [pc, #416]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a67      	ldr	r2, [pc, #412]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b65      	ldr	r3, [pc, #404]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a64      	ldr	r2, [pc, #400]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0xd4>
 8003008:	4b61      	ldr	r3, [pc, #388]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a60      	ldr	r2, [pc, #384]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800300e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b5e      	ldr	r3, [pc, #376]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a5d      	ldr	r2, [pc, #372]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800301a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800301e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe f95e 	bl	80012e8 <HAL_GetTick>
 800302c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe f95a 	bl	80012e8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	@ 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e356      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003042:	4b53      	ldr	r3, [pc, #332]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0xe4>
 800304e:	e014      	b.n	800307a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f94a 	bl	80012e8 <HAL_GetTick>
 8003054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe f946 	bl	80012e8 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	@ 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e342      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800306a:	4b49      	ldr	r3, [pc, #292]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x10c>
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 808c 	beq.w	80031a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003088:	4b41      	ldr	r3, [pc, #260]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003090:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003092:	4b3f      	ldr	r3, [pc, #252]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_RCC_OscConfig+0x162>
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	2b18      	cmp	r3, #24
 80030a2:	d137      	bne.n	8003114 <HAL_RCC_OscConfig+0x1c8>
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d132      	bne.n	8003114 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ae:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_RCC_OscConfig+0x17a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e314      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030c6:	4b32      	ldr	r3, [pc, #200]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 0219 	bic.w	r2, r3, #25
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	492f      	ldr	r1, [pc, #188]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fe f906 	bl	80012e8 <HAL_GetTick>
 80030dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e0:	f7fe f902 	bl	80012e8 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e2fe      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030f2:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	4920      	ldr	r1, [pc, #128]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003112:	e045      	b.n	80031a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d026      	beq.n	800316a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800311c:	4b1c      	ldr	r3, [pc, #112]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 0219 	bic.w	r2, r3, #25
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4919      	ldr	r1, [pc, #100]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fe f8db 	bl	80012e8 <HAL_GetTick>
 8003132:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003136:	f7fe f8d7 	bl	80012e8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e2d3      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003154:	4b0e      	ldr	r3, [pc, #56]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	490b      	ldr	r1, [pc, #44]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
 8003168:	e01a      	b.n	80031a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316a:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a08      	ldr	r2, [pc, #32]	@ (8003190 <HAL_RCC_OscConfig+0x244>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fe f8b7 	bl	80012e8 <HAL_GetTick>
 800317a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317e:	f7fe f8b3 	bl	80012e8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d903      	bls.n	8003194 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e2af      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
 8003190:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003194:	4b96      	ldr	r3, [pc, #600]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ee      	bne.n	800317e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d06a      	beq.n	8003282 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ac:	4b90      	ldr	r3, [pc, #576]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031b6:	4b8e      	ldr	r3, [pc, #568]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d007      	beq.n	80031d2 <HAL_RCC_OscConfig+0x286>
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b18      	cmp	r3, #24
 80031c6:	d11b      	bne.n	8003200 <HAL_RCC_OscConfig+0x2b4>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031d2:	4b87      	ldr	r3, [pc, #540]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x29e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	2b80      	cmp	r3, #128	@ 0x80
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e282      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031ea:	4b81      	ldr	r3, [pc, #516]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	497d      	ldr	r1, [pc, #500]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031fe:	e040      	b.n	8003282 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003208:	4b79      	ldr	r3, [pc, #484]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a78      	ldr	r2, [pc, #480]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 800320e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe f868 	bl	80012e8 <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800321c:	f7fe f864 	bl	80012e8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e260      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800322e:	4b70      	ldr	r3, [pc, #448]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800323a:	4b6d      	ldr	r3, [pc, #436]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	4969      	ldr	r1, [pc, #420]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	60cb      	str	r3, [r1, #12]
 800324e:	e018      	b.n	8003282 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003250:	4b67      	ldr	r3, [pc, #412]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a66      	ldr	r2, [pc, #408]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800325a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe f844 	bl	80012e8 <HAL_GetTick>
 8003260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003264:	f7fe f840 	bl	80012e8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e23c      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003276:	4b5e      	ldr	r3, [pc, #376]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d036      	beq.n	80032fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d019      	beq.n	80032ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b56      	ldr	r3, [pc, #344]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329a:	4a55      	ldr	r2, [pc, #340]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fe f821 	bl	80012e8 <HAL_GetTick>
 80032a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fe f81d 	bl	80012e8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e219      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032bc:	4b4c      	ldr	r3, [pc, #304]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80032be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x35e>
 80032c8:	e018      	b.n	80032fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ca:	4b49      	ldr	r3, [pc, #292]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80032cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ce:	4a48      	ldr	r2, [pc, #288]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fe f807 	bl	80012e8 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032de:	f7fe f803 	bl	80012e8 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1ff      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032f0:	4b3f      	ldr	r3, [pc, #252]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d036      	beq.n	8003376 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d019      	beq.n	8003344 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003310:	4b37      	ldr	r3, [pc, #220]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a36      	ldr	r2, [pc, #216]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003316:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800331a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800331c:	f7fd ffe4 	bl	80012e8 <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003324:	f7fd ffe0 	bl	80012e8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1dc      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003336:	4b2e      	ldr	r3, [pc, #184]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x3d8>
 8003342:	e018      	b.n	8003376 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003344:	4b2a      	ldr	r3, [pc, #168]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a29      	ldr	r2, [pc, #164]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 800334a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800334e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003350:	f7fd ffca 	bl	80012e8 <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003358:	f7fd ffc6 	bl	80012e8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e1c2      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800336a:	4b21      	ldr	r3, [pc, #132]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8086 	beq.w	8003490 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003384:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <HAL_RCC_OscConfig+0x4a8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1a      	ldr	r2, [pc, #104]	@ (80033f4 <HAL_RCC_OscConfig+0x4a8>)
 800338a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003390:	f7fd ffaa 	bl	80012e8 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fd ffa6 	bl	80012e8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	@ 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1a2      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033aa:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <HAL_RCC_OscConfig+0x4a8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d106      	bne.n	80033cc <HAL_RCC_OscConfig+0x480>
 80033be:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	4a0b      	ldr	r2, [pc, #44]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ca:	e032      	b.n	8003432 <HAL_RCC_OscConfig+0x4e6>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4ac>
 80033d4:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d8:	4a05      	ldr	r2, [pc, #20]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e0:	4b03      	ldr	r3, [pc, #12]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e4:	4a02      	ldr	r2, [pc, #8]	@ (80033f0 <HAL_RCC_OscConfig+0x4a4>)
 80033e6:	f023 0304 	bic.w	r3, r3, #4
 80033ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ec:	e021      	b.n	8003432 <HAL_RCC_OscConfig+0x4e6>
 80033ee:	bf00      	nop
 80033f0:	58024400 	.word	0x58024400
 80033f4:	58024800 	.word	0x58024800
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d10c      	bne.n	800341a <HAL_RCC_OscConfig+0x4ce>
 8003400:	4b83      	ldr	r3, [pc, #524]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003404:	4a82      	ldr	r2, [pc, #520]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6713      	str	r3, [r2, #112]	@ 0x70
 800340c:	4b80      	ldr	r3, [pc, #512]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003410:	4a7f      	ldr	r2, [pc, #508]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6713      	str	r3, [r2, #112]	@ 0x70
 8003418:	e00b      	b.n	8003432 <HAL_RCC_OscConfig+0x4e6>
 800341a:	4b7d      	ldr	r3, [pc, #500]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	4a7c      	ldr	r2, [pc, #496]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6713      	str	r3, [r2, #112]	@ 0x70
 8003426:	4b7a      	ldr	r3, [pc, #488]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	4a79      	ldr	r2, [pc, #484]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d015      	beq.n	8003466 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fd ff55 	bl	80012e8 <HAL_GetTick>
 800343e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fd ff51 	bl	80012e8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e14b      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003458:	4b6d      	ldr	r3, [pc, #436]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ee      	beq.n	8003442 <HAL_RCC_OscConfig+0x4f6>
 8003464:	e014      	b.n	8003490 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fd ff3f 	bl	80012e8 <HAL_GetTick>
 800346a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fd ff3b 	bl	80012e8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e135      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003484:	4b62      	ldr	r3, [pc, #392]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ee      	bne.n	800346e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 812a 	beq.w	80036ee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800349a:	4b5d      	ldr	r3, [pc, #372]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034a2:	2b18      	cmp	r3, #24
 80034a4:	f000 80ba 	beq.w	800361c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	f040 8095 	bne.w	80035dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	4b57      	ldr	r3, [pc, #348]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a56      	ldr	r2, [pc, #344]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80034b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd ff13 	bl	80012e8 <HAL_GetTick>
 80034c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fd ff0f 	bl	80012e8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e10b      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f0      	bne.n	80034c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80034e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003614 <HAL_RCC_OscConfig+0x6c8>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	430a      	orrs	r2, r1
 80034f8:	4945      	ldr	r1, [pc, #276]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	3b01      	subs	r3, #1
 8003504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	3b01      	subs	r3, #1
 800350e:	025b      	lsls	r3, r3, #9
 8003510:	b29b      	uxth	r3, r3
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	3b01      	subs	r3, #1
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003526:	3b01      	subs	r3, #1
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800352e:	4938      	ldr	r1, [pc, #224]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003534:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	4a35      	ldr	r2, [pc, #212]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003540:	4b33      	ldr	r3, [pc, #204]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003544:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <HAL_RCC_OscConfig+0x6cc>)
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800354c:	00d2      	lsls	r2, r2, #3
 800354e:	4930      	ldr	r1, [pc, #192]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003554:	4b2e      	ldr	r3, [pc, #184]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003558:	f023 020c 	bic.w	r2, r3, #12
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	492b      	ldr	r1, [pc, #172]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003562:	4313      	orrs	r3, r2
 8003564:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003566:	4b2a      	ldr	r3, [pc, #168]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356a:	f023 0202 	bic.w	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	4927      	ldr	r1, [pc, #156]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003578:	4b25      	ldr	r3, [pc, #148]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	4a24      	ldr	r2, [pc, #144]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003584:	4b22      	ldr	r3, [pc, #136]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003588:	4a21      	ldr	r2, [pc, #132]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003590:	4b1f      	ldr	r3, [pc, #124]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	4a1e      	ldr	r2, [pc, #120]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003596:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800359a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800359c:	4b1c      	ldr	r3, [pc, #112]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	4b19      	ldr	r3, [pc, #100]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd fe98 	bl	80012e8 <HAL_GetTick>
 80035b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fd fe94 	bl	80012e8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e090      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035ce:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x670>
 80035da:	e088      	b.n	80036ee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd fe7e 	bl	80012e8 <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fd fe7a 	bl	80012e8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e076      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003602:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_RCC_OscConfig+0x6c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x6a4>
 800360e:	e06e      	b.n	80036ee <HAL_RCC_OscConfig+0x7a2>
 8003610:	58024400 	.word	0x58024400
 8003614:	fffffc0c 	.word	0xfffffc0c
 8003618:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800361c:	4b36      	ldr	r3, [pc, #216]	@ (80036f8 <HAL_RCC_OscConfig+0x7ac>)
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003622:	4b35      	ldr	r3, [pc, #212]	@ (80036f8 <HAL_RCC_OscConfig+0x7ac>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	2b01      	cmp	r3, #1
 800362e:	d031      	beq.n	8003694 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f003 0203 	and.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d12a      	bne.n	8003694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d122      	bne.n	8003694 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d11a      	bne.n	8003694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	0a5b      	lsrs	r3, r3, #9
 8003662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d111      	bne.n	8003694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d108      	bne.n	8003694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	0e1b      	lsrs	r3, r3, #24
 8003686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e02b      	b.n	80036f0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003698:	4b17      	ldr	r3, [pc, #92]	@ (80036f8 <HAL_RCC_OscConfig+0x7ac>)
 800369a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369c:	08db      	lsrs	r3, r3, #3
 800369e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d01f      	beq.n	80036ee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80036ae:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <HAL_RCC_OscConfig+0x7ac>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	4a11      	ldr	r2, [pc, #68]	@ (80036f8 <HAL_RCC_OscConfig+0x7ac>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036ba:	f7fd fe15 	bl	80012e8 <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80036c0:	bf00      	nop
 80036c2:	f7fd fe11 	bl	80012e8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d0f9      	beq.n	80036c2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036ce:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <HAL_RCC_OscConfig+0x7ac>)
 80036d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036d2:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <HAL_RCC_OscConfig+0x7b0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036da:	00d2      	lsls	r2, r2, #3
 80036dc:	4906      	ldr	r1, [pc, #24]	@ (80036f8 <HAL_RCC_OscConfig+0x7ac>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80036e2:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <HAL_RCC_OscConfig+0x7ac>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <HAL_RCC_OscConfig+0x7ac>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3730      	adds	r7, #48	@ 0x30
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	58024400 	.word	0x58024400
 80036fc:	ffff0007 	.word	0xffff0007

08003700 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e19c      	b.n	8003a4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003714:	4b8a      	ldr	r3, [pc, #552]	@ (8003940 <HAL_RCC_ClockConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d910      	bls.n	8003744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b87      	ldr	r3, [pc, #540]	@ (8003940 <HAL_RCC_ClockConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 020f 	bic.w	r2, r3, #15
 800372a:	4985      	ldr	r1, [pc, #532]	@ (8003940 <HAL_RCC_ClockConfig+0x240>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b83      	ldr	r3, [pc, #524]	@ (8003940 <HAL_RCC_ClockConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e184      	b.n	8003a4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d010      	beq.n	8003772 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	4b7b      	ldr	r3, [pc, #492]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800375c:	429a      	cmp	r2, r3
 800375e:	d908      	bls.n	8003772 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003760:	4b78      	ldr	r3, [pc, #480]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	4975      	ldr	r1, [pc, #468]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 800376e:	4313      	orrs	r3, r2
 8003770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	4b70      	ldr	r3, [pc, #448]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800378a:	429a      	cmp	r2, r3
 800378c:	d908      	bls.n	80037a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800378e:	4b6d      	ldr	r3, [pc, #436]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	496a      	ldr	r1, [pc, #424]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 800379c:	4313      	orrs	r3, r2
 800379e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d010      	beq.n	80037ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	4b64      	ldr	r3, [pc, #400]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d908      	bls.n	80037ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037bc:	4b61      	ldr	r3, [pc, #388]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	495e      	ldr	r1, [pc, #376]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d010      	beq.n	80037fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	4b59      	ldr	r3, [pc, #356]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d908      	bls.n	80037fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037ea:	4b56      	ldr	r3, [pc, #344]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4953      	ldr	r1, [pc, #332]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d010      	beq.n	800382a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	4b4d      	ldr	r3, [pc, #308]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	429a      	cmp	r2, r3
 8003816:	d908      	bls.n	800382a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f023 020f 	bic.w	r2, r3, #15
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4947      	ldr	r1, [pc, #284]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003826:	4313      	orrs	r3, r2
 8003828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d055      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003836:	4b43      	ldr	r3, [pc, #268]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	4940      	ldr	r1, [pc, #256]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003844:	4313      	orrs	r3, r2
 8003846:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d107      	bne.n	8003860 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003850:	4b3c      	ldr	r3, [pc, #240]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d121      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0f6      	b.n	8003a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d107      	bne.n	8003878 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003868:	4b36      	ldr	r3, [pc, #216]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d115      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0ea      	b.n	8003a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d107      	bne.n	8003890 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003880:	4b30      	ldr	r3, [pc, #192]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0de      	b.n	8003a4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003890:	4b2c      	ldr	r3, [pc, #176]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0d6      	b.n	8003a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038a0:	4b28      	ldr	r3, [pc, #160]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f023 0207 	bic.w	r2, r3, #7
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4925      	ldr	r1, [pc, #148]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b2:	f7fd fd19 	bl	80012e8 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ba:	f7fd fd15 	bl	80012e8 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e0be      	b.n	8003a4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	429a      	cmp	r2, r3
 80038e0:	d1eb      	bne.n	80038ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	4b14      	ldr	r3, [pc, #80]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d208      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fe:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f023 020f 	bic.w	r2, r3, #15
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	490e      	ldr	r1, [pc, #56]	@ (8003944 <HAL_RCC_ClockConfig+0x244>)
 800390c:	4313      	orrs	r3, r2
 800390e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003910:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <HAL_RCC_ClockConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d214      	bcs.n	8003948 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <HAL_RCC_ClockConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 020f 	bic.w	r2, r3, #15
 8003926:	4906      	ldr	r1, [pc, #24]	@ (8003940 <HAL_RCC_ClockConfig+0x240>)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <HAL_RCC_ClockConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e086      	b.n	8003a4e <HAL_RCC_ClockConfig+0x34e>
 8003940:	52002000 	.word	0x52002000
 8003944:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	4b3f      	ldr	r3, [pc, #252]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003960:	429a      	cmp	r2, r3
 8003962:	d208      	bcs.n	8003976 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003964:	4b3c      	ldr	r3, [pc, #240]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4939      	ldr	r1, [pc, #228]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 8003972:	4313      	orrs	r3, r2
 8003974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	4b34      	ldr	r3, [pc, #208]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800398e:	429a      	cmp	r2, r3
 8003990:	d208      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003992:	4b31      	ldr	r3, [pc, #196]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	492e      	ldr	r1, [pc, #184]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	4b28      	ldr	r3, [pc, #160]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039bc:	429a      	cmp	r2, r3
 80039be:	d208      	bcs.n	80039d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039c0:	4b25      	ldr	r3, [pc, #148]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	4922      	ldr	r1, [pc, #136]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d208      	bcs.n	8003a00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4917      	ldr	r1, [pc, #92]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a00:	f000 f834 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	4912      	ldr	r1, [pc, #72]	@ (8003a5c <HAL_RCC_ClockConfig+0x35c>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <HAL_RCC_ClockConfig+0x358>)
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	4a0d      	ldr	r2, [pc, #52]	@ (8003a5c <HAL_RCC_ClockConfig+0x35c>)
 8003a28:	5cd3      	ldrb	r3, [r2, r3]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
 8003a34:	4a0a      	ldr	r2, [pc, #40]	@ (8003a60 <HAL_RCC_ClockConfig+0x360>)
 8003a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a38:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <HAL_RCC_ClockConfig+0x364>)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <HAL_RCC_ClockConfig+0x368>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd fc06 	bl	8001254 <HAL_InitTick>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	58024400 	.word	0x58024400
 8003a5c:	0800b458 	.word	0x0800b458
 8003a60:	24000004 	.word	0x24000004
 8003a64:	24000000 	.word	0x24000000
 8003a68:	24000008 	.word	0x24000008

08003a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	@ 0x24
 8003a70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a72:	4bb3      	ldr	r3, [pc, #716]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a7a:	2b18      	cmp	r3, #24
 8003a7c:	f200 8155 	bhi.w	8003d2a <HAL_RCC_GetSysClockFreq+0x2be>
 8003a80:	a201      	add	r2, pc, #4	@ (adr r2, 8003a88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003aed 	.word	0x08003aed
 8003a8c:	08003d2b 	.word	0x08003d2b
 8003a90:	08003d2b 	.word	0x08003d2b
 8003a94:	08003d2b 	.word	0x08003d2b
 8003a98:	08003d2b 	.word	0x08003d2b
 8003a9c:	08003d2b 	.word	0x08003d2b
 8003aa0:	08003d2b 	.word	0x08003d2b
 8003aa4:	08003d2b 	.word	0x08003d2b
 8003aa8:	08003b13 	.word	0x08003b13
 8003aac:	08003d2b 	.word	0x08003d2b
 8003ab0:	08003d2b 	.word	0x08003d2b
 8003ab4:	08003d2b 	.word	0x08003d2b
 8003ab8:	08003d2b 	.word	0x08003d2b
 8003abc:	08003d2b 	.word	0x08003d2b
 8003ac0:	08003d2b 	.word	0x08003d2b
 8003ac4:	08003d2b 	.word	0x08003d2b
 8003ac8:	08003b19 	.word	0x08003b19
 8003acc:	08003d2b 	.word	0x08003d2b
 8003ad0:	08003d2b 	.word	0x08003d2b
 8003ad4:	08003d2b 	.word	0x08003d2b
 8003ad8:	08003d2b 	.word	0x08003d2b
 8003adc:	08003d2b 	.word	0x08003d2b
 8003ae0:	08003d2b 	.word	0x08003d2b
 8003ae4:	08003d2b 	.word	0x08003d2b
 8003ae8:	08003b1f 	.word	0x08003b1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aec:	4b94      	ldr	r3, [pc, #592]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d009      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003af8:	4b91      	ldr	r3, [pc, #580]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	08db      	lsrs	r3, r3, #3
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	4a90      	ldr	r2, [pc, #576]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
 8003b08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003b0a:	e111      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b0c:	4b8d      	ldr	r3, [pc, #564]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b0e:	61bb      	str	r3, [r7, #24]
      break;
 8003b10:	e10e      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003b12:	4b8d      	ldr	r3, [pc, #564]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b14:	61bb      	str	r3, [r7, #24]
      break;
 8003b16:	e10b      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003b18:	4b8c      	ldr	r3, [pc, #560]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b1a:	61bb      	str	r3, [r7, #24]
      break;
 8003b1c:	e108      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b1e:	4b88      	ldr	r3, [pc, #544]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003b28:	4b85      	ldr	r3, [pc, #532]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b34:	4b82      	ldr	r3, [pc, #520]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b3e:	4b80      	ldr	r3, [pc, #512]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b42:	08db      	lsrs	r3, r3, #3
 8003b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80e1 	beq.w	8003d24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	f000 8083 	beq.w	8003c70 <HAL_RCC_GetSysClockFreq+0x204>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	f200 80a1 	bhi.w	8003cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x114>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d056      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b7e:	e099      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b80:	4b6f      	ldr	r3, [pc, #444]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02d      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	08db      	lsrs	r3, r3, #3
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	4a6b      	ldr	r2, [pc, #428]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	ee07 3a90 	vmov	s15, r3
 8003ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb6:	4b62      	ldr	r3, [pc, #392]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003be6:	e087      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003d54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfa:	4b51      	ldr	r3, [pc, #324]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c2a:	e065      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3e:	4b40      	ldr	r3, [pc, #256]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c6e:	e043      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003d5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c82:	4b2f      	ldr	r3, [pc, #188]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cb2:	e021      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cf6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfc:	0a5b      	lsrs	r3, r3, #9
 8003cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d02:	3301      	adds	r3, #1
 8003d04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d1c:	ee17 3a90 	vmov	r3, s15
 8003d20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003d22:	e005      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
      break;
 8003d28:	e002      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003d2a:	4b07      	ldr	r3, [pc, #28]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d2c:	61bb      	str	r3, [r7, #24]
      break;
 8003d2e:	bf00      	nop
  }

  return sysclockfreq;
 8003d30:	69bb      	ldr	r3, [r7, #24]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3724      	adds	r7, #36	@ 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	58024400 	.word	0x58024400
 8003d44:	03d09000 	.word	0x03d09000
 8003d48:	003d0900 	.word	0x003d0900
 8003d4c:	017d7840 	.word	0x017d7840
 8003d50:	46000000 	.word	0x46000000
 8003d54:	4c742400 	.word	0x4c742400
 8003d58:	4a742400 	.word	0x4a742400
 8003d5c:	4bbebc20 	.word	0x4bbebc20

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d66:	f7ff fe81 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	490f      	ldr	r1, [pc, #60]	@ (8003db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d78:	5ccb      	ldrb	r3, [r1, r3]
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d84:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	4a09      	ldr	r2, [pc, #36]	@ (8003db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d8e:	5cd3      	ldrb	r3, [r2, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9a:	4a07      	ldr	r2, [pc, #28]	@ (8003db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d9e:	4a07      	ldr	r2, [pc, #28]	@ (8003dbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003da4:	4b04      	ldr	r3, [pc, #16]	@ (8003db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	58024400 	.word	0x58024400
 8003db4:	0800b458 	.word	0x0800b458
 8003db8:	24000004 	.word	0x24000004
 8003dbc:	24000000 	.word	0x24000000

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003dc4:	f7ff ffcc 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4904      	ldr	r1, [pc, #16]	@ (8003de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	58024400 	.word	0x58024400
 8003de8:	0800b458 	.word	0x0800b458

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003df0:	f7ff ffb6 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4904      	ldr	r1, [pc, #16]	@ (8003e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	58024400 	.word	0x58024400
 8003e14:	0800b458 	.word	0x0800b458

08003e18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e1c:	b0c6      	sub	sp, #280	@ 0x118
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003e3c:	2500      	movs	r5, #0
 8003e3e:	ea54 0305 	orrs.w	r3, r4, r5
 8003e42:	d049      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e4e:	d02f      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003e50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e54:	d828      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e5a:	d01a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e60:	d822      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e6a:	d007      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e6c:	e01c      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6e:	4bab      	ldr	r3, [pc, #684]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	4aaa      	ldr	r2, [pc, #680]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e7a:	e01a      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e80:	3308      	adds	r3, #8
 8003e82:	2102      	movs	r1, #2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fc25 	bl	80056d4 <RCCEx_PLL2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e90:	e00f      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e96:	3328      	adds	r3, #40	@ 0x28
 8003e98:	2102      	movs	r1, #2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 fccc 	bl	8005838 <RCCEx_PLL3_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003eba:	4b98      	ldr	r3, [pc, #608]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ebe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec8:	4a94      	ldr	r2, [pc, #592]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ed4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003ee4:	f04f 0900 	mov.w	r9, #0
 8003ee8:	ea58 0309 	orrs.w	r3, r8, r9
 8003eec:	d047      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d82a      	bhi.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f15 	.word	0x08003f15
 8003f04:	08003f23 	.word	0x08003f23
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f57 	.word	0x08003f57
 8003f10:	08003f57 	.word	0x08003f57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f14:	4b81      	ldr	r3, [pc, #516]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f18:	4a80      	ldr	r2, [pc, #512]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f20:	e01a      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f26:	3308      	adds	r3, #8
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 fbd2 	bl	80056d4 <RCCEx_PLL2_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f36:	e00f      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3c:	3328      	adds	r3, #40	@ 0x28
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 fc79 	bl	8005838 <RCCEx_PLL3_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f4c:	e004      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f60:	4b6e      	ldr	r3, [pc, #440]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f64:	f023 0107 	bic.w	r1, r3, #7
 8003f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	4a6b      	ldr	r2, [pc, #428]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003f8a:	f04f 0b00 	mov.w	fp, #0
 8003f8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f92:	d05b      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f9c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003fa0:	d03b      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003fa2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003fa6:	d834      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fac:	d037      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fb2:	d82e      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fb8:	d033      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fbe:	d828      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc4:	d01a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fca:	d822      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fd4:	d007      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003fd6:	e01c      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd8:	4b50      	ldr	r3, [pc, #320]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	4a4f      	ldr	r2, [pc, #316]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e01e      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fea:	3308      	adds	r3, #8
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 fb70 	bl	80056d4 <RCCEx_PLL2_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ffa:	e013      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004000:	3328      	adds	r3, #40	@ 0x28
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f001 fc17 	bl	8005838 <RCCEx_PLL3_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004010:	e008      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004018:	e004      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800401a:	bf00      	nop
 800401c:	e002      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800402c:	4b3b      	ldr	r3, [pc, #236]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800402e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004030:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800403c:	4a37      	ldr	r2, [pc, #220]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800403e:	430b      	orrs	r3, r1
 8004040:	6593      	str	r3, [r2, #88]	@ 0x58
 8004042:	e003      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004058:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004062:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004066:	460b      	mov	r3, r1
 8004068:	4313      	orrs	r3, r2
 800406a:	d05d      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800406c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004070:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004074:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004078:	d03b      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800407a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800407e:	d834      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004084:	d037      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004086:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800408a:	d82e      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800408c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004090:	d033      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004092:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004096:	d828      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800409c:	d01a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800409e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040a2:	d822      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040ac:	d007      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80040ae:	e01c      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b0:	4b1a      	ldr	r3, [pc, #104]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	4a19      	ldr	r2, [pc, #100]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040bc:	e01e      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c2:	3308      	adds	r3, #8
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 fb04 	bl	80056d4 <RCCEx_PLL2_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040d2:	e013      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d8:	3328      	adds	r3, #40	@ 0x28
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fbab 	bl	8005838 <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040e8:	e008      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040f0:	e004      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80040f2:	bf00      	nop
 80040f4:	e002      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80040f6:	bf00      	nop
 80040f8:	e000      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80040fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10d      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004104:	4b05      	ldr	r3, [pc, #20]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004108:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800410c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004110:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004114:	4a01      	ldr	r2, [pc, #4]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004116:	430b      	orrs	r3, r1
 8004118:	6593      	str	r3, [r2, #88]	@ 0x58
 800411a:	e005      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800411c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004134:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800413e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	d03a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414e:	2b30      	cmp	r3, #48	@ 0x30
 8004150:	d01f      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004152:	2b30      	cmp	r3, #48	@ 0x30
 8004154:	d819      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004156:	2b20      	cmp	r3, #32
 8004158:	d00c      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800415a:	2b20      	cmp	r3, #32
 800415c:	d815      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d019      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004162:	2b10      	cmp	r3, #16
 8004164:	d111      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004166:	4baa      	ldr	r3, [pc, #680]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	4aa9      	ldr	r2, [pc, #676]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800416c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004170:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004172:	e011      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004178:	3308      	adds	r3, #8
 800417a:	2102      	movs	r1, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f001 faa9 	bl	80056d4 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004188:	e006      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004190:	e002      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004192:	bf00      	nop
 8004194:	e000      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041a0:	4b9b      	ldr	r3, [pc, #620]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80041a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ae:	4a98      	ldr	r2, [pc, #608]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041b4:	e003      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80041ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80041d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80041d8:	460b      	mov	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	d051      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80041de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e8:	d035      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80041ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ee:	d82e      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80041f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041f4:	d031      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80041f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041fa:	d828      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004200:	d01a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004206:	d822      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800420c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004210:	d007      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004212:	e01c      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004214:	4b7e      	ldr	r3, [pc, #504]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4a7d      	ldr	r2, [pc, #500]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800421a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800421e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004220:	e01c      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004226:	3308      	adds	r3, #8
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f001 fa52 	bl	80056d4 <RCCEx_PLL2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004236:	e011      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423c:	3328      	adds	r3, #40	@ 0x28
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f001 faf9 	bl	8005838 <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800424c:	e006      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004254:	e002      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004264:	4b6a      	ldr	r3, [pc, #424]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004268:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800426c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004272:	4a67      	ldr	r2, [pc, #412]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004274:	430b      	orrs	r3, r1
 8004276:	6513      	str	r3, [r2, #80]	@ 0x50
 8004278:	e003      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800427e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800428e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004292:	2300      	movs	r3, #0
 8004294:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004298:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800429c:	460b      	mov	r3, r1
 800429e:	4313      	orrs	r3, r2
 80042a0:	d053      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80042a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042ac:	d033      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80042ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042b2:	d82c      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042b8:	d02f      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80042ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042be:	d826      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042c4:	d02b      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80042c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042ca:	d820      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042d0:	d012      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80042d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042d6:	d81a      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d022      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e0:	d115      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e6:	3308      	adds	r3, #8
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f9f2 	bl	80056d4 <RCCEx_PLL2_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042f6:	e015      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fc:	3328      	adds	r3, #40	@ 0x28
 80042fe:	2101      	movs	r1, #1
 8004300:	4618      	mov	r0, r3
 8004302:	f001 fa99 	bl	8005838 <RCCEx_PLL3_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800430c:	e00a      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004314:	e006      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004316:	bf00      	nop
 8004318:	e004      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800432c:	4b38      	ldr	r3, [pc, #224]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800432e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004330:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433a:	4a35      	ldr	r2, [pc, #212]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800433c:	430b      	orrs	r3, r1
 800433e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004340:	e003      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004346:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800434a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800435a:	2300      	movs	r3, #0
 800435c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004360:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004364:	460b      	mov	r3, r1
 8004366:	4313      	orrs	r3, r2
 8004368:	d058      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800436a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004376:	d033      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800437c:	d82c      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004382:	d02f      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004388:	d826      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800438a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800438e:	d02b      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004390:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004394:	d820      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800439a:	d012      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800439c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043a0:	d81a      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d022      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80043a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043aa:	d115      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b0:	3308      	adds	r3, #8
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f001 f98d 	bl	80056d4 <RCCEx_PLL2_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043c0:	e015      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c6:	3328      	adds	r3, #40	@ 0x28
 80043c8:	2101      	movs	r1, #1
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 fa34 	bl	8005838 <RCCEx_PLL3_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043d6:	e00a      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043de:	e006      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043e0:	bf00      	nop
 80043e2:	e004      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043e4:	bf00      	nop
 80043e6:	e002      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043e8:	bf00      	nop
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10e      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043f6:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004406:	4a02      	ldr	r2, [pc, #8]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004408:	430b      	orrs	r3, r1
 800440a:	6593      	str	r3, [r2, #88]	@ 0x58
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800440e:	bf00      	nop
 8004410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800441c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800442c:	2300      	movs	r3, #0
 800442e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004432:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d037      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800443c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004446:	d00e      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800444c:	d816      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004456:	d111      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004458:	4bc4      	ldr	r3, [pc, #784]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	4ac3      	ldr	r2, [pc, #780]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800445e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004464:	e00f      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446a:	3308      	adds	r3, #8
 800446c:	2101      	movs	r1, #1
 800446e:	4618      	mov	r0, r3
 8004470:	f001 f930 	bl	80056d4 <RCCEx_PLL2_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800447a:	e004      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004482:	e000      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004486:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800448e:	4bb7      	ldr	r3, [pc, #732]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004492:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800449c:	4ab3      	ldr	r2, [pc, #716]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800449e:	430b      	orrs	r3, r1
 80044a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80044a2:	e003      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80044b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d039      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d81c      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80044d6:	a201      	add	r2, pc, #4	@ (adr r2, 80044dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80044d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044dc:	08004519 	.word	0x08004519
 80044e0:	080044ed 	.word	0x080044ed
 80044e4:	080044fb 	.word	0x080044fb
 80044e8:	08004519 	.word	0x08004519
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ec:	4b9f      	ldr	r3, [pc, #636]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	4a9e      	ldr	r2, [pc, #632]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044f8:	e00f      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fe:	3308      	adds	r3, #8
 8004500:	2102      	movs	r1, #2
 8004502:	4618      	mov	r0, r3
 8004504:	f001 f8e6 	bl	80056d4 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800450e:	e004      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004516:	e000      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004522:	4b92      	ldr	r3, [pc, #584]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004526:	f023 0103 	bic.w	r1, r3, #3
 800452a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004530:	4a8e      	ldr	r2, [pc, #568]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004532:	430b      	orrs	r3, r1
 8004534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004536:	e003      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800453c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800454c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004550:	2300      	movs	r3, #0
 8004552:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004556:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800455a:	460b      	mov	r3, r1
 800455c:	4313      	orrs	r3, r2
 800455e:	f000 8099 	beq.w	8004694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004562:	4b83      	ldr	r3, [pc, #524]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a82      	ldr	r2, [pc, #520]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800456e:	f7fc febb 	bl	80012e8 <HAL_GetTick>
 8004572:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004576:	e00b      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004578:	f7fc feb6 	bl	80012e8 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b64      	cmp	r3, #100	@ 0x64
 8004586:	d903      	bls.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800458e:	e005      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004590:	4b77      	ldr	r3, [pc, #476]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ed      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800459c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d173      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045a4:	4b71      	ldr	r3, [pc, #452]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045b0:	4053      	eors	r3, r2
 80045b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d015      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ba:	4b6c      	ldr	r3, [pc, #432]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c6:	4b69      	ldr	r3, [pc, #420]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ca:	4a68      	ldr	r2, [pc, #416]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d2:	4b66      	ldr	r3, [pc, #408]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d6:	4a65      	ldr	r2, [pc, #404]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045de:	4a63      	ldr	r2, [pc, #396]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f2:	d118      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fc fe78 	bl	80012e8 <HAL_GetTick>
 80045f8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045fc:	e00d      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fc fe73 	bl	80012e8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004608:	1ad2      	subs	r2, r2, r3
 800460a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800460e:	429a      	cmp	r2, r3
 8004610:	d903      	bls.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004618:	e005      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800461a:	4b54      	ldr	r3, [pc, #336]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0eb      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004626:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800462a:	2b00      	cmp	r3, #0
 800462c:	d129      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800462e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800463e:	d10e      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004640:	4b4a      	ldr	r3, [pc, #296]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004650:	091a      	lsrs	r2, r3, #4
 8004652:	4b48      	ldr	r3, [pc, #288]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004654:	4013      	ands	r3, r2
 8004656:	4a45      	ldr	r2, [pc, #276]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6113      	str	r3, [r2, #16]
 800465c:	e005      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800465e:	4b43      	ldr	r3, [pc, #268]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	4a42      	ldr	r2, [pc, #264]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004664:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004668:	6113      	str	r3, [r2, #16]
 800466a:	4b40      	ldr	r3, [pc, #256]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800466c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800466e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004672:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467a:	4a3c      	ldr	r2, [pc, #240]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800467c:	430b      	orrs	r3, r1
 800467e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004680:	e008      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004686:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800468a:	e003      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004690:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f002 0301 	and.w	r3, r2, #1
 80046a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80046aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80046ae:	460b      	mov	r3, r1
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f000 808f 	beq.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80046b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046bc:	2b28      	cmp	r3, #40	@ 0x28
 80046be:	d871      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80046c0:	a201      	add	r2, pc, #4	@ (adr r2, 80046c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080047ad 	.word	0x080047ad
 80046cc:	080047a5 	.word	0x080047a5
 80046d0:	080047a5 	.word	0x080047a5
 80046d4:	080047a5 	.word	0x080047a5
 80046d8:	080047a5 	.word	0x080047a5
 80046dc:	080047a5 	.word	0x080047a5
 80046e0:	080047a5 	.word	0x080047a5
 80046e4:	080047a5 	.word	0x080047a5
 80046e8:	08004779 	.word	0x08004779
 80046ec:	080047a5 	.word	0x080047a5
 80046f0:	080047a5 	.word	0x080047a5
 80046f4:	080047a5 	.word	0x080047a5
 80046f8:	080047a5 	.word	0x080047a5
 80046fc:	080047a5 	.word	0x080047a5
 8004700:	080047a5 	.word	0x080047a5
 8004704:	080047a5 	.word	0x080047a5
 8004708:	0800478f 	.word	0x0800478f
 800470c:	080047a5 	.word	0x080047a5
 8004710:	080047a5 	.word	0x080047a5
 8004714:	080047a5 	.word	0x080047a5
 8004718:	080047a5 	.word	0x080047a5
 800471c:	080047a5 	.word	0x080047a5
 8004720:	080047a5 	.word	0x080047a5
 8004724:	080047a5 	.word	0x080047a5
 8004728:	080047ad 	.word	0x080047ad
 800472c:	080047a5 	.word	0x080047a5
 8004730:	080047a5 	.word	0x080047a5
 8004734:	080047a5 	.word	0x080047a5
 8004738:	080047a5 	.word	0x080047a5
 800473c:	080047a5 	.word	0x080047a5
 8004740:	080047a5 	.word	0x080047a5
 8004744:	080047a5 	.word	0x080047a5
 8004748:	080047ad 	.word	0x080047ad
 800474c:	080047a5 	.word	0x080047a5
 8004750:	080047a5 	.word	0x080047a5
 8004754:	080047a5 	.word	0x080047a5
 8004758:	080047a5 	.word	0x080047a5
 800475c:	080047a5 	.word	0x080047a5
 8004760:	080047a5 	.word	0x080047a5
 8004764:	080047a5 	.word	0x080047a5
 8004768:	080047ad 	.word	0x080047ad
 800476c:	58024400 	.word	0x58024400
 8004770:	58024800 	.word	0x58024800
 8004774:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800477c:	3308      	adds	r3, #8
 800477e:	2101      	movs	r1, #1
 8004780:	4618      	mov	r0, r3
 8004782:	f000 ffa7 	bl	80056d4 <RCCEx_PLL2_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800478c:	e00f      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800478e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004792:	3328      	adds	r3, #40	@ 0x28
 8004794:	2101      	movs	r1, #1
 8004796:	4618      	mov	r0, r3
 8004798:	f001 f84e 	bl	8005838 <RCCEx_PLL3_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047a2:	e004      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047aa:	e000      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80047ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047b6:	4bbf      	ldr	r3, [pc, #764]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80047be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047c4:	4abb      	ldr	r2, [pc, #748]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047c6:	430b      	orrs	r3, r1
 80047c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80047ca:	e003      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f002 0302 	and.w	r3, r2, #2
 80047e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047e4:	2300      	movs	r3, #0
 80047e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4313      	orrs	r3, r2
 80047f2:	d041      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d824      	bhi.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80047fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004804 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004851 	.word	0x08004851
 8004808:	0800481d 	.word	0x0800481d
 800480c:	08004833 	.word	0x08004833
 8004810:	08004851 	.word	0x08004851
 8004814:	08004851 	.word	0x08004851
 8004818:	08004851 	.word	0x08004851
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800481c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004820:	3308      	adds	r3, #8
 8004822:	2101      	movs	r1, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f000 ff55 	bl	80056d4 <RCCEx_PLL2_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004830:	e00f      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004836:	3328      	adds	r3, #40	@ 0x28
 8004838:	2101      	movs	r1, #1
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fffc 	bl	8005838 <RCCEx_PLL3_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004846:	e004      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800484e:	e000      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800485a:	4b96      	ldr	r3, [pc, #600]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	f023 0107 	bic.w	r1, r3, #7
 8004862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004868:	4a92      	ldr	r2, [pc, #584]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800486a:	430b      	orrs	r3, r1
 800486c:	6553      	str	r3, [r2, #84]	@ 0x54
 800486e:	e003      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	f002 0304 	and.w	r3, r2, #4
 8004884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004888:	2300      	movs	r3, #0
 800488a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800488e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004892:	460b      	mov	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	d044      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d825      	bhi.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80048a4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048f9 	.word	0x080048f9
 80048b0:	080048c5 	.word	0x080048c5
 80048b4:	080048db 	.word	0x080048db
 80048b8:	080048f9 	.word	0x080048f9
 80048bc:	080048f9 	.word	0x080048f9
 80048c0:	080048f9 	.word	0x080048f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c8:	3308      	adds	r3, #8
 80048ca:	2101      	movs	r1, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 ff01 	bl	80056d4 <RCCEx_PLL2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048d8:	e00f      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048de:	3328      	adds	r3, #40	@ 0x28
 80048e0:	2101      	movs	r1, #1
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 ffa8 	bl	8005838 <RCCEx_PLL3_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048ee:	e004      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048f6:	e000      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80048f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10b      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004902:	4b6c      	ldr	r3, [pc, #432]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004906:	f023 0107 	bic.w	r1, r3, #7
 800490a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004912:	4a68      	ldr	r2, [pc, #416]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004914:	430b      	orrs	r3, r1
 8004916:	6593      	str	r3, [r2, #88]	@ 0x58
 8004918:	e003      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800491e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	f002 0320 	and.w	r3, r2, #32
 800492e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004932:	2300      	movs	r3, #0
 8004934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004938:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800493c:	460b      	mov	r3, r1
 800493e:	4313      	orrs	r3, r2
 8004940:	d055      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800494a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800494e:	d033      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004950:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004954:	d82c      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495a:	d02f      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004960:	d826      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004962:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004966:	d02b      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004968:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800496c:	d820      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800496e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004972:	d012      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004978:	d81a      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d022      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800497e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004982:	d115      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004988:	3308      	adds	r3, #8
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fea1 	bl	80056d4 <RCCEx_PLL2_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004998:	e015      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800499a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800499e:	3328      	adds	r3, #40	@ 0x28
 80049a0:	2102      	movs	r1, #2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 ff48 	bl	8005838 <RCCEx_PLL3_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049ae:	e00a      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049b6:	e006      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80049b8:	bf00      	nop
 80049ba:	e004      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80049bc:	bf00      	nop
 80049be:	e002      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80049c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10b      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ce:	4b39      	ldr	r3, [pc, #228]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049de:	4a35      	ldr	r2, [pc, #212]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049e0:	430b      	orrs	r3, r1
 80049e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80049e4:	e003      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80049fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049fe:	2300      	movs	r3, #0
 8004a00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a04:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	d058      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a16:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004a1a:	d033      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004a1c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004a20:	d82c      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a26:	d02f      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2c:	d826      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a32:	d02b      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004a34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a38:	d820      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a3e:	d012      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a44:	d81a      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d022      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4e:	d115      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a54:	3308      	adds	r3, #8
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fe3b 	bl	80056d4 <RCCEx_PLL2_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a64:	e015      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a6a:	3328      	adds	r3, #40	@ 0x28
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fee2 	bl	8005838 <RCCEx_PLL3_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a82:	e006      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a84:	bf00      	nop
 8004a86:	e004      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a88:	bf00      	nop
 8004a8a:	e002      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10e      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a9a:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aaa:	4a02      	ldr	r2, [pc, #8]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ab0:	e006      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004ab2:	bf00      	nop
 8004ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004abc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004acc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ad6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004ada:	460b      	mov	r3, r1
 8004adc:	4313      	orrs	r3, r2
 8004ade:	d055      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ae8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004aec:	d033      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004aee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004af2:	d82c      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004af8:	d02f      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afe:	d826      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004b00:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004b04:	d02b      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004b06:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004b0a:	d820      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b10:	d012      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004b12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b16:	d81a      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d022      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b20:	d115      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b26:	3308      	adds	r3, #8
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fdd2 	bl	80056d4 <RCCEx_PLL2_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b36:	e015      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3c:	3328      	adds	r3, #40	@ 0x28
 8004b3e:	2102      	movs	r1, #2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fe79 	bl	8005838 <RCCEx_PLL3_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b54:	e006      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b56:	bf00      	nop
 8004b58:	e004      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10b      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b6c:	4ba0      	ldr	r3, [pc, #640]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b70:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b7c:	4a9c      	ldr	r2, [pc, #624]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b82:	e003      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f002 0308 	and.w	r3, r2, #8
 8004b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ba2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	d01e      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bbe:	3328      	adds	r3, #40	@ 0x28
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fe38 	bl	8005838 <RCCEx_PLL3_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004bd4:	4b86      	ldr	r3, [pc, #536]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004be4:	4a82      	ldr	r2, [pc, #520]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f002 0310 	and.w	r3, r2, #16
 8004bf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c00:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d01e      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c16:	d10c      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c1c:	3328      	adds	r3, #40	@ 0x28
 8004c1e:	2102      	movs	r1, #2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fe09 	bl	8005838 <RCCEx_PLL3_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c32:	4b6f      	ldr	r3, [pc, #444]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c42:	4a6b      	ldr	r2, [pc, #428]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004c54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c56:	2300      	movs	r3, #0
 8004c58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c5a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4313      	orrs	r3, r2
 8004c62:	d03e      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c70:	d022      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004c72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c76:	d81b      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c80:	d00b      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004c82:	e015      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c88:	3308      	adds	r3, #8
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fd21 	bl	80056d4 <RCCEx_PLL2_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c98:	e00f      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c9e:	3328      	adds	r3, #40	@ 0x28
 8004ca0:	2102      	movs	r1, #2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fdc8 	bl	8005838 <RCCEx_PLL3_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cd2:	4a47      	ldr	r2, [pc, #284]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd8:	e003      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004cee:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	d03b      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d0a:	d01f      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004d0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d10:	d818      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d16:	d003      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004d18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d1c:	d007      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004d1e:	e011      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d20:	4b33      	ldr	r3, [pc, #204]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	4a32      	ldr	r2, [pc, #200]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d2c:	e00f      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d32:	3328      	adds	r3, #40	@ 0x28
 8004d34:	2101      	movs	r1, #1
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fd7e 	bl	8005838 <RCCEx_PLL3_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d42:	e004      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d4a:	e000      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10b      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d56:	4b26      	ldr	r3, [pc, #152]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d66:	4a22      	ldr	r2, [pc, #136]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d6c:	e003      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d84:	2300      	movs	r3, #0
 8004d86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d88:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	d034      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da0:	d007      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004da2:	e011      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da4:	4b12      	ldr	r3, [pc, #72]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	4a11      	ldr	r2, [pc, #68]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004db0:	e00e      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db6:	3308      	adds	r3, #8
 8004db8:	2102      	movs	r1, #2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fc8a 	bl	80056d4 <RCCEx_PLL2_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004dc6:	e003      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10d      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004dd8:	4b05      	ldr	r3, [pc, #20]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ddc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de6:	4a02      	ldr	r2, [pc, #8]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004de8:	430b      	orrs	r3, r1
 8004dea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dec:	e006      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004dee:	bf00      	nop
 8004df0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e0e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e12:	460b      	mov	r3, r1
 8004e14:	4313      	orrs	r3, r2
 8004e16:	d00c      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1c:	3328      	adds	r3, #40	@ 0x28
 8004e1e:	2102      	movs	r1, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fd09 	bl	8005838 <RCCEx_PLL3_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e40:	2300      	movs	r3, #0
 8004e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e44:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	d036      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e58:	d018      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e5e:	d811      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e64:	d014      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e6a:	d80b      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d011      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e74:	d106      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e76:	4bb7      	ldr	r3, [pc, #732]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	4ab6      	ldr	r2, [pc, #728]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e82:	e008      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e8a:	e004      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e8c:	bf00      	nop
 8004e8e:	e002      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e90:	bf00      	nop
 8004e92:	e000      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e9e:	4bad      	ldr	r3, [pc, #692]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eac:	4aa9      	ldr	r2, [pc, #676]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004eb2:	e003      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ec8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eca:	2300      	movs	r3, #0
 8004ecc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ed8:	4b9e      	ldr	r3, [pc, #632]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004edc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	4a9b      	ldr	r2, [pc, #620]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004efa:	2300      	movs	r3, #0
 8004efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004efe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004f02:	460b      	mov	r3, r1
 8004f04:	4313      	orrs	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f08:	4b92      	ldr	r3, [pc, #584]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f0c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f16:	4a8f      	ldr	r2, [pc, #572]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f38:	4b86      	ldr	r3, [pc, #536]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	4a85      	ldr	r2, [pc, #532]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f42:	6113      	str	r3, [r2, #16]
 8004f44:	4b83      	ldr	r3, [pc, #524]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f46:	6919      	ldr	r1, [r3, #16]
 8004f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f50:	4a80      	ldr	r2, [pc, #512]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f64:	2300      	movs	r3, #0
 8004f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	d009      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f72:	4b78      	ldr	r3, [pc, #480]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f76:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f80:	4a74      	ldr	r2, [pc, #464]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f82:	430b      	orrs	r3, r1
 8004f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f94:	2300      	movs	r3, #0
 8004f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	4a68      	ldr	r2, [pc, #416]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	d011      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd8:	3308      	adds	r3, #8
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fb79 	bl	80056d4 <RCCEx_PLL2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	2100      	movs	r1, #0
 8005002:	6239      	str	r1, [r7, #32]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
 800500a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	d011      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005018:	3308      	adds	r3, #8
 800501a:	2101      	movs	r1, #1
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fb59 	bl	80056d4 <RCCEx_PLL2_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	2100      	movs	r1, #0
 8005042:	61b9      	str	r1, [r7, #24]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800504e:	460b      	mov	r3, r1
 8005050:	4313      	orrs	r3, r2
 8005052:	d011      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005058:	3308      	adds	r3, #8
 800505a:	2102      	movs	r1, #2
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fb39 	bl	80056d4 <RCCEx_PLL2_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	2100      	movs	r1, #0
 8005082:	6139      	str	r1, [r7, #16]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800508e:	460b      	mov	r3, r1
 8005090:	4313      	orrs	r3, r2
 8005092:	d011      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005098:	3328      	adds	r3, #40	@ 0x28
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fbcb 	bl	8005838 <RCCEx_PLL3_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80050a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	2100      	movs	r1, #0
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050ce:	460b      	mov	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d011      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d8:	3328      	adds	r3, #40	@ 0x28
 80050da:	2101      	movs	r1, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fbab 	bl	8005838 <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80050e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80050f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	2100      	movs	r1, #0
 8005102:	6039      	str	r1, [r7, #0]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800510e:	460b      	mov	r3, r1
 8005110:	4313      	orrs	r3, r2
 8005112:	d011      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005118:	3328      	adds	r3, #40	@ 0x28
 800511a:	2102      	movs	r1, #2
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fb8b 	bl	8005838 <RCCEx_PLL3_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005134:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005138:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
}
 8005146:	4618      	mov	r0, r3
 8005148:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400

08005158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800515c:	f7fe fe00 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8005160:	4602      	mov	r2, r0
 8005162:	4b06      	ldr	r3, [pc, #24]	@ (800517c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	4904      	ldr	r1, [pc, #16]	@ (8005180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800516e:	5ccb      	ldrb	r3, [r1, r3]
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005178:	4618      	mov	r0, r3
 800517a:	bd80      	pop	{r7, pc}
 800517c:	58024400 	.word	0x58024400
 8005180:	0800b458 	.word	0x0800b458

08005184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	@ 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800518c:	4ba1      	ldr	r3, [pc, #644]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005196:	4b9f      	ldr	r3, [pc, #636]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	0b1b      	lsrs	r3, r3, #12
 800519c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051a2:	4b9c      	ldr	r3, [pc, #624]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051ae:	4b99      	ldr	r3, [pc, #612]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	08db      	lsrs	r3, r3, #3
 80051b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8111 	beq.w	80053f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f000 8083 	beq.w	80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	f200 80a1 	bhi.w	8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d056      	beq.n	800529c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051ee:	e099      	b.n	8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051f0:	4b88      	ldr	r3, [pc, #544]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02d      	beq.n	8005258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051fc:	4b85      	ldr	r3, [pc, #532]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	08db      	lsrs	r3, r3, #3
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	4a84      	ldr	r2, [pc, #528]	@ (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	ee07 3a90 	vmov	s15, r3
 8005214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005226:	4b7b      	ldr	r3, [pc, #492]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005236:	ed97 6a03 	vldr	s12, [r7, #12]
 800523a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005256:	e087      	b.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526a:	4b6a      	ldr	r3, [pc, #424]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800526c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527a:	ed97 6a03 	vldr	s12, [r7, #12]
 800527e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800528e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800529a:	e065      	b.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ae:	4b59      	ldr	r3, [pc, #356]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052be:	ed97 6a03 	vldr	s12, [r7, #12]
 80052c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052de:	e043      	b.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f2:	4b48      	ldr	r3, [pc, #288]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005302:	ed97 6a03 	vldr	s12, [r7, #12]
 8005306:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800530a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005322:	e021      	b.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005336:	4b37      	ldr	r3, [pc, #220]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005346:	ed97 6a03 	vldr	s12, [r7, #12]
 800534a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800534e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005368:	4b2a      	ldr	r3, [pc, #168]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	0a5b      	lsrs	r3, r3, #9
 800536e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800537e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005382:	edd7 6a07 	vldr	s13, [r7, #28]
 8005386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800538a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800538e:	ee17 2a90 	vmov	r2, s15
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005396:	4b1f      	ldr	r3, [pc, #124]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539a:	0c1b      	lsrs	r3, r3, #16
 800539c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053a0:	ee07 3a90 	vmov	s15, r3
 80053a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053bc:	ee17 2a90 	vmov	r2, s15
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053c4:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c8:	0e1b      	lsrs	r3, r3, #24
 80053ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053de:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ea:	ee17 2a90 	vmov	r2, s15
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053f2:	e008      	b.n	8005406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	609a      	str	r2, [r3, #8]
}
 8005406:	bf00      	nop
 8005408:	3724      	adds	r7, #36	@ 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
 8005418:	03d09000 	.word	0x03d09000
 800541c:	46000000 	.word	0x46000000
 8005420:	4c742400 	.word	0x4c742400
 8005424:	4a742400 	.word	0x4a742400
 8005428:	4bbebc20 	.word	0x4bbebc20

0800542c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800542c:	b480      	push	{r7}
 800542e:	b089      	sub	sp, #36	@ 0x24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005434:	4ba1      	ldr	r3, [pc, #644]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800543e:	4b9f      	ldr	r3, [pc, #636]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005442:	0d1b      	lsrs	r3, r3, #20
 8005444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800544a:	4b9c      	ldr	r3, [pc, #624]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005456:	4b99      	ldr	r3, [pc, #612]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545a:	08db      	lsrs	r3, r3, #3
 800545c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8111 	beq.w	800569c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b02      	cmp	r3, #2
 800547e:	f000 8083 	beq.w	8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b02      	cmp	r3, #2
 8005486:	f200 80a1 	bhi.w	80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d056      	beq.n	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005496:	e099      	b.n	80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005498:	4b88      	ldr	r3, [pc, #544]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d02d      	beq.n	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054a4:	4b85      	ldr	r3, [pc, #532]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	08db      	lsrs	r3, r3, #3
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	4a84      	ldr	r2, [pc, #528]	@ (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ce:	4b7b      	ldr	r3, [pc, #492]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054de:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054fe:	e087      	b.n	8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800550e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005512:	4b6a      	ldr	r3, [pc, #424]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005522:	ed97 6a03 	vldr	s12, [r7, #12]
 8005526:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800552a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005542:	e065      	b.n	8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005556:	4b59      	ldr	r3, [pc, #356]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005566:	ed97 6a03 	vldr	s12, [r7, #12]
 800556a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800556e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800557a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005586:	e043      	b.n	8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559a:	4b48      	ldr	r3, [pc, #288]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ca:	e021      	b.n	8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055de:	4b37      	ldr	r3, [pc, #220]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800560e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005610:	4b2a      	ldr	r3, [pc, #168]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	0a5b      	lsrs	r3, r3, #9
 8005616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800562a:	edd7 6a07 	vldr	s13, [r7, #28]
 800562e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005636:	ee17 2a90 	vmov	r2, s15
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800563e:	4b1f      	ldr	r3, [pc, #124]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	0c1b      	lsrs	r3, r3, #16
 8005644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005658:	edd7 6a07 	vldr	s13, [r7, #28]
 800565c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005664:	ee17 2a90 	vmov	r2, s15
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800566c:	4b13      	ldr	r3, [pc, #76]	@ (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800566e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005670:	0e1b      	lsrs	r3, r3, #24
 8005672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005686:	edd7 6a07 	vldr	s13, [r7, #28]
 800568a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800568e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005692:	ee17 2a90 	vmov	r2, s15
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800569a:	e008      	b.n	80056ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
}
 80056ae:	bf00      	nop
 80056b0:	3724      	adds	r7, #36	@ 0x24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	58024400 	.word	0x58024400
 80056c0:	03d09000 	.word	0x03d09000
 80056c4:	46000000 	.word	0x46000000
 80056c8:	4c742400 	.word	0x4c742400
 80056cc:	4a742400 	.word	0x4a742400
 80056d0:	4bbebc20 	.word	0x4bbebc20

080056d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056e2:	4b53      	ldr	r3, [pc, #332]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80056e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d101      	bne.n	80056f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e099      	b.n	8005826 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a4e      	ldr	r2, [pc, #312]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80056f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fe:	f7fb fdf3 	bl	80012e8 <HAL_GetTick>
 8005702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005704:	e008      	b.n	8005718 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005706:	f7fb fdef 	bl	80012e8 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e086      	b.n	8005826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005718:	4b45      	ldr	r3, [pc, #276]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005724:	4b42      	ldr	r3, [pc, #264]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	031b      	lsls	r3, r3, #12
 8005732:	493f      	ldr	r1, [pc, #252]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	628b      	str	r3, [r1, #40]	@ 0x28
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	3b01      	subs	r3, #1
 800573e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	3b01      	subs	r3, #1
 8005748:	025b      	lsls	r3, r3, #9
 800574a:	b29b      	uxth	r3, r3
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	3b01      	subs	r3, #1
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	3b01      	subs	r3, #1
 8005762:	061b      	lsls	r3, r3, #24
 8005764:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005768:	4931      	ldr	r1, [pc, #196]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 800576a:	4313      	orrs	r3, r2
 800576c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800576e:	4b30      	ldr	r3, [pc, #192]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	492d      	ldr	r1, [pc, #180]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 800577c:	4313      	orrs	r3, r2
 800577e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005780:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005784:	f023 0220 	bic.w	r2, r3, #32
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	4928      	ldr	r1, [pc, #160]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005792:	4b27      	ldr	r3, [pc, #156]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	4a26      	ldr	r2, [pc, #152]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005798:	f023 0310 	bic.w	r3, r3, #16
 800579c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800579e:	4b24      	ldr	r3, [pc, #144]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057a2:	4b24      	ldr	r3, [pc, #144]	@ (8005834 <RCCEx_PLL2_Config+0x160>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	69d2      	ldr	r2, [r2, #28]
 80057aa:	00d2      	lsls	r2, r2, #3
 80057ac:	4920      	ldr	r1, [pc, #128]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	f043 0310 	orr.w	r3, r3, #16
 80057bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c8:	4a19      	ldr	r2, [pc, #100]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057d0:	e00f      	b.n	80057f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d106      	bne.n	80057e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057d8:	4b15      	ldr	r3, [pc, #84]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057dc:	4a14      	ldr	r2, [pc, #80]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057e4:	e005      	b.n	80057f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057e6:	4b12      	ldr	r3, [pc, #72]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	4a11      	ldr	r2, [pc, #68]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fe:	f7fb fd73 	bl	80012e8 <HAL_GetTick>
 8005802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005804:	e008      	b.n	8005818 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005806:	f7fb fd6f 	bl	80012e8 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e006      	b.n	8005826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <RCCEx_PLL2_Config+0x15c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	58024400 	.word	0x58024400
 8005834:	ffff0007 	.word	0xffff0007

08005838 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005846:	4b53      	ldr	r3, [pc, #332]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b03      	cmp	r3, #3
 8005850:	d101      	bne.n	8005856 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e099      	b.n	800598a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005856:	4b4f      	ldr	r3, [pc, #316]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a4e      	ldr	r2, [pc, #312]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800585c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005862:	f7fb fd41 	bl	80012e8 <HAL_GetTick>
 8005866:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005868:	e008      	b.n	800587c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800586a:	f7fb fd3d 	bl	80012e8 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e086      	b.n	800598a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800587c:	4b45      	ldr	r3, [pc, #276]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f0      	bne.n	800586a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005888:	4b42      	ldr	r3, [pc, #264]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	051b      	lsls	r3, r3, #20
 8005896:	493f      	ldr	r1, [pc, #252]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	628b      	str	r3, [r1, #40]	@ 0x28
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	025b      	lsls	r3, r3, #9
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	061b      	lsls	r3, r3, #24
 80058c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058cc:	4931      	ldr	r1, [pc, #196]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058d2:	4b30      	ldr	r3, [pc, #192]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	492d      	ldr	r1, [pc, #180]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	4928      	ldr	r1, [pc, #160]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058f6:	4b27      	ldr	r3, [pc, #156]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fa:	4a26      	ldr	r2, [pc, #152]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005900:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005902:	4b24      	ldr	r3, [pc, #144]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005906:	4b24      	ldr	r3, [pc, #144]	@ (8005998 <RCCEx_PLL3_Config+0x160>)
 8005908:	4013      	ands	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	69d2      	ldr	r2, [r2, #28]
 800590e:	00d2      	lsls	r2, r2, #3
 8005910:	4920      	ldr	r1, [pc, #128]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005916:	4b1f      	ldr	r3, [pc, #124]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800591c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005920:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005928:	4b1a      	ldr	r3, [pc, #104]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	4a19      	ldr	r2, [pc, #100]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800592e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005932:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005934:	e00f      	b.n	8005956 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d106      	bne.n	800594a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800593c:	4b15      	ldr	r3, [pc, #84]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	4a14      	ldr	r2, [pc, #80]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005942:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005946:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005948:	e005      	b.n	8005956 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800594a:	4b12      	ldr	r3, [pc, #72]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	4a11      	ldr	r2, [pc, #68]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005950:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005954:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005956:	4b0f      	ldr	r3, [pc, #60]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a0e      	ldr	r2, [pc, #56]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800595c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005962:	f7fb fcc1 	bl	80012e8 <HAL_GetTick>
 8005966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005968:	e008      	b.n	800597c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800596a:	f7fb fcbd 	bl	80012e8 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e006      	b.n	800598a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800597c:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <RCCEx_PLL3_Config+0x15c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005988:	7bfb      	ldrb	r3, [r7, #15]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	58024400 	.word	0x58024400
 8005998:	ffff0007 	.word	0xffff0007

0800599c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e042      	b.n	8005a34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fb fa5f 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2224      	movs	r2, #36	@ 0x24
 80059ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0201 	bic.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 ff22 	bl	8006830 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8b3 	bl	8005b58 <UART_SetConfig>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e01b      	b.n	8005a34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 ffa1 	bl	8006974 <UART_CheckIdleState>
 8005a32:	4603      	mov	r3, r0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	@ 0x28
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d17b      	bne.n	8005b4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_UART_Transmit+0x26>
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e074      	b.n	8005b50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2221      	movs	r2, #33	@ 0x21
 8005a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a76:	f7fb fc37 	bl	80012e8 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	88fa      	ldrh	r2, [r7, #6]
 8005a88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a94:	d108      	bne.n	8005aa8 <HAL_UART_Transmit+0x6c>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d104      	bne.n	8005aa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e003      	b.n	8005ab0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ab0:	e030      	b.n	8005b14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2180      	movs	r1, #128	@ 0x80
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f001 f803 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e03d      	b.n	8005b50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	3302      	adds	r3, #2
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e007      	b.n	8005b02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	3301      	adds	r3, #1
 8005b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1c8      	bne.n	8005ab2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2200      	movs	r2, #0
 8005b28:	2140      	movs	r1, #64	@ 0x40
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 ffcc 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e006      	b.n	8005b50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e000      	b.n	8005b50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b4e:	2302      	movs	r3, #2
  }
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3720      	adds	r7, #32
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b5c:	b092      	sub	sp, #72	@ 0x48
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4bbe      	ldr	r3, [pc, #760]	@ (8005e80 <UART_SetConfig+0x328>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4ab3      	ldr	r2, [pc, #716]	@ (8005e84 <UART_SetConfig+0x32c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	4baf      	ldr	r3, [pc, #700]	@ (8005e88 <UART_SetConfig+0x330>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bde:	f023 010f 	bic.w	r1, r3, #15
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4aa6      	ldr	r2, [pc, #664]	@ (8005e8c <UART_SetConfig+0x334>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d177      	bne.n	8005ce8 <UART_SetConfig+0x190>
 8005bf8:	4ba5      	ldr	r3, [pc, #660]	@ (8005e90 <UART_SetConfig+0x338>)
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c00:	2b28      	cmp	r3, #40	@ 0x28
 8005c02:	d86d      	bhi.n	8005ce0 <UART_SetConfig+0x188>
 8005c04:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <UART_SetConfig+0xb4>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005cb1 	.word	0x08005cb1
 8005c10:	08005ce1 	.word	0x08005ce1
 8005c14:	08005ce1 	.word	0x08005ce1
 8005c18:	08005ce1 	.word	0x08005ce1
 8005c1c:	08005ce1 	.word	0x08005ce1
 8005c20:	08005ce1 	.word	0x08005ce1
 8005c24:	08005ce1 	.word	0x08005ce1
 8005c28:	08005ce1 	.word	0x08005ce1
 8005c2c:	08005cb9 	.word	0x08005cb9
 8005c30:	08005ce1 	.word	0x08005ce1
 8005c34:	08005ce1 	.word	0x08005ce1
 8005c38:	08005ce1 	.word	0x08005ce1
 8005c3c:	08005ce1 	.word	0x08005ce1
 8005c40:	08005ce1 	.word	0x08005ce1
 8005c44:	08005ce1 	.word	0x08005ce1
 8005c48:	08005ce1 	.word	0x08005ce1
 8005c4c:	08005cc1 	.word	0x08005cc1
 8005c50:	08005ce1 	.word	0x08005ce1
 8005c54:	08005ce1 	.word	0x08005ce1
 8005c58:	08005ce1 	.word	0x08005ce1
 8005c5c:	08005ce1 	.word	0x08005ce1
 8005c60:	08005ce1 	.word	0x08005ce1
 8005c64:	08005ce1 	.word	0x08005ce1
 8005c68:	08005ce1 	.word	0x08005ce1
 8005c6c:	08005cc9 	.word	0x08005cc9
 8005c70:	08005ce1 	.word	0x08005ce1
 8005c74:	08005ce1 	.word	0x08005ce1
 8005c78:	08005ce1 	.word	0x08005ce1
 8005c7c:	08005ce1 	.word	0x08005ce1
 8005c80:	08005ce1 	.word	0x08005ce1
 8005c84:	08005ce1 	.word	0x08005ce1
 8005c88:	08005ce1 	.word	0x08005ce1
 8005c8c:	08005cd1 	.word	0x08005cd1
 8005c90:	08005ce1 	.word	0x08005ce1
 8005c94:	08005ce1 	.word	0x08005ce1
 8005c98:	08005ce1 	.word	0x08005ce1
 8005c9c:	08005ce1 	.word	0x08005ce1
 8005ca0:	08005ce1 	.word	0x08005ce1
 8005ca4:	08005ce1 	.word	0x08005ce1
 8005ca8:	08005ce1 	.word	0x08005ce1
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e326      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e322      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e31e      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e31a      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e316      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005cd8:	2340      	movs	r3, #64	@ 0x40
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e312      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e30e      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a69      	ldr	r2, [pc, #420]	@ (8005e94 <UART_SetConfig+0x33c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d130      	bne.n	8005d54 <UART_SetConfig+0x1fc>
 8005cf2:	4b67      	ldr	r3, [pc, #412]	@ (8005e90 <UART_SetConfig+0x338>)
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b05      	cmp	r3, #5
 8005cfc:	d826      	bhi.n	8005d4c <UART_SetConfig+0x1f4>
 8005cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <UART_SetConfig+0x1ac>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d1d 	.word	0x08005d1d
 8005d08:	08005d25 	.word	0x08005d25
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d3d 	.word	0x08005d3d
 8005d18:	08005d45 	.word	0x08005d45
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e2f0      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e2ec      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e2e8      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e2e4      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e2e0      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005d44:	2340      	movs	r3, #64	@ 0x40
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e2dc      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e2d8      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a4f      	ldr	r2, [pc, #316]	@ (8005e98 <UART_SetConfig+0x340>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d130      	bne.n	8005dc0 <UART_SetConfig+0x268>
 8005d5e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e90 <UART_SetConfig+0x338>)
 8005d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	d826      	bhi.n	8005db8 <UART_SetConfig+0x260>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0x218>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d89 	.word	0x08005d89
 8005d74:	08005d91 	.word	0x08005d91
 8005d78:	08005d99 	.word	0x08005d99
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005db1 	.word	0x08005db1
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e2ba      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e2b6      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e2b2      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e2ae      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005da8:	2320      	movs	r3, #32
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e2aa      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005db0:	2340      	movs	r3, #64	@ 0x40
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e2a6      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005db8:	2380      	movs	r3, #128	@ 0x80
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e2a2      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a35      	ldr	r2, [pc, #212]	@ (8005e9c <UART_SetConfig+0x344>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d130      	bne.n	8005e2c <UART_SetConfig+0x2d4>
 8005dca:	4b31      	ldr	r3, [pc, #196]	@ (8005e90 <UART_SetConfig+0x338>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	d826      	bhi.n	8005e24 <UART_SetConfig+0x2cc>
 8005dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0x284>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005df5 	.word	0x08005df5
 8005de0:	08005dfd 	.word	0x08005dfd
 8005de4:	08005e05 	.word	0x08005e05
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e15 	.word	0x08005e15
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e284      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e280      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e04:	2308      	movs	r3, #8
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e27c      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e278      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e14:	2320      	movs	r3, #32
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e274      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e1c:	2340      	movs	r3, #64	@ 0x40
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e22:	e270      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e24:	2380      	movs	r3, #128	@ 0x80
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e26c      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea0 <UART_SetConfig+0x348>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d142      	bne.n	8005ebc <UART_SetConfig+0x364>
 8005e36:	4b16      	ldr	r3, [pc, #88]	@ (8005e90 <UART_SetConfig+0x338>)
 8005e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d838      	bhi.n	8005eb4 <UART_SetConfig+0x35c>
 8005e42:	a201      	add	r2, pc, #4	@ (adr r2, 8005e48 <UART_SetConfig+0x2f0>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e61 	.word	0x08005e61
 8005e4c:	08005e69 	.word	0x08005e69
 8005e50:	08005e71 	.word	0x08005e71
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005ea5 	.word	0x08005ea5
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e24e      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e24a      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e70:	2308      	movs	r3, #8
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e246      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e242      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005e80:	cfff69f3 	.word	0xcfff69f3
 8005e84:	58000c00 	.word	0x58000c00
 8005e88:	11fff4ff 	.word	0x11fff4ff
 8005e8c:	40011000 	.word	0x40011000
 8005e90:	58024400 	.word	0x58024400
 8005e94:	40004400 	.word	0x40004400
 8005e98:	40004800 	.word	0x40004800
 8005e9c:	40004c00 	.word	0x40004c00
 8005ea0:	40005000 	.word	0x40005000
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e22c      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005eac:	2340      	movs	r3, #64	@ 0x40
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e228      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005eb4:	2380      	movs	r3, #128	@ 0x80
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e224      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4ab1      	ldr	r2, [pc, #708]	@ (8006188 <UART_SetConfig+0x630>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d176      	bne.n	8005fb4 <UART_SetConfig+0x45c>
 8005ec6:	4bb1      	ldr	r3, [pc, #708]	@ (800618c <UART_SetConfig+0x634>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ece:	2b28      	cmp	r3, #40	@ 0x28
 8005ed0:	d86c      	bhi.n	8005fac <UART_SetConfig+0x454>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <UART_SetConfig+0x380>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005f7d 	.word	0x08005f7d
 8005edc:	08005fad 	.word	0x08005fad
 8005ee0:	08005fad 	.word	0x08005fad
 8005ee4:	08005fad 	.word	0x08005fad
 8005ee8:	08005fad 	.word	0x08005fad
 8005eec:	08005fad 	.word	0x08005fad
 8005ef0:	08005fad 	.word	0x08005fad
 8005ef4:	08005fad 	.word	0x08005fad
 8005ef8:	08005f85 	.word	0x08005f85
 8005efc:	08005fad 	.word	0x08005fad
 8005f00:	08005fad 	.word	0x08005fad
 8005f04:	08005fad 	.word	0x08005fad
 8005f08:	08005fad 	.word	0x08005fad
 8005f0c:	08005fad 	.word	0x08005fad
 8005f10:	08005fad 	.word	0x08005fad
 8005f14:	08005fad 	.word	0x08005fad
 8005f18:	08005f8d 	.word	0x08005f8d
 8005f1c:	08005fad 	.word	0x08005fad
 8005f20:	08005fad 	.word	0x08005fad
 8005f24:	08005fad 	.word	0x08005fad
 8005f28:	08005fad 	.word	0x08005fad
 8005f2c:	08005fad 	.word	0x08005fad
 8005f30:	08005fad 	.word	0x08005fad
 8005f34:	08005fad 	.word	0x08005fad
 8005f38:	08005f95 	.word	0x08005f95
 8005f3c:	08005fad 	.word	0x08005fad
 8005f40:	08005fad 	.word	0x08005fad
 8005f44:	08005fad 	.word	0x08005fad
 8005f48:	08005fad 	.word	0x08005fad
 8005f4c:	08005fad 	.word	0x08005fad
 8005f50:	08005fad 	.word	0x08005fad
 8005f54:	08005fad 	.word	0x08005fad
 8005f58:	08005f9d 	.word	0x08005f9d
 8005f5c:	08005fad 	.word	0x08005fad
 8005f60:	08005fad 	.word	0x08005fad
 8005f64:	08005fad 	.word	0x08005fad
 8005f68:	08005fad 	.word	0x08005fad
 8005f6c:	08005fad 	.word	0x08005fad
 8005f70:	08005fad 	.word	0x08005fad
 8005f74:	08005fad 	.word	0x08005fad
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e1c0      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005f84:	2304      	movs	r3, #4
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e1bc      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005f8c:	2308      	movs	r3, #8
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f92:	e1b8      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005f94:	2310      	movs	r3, #16
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9a:	e1b4      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa2:	e1b0      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005fa4:	2340      	movs	r3, #64	@ 0x40
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005faa:	e1ac      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005fac:	2380      	movs	r3, #128	@ 0x80
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb2:	e1a8      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a75      	ldr	r2, [pc, #468]	@ (8006190 <UART_SetConfig+0x638>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d130      	bne.n	8006020 <UART_SetConfig+0x4c8>
 8005fbe:	4b73      	ldr	r3, [pc, #460]	@ (800618c <UART_SetConfig+0x634>)
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	2b05      	cmp	r3, #5
 8005fc8:	d826      	bhi.n	8006018 <UART_SetConfig+0x4c0>
 8005fca:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd0 <UART_SetConfig+0x478>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005fe9 	.word	0x08005fe9
 8005fd4:	08005ff1 	.word	0x08005ff1
 8005fd8:	08005ff9 	.word	0x08005ff9
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e18a      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e186      	b.n	8006306 <UART_SetConfig+0x7ae>
 8005ff8:	2308      	movs	r3, #8
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffe:	e182      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006000:	2310      	movs	r3, #16
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006006:	e17e      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006008:	2320      	movs	r3, #32
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600e:	e17a      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006010:	2340      	movs	r3, #64	@ 0x40
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006016:	e176      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006018:	2380      	movs	r3, #128	@ 0x80
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601e:	e172      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a5b      	ldr	r2, [pc, #364]	@ (8006194 <UART_SetConfig+0x63c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d130      	bne.n	800608c <UART_SetConfig+0x534>
 800602a:	4b58      	ldr	r3, [pc, #352]	@ (800618c <UART_SetConfig+0x634>)
 800602c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2b05      	cmp	r3, #5
 8006034:	d826      	bhi.n	8006084 <UART_SetConfig+0x52c>
 8006036:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <UART_SetConfig+0x4e4>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	08006055 	.word	0x08006055
 8006040:	0800605d 	.word	0x0800605d
 8006044:	08006065 	.word	0x08006065
 8006048:	0800606d 	.word	0x0800606d
 800604c:	08006075 	.word	0x08006075
 8006050:	0800607d 	.word	0x0800607d
 8006054:	2300      	movs	r3, #0
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e154      	b.n	8006306 <UART_SetConfig+0x7ae>
 800605c:	2304      	movs	r3, #4
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e150      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006064:	2308      	movs	r3, #8
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e14c      	b.n	8006306 <UART_SetConfig+0x7ae>
 800606c:	2310      	movs	r3, #16
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e148      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006074:	2320      	movs	r3, #32
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607a:	e144      	b.n	8006306 <UART_SetConfig+0x7ae>
 800607c:	2340      	movs	r3, #64	@ 0x40
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006082:	e140      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006084:	2380      	movs	r3, #128	@ 0x80
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608a:	e13c      	b.n	8006306 <UART_SetConfig+0x7ae>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a41      	ldr	r2, [pc, #260]	@ (8006198 <UART_SetConfig+0x640>)
 8006092:	4293      	cmp	r3, r2
 8006094:	f040 8082 	bne.w	800619c <UART_SetConfig+0x644>
 8006098:	4b3c      	ldr	r3, [pc, #240]	@ (800618c <UART_SetConfig+0x634>)
 800609a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060a0:	2b28      	cmp	r3, #40	@ 0x28
 80060a2:	d86d      	bhi.n	8006180 <UART_SetConfig+0x628>
 80060a4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <UART_SetConfig+0x554>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	08006151 	.word	0x08006151
 80060b0:	08006181 	.word	0x08006181
 80060b4:	08006181 	.word	0x08006181
 80060b8:	08006181 	.word	0x08006181
 80060bc:	08006181 	.word	0x08006181
 80060c0:	08006181 	.word	0x08006181
 80060c4:	08006181 	.word	0x08006181
 80060c8:	08006181 	.word	0x08006181
 80060cc:	08006159 	.word	0x08006159
 80060d0:	08006181 	.word	0x08006181
 80060d4:	08006181 	.word	0x08006181
 80060d8:	08006181 	.word	0x08006181
 80060dc:	08006181 	.word	0x08006181
 80060e0:	08006181 	.word	0x08006181
 80060e4:	08006181 	.word	0x08006181
 80060e8:	08006181 	.word	0x08006181
 80060ec:	08006161 	.word	0x08006161
 80060f0:	08006181 	.word	0x08006181
 80060f4:	08006181 	.word	0x08006181
 80060f8:	08006181 	.word	0x08006181
 80060fc:	08006181 	.word	0x08006181
 8006100:	08006181 	.word	0x08006181
 8006104:	08006181 	.word	0x08006181
 8006108:	08006181 	.word	0x08006181
 800610c:	08006169 	.word	0x08006169
 8006110:	08006181 	.word	0x08006181
 8006114:	08006181 	.word	0x08006181
 8006118:	08006181 	.word	0x08006181
 800611c:	08006181 	.word	0x08006181
 8006120:	08006181 	.word	0x08006181
 8006124:	08006181 	.word	0x08006181
 8006128:	08006181 	.word	0x08006181
 800612c:	08006171 	.word	0x08006171
 8006130:	08006181 	.word	0x08006181
 8006134:	08006181 	.word	0x08006181
 8006138:	08006181 	.word	0x08006181
 800613c:	08006181 	.word	0x08006181
 8006140:	08006181 	.word	0x08006181
 8006144:	08006181 	.word	0x08006181
 8006148:	08006181 	.word	0x08006181
 800614c:	08006179 	.word	0x08006179
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e0d6      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006158:	2304      	movs	r3, #4
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e0d2      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006160:	2308      	movs	r3, #8
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e0ce      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006168:	2310      	movs	r3, #16
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e0ca      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006170:	2320      	movs	r3, #32
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e0c6      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006178:	2340      	movs	r3, #64	@ 0x40
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e0c2      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e0be      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006188:	40011400 	.word	0x40011400
 800618c:	58024400 	.word	0x58024400
 8006190:	40007800 	.word	0x40007800
 8006194:	40007c00 	.word	0x40007c00
 8006198:	40011800 	.word	0x40011800
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4aad      	ldr	r2, [pc, #692]	@ (8006458 <UART_SetConfig+0x900>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d176      	bne.n	8006294 <UART_SetConfig+0x73c>
 80061a6:	4bad      	ldr	r3, [pc, #692]	@ (800645c <UART_SetConfig+0x904>)
 80061a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061ae:	2b28      	cmp	r3, #40	@ 0x28
 80061b0:	d86c      	bhi.n	800628c <UART_SetConfig+0x734>
 80061b2:	a201      	add	r2, pc, #4	@ (adr r2, 80061b8 <UART_SetConfig+0x660>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	0800625d 	.word	0x0800625d
 80061bc:	0800628d 	.word	0x0800628d
 80061c0:	0800628d 	.word	0x0800628d
 80061c4:	0800628d 	.word	0x0800628d
 80061c8:	0800628d 	.word	0x0800628d
 80061cc:	0800628d 	.word	0x0800628d
 80061d0:	0800628d 	.word	0x0800628d
 80061d4:	0800628d 	.word	0x0800628d
 80061d8:	08006265 	.word	0x08006265
 80061dc:	0800628d 	.word	0x0800628d
 80061e0:	0800628d 	.word	0x0800628d
 80061e4:	0800628d 	.word	0x0800628d
 80061e8:	0800628d 	.word	0x0800628d
 80061ec:	0800628d 	.word	0x0800628d
 80061f0:	0800628d 	.word	0x0800628d
 80061f4:	0800628d 	.word	0x0800628d
 80061f8:	0800626d 	.word	0x0800626d
 80061fc:	0800628d 	.word	0x0800628d
 8006200:	0800628d 	.word	0x0800628d
 8006204:	0800628d 	.word	0x0800628d
 8006208:	0800628d 	.word	0x0800628d
 800620c:	0800628d 	.word	0x0800628d
 8006210:	0800628d 	.word	0x0800628d
 8006214:	0800628d 	.word	0x0800628d
 8006218:	08006275 	.word	0x08006275
 800621c:	0800628d 	.word	0x0800628d
 8006220:	0800628d 	.word	0x0800628d
 8006224:	0800628d 	.word	0x0800628d
 8006228:	0800628d 	.word	0x0800628d
 800622c:	0800628d 	.word	0x0800628d
 8006230:	0800628d 	.word	0x0800628d
 8006234:	0800628d 	.word	0x0800628d
 8006238:	0800627d 	.word	0x0800627d
 800623c:	0800628d 	.word	0x0800628d
 8006240:	0800628d 	.word	0x0800628d
 8006244:	0800628d 	.word	0x0800628d
 8006248:	0800628d 	.word	0x0800628d
 800624c:	0800628d 	.word	0x0800628d
 8006250:	0800628d 	.word	0x0800628d
 8006254:	0800628d 	.word	0x0800628d
 8006258:	08006285 	.word	0x08006285
 800625c:	2301      	movs	r3, #1
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e050      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006264:	2304      	movs	r3, #4
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e04c      	b.n	8006306 <UART_SetConfig+0x7ae>
 800626c:	2308      	movs	r3, #8
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e048      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006274:	2310      	movs	r3, #16
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e044      	b.n	8006306 <UART_SetConfig+0x7ae>
 800627c:	2320      	movs	r3, #32
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006282:	e040      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006284:	2340      	movs	r3, #64	@ 0x40
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628a:	e03c      	b.n	8006306 <UART_SetConfig+0x7ae>
 800628c:	2380      	movs	r3, #128	@ 0x80
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e038      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a71      	ldr	r2, [pc, #452]	@ (8006460 <UART_SetConfig+0x908>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d130      	bne.n	8006300 <UART_SetConfig+0x7a8>
 800629e:	4b6f      	ldr	r3, [pc, #444]	@ (800645c <UART_SetConfig+0x904>)
 80062a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b05      	cmp	r3, #5
 80062a8:	d826      	bhi.n	80062f8 <UART_SetConfig+0x7a0>
 80062aa:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <UART_SetConfig+0x758>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062c9 	.word	0x080062c9
 80062b4:	080062d1 	.word	0x080062d1
 80062b8:	080062d9 	.word	0x080062d9
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	2302      	movs	r3, #2
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e01a      	b.n	8006306 <UART_SetConfig+0x7ae>
 80062d0:	2304      	movs	r3, #4
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e016      	b.n	8006306 <UART_SetConfig+0x7ae>
 80062d8:	2308      	movs	r3, #8
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062de:	e012      	b.n	8006306 <UART_SetConfig+0x7ae>
 80062e0:	2310      	movs	r3, #16
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e6:	e00e      	b.n	8006306 <UART_SetConfig+0x7ae>
 80062e8:	2320      	movs	r3, #32
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ee:	e00a      	b.n	8006306 <UART_SetConfig+0x7ae>
 80062f0:	2340      	movs	r3, #64	@ 0x40
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e006      	b.n	8006306 <UART_SetConfig+0x7ae>
 80062f8:	2380      	movs	r3, #128	@ 0x80
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fe:	e002      	b.n	8006306 <UART_SetConfig+0x7ae>
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a55      	ldr	r2, [pc, #340]	@ (8006460 <UART_SetConfig+0x908>)
 800630c:	4293      	cmp	r3, r2
 800630e:	f040 80f8 	bne.w	8006502 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006312:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006316:	2b20      	cmp	r3, #32
 8006318:	dc46      	bgt.n	80063a8 <UART_SetConfig+0x850>
 800631a:	2b02      	cmp	r3, #2
 800631c:	db75      	blt.n	800640a <UART_SetConfig+0x8b2>
 800631e:	3b02      	subs	r3, #2
 8006320:	2b1e      	cmp	r3, #30
 8006322:	d872      	bhi.n	800640a <UART_SetConfig+0x8b2>
 8006324:	a201      	add	r2, pc, #4	@ (adr r2, 800632c <UART_SetConfig+0x7d4>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	080063af 	.word	0x080063af
 8006330:	0800640b 	.word	0x0800640b
 8006334:	080063b7 	.word	0x080063b7
 8006338:	0800640b 	.word	0x0800640b
 800633c:	0800640b 	.word	0x0800640b
 8006340:	0800640b 	.word	0x0800640b
 8006344:	080063c7 	.word	0x080063c7
 8006348:	0800640b 	.word	0x0800640b
 800634c:	0800640b 	.word	0x0800640b
 8006350:	0800640b 	.word	0x0800640b
 8006354:	0800640b 	.word	0x0800640b
 8006358:	0800640b 	.word	0x0800640b
 800635c:	0800640b 	.word	0x0800640b
 8006360:	0800640b 	.word	0x0800640b
 8006364:	080063d7 	.word	0x080063d7
 8006368:	0800640b 	.word	0x0800640b
 800636c:	0800640b 	.word	0x0800640b
 8006370:	0800640b 	.word	0x0800640b
 8006374:	0800640b 	.word	0x0800640b
 8006378:	0800640b 	.word	0x0800640b
 800637c:	0800640b 	.word	0x0800640b
 8006380:	0800640b 	.word	0x0800640b
 8006384:	0800640b 	.word	0x0800640b
 8006388:	0800640b 	.word	0x0800640b
 800638c:	0800640b 	.word	0x0800640b
 8006390:	0800640b 	.word	0x0800640b
 8006394:	0800640b 	.word	0x0800640b
 8006398:	0800640b 	.word	0x0800640b
 800639c:	0800640b 	.word	0x0800640b
 80063a0:	0800640b 	.word	0x0800640b
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	d02a      	beq.n	8006402 <UART_SetConfig+0x8aa>
 80063ac:	e02d      	b.n	800640a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063ae:	f7fe fed3 	bl	8005158 <HAL_RCCEx_GetD3PCLK1Freq>
 80063b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063b4:	e02f      	b.n	8006416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe fee2 	bl	8005184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c4:	e027      	b.n	8006416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c6:	f107 0318 	add.w	r3, r7, #24
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff f82e 	bl	800542c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d4:	e01f      	b.n	8006416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d6:	4b21      	ldr	r3, [pc, #132]	@ (800645c <UART_SetConfig+0x904>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063e2:	4b1e      	ldr	r3, [pc, #120]	@ (800645c <UART_SetConfig+0x904>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	f003 0303 	and.w	r3, r3, #3
 80063ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006464 <UART_SetConfig+0x90c>)
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063f4:	e00f      	b.n	8006416 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006464 <UART_SetConfig+0x90c>)
 80063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063fa:	e00c      	b.n	8006416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006468 <UART_SetConfig+0x910>)
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006400:	e009      	b.n	8006416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006408:	e005      	b.n	8006416 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006414:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 81ee 	beq.w	80067fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	4a12      	ldr	r2, [pc, #72]	@ (800646c <UART_SetConfig+0x914>)
 8006424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006428:	461a      	mov	r2, r3
 800642a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800642c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006430:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4413      	add	r3, r2
 800643c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800643e:	429a      	cmp	r2, r3
 8006440:	d305      	bcc.n	800644e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800644a:	429a      	cmp	r2, r3
 800644c:	d910      	bls.n	8006470 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006454:	e1d1      	b.n	80067fa <UART_SetConfig+0xca2>
 8006456:	bf00      	nop
 8006458:	40011c00 	.word	0x40011c00
 800645c:	58024400 	.word	0x58024400
 8006460:	58000c00 	.word	0x58000c00
 8006464:	03d09000 	.word	0x03d09000
 8006468:	003d0900 	.word	0x003d0900
 800646c:	0800b468 	.word	0x0800b468
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006472:	2200      	movs	r2, #0
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	60fa      	str	r2, [r7, #12]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	4ac0      	ldr	r2, [pc, #768]	@ (8006780 <UART_SetConfig+0xc28>)
 800647e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006482:	b29b      	uxth	r3, r3
 8006484:	2200      	movs	r2, #0
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006492:	f7f9 ff95 	bl	80003c0 <__aeabi_uldivmod>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4610      	mov	r0, r2
 800649c:	4619      	mov	r1, r3
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	020b      	lsls	r3, r1, #8
 80064a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064ac:	0202      	lsls	r2, r0, #8
 80064ae:	6979      	ldr	r1, [r7, #20]
 80064b0:	6849      	ldr	r1, [r1, #4]
 80064b2:	0849      	lsrs	r1, r1, #1
 80064b4:	2000      	movs	r0, #0
 80064b6:	460c      	mov	r4, r1
 80064b8:	4605      	mov	r5, r0
 80064ba:	eb12 0804 	adds.w	r8, r2, r4
 80064be:	eb43 0905 	adc.w	r9, r3, r5
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	469a      	mov	sl, r3
 80064ca:	4693      	mov	fp, r2
 80064cc:	4652      	mov	r2, sl
 80064ce:	465b      	mov	r3, fp
 80064d0:	4640      	mov	r0, r8
 80064d2:	4649      	mov	r1, r9
 80064d4:	f7f9 ff74 	bl	80003c0 <__aeabi_uldivmod>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4613      	mov	r3, r2
 80064de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e6:	d308      	bcc.n	80064fa <UART_SetConfig+0x9a2>
 80064e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ee:	d204      	bcs.n	80064fa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064f6:	60da      	str	r2, [r3, #12]
 80064f8:	e17f      	b.n	80067fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006500:	e17b      	b.n	80067fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800650a:	f040 80bd 	bne.w	8006688 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800650e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006512:	2b20      	cmp	r3, #32
 8006514:	dc48      	bgt.n	80065a8 <UART_SetConfig+0xa50>
 8006516:	2b00      	cmp	r3, #0
 8006518:	db7b      	blt.n	8006612 <UART_SetConfig+0xaba>
 800651a:	2b20      	cmp	r3, #32
 800651c:	d879      	bhi.n	8006612 <UART_SetConfig+0xaba>
 800651e:	a201      	add	r2, pc, #4	@ (adr r2, 8006524 <UART_SetConfig+0x9cc>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	080065af 	.word	0x080065af
 8006528:	080065b7 	.word	0x080065b7
 800652c:	08006613 	.word	0x08006613
 8006530:	08006613 	.word	0x08006613
 8006534:	080065bf 	.word	0x080065bf
 8006538:	08006613 	.word	0x08006613
 800653c:	08006613 	.word	0x08006613
 8006540:	08006613 	.word	0x08006613
 8006544:	080065cf 	.word	0x080065cf
 8006548:	08006613 	.word	0x08006613
 800654c:	08006613 	.word	0x08006613
 8006550:	08006613 	.word	0x08006613
 8006554:	08006613 	.word	0x08006613
 8006558:	08006613 	.word	0x08006613
 800655c:	08006613 	.word	0x08006613
 8006560:	08006613 	.word	0x08006613
 8006564:	080065df 	.word	0x080065df
 8006568:	08006613 	.word	0x08006613
 800656c:	08006613 	.word	0x08006613
 8006570:	08006613 	.word	0x08006613
 8006574:	08006613 	.word	0x08006613
 8006578:	08006613 	.word	0x08006613
 800657c:	08006613 	.word	0x08006613
 8006580:	08006613 	.word	0x08006613
 8006584:	08006613 	.word	0x08006613
 8006588:	08006613 	.word	0x08006613
 800658c:	08006613 	.word	0x08006613
 8006590:	08006613 	.word	0x08006613
 8006594:	08006613 	.word	0x08006613
 8006598:	08006613 	.word	0x08006613
 800659c:	08006613 	.word	0x08006613
 80065a0:	08006613 	.word	0x08006613
 80065a4:	08006605 	.word	0x08006605
 80065a8:	2b40      	cmp	r3, #64	@ 0x40
 80065aa:	d02e      	beq.n	800660a <UART_SetConfig+0xab2>
 80065ac:	e031      	b.n	8006612 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ae:	f7fd fc07 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 80065b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065b4:	e033      	b.n	800661e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b6:	f7fd fc19 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 80065ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065bc:	e02f      	b.n	800661e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fdde 	bl	8005184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065cc:	e027      	b.n	800661e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ce:	f107 0318 	add.w	r3, r7, #24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe ff2a 	bl	800542c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065dc:	e01f      	b.n	800661e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065de:	4b69      	ldr	r3, [pc, #420]	@ (8006784 <UART_SetConfig+0xc2c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065ea:	4b66      	ldr	r3, [pc, #408]	@ (8006784 <UART_SetConfig+0xc2c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	08db      	lsrs	r3, r3, #3
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	4a64      	ldr	r2, [pc, #400]	@ (8006788 <UART_SetConfig+0xc30>)
 80065f6:	fa22 f303 	lsr.w	r3, r2, r3
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065fc:	e00f      	b.n	800661e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80065fe:	4b62      	ldr	r3, [pc, #392]	@ (8006788 <UART_SetConfig+0xc30>)
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006602:	e00c      	b.n	800661e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006604:	4b61      	ldr	r3, [pc, #388]	@ (800678c <UART_SetConfig+0xc34>)
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006608:	e009      	b.n	800661e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800660e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006610:	e005      	b.n	800661e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800661c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800661e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80ea 	beq.w	80067fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662a:	4a55      	ldr	r2, [pc, #340]	@ (8006780 <UART_SetConfig+0xc28>)
 800662c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006630:	461a      	mov	r2, r3
 8006632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006634:	fbb3 f3f2 	udiv	r3, r3, r2
 8006638:	005a      	lsls	r2, r3, #1
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	441a      	add	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	fbb2 f3f3 	udiv	r3, r2, r3
 800664a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	2b0f      	cmp	r3, #15
 8006650:	d916      	bls.n	8006680 <UART_SetConfig+0xb28>
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006658:	d212      	bcs.n	8006680 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	b29b      	uxth	r3, r3
 800665e:	f023 030f 	bic.w	r3, r3, #15
 8006662:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	b29b      	uxth	r3, r3
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	b29a      	uxth	r2, r3
 8006670:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006672:	4313      	orrs	r3, r2
 8006674:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800667c:	60da      	str	r2, [r3, #12]
 800667e:	e0bc      	b.n	80067fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006686:	e0b8      	b.n	80067fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006688:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800668c:	2b20      	cmp	r3, #32
 800668e:	dc4b      	bgt.n	8006728 <UART_SetConfig+0xbd0>
 8006690:	2b00      	cmp	r3, #0
 8006692:	f2c0 8087 	blt.w	80067a4 <UART_SetConfig+0xc4c>
 8006696:	2b20      	cmp	r3, #32
 8006698:	f200 8084 	bhi.w	80067a4 <UART_SetConfig+0xc4c>
 800669c:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <UART_SetConfig+0xb4c>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	0800672f 	.word	0x0800672f
 80066a8:	08006737 	.word	0x08006737
 80066ac:	080067a5 	.word	0x080067a5
 80066b0:	080067a5 	.word	0x080067a5
 80066b4:	0800673f 	.word	0x0800673f
 80066b8:	080067a5 	.word	0x080067a5
 80066bc:	080067a5 	.word	0x080067a5
 80066c0:	080067a5 	.word	0x080067a5
 80066c4:	0800674f 	.word	0x0800674f
 80066c8:	080067a5 	.word	0x080067a5
 80066cc:	080067a5 	.word	0x080067a5
 80066d0:	080067a5 	.word	0x080067a5
 80066d4:	080067a5 	.word	0x080067a5
 80066d8:	080067a5 	.word	0x080067a5
 80066dc:	080067a5 	.word	0x080067a5
 80066e0:	080067a5 	.word	0x080067a5
 80066e4:	0800675f 	.word	0x0800675f
 80066e8:	080067a5 	.word	0x080067a5
 80066ec:	080067a5 	.word	0x080067a5
 80066f0:	080067a5 	.word	0x080067a5
 80066f4:	080067a5 	.word	0x080067a5
 80066f8:	080067a5 	.word	0x080067a5
 80066fc:	080067a5 	.word	0x080067a5
 8006700:	080067a5 	.word	0x080067a5
 8006704:	080067a5 	.word	0x080067a5
 8006708:	080067a5 	.word	0x080067a5
 800670c:	080067a5 	.word	0x080067a5
 8006710:	080067a5 	.word	0x080067a5
 8006714:	080067a5 	.word	0x080067a5
 8006718:	080067a5 	.word	0x080067a5
 800671c:	080067a5 	.word	0x080067a5
 8006720:	080067a5 	.word	0x080067a5
 8006724:	08006797 	.word	0x08006797
 8006728:	2b40      	cmp	r3, #64	@ 0x40
 800672a:	d037      	beq.n	800679c <UART_SetConfig+0xc44>
 800672c:	e03a      	b.n	80067a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800672e:	f7fd fb47 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8006732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006734:	e03c      	b.n	80067b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006736:	f7fd fb59 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 800673a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800673c:	e038      	b.n	80067b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fd1e 	bl	8005184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800674c:	e030      	b.n	80067b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800674e:	f107 0318 	add.w	r3, r7, #24
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fe6a 	bl	800542c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800675c:	e028      	b.n	80067b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800675e:	4b09      	ldr	r3, [pc, #36]	@ (8006784 <UART_SetConfig+0xc2c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d012      	beq.n	8006790 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800676a:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <UART_SetConfig+0xc2c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	08db      	lsrs	r3, r3, #3
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	4a04      	ldr	r2, [pc, #16]	@ (8006788 <UART_SetConfig+0xc30>)
 8006776:	fa22 f303 	lsr.w	r3, r2, r3
 800677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800677c:	e018      	b.n	80067b0 <UART_SetConfig+0xc58>
 800677e:	bf00      	nop
 8006780:	0800b468 	.word	0x0800b468
 8006784:	58024400 	.word	0x58024400
 8006788:	03d09000 	.word	0x03d09000
 800678c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006790:	4b24      	ldr	r3, [pc, #144]	@ (8006824 <UART_SetConfig+0xccc>)
 8006792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006794:	e00c      	b.n	80067b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006796:	4b24      	ldr	r3, [pc, #144]	@ (8006828 <UART_SetConfig+0xcd0>)
 8006798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679a:	e009      	b.n	80067b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a2:	e005      	b.n	80067b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067ae:	bf00      	nop
    }

    if (pclk != 0U)
 80067b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d021      	beq.n	80067fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	4a1c      	ldr	r2, [pc, #112]	@ (800682c <UART_SetConfig+0xcd4>)
 80067bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	441a      	add	r2, r3
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	2b0f      	cmp	r3, #15
 80067de:	d909      	bls.n	80067f4 <UART_SetConfig+0xc9c>
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e6:	d205      	bcs.n	80067f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	e002      	b.n	80067fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2201      	movs	r2, #1
 8006806:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2200      	movs	r2, #0
 8006814:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006816:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800681a:	4618      	mov	r0, r3
 800681c:	3748      	adds	r7, #72	@ 0x48
 800681e:	46bd      	mov	sp, r7
 8006820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006824:	03d09000 	.word	0x03d09000
 8006828:	003d0900 	.word	0x003d0900
 800682c:	0800b468 	.word	0x0800b468

08006830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01a      	beq.n	8006946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800692e:	d10a      	bne.n	8006946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b098      	sub	sp, #96	@ 0x60
 8006978:	af02      	add	r7, sp, #8
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006984:	f7fa fcb0 	bl	80012e8 <HAL_GetTick>
 8006988:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d12f      	bne.n	80069f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a0:	2200      	movs	r2, #0
 80069a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f88e 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d022      	beq.n	80069f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e6      	bne.n	80069b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e063      	b.n	8006ac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d149      	bne.n	8006a9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f857 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d03c      	beq.n	8006a9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e6      	bne.n	8006a20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a72:	61fa      	str	r2, [r7, #28]
 8006a74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	69b9      	ldr	r1, [r7, #24]
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e012      	b.n	8006ac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3758      	adds	r7, #88	@ 0x58
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad8:	e04f      	b.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d04b      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae2:	f7fa fc01 	bl	80012e8 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d302      	bcc.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e04e      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d037      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b80      	cmp	r3, #128	@ 0x80
 8006b0e:	d034      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b40      	cmp	r3, #64	@ 0x40
 8006b14:	d031      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d110      	bne.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f839 	bl	8006ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2208      	movs	r2, #8
 8006b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e029      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b54:	d111      	bne.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f81f 	bl	8006ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e00f      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4013      	ands	r3, r2
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	bf0c      	ite	eq
 8006b8a:	2301      	moveq	r3, #1
 8006b8c:	2300      	movne	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d0a0      	beq.n	8006ada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b095      	sub	sp, #84	@ 0x54
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e6      	bne.n	8006bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c6c <UART_EndRxTransfer+0xc8>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e5      	bne.n	8006bde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d118      	bne.n	8006c4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0310 	bic.w	r3, r3, #16
 8006c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c60:	bf00      	nop
 8006c62:	3754      	adds	r7, #84	@ 0x54
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	effffffe 	.word	0xeffffffe

08006c70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e027      	b.n	8006cd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2224      	movs	r2, #36	@ 0x24
 8006c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0201 	bic.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006cb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e02d      	b.n	8006d56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2224      	movs	r2, #36	@ 0x24
 8006d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0201 	bic.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f850 	bl	8006ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e02d      	b.n	8006dd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2224      	movs	r2, #36	@ 0x24
 8006d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f812 	bl	8006ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d108      	bne.n	8006dfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dfc:	e031      	b.n	8006e62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dfe:	2310      	movs	r3, #16
 8006e00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e02:	2310      	movs	r3, #16
 8006e04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	0e5b      	lsrs	r3, r3, #25
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	0f5b      	lsrs	r3, r3, #29
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	7b3a      	ldrb	r2, [r7, #12]
 8006e2a:	4911      	ldr	r1, [pc, #68]	@ (8006e70 <UARTEx_SetNbDataToProcess+0x94>)
 8006e2c:	5c8a      	ldrb	r2, [r1, r2]
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e32:	7b3a      	ldrb	r2, [r7, #12]
 8006e34:	490f      	ldr	r1, [pc, #60]	@ (8006e74 <UARTEx_SetNbDataToProcess+0x98>)
 8006e36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e38:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	7b7a      	ldrb	r2, [r7, #13]
 8006e48:	4909      	ldr	r1, [pc, #36]	@ (8006e70 <UARTEx_SetNbDataToProcess+0x94>)
 8006e4a:	5c8a      	ldrb	r2, [r1, r2]
 8006e4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e50:	7b7a      	ldrb	r2, [r7, #13]
 8006e52:	4908      	ldr	r1, [pc, #32]	@ (8006e74 <UARTEx_SetNbDataToProcess+0x98>)
 8006e54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e56:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	0800b480 	.word	0x0800b480
 8006e74:	0800b488 	.word	0x0800b488

08006e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e78:	b084      	sub	sp, #16
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	f107 001c 	add.w	r0, r7, #28
 8006e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d121      	bne.n	8006ed6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8006f54 <USB_CoreInit+0xdc>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d105      	bne.n	8006eca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fafa 	bl	80084c4 <USB_CoreReset>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]
 8006ed4:	e01b      	b.n	8006f0e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 faee 	bl	80084c4 <USB_CoreReset>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006eec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f00:	e005      	b.n	8006f0e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f0e:	7fbb      	ldrb	r3, [r7, #30]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d116      	bne.n	8006f42 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f22:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <USB_CoreInit+0xe0>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f043 0206 	orr.w	r2, r3, #6
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f043 0220 	orr.w	r2, r3, #32
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f4e:	b004      	add	sp, #16
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	ffbdffbf 	.word	0xffbdffbf
 8006f58:	03ee0000 	.word	0x03ee0000

08006f5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d165      	bne.n	800703c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4a41      	ldr	r2, [pc, #260]	@ (8007078 <USB_SetTurnaroundTime+0x11c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d906      	bls.n	8006f86 <USB_SetTurnaroundTime+0x2a>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a40      	ldr	r2, [pc, #256]	@ (800707c <USB_SetTurnaroundTime+0x120>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d202      	bcs.n	8006f86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f80:	230f      	movs	r3, #15
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	e062      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4a3c      	ldr	r2, [pc, #240]	@ (800707c <USB_SetTurnaroundTime+0x120>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d306      	bcc.n	8006f9c <USB_SetTurnaroundTime+0x40>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4a3b      	ldr	r2, [pc, #236]	@ (8007080 <USB_SetTurnaroundTime+0x124>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d202      	bcs.n	8006f9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f96:	230e      	movs	r3, #14
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	e057      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a38      	ldr	r2, [pc, #224]	@ (8007080 <USB_SetTurnaroundTime+0x124>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d306      	bcc.n	8006fb2 <USB_SetTurnaroundTime+0x56>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4a37      	ldr	r2, [pc, #220]	@ (8007084 <USB_SetTurnaroundTime+0x128>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d202      	bcs.n	8006fb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006fac:	230d      	movs	r3, #13
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e04c      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4a33      	ldr	r2, [pc, #204]	@ (8007084 <USB_SetTurnaroundTime+0x128>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d306      	bcc.n	8006fc8 <USB_SetTurnaroundTime+0x6c>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4a32      	ldr	r2, [pc, #200]	@ (8007088 <USB_SetTurnaroundTime+0x12c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d802      	bhi.n	8006fc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fc2:	230c      	movs	r3, #12
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	e041      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4a2f      	ldr	r2, [pc, #188]	@ (8007088 <USB_SetTurnaroundTime+0x12c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d906      	bls.n	8006fde <USB_SetTurnaroundTime+0x82>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800708c <USB_SetTurnaroundTime+0x130>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d802      	bhi.n	8006fde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fd8:	230b      	movs	r3, #11
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e036      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800708c <USB_SetTurnaroundTime+0x130>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d906      	bls.n	8006ff4 <USB_SetTurnaroundTime+0x98>
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4a29      	ldr	r2, [pc, #164]	@ (8007090 <USB_SetTurnaroundTime+0x134>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d802      	bhi.n	8006ff4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fee:	230a      	movs	r3, #10
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	e02b      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a26      	ldr	r2, [pc, #152]	@ (8007090 <USB_SetTurnaroundTime+0x134>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d906      	bls.n	800700a <USB_SetTurnaroundTime+0xae>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4a25      	ldr	r2, [pc, #148]	@ (8007094 <USB_SetTurnaroundTime+0x138>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d202      	bcs.n	800700a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007004:	2309      	movs	r3, #9
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	e020      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4a21      	ldr	r2, [pc, #132]	@ (8007094 <USB_SetTurnaroundTime+0x138>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d306      	bcc.n	8007020 <USB_SetTurnaroundTime+0xc4>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4a20      	ldr	r2, [pc, #128]	@ (8007098 <USB_SetTurnaroundTime+0x13c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d802      	bhi.n	8007020 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800701a:	2308      	movs	r3, #8
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e015      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4a1d      	ldr	r2, [pc, #116]	@ (8007098 <USB_SetTurnaroundTime+0x13c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d906      	bls.n	8007036 <USB_SetTurnaroundTime+0xda>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4a1c      	ldr	r2, [pc, #112]	@ (800709c <USB_SetTurnaroundTime+0x140>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d202      	bcs.n	8007036 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007030:	2307      	movs	r3, #7
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	e00a      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007036:	2306      	movs	r3, #6
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e007      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007042:	2309      	movs	r3, #9
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	e001      	b.n	800704c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007048:	2309      	movs	r3, #9
 800704a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	029b      	lsls	r3, r3, #10
 8007060:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007064:	431a      	orrs	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	00d8acbf 	.word	0x00d8acbf
 800707c:	00e4e1c0 	.word	0x00e4e1c0
 8007080:	00f42400 	.word	0x00f42400
 8007084:	01067380 	.word	0x01067380
 8007088:	011a499f 	.word	0x011a499f
 800708c:	01312cff 	.word	0x01312cff
 8007090:	014ca43f 	.word	0x014ca43f
 8007094:	016e3600 	.word	0x016e3600
 8007098:	01a6ab1f 	.word	0x01a6ab1f
 800709c:	01e84800 	.word	0x01e84800

080070a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f043 0201 	orr.w	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f023 0201 	bic.w	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d115      	bne.n	8007132 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007112:	200a      	movs	r0, #10
 8007114:	f7fa f8f4 	bl	8001300 <HAL_Delay>
      ms += 10U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	330a      	adds	r3, #10
 800711c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 f93f 	bl	80083a2 <USB_GetMode>
 8007124:	4603      	mov	r3, r0
 8007126:	2b01      	cmp	r3, #1
 8007128:	d01e      	beq.n	8007168 <USB_SetCurrentMode+0x84>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2bc7      	cmp	r3, #199	@ 0xc7
 800712e:	d9f0      	bls.n	8007112 <USB_SetCurrentMode+0x2e>
 8007130:	e01a      	b.n	8007168 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d115      	bne.n	8007164 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007144:	200a      	movs	r0, #10
 8007146:	f7fa f8db 	bl	8001300 <HAL_Delay>
      ms += 10U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	330a      	adds	r3, #10
 800714e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f926 	bl	80083a2 <USB_GetMode>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <USB_SetCurrentMode+0x84>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007160:	d9f0      	bls.n	8007144 <USB_SetCurrentMode+0x60>
 8007162:	e001      	b.n	8007168 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e005      	b.n	8007174 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2bc8      	cmp	r3, #200	@ 0xc8
 800716c:	d101      	bne.n	8007172 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e000      	b.n	8007174 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800717c:	b084      	sub	sp, #16
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800718a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007196:	2300      	movs	r3, #0
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	e009      	b.n	80071b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3340      	adds	r3, #64	@ 0x40
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	2200      	movs	r2, #0
 80071a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3301      	adds	r3, #1
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b0e      	cmp	r3, #14
 80071b4:	d9f2      	bls.n	800719c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d11c      	bne.n	80071f8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071cc:	f043 0302 	orr.w	r3, r3, #2
 80071d0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e005      	b.n	8007204 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800720a:	461a      	mov	r2, r3
 800720c:	2300      	movs	r3, #0
 800720e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007210:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007214:	2b01      	cmp	r3, #1
 8007216:	d10d      	bne.n	8007234 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007220:	2100      	movs	r1, #0
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f968 	bl	80074f8 <USB_SetDevSpeed>
 8007228:	e008      	b.n	800723c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800722a:	2101      	movs	r1, #1
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f963 	bl	80074f8 <USB_SetDevSpeed>
 8007232:	e003      	b.n	800723c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007234:	2103      	movs	r1, #3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f95e 	bl	80074f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800723c:	2110      	movs	r1, #16
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f8fa 	bl	8007438 <USB_FlushTxFifo>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f924 	bl	800749c <USB_FlushRxFifo>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007264:	461a      	mov	r2, r3
 8007266:	2300      	movs	r3, #0
 8007268:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007270:	461a      	mov	r2, r3
 8007272:	2300      	movs	r3, #0
 8007274:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800727c:	461a      	mov	r2, r3
 800727e:	2300      	movs	r3, #0
 8007280:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007282:	2300      	movs	r3, #0
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	e043      	b.n	8007310 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800729a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800729e:	d118      	bne.n	80072d2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b2:	461a      	mov	r2, r3
 80072b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	e013      	b.n	80072e4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c8:	461a      	mov	r2, r3
 80072ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	e008      	b.n	80072e4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072de:	461a      	mov	r2, r3
 80072e0:	2300      	movs	r3, #0
 80072e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f0:	461a      	mov	r2, r3
 80072f2:	2300      	movs	r3, #0
 80072f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007302:	461a      	mov	r2, r3
 8007304:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3301      	adds	r3, #1
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007314:	461a      	mov	r2, r3
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4293      	cmp	r3, r2
 800731a:	d3b5      	bcc.n	8007288 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800731c:	2300      	movs	r3, #0
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	e043      	b.n	80073aa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007338:	d118      	bne.n	800736c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734c:	461a      	mov	r2, r3
 800734e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e013      	b.n	800737e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007362:	461a      	mov	r2, r3
 8007364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	e008      	b.n	800737e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007378:	461a      	mov	r2, r3
 800737a:	2300      	movs	r3, #0
 800737c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738a:	461a      	mov	r2, r3
 800738c:	2300      	movs	r3, #0
 800738e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739c:	461a      	mov	r2, r3
 800739e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	3301      	adds	r3, #1
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073ae:	461a      	mov	r2, r3
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d3b5      	bcc.n	8007322 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	f043 0210 	orr.w	r2, r3, #16
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007430 <USB_DevInit+0x2b4>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f043 0208 	orr.w	r2, r3, #8
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800740c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007410:	2b01      	cmp	r3, #1
 8007412:	d105      	bne.n	8007420 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	4b06      	ldr	r3, [pc, #24]	@ (8007434 <USB_DevInit+0x2b8>)
 800741a:	4313      	orrs	r3, r2
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800742c:	b004      	add	sp, #16
 800742e:	4770      	bx	lr
 8007430:	803c3800 	.word	0x803c3800
 8007434:	40000004 	.word	0x40000004

08007438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007452:	d901      	bls.n	8007458 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e01b      	b.n	8007490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	daf2      	bge.n	8007446 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	019b      	lsls	r3, r3, #6
 8007468:	f043 0220 	orr.w	r2, r3, #32
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800747c:	d901      	bls.n	8007482 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e006      	b.n	8007490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b20      	cmp	r3, #32
 800748c:	d0f0      	beq.n	8007470 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074b4:	d901      	bls.n	80074ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e018      	b.n	80074ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	daf2      	bge.n	80074a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2210      	movs	r2, #16
 80074ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074d8:	d901      	bls.n	80074de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e006      	b.n	80074ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d0f0      	beq.n	80074cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007518:	4313      	orrs	r3, r2
 800751a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800752a:	b480      	push	{r7}
 800752c:	b087      	sub	sp, #28
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0306 	and.w	r3, r3, #6
 8007542:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
 800754e:	e00a      	b.n	8007566 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b02      	cmp	r3, #2
 8007554:	d002      	beq.n	800755c <USB_GetDevSpeed+0x32>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b06      	cmp	r3, #6
 800755a:	d102      	bne.n	8007562 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800755c:	2302      	movs	r3, #2
 800755e:	75fb      	strb	r3, [r7, #23]
 8007560:	e001      	b.n	8007566 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007562:	230f      	movs	r3, #15
 8007564:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
}
 8007568:	4618      	mov	r0, r3
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d139      	bne.n	8007604 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	2101      	movs	r1, #1
 80075a2:	fa01 f303 	lsl.w	r3, r1, r3
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	68f9      	ldr	r1, [r7, #12]
 80075aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075ae:	4313      	orrs	r3, r2
 80075b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d153      	bne.n	8007670 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	791b      	ldrb	r3, [r3, #4]
 80075e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	059b      	lsls	r3, r3, #22
 80075ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075ec:	431a      	orrs	r2, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	0159      	lsls	r1, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	440b      	add	r3, r1
 80075f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fa:	4619      	mov	r1, r3
 80075fc:	4b20      	ldr	r3, [pc, #128]	@ (8007680 <USB_ActivateEndpoint+0x10c>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	600b      	str	r3, [r1, #0]
 8007602:	e035      	b.n	8007670 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	2101      	movs	r1, #1
 8007616:	fa01 f303 	lsl.w	r3, r1, r3
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	68f9      	ldr	r1, [r7, #12]
 800761e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007622:	4313      	orrs	r3, r2
 8007624:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d119      	bne.n	8007670 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007658:	430b      	orrs	r3, r1
 800765a:	431a      	orrs	r2, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	0159      	lsls	r1, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	440b      	add	r3, r1
 8007664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007668:	4619      	mov	r1, r3
 800766a:	4b05      	ldr	r3, [pc, #20]	@ (8007680 <USB_ActivateEndpoint+0x10c>)
 800766c:	4313      	orrs	r3, r2
 800766e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	10008000 	.word	0x10008000

08007684 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d161      	bne.n	8007764 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076b6:	d11f      	bne.n	80076f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	2101      	movs	r1, #1
 800770a:	fa01 f303 	lsl.w	r3, r1, r3
 800770e:	b29b      	uxth	r3, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007718:	4013      	ands	r3, r2
 800771a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007722:	69da      	ldr	r2, [r3, #28]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	2101      	movs	r1, #1
 800772e:	fa01 f303 	lsl.w	r3, r1, r3
 8007732:	b29b      	uxth	r3, r3
 8007734:	43db      	mvns	r3, r3
 8007736:	68f9      	ldr	r1, [r7, #12]
 8007738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800773c:	4013      	ands	r3, r2
 800773e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	0159      	lsls	r1, r3, #5
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	440b      	add	r3, r1
 8007756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800775a:	4619      	mov	r1, r3
 800775c:	4b35      	ldr	r3, [pc, #212]	@ (8007834 <USB_DeactivateEndpoint+0x1b0>)
 800775e:	4013      	ands	r3, r2
 8007760:	600b      	str	r3, [r1, #0]
 8007762:	e060      	b.n	8007826 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800777a:	d11f      	bne.n	80077bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007796:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800779a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	2101      	movs	r1, #1
 80077ce:	fa01 f303 	lsl.w	r3, r1, r3
 80077d2:	041b      	lsls	r3, r3, #16
 80077d4:	43db      	mvns	r3, r3
 80077d6:	68f9      	ldr	r1, [r7, #12]
 80077d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077dc:	4013      	ands	r3, r2
 80077de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e6:	69da      	ldr	r2, [r3, #28]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 030f 	and.w	r3, r3, #15
 80077f0:	2101      	movs	r1, #1
 80077f2:	fa01 f303 	lsl.w	r3, r1, r3
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	43db      	mvns	r3, r3
 80077fa:	68f9      	ldr	r1, [r7, #12]
 80077fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007800:	4013      	ands	r3, r2
 8007802:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	0159      	lsls	r1, r3, #5
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	440b      	add	r3, r1
 800781a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781e:	4619      	mov	r1, r3
 8007820:	4b05      	ldr	r3, [pc, #20]	@ (8007838 <USB_DeactivateEndpoint+0x1b4>)
 8007822:	4013      	ands	r3, r2
 8007824:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	ec337800 	.word	0xec337800
 8007838:	eff37800 	.word	0xeff37800

0800783c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	@ 0x28
 8007840:	af02      	add	r7, sp, #8
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b01      	cmp	r3, #1
 800785a:	f040 8185 	bne.w	8007b68 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d132      	bne.n	80078cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	0159      	lsls	r1, r3, #5
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	440b      	add	r3, r1
 800787c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007880:	4619      	mov	r1, r3
 8007882:	4ba7      	ldr	r3, [pc, #668]	@ (8007b20 <USB_EPStartXfer+0x2e4>)
 8007884:	4013      	ands	r3, r2
 8007886:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	0159      	lsls	r1, r3, #5
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	440b      	add	r3, r1
 80078be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c2:	4619      	mov	r1, r3
 80078c4:	4b97      	ldr	r3, [pc, #604]	@ (8007b24 <USB_EPStartXfer+0x2e8>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	610b      	str	r3, [r1, #16]
 80078ca:	e097      	b.n	80079fc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d8:	691a      	ldr	r2, [r3, #16]
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	0159      	lsls	r1, r3, #5
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	440b      	add	r3, r1
 80078e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e6:	4619      	mov	r1, r3
 80078e8:	4b8e      	ldr	r3, [pc, #568]	@ (8007b24 <USB_EPStartXfer+0x2e8>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fa:	691a      	ldr	r2, [r3, #16]
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	0159      	lsls	r1, r3, #5
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	440b      	add	r3, r1
 8007904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007908:	4619      	mov	r1, r3
 800790a:	4b85      	ldr	r3, [pc, #532]	@ (8007b20 <USB_EPStartXfer+0x2e4>)
 800790c:	4013      	ands	r3, r2
 800790e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d11a      	bne.n	800794c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	429a      	cmp	r2, r3
 8007920:	d903      	bls.n	800792a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	0151      	lsls	r1, r2, #5
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	440a      	add	r2, r1
 8007940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007944:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007948:	6113      	str	r3, [r2, #16]
 800794a:	e044      	b.n	80079d6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	691a      	ldr	r2, [r3, #16]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	4413      	add	r3, r2
 8007956:	1e5a      	subs	r2, r3, #1
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007960:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	8afb      	ldrh	r3, [r7, #22]
 8007972:	04d9      	lsls	r1, r3, #19
 8007974:	4b6c      	ldr	r3, [pc, #432]	@ (8007b28 <USB_EPStartXfer+0x2ec>)
 8007976:	400b      	ands	r3, r1
 8007978:	69b9      	ldr	r1, [r7, #24]
 800797a:	0148      	lsls	r0, r1, #5
 800797c:	69f9      	ldr	r1, [r7, #28]
 800797e:	4401      	add	r1, r0
 8007980:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007984:	4313      	orrs	r3, r2
 8007986:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	791b      	ldrb	r3, [r3, #4]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d122      	bne.n	80079d6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	0151      	lsls	r1, r2, #5
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	440a      	add	r2, r1
 80079a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80079ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079bc:	691a      	ldr	r2, [r3, #16]
 80079be:	8afb      	ldrh	r3, [r7, #22]
 80079c0:	075b      	lsls	r3, r3, #29
 80079c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80079c6:	69b9      	ldr	r1, [r7, #24]
 80079c8:	0148      	lsls	r0, r1, #5
 80079ca:	69f9      	ldr	r1, [r7, #28]
 80079cc:	4401      	add	r1, r0
 80079ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079d2:	4313      	orrs	r3, r2
 80079d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ec:	69b9      	ldr	r1, [r7, #24]
 80079ee:	0148      	lsls	r0, r1, #5
 80079f0:	69f9      	ldr	r1, [r7, #28]
 80079f2:	4401      	add	r1, r0
 80079f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079f8:	4313      	orrs	r3, r2
 80079fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d14b      	bne.n	8007a9a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a16:	461a      	mov	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	791b      	ldrb	r3, [r3, #4]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d128      	bne.n	8007a78 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d110      	bne.n	8007a58 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	0151      	lsls	r1, r2, #5
 8007a48:	69fa      	ldr	r2, [r7, #28]
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	e00f      	b.n	8007a78 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a76:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	e169      	b.n	8007d6e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	0151      	lsls	r1, r2, #5
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	440a      	add	r2, r1
 8007ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ab8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	791b      	ldrb	r3, [r3, #4]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d015      	beq.n	8007aee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 8151 	beq.w	8007d6e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	2101      	movs	r1, #1
 8007ade:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae2:	69f9      	ldr	r1, [r7, #28]
 8007ae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	634b      	str	r3, [r1, #52]	@ 0x34
 8007aec:	e13f      	b.n	8007d6e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d116      	bne.n	8007b2c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	0151      	lsls	r1, r2, #5
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	440a      	add	r2, r1
 8007b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	e015      	b.n	8007b4c <USB_EPStartXfer+0x310>
 8007b20:	e007ffff 	.word	0xe007ffff
 8007b24:	fff80000 	.word	0xfff80000
 8007b28:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b4a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	68d9      	ldr	r1, [r3, #12]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	781a      	ldrb	r2, [r3, #0]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	b298      	uxth	r0, r3
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	4603      	mov	r3, r0
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f9b9 	bl	8007ed8 <USB_WritePacket>
 8007b66:	e102      	b.n	8007d6e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	0159      	lsls	r1, r3, #5
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	440b      	add	r3, r1
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b82:	4619      	mov	r1, r3
 8007b84:	4b7c      	ldr	r3, [pc, #496]	@ (8007d78 <USB_EPStartXfer+0x53c>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	0159      	lsls	r1, r3, #5
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	440b      	add	r3, r1
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4b75      	ldr	r3, [pc, #468]	@ (8007d7c <USB_EPStartXfer+0x540>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d12f      	bne.n	8007c12 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007be0:	69b9      	ldr	r1, [r7, #24]
 8007be2:	0148      	lsls	r0, r1, #5
 8007be4:	69f9      	ldr	r1, [r7, #28]
 8007be6:	4401      	add	r1, r0
 8007be8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007bec:	4313      	orrs	r3, r2
 8007bee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c0e:	6113      	str	r3, [r2, #16]
 8007c10:	e05f      	b.n	8007cd2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d123      	bne.n	8007c62 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c26:	691a      	ldr	r2, [r3, #16]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c30:	69b9      	ldr	r1, [r7, #24]
 8007c32:	0148      	lsls	r0, r1, #5
 8007c34:	69f9      	ldr	r1, [r7, #28]
 8007c36:	4401      	add	r1, r0
 8007c38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c5e:	6113      	str	r3, [r2, #16]
 8007c60:	e037      	b.n	8007cd2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	691a      	ldr	r2, [r3, #16]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	1e5a      	subs	r2, r3, #1
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c76:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	8afa      	ldrh	r2, [r7, #22]
 8007c7e:	fb03 f202 	mul.w	r2, r3, r2
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	8afb      	ldrh	r3, [r7, #22]
 8007c96:	04d9      	lsls	r1, r3, #19
 8007c98:	4b39      	ldr	r3, [pc, #228]	@ (8007d80 <USB_EPStartXfer+0x544>)
 8007c9a:	400b      	ands	r3, r1
 8007c9c:	69b9      	ldr	r1, [r7, #24]
 8007c9e:	0148      	lsls	r0, r1, #5
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	4401      	add	r1, r0
 8007ca4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc2:	69b9      	ldr	r1, [r7, #24]
 8007cc4:	0148      	lsls	r0, r1, #5
 8007cc6:	69f9      	ldr	r1, [r7, #28]
 8007cc8:	4401      	add	r1, r0
 8007cca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d10d      	bne.n	8007cf4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d009      	beq.n	8007cf4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	68d9      	ldr	r1, [r3, #12]
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf0:	460a      	mov	r2, r1
 8007cf2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	791b      	ldrb	r3, [r3, #4]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d128      	bne.n	8007d4e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d110      	bne.n	8007d2e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	e00f      	b.n	8007d4e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	0151      	lsls	r1, r2, #5
 8007d40:	69fa      	ldr	r2, [r7, #28]
 8007d42:	440a      	add	r2, r1
 8007d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d4c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	0151      	lsls	r1, r2, #5
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	440a      	add	r2, r1
 8007d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3720      	adds	r7, #32
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	fff80000 	.word	0xfff80000
 8007d7c:	e007ffff 	.word	0xe007ffff
 8007d80:	1ff80000 	.word	0x1ff80000

08007d84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d14a      	bne.n	8007e38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007db6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dba:	f040 8086 	bne.w	8007eca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	0151      	lsls	r1, r2, #5
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	440a      	add	r2, r1
 8007dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ddc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007de0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	7812      	ldrb	r2, [r2, #0]
 8007df6:	0151      	lsls	r1, r2, #5
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	440a      	add	r2, r1
 8007dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d902      	bls.n	8007e1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	75fb      	strb	r3, [r7, #23]
          break;
 8007e1a:	e056      	b.n	8007eca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e34:	d0e7      	beq.n	8007e06 <USB_EPStopXfer+0x82>
 8007e36:	e048      	b.n	8007eca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e50:	d13b      	bne.n	8007eca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	7812      	ldrb	r2, [r2, #0]
 8007e66:	0151      	lsls	r1, r2, #5
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	440a      	add	r2, r1
 8007e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	7812      	ldrb	r2, [r2, #0]
 8007e8a:	0151      	lsls	r1, r2, #5
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	440a      	add	r2, r1
 8007e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d902      	bls.n	8007eb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	75fb      	strb	r3, [r7, #23]
          break;
 8007eae:	e00c      	b.n	8007eca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ec8:	d0e7      	beq.n	8007e9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b089      	sub	sp, #36	@ 0x24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	71fb      	strb	r3, [r7, #7]
 8007eea:	4613      	mov	r3, r2
 8007eec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d123      	bne.n	8007f46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007efe:	88bb      	ldrh	r3, [r7, #4]
 8007f00:	3303      	adds	r3, #3
 8007f02:	089b      	lsrs	r3, r3, #2
 8007f04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f06:	2300      	movs	r3, #0
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	e018      	b.n	8007f3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	031a      	lsls	r2, r3, #12
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f18:	461a      	mov	r2, r3
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	3301      	adds	r3, #1
 8007f24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	3301      	adds	r3, #1
 8007f36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	61bb      	str	r3, [r7, #24]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d3e2      	bcc.n	8007f0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3724      	adds	r7, #36	@ 0x24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b08b      	sub	sp, #44	@ 0x2c
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	089b      	lsrs	r3, r3, #2
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f72:	88fb      	ldrh	r3, [r7, #6]
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	623b      	str	r3, [r7, #32]
 8007f7e:	e014      	b.n	8007faa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	3301      	adds	r3, #1
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	3301      	adds	r3, #1
 8007f96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	623b      	str	r3, [r7, #32]
 8007faa:	6a3a      	ldr	r2, [r7, #32]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d3e6      	bcc.n	8007f80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fb2:	8bfb      	ldrh	r3, [r7, #30]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01e      	beq.n	8007ff6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f107 0310 	add.w	r3, r7, #16
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	701a      	strb	r2, [r3, #0]
      i++;
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007fea:	8bfb      	ldrh	r3, [r7, #30]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ff0:	8bfb      	ldrh	r3, [r7, #30]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1ea      	bne.n	8007fcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	372c      	adds	r7, #44	@ 0x2c
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d12c      	bne.n	800807a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	db12      	blt.n	8008058 <USB_EPSetStall+0x54>
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00f      	beq.n	8008058 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008052:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008056:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	440a      	add	r2, r1
 800806e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008072:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	e02b      	b.n	80080d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	db12      	blt.n	80080b2 <USB_EPSetStall+0xae>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00f      	beq.n	80080b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	0151      	lsls	r1, r2, #5
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	440a      	add	r2, r1
 80080c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	785b      	ldrb	r3, [r3, #1]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d128      	bne.n	800814e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	0151      	lsls	r1, r2, #5
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	440a      	add	r2, r1
 8008112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008116:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800811a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	791b      	ldrb	r3, [r3, #4]
 8008120:	2b03      	cmp	r3, #3
 8008122:	d003      	beq.n	800812c <USB_EPClearStall+0x4c>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	791b      	ldrb	r3, [r3, #4]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d138      	bne.n	800819e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	440a      	add	r2, r1
 8008142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	e027      	b.n	800819e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	0151      	lsls	r1, r2, #5
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	440a      	add	r2, r1
 8008164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008168:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800816c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	791b      	ldrb	r3, [r3, #4]
 8008172:	2b03      	cmp	r3, #3
 8008174:	d003      	beq.n	800817e <USB_EPClearStall+0x9e>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	791b      	ldrb	r3, [r3, #4]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d10f      	bne.n	800819e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	440a      	add	r2, r1
 8008194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800819c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80081ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80081e0:	68f9      	ldr	r1, [r7, #12]
 80081e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081e6:	4313      	orrs	r3, r2
 80081e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008226:	f023 0302 	bic.w	r3, r3, #2
 800822a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800823a:	b480      	push	{r7}
 800823c:	b085      	sub	sp, #20
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008254:	f023 0303 	bic.w	r3, r3, #3
 8008258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008268:	f043 0302 	orr.w	r3, r3, #2
 800826c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4013      	ands	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008294:	68fb      	ldr	r3, [r7, #12]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	4013      	ands	r3, r2
 80082c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	0c1b      	lsrs	r3, r3, #16
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	4013      	ands	r3, r2
 80082f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	b29b      	uxth	r3, r3
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	4013      	ands	r3, r2
 8008336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008338:	68bb      	ldr	r3, [r7, #8]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008346:	b480      	push	{r7}
 8008348:	b087      	sub	sp, #28
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008368:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	fa22 f303 	lsr.w	r3, r2, r3
 8008376:	01db      	lsls	r3, r3, #7
 8008378:	b2db      	uxtb	r3, r3
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4313      	orrs	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4013      	ands	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008394:	68bb      	ldr	r3, [r7, #8]
}
 8008396:	4618      	mov	r0, r3
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f003 0301 	and.w	r3, r3, #1
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083da:	4619      	mov	r1, r3
 80083dc:	4b09      	ldr	r3, [pc, #36]	@ (8008404 <USB_ActivateSetup+0x44>)
 80083de:	4013      	ands	r3, r2
 80083e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	fffff800 	.word	0xfffff800

08008408 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	460b      	mov	r3, r1
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	333c      	adds	r3, #60	@ 0x3c
 800841e:	3304      	adds	r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	4a26      	ldr	r2, [pc, #152]	@ (80084c0 <USB_EP0_OutStart+0xb8>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d90a      	bls.n	8008442 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008438:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800843c:	d101      	bne.n	8008442 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	e037      	b.n	80084b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008448:	461a      	mov	r2, r3
 800844a:	2300      	movs	r3, #0
 800844c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800845c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008470:	f043 0318 	orr.w	r3, r3, #24
 8008474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008484:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008488:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d10f      	bne.n	80084b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80084ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	4f54300a 	.word	0x4f54300a

080084c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084dc:	d901      	bls.n	80084e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e01b      	b.n	800851a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	daf2      	bge.n	80084d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f043 0201 	orr.w	r2, r3, #1
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3301      	adds	r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008506:	d901      	bls.n	800850c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e006      	b.n	800851a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b01      	cmp	r3, #1
 8008516:	d0f0      	beq.n	80084fa <USB_CoreReset+0x36>

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008534:	2010      	movs	r0, #16
 8008536:	f002 f9a9 	bl	800a88c <USBD_static_malloc>
 800853a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d109      	bne.n	8008556 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	32b0      	adds	r2, #176	@ 0xb0
 800854c:	2100      	movs	r1, #0
 800854e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008552:	2302      	movs	r3, #2
 8008554:	e048      	b.n	80085e8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	32b0      	adds	r2, #176	@ 0xb0
 8008560:	68f9      	ldr	r1, [r7, #12]
 8008562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	32b0      	adds	r2, #176	@ 0xb0
 8008570:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	7c1b      	ldrb	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10d      	bne.n	800859e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008582:	4b1b      	ldr	r3, [pc, #108]	@ (80085f0 <USBD_HID_Init+0xc8>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	f003 020f 	and.w	r2, r3, #15
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	3326      	adds	r3, #38	@ 0x26
 8008598:	2207      	movs	r2, #7
 800859a:	801a      	strh	r2, [r3, #0]
 800859c:	e00c      	b.n	80085b8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800859e:	4b14      	ldr	r3, [pc, #80]	@ (80085f0 <USBD_HID_Init+0xc8>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	f003 020f 	and.w	r2, r3, #15
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	3326      	adds	r3, #38	@ 0x26
 80085b4:	220a      	movs	r2, #10
 80085b6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80085b8:	4b0d      	ldr	r3, [pc, #52]	@ (80085f0 <USBD_HID_Init+0xc8>)
 80085ba:	7819      	ldrb	r1, [r3, #0]
 80085bc:	2304      	movs	r3, #4
 80085be:	2203      	movs	r2, #3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f002 f852 	bl	800a66a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80085c6:	4b0a      	ldr	r3, [pc, #40]	@ (80085f0 <USBD_HID_Init+0xc8>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	f003 020f 	and.w	r2, r3, #15
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	4613      	mov	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	3324      	adds	r3, #36	@ 0x24
 80085dc:	2201      	movs	r2, #1
 80085de:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	240000c3 	.word	0x240000c3

080085f4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008600:	4b1f      	ldr	r3, [pc, #124]	@ (8008680 <USBD_HID_DeInit+0x8c>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f002 f855 	bl	800a6b6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800860c:	4b1c      	ldr	r3, [pc, #112]	@ (8008680 <USBD_HID_DeInit+0x8c>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 020f 	and.w	r2, r3, #15
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	3324      	adds	r3, #36	@ 0x24
 8008622:	2200      	movs	r2, #0
 8008624:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008626:	4b16      	ldr	r3, [pc, #88]	@ (8008680 <USBD_HID_DeInit+0x8c>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	f003 020f 	and.w	r2, r3, #15
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	440b      	add	r3, r1
 800863a:	3326      	adds	r3, #38	@ 0x26
 800863c:	2200      	movs	r2, #0
 800863e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	32b0      	adds	r2, #176	@ 0xb0
 800864a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d011      	beq.n	8008676 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	32b0      	adds	r2, #176	@ 0xb0
 800865c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008660:	4618      	mov	r0, r3
 8008662:	f002 f921 	bl	800a8a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	32b0      	adds	r2, #176	@ 0xb0
 8008670:	2100      	movs	r1, #0
 8008672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	240000c3 	.word	0x240000c3

08008684 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	32b0      	adds	r2, #176	@ 0xb0
 8008698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e0e8      	b.n	8008882 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d046      	beq.n	800874a <USBD_HID_Setup+0xc6>
 80086bc:	2b20      	cmp	r3, #32
 80086be:	f040 80d8 	bne.w	8008872 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	785b      	ldrb	r3, [r3, #1]
 80086c6:	3b02      	subs	r3, #2
 80086c8:	2b09      	cmp	r3, #9
 80086ca:	d836      	bhi.n	800873a <USBD_HID_Setup+0xb6>
 80086cc:	a201      	add	r2, pc, #4	@ (adr r2, 80086d4 <USBD_HID_Setup+0x50>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	0800872b 	.word	0x0800872b
 80086d8:	0800870b 	.word	0x0800870b
 80086dc:	0800873b 	.word	0x0800873b
 80086e0:	0800873b 	.word	0x0800873b
 80086e4:	0800873b 	.word	0x0800873b
 80086e8:	0800873b 	.word	0x0800873b
 80086ec:	0800873b 	.word	0x0800873b
 80086f0:	0800873b 	.word	0x0800873b
 80086f4:	08008719 	.word	0x08008719
 80086f8:	080086fd 	.word	0x080086fd
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	885b      	ldrh	r3, [r3, #2]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]
          break;
 8008708:	e01e      	b.n	8008748 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 fbdf 	bl	8009ed4 <USBD_CtlSendData>
          break;
 8008716:	e017      	b.n	8008748 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	885b      	ldrh	r3, [r3, #2]
 800871c:	0a1b      	lsrs	r3, r3, #8
 800871e:	b29b      	uxth	r3, r3
 8008720:	b2db      	uxtb	r3, r3
 8008722:	461a      	mov	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	605a      	str	r2, [r3, #4]
          break;
 8008728:	e00e      	b.n	8008748 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3304      	adds	r3, #4
 800872e:	2201      	movs	r2, #1
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fbce 	bl	8009ed4 <USBD_CtlSendData>
          break;
 8008738:	e006      	b.n	8008748 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 fb4c 	bl	8009dda <USBD_CtlError>
          ret = USBD_FAIL;
 8008742:	2303      	movs	r3, #3
 8008744:	75fb      	strb	r3, [r7, #23]
          break;
 8008746:	bf00      	nop
      }
      break;
 8008748:	e09a      	b.n	8008880 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	785b      	ldrb	r3, [r3, #1]
 800874e:	2b0b      	cmp	r3, #11
 8008750:	f200 8086 	bhi.w	8008860 <USBD_HID_Setup+0x1dc>
 8008754:	a201      	add	r2, pc, #4	@ (adr r2, 800875c <USBD_HID_Setup+0xd8>)
 8008756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875a:	bf00      	nop
 800875c:	0800878d 	.word	0x0800878d
 8008760:	0800886f 	.word	0x0800886f
 8008764:	08008861 	.word	0x08008861
 8008768:	08008861 	.word	0x08008861
 800876c:	08008861 	.word	0x08008861
 8008770:	08008861 	.word	0x08008861
 8008774:	080087b7 	.word	0x080087b7
 8008778:	08008861 	.word	0x08008861
 800877c:	08008861 	.word	0x08008861
 8008780:	08008861 	.word	0x08008861
 8008784:	0800880f 	.word	0x0800880f
 8008788:	08008839 	.word	0x08008839
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b03      	cmp	r3, #3
 8008796:	d107      	bne.n	80087a8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008798:	f107 030a 	add.w	r3, r7, #10
 800879c:	2202      	movs	r2, #2
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 fb97 	bl	8009ed4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087a6:	e063      	b.n	8008870 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 fb15 	bl	8009dda <USBD_CtlError>
            ret = USBD_FAIL;
 80087b0:	2303      	movs	r3, #3
 80087b2:	75fb      	strb	r3, [r7, #23]
          break;
 80087b4:	e05c      	b.n	8008870 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	0a1b      	lsrs	r3, r3, #8
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b22      	cmp	r3, #34	@ 0x22
 80087c0:	d108      	bne.n	80087d4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	88db      	ldrh	r3, [r3, #6]
 80087c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80087c8:	bf28      	it	cs
 80087ca:	233f      	movcs	r3, #63	@ 0x3f
 80087cc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80087ce:	4b2f      	ldr	r3, [pc, #188]	@ (800888c <USBD_HID_Setup+0x208>)
 80087d0:	613b      	str	r3, [r7, #16]
 80087d2:	e015      	b.n	8008800 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	885b      	ldrh	r3, [r3, #2]
 80087d8:	0a1b      	lsrs	r3, r3, #8
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2b21      	cmp	r3, #33	@ 0x21
 80087de:	d108      	bne.n	80087f2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80087e0:	4b2b      	ldr	r3, [pc, #172]	@ (8008890 <USBD_HID_Setup+0x20c>)
 80087e2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	88db      	ldrh	r3, [r3, #6]
 80087e8:	2b09      	cmp	r3, #9
 80087ea:	bf28      	it	cs
 80087ec:	2309      	movcs	r3, #9
 80087ee:	82bb      	strh	r3, [r7, #20]
 80087f0:	e006      	b.n	8008800 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 faf0 	bl	8009dda <USBD_CtlError>
            ret = USBD_FAIL;
 80087fa:	2303      	movs	r3, #3
 80087fc:	75fb      	strb	r3, [r7, #23]
            break;
 80087fe:	e037      	b.n	8008870 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008800:	8abb      	ldrh	r3, [r7, #20]
 8008802:	461a      	mov	r2, r3
 8008804:	6939      	ldr	r1, [r7, #16]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 fb64 	bl	8009ed4 <USBD_CtlSendData>
          break;
 800880c:	e030      	b.n	8008870 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b03      	cmp	r3, #3
 8008818:	d107      	bne.n	800882a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3308      	adds	r3, #8
 800881e:	2201      	movs	r2, #1
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 fb56 	bl	8009ed4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008828:	e022      	b.n	8008870 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 fad4 	bl	8009dda <USBD_CtlError>
            ret = USBD_FAIL;
 8008832:	2303      	movs	r3, #3
 8008834:	75fb      	strb	r3, [r7, #23]
          break;
 8008836:	e01b      	b.n	8008870 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b03      	cmp	r3, #3
 8008842:	d106      	bne.n	8008852 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	885b      	ldrh	r3, [r3, #2]
 8008848:	b2db      	uxtb	r3, r3
 800884a:	461a      	mov	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008850:	e00e      	b.n	8008870 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 fac0 	bl	8009dda <USBD_CtlError>
            ret = USBD_FAIL;
 800885a:	2303      	movs	r3, #3
 800885c:	75fb      	strb	r3, [r7, #23]
          break;
 800885e:	e007      	b.n	8008870 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fab9 	bl	8009dda <USBD_CtlError>
          ret = USBD_FAIL;
 8008868:	2303      	movs	r3, #3
 800886a:	75fb      	strb	r3, [r7, #23]
          break;
 800886c:	e000      	b.n	8008870 <USBD_HID_Setup+0x1ec>
          break;
 800886e:	bf00      	nop
      }
      break;
 8008870:	e006      	b.n	8008880 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 fab0 	bl	8009dda <USBD_CtlError>
      ret = USBD_FAIL;
 800887a:	2303      	movs	r3, #3
 800887c:	75fb      	strb	r3, [r7, #23]
      break;
 800887e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	24000084 	.word	0x24000084
 8008890:	2400006c 	.word	0x2400006c

08008894 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800889c:	2181      	movs	r1, #129	@ 0x81
 800889e:	4809      	ldr	r0, [pc, #36]	@ (80088c4 <USBD_HID_GetFSCfgDesc+0x30>)
 80088a0:	f000 fc3b 	bl	800911a <USBD_GetEpDesc>
 80088a4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	220a      	movs	r2, #10
 80088b0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2222      	movs	r2, #34	@ 0x22
 80088b6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80088b8:	4b02      	ldr	r3, [pc, #8]	@ (80088c4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	24000048 	.word	0x24000048

080088c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80088d0:	2181      	movs	r1, #129	@ 0x81
 80088d2:	4809      	ldr	r0, [pc, #36]	@ (80088f8 <USBD_HID_GetHSCfgDesc+0x30>)
 80088d4:	f000 fc21 	bl	800911a <USBD_GetEpDesc>
 80088d8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2207      	movs	r2, #7
 80088e4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2222      	movs	r2, #34	@ 0x22
 80088ea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80088ec:	4b02      	ldr	r3, [pc, #8]	@ (80088f8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	24000048 	.word	0x24000048

080088fc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008904:	2181      	movs	r1, #129	@ 0x81
 8008906:	4809      	ldr	r0, [pc, #36]	@ (800892c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008908:	f000 fc07 	bl	800911a <USBD_GetEpDesc>
 800890c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	220a      	movs	r2, #10
 8008918:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2222      	movs	r2, #34	@ 0x22
 800891e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008920:	4b02      	ldr	r3, [pc, #8]	@ (800892c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	24000048 	.word	0x24000048

08008930 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32b0      	adds	r2, #176	@ 0xb0
 8008946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894a:	2200      	movs	r2, #0
 800894c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	220a      	movs	r2, #10
 8008968:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800896a:	4b03      	ldr	r3, [pc, #12]	@ (8008978 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	24000078 	.word	0x24000078

0800897c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008990:	2303      	movs	r3, #3
 8008992:	e01f      	b.n	80089d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	79fa      	ldrb	r2, [r7, #7]
 80089c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f001 fde1 	bl	800a590 <USBD_LL_Init>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e025      	b.n	8008a40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	32ae      	adds	r2, #174	@ 0xae
 8008a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00f      	beq.n	8008a30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	32ae      	adds	r2, #174	@ 0xae
 8008a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a20:	f107 020e 	add.w	r2, r7, #14
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	4602      	mov	r2, r0
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 fdef 	bl	800a634 <USBD_LL_Start>
 8008a56:	4603      	mov	r3, r0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d009      	beq.n	8008aa4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	4798      	blx	r3
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f001 f936 	bl	8009d66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008b08:	461a      	mov	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b16:	f003 031f 	and.w	r3, r3, #31
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d01a      	beq.n	8008b54 <USBD_LL_SetupStage+0x72>
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d822      	bhi.n	8008b68 <USBD_LL_SetupStage+0x86>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <USBD_LL_SetupStage+0x4a>
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d00a      	beq.n	8008b40 <USBD_LL_SetupStage+0x5e>
 8008b2a:	e01d      	b.n	8008b68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fb63 	bl	8009200 <USBD_StdDevReq>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3e:	e020      	b.n	8008b82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fbcb 	bl	80092e4 <USBD_StdItfReq>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]
      break;
 8008b52:	e016      	b.n	8008b82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fc2d 	bl	80093bc <USBD_StdEPReq>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]
      break;
 8008b66:	e00c      	b.n	8008b82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 fdbc 	bl	800a6f4 <USBD_LL_StallEP>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b80:	bf00      	nop
  }

  return ret;
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	460b      	mov	r3, r1
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d16e      	bne.n	8008c82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008baa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	f040 8098 	bne.w	8008ce8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d913      	bls.n	8008bec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	1ad2      	subs	r2, r2, r3
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	bf28      	it	cs
 8008bde:	4613      	movcs	r3, r2
 8008be0:	461a      	mov	r2, r3
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f001 f9a1 	bl	8009f2c <USBD_CtlContinueRx>
 8008bea:	e07d      	b.n	8008ce8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d014      	beq.n	8008c24 <USBD_LL_DataOutStage+0x98>
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d81d      	bhi.n	8008c3a <USBD_LL_DataOutStage+0xae>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <USBD_LL_DataOutStage+0x7c>
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d003      	beq.n	8008c0e <USBD_LL_DataOutStage+0x82>
 8008c06:	e018      	b.n	8008c3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75bb      	strb	r3, [r7, #22]
            break;
 8008c0c:	e018      	b.n	8008c40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	4619      	mov	r1, r3
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fa64 	bl	80090e6 <USBD_CoreFindIF>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75bb      	strb	r3, [r7, #22]
            break;
 8008c22:	e00d      	b.n	8008c40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fa66 	bl	8009100 <USBD_CoreFindEP>
 8008c34:	4603      	mov	r3, r0
 8008c36:	75bb      	strb	r3, [r7, #22]
            break;
 8008c38:	e002      	b.n	8008c40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75bb      	strb	r3, [r7, #22]
            break;
 8008c3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008c40:	7dbb      	ldrb	r3, [r7, #22]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d119      	bne.n	8008c7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d113      	bne.n	8008c7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008c52:	7dba      	ldrb	r2, [r7, #22]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	32ae      	adds	r2, #174	@ 0xae
 8008c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c62:	7dba      	ldrb	r2, [r7, #22]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008c6a:	7dba      	ldrb	r2, [r7, #22]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	32ae      	adds	r2, #174	@ 0xae
 8008c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f001 f967 	bl	8009f4e <USBD_CtlSendStatus>
 8008c80:	e032      	b.n	8008ce8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fa37 	bl	8009100 <USBD_CoreFindEP>
 8008c92:	4603      	mov	r3, r0
 8008c94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c96:	7dbb      	ldrb	r3, [r7, #22]
 8008c98:	2bff      	cmp	r3, #255	@ 0xff
 8008c9a:	d025      	beq.n	8008ce8 <USBD_LL_DataOutStage+0x15c>
 8008c9c:	7dbb      	ldrb	r3, [r7, #22]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d122      	bne.n	8008ce8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d117      	bne.n	8008cde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008cae:	7dba      	ldrb	r2, [r7, #22]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	32ae      	adds	r2, #174	@ 0xae
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00f      	beq.n	8008cde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008cbe:	7dba      	ldrb	r2, [r7, #22]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008cc6:	7dba      	ldrb	r2, [r7, #22]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	32ae      	adds	r2, #174	@ 0xae
 8008ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	7afa      	ldrb	r2, [r7, #11]
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	4798      	blx	r3
 8008cda:	4603      	mov	r3, r0
 8008cdc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	e000      	b.n	8008cea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b086      	sub	sp, #24
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	607a      	str	r2, [r7, #4]
 8008cfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d16f      	bne.n	8008de6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3314      	adds	r3, #20
 8008d0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d15a      	bne.n	8008dcc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d914      	bls.n	8008d4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	689a      	ldr	r2, [r3, #8]
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	461a      	mov	r2, r3
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f001 f8e6 	bl	8009f0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2200      	movs	r2, #0
 8008d42:	2100      	movs	r1, #0
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f001 fd7f 	bl	800a848 <USBD_LL_PrepareReceive>
 8008d4a:	e03f      	b.n	8008dcc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d11c      	bne.n	8008d92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d316      	bcc.n	8008d92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d20f      	bcs.n	8008d92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d72:	2200      	movs	r2, #0
 8008d74:	2100      	movs	r1, #0
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f001 f8c7 	bl	8009f0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d84:	2300      	movs	r3, #0
 8008d86:	2200      	movs	r2, #0
 8008d88:	2100      	movs	r1, #0
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f001 fd5c 	bl	800a848 <USBD_LL_PrepareReceive>
 8008d90:	e01c      	b.n	8008dcc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d10f      	bne.n	8008dbe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d009      	beq.n	8008dbe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dbe:	2180      	movs	r1, #128	@ 0x80
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f001 fc97 	bl	800a6f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f001 f8d4 	bl	8009f74 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d03a      	beq.n	8008e4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7ff fe42 	bl	8008a60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008de4:	e032      	b.n	8008e4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008de6:	7afb      	ldrb	r3, [r7, #11]
 8008de8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	4619      	mov	r1, r3
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 f985 	bl	8009100 <USBD_CoreFindEP>
 8008df6:	4603      	mov	r3, r0
 8008df8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	2bff      	cmp	r3, #255	@ 0xff
 8008dfe:	d025      	beq.n	8008e4c <USBD_LL_DataInStage+0x15a>
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d122      	bne.n	8008e4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d11c      	bne.n	8008e4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008e12:	7dfa      	ldrb	r2, [r7, #23]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	32ae      	adds	r2, #174	@ 0xae
 8008e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d014      	beq.n	8008e4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008e22:	7dfa      	ldrb	r2, [r7, #23]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008e2a:	7dfa      	ldrb	r2, [r7, #23]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	32ae      	adds	r2, #174	@ 0xae
 8008e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	7afa      	ldrb	r2, [r7, #11]
 8008e38:	4611      	mov	r1, r2
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	4798      	blx	r3
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008e42:	7dbb      	ldrb	r3, [r7, #22]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008e48:	7dbb      	ldrb	r3, [r7, #22]
 8008e4a:	e000      	b.n	8008e4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d014      	beq.n	8008ebc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00e      	beq.n	8008ebc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6852      	ldr	r2, [r2, #4]
 8008eaa:	b2d2      	uxtb	r2, r2
 8008eac:	4611      	mov	r1, r2
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ebc:	2340      	movs	r3, #64	@ 0x40
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 fbd1 	bl	800a66a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2240      	movs	r2, #64	@ 0x40
 8008ed4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ed8:	2340      	movs	r3, #64	@ 0x40
 8008eda:	2200      	movs	r2, #0
 8008edc:	2180      	movs	r1, #128	@ 0x80
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f001 fbc3 	bl	800a66a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2240      	movs	r2, #64	@ 0x40
 8008eee:	621a      	str	r2, [r3, #32]

  return ret;
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	d006      	beq.n	8008f3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2204      	movs	r2, #4
 8008f40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d106      	bne.n	8008f74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d110      	bne.n	8008fb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	460b      	mov	r3, r1
 8008fcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	32ae      	adds	r2, #174	@ 0xae
 8008fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e01c      	b.n	800901e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d115      	bne.n	800901c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	32ae      	adds	r2, #174	@ 0xae
 8008ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	32ae      	adds	r2, #174	@ 0xae
 800900e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	78fa      	ldrb	r2, [r7, #3]
 8009016:	4611      	mov	r1, r2
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	32ae      	adds	r2, #174	@ 0xae
 800903c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009044:	2303      	movs	r3, #3
 8009046:	e01c      	b.n	8009082 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b03      	cmp	r3, #3
 8009052:	d115      	bne.n	8009080 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	32ae      	adds	r2, #174	@ 0xae
 800905e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	32ae      	adds	r2, #174	@ 0xae
 8009072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	4611      	mov	r1, r2
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00e      	beq.n	80090dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	6852      	ldr	r2, [r2, #4]
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	4611      	mov	r1, r2
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	4798      	blx	r3
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80090d8:	2303      	movs	r3, #3
 80090da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800910c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800910e:	4618      	mov	r0, r3
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b086      	sub	sp, #24
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	885b      	ldrh	r3, [r3, #2]
 8009136:	b29b      	uxth	r3, r3
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	7812      	ldrb	r2, [r2, #0]
 800913c:	4293      	cmp	r3, r2
 800913e:	d91f      	bls.n	8009180 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009146:	e013      	b.n	8009170 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009148:	f107 030a 	add.w	r3, r7, #10
 800914c:	4619      	mov	r1, r3
 800914e:	6978      	ldr	r0, [r7, #20]
 8009150:	f000 f81b 	bl	800918a <USBD_GetNextDesc>
 8009154:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	2b05      	cmp	r3, #5
 800915c:	d108      	bne.n	8009170 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	789b      	ldrb	r3, [r3, #2]
 8009166:	78fa      	ldrb	r2, [r7, #3]
 8009168:	429a      	cmp	r2, r3
 800916a:	d008      	beq.n	800917e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800916c:	2300      	movs	r3, #0
 800916e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	885b      	ldrh	r3, [r3, #2]
 8009174:	b29a      	uxth	r2, r3
 8009176:	897b      	ldrh	r3, [r7, #10]
 8009178:	429a      	cmp	r2, r3
 800917a:	d8e5      	bhi.n	8009148 <USBD_GetEpDesc+0x2e>
 800917c:	e000      	b.n	8009180 <USBD_GetEpDesc+0x66>
          break;
 800917e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009180:	693b      	ldr	r3, [r7, #16]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800918a:	b480      	push	{r7}
 800918c:	b085      	sub	sp, #20
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	7812      	ldrb	r2, [r2, #0]
 80091a0:	4413      	add	r3, r2
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	461a      	mov	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80091b4:	68fb      	ldr	r3, [r7, #12]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b087      	sub	sp, #28
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	3301      	adds	r3, #1
 80091d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80091e0:	8a3b      	ldrh	r3, [r7, #16]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	b21a      	sxth	r2, r3
 80091e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	b21b      	sxth	r3, r3
 80091ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80091f0:	89fb      	ldrh	r3, [r7, #14]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009216:	2b40      	cmp	r3, #64	@ 0x40
 8009218:	d005      	beq.n	8009226 <USBD_StdDevReq+0x26>
 800921a:	2b40      	cmp	r3, #64	@ 0x40
 800921c:	d857      	bhi.n	80092ce <USBD_StdDevReq+0xce>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00f      	beq.n	8009242 <USBD_StdDevReq+0x42>
 8009222:	2b20      	cmp	r3, #32
 8009224:	d153      	bne.n	80092ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	32ae      	adds	r2, #174	@ 0xae
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]
      break;
 8009240:	e04a      	b.n	80092d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	785b      	ldrb	r3, [r3, #1]
 8009246:	2b09      	cmp	r3, #9
 8009248:	d83b      	bhi.n	80092c2 <USBD_StdDevReq+0xc2>
 800924a:	a201      	add	r2, pc, #4	@ (adr r2, 8009250 <USBD_StdDevReq+0x50>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	080092a5 	.word	0x080092a5
 8009254:	080092b9 	.word	0x080092b9
 8009258:	080092c3 	.word	0x080092c3
 800925c:	080092af 	.word	0x080092af
 8009260:	080092c3 	.word	0x080092c3
 8009264:	08009283 	.word	0x08009283
 8009268:	08009279 	.word	0x08009279
 800926c:	080092c3 	.word	0x080092c3
 8009270:	0800929b 	.word	0x0800929b
 8009274:	0800928d 	.word	0x0800928d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa3c 	bl	80096f8 <USBD_GetDescriptor>
          break;
 8009280:	e024      	b.n	80092cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fbcb 	bl	8009a20 <USBD_SetAddress>
          break;
 800928a:	e01f      	b.n	80092cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fc0a 	bl	8009aa8 <USBD_SetConfig>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]
          break;
 8009298:	e018      	b.n	80092cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fcad 	bl	8009bfc <USBD_GetConfig>
          break;
 80092a2:	e013      	b.n	80092cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fcde 	bl	8009c68 <USBD_GetStatus>
          break;
 80092ac:	e00e      	b.n	80092cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fd0d 	bl	8009cd0 <USBD_SetFeature>
          break;
 80092b6:	e009      	b.n	80092cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fd31 	bl	8009d22 <USBD_ClrFeature>
          break;
 80092c0:	e004      	b.n	80092cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fd88 	bl	8009dda <USBD_CtlError>
          break;
 80092ca:	bf00      	nop
      }
      break;
 80092cc:	e004      	b.n	80092d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fd82 	bl	8009dda <USBD_CtlError>
      break;
 80092d6:	bf00      	nop
  }

  return ret;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop

080092e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092fa:	2b40      	cmp	r3, #64	@ 0x40
 80092fc:	d005      	beq.n	800930a <USBD_StdItfReq+0x26>
 80092fe:	2b40      	cmp	r3, #64	@ 0x40
 8009300:	d852      	bhi.n	80093a8 <USBD_StdItfReq+0xc4>
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <USBD_StdItfReq+0x26>
 8009306:	2b20      	cmp	r3, #32
 8009308:	d14e      	bne.n	80093a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009310:	b2db      	uxtb	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	2b02      	cmp	r3, #2
 8009316:	d840      	bhi.n	800939a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	889b      	ldrh	r3, [r3, #4]
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b01      	cmp	r3, #1
 8009320:	d836      	bhi.n	8009390 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	889b      	ldrh	r3, [r3, #4]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff fedb 	bl	80090e6 <USBD_CoreFindIF>
 8009330:	4603      	mov	r3, r0
 8009332:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	2bff      	cmp	r3, #255	@ 0xff
 8009338:	d01d      	beq.n	8009376 <USBD_StdItfReq+0x92>
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d11a      	bne.n	8009376 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009340:	7bba      	ldrb	r2, [r7, #14]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	32ae      	adds	r2, #174	@ 0xae
 8009346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00f      	beq.n	8009370 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009350:	7bba      	ldrb	r2, [r7, #14]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009358:	7bba      	ldrb	r2, [r7, #14]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	32ae      	adds	r2, #174	@ 0xae
 800935e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	4798      	blx	r3
 800936a:	4603      	mov	r3, r0
 800936c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800936e:	e004      	b.n	800937a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009370:	2303      	movs	r3, #3
 8009372:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009374:	e001      	b.n	800937a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009376:	2303      	movs	r3, #3
 8009378:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	88db      	ldrh	r3, [r3, #6]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d110      	bne.n	80093a4 <USBD_StdItfReq+0xc0>
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10d      	bne.n	80093a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fde0 	bl	8009f4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800938e:	e009      	b.n	80093a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fd21 	bl	8009dda <USBD_CtlError>
          break;
 8009398:	e004      	b.n	80093a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fd1c 	bl	8009dda <USBD_CtlError>
          break;
 80093a2:	e000      	b.n	80093a6 <USBD_StdItfReq+0xc2>
          break;
 80093a4:	bf00      	nop
      }
      break;
 80093a6:	e004      	b.n	80093b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fd15 	bl	8009dda <USBD_CtlError>
      break;
 80093b0:	bf00      	nop
  }

  return ret;
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	889b      	ldrh	r3, [r3, #4]
 80093ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093d8:	2b40      	cmp	r3, #64	@ 0x40
 80093da:	d007      	beq.n	80093ec <USBD_StdEPReq+0x30>
 80093dc:	2b40      	cmp	r3, #64	@ 0x40
 80093de:	f200 817f 	bhi.w	80096e0 <USBD_StdEPReq+0x324>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d02a      	beq.n	800943c <USBD_StdEPReq+0x80>
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	f040 817a 	bne.w	80096e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff fe85 	bl	8009100 <USBD_CoreFindEP>
 80093f6:	4603      	mov	r3, r0
 80093f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093fa:	7b7b      	ldrb	r3, [r7, #13]
 80093fc:	2bff      	cmp	r3, #255	@ 0xff
 80093fe:	f000 8174 	beq.w	80096ea <USBD_StdEPReq+0x32e>
 8009402:	7b7b      	ldrb	r3, [r7, #13]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f040 8170 	bne.w	80096ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800940a:	7b7a      	ldrb	r2, [r7, #13]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009412:	7b7a      	ldrb	r2, [r7, #13]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	32ae      	adds	r2, #174	@ 0xae
 8009418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 8163 	beq.w	80096ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009424:	7b7a      	ldrb	r2, [r7, #13]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	32ae      	adds	r2, #174	@ 0xae
 800942a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	4798      	blx	r3
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800943a:	e156      	b.n	80096ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	2b03      	cmp	r3, #3
 8009442:	d008      	beq.n	8009456 <USBD_StdEPReq+0x9a>
 8009444:	2b03      	cmp	r3, #3
 8009446:	f300 8145 	bgt.w	80096d4 <USBD_StdEPReq+0x318>
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 809b 	beq.w	8009586 <USBD_StdEPReq+0x1ca>
 8009450:	2b01      	cmp	r3, #1
 8009452:	d03c      	beq.n	80094ce <USBD_StdEPReq+0x112>
 8009454:	e13e      	b.n	80096d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d002      	beq.n	8009468 <USBD_StdEPReq+0xac>
 8009462:	2b03      	cmp	r3, #3
 8009464:	d016      	beq.n	8009494 <USBD_StdEPReq+0xd8>
 8009466:	e02c      	b.n	80094c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00d      	beq.n	800948a <USBD_StdEPReq+0xce>
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	2b80      	cmp	r3, #128	@ 0x80
 8009472:	d00a      	beq.n	800948a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 f93b 	bl	800a6f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800947e:	2180      	movs	r1, #128	@ 0x80
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 f937 	bl	800a6f4 <USBD_LL_StallEP>
 8009486:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009488:	e020      	b.n	80094cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fca4 	bl	8009dda <USBD_CtlError>
              break;
 8009492:	e01b      	b.n	80094cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	885b      	ldrh	r3, [r3, #2]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10e      	bne.n	80094ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00b      	beq.n	80094ba <USBD_StdEPReq+0xfe>
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	2b80      	cmp	r3, #128	@ 0x80
 80094a6:	d008      	beq.n	80094ba <USBD_StdEPReq+0xfe>
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	88db      	ldrh	r3, [r3, #6]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d104      	bne.n	80094ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 f91d 	bl	800a6f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fd47 	bl	8009f4e <USBD_CtlSendStatus>

              break;
 80094c0:	e004      	b.n	80094cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fc88 	bl	8009dda <USBD_CtlError>
              break;
 80094ca:	bf00      	nop
          }
          break;
 80094cc:	e107      	b.n	80096de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d002      	beq.n	80094e0 <USBD_StdEPReq+0x124>
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d016      	beq.n	800950c <USBD_StdEPReq+0x150>
 80094de:	e04b      	b.n	8009578 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00d      	beq.n	8009502 <USBD_StdEPReq+0x146>
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b80      	cmp	r3, #128	@ 0x80
 80094ea:	d00a      	beq.n	8009502 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 f8ff 	bl	800a6f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f6:	2180      	movs	r1, #128	@ 0x80
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f8fb 	bl	800a6f4 <USBD_LL_StallEP>
 80094fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009500:	e040      	b.n	8009584 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fc68 	bl	8009dda <USBD_CtlError>
              break;
 800950a:	e03b      	b.n	8009584 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	885b      	ldrh	r3, [r3, #2]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d136      	bne.n	8009582 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800951a:	2b00      	cmp	r3, #0
 800951c:	d004      	beq.n	8009528 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 f905 	bl	800a732 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fd10 	bl	8009f4e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800952e:	7bbb      	ldrb	r3, [r7, #14]
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff fde4 	bl	8009100 <USBD_CoreFindEP>
 8009538:	4603      	mov	r3, r0
 800953a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800953c:	7b7b      	ldrb	r3, [r7, #13]
 800953e:	2bff      	cmp	r3, #255	@ 0xff
 8009540:	d01f      	beq.n	8009582 <USBD_StdEPReq+0x1c6>
 8009542:	7b7b      	ldrb	r3, [r7, #13]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d11c      	bne.n	8009582 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009548:	7b7a      	ldrb	r2, [r7, #13]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009550:	7b7a      	ldrb	r2, [r7, #13]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	32ae      	adds	r2, #174	@ 0xae
 8009556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d010      	beq.n	8009582 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009560:	7b7a      	ldrb	r2, [r7, #13]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	32ae      	adds	r2, #174	@ 0xae
 8009566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	4798      	blx	r3
 8009572:	4603      	mov	r3, r0
 8009574:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009576:	e004      	b.n	8009582 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fc2d 	bl	8009dda <USBD_CtlError>
              break;
 8009580:	e000      	b.n	8009584 <USBD_StdEPReq+0x1c8>
              break;
 8009582:	bf00      	nop
          }
          break;
 8009584:	e0ab      	b.n	80096de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b02      	cmp	r3, #2
 8009590:	d002      	beq.n	8009598 <USBD_StdEPReq+0x1dc>
 8009592:	2b03      	cmp	r3, #3
 8009594:	d032      	beq.n	80095fc <USBD_StdEPReq+0x240>
 8009596:	e097      	b.n	80096c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d007      	beq.n	80095ae <USBD_StdEPReq+0x1f2>
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	2b80      	cmp	r3, #128	@ 0x80
 80095a2:	d004      	beq.n	80095ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fc17 	bl	8009dda <USBD_CtlError>
                break;
 80095ac:	e091      	b.n	80096d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	da0b      	bge.n	80095ce <USBD_StdEPReq+0x212>
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	3310      	adds	r3, #16
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	4413      	add	r3, r2
 80095ca:	3304      	adds	r3, #4
 80095cc:	e00b      	b.n	80095e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	4413      	add	r3, r2
 80095e4:	3304      	adds	r3, #4
 80095e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2202      	movs	r2, #2
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fc6d 	bl	8009ed4 <USBD_CtlSendData>
              break;
 80095fa:	e06a      	b.n	80096d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	da11      	bge.n	8009628 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	f003 020f 	and.w	r2, r3, #15
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	440b      	add	r3, r1
 8009616:	3324      	adds	r3, #36	@ 0x24
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d117      	bne.n	800964e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fbda 	bl	8009dda <USBD_CtlError>
                  break;
 8009626:	e054      	b.n	80096d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	f003 020f 	and.w	r2, r3, #15
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	4613      	mov	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	440b      	add	r3, r1
 800963a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d104      	bne.n	800964e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fbc7 	bl	8009dda <USBD_CtlError>
                  break;
 800964c:	e041      	b.n	80096d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800964e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009652:	2b00      	cmp	r3, #0
 8009654:	da0b      	bge.n	800966e <USBD_StdEPReq+0x2b2>
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	3310      	adds	r3, #16
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4413      	add	r3, r2
 800966a:	3304      	adds	r3, #4
 800966c:	e00b      	b.n	8009686 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009674:	4613      	mov	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	4413      	add	r3, r2
 8009684:	3304      	adds	r3, #4
 8009686:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <USBD_StdEPReq+0x2d8>
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	2b80      	cmp	r3, #128	@ 0x80
 8009692:	d103      	bne.n	800969c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2200      	movs	r2, #0
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	e00e      	b.n	80096ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f001 f865 	bl	800a770 <USBD_LL_IsStallEP>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2201      	movs	r2, #1
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	e002      	b.n	80096ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2200      	movs	r2, #0
 80096b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2202      	movs	r2, #2
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fc07 	bl	8009ed4 <USBD_CtlSendData>
              break;
 80096c6:	e004      	b.n	80096d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fb85 	bl	8009dda <USBD_CtlError>
              break;
 80096d0:	bf00      	nop
          }
          break;
 80096d2:	e004      	b.n	80096de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fb7f 	bl	8009dda <USBD_CtlError>
          break;
 80096dc:	bf00      	nop
      }
      break;
 80096de:	e005      	b.n	80096ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb79 	bl	8009dda <USBD_CtlError>
      break;
 80096e8:	e000      	b.n	80096ec <USBD_StdEPReq+0x330>
      break;
 80096ea:	bf00      	nop
  }

  return ret;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009702:	2300      	movs	r3, #0
 8009704:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800970a:	2300      	movs	r3, #0
 800970c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	885b      	ldrh	r3, [r3, #2]
 8009712:	0a1b      	lsrs	r3, r3, #8
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	2b0e      	cmp	r3, #14
 800971a:	f200 8152 	bhi.w	80099c2 <USBD_GetDescriptor+0x2ca>
 800971e:	a201      	add	r2, pc, #4	@ (adr r2, 8009724 <USBD_GetDescriptor+0x2c>)
 8009720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009724:	08009795 	.word	0x08009795
 8009728:	080097ad 	.word	0x080097ad
 800972c:	080097ed 	.word	0x080097ed
 8009730:	080099c3 	.word	0x080099c3
 8009734:	080099c3 	.word	0x080099c3
 8009738:	08009963 	.word	0x08009963
 800973c:	0800998f 	.word	0x0800998f
 8009740:	080099c3 	.word	0x080099c3
 8009744:	080099c3 	.word	0x080099c3
 8009748:	080099c3 	.word	0x080099c3
 800974c:	080099c3 	.word	0x080099c3
 8009750:	080099c3 	.word	0x080099c3
 8009754:	080099c3 	.word	0x080099c3
 8009758:	080099c3 	.word	0x080099c3
 800975c:	08009761 	.word	0x08009761
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00b      	beq.n	8009784 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	7c12      	ldrb	r2, [r2, #16]
 8009778:	f107 0108 	add.w	r1, r7, #8
 800977c:	4610      	mov	r0, r2
 800977e:	4798      	blx	r3
 8009780:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009782:	e126      	b.n	80099d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fb27 	bl	8009dda <USBD_CtlError>
        err++;
 800978c:	7afb      	ldrb	r3, [r7, #11]
 800978e:	3301      	adds	r3, #1
 8009790:	72fb      	strb	r3, [r7, #11]
      break;
 8009792:	e11e      	b.n	80099d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	7c12      	ldrb	r2, [r2, #16]
 80097a0:	f107 0108 	add.w	r1, r7, #8
 80097a4:	4610      	mov	r0, r2
 80097a6:	4798      	blx	r3
 80097a8:	60f8      	str	r0, [r7, #12]
      break;
 80097aa:	e112      	b.n	80099d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	7c1b      	ldrb	r3, [r3, #16]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10d      	bne.n	80097d0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097bc:	f107 0208 	add.w	r2, r7, #8
 80097c0:	4610      	mov	r0, r2
 80097c2:	4798      	blx	r3
 80097c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	2202      	movs	r2, #2
 80097cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097ce:	e100      	b.n	80099d2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d8:	f107 0208 	add.w	r2, r7, #8
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	2202      	movs	r2, #2
 80097e8:	701a      	strb	r2, [r3, #0]
      break;
 80097ea:	e0f2      	b.n	80099d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	885b      	ldrh	r3, [r3, #2]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	f200 80ac 	bhi.w	8009950 <USBD_GetDescriptor+0x258>
 80097f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <USBD_GetDescriptor+0x108>)
 80097fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fe:	bf00      	nop
 8009800:	08009819 	.word	0x08009819
 8009804:	0800984d 	.word	0x0800984d
 8009808:	08009881 	.word	0x08009881
 800980c:	080098b5 	.word	0x080098b5
 8009810:	080098e9 	.word	0x080098e9
 8009814:	0800991d 	.word	0x0800991d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	7c12      	ldrb	r2, [r2, #16]
 8009830:	f107 0108 	add.w	r1, r7, #8
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
 8009838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800983a:	e091      	b.n	8009960 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 facb 	bl	8009dda <USBD_CtlError>
            err++;
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	3301      	adds	r3, #1
 8009848:	72fb      	strb	r3, [r7, #11]
          break;
 800984a:	e089      	b.n	8009960 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7c12      	ldrb	r2, [r2, #16]
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800986e:	e077      	b.n	8009960 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fab1 	bl	8009dda <USBD_CtlError>
            err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
          break;
 800987e:	e06f      	b.n	8009960 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	7c12      	ldrb	r2, [r2, #16]
 8009898:	f107 0108 	add.w	r1, r7, #8
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
 80098a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098a2:	e05d      	b.n	8009960 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa97 	bl	8009dda <USBD_CtlError>
            err++;
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	3301      	adds	r3, #1
 80098b0:	72fb      	strb	r3, [r7, #11]
          break;
 80098b2:	e055      	b.n	8009960 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 0108 	add.w	r1, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d6:	e043      	b.n	8009960 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa7d 	bl	8009dda <USBD_CtlError>
            err++;
 80098e0:	7afb      	ldrb	r3, [r7, #11]
 80098e2:	3301      	adds	r3, #1
 80098e4:	72fb      	strb	r3, [r7, #11]
          break;
 80098e6:	e03b      	b.n	8009960 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7c12      	ldrb	r2, [r2, #16]
 8009900:	f107 0108 	add.w	r1, r7, #8
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
 8009908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800990a:	e029      	b.n	8009960 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa63 	bl	8009dda <USBD_CtlError>
            err++;
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	3301      	adds	r3, #1
 8009918:	72fb      	strb	r3, [r7, #11]
          break;
 800991a:	e021      	b.n	8009960 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00b      	beq.n	8009940 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	7c12      	ldrb	r2, [r2, #16]
 8009934:	f107 0108 	add.w	r1, r7, #8
 8009938:	4610      	mov	r0, r2
 800993a:	4798      	blx	r3
 800993c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800993e:	e00f      	b.n	8009960 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa49 	bl	8009dda <USBD_CtlError>
            err++;
 8009948:	7afb      	ldrb	r3, [r7, #11]
 800994a:	3301      	adds	r3, #1
 800994c:	72fb      	strb	r3, [r7, #11]
          break;
 800994e:	e007      	b.n	8009960 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa41 	bl	8009dda <USBD_CtlError>
          err++;
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	3301      	adds	r3, #1
 800995c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800995e:	bf00      	nop
      }
      break;
 8009960:	e037      	b.n	80099d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	7c1b      	ldrb	r3, [r3, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d109      	bne.n	800997e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009972:	f107 0208 	add.w	r2, r7, #8
 8009976:	4610      	mov	r0, r2
 8009978:	4798      	blx	r3
 800997a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800997c:	e029      	b.n	80099d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fa2a 	bl	8009dda <USBD_CtlError>
        err++;
 8009986:	7afb      	ldrb	r3, [r7, #11]
 8009988:	3301      	adds	r3, #1
 800998a:	72fb      	strb	r3, [r7, #11]
      break;
 800998c:	e021      	b.n	80099d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	7c1b      	ldrb	r3, [r3, #16]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10d      	bne.n	80099b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800999c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800999e:	f107 0208 	add.w	r2, r7, #8
 80099a2:	4610      	mov	r0, r2
 80099a4:	4798      	blx	r3
 80099a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3301      	adds	r3, #1
 80099ac:	2207      	movs	r2, #7
 80099ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099b0:	e00f      	b.n	80099d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fa10 	bl	8009dda <USBD_CtlError>
        err++;
 80099ba:	7afb      	ldrb	r3, [r7, #11]
 80099bc:	3301      	adds	r3, #1
 80099be:	72fb      	strb	r3, [r7, #11]
      break;
 80099c0:	e007      	b.n	80099d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fa08 	bl	8009dda <USBD_CtlError>
      err++;
 80099ca:	7afb      	ldrb	r3, [r7, #11]
 80099cc:	3301      	adds	r3, #1
 80099ce:	72fb      	strb	r3, [r7, #11]
      break;
 80099d0:	bf00      	nop
  }

  if (err != 0U)
 80099d2:	7afb      	ldrb	r3, [r7, #11]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d11e      	bne.n	8009a16 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	88db      	ldrh	r3, [r3, #6]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d016      	beq.n	8009a0e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80099e0:	893b      	ldrh	r3, [r7, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00e      	beq.n	8009a04 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	88da      	ldrh	r2, [r3, #6]
 80099ea:	893b      	ldrh	r3, [r7, #8]
 80099ec:	4293      	cmp	r3, r2
 80099ee:	bf28      	it	cs
 80099f0:	4613      	movcs	r3, r2
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099f6:	893b      	ldrh	r3, [r7, #8]
 80099f8:	461a      	mov	r2, r3
 80099fa:	68f9      	ldr	r1, [r7, #12]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fa69 	bl	8009ed4 <USBD_CtlSendData>
 8009a02:	e009      	b.n	8009a18 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9e7 	bl	8009dda <USBD_CtlError>
 8009a0c:	e004      	b.n	8009a18 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa9d 	bl	8009f4e <USBD_CtlSendStatus>
 8009a14:	e000      	b.n	8009a18 <USBD_GetDescriptor+0x320>
    return;
 8009a16:	bf00      	nop
  }
}
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop

08009a20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	889b      	ldrh	r3, [r3, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d131      	bne.n	8009a96 <USBD_SetAddress+0x76>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	88db      	ldrh	r3, [r3, #6]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d12d      	bne.n	8009a96 <USBD_SetAddress+0x76>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	885b      	ldrh	r3, [r3, #2]
 8009a3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a40:	d829      	bhi.n	8009a96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	885b      	ldrh	r3, [r3, #2]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d104      	bne.n	8009a64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f9bc 	bl	8009dda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a62:	e01d      	b.n	8009aa0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	7bfa      	ldrb	r2, [r7, #15]
 8009a68:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fea9 	bl	800a7c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa69 	bl	8009f4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d004      	beq.n	8009a8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2202      	movs	r2, #2
 8009a86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8a:	e009      	b.n	8009aa0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a94:	e004      	b.n	8009aa0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f99e 	bl	8009dda <USBD_CtlError>
  }
}
 8009a9e:	bf00      	nop
 8009aa0:	bf00      	nop
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	885b      	ldrh	r3, [r3, #2]
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	4b4e      	ldr	r3, [pc, #312]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009abe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d905      	bls.n	8009ad4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f985 	bl	8009dda <USBD_CtlError>
    return USBD_FAIL;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e08c      	b.n	8009bee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d002      	beq.n	8009ae6 <USBD_SetConfig+0x3e>
 8009ae0:	2b03      	cmp	r3, #3
 8009ae2:	d029      	beq.n	8009b38 <USBD_SetConfig+0x90>
 8009ae4:	e075      	b.n	8009bd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009ae6:	4b44      	ldr	r3, [pc, #272]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d020      	beq.n	8009b30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009aee:	4b42      	ldr	r3, [pc, #264]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009af8:	4b3f      	ldr	r3, [pc, #252]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7fe ffb9 	bl	8008a76 <USBD_SetClassConfig>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d008      	beq.n	8009b20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f962 	bl	8009dda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b1e:	e065      	b.n	8009bec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fa14 	bl	8009f4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2203      	movs	r2, #3
 8009b2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b2e:	e05d      	b.n	8009bec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fa0c 	bl	8009f4e <USBD_CtlSendStatus>
      break;
 8009b36:	e059      	b.n	8009bec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b38:	4b2f      	ldr	r3, [pc, #188]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d112      	bne.n	8009b66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009b48:	4b2b      	ldr	r3, [pc, #172]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b52:	4b29      	ldr	r3, [pc, #164]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7fe ffa8 	bl	8008aae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f9f5 	bl	8009f4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b64:	e042      	b.n	8009bec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009b66:	4b24      	ldr	r3, [pc, #144]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d02a      	beq.n	8009bca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7fe ff96 	bl	8008aae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b82:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7fe ff6f 	bl	8008a76 <USBD_SetClassConfig>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00f      	beq.n	8009bc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f918 	bl	8009dda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7fe ff7b 	bl	8008aae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009bc0:	e014      	b.n	8009bec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f9c3 	bl	8009f4e <USBD_CtlSendStatus>
      break;
 8009bc8:	e010      	b.n	8009bec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f9bf 	bl	8009f4e <USBD_CtlSendStatus>
      break;
 8009bd0:	e00c      	b.n	8009bec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f900 	bl	8009dda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bda:	4b07      	ldr	r3, [pc, #28]	@ (8009bf8 <USBD_SetConfig+0x150>)
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7fe ff64 	bl	8008aae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009be6:	2303      	movs	r3, #3
 8009be8:	73fb      	strb	r3, [r7, #15]
      break;
 8009bea:	bf00      	nop
  }

  return ret;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	2400023c 	.word	0x2400023c

08009bfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	88db      	ldrh	r3, [r3, #6]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d004      	beq.n	8009c18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f8e2 	bl	8009dda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c16:	e023      	b.n	8009c60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	dc02      	bgt.n	8009c2a <USBD_GetConfig+0x2e>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dc03      	bgt.n	8009c30 <USBD_GetConfig+0x34>
 8009c28:	e015      	b.n	8009c56 <USBD_GetConfig+0x5a>
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d00b      	beq.n	8009c46 <USBD_GetConfig+0x4a>
 8009c2e:	e012      	b.n	8009c56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3308      	adds	r3, #8
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f948 	bl	8009ed4 <USBD_CtlSendData>
        break;
 8009c44:	e00c      	b.n	8009c60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f940 	bl	8009ed4 <USBD_CtlSendData>
        break;
 8009c54:	e004      	b.n	8009c60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c56:	6839      	ldr	r1, [r7, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f8be 	bl	8009dda <USBD_CtlError>
        break;
 8009c5e:	bf00      	nop
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d81e      	bhi.n	8009cbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	88db      	ldrh	r3, [r3, #6]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d004      	beq.n	8009c92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f8a5 	bl	8009dda <USBD_CtlError>
        break;
 8009c90:	e01a      	b.n	8009cc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d005      	beq.n	8009cae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	f043 0202 	orr.w	r2, r3, #2
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	330c      	adds	r3, #12
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f90c 	bl	8009ed4 <USBD_CtlSendData>
      break;
 8009cbc:	e004      	b.n	8009cc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f88a 	bl	8009dda <USBD_CtlError>
      break;
 8009cc6:	bf00      	nop
  }
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	885b      	ldrh	r3, [r3, #2]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d107      	bne.n	8009cf2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f92f 	bl	8009f4e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009cf0:	e013      	b.n	8009d1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d10b      	bne.n	8009d12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	889b      	ldrh	r3, [r3, #4]
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f91f 	bl	8009f4e <USBD_CtlSendStatus>
}
 8009d10:	e003      	b.n	8009d1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f860 	bl	8009dda <USBD_CtlError>
}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	3b01      	subs	r3, #1
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d80b      	bhi.n	8009d52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	885b      	ldrh	r3, [r3, #2]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d10c      	bne.n	8009d5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8ff 	bl	8009f4e <USBD_CtlSendStatus>
      }
      break;
 8009d50:	e004      	b.n	8009d5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f840 	bl	8009dda <USBD_CtlError>
      break;
 8009d5a:	e000      	b.n	8009d5e <USBD_ClrFeature+0x3c>
      break;
 8009d5c:	bf00      	nop
  }
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	781a      	ldrb	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	781a      	ldrb	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f7ff fa16 	bl	80091c2 <SWAPBYTE>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3301      	adds	r3, #1
 8009da8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f7ff fa09 	bl	80091c2 <SWAPBYTE>
 8009db0:	4603      	mov	r3, r0
 8009db2:	461a      	mov	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff f9fc 	bl	80091c2 <SWAPBYTE>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	461a      	mov	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	80da      	strh	r2, [r3, #6]
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b082      	sub	sp, #8
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009de4:	2180      	movs	r1, #128	@ 0x80
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fc84 	bl	800a6f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009dec:	2100      	movs	r1, #0
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fc80 	bl	800a6f4 <USBD_LL_StallEP>
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d042      	beq.n	8009e98 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009e16:	6938      	ldr	r0, [r7, #16]
 8009e18:	f000 f842 	bl	8009ea0 <USBD_GetLen>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	3301      	adds	r3, #1
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e26:	d808      	bhi.n	8009e3a <USBD_GetString+0x3e>
 8009e28:	6938      	ldr	r0, [r7, #16]
 8009e2a:	f000 f839 	bl	8009ea0 <USBD_GetLen>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	3301      	adds	r3, #1
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	e001      	b.n	8009e3e <USBD_GetString+0x42>
 8009e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	4413      	add	r3, r2
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	7812      	ldrb	r2, [r2, #0]
 8009e4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	3301      	adds	r3, #1
 8009e52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	4413      	add	r3, r2
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	3301      	adds	r3, #1
 8009e62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e64:	e013      	b.n	8009e8e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	7812      	ldrb	r2, [r2, #0]
 8009e70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	3301      	adds	r3, #1
 8009e76:	613b      	str	r3, [r7, #16]
    idx++;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	4413      	add	r3, r2
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e7      	bne.n	8009e66 <USBD_GetString+0x6a>
 8009e96:	e000      	b.n	8009e9a <USBD_GetString+0x9e>
    return;
 8009e98:	bf00      	nop
  }
}
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009eb0:	e005      	b.n	8009ebe <USBD_GetLen+0x1e>
  {
    len++;
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1f5      	bne.n	8009eb2 <USBD_GetLen+0x12>
  }

  return len;
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	2100      	movs	r1, #0
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 fc83 	bl	800a806 <USBD_LL_Transmit>

  return USBD_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 fc72 	bl	800a806 <USBD_LL_Transmit>

  return USBD_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 fc82 	bl	800a848 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b082      	sub	sp, #8
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2204      	movs	r2, #4
 8009f5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f5e:	2300      	movs	r3, #0
 8009f60:	2200      	movs	r2, #0
 8009f62:	2100      	movs	r1, #0
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fc4e 	bl	800a806 <USBD_LL_Transmit>

  return USBD_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2205      	movs	r2, #5
 8009f80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f84:	2300      	movs	r3, #0
 8009f86:	2200      	movs	r2, #0
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fc5c 	bl	800a848 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	490f      	ldr	r1, [pc, #60]	@ (8009fe0 <MX_USB_DEVICE_Init+0x44>)
 8009fa4:	480f      	ldr	r0, [pc, #60]	@ (8009fe4 <MX_USB_DEVICE_Init+0x48>)
 8009fa6:	f7fe fce9 	bl	800897c <USBD_Init>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009fb0:	f7f6 ff48 	bl	8000e44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8009fb4:	490c      	ldr	r1, [pc, #48]	@ (8009fe8 <MX_USB_DEVICE_Init+0x4c>)
 8009fb6:	480b      	ldr	r0, [pc, #44]	@ (8009fe4 <MX_USB_DEVICE_Init+0x48>)
 8009fb8:	f7fe fd10 	bl	80089dc <USBD_RegisterClass>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009fc2:	f7f6 ff3f 	bl	8000e44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009fc6:	4807      	ldr	r0, [pc, #28]	@ (8009fe4 <MX_USB_DEVICE_Init+0x48>)
 8009fc8:	f7fe fd3e 	bl	8008a48 <USBD_Start>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009fd2:	f7f6 ff37 	bl	8000e44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009fd6:	f7f8 ffa9 	bl	8002f2c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009fda:	bf00      	nop
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	240000c4 	.word	0x240000c4
 8009fe4:	24000240 	.word	0x24000240
 8009fe8:	24000010 	.word	0x24000010

08009fec <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2212      	movs	r2, #18
 8009ffc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009ffe:	4b03      	ldr	r3, [pc, #12]	@ (800a00c <USBD_HS_DeviceDescriptor+0x20>)
}
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	240000e4 	.word	0x240000e4

0800a010 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2204      	movs	r2, #4
 800a020:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a022:	4b03      	ldr	r3, [pc, #12]	@ (800a030 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	240000f8 	.word	0x240000f8

0800a034 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	6039      	str	r1, [r7, #0]
 800a03e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d105      	bne.n	800a052 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	4907      	ldr	r1, [pc, #28]	@ (800a068 <USBD_HS_ProductStrDescriptor+0x34>)
 800a04a:	4808      	ldr	r0, [pc, #32]	@ (800a06c <USBD_HS_ProductStrDescriptor+0x38>)
 800a04c:	f7ff fed6 	bl	8009dfc <USBD_GetString>
 800a050:	e004      	b.n	800a05c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	4904      	ldr	r1, [pc, #16]	@ (800a068 <USBD_HS_ProductStrDescriptor+0x34>)
 800a056:	4805      	ldr	r0, [pc, #20]	@ (800a06c <USBD_HS_ProductStrDescriptor+0x38>)
 800a058:	f7ff fed0 	bl	8009dfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a05c:	4b02      	ldr	r3, [pc, #8]	@ (800a068 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	2400051c 	.word	0x2400051c
 800a06c:	0800b410 	.word	0x0800b410

0800a070 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	6039      	str	r1, [r7, #0]
 800a07a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	4904      	ldr	r1, [pc, #16]	@ (800a090 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a080:	4804      	ldr	r0, [pc, #16]	@ (800a094 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a082:	f7ff febb 	bl	8009dfc <USBD_GetString>
  return USBD_StrDesc;
 800a086:	4b02      	ldr	r3, [pc, #8]	@ (800a090 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	2400051c 	.word	0x2400051c
 800a094:	0800b428 	.word	0x0800b428

0800a098 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	6039      	str	r1, [r7, #0]
 800a0a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	221a      	movs	r2, #26
 800a0a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0aa:	f000 f843 	bl	800a134 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a0ae:	4b02      	ldr	r3, [pc, #8]	@ (800a0b8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	240000fc 	.word	0x240000fc

0800a0bc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	6039      	str	r1, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d105      	bne.n	800a0da <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	4907      	ldr	r1, [pc, #28]	@ (800a0f0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a0d2:	4808      	ldr	r0, [pc, #32]	@ (800a0f4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a0d4:	f7ff fe92 	bl	8009dfc <USBD_GetString>
 800a0d8:	e004      	b.n	800a0e4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4904      	ldr	r1, [pc, #16]	@ (800a0f0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a0de:	4805      	ldr	r0, [pc, #20]	@ (800a0f4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a0e0:	f7ff fe8c 	bl	8009dfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0e4:	4b02      	ldr	r3, [pc, #8]	@ (800a0f0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	2400051c 	.word	0x2400051c
 800a0f4:	0800b43c 	.word	0x0800b43c

0800a0f8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	6039      	str	r1, [r7, #0]
 800a102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a104:	79fb      	ldrb	r3, [r7, #7]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d105      	bne.n	800a116 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	4907      	ldr	r1, [pc, #28]	@ (800a12c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a10e:	4808      	ldr	r0, [pc, #32]	@ (800a130 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a110:	f7ff fe74 	bl	8009dfc <USBD_GetString>
 800a114:	e004      	b.n	800a120 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	4904      	ldr	r1, [pc, #16]	@ (800a12c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a11a:	4805      	ldr	r0, [pc, #20]	@ (800a130 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a11c:	f7ff fe6e 	bl	8009dfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a120:	4b02      	ldr	r3, [pc, #8]	@ (800a12c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a122:	4618      	mov	r0, r3
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	2400051c 	.word	0x2400051c
 800a130:	0800b448 	.word	0x0800b448

0800a134 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a13a:	4b0f      	ldr	r3, [pc, #60]	@ (800a178 <Get_SerialNum+0x44>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a140:	4b0e      	ldr	r3, [pc, #56]	@ (800a17c <Get_SerialNum+0x48>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a146:	4b0e      	ldr	r3, [pc, #56]	@ (800a180 <Get_SerialNum+0x4c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4413      	add	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d009      	beq.n	800a16e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a15a:	2208      	movs	r2, #8
 800a15c:	4909      	ldr	r1, [pc, #36]	@ (800a184 <Get_SerialNum+0x50>)
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 f814 	bl	800a18c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a164:	2204      	movs	r2, #4
 800a166:	4908      	ldr	r1, [pc, #32]	@ (800a188 <Get_SerialNum+0x54>)
 800a168:	68b8      	ldr	r0, [r7, #8]
 800a16a:	f000 f80f 	bl	800a18c <IntToUnicode>
  }
}
 800a16e:	bf00      	nop
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	1ff1e800 	.word	0x1ff1e800
 800a17c:	1ff1e804 	.word	0x1ff1e804
 800a180:	1ff1e808 	.word	0x1ff1e808
 800a184:	240000fe 	.word	0x240000fe
 800a188:	2400010e 	.word	0x2400010e

0800a18c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75fb      	strb	r3, [r7, #23]
 800a1a2:	e027      	b.n	800a1f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	0f1b      	lsrs	r3, r3, #28
 800a1a8:	2b09      	cmp	r3, #9
 800a1aa:	d80b      	bhi.n	800a1c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	0f1b      	lsrs	r3, r3, #28
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3230      	adds	r2, #48	@ 0x30
 800a1be:	b2d2      	uxtb	r2, r2
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e00a      	b.n	800a1da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	0f1b      	lsrs	r3, r3, #28
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	440b      	add	r3, r1
 800a1d4:	3237      	adds	r2, #55	@ 0x37
 800a1d6:	b2d2      	uxtb	r2, r2
 800a1d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	011b      	lsls	r3, r3, #4
 800a1de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	75fb      	strb	r3, [r7, #23]
 800a1f4:	7dfa      	ldrb	r2, [r7, #23]
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d3d3      	bcc.n	800a1a4 <IntToUnicode+0x18>
  }
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	371c      	adds	r7, #28
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
	...

0800a20c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b0bc      	sub	sp, #240	@ 0xf0
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a214:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	605a      	str	r2, [r3, #4]
 800a21e:	609a      	str	r2, [r3, #8]
 800a220:	60da      	str	r2, [r3, #12]
 800a222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a224:	f107 0320 	add.w	r3, r7, #32
 800a228:	22b8      	movs	r2, #184	@ 0xb8
 800a22a:	2100      	movs	r1, #0
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 fb91 	bl	800a954 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a58      	ldr	r2, [pc, #352]	@ (800a398 <HAL_PCD_MspInit+0x18c>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	f040 80a9 	bne.w	800a390 <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a23e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a242:	f04f 0300 	mov.w	r3, #0
 800a246:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a24a:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a24e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a252:	f107 0320 	add.w	r3, r7, #32
 800a256:	4618      	mov	r0, r3
 800a258:	f7f9 fdde 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800a262:	f7f6 fdef 	bl	8000e44 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a266:	f7f8 fe61 	bl	8002f2c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a26a:	4b4c      	ldr	r3, [pc, #304]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a26c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a270:	4a4a      	ldr	r2, [pc, #296]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a272:	f043 0304 	orr.w	r3, r3, #4
 800a276:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a27a:	4b48      	ldr	r3, [pc, #288]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a27c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a280:	f003 0304 	and.w	r3, r3, #4
 800a284:	61fb      	str	r3, [r7, #28]
 800a286:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a288:	4b44      	ldr	r3, [pc, #272]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a28a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a28e:	4a43      	ldr	r2, [pc, #268]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a290:	f043 0301 	orr.w	r3, r3, #1
 800a294:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a298:	4b40      	ldr	r3, [pc, #256]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a29a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	61bb      	str	r3, [r7, #24]
 800a2a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2a6:	4b3d      	ldr	r3, [pc, #244]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a2a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2ac:	4a3b      	ldr	r2, [pc, #236]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a2ae:	f043 0302 	orr.w	r3, r3, #2
 800a2b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a2b6:	4b39      	ldr	r3, [pc, #228]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a2b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2bc:	f003 0302 	and.w	r3, r3, #2
 800a2c0:	617b      	str	r3, [r7, #20]
 800a2c2:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800a2c4:	230d      	movs	r3, #13
 800a2c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a2dc:	230a      	movs	r3, #10
 800a2de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	482d      	ldr	r0, [pc, #180]	@ (800a3a0 <HAL_PCD_MspInit+0x194>)
 800a2ea:	f7f7 f9b5 	bl	8001658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800a2ee:	2328      	movs	r3, #40	@ 0x28
 800a2f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a300:	2302      	movs	r3, #2
 800a302:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a306:	230a      	movs	r3, #10
 800a308:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a30c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a310:	4619      	mov	r1, r3
 800a312:	4824      	ldr	r0, [pc, #144]	@ (800a3a4 <HAL_PCD_MspInit+0x198>)
 800a314:	f7f7 f9a0 	bl	8001658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800a318:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800a31c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a320:	2302      	movs	r3, #2
 800a322:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a326:	2300      	movs	r3, #0
 800a328:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a32c:	2302      	movs	r3, #2
 800a32e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a332:	230a      	movs	r3, #10
 800a334:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a338:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a33c:	4619      	mov	r1, r3
 800a33e:	481a      	ldr	r0, [pc, #104]	@ (800a3a8 <HAL_PCD_MspInit+0x19c>)
 800a340:	f7f7 f98a 	bl	8001658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a344:	4b15      	ldr	r3, [pc, #84]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a346:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a34a:	4a14      	ldr	r2, [pc, #80]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a34c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a350:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a354:	4b11      	ldr	r3, [pc, #68]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a35a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a35e:	613b      	str	r3, [r7, #16]
 800a360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800a362:	4b0e      	ldr	r3, [pc, #56]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a368:	4a0c      	ldr	r2, [pc, #48]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a36a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a36e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a372:	4b0a      	ldr	r3, [pc, #40]	@ (800a39c <HAL_PCD_MspInit+0x190>)
 800a374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a378:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a380:	2200      	movs	r2, #0
 800a382:	2100      	movs	r1, #0
 800a384:	204d      	movs	r0, #77	@ 0x4d
 800a386:	f7f7 f8ba 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a38a:	204d      	movs	r0, #77	@ 0x4d
 800a38c:	f7f7 f8d1 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a390:	bf00      	nop
 800a392:	37f0      	adds	r7, #240	@ 0xf0
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	40040000 	.word	0x40040000
 800a39c:	58024400 	.word	0x58024400
 800a3a0:	58020800 	.word	0x58020800
 800a3a4:	58020000 	.word	0x58020000
 800a3a8:	58020400 	.word	0x58020400

0800a3ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	f7fe fb8d 	bl	8008ae2 <USBD_LL_SetupStage>
}
 800a3c8:	bf00      	nop
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a3e2:	78fa      	ldrb	r2, [r7, #3]
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	00db      	lsls	r3, r3, #3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	440b      	add	r3, r1
 800a3f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	78fb      	ldrb	r3, [r7, #3]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	f7fe fbc7 	bl	8008b8c <USBD_LL_DataOutStage>
}
 800a3fe:	bf00      	nop
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a418:	78fa      	ldrb	r2, [r7, #3]
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	4613      	mov	r3, r2
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	4413      	add	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	440b      	add	r3, r1
 800a426:	3320      	adds	r3, #32
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	78fb      	ldrb	r3, [r7, #3]
 800a42c:	4619      	mov	r1, r3
 800a42e:	f7fe fc60 	bl	8008cf2 <USBD_LL_DataInStage>
}
 800a432:	bf00      	nop
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe fd9a 	bl	8008f82 <USBD_LL_SOF>
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a45e:	2301      	movs	r3, #1
 800a460:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	79db      	ldrb	r3, [r3, #7]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d102      	bne.n	800a470 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a46a:	2300      	movs	r3, #0
 800a46c:	73fb      	strb	r3, [r7, #15]
 800a46e:	e008      	b.n	800a482 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	79db      	ldrb	r3, [r3, #7]
 800a474:	2b02      	cmp	r3, #2
 800a476:	d102      	bne.n	800a47e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a478:	2301      	movs	r3, #1
 800a47a:	73fb      	strb	r3, [r7, #15]
 800a47c:	e001      	b.n	800a482 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a47e:	f7f6 fce1 	bl	8000e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a488:	7bfa      	ldrb	r2, [r7, #15]
 800a48a:	4611      	mov	r1, r2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe fd34 	bl	8008efa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fcdc 	bl	8008e56 <USBD_LL_Reset>
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fd2f 	bl	8008f1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	6812      	ldr	r2, [r2, #0]
 800a4ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4ce:	f043 0301 	orr.w	r3, r3, #1
 800a4d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	7adb      	ldrb	r3, [r3, #11]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4dc:	4b04      	ldr	r3, [pc, #16]	@ (800a4f0 <HAL_PCD_SuspendCallback+0x48>)
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	4a03      	ldr	r2, [pc, #12]	@ (800a4f0 <HAL_PCD_SuspendCallback+0x48>)
 800a4e2:	f043 0306 	orr.w	r3, r3, #6
 800a4e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4e8:	bf00      	nop
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	e000ed00 	.word	0xe000ed00

0800a4f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe fd25 	bl	8008f52 <USBD_LL_Resume>
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a522:	78fa      	ldrb	r2, [r7, #3]
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe fd7d 	bl	8009026 <USBD_LL_IsoOUTIncomplete>
}
 800a52c:	bf00      	nop
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a546:	78fa      	ldrb	r2, [r7, #3]
 800a548:	4611      	mov	r1, r2
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe fd39 	bl	8008fc2 <USBD_LL_IsoINIncomplete>
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe fd8f 	bl	800908a <USBD_LL_DevConnected>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe fd8c 	bl	80090a0 <USBD_LL_DevDisconnected>
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d140      	bne.n	800a622 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a5a0:	4a22      	ldr	r2, [pc, #136]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a20      	ldr	r2, [pc, #128]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a5b0:	4b1e      	ldr	r3, [pc, #120]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5b2:	4a1f      	ldr	r2, [pc, #124]	@ (800a630 <USBD_LL_Init+0xa0>)
 800a5b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800a5b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5b8:	2209      	movs	r2, #9
 800a5ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800a5bc:	4b1b      	ldr	r3, [pc, #108]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a5c2:	4b1a      	ldr	r3, [pc, #104]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800a5c8:	4b18      	ldr	r3, [pc, #96]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a5ce:	4b17      	ldr	r3, [pc, #92]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a5d4:	4b15      	ldr	r3, [pc, #84]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a5da:	4b14      	ldr	r3, [pc, #80]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a5e0:	4b12      	ldr	r3, [pc, #72]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a5e6:	4b11      	ldr	r3, [pc, #68]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a5f2:	480e      	ldr	r0, [pc, #56]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a5f4:	f7f7 f9d8 	bl	80019a8 <HAL_PCD_Init>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a5fe:	f7f6 fc21 	bl	8000e44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a606:	4809      	ldr	r0, [pc, #36]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a608:	f7f8 fc15 	bl	8002e36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a60c:	2280      	movs	r2, #128	@ 0x80
 800a60e:	2100      	movs	r1, #0
 800a610:	4806      	ldr	r0, [pc, #24]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a612:	f7f8 fbc9 	bl	8002da8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a616:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800a61a:	2101      	movs	r1, #1
 800a61c:	4803      	ldr	r0, [pc, #12]	@ (800a62c <USBD_LL_Init+0x9c>)
 800a61e:	f7f8 fbc3 	bl	8002da8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	2400071c 	.word	0x2400071c
 800a630:	40040000 	.word	0x40040000

0800a634 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7f7 fab8 	bl	8001bc0 <HAL_PCD_Start>
 800a650:	4603      	mov	r3, r0
 800a652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	4618      	mov	r0, r3
 800a658:	f000 f930 	bl	800a8bc <USBD_Get_USB_Status>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a660:	7bbb      	ldrb	r3, [r7, #14]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	461a      	mov	r2, r3
 800a678:	4603      	mov	r3, r0
 800a67a:	70fb      	strb	r3, [r7, #3]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70bb      	strb	r3, [r7, #2]
 800a680:	4613      	mov	r3, r2
 800a682:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a692:	78bb      	ldrb	r3, [r7, #2]
 800a694:	883a      	ldrh	r2, [r7, #0]
 800a696:	78f9      	ldrb	r1, [r7, #3]
 800a698:	f7f7 ffb9 	bl	800260e <HAL_PCD_EP_Open>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 f90a 	bl	800a8bc <USBD_Get_USB_Status>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6d0:	78fa      	ldrb	r2, [r7, #3]
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7f8 f804 	bl	80026e2 <HAL_PCD_EP_Close>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 f8eb 	bl	800a8bc <USBD_Get_USB_Status>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a70e:	78fa      	ldrb	r2, [r7, #3]
 800a710:	4611      	mov	r1, r2
 800a712:	4618      	mov	r0, r3
 800a714:	f7f8 f8a4 	bl	8002860 <HAL_PCD_EP_SetStall>
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 f8cc 	bl	800a8bc <USBD_Get_USB_Status>
 800a724:	4603      	mov	r3, r0
 800a726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a728:	7bbb      	ldrb	r3, [r7, #14]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	460b      	mov	r3, r1
 800a73c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a74c:	78fa      	ldrb	r2, [r7, #3]
 800a74e:	4611      	mov	r1, r2
 800a750:	4618      	mov	r0, r3
 800a752:	f7f8 f8e8 	bl	8002926 <HAL_PCD_EP_ClrStall>
 800a756:	4603      	mov	r3, r0
 800a758:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 f8ad 	bl	800a8bc <USBD_Get_USB_Status>
 800a762:	4603      	mov	r3, r0
 800a764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a766:	7bbb      	ldrb	r3, [r7, #14]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a782:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	da0b      	bge.n	800a7a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a792:	68f9      	ldr	r1, [r7, #12]
 800a794:	4613      	mov	r3, r2
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	4413      	add	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	440b      	add	r3, r1
 800a79e:	3316      	adds	r3, #22
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	e00b      	b.n	800a7bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7aa:	68f9      	ldr	r1, [r7, #12]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	4413      	add	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	440b      	add	r3, r1
 800a7b6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a7ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7e2:	78fa      	ldrb	r2, [r7, #3]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f7 feed 	bl	80025c6 <HAL_PCD_SetAddress>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f862 	bl	800a8bc <USBD_Get_USB_Status>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b086      	sub	sp, #24
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]
 800a812:	460b      	mov	r3, r1
 800a814:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a824:	7af9      	ldrb	r1, [r7, #11]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	f7f7 ffdf 	bl	80027ec <HAL_PCD_EP_Transmit>
 800a82e:	4603      	mov	r3, r0
 800a830:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	4618      	mov	r0, r3
 800a836:	f000 f841 	bl	800a8bc <USBD_Get_USB_Status>
 800a83a:	4603      	mov	r3, r0
 800a83c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a83e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	607a      	str	r2, [r7, #4]
 800a852:	603b      	str	r3, [r7, #0]
 800a854:	460b      	mov	r3, r1
 800a856:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a866:	7af9      	ldrb	r1, [r7, #11]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	f7f7 ff83 	bl	8002776 <HAL_PCD_EP_Receive>
 800a870:	4603      	mov	r3, r0
 800a872:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	4618      	mov	r0, r3
 800a878:	f000 f820 	bl	800a8bc <USBD_Get_USB_Status>
 800a87c:	4603      	mov	r3, r0
 800a87e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a880:	7dbb      	ldrb	r3, [r7, #22]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
	...

0800a88c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a894:	4b03      	ldr	r3, [pc, #12]	@ (800a8a4 <USBD_static_malloc+0x18>)
}
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	24000c00 	.word	0x24000c00

0800a8a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d817      	bhi.n	800a900 <USBD_Get_USB_Status+0x44>
 800a8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d8 <USBD_Get_USB_Status+0x1c>)
 800a8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d6:	bf00      	nop
 800a8d8:	0800a8e9 	.word	0x0800a8e9
 800a8dc:	0800a8ef 	.word	0x0800a8ef
 800a8e0:	0800a8f5 	.word	0x0800a8f5
 800a8e4:	0800a8fb 	.word	0x0800a8fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ec:	e00b      	b.n	800a906 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f2:	e008      	b.n	800a906 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f8:	e005      	b.n	800a906 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8fe:	e002      	b.n	800a906 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a900:	2303      	movs	r3, #3
 800a902:	73fb      	strb	r3, [r7, #15]
    break;
 800a904:	bf00      	nop
  }
  return usb_status;
 800a906:	7bfb      	ldrb	r3, [r7, #15]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <siprintf>:
 800a914:	b40e      	push	{r1, r2, r3}
 800a916:	b500      	push	{lr}
 800a918:	b09c      	sub	sp, #112	@ 0x70
 800a91a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a91c:	9002      	str	r0, [sp, #8]
 800a91e:	9006      	str	r0, [sp, #24]
 800a920:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a924:	4809      	ldr	r0, [pc, #36]	@ (800a94c <siprintf+0x38>)
 800a926:	9107      	str	r1, [sp, #28]
 800a928:	9104      	str	r1, [sp, #16]
 800a92a:	4909      	ldr	r1, [pc, #36]	@ (800a950 <siprintf+0x3c>)
 800a92c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a930:	9105      	str	r1, [sp, #20]
 800a932:	6800      	ldr	r0, [r0, #0]
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	a902      	add	r1, sp, #8
 800a938:	f000 f994 	bl	800ac64 <_svfiprintf_r>
 800a93c:	9b02      	ldr	r3, [sp, #8]
 800a93e:	2200      	movs	r2, #0
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	b01c      	add	sp, #112	@ 0x70
 800a944:	f85d eb04 	ldr.w	lr, [sp], #4
 800a948:	b003      	add	sp, #12
 800a94a:	4770      	bx	lr
 800a94c:	24000118 	.word	0x24000118
 800a950:	ffff0208 	.word	0xffff0208

0800a954 <memset>:
 800a954:	4402      	add	r2, r0
 800a956:	4603      	mov	r3, r0
 800a958:	4293      	cmp	r3, r2
 800a95a:	d100      	bne.n	800a95e <memset+0xa>
 800a95c:	4770      	bx	lr
 800a95e:	f803 1b01 	strb.w	r1, [r3], #1
 800a962:	e7f9      	b.n	800a958 <memset+0x4>

0800a964 <__errno>:
 800a964:	4b01      	ldr	r3, [pc, #4]	@ (800a96c <__errno+0x8>)
 800a966:	6818      	ldr	r0, [r3, #0]
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	24000118 	.word	0x24000118

0800a970 <__libc_init_array>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	4d0d      	ldr	r5, [pc, #52]	@ (800a9a8 <__libc_init_array+0x38>)
 800a974:	4c0d      	ldr	r4, [pc, #52]	@ (800a9ac <__libc_init_array+0x3c>)
 800a976:	1b64      	subs	r4, r4, r5
 800a978:	10a4      	asrs	r4, r4, #2
 800a97a:	2600      	movs	r6, #0
 800a97c:	42a6      	cmp	r6, r4
 800a97e:	d109      	bne.n	800a994 <__libc_init_array+0x24>
 800a980:	4d0b      	ldr	r5, [pc, #44]	@ (800a9b0 <__libc_init_array+0x40>)
 800a982:	4c0c      	ldr	r4, [pc, #48]	@ (800a9b4 <__libc_init_array+0x44>)
 800a984:	f000 fc66 	bl	800b254 <_init>
 800a988:	1b64      	subs	r4, r4, r5
 800a98a:	10a4      	asrs	r4, r4, #2
 800a98c:	2600      	movs	r6, #0
 800a98e:	42a6      	cmp	r6, r4
 800a990:	d105      	bne.n	800a99e <__libc_init_array+0x2e>
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	f855 3b04 	ldr.w	r3, [r5], #4
 800a998:	4798      	blx	r3
 800a99a:	3601      	adds	r6, #1
 800a99c:	e7ee      	b.n	800a97c <__libc_init_array+0xc>
 800a99e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a2:	4798      	blx	r3
 800a9a4:	3601      	adds	r6, #1
 800a9a6:	e7f2      	b.n	800a98e <__libc_init_array+0x1e>
 800a9a8:	0800b4cc 	.word	0x0800b4cc
 800a9ac:	0800b4cc 	.word	0x0800b4cc
 800a9b0:	0800b4cc 	.word	0x0800b4cc
 800a9b4:	0800b4d0 	.word	0x0800b4d0

0800a9b8 <__retarget_lock_acquire_recursive>:
 800a9b8:	4770      	bx	lr

0800a9ba <__retarget_lock_release_recursive>:
 800a9ba:	4770      	bx	lr

0800a9bc <_free_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4605      	mov	r5, r0
 800a9c0:	2900      	cmp	r1, #0
 800a9c2:	d041      	beq.n	800aa48 <_free_r+0x8c>
 800a9c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9c8:	1f0c      	subs	r4, r1, #4
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	bfb8      	it	lt
 800a9ce:	18e4      	addlt	r4, r4, r3
 800a9d0:	f000 f8e0 	bl	800ab94 <__malloc_lock>
 800a9d4:	4a1d      	ldr	r2, [pc, #116]	@ (800aa4c <_free_r+0x90>)
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	b933      	cbnz	r3, 800a9e8 <_free_r+0x2c>
 800a9da:	6063      	str	r3, [r4, #4]
 800a9dc:	6014      	str	r4, [r2, #0]
 800a9de:	4628      	mov	r0, r5
 800a9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9e4:	f000 b8dc 	b.w	800aba0 <__malloc_unlock>
 800a9e8:	42a3      	cmp	r3, r4
 800a9ea:	d908      	bls.n	800a9fe <_free_r+0x42>
 800a9ec:	6820      	ldr	r0, [r4, #0]
 800a9ee:	1821      	adds	r1, r4, r0
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	bf01      	itttt	eq
 800a9f4:	6819      	ldreq	r1, [r3, #0]
 800a9f6:	685b      	ldreq	r3, [r3, #4]
 800a9f8:	1809      	addeq	r1, r1, r0
 800a9fa:	6021      	streq	r1, [r4, #0]
 800a9fc:	e7ed      	b.n	800a9da <_free_r+0x1e>
 800a9fe:	461a      	mov	r2, r3
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	b10b      	cbz	r3, 800aa08 <_free_r+0x4c>
 800aa04:	42a3      	cmp	r3, r4
 800aa06:	d9fa      	bls.n	800a9fe <_free_r+0x42>
 800aa08:	6811      	ldr	r1, [r2, #0]
 800aa0a:	1850      	adds	r0, r2, r1
 800aa0c:	42a0      	cmp	r0, r4
 800aa0e:	d10b      	bne.n	800aa28 <_free_r+0x6c>
 800aa10:	6820      	ldr	r0, [r4, #0]
 800aa12:	4401      	add	r1, r0
 800aa14:	1850      	adds	r0, r2, r1
 800aa16:	4283      	cmp	r3, r0
 800aa18:	6011      	str	r1, [r2, #0]
 800aa1a:	d1e0      	bne.n	800a9de <_free_r+0x22>
 800aa1c:	6818      	ldr	r0, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	6053      	str	r3, [r2, #4]
 800aa22:	4408      	add	r0, r1
 800aa24:	6010      	str	r0, [r2, #0]
 800aa26:	e7da      	b.n	800a9de <_free_r+0x22>
 800aa28:	d902      	bls.n	800aa30 <_free_r+0x74>
 800aa2a:	230c      	movs	r3, #12
 800aa2c:	602b      	str	r3, [r5, #0]
 800aa2e:	e7d6      	b.n	800a9de <_free_r+0x22>
 800aa30:	6820      	ldr	r0, [r4, #0]
 800aa32:	1821      	adds	r1, r4, r0
 800aa34:	428b      	cmp	r3, r1
 800aa36:	bf04      	itt	eq
 800aa38:	6819      	ldreq	r1, [r3, #0]
 800aa3a:	685b      	ldreq	r3, [r3, #4]
 800aa3c:	6063      	str	r3, [r4, #4]
 800aa3e:	bf04      	itt	eq
 800aa40:	1809      	addeq	r1, r1, r0
 800aa42:	6021      	streq	r1, [r4, #0]
 800aa44:	6054      	str	r4, [r2, #4]
 800aa46:	e7ca      	b.n	800a9de <_free_r+0x22>
 800aa48:	bd38      	pop	{r3, r4, r5, pc}
 800aa4a:	bf00      	nop
 800aa4c:	24000d58 	.word	0x24000d58

0800aa50 <sbrk_aligned>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	4e0f      	ldr	r6, [pc, #60]	@ (800aa90 <sbrk_aligned+0x40>)
 800aa54:	460c      	mov	r4, r1
 800aa56:	6831      	ldr	r1, [r6, #0]
 800aa58:	4605      	mov	r5, r0
 800aa5a:	b911      	cbnz	r1, 800aa62 <sbrk_aligned+0x12>
 800aa5c:	f000 fba6 	bl	800b1ac <_sbrk_r>
 800aa60:	6030      	str	r0, [r6, #0]
 800aa62:	4621      	mov	r1, r4
 800aa64:	4628      	mov	r0, r5
 800aa66:	f000 fba1 	bl	800b1ac <_sbrk_r>
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	d103      	bne.n	800aa76 <sbrk_aligned+0x26>
 800aa6e:	f04f 34ff 	mov.w	r4, #4294967295
 800aa72:	4620      	mov	r0, r4
 800aa74:	bd70      	pop	{r4, r5, r6, pc}
 800aa76:	1cc4      	adds	r4, r0, #3
 800aa78:	f024 0403 	bic.w	r4, r4, #3
 800aa7c:	42a0      	cmp	r0, r4
 800aa7e:	d0f8      	beq.n	800aa72 <sbrk_aligned+0x22>
 800aa80:	1a21      	subs	r1, r4, r0
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 fb92 	bl	800b1ac <_sbrk_r>
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d1f2      	bne.n	800aa72 <sbrk_aligned+0x22>
 800aa8c:	e7ef      	b.n	800aa6e <sbrk_aligned+0x1e>
 800aa8e:	bf00      	nop
 800aa90:	24000d54 	.word	0x24000d54

0800aa94 <_malloc_r>:
 800aa94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa98:	1ccd      	adds	r5, r1, #3
 800aa9a:	f025 0503 	bic.w	r5, r5, #3
 800aa9e:	3508      	adds	r5, #8
 800aaa0:	2d0c      	cmp	r5, #12
 800aaa2:	bf38      	it	cc
 800aaa4:	250c      	movcc	r5, #12
 800aaa6:	2d00      	cmp	r5, #0
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	db01      	blt.n	800aab0 <_malloc_r+0x1c>
 800aaac:	42a9      	cmp	r1, r5
 800aaae:	d904      	bls.n	800aaba <_malloc_r+0x26>
 800aab0:	230c      	movs	r3, #12
 800aab2:	6033      	str	r3, [r6, #0]
 800aab4:	2000      	movs	r0, #0
 800aab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab90 <_malloc_r+0xfc>
 800aabe:	f000 f869 	bl	800ab94 <__malloc_lock>
 800aac2:	f8d8 3000 	ldr.w	r3, [r8]
 800aac6:	461c      	mov	r4, r3
 800aac8:	bb44      	cbnz	r4, 800ab1c <_malloc_r+0x88>
 800aaca:	4629      	mov	r1, r5
 800aacc:	4630      	mov	r0, r6
 800aace:	f7ff ffbf 	bl	800aa50 <sbrk_aligned>
 800aad2:	1c43      	adds	r3, r0, #1
 800aad4:	4604      	mov	r4, r0
 800aad6:	d158      	bne.n	800ab8a <_malloc_r+0xf6>
 800aad8:	f8d8 4000 	ldr.w	r4, [r8]
 800aadc:	4627      	mov	r7, r4
 800aade:	2f00      	cmp	r7, #0
 800aae0:	d143      	bne.n	800ab6a <_malloc_r+0xd6>
 800aae2:	2c00      	cmp	r4, #0
 800aae4:	d04b      	beq.n	800ab7e <_malloc_r+0xea>
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	4639      	mov	r1, r7
 800aaea:	4630      	mov	r0, r6
 800aaec:	eb04 0903 	add.w	r9, r4, r3
 800aaf0:	f000 fb5c 	bl	800b1ac <_sbrk_r>
 800aaf4:	4581      	cmp	r9, r0
 800aaf6:	d142      	bne.n	800ab7e <_malloc_r+0xea>
 800aaf8:	6821      	ldr	r1, [r4, #0]
 800aafa:	1a6d      	subs	r5, r5, r1
 800aafc:	4629      	mov	r1, r5
 800aafe:	4630      	mov	r0, r6
 800ab00:	f7ff ffa6 	bl	800aa50 <sbrk_aligned>
 800ab04:	3001      	adds	r0, #1
 800ab06:	d03a      	beq.n	800ab7e <_malloc_r+0xea>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	442b      	add	r3, r5
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab12:	685a      	ldr	r2, [r3, #4]
 800ab14:	bb62      	cbnz	r2, 800ab70 <_malloc_r+0xdc>
 800ab16:	f8c8 7000 	str.w	r7, [r8]
 800ab1a:	e00f      	b.n	800ab3c <_malloc_r+0xa8>
 800ab1c:	6822      	ldr	r2, [r4, #0]
 800ab1e:	1b52      	subs	r2, r2, r5
 800ab20:	d420      	bmi.n	800ab64 <_malloc_r+0xd0>
 800ab22:	2a0b      	cmp	r2, #11
 800ab24:	d917      	bls.n	800ab56 <_malloc_r+0xc2>
 800ab26:	1961      	adds	r1, r4, r5
 800ab28:	42a3      	cmp	r3, r4
 800ab2a:	6025      	str	r5, [r4, #0]
 800ab2c:	bf18      	it	ne
 800ab2e:	6059      	strne	r1, [r3, #4]
 800ab30:	6863      	ldr	r3, [r4, #4]
 800ab32:	bf08      	it	eq
 800ab34:	f8c8 1000 	streq.w	r1, [r8]
 800ab38:	5162      	str	r2, [r4, r5]
 800ab3a:	604b      	str	r3, [r1, #4]
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f000 f82f 	bl	800aba0 <__malloc_unlock>
 800ab42:	f104 000b 	add.w	r0, r4, #11
 800ab46:	1d23      	adds	r3, r4, #4
 800ab48:	f020 0007 	bic.w	r0, r0, #7
 800ab4c:	1ac2      	subs	r2, r0, r3
 800ab4e:	bf1c      	itt	ne
 800ab50:	1a1b      	subne	r3, r3, r0
 800ab52:	50a3      	strne	r3, [r4, r2]
 800ab54:	e7af      	b.n	800aab6 <_malloc_r+0x22>
 800ab56:	6862      	ldr	r2, [r4, #4]
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	bf0c      	ite	eq
 800ab5c:	f8c8 2000 	streq.w	r2, [r8]
 800ab60:	605a      	strne	r2, [r3, #4]
 800ab62:	e7eb      	b.n	800ab3c <_malloc_r+0xa8>
 800ab64:	4623      	mov	r3, r4
 800ab66:	6864      	ldr	r4, [r4, #4]
 800ab68:	e7ae      	b.n	800aac8 <_malloc_r+0x34>
 800ab6a:	463c      	mov	r4, r7
 800ab6c:	687f      	ldr	r7, [r7, #4]
 800ab6e:	e7b6      	b.n	800aade <_malloc_r+0x4a>
 800ab70:	461a      	mov	r2, r3
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	42a3      	cmp	r3, r4
 800ab76:	d1fb      	bne.n	800ab70 <_malloc_r+0xdc>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	6053      	str	r3, [r2, #4]
 800ab7c:	e7de      	b.n	800ab3c <_malloc_r+0xa8>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	6033      	str	r3, [r6, #0]
 800ab82:	4630      	mov	r0, r6
 800ab84:	f000 f80c 	bl	800aba0 <__malloc_unlock>
 800ab88:	e794      	b.n	800aab4 <_malloc_r+0x20>
 800ab8a:	6005      	str	r5, [r0, #0]
 800ab8c:	e7d6      	b.n	800ab3c <_malloc_r+0xa8>
 800ab8e:	bf00      	nop
 800ab90:	24000d58 	.word	0x24000d58

0800ab94 <__malloc_lock>:
 800ab94:	4801      	ldr	r0, [pc, #4]	@ (800ab9c <__malloc_lock+0x8>)
 800ab96:	f7ff bf0f 	b.w	800a9b8 <__retarget_lock_acquire_recursive>
 800ab9a:	bf00      	nop
 800ab9c:	24000d50 	.word	0x24000d50

0800aba0 <__malloc_unlock>:
 800aba0:	4801      	ldr	r0, [pc, #4]	@ (800aba8 <__malloc_unlock+0x8>)
 800aba2:	f7ff bf0a 	b.w	800a9ba <__retarget_lock_release_recursive>
 800aba6:	bf00      	nop
 800aba8:	24000d50 	.word	0x24000d50

0800abac <__ssputs_r>:
 800abac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	688e      	ldr	r6, [r1, #8]
 800abb2:	461f      	mov	r7, r3
 800abb4:	42be      	cmp	r6, r7
 800abb6:	680b      	ldr	r3, [r1, #0]
 800abb8:	4682      	mov	sl, r0
 800abba:	460c      	mov	r4, r1
 800abbc:	4690      	mov	r8, r2
 800abbe:	d82d      	bhi.n	800ac1c <__ssputs_r+0x70>
 800abc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800abc8:	d026      	beq.n	800ac18 <__ssputs_r+0x6c>
 800abca:	6965      	ldr	r5, [r4, #20]
 800abcc:	6909      	ldr	r1, [r1, #16]
 800abce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abd2:	eba3 0901 	sub.w	r9, r3, r1
 800abd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abda:	1c7b      	adds	r3, r7, #1
 800abdc:	444b      	add	r3, r9
 800abde:	106d      	asrs	r5, r5, #1
 800abe0:	429d      	cmp	r5, r3
 800abe2:	bf38      	it	cc
 800abe4:	461d      	movcc	r5, r3
 800abe6:	0553      	lsls	r3, r2, #21
 800abe8:	d527      	bpl.n	800ac3a <__ssputs_r+0x8e>
 800abea:	4629      	mov	r1, r5
 800abec:	f7ff ff52 	bl	800aa94 <_malloc_r>
 800abf0:	4606      	mov	r6, r0
 800abf2:	b360      	cbz	r0, 800ac4e <__ssputs_r+0xa2>
 800abf4:	6921      	ldr	r1, [r4, #16]
 800abf6:	464a      	mov	r2, r9
 800abf8:	f000 fae8 	bl	800b1cc <memcpy>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	6126      	str	r6, [r4, #16]
 800ac0a:	6165      	str	r5, [r4, #20]
 800ac0c:	444e      	add	r6, r9
 800ac0e:	eba5 0509 	sub.w	r5, r5, r9
 800ac12:	6026      	str	r6, [r4, #0]
 800ac14:	60a5      	str	r5, [r4, #8]
 800ac16:	463e      	mov	r6, r7
 800ac18:	42be      	cmp	r6, r7
 800ac1a:	d900      	bls.n	800ac1e <__ssputs_r+0x72>
 800ac1c:	463e      	mov	r6, r7
 800ac1e:	6820      	ldr	r0, [r4, #0]
 800ac20:	4632      	mov	r2, r6
 800ac22:	4641      	mov	r1, r8
 800ac24:	f000 faa8 	bl	800b178 <memmove>
 800ac28:	68a3      	ldr	r3, [r4, #8]
 800ac2a:	1b9b      	subs	r3, r3, r6
 800ac2c:	60a3      	str	r3, [r4, #8]
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	4433      	add	r3, r6
 800ac32:	6023      	str	r3, [r4, #0]
 800ac34:	2000      	movs	r0, #0
 800ac36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	f000 fad4 	bl	800b1e8 <_realloc_r>
 800ac40:	4606      	mov	r6, r0
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d1e0      	bne.n	800ac08 <__ssputs_r+0x5c>
 800ac46:	6921      	ldr	r1, [r4, #16]
 800ac48:	4650      	mov	r0, sl
 800ac4a:	f7ff feb7 	bl	800a9bc <_free_r>
 800ac4e:	230c      	movs	r3, #12
 800ac50:	f8ca 3000 	str.w	r3, [sl]
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac5a:	81a3      	strh	r3, [r4, #12]
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	e7e9      	b.n	800ac36 <__ssputs_r+0x8a>
	...

0800ac64 <_svfiprintf_r>:
 800ac64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac68:	4698      	mov	r8, r3
 800ac6a:	898b      	ldrh	r3, [r1, #12]
 800ac6c:	061b      	lsls	r3, r3, #24
 800ac6e:	b09d      	sub	sp, #116	@ 0x74
 800ac70:	4607      	mov	r7, r0
 800ac72:	460d      	mov	r5, r1
 800ac74:	4614      	mov	r4, r2
 800ac76:	d510      	bpl.n	800ac9a <_svfiprintf_r+0x36>
 800ac78:	690b      	ldr	r3, [r1, #16]
 800ac7a:	b973      	cbnz	r3, 800ac9a <_svfiprintf_r+0x36>
 800ac7c:	2140      	movs	r1, #64	@ 0x40
 800ac7e:	f7ff ff09 	bl	800aa94 <_malloc_r>
 800ac82:	6028      	str	r0, [r5, #0]
 800ac84:	6128      	str	r0, [r5, #16]
 800ac86:	b930      	cbnz	r0, 800ac96 <_svfiprintf_r+0x32>
 800ac88:	230c      	movs	r3, #12
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	b01d      	add	sp, #116	@ 0x74
 800ac92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac96:	2340      	movs	r3, #64	@ 0x40
 800ac98:	616b      	str	r3, [r5, #20]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac9e:	2320      	movs	r3, #32
 800aca0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aca4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aca8:	2330      	movs	r3, #48	@ 0x30
 800acaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae48 <_svfiprintf_r+0x1e4>
 800acae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acb2:	f04f 0901 	mov.w	r9, #1
 800acb6:	4623      	mov	r3, r4
 800acb8:	469a      	mov	sl, r3
 800acba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acbe:	b10a      	cbz	r2, 800acc4 <_svfiprintf_r+0x60>
 800acc0:	2a25      	cmp	r2, #37	@ 0x25
 800acc2:	d1f9      	bne.n	800acb8 <_svfiprintf_r+0x54>
 800acc4:	ebba 0b04 	subs.w	fp, sl, r4
 800acc8:	d00b      	beq.n	800ace2 <_svfiprintf_r+0x7e>
 800acca:	465b      	mov	r3, fp
 800accc:	4622      	mov	r2, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	4638      	mov	r0, r7
 800acd2:	f7ff ff6b 	bl	800abac <__ssputs_r>
 800acd6:	3001      	adds	r0, #1
 800acd8:	f000 80a7 	beq.w	800ae2a <_svfiprintf_r+0x1c6>
 800acdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acde:	445a      	add	r2, fp
 800ace0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ace2:	f89a 3000 	ldrb.w	r3, [sl]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 809f 	beq.w	800ae2a <_svfiprintf_r+0x1c6>
 800acec:	2300      	movs	r3, #0
 800acee:	f04f 32ff 	mov.w	r2, #4294967295
 800acf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acf6:	f10a 0a01 	add.w	sl, sl, #1
 800acfa:	9304      	str	r3, [sp, #16]
 800acfc:	9307      	str	r3, [sp, #28]
 800acfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad02:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad04:	4654      	mov	r4, sl
 800ad06:	2205      	movs	r2, #5
 800ad08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad0c:	484e      	ldr	r0, [pc, #312]	@ (800ae48 <_svfiprintf_r+0x1e4>)
 800ad0e:	f7f5 fb07 	bl	8000320 <memchr>
 800ad12:	9a04      	ldr	r2, [sp, #16]
 800ad14:	b9d8      	cbnz	r0, 800ad4e <_svfiprintf_r+0xea>
 800ad16:	06d0      	lsls	r0, r2, #27
 800ad18:	bf44      	itt	mi
 800ad1a:	2320      	movmi	r3, #32
 800ad1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad20:	0711      	lsls	r1, r2, #28
 800ad22:	bf44      	itt	mi
 800ad24:	232b      	movmi	r3, #43	@ 0x2b
 800ad26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad30:	d015      	beq.n	800ad5e <_svfiprintf_r+0xfa>
 800ad32:	9a07      	ldr	r2, [sp, #28]
 800ad34:	4654      	mov	r4, sl
 800ad36:	2000      	movs	r0, #0
 800ad38:	f04f 0c0a 	mov.w	ip, #10
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad42:	3b30      	subs	r3, #48	@ 0x30
 800ad44:	2b09      	cmp	r3, #9
 800ad46:	d94b      	bls.n	800ade0 <_svfiprintf_r+0x17c>
 800ad48:	b1b0      	cbz	r0, 800ad78 <_svfiprintf_r+0x114>
 800ad4a:	9207      	str	r2, [sp, #28]
 800ad4c:	e014      	b.n	800ad78 <_svfiprintf_r+0x114>
 800ad4e:	eba0 0308 	sub.w	r3, r0, r8
 800ad52:	fa09 f303 	lsl.w	r3, r9, r3
 800ad56:	4313      	orrs	r3, r2
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	46a2      	mov	sl, r4
 800ad5c:	e7d2      	b.n	800ad04 <_svfiprintf_r+0xa0>
 800ad5e:	9b03      	ldr	r3, [sp, #12]
 800ad60:	1d19      	adds	r1, r3, #4
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	9103      	str	r1, [sp, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	bfbb      	ittet	lt
 800ad6a:	425b      	neglt	r3, r3
 800ad6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad70:	9307      	strge	r3, [sp, #28]
 800ad72:	9307      	strlt	r3, [sp, #28]
 800ad74:	bfb8      	it	lt
 800ad76:	9204      	strlt	r2, [sp, #16]
 800ad78:	7823      	ldrb	r3, [r4, #0]
 800ad7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad7c:	d10a      	bne.n	800ad94 <_svfiprintf_r+0x130>
 800ad7e:	7863      	ldrb	r3, [r4, #1]
 800ad80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad82:	d132      	bne.n	800adea <_svfiprintf_r+0x186>
 800ad84:	9b03      	ldr	r3, [sp, #12]
 800ad86:	1d1a      	adds	r2, r3, #4
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	9203      	str	r2, [sp, #12]
 800ad8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad90:	3402      	adds	r4, #2
 800ad92:	9305      	str	r3, [sp, #20]
 800ad94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae58 <_svfiprintf_r+0x1f4>
 800ad98:	7821      	ldrb	r1, [r4, #0]
 800ad9a:	2203      	movs	r2, #3
 800ad9c:	4650      	mov	r0, sl
 800ad9e:	f7f5 fabf 	bl	8000320 <memchr>
 800ada2:	b138      	cbz	r0, 800adb4 <_svfiprintf_r+0x150>
 800ada4:	9b04      	ldr	r3, [sp, #16]
 800ada6:	eba0 000a 	sub.w	r0, r0, sl
 800adaa:	2240      	movs	r2, #64	@ 0x40
 800adac:	4082      	lsls	r2, r0
 800adae:	4313      	orrs	r3, r2
 800adb0:	3401      	adds	r4, #1
 800adb2:	9304      	str	r3, [sp, #16]
 800adb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb8:	4824      	ldr	r0, [pc, #144]	@ (800ae4c <_svfiprintf_r+0x1e8>)
 800adba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adbe:	2206      	movs	r2, #6
 800adc0:	f7f5 faae 	bl	8000320 <memchr>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d036      	beq.n	800ae36 <_svfiprintf_r+0x1d2>
 800adc8:	4b21      	ldr	r3, [pc, #132]	@ (800ae50 <_svfiprintf_r+0x1ec>)
 800adca:	bb1b      	cbnz	r3, 800ae14 <_svfiprintf_r+0x1b0>
 800adcc:	9b03      	ldr	r3, [sp, #12]
 800adce:	3307      	adds	r3, #7
 800add0:	f023 0307 	bic.w	r3, r3, #7
 800add4:	3308      	adds	r3, #8
 800add6:	9303      	str	r3, [sp, #12]
 800add8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adda:	4433      	add	r3, r6
 800addc:	9309      	str	r3, [sp, #36]	@ 0x24
 800adde:	e76a      	b.n	800acb6 <_svfiprintf_r+0x52>
 800ade0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ade4:	460c      	mov	r4, r1
 800ade6:	2001      	movs	r0, #1
 800ade8:	e7a8      	b.n	800ad3c <_svfiprintf_r+0xd8>
 800adea:	2300      	movs	r3, #0
 800adec:	3401      	adds	r4, #1
 800adee:	9305      	str	r3, [sp, #20]
 800adf0:	4619      	mov	r1, r3
 800adf2:	f04f 0c0a 	mov.w	ip, #10
 800adf6:	4620      	mov	r0, r4
 800adf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adfc:	3a30      	subs	r2, #48	@ 0x30
 800adfe:	2a09      	cmp	r2, #9
 800ae00:	d903      	bls.n	800ae0a <_svfiprintf_r+0x1a6>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0c6      	beq.n	800ad94 <_svfiprintf_r+0x130>
 800ae06:	9105      	str	r1, [sp, #20]
 800ae08:	e7c4      	b.n	800ad94 <_svfiprintf_r+0x130>
 800ae0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae0e:	4604      	mov	r4, r0
 800ae10:	2301      	movs	r3, #1
 800ae12:	e7f0      	b.n	800adf6 <_svfiprintf_r+0x192>
 800ae14:	ab03      	add	r3, sp, #12
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	462a      	mov	r2, r5
 800ae1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ae54 <_svfiprintf_r+0x1f0>)
 800ae1c:	a904      	add	r1, sp, #16
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f3af 8000 	nop.w
 800ae24:	1c42      	adds	r2, r0, #1
 800ae26:	4606      	mov	r6, r0
 800ae28:	d1d6      	bne.n	800add8 <_svfiprintf_r+0x174>
 800ae2a:	89ab      	ldrh	r3, [r5, #12]
 800ae2c:	065b      	lsls	r3, r3, #25
 800ae2e:	f53f af2d 	bmi.w	800ac8c <_svfiprintf_r+0x28>
 800ae32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae34:	e72c      	b.n	800ac90 <_svfiprintf_r+0x2c>
 800ae36:	ab03      	add	r3, sp, #12
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	4b05      	ldr	r3, [pc, #20]	@ (800ae54 <_svfiprintf_r+0x1f0>)
 800ae3e:	a904      	add	r1, sp, #16
 800ae40:	4638      	mov	r0, r7
 800ae42:	f000 f879 	bl	800af38 <_printf_i>
 800ae46:	e7ed      	b.n	800ae24 <_svfiprintf_r+0x1c0>
 800ae48:	0800b490 	.word	0x0800b490
 800ae4c:	0800b49a 	.word	0x0800b49a
 800ae50:	00000000 	.word	0x00000000
 800ae54:	0800abad 	.word	0x0800abad
 800ae58:	0800b496 	.word	0x0800b496

0800ae5c <_printf_common>:
 800ae5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae60:	4616      	mov	r6, r2
 800ae62:	4698      	mov	r8, r3
 800ae64:	688a      	ldr	r2, [r1, #8]
 800ae66:	690b      	ldr	r3, [r1, #16]
 800ae68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	bfb8      	it	lt
 800ae70:	4613      	movlt	r3, r2
 800ae72:	6033      	str	r3, [r6, #0]
 800ae74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae78:	4607      	mov	r7, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	b10a      	cbz	r2, 800ae82 <_printf_common+0x26>
 800ae7e:	3301      	adds	r3, #1
 800ae80:	6033      	str	r3, [r6, #0]
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	0699      	lsls	r1, r3, #26
 800ae86:	bf42      	ittt	mi
 800ae88:	6833      	ldrmi	r3, [r6, #0]
 800ae8a:	3302      	addmi	r3, #2
 800ae8c:	6033      	strmi	r3, [r6, #0]
 800ae8e:	6825      	ldr	r5, [r4, #0]
 800ae90:	f015 0506 	ands.w	r5, r5, #6
 800ae94:	d106      	bne.n	800aea4 <_printf_common+0x48>
 800ae96:	f104 0a19 	add.w	sl, r4, #25
 800ae9a:	68e3      	ldr	r3, [r4, #12]
 800ae9c:	6832      	ldr	r2, [r6, #0]
 800ae9e:	1a9b      	subs	r3, r3, r2
 800aea0:	42ab      	cmp	r3, r5
 800aea2:	dc26      	bgt.n	800aef2 <_printf_common+0x96>
 800aea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aea8:	6822      	ldr	r2, [r4, #0]
 800aeaa:	3b00      	subs	r3, #0
 800aeac:	bf18      	it	ne
 800aeae:	2301      	movne	r3, #1
 800aeb0:	0692      	lsls	r2, r2, #26
 800aeb2:	d42b      	bmi.n	800af0c <_printf_common+0xb0>
 800aeb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aeb8:	4641      	mov	r1, r8
 800aeba:	4638      	mov	r0, r7
 800aebc:	47c8      	blx	r9
 800aebe:	3001      	adds	r0, #1
 800aec0:	d01e      	beq.n	800af00 <_printf_common+0xa4>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	6922      	ldr	r2, [r4, #16]
 800aec6:	f003 0306 	and.w	r3, r3, #6
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	bf02      	ittt	eq
 800aece:	68e5      	ldreq	r5, [r4, #12]
 800aed0:	6833      	ldreq	r3, [r6, #0]
 800aed2:	1aed      	subeq	r5, r5, r3
 800aed4:	68a3      	ldr	r3, [r4, #8]
 800aed6:	bf0c      	ite	eq
 800aed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aedc:	2500      	movne	r5, #0
 800aede:	4293      	cmp	r3, r2
 800aee0:	bfc4      	itt	gt
 800aee2:	1a9b      	subgt	r3, r3, r2
 800aee4:	18ed      	addgt	r5, r5, r3
 800aee6:	2600      	movs	r6, #0
 800aee8:	341a      	adds	r4, #26
 800aeea:	42b5      	cmp	r5, r6
 800aeec:	d11a      	bne.n	800af24 <_printf_common+0xc8>
 800aeee:	2000      	movs	r0, #0
 800aef0:	e008      	b.n	800af04 <_printf_common+0xa8>
 800aef2:	2301      	movs	r3, #1
 800aef4:	4652      	mov	r2, sl
 800aef6:	4641      	mov	r1, r8
 800aef8:	4638      	mov	r0, r7
 800aefa:	47c8      	blx	r9
 800aefc:	3001      	adds	r0, #1
 800aefe:	d103      	bne.n	800af08 <_printf_common+0xac>
 800af00:	f04f 30ff 	mov.w	r0, #4294967295
 800af04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af08:	3501      	adds	r5, #1
 800af0a:	e7c6      	b.n	800ae9a <_printf_common+0x3e>
 800af0c:	18e1      	adds	r1, r4, r3
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	2030      	movs	r0, #48	@ 0x30
 800af12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af16:	4422      	add	r2, r4
 800af18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af20:	3302      	adds	r3, #2
 800af22:	e7c7      	b.n	800aeb4 <_printf_common+0x58>
 800af24:	2301      	movs	r3, #1
 800af26:	4622      	mov	r2, r4
 800af28:	4641      	mov	r1, r8
 800af2a:	4638      	mov	r0, r7
 800af2c:	47c8      	blx	r9
 800af2e:	3001      	adds	r0, #1
 800af30:	d0e6      	beq.n	800af00 <_printf_common+0xa4>
 800af32:	3601      	adds	r6, #1
 800af34:	e7d9      	b.n	800aeea <_printf_common+0x8e>
	...

0800af38 <_printf_i>:
 800af38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	7e0f      	ldrb	r7, [r1, #24]
 800af3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af40:	2f78      	cmp	r7, #120	@ 0x78
 800af42:	4691      	mov	r9, r2
 800af44:	4680      	mov	r8, r0
 800af46:	460c      	mov	r4, r1
 800af48:	469a      	mov	sl, r3
 800af4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af4e:	d807      	bhi.n	800af60 <_printf_i+0x28>
 800af50:	2f62      	cmp	r7, #98	@ 0x62
 800af52:	d80a      	bhi.n	800af6a <_printf_i+0x32>
 800af54:	2f00      	cmp	r7, #0
 800af56:	f000 80d2 	beq.w	800b0fe <_printf_i+0x1c6>
 800af5a:	2f58      	cmp	r7, #88	@ 0x58
 800af5c:	f000 80b9 	beq.w	800b0d2 <_printf_i+0x19a>
 800af60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af68:	e03a      	b.n	800afe0 <_printf_i+0xa8>
 800af6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af6e:	2b15      	cmp	r3, #21
 800af70:	d8f6      	bhi.n	800af60 <_printf_i+0x28>
 800af72:	a101      	add	r1, pc, #4	@ (adr r1, 800af78 <_printf_i+0x40>)
 800af74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af78:	0800afd1 	.word	0x0800afd1
 800af7c:	0800afe5 	.word	0x0800afe5
 800af80:	0800af61 	.word	0x0800af61
 800af84:	0800af61 	.word	0x0800af61
 800af88:	0800af61 	.word	0x0800af61
 800af8c:	0800af61 	.word	0x0800af61
 800af90:	0800afe5 	.word	0x0800afe5
 800af94:	0800af61 	.word	0x0800af61
 800af98:	0800af61 	.word	0x0800af61
 800af9c:	0800af61 	.word	0x0800af61
 800afa0:	0800af61 	.word	0x0800af61
 800afa4:	0800b0e5 	.word	0x0800b0e5
 800afa8:	0800b00f 	.word	0x0800b00f
 800afac:	0800b09f 	.word	0x0800b09f
 800afb0:	0800af61 	.word	0x0800af61
 800afb4:	0800af61 	.word	0x0800af61
 800afb8:	0800b107 	.word	0x0800b107
 800afbc:	0800af61 	.word	0x0800af61
 800afc0:	0800b00f 	.word	0x0800b00f
 800afc4:	0800af61 	.word	0x0800af61
 800afc8:	0800af61 	.word	0x0800af61
 800afcc:	0800b0a7 	.word	0x0800b0a7
 800afd0:	6833      	ldr	r3, [r6, #0]
 800afd2:	1d1a      	adds	r2, r3, #4
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6032      	str	r2, [r6, #0]
 800afd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afe0:	2301      	movs	r3, #1
 800afe2:	e09d      	b.n	800b120 <_printf_i+0x1e8>
 800afe4:	6833      	ldr	r3, [r6, #0]
 800afe6:	6820      	ldr	r0, [r4, #0]
 800afe8:	1d19      	adds	r1, r3, #4
 800afea:	6031      	str	r1, [r6, #0]
 800afec:	0606      	lsls	r6, r0, #24
 800afee:	d501      	bpl.n	800aff4 <_printf_i+0xbc>
 800aff0:	681d      	ldr	r5, [r3, #0]
 800aff2:	e003      	b.n	800affc <_printf_i+0xc4>
 800aff4:	0645      	lsls	r5, r0, #25
 800aff6:	d5fb      	bpl.n	800aff0 <_printf_i+0xb8>
 800aff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800affc:	2d00      	cmp	r5, #0
 800affe:	da03      	bge.n	800b008 <_printf_i+0xd0>
 800b000:	232d      	movs	r3, #45	@ 0x2d
 800b002:	426d      	negs	r5, r5
 800b004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b008:	4859      	ldr	r0, [pc, #356]	@ (800b170 <_printf_i+0x238>)
 800b00a:	230a      	movs	r3, #10
 800b00c:	e011      	b.n	800b032 <_printf_i+0xfa>
 800b00e:	6821      	ldr	r1, [r4, #0]
 800b010:	6833      	ldr	r3, [r6, #0]
 800b012:	0608      	lsls	r0, r1, #24
 800b014:	f853 5b04 	ldr.w	r5, [r3], #4
 800b018:	d402      	bmi.n	800b020 <_printf_i+0xe8>
 800b01a:	0649      	lsls	r1, r1, #25
 800b01c:	bf48      	it	mi
 800b01e:	b2ad      	uxthmi	r5, r5
 800b020:	2f6f      	cmp	r7, #111	@ 0x6f
 800b022:	4853      	ldr	r0, [pc, #332]	@ (800b170 <_printf_i+0x238>)
 800b024:	6033      	str	r3, [r6, #0]
 800b026:	bf14      	ite	ne
 800b028:	230a      	movne	r3, #10
 800b02a:	2308      	moveq	r3, #8
 800b02c:	2100      	movs	r1, #0
 800b02e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b032:	6866      	ldr	r6, [r4, #4]
 800b034:	60a6      	str	r6, [r4, #8]
 800b036:	2e00      	cmp	r6, #0
 800b038:	bfa2      	ittt	ge
 800b03a:	6821      	ldrge	r1, [r4, #0]
 800b03c:	f021 0104 	bicge.w	r1, r1, #4
 800b040:	6021      	strge	r1, [r4, #0]
 800b042:	b90d      	cbnz	r5, 800b048 <_printf_i+0x110>
 800b044:	2e00      	cmp	r6, #0
 800b046:	d04b      	beq.n	800b0e0 <_printf_i+0x1a8>
 800b048:	4616      	mov	r6, r2
 800b04a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b04e:	fb03 5711 	mls	r7, r3, r1, r5
 800b052:	5dc7      	ldrb	r7, [r0, r7]
 800b054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b058:	462f      	mov	r7, r5
 800b05a:	42bb      	cmp	r3, r7
 800b05c:	460d      	mov	r5, r1
 800b05e:	d9f4      	bls.n	800b04a <_printf_i+0x112>
 800b060:	2b08      	cmp	r3, #8
 800b062:	d10b      	bne.n	800b07c <_printf_i+0x144>
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	07df      	lsls	r7, r3, #31
 800b068:	d508      	bpl.n	800b07c <_printf_i+0x144>
 800b06a:	6923      	ldr	r3, [r4, #16]
 800b06c:	6861      	ldr	r1, [r4, #4]
 800b06e:	4299      	cmp	r1, r3
 800b070:	bfde      	ittt	le
 800b072:	2330      	movle	r3, #48	@ 0x30
 800b074:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b07c:	1b92      	subs	r2, r2, r6
 800b07e:	6122      	str	r2, [r4, #16]
 800b080:	f8cd a000 	str.w	sl, [sp]
 800b084:	464b      	mov	r3, r9
 800b086:	aa03      	add	r2, sp, #12
 800b088:	4621      	mov	r1, r4
 800b08a:	4640      	mov	r0, r8
 800b08c:	f7ff fee6 	bl	800ae5c <_printf_common>
 800b090:	3001      	adds	r0, #1
 800b092:	d14a      	bne.n	800b12a <_printf_i+0x1f2>
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	b004      	add	sp, #16
 800b09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	f043 0320 	orr.w	r3, r3, #32
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	4833      	ldr	r0, [pc, #204]	@ (800b174 <_printf_i+0x23c>)
 800b0a8:	2778      	movs	r7, #120	@ 0x78
 800b0aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	6831      	ldr	r1, [r6, #0]
 800b0b2:	061f      	lsls	r7, r3, #24
 800b0b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0b8:	d402      	bmi.n	800b0c0 <_printf_i+0x188>
 800b0ba:	065f      	lsls	r7, r3, #25
 800b0bc:	bf48      	it	mi
 800b0be:	b2ad      	uxthmi	r5, r5
 800b0c0:	6031      	str	r1, [r6, #0]
 800b0c2:	07d9      	lsls	r1, r3, #31
 800b0c4:	bf44      	itt	mi
 800b0c6:	f043 0320 	orrmi.w	r3, r3, #32
 800b0ca:	6023      	strmi	r3, [r4, #0]
 800b0cc:	b11d      	cbz	r5, 800b0d6 <_printf_i+0x19e>
 800b0ce:	2310      	movs	r3, #16
 800b0d0:	e7ac      	b.n	800b02c <_printf_i+0xf4>
 800b0d2:	4827      	ldr	r0, [pc, #156]	@ (800b170 <_printf_i+0x238>)
 800b0d4:	e7e9      	b.n	800b0aa <_printf_i+0x172>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	f023 0320 	bic.w	r3, r3, #32
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	e7f6      	b.n	800b0ce <_printf_i+0x196>
 800b0e0:	4616      	mov	r6, r2
 800b0e2:	e7bd      	b.n	800b060 <_printf_i+0x128>
 800b0e4:	6833      	ldr	r3, [r6, #0]
 800b0e6:	6825      	ldr	r5, [r4, #0]
 800b0e8:	6961      	ldr	r1, [r4, #20]
 800b0ea:	1d18      	adds	r0, r3, #4
 800b0ec:	6030      	str	r0, [r6, #0]
 800b0ee:	062e      	lsls	r6, r5, #24
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	d501      	bpl.n	800b0f8 <_printf_i+0x1c0>
 800b0f4:	6019      	str	r1, [r3, #0]
 800b0f6:	e002      	b.n	800b0fe <_printf_i+0x1c6>
 800b0f8:	0668      	lsls	r0, r5, #25
 800b0fa:	d5fb      	bpl.n	800b0f4 <_printf_i+0x1bc>
 800b0fc:	8019      	strh	r1, [r3, #0]
 800b0fe:	2300      	movs	r3, #0
 800b100:	6123      	str	r3, [r4, #16]
 800b102:	4616      	mov	r6, r2
 800b104:	e7bc      	b.n	800b080 <_printf_i+0x148>
 800b106:	6833      	ldr	r3, [r6, #0]
 800b108:	1d1a      	adds	r2, r3, #4
 800b10a:	6032      	str	r2, [r6, #0]
 800b10c:	681e      	ldr	r6, [r3, #0]
 800b10e:	6862      	ldr	r2, [r4, #4]
 800b110:	2100      	movs	r1, #0
 800b112:	4630      	mov	r0, r6
 800b114:	f7f5 f904 	bl	8000320 <memchr>
 800b118:	b108      	cbz	r0, 800b11e <_printf_i+0x1e6>
 800b11a:	1b80      	subs	r0, r0, r6
 800b11c:	6060      	str	r0, [r4, #4]
 800b11e:	6863      	ldr	r3, [r4, #4]
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	2300      	movs	r3, #0
 800b124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b128:	e7aa      	b.n	800b080 <_printf_i+0x148>
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	4632      	mov	r2, r6
 800b12e:	4649      	mov	r1, r9
 800b130:	4640      	mov	r0, r8
 800b132:	47d0      	blx	sl
 800b134:	3001      	adds	r0, #1
 800b136:	d0ad      	beq.n	800b094 <_printf_i+0x15c>
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	079b      	lsls	r3, r3, #30
 800b13c:	d413      	bmi.n	800b166 <_printf_i+0x22e>
 800b13e:	68e0      	ldr	r0, [r4, #12]
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	4298      	cmp	r0, r3
 800b144:	bfb8      	it	lt
 800b146:	4618      	movlt	r0, r3
 800b148:	e7a6      	b.n	800b098 <_printf_i+0x160>
 800b14a:	2301      	movs	r3, #1
 800b14c:	4632      	mov	r2, r6
 800b14e:	4649      	mov	r1, r9
 800b150:	4640      	mov	r0, r8
 800b152:	47d0      	blx	sl
 800b154:	3001      	adds	r0, #1
 800b156:	d09d      	beq.n	800b094 <_printf_i+0x15c>
 800b158:	3501      	adds	r5, #1
 800b15a:	68e3      	ldr	r3, [r4, #12]
 800b15c:	9903      	ldr	r1, [sp, #12]
 800b15e:	1a5b      	subs	r3, r3, r1
 800b160:	42ab      	cmp	r3, r5
 800b162:	dcf2      	bgt.n	800b14a <_printf_i+0x212>
 800b164:	e7eb      	b.n	800b13e <_printf_i+0x206>
 800b166:	2500      	movs	r5, #0
 800b168:	f104 0619 	add.w	r6, r4, #25
 800b16c:	e7f5      	b.n	800b15a <_printf_i+0x222>
 800b16e:	bf00      	nop
 800b170:	0800b4a1 	.word	0x0800b4a1
 800b174:	0800b4b2 	.word	0x0800b4b2

0800b178 <memmove>:
 800b178:	4288      	cmp	r0, r1
 800b17a:	b510      	push	{r4, lr}
 800b17c:	eb01 0402 	add.w	r4, r1, r2
 800b180:	d902      	bls.n	800b188 <memmove+0x10>
 800b182:	4284      	cmp	r4, r0
 800b184:	4623      	mov	r3, r4
 800b186:	d807      	bhi.n	800b198 <memmove+0x20>
 800b188:	1e43      	subs	r3, r0, #1
 800b18a:	42a1      	cmp	r1, r4
 800b18c:	d008      	beq.n	800b1a0 <memmove+0x28>
 800b18e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b192:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b196:	e7f8      	b.n	800b18a <memmove+0x12>
 800b198:	4402      	add	r2, r0
 800b19a:	4601      	mov	r1, r0
 800b19c:	428a      	cmp	r2, r1
 800b19e:	d100      	bne.n	800b1a2 <memmove+0x2a>
 800b1a0:	bd10      	pop	{r4, pc}
 800b1a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1aa:	e7f7      	b.n	800b19c <memmove+0x24>

0800b1ac <_sbrk_r>:
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	4d06      	ldr	r5, [pc, #24]	@ (800b1c8 <_sbrk_r+0x1c>)
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	4608      	mov	r0, r1
 800b1b6:	602b      	str	r3, [r5, #0]
 800b1b8:	f7f5 ff06 	bl	8000fc8 <_sbrk>
 800b1bc:	1c43      	adds	r3, r0, #1
 800b1be:	d102      	bne.n	800b1c6 <_sbrk_r+0x1a>
 800b1c0:	682b      	ldr	r3, [r5, #0]
 800b1c2:	b103      	cbz	r3, 800b1c6 <_sbrk_r+0x1a>
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	bd38      	pop	{r3, r4, r5, pc}
 800b1c8:	24000d4c 	.word	0x24000d4c

0800b1cc <memcpy>:
 800b1cc:	440a      	add	r2, r1
 800b1ce:	4291      	cmp	r1, r2
 800b1d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1d4:	d100      	bne.n	800b1d8 <memcpy+0xc>
 800b1d6:	4770      	bx	lr
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1e2:	4291      	cmp	r1, r2
 800b1e4:	d1f9      	bne.n	800b1da <memcpy+0xe>
 800b1e6:	bd10      	pop	{r4, pc}

0800b1e8 <_realloc_r>:
 800b1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	4615      	mov	r5, r2
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	b921      	cbnz	r1, 800b1fe <_realloc_r+0x16>
 800b1f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	f7ff bc4b 	b.w	800aa94 <_malloc_r>
 800b1fe:	b92a      	cbnz	r2, 800b20c <_realloc_r+0x24>
 800b200:	f7ff fbdc 	bl	800a9bc <_free_r>
 800b204:	2400      	movs	r4, #0
 800b206:	4620      	mov	r0, r4
 800b208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20c:	f000 f81a 	bl	800b244 <_malloc_usable_size_r>
 800b210:	4285      	cmp	r5, r0
 800b212:	4606      	mov	r6, r0
 800b214:	d802      	bhi.n	800b21c <_realloc_r+0x34>
 800b216:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b21a:	d8f4      	bhi.n	800b206 <_realloc_r+0x1e>
 800b21c:	4629      	mov	r1, r5
 800b21e:	4640      	mov	r0, r8
 800b220:	f7ff fc38 	bl	800aa94 <_malloc_r>
 800b224:	4607      	mov	r7, r0
 800b226:	2800      	cmp	r0, #0
 800b228:	d0ec      	beq.n	800b204 <_realloc_r+0x1c>
 800b22a:	42b5      	cmp	r5, r6
 800b22c:	462a      	mov	r2, r5
 800b22e:	4621      	mov	r1, r4
 800b230:	bf28      	it	cs
 800b232:	4632      	movcs	r2, r6
 800b234:	f7ff ffca 	bl	800b1cc <memcpy>
 800b238:	4621      	mov	r1, r4
 800b23a:	4640      	mov	r0, r8
 800b23c:	f7ff fbbe 	bl	800a9bc <_free_r>
 800b240:	463c      	mov	r4, r7
 800b242:	e7e0      	b.n	800b206 <_realloc_r+0x1e>

0800b244 <_malloc_usable_size_r>:
 800b244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b248:	1f18      	subs	r0, r3, #4
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bfbc      	itt	lt
 800b24e:	580b      	ldrlt	r3, [r1, r0]
 800b250:	18c0      	addlt	r0, r0, r3
 800b252:	4770      	bx	lr

0800b254 <_init>:
 800b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b256:	bf00      	nop
 800b258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25a:	bc08      	pop	{r3}
 800b25c:	469e      	mov	lr, r3
 800b25e:	4770      	bx	lr

0800b260 <_fini>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr
