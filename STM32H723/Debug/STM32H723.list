
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba10  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800bce0  0800bce0  0000cce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be9c  0800be9c  0000ce9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bea4  0800bea4  0000cea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bea8  0800bea8  0000cea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000318  24000000  0800beac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000fac  24000318  0800c1c4  0000d318  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240012c4  0800c1c4  0000e2c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019474  00000000  00000000  0000d346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003693  00000000  00000000  000267ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001188  00000000  00000000  00029e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d55  00000000  00000000  0002afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010749  00000000  00000000  0002bd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0000655f  00000000  00000000  0003c476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000429d5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004d9c  00000000  00000000  00042a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  000477b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000318 	.word	0x24000318
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bcc8 	.word	0x0800bcc8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400031c 	.word	0x2400031c
 800030c:	0800bcc8 	.word	0x0800bcc8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:




// GPIO 상태를 스캔하고 변경된 핀 정보를 반환하는 함수
MatrixScanResult MatrixScan() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0b6      	sub	sp, #216	@ 0xd8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    static uint32_t Last_gpioG_state = 0;
    static uint32_t Last_gpioH_state = 0;
    //static uint32_t Last_gpioI_state = 0;

    // 현재 GPIO 상태 읽기
    uint32_t gpioA_state = (~(GPIOA->IDR)) & 0b1001111111010000; //핀 마스킹
 80006b8:	4bac      	ldr	r3, [pc, #688]	@ (800096c <MatrixScan+0x2bc>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	43da      	mvns	r2, r3
 80006be:	f649 73d0 	movw	r3, #40912	@ 0x9fd0
 80006c2:	4013      	ands	r3, r2
 80006c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint32_t gpioB_state = (~(GPIOB->IDR)) & 0b1100001111011100;
 80006c8:	4ba9      	ldr	r3, [pc, #676]	@ (8000970 <MatrixScan+0x2c0>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	43da      	mvns	r2, r3
 80006ce:	f24c 33dc 	movw	r3, #50140	@ 0xc3dc
 80006d2:	4013      	ands	r3, r2
 80006d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint32_t gpioC_state = (~(GPIOC->IDR)) & 0b1111111111110010;
 80006d8:	4ba6      	ldr	r3, [pc, #664]	@ (8000974 <MatrixScan+0x2c4>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	43da      	mvns	r2, r3
 80006de:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80006e2:	4013      	ands	r3, r2
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t gpioD_state = (~(GPIOD->IDR)) & 0b1111111111111111;
 80006e8:	4ba3      	ldr	r3, [pc, #652]	@ (8000978 <MatrixScan+0x2c8>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	43db      	mvns	r3, r3
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t gpioE_state = (~(GPIOE->IDR)) & 0b1111111111110111;
 80006f4:	4ba1      	ldr	r3, [pc, #644]	@ (800097c <MatrixScan+0x2cc>)
 80006f6:	691b      	ldr	r3, [r3, #16]
 80006f8:	43da      	mvns	r2, r3
 80006fa:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80006fe:	4013      	ands	r3, r2
 8000700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t gpioF_state = (~(GPIOF->IDR)) & 0b1111111111111111;
 8000704:	4b9e      	ldr	r3, [pc, #632]	@ (8000980 <MatrixScan+0x2d0>)
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	43db      	mvns	r3, r3
 800070a:	b29b      	uxth	r3, r3
 800070c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t gpioG_state = (~(GPIOG->IDR)) & 0b1111111111111111;
 8000710:	4b9c      	ldr	r3, [pc, #624]	@ (8000984 <MatrixScan+0x2d4>)
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	43db      	mvns	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t gpioH_state = (~(GPIOH->IDR)) & 0b0011111111111100;
 800071a:	4b9b      	ldr	r3, [pc, #620]	@ (8000988 <MatrixScan+0x2d8>)
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	43da      	mvns	r2, r3
 8000720:	f643 73fc 	movw	r3, #16380	@ 0x3ffc
 8000724:	4013      	ands	r3, r2
 8000726:	67bb      	str	r3, [r7, #120]	@ 0x78
    //uint32_t gpioI_state = (-(GPIOI->IDR)) & 0b1111111111111111;


    // 변경된 비트 계산 (XOR 연산)
    uint32_t changedPinA = gpioA_state ^ Last_gpioA_state;
 8000728:	4b98      	ldr	r3, [pc, #608]	@ (800098c <MatrixScan+0x2dc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000730:	4053      	eors	r3, r2
 8000732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    uint32_t changedPinB = gpioB_state ^ Last_gpioB_state;
 8000736:	4b96      	ldr	r3, [pc, #600]	@ (8000990 <MatrixScan+0x2e0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800073e:	4053      	eors	r3, r2
 8000740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    uint32_t changedPinC = gpioC_state ^ Last_gpioC_state;
 8000744:	4b93      	ldr	r3, [pc, #588]	@ (8000994 <MatrixScan+0x2e4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800074c:	4053      	eors	r3, r2
 800074e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 8000752:	4b91      	ldr	r3, [pc, #580]	@ (8000998 <MatrixScan+0x2e8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800075a:	4053      	eors	r3, r2
 800075c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 8000760:	4b8e      	ldr	r3, [pc, #568]	@ (800099c <MatrixScan+0x2ec>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000768:	4053      	eors	r3, r2
 800076a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    uint32_t changedPinF = gpioF_state ^ Last_gpioF_state;
 800076e:	4b8c      	ldr	r3, [pc, #560]	@ (80009a0 <MatrixScan+0x2f0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000776:	4053      	eors	r3, r2
 8000778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    uint32_t changedPinG = gpioG_state ^ Last_gpioG_state;
 800077c:	4b89      	ldr	r3, [pc, #548]	@ (80009a4 <MatrixScan+0x2f4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000782:	4053      	eors	r3, r2
 8000784:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    uint32_t changedPinH = gpioH_state ^ Last_gpioH_state;
 8000788:	4b87      	ldr	r3, [pc, #540]	@ (80009a8 <MatrixScan+0x2f8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800078e:	4053      	eors	r3, r2
 8000790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    //uint32_t changedPinI = gpioI_state ^ Last_gpioI_state;

    MatrixScanResult result;
    result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	673b      	str	r3, [r7, #112]	@ 0x70
    result.pinState = -1;
 800079a:	23ff      	movs	r3, #255	@ 0xff
 800079c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74


    // 포트 A~E 순서대로 변경된 핀 확인
    if (changedPinA != 0)
 80007a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d044      	beq.n	8000832 <MatrixScan+0x182>
    {
        int bitPosition = -1;
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        while ( changedPinA )
 80007b0:	e009      	b.n	80007c6 <MatrixScan+0x116>
        {
            changedPinA >>= 1; // 오른쪽으로 시프트
 80007b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007b6:	085b      	lsrs	r3, r3, #1
 80007b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            bitPosition++;
 80007bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007c0:	3301      	adds	r3, #1
 80007c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        while ( changedPinA )
 80007c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f1      	bne.n	80007b2 <MatrixScan+0x102>
        }


        result.pinNumber = bitPosition; // 핀 번호 (포트 A는 0 ~ 15)
 80007ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007d2:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioA_state >> bitPosition) & 1; // 현재 상태
 80007d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80007d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007dc:	fa22 f303 	lsr.w	r3, r2, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74


        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 80007ec:	4b6f      	ldr	r3, [pc, #444]	@ (80009ac <MatrixScan+0x2fc>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007f2:	496f      	ldr	r1, [pc, #444]	@ (80009b0 <MatrixScan+0x300>)
 80007f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	d90a      	bls.n	8000814 <MatrixScan+0x164>
        {
        	Last_gpioA_state = gpioA_state;
 80007fe:	4a63      	ldr	r2, [pc, #396]	@ (800098c <MatrixScan+0x2dc>)
 8000800:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000804:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000808:	4a68      	ldr	r2, [pc, #416]	@ (80009ac <MatrixScan+0x2fc>)
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	4968      	ldr	r1, [pc, #416]	@ (80009b0 <MatrixScan+0x300>)
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000812:	e005      	b.n	8000820 <MatrixScan+0x170>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	673b      	str	r3, [r7, #112]	@ 0x70
            result.pinState = -1;
 800081a:	23ff      	movs	r3, #255	@ 0xff
 800081c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        }
        return result;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	461a      	mov	r2, r3
 8000824:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000828:	e893 0003 	ldmia.w	r3, {r0, r1}
 800082c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000830:	e241      	b.n	8000cb6 <MatrixScan+0x606>
//        char message[100];
//        sprintf(message, "A | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinB != 0 )
 8000832:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d045      	beq.n	80008c6 <MatrixScan+0x216>
    {
        int bitPosition = -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while ( changedPinB )
 8000842:	e009      	b.n	8000858 <MatrixScan+0x1a8>
        {
            changedPinB >>= 1;
 8000844:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            bitPosition++;
 800084e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000852:	3301      	adds	r3, #1
 8000854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while ( changedPinB )
 8000858:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f1      	bne.n	8000844 <MatrixScan+0x194>
        }

        result.pinNumber = bitPosition + 16; // 핀 번호 (포트 B는 16 ~ 31)
 8000860:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000864:	3310      	adds	r3, #16
 8000866:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioB_state >> bitPosition) & 1;
 8000868:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800086c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000870:	fa22 f303 	lsr.w	r3, r2, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000880:	4b4a      	ldr	r3, [pc, #296]	@ (80009ac <MatrixScan+0x2fc>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000886:	494a      	ldr	r1, [pc, #296]	@ (80009b0 <MatrixScan+0x300>)
 8000888:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	2b05      	cmp	r3, #5
 8000890:	d90a      	bls.n	80008a8 <MatrixScan+0x1f8>
        {
        	Last_gpioB_state = gpioB_state;
 8000892:	4a3f      	ldr	r2, [pc, #252]	@ (8000990 <MatrixScan+0x2e0>)
 8000894:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000898:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 800089a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800089c:	4a43      	ldr	r2, [pc, #268]	@ (80009ac <MatrixScan+0x2fc>)
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	4943      	ldr	r1, [pc, #268]	@ (80009b0 <MatrixScan+0x300>)
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008a6:	e005      	b.n	80008b4 <MatrixScan+0x204>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	673b      	str	r3, [r7, #112]	@ 0x70
            result.pinState = -1;
 80008ae:	23ff      	movs	r3, #255	@ 0xff
 80008b0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        }
        return result;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	461a      	mov	r2, r3
 80008b8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80008bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80008c4:	e1f7      	b.n	8000cb6 <MatrixScan+0x606>
//        char message[100];
//        sprintf(message, "B | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinC != 0 )
 80008c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d045      	beq.n	800095a <MatrixScan+0x2aa>
    {
        int bitPosition = -1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while ( changedPinC )
 80008d6:	e009      	b.n	80008ec <MatrixScan+0x23c>
        {
            changedPinC >>= 1;
 80008d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            bitPosition++;
 80008e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80008e6:	3301      	adds	r3, #1
 80008e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while ( changedPinC )
 80008ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f1      	bne.n	80008d8 <MatrixScan+0x228>
        }

        result.pinNumber = bitPosition + 32; // 핀 번호 (포트 C는 32 ~ 47)
 80008f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80008f8:	3320      	adds	r3, #32
 80008fa:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioC_state >> bitPosition) & 1;
 80008fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000904:	fa22 f303 	lsr.w	r3, r2, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000914:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <MatrixScan+0x2fc>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800091a:	4925      	ldr	r1, [pc, #148]	@ (80009b0 <MatrixScan+0x300>)
 800091c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	2b05      	cmp	r3, #5
 8000924:	d90a      	bls.n	800093c <MatrixScan+0x28c>
        {
        	Last_gpioC_state = gpioC_state;
 8000926:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <MatrixScan+0x2e4>)
 8000928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800092c:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 800092e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000930:	4a1e      	ldr	r2, [pc, #120]	@ (80009ac <MatrixScan+0x2fc>)
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	491e      	ldr	r1, [pc, #120]	@ (80009b0 <MatrixScan+0x300>)
 8000936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800093a:	e005      	b.n	8000948 <MatrixScan+0x298>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	673b      	str	r3, [r7, #112]	@ 0x70
            result.pinState = -1;
 8000942:	23ff      	movs	r3, #255	@ 0xff
 8000944:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        }
        return result;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	461a      	mov	r2, r3
 800094c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000950:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000954:	e882 0003 	stmia.w	r2, {r0, r1}
 8000958:	e1ad      	b.n	8000cb6 <MatrixScan+0x606>
//        char message[100];
//        sprintf(message, "C | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinD != 0 )
 800095a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d07f      	beq.n	8000a62 <MatrixScan+0x3b2>
    {
        int bitPosition = -1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        while ( changedPinD )
 800096a:	e02d      	b.n	80009c8 <MatrixScan+0x318>
 800096c:	58020000 	.word	0x58020000
 8000970:	58020400 	.word	0x58020400
 8000974:	58020800 	.word	0x58020800
 8000978:	58020c00 	.word	0x58020c00
 800097c:	58021000 	.word	0x58021000
 8000980:	58021400 	.word	0x58021400
 8000984:	58021800 	.word	0x58021800
 8000988:	58021c00 	.word	0x58021c00
 800098c:	2400077c 	.word	0x2400077c
 8000990:	24000780 	.word	0x24000780
 8000994:	24000784 	.word	0x24000784
 8000998:	24000788 	.word	0x24000788
 800099c:	2400078c 	.word	0x2400078c
 80009a0:	24000790 	.word	0x24000790
 80009a4:	24000794 	.word	0x24000794
 80009a8:	24000798 	.word	0x24000798
 80009ac:	24000778 	.word	0x24000778
 80009b0:	24000578 	.word	0x24000578
        {
            changedPinD >>= 1;
 80009b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            bitPosition++;
 80009be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80009c2:	3301      	adds	r3, #1
 80009c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        while ( changedPinD )
 80009c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1f1      	bne.n	80009b4 <MatrixScan+0x304>
        }

        result.pinNumber = bitPosition + 48; // 핀 번호 (포트 D는 48 ~ 63)
 80009d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80009d4:	3330      	adds	r3, #48	@ 0x30
 80009d6:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioD_state >> bitPosition) & 1;
 80009d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80009dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80009e0:	fa22 f303 	lsr.w	r3, r2, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        char message[100];
        sprintf(message, "D | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80009f0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80009f2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80009f6:	f107 000c 	add.w	r0, r7, #12
 80009fa:	49b1      	ldr	r1, [pc, #708]	@ (8000cc0 <MatrixScan+0x610>)
 80009fc:	f00a fcc4 	bl	800b388 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fc83 	bl	8000310 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f107 010c 	add.w	r1, r7, #12
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	48ab      	ldr	r0, [pc, #684]	@ (8000cc4 <MatrixScan+0x614>)
 8000a18:	f005 fd1a 	bl	8006450 <HAL_UART_Transmit>

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000a1c:	4baa      	ldr	r3, [pc, #680]	@ (8000cc8 <MatrixScan+0x618>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a22:	49aa      	ldr	r1, [pc, #680]	@ (8000ccc <MatrixScan+0x61c>)
 8000a24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d90a      	bls.n	8000a44 <MatrixScan+0x394>
        {
        	Last_gpioD_state = gpioD_state;
 8000a2e:	4aa8      	ldr	r2, [pc, #672]	@ (8000cd0 <MatrixScan+0x620>)
 8000a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a34:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a38:	4aa3      	ldr	r2, [pc, #652]	@ (8000cc8 <MatrixScan+0x618>)
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	49a3      	ldr	r1, [pc, #652]	@ (8000ccc <MatrixScan+0x61c>)
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a42:	e005      	b.n	8000a50 <MatrixScan+0x3a0>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	673b      	str	r3, [r7, #112]	@ 0x70
            result.pinState = -1;
 8000a4a:	23ff      	movs	r3, #255	@ 0xff
 8000a4c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        }
        return result;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	461a      	mov	r2, r3
 8000a54:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a5c:	e882 0003 	stmia.w	r2, {r0, r1}





}
 8000a60:	e129      	b.n	8000cb6 <MatrixScan+0x606>
    else if ( changedPinE != 0 )
 8000a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d045      	beq.n	8000af6 <MatrixScan+0x446>
        int bitPosition = -1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        while ( changedPinE )
 8000a72:	e009      	b.n	8000a88 <MatrixScan+0x3d8>
            changedPinE >>= 1;
 8000a74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a78:	085b      	lsrs	r3, r3, #1
 8000a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            bitPosition++;
 8000a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a82:	3301      	adds	r3, #1
 8000a84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        while ( changedPinE )
 8000a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f1      	bne.n	8000a74 <MatrixScan+0x3c4>
        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000a90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a94:	3340      	adds	r3, #64	@ 0x40
 8000a96:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioE_state >> bitPosition) & 1;
 8000a98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000ab0:	4b85      	ldr	r3, [pc, #532]	@ (8000cc8 <MatrixScan+0x618>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ab6:	4985      	ldr	r1, [pc, #532]	@ (8000ccc <MatrixScan+0x61c>)
 8000ab8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	2b05      	cmp	r3, #5
 8000ac0:	d90a      	bls.n	8000ad8 <MatrixScan+0x428>
        	Last_gpioE_state = gpioE_state;
 8000ac2:	4a84      	ldr	r2, [pc, #528]	@ (8000cd4 <MatrixScan+0x624>)
 8000ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ac8:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000acc:	4a7e      	ldr	r2, [pc, #504]	@ (8000cc8 <MatrixScan+0x618>)
 8000ace:	6812      	ldr	r2, [r2, #0]
 8000ad0:	497e      	ldr	r1, [pc, #504]	@ (8000ccc <MatrixScan+0x61c>)
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ad6:	e005      	b.n	8000ae4 <MatrixScan+0x434>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	673b      	str	r3, [r7, #112]	@ 0x70
            result.pinState = -1;
 8000ade:	23ff      	movs	r3, #255	@ 0xff
 8000ae0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        return result;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000aec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000af0:	e882 0003 	stmia.w	r2, {r0, r1}
 8000af4:	e0df      	b.n	8000cb6 <MatrixScan+0x606>
    else if ( changedPinF != 0 )
 8000af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d045      	beq.n	8000b8a <MatrixScan+0x4da>
        int bitPosition = -1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        while ( changedPinF )
 8000b06:	e009      	b.n	8000b1c <MatrixScan+0x46c>
            changedPinF >>= 1;
 8000b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b0c:	085b      	lsrs	r3, r3, #1
 8000b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            bitPosition++;
 8000b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000b16:	3301      	adds	r3, #1
 8000b18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        while ( changedPinF )
 8000b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f1      	bne.n	8000b08 <MatrixScan+0x458>
        result.pinNumber = bitPosition + 80; // 핀 번호 (포트 E는 64 ~ 79)
 8000b24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000b28:	3350      	adds	r3, #80	@ 0x50
 8000b2a:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioF_state >> bitPosition) & 1;
 8000b2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000b30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000b34:	fa22 f303 	lsr.w	r3, r2, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000b44:	4b60      	ldr	r3, [pc, #384]	@ (8000cc8 <MatrixScan+0x618>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b4a:	4960      	ldr	r1, [pc, #384]	@ (8000ccc <MatrixScan+0x61c>)
 8000b4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	d90a      	bls.n	8000b6c <MatrixScan+0x4bc>
        	Last_gpioF_state = gpioF_state;
 8000b56:	4a60      	ldr	r2, [pc, #384]	@ (8000cd8 <MatrixScan+0x628>)
 8000b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000b5c:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b60:	4a59      	ldr	r2, [pc, #356]	@ (8000cc8 <MatrixScan+0x618>)
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	4959      	ldr	r1, [pc, #356]	@ (8000ccc <MatrixScan+0x61c>)
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000b6a:	e005      	b.n	8000b78 <MatrixScan+0x4c8>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	673b      	str	r3, [r7, #112]	@ 0x70
            result.pinState = -1;
 8000b72:	23ff      	movs	r3, #255	@ 0xff
 8000b74:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        return result;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b84:	e882 0003 	stmia.w	r2, {r0, r1}
 8000b88:	e095      	b.n	8000cb6 <MatrixScan+0x606>
    else if ( changedPinG != 0 )
 8000b8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d042      	beq.n	8000c18 <MatrixScan+0x568>
        int bitPosition = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        while ( changedPinG )
 8000b98:	e009      	b.n	8000bae <MatrixScan+0x4fe>
        	changedPinG >>= 1;
 8000b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000b9e:	085b      	lsrs	r3, r3, #1
 8000ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            bitPosition++;
 8000ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ba8:	3301      	adds	r3, #1
 8000baa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        while ( changedPinG )
 8000bae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f1      	bne.n	8000b9a <MatrixScan+0x4ea>
        result.pinNumber = bitPosition + 96; // 핀 번호 (포트 E는 64 ~ 79)
 8000bb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000bba:	3360      	adds	r3, #96	@ 0x60
 8000bbc:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioG_state >> bitPosition) & 1;
 8000bbe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8000cc8 <MatrixScan+0x618>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000bda:	493c      	ldr	r1, [pc, #240]	@ (8000ccc <MatrixScan+0x61c>)
 8000bdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d909      	bls.n	8000bfa <MatrixScan+0x54a>
        	Last_gpioG_state = gpioG_state;
 8000be6:	4a3d      	ldr	r2, [pc, #244]	@ (8000cdc <MatrixScan+0x62c>)
 8000be8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bea:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000bec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000bee:	4a36      	ldr	r2, [pc, #216]	@ (8000cc8 <MatrixScan+0x618>)
 8000bf0:	6812      	ldr	r2, [r2, #0]
 8000bf2:	4936      	ldr	r1, [pc, #216]	@ (8000ccc <MatrixScan+0x61c>)
 8000bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000bf8:	e005      	b.n	8000c06 <MatrixScan+0x556>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	673b      	str	r3, [r7, #112]	@ 0x70
            result.pinState = -1;
 8000c00:	23ff      	movs	r3, #255	@ 0xff
 8000c02:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        return result;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c12:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c16:	e04e      	b.n	8000cb6 <MatrixScan+0x606>
    else if ( changedPinH != 0 )
 8000c18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d042      	beq.n	8000ca6 <MatrixScan+0x5f6>
        int bitPosition = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while ( changedPinH )
 8000c26:	e009      	b.n	8000c3c <MatrixScan+0x58c>
        	changedPinH >>= 1;
 8000c28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c2c:	085b      	lsrs	r3, r3, #1
 8000c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            bitPosition++;
 8000c32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c36:	3301      	adds	r3, #1
 8000c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while ( changedPinH )
 8000c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f1      	bne.n	8000c28 <MatrixScan+0x578>
        result.pinNumber = bitPosition + 112; // 핀 번호 (포트 E는 64 ~ 79)
 8000c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c48:	3370      	adds	r3, #112	@ 0x70
 8000c4a:	673b      	str	r3, [r7, #112]	@ 0x70
        result.pinState = (gpioH_state >> bitPosition) & 1;
 8000c4c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c52:	fa22 f303 	lsr.w	r3, r2, r3
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000c62:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <MatrixScan+0x618>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c68:	4918      	ldr	r1, [pc, #96]	@ (8000ccc <MatrixScan+0x61c>)
 8000c6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d909      	bls.n	8000c88 <MatrixScan+0x5d8>
        	Last_gpioH_state = gpioH_state;
 8000c74:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce0 <MatrixScan+0x630>)
 8000c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c78:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000c7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c7c:	4a12      	ldr	r2, [pc, #72]	@ (8000cc8 <MatrixScan+0x618>)
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	4912      	ldr	r1, [pc, #72]	@ (8000ccc <MatrixScan+0x61c>)
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000c86:	e005      	b.n	8000c94 <MatrixScan+0x5e4>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	673b      	str	r3, [r7, #112]	@ 0x70
            result.pinState = -1;
 8000c8e:	23ff      	movs	r3, #255	@ 0xff
 8000c90:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        return result;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	461a      	mov	r2, r3
 8000c98:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ca0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000ca4:	e007      	b.n	8000cb6 <MatrixScan+0x606>
    return result;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000cae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cb2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	37d8      	adds	r7, #216	@ 0xd8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	0800bce0 	.word	0x0800bce0
 8000cc4:	2400033c 	.word	0x2400033c
 8000cc8:	24000778 	.word	0x24000778
 8000ccc:	24000578 	.word	0x24000578
 8000cd0:	24000788 	.word	0x24000788
 8000cd4:	2400078c 	.word	0x2400078c
 8000cd8:	24000790 	.word	0x24000790
 8000cdc:	24000794 	.word	0x24000794
 8000ce0:	24000798 	.word	0x24000798

08000ce4 <SetKeycode>:




void SetKeycode(int keycode)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == 0x00)
 8000cec:	4b4a      	ldr	r3, [pc, #296]	@ (8000e18 <SetKeycode+0x134>)
 8000cee:	789b      	ldrb	r3, [r3, #2]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <SetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = keycode;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b47      	ldr	r3, [pc, #284]	@ (8000e18 <SetKeycode+0x134>)
 8000cfa:	709a      	strb	r2, [r3, #2]
    }
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
    {
        keyboardReport.Keycode6 = keycode;
    }
}
 8000cfc:	e086      	b.n	8000e0c <SetKeycode+0x128>
    else if (keyboardReport.Keycode2 == 0x00 && keycode != keyboardReport.Keycode1)
 8000cfe:	4b46      	ldr	r3, [pc, #280]	@ (8000e18 <SetKeycode+0x134>)
 8000d00:	78db      	ldrb	r3, [r3, #3]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10a      	bne.n	8000d1c <SetKeycode+0x38>
 8000d06:	4b44      	ldr	r3, [pc, #272]	@ (8000e18 <SetKeycode+0x134>)
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d004      	beq.n	8000d1c <SetKeycode+0x38>
        keyboardReport.Keycode2 = keycode;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b40      	ldr	r3, [pc, #256]	@ (8000e18 <SetKeycode+0x134>)
 8000d18:	70da      	strb	r2, [r3, #3]
 8000d1a:	e077      	b.n	8000e0c <SetKeycode+0x128>
    else if (keyboardReport.Keycode3 == 0x00 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e18 <SetKeycode+0x134>)
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d110      	bne.n	8000d46 <SetKeycode+0x62>
 8000d24:	4b3c      	ldr	r3, [pc, #240]	@ (8000e18 <SetKeycode+0x134>)
 8000d26:	78db      	ldrb	r3, [r3, #3]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d00a      	beq.n	8000d46 <SetKeycode+0x62>
 8000d30:	4b39      	ldr	r3, [pc, #228]	@ (8000e18 <SetKeycode+0x134>)
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	461a      	mov	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d004      	beq.n	8000d46 <SetKeycode+0x62>
        keyboardReport.Keycode3 = keycode;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b35      	ldr	r3, [pc, #212]	@ (8000e18 <SetKeycode+0x134>)
 8000d42:	711a      	strb	r2, [r3, #4]
 8000d44:	e062      	b.n	8000e0c <SetKeycode+0x128>
    else if (keyboardReport.Keycode4 == 0x00 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d46:	4b34      	ldr	r3, [pc, #208]	@ (8000e18 <SetKeycode+0x134>)
 8000d48:	795b      	ldrb	r3, [r3, #5]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d116      	bne.n	8000d7c <SetKeycode+0x98>
 8000d4e:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <SetKeycode+0x134>)
 8000d50:	791b      	ldrb	r3, [r3, #4]
 8000d52:	461a      	mov	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d010      	beq.n	8000d7c <SetKeycode+0x98>
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e18 <SetKeycode+0x134>)
 8000d5c:	78db      	ldrb	r3, [r3, #3]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d00a      	beq.n	8000d7c <SetKeycode+0x98>
 8000d66:	4b2c      	ldr	r3, [pc, #176]	@ (8000e18 <SetKeycode+0x134>)
 8000d68:	789b      	ldrb	r3, [r3, #2]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d004      	beq.n	8000d7c <SetKeycode+0x98>
        keyboardReport.Keycode4 = keycode;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <SetKeycode+0x134>)
 8000d78:	715a      	strb	r2, [r3, #5]
 8000d7a:	e047      	b.n	8000e0c <SetKeycode+0x128>
    else if (keyboardReport.Keycode5 == 0x00 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d7c:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <SetKeycode+0x134>)
 8000d7e:	799b      	ldrb	r3, [r3, #6]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d11c      	bne.n	8000dbe <SetKeycode+0xda>
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <SetKeycode+0x134>)
 8000d86:	795b      	ldrb	r3, [r3, #5]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d016      	beq.n	8000dbe <SetKeycode+0xda>
 8000d90:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <SetKeycode+0x134>)
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	461a      	mov	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d010      	beq.n	8000dbe <SetKeycode+0xda>
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <SetKeycode+0x134>)
 8000d9e:	78db      	ldrb	r3, [r3, #3]
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d00a      	beq.n	8000dbe <SetKeycode+0xda>
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <SetKeycode+0x134>)
 8000daa:	789b      	ldrb	r3, [r3, #2]
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d004      	beq.n	8000dbe <SetKeycode+0xda>
        keyboardReport.Keycode5 = keycode;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <SetKeycode+0x134>)
 8000dba:	719a      	strb	r2, [r3, #6]
 8000dbc:	e026      	b.n	8000e0c <SetKeycode+0x128>
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000dbe:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <SetKeycode+0x134>)
 8000dc0:	79db      	ldrb	r3, [r3, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d122      	bne.n	8000e0c <SetKeycode+0x128>
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <SetKeycode+0x134>)
 8000dc8:	799b      	ldrb	r3, [r3, #6]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d01c      	beq.n	8000e0c <SetKeycode+0x128>
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <SetKeycode+0x134>)
 8000dd4:	795b      	ldrb	r3, [r3, #5]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d016      	beq.n	8000e0c <SetKeycode+0x128>
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <SetKeycode+0x134>)
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	461a      	mov	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d010      	beq.n	8000e0c <SetKeycode+0x128>
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <SetKeycode+0x134>)
 8000dec:	78db      	ldrb	r3, [r3, #3]
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d00a      	beq.n	8000e0c <SetKeycode+0x128>
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <SetKeycode+0x134>)
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d004      	beq.n	8000e0c <SetKeycode+0x128>
        keyboardReport.Keycode6 = keycode;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <SetKeycode+0x134>)
 8000e08:	71da      	strb	r2, [r3, #7]
}
 8000e0a:	e7ff      	b.n	8000e0c <SetKeycode+0x128>
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	24000334 	.word	0x24000334

08000e1c <ResetKeycode>:

void ResetKeycode(int keycode)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == keycode)
 8000e24:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <ResetKeycode+0x80>)
 8000e26:	789b      	ldrb	r3, [r3, #2]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d102      	bne.n	8000e36 <ResetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = 0x00;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <ResetKeycode+0x80>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	709a      	strb	r2, [r3, #2]
    }
    if (keyboardReport.Keycode2 == keycode)
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <ResetKeycode+0x80>)
 8000e38:	78db      	ldrb	r3, [r3, #3]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d102      	bne.n	8000e48 <ResetKeycode+0x2c>
    {
        keyboardReport.Keycode2 = 0x00;
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <ResetKeycode+0x80>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	70da      	strb	r2, [r3, #3]
    }
    if (keyboardReport.Keycode3 == keycode)
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <ResetKeycode+0x80>)
 8000e4a:	791b      	ldrb	r3, [r3, #4]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d102      	bne.n	8000e5a <ResetKeycode+0x3e>
    {
        keyboardReport.Keycode3 = 0x00;
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <ResetKeycode+0x80>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	711a      	strb	r2, [r3, #4]
    }
    if (keyboardReport.Keycode4 == keycode)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <ResetKeycode+0x80>)
 8000e5c:	795b      	ldrb	r3, [r3, #5]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d102      	bne.n	8000e6c <ResetKeycode+0x50>
    {
        keyboardReport.Keycode4 = 0x00;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <ResetKeycode+0x80>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	715a      	strb	r2, [r3, #5]
    }
    if (keyboardReport.Keycode5 == keycode)
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <ResetKeycode+0x80>)
 8000e6e:	799b      	ldrb	r3, [r3, #6]
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d102      	bne.n	8000e7e <ResetKeycode+0x62>
    {
        keyboardReport.Keycode5 = 0x00;
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <ResetKeycode+0x80>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	719a      	strb	r2, [r3, #6]
    }
    if (keyboardReport.Keycode6 == keycode)
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <ResetKeycode+0x80>)
 8000e80:	79db      	ldrb	r3, [r3, #7]
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d102      	bne.n	8000e90 <ResetKeycode+0x74>
    {
        keyboardReport.Keycode6 = 0x00;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <ResetKeycode+0x80>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	71da      	strb	r2, [r3, #7]
    }
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	24000334 	.word	0x24000334

08000ea0 <KeycodeSend>:

void KeycodeSend()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09a      	sub	sp, #104	@ 0x68
 8000ea4:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t *)&keyboardReport, sizeof(keyboardReport));
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	490c      	ldr	r1, [pc, #48]	@ (8000edc <KeycodeSend+0x3c>)
 8000eaa:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <KeycodeSend+0x40>)
 8000eac:	f008 f9fc 	bl	80092a8 <USBD_HID_SendReport>

    char message[100];
    sprintf(message, "KeycodeSend \n\r");
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <KeycodeSend+0x44>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f00a fa67 	bl	800b388 <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fa27 	bl	8000310 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	1d39      	adds	r1, r7, #4
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <KeycodeSend+0x48>)
 8000ece:	f005 fabf 	bl	8006450 <HAL_UART_Transmit>
}
 8000ed2:	bf00      	nop
 8000ed4:	3768      	adds	r7, #104	@ 0x68
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	24000334 	.word	0x24000334
 8000ee0:	240007a8 	.word	0x240007a8
 8000ee4:	0800bd08 	.word	0x0800bd08
 8000ee8:	2400033c 	.word	0x2400033c

08000eec <PressKeycodes>:

void PressKeycodes(int i)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b09c      	sub	sp, #112	@ 0x70
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

	if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000ef4:	4b89      	ldr	r3, [pc, #548]	@ (800111c <PressKeycodes+0x230>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4989      	ldr	r1, [pc, #548]	@ (8001120 <PressKeycodes+0x234>)
 8000efa:	2264      	movs	r2, #100	@ 0x64
 8000efc:	fb03 f202 	mul.w	r2, r3, r2
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f08:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d925      	bls.n	8000f5c <PressKeycodes+0x70>
	{
		KeyTimer = HAL_GetTick();
 8000f10:	f000 feda 	bl	8001cc8 <HAL_GetTick>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b82      	ldr	r3, [pc, #520]	@ (8001124 <PressKeycodes+0x238>)
 8000f1a:	601a      	str	r2, [r3, #0]

		char message5[100];
		sprintf(message5, "HoldTapPress = %d \n\r", Keycode[LayerState][i]);
 8000f1c:	4b7f      	ldr	r3, [pc, #508]	@ (800111c <PressKeycodes+0x230>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	497f      	ldr	r1, [pc, #508]	@ (8001120 <PressKeycodes+0x234>)
 8000f22:	2264      	movs	r2, #100	@ 0x64
 8000f24:	fb03 f202 	mul.w	r2, r3, r2
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f30:	461a      	mov	r2, r3
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	497c      	ldr	r1, [pc, #496]	@ (8001128 <PressKeycodes+0x23c>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00a fa25 	bl	800b388 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff f9e4 	bl	8000310 <strlen>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	f107 010c 	add.w	r1, r7, #12
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	4875      	ldr	r0, [pc, #468]	@ (800112c <PressKeycodes+0x240>)
 8000f56:	f005 fa7b 	bl	8006450 <HAL_UART_Transmit>

		char message4[100];
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
	}
}
 8000f5a:	e0db      	b.n	8001114 <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 10000)
 8000f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800111c <PressKeycodes+0x230>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	496f      	ldr	r1, [pc, #444]	@ (8001120 <PressKeycodes+0x234>)
 8000f62:	2264      	movs	r2, #100	@ 0x64
 8000f64:	fb03 f202 	mul.w	r2, r3, r2
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f70:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d941      	bls.n	8000ffc <PressKeycodes+0x110>
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i] - 10000];
 8000f78:	4b68      	ldr	r3, [pc, #416]	@ (800111c <PressKeycodes+0x230>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4968      	ldr	r1, [pc, #416]	@ (8001120 <PressKeycodes+0x234>)
 8000f7e:	2264      	movs	r2, #100	@ 0x64
 8000f80:	fb03 f202 	mul.w	r2, r3, r2
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b68      	ldr	r3, [pc, #416]	@ (8001130 <PressKeycodes+0x244>)
 8000f90:	4413      	add	r3, r2
 8000f92:	4a68      	ldr	r2, [pc, #416]	@ (8001134 <PressKeycodes+0x248>)
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	b25a      	sxtb	r2, r3
 8000f9a:	4b67      	ldr	r3, [pc, #412]	@ (8001138 <PressKeycodes+0x24c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b64      	ldr	r3, [pc, #400]	@ (8001138 <PressKeycodes+0x24c>)
 8000fa8:	701a      	strb	r2, [r3, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 8000faa:	4b63      	ldr	r3, [pc, #396]	@ (8001138 <PressKeycodes+0x24c>)
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	4b63      	ldr	r3, [pc, #396]	@ (800113c <PressKeycodes+0x250>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		sprintf(message1, "ModifierPress = %d \n\r", Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800111c <PressKeycodes+0x230>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	495a      	ldr	r1, [pc, #360]	@ (8001120 <PressKeycodes+0x234>)
 8000fb8:	2264      	movs	r2, #100	@ 0x64
 8000fba:	fb03 f202 	mul.w	r2, r3, r2
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b59      	ldr	r3, [pc, #356]	@ (8001130 <PressKeycodes+0x244>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a59      	ldr	r2, [pc, #356]	@ (8001134 <PressKeycodes+0x248>)
 8000fce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	495a      	ldr	r1, [pc, #360]	@ (8001140 <PressKeycodes+0x254>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00a f9d5 	bl	800b388 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f994 	bl	8000310 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f107 010c 	add.w	r1, r7, #12
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	484d      	ldr	r0, [pc, #308]	@ (800112c <PressKeycodes+0x240>)
 8000ff6:	f005 fa2b 	bl	8006450 <HAL_UART_Transmit>
}
 8000ffa:	e08b      	b.n	8001114 <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 5000)
 8000ffc:	4b47      	ldr	r3, [pc, #284]	@ (800111c <PressKeycodes+0x230>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4947      	ldr	r1, [pc, #284]	@ (8001120 <PressKeycodes+0x234>)
 8001002:	2264      	movs	r2, #100	@ 0x64
 8001004:	fb03 f202 	mul.w	r2, r3, r2
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001010:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001014:	4293      	cmp	r3, r2
 8001016:	d94b      	bls.n	80010b0 <PressKeycodes+0x1c4>
		if ( Keycode[LayerState][i] == KC_FN1)
 8001018:	4b40      	ldr	r3, [pc, #256]	@ (800111c <PressKeycodes+0x230>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4940      	ldr	r1, [pc, #256]	@ (8001120 <PressKeycodes+0x234>)
 800101e:	2264      	movs	r2, #100	@ 0x64
 8001020:	fb03 f202 	mul.w	r2, r3, r2
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800102c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001030:	4293      	cmp	r3, r2
 8001032:	d103      	bne.n	800103c <PressKeycodes+0x150>
			LayerState = 1; // Layer1 when pressed
 8001034:	4b39      	ldr	r3, [pc, #228]	@ (800111c <PressKeycodes+0x230>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e022      	b.n	8001082 <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD0)
 800103c:	4b37      	ldr	r3, [pc, #220]	@ (800111c <PressKeycodes+0x230>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4937      	ldr	r1, [pc, #220]	@ (8001120 <PressKeycodes+0x234>)
 8001042:	2264      	movs	r2, #100	@ 0x64
 8001044:	fb03 f202 	mul.w	r2, r3, r2
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001050:	f241 3289 	movw	r2, #5001	@ 0x1389
 8001054:	4293      	cmp	r3, r2
 8001056:	d103      	bne.n	8001060 <PressKeycodes+0x174>
			LayerState = 0;
 8001058:	4b30      	ldr	r3, [pc, #192]	@ (800111c <PressKeycodes+0x230>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e010      	b.n	8001082 <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD1)
 8001060:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <PressKeycodes+0x230>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	492e      	ldr	r1, [pc, #184]	@ (8001120 <PressKeycodes+0x234>)
 8001066:	2264      	movs	r2, #100	@ 0x64
 8001068:	fb03 f202 	mul.w	r2, r3, r2
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001074:	f241 328a 	movw	r2, #5002	@ 0x138a
 8001078:	4293      	cmp	r3, r2
 800107a:	d102      	bne.n	8001082 <PressKeycodes+0x196>
			LayerState = 1;
 800107c:	4b27      	ldr	r3, [pc, #156]	@ (800111c <PressKeycodes+0x230>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
		sprintf(message1, "Current Layer = %d \n\r", LayerState);
 8001082:	4b26      	ldr	r3, [pc, #152]	@ (800111c <PressKeycodes+0x230>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	492e      	ldr	r1, [pc, #184]	@ (8001144 <PressKeycodes+0x258>)
 800108c:	4618      	mov	r0, r3
 800108e:	f00a f97b 	bl	800b388 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f93a 	bl	8000310 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	4820      	ldr	r0, [pc, #128]	@ (800112c <PressKeycodes+0x240>)
 80010aa:	f005 f9d1 	bl	8006450 <HAL_UART_Transmit>
}
 80010ae:	e031      	b.n	8001114 <PressKeycodes+0x228>
		SetKeycode(Keycode[LayerState][i]);
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <PressKeycodes+0x230>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	491a      	ldr	r1, [pc, #104]	@ (8001120 <PressKeycodes+0x234>)
 80010b6:	2264      	movs	r2, #100	@ 0x64
 80010b8:	fb03 f202 	mul.w	r2, r3, r2
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fe0d 	bl	8000ce4 <SetKeycode>
		WhichLayer[i] = LayerState;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <PressKeycodes+0x230>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	491e      	ldr	r1, [pc, #120]	@ (8001148 <PressKeycodes+0x25c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <PressKeycodes+0x230>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4911      	ldr	r1, [pc, #68]	@ (8001120 <PressKeycodes+0x234>)
 80010dc:	2264      	movs	r2, #100	@ 0x64
 80010de:	fb03 f202 	mul.w	r2, r3, r2
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4916      	ldr	r1, [pc, #88]	@ (800114c <PressKeycodes+0x260>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00a f948 	bl	800b388 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f907 	bl	8000310 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 010c 	add.w	r1, r7, #12
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	4807      	ldr	r0, [pc, #28]	@ (800112c <PressKeycodes+0x240>)
 8001110:	f005 f99e 	bl	8006450 <HAL_UART_Transmit>
}
 8001114:	bf00      	nop
 8001116:	3770      	adds	r7, #112	@ 0x70
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	240003dc 	.word	0x240003dc
 8001120:	24000000 	.word	0x24000000
 8001124:	24000574 	.word	0x24000574
 8001128:	0800bd18 	.word	0x0800bd18
 800112c:	2400033c 	.word	0x2400033c
 8001130:	ffffd8f0 	.word	0xffffd8f0
 8001134:	24000190 	.word	0x24000190
 8001138:	240003d8 	.word	0x240003d8
 800113c:	24000334 	.word	0x24000334
 8001140:	0800bd30 	.word	0x0800bd30
 8001144:	0800bd48 	.word	0x0800bd48
 8001148:	240003e0 	.word	0x240003e0
 800114c:	0800bd60 	.word	0x0800bd60

08001150 <ReleaseKeycodes>:

void ReleaseKeycodes(int i)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b09c      	sub	sp, #112	@ 0x70
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8001158:	4b8c      	ldr	r3, [pc, #560]	@ (800138c <ReleaseKeycodes+0x23c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	498c      	ldr	r1, [pc, #560]	@ (8001390 <ReleaseKeycodes+0x240>)
 800115e:	2264      	movs	r2, #100	@ 0x64
 8001160:	fb03 f202 	mul.w	r2, r3, r2
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800116c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001170:	4293      	cmp	r3, r2
 8001172:	d959      	bls.n	8001228 <ReleaseKeycodes+0xd8>
    {
        if (HAL_GetTick() - KeyTimer > HOLD_TIME)
 8001174:	f000 fda8 	bl	8001cc8 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	4a86      	ldr	r2, [pc, #536]	@ (8001394 <ReleaseKeycodes+0x244>)
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	2bfa      	cmp	r3, #250	@ 0xfa
 8001182:	d90e      	bls.n	80011a2 <ReleaseKeycodes+0x52>
        {
            TempKeycode = Keycode[LayerState + 1][i]; // Hold 작동시 다음 레이어에 있는 키코드 전송
 8001184:	4b81      	ldr	r3, [pc, #516]	@ (800138c <ReleaseKeycodes+0x23c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4981      	ldr	r1, [pc, #516]	@ (8001390 <ReleaseKeycodes+0x240>)
 800118c:	2264      	movs	r2, #100	@ 0x64
 800118e:	fb03 f202 	mul.w	r2, r3, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800119a:	461a      	mov	r2, r3
 800119c:	4b7e      	ldr	r3, [pc, #504]	@ (8001398 <ReleaseKeycodes+0x248>)
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e00e      	b.n	80011c0 <ReleaseKeycodes+0x70>
        }
        else
        {
            TempKeycode = Keycode[LayerState][i] - 30000; // Tap 작동시 현재 레이어에 있는 키코드 -30000 전송
 80011a2:	4b7a      	ldr	r3, [pc, #488]	@ (800138c <ReleaseKeycodes+0x23c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	497a      	ldr	r1, [pc, #488]	@ (8001390 <ReleaseKeycodes+0x240>)
 80011a8:	2264      	movs	r2, #100	@ 0x64
 80011aa:	fb03 f202 	mul.w	r2, r3, r2
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b78      	ldr	r3, [pc, #480]	@ (800139c <ReleaseKeycodes+0x24c>)
 80011ba:	4413      	add	r3, r2
 80011bc:	4a76      	ldr	r2, [pc, #472]	@ (8001398 <ReleaseKeycodes+0x248>)
 80011be:	6013      	str	r3, [r2, #0]
        }
        SetKeycode(TempKeycode);
 80011c0:	4b75      	ldr	r3, [pc, #468]	@ (8001398 <ReleaseKeycodes+0x248>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd8d 	bl	8000ce4 <SetKeycode>
        KeycodeSend();
 80011ca:	f7ff fe69 	bl	8000ea0 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 80011ce:	2032      	movs	r0, #50	@ 0x32
 80011d0:	f000 fd86 	bl	8001ce0 <HAL_Delay>
        ResetKeycode(TempKeycode);
 80011d4:	4b70      	ldr	r3, [pc, #448]	@ (8001398 <ReleaseKeycodes+0x248>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fe1f 	bl	8000e1c <ResetKeycode>
        KeycodeSend();
 80011de:	f7ff fe5f 	bl	8000ea0 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 80011e2:	2032      	movs	r0, #50	@ 0x32
 80011e4:	f000 fd7c 	bl	8001ce0 <HAL_Delay>

        char message5[100];
        sprintf(message5, "HoldTapRelease = %d \n\r", Keycode[LayerState][i]);
 80011e8:	4b68      	ldr	r3, [pc, #416]	@ (800138c <ReleaseKeycodes+0x23c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4968      	ldr	r1, [pc, #416]	@ (8001390 <ReleaseKeycodes+0x240>)
 80011ee:	2264      	movs	r2, #100	@ 0x64
 80011f0:	fb03 f202 	mul.w	r2, r3, r2
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011fc:	461a      	mov	r2, r3
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	4967      	ldr	r1, [pc, #412]	@ (80013a0 <ReleaseKeycodes+0x250>)
 8001204:	4618      	mov	r0, r3
 8001206:	f00a f8bf 	bl	800b388 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f87e 	bl	8000310 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	f107 010c 	add.w	r1, r7, #12
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	4860      	ldr	r0, [pc, #384]	@ (80013a4 <ReleaseKeycodes+0x254>)
 8001222:	f005 f915 	bl	8006450 <HAL_UART_Transmit>
        char message5[100];
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
    }

}
 8001226:	e0ac      	b.n	8001382 <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 10000)
 8001228:	4b58      	ldr	r3, [pc, #352]	@ (800138c <ReleaseKeycodes+0x23c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4958      	ldr	r1, [pc, #352]	@ (8001390 <ReleaseKeycodes+0x240>)
 800122e:	2264      	movs	r2, #100	@ 0x64
 8001230:	fb03 f202 	mul.w	r2, r3, r2
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800123c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001240:	4293      	cmp	r3, r2
 8001242:	d93e      	bls.n	80012c2 <ReleaseKeycodes+0x172>
        Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8001244:	4b51      	ldr	r3, [pc, #324]	@ (800138c <ReleaseKeycodes+0x23c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4951      	ldr	r1, [pc, #324]	@ (8001390 <ReleaseKeycodes+0x240>)
 800124a:	2264      	movs	r2, #100	@ 0x64
 800124c:	fb03 f202 	mul.w	r2, r3, r2
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001258:	461a      	mov	r2, r3
 800125a:	4b53      	ldr	r3, [pc, #332]	@ (80013a8 <ReleaseKeycodes+0x258>)
 800125c:	4413      	add	r3, r2
 800125e:	4a53      	ldr	r2, [pc, #332]	@ (80013ac <ReleaseKeycodes+0x25c>)
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	b25a      	sxtb	r2, r3
 800126a:	4b51      	ldr	r3, [pc, #324]	@ (80013b0 <ReleaseKeycodes+0x260>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4013      	ands	r3, r2
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b4e      	ldr	r3, [pc, #312]	@ (80013b0 <ReleaseKeycodes+0x260>)
 8001278:	701a      	strb	r2, [r3, #0]
        keyboardReport.MODIFIER = Modifier_Sum;
 800127a:	4b4d      	ldr	r3, [pc, #308]	@ (80013b0 <ReleaseKeycodes+0x260>)
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	4b4d      	ldr	r3, [pc, #308]	@ (80013b4 <ReleaseKeycodes+0x264>)
 8001280:	701a      	strb	r2, [r3, #0]
        sprintf(message2, "ModifierRelease = %d\n\r", Keycode[LayerState][i]);
 8001282:	4b42      	ldr	r3, [pc, #264]	@ (800138c <ReleaseKeycodes+0x23c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4942      	ldr	r1, [pc, #264]	@ (8001390 <ReleaseKeycodes+0x240>)
 8001288:	2264      	movs	r2, #100	@ 0x64
 800128a:	fb03 f202 	mul.w	r2, r3, r2
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001296:	461a      	mov	r2, r3
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4946      	ldr	r1, [pc, #280]	@ (80013b8 <ReleaseKeycodes+0x268>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f00a f872 	bl	800b388 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message2, strlen(message2), HAL_MAX_DELAY);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f831 	bl	8000310 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f107 010c 	add.w	r1, r7, #12
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	483a      	ldr	r0, [pc, #232]	@ (80013a4 <ReleaseKeycodes+0x254>)
 80012bc:	f005 f8c8 	bl	8006450 <HAL_UART_Transmit>
}
 80012c0:	e05f      	b.n	8001382 <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 5000 )
 80012c2:	4b32      	ldr	r3, [pc, #200]	@ (800138c <ReleaseKeycodes+0x23c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4932      	ldr	r1, [pc, #200]	@ (8001390 <ReleaseKeycodes+0x240>)
 80012c8:	2264      	movs	r2, #100	@ 0x64
 80012ca:	fb03 f202 	mul.w	r2, r3, r2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012d6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012da:	4293      	cmp	r3, r2
 80012dc:	d927      	bls.n	800132e <ReleaseKeycodes+0x1de>
    	if ( Keycode[LayerState][i] == KC_FN1 )
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <ReleaseKeycodes+0x23c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	492b      	ldr	r1, [pc, #172]	@ (8001390 <ReleaseKeycodes+0x240>)
 80012e4:	2264      	movs	r2, #100	@ 0x64
 80012e6:	fb03 f202 	mul.w	r2, r3, r2
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d143      	bne.n	8001382 <ReleaseKeycodes+0x232>
            LayerState = 0; // Layer0 when released
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <ReleaseKeycodes+0x23c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
            sprintf(message1, "Current Layer = %d \n\r", LayerState);
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <ReleaseKeycodes+0x23c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	492c      	ldr	r1, [pc, #176]	@ (80013bc <ReleaseKeycodes+0x26c>)
 800130a:	4618      	mov	r0, r3
 800130c:	f00a f83c 	bl	800b388 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4618      	mov	r0, r3
 8001316:	f7fe fffb 	bl	8000310 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	b29a      	uxth	r2, r3
 800131e:	f107 010c 	add.w	r1, r7, #12
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	481f      	ldr	r0, [pc, #124]	@ (80013a4 <ReleaseKeycodes+0x254>)
 8001328:	f005 f892 	bl	8006450 <HAL_UART_Transmit>
}
 800132c:	e029      	b.n	8001382 <ReleaseKeycodes+0x232>
        TempKeycode = Keycode[WhichLayer[i]][i];
 800132e:	4a24      	ldr	r2, [pc, #144]	@ (80013c0 <ReleaseKeycodes+0x270>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	4916      	ldr	r1, [pc, #88]	@ (8001390 <ReleaseKeycodes+0x240>)
 8001338:	2264      	movs	r2, #100	@ 0x64
 800133a:	fb03 f202 	mul.w	r2, r3, r2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001346:	461a      	mov	r2, r3
 8001348:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <ReleaseKeycodes+0x248>)
 800134a:	601a      	str	r2, [r3, #0]
        ResetKeycode(TempKeycode);
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <ReleaseKeycodes+0x248>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd63 	bl	8000e1c <ResetKeycode>
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <ReleaseKeycodes+0x248>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4919      	ldr	r1, [pc, #100]	@ (80013c4 <ReleaseKeycodes+0x274>)
 8001360:	4618      	mov	r0, r3
 8001362:	f00a f811 	bl	800b388 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	4618      	mov	r0, r3
 800136c:	f7fe ffd0 	bl	8000310 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	f107 010c 	add.w	r1, r7, #12
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <ReleaseKeycodes+0x254>)
 800137e:	f005 f867 	bl	8006450 <HAL_UART_Transmit>
}
 8001382:	bf00      	nop
 8001384:	3770      	adds	r7, #112	@ 0x70
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	240003dc 	.word	0x240003dc
 8001390:	24000000 	.word	0x24000000
 8001394:	24000574 	.word	0x24000574
 8001398:	24000570 	.word	0x24000570
 800139c:	ffff8ad0 	.word	0xffff8ad0
 80013a0:	0800bd78 	.word	0x0800bd78
 80013a4:	2400033c 	.word	0x2400033c
 80013a8:	ffffd8f0 	.word	0xffffd8f0
 80013ac:	24000190 	.word	0x24000190
 80013b0:	240003d8 	.word	0x240003d8
 80013b4:	24000334 	.word	0x24000334
 80013b8:	0800bd90 	.word	0x0800bd90
 80013bc:	0800bd48 	.word	0x0800bd48
 80013c0:	240003e0 	.word	0x240003e0
 80013c4:	0800bda8 	.word	0x0800bda8

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09c      	sub	sp, #112	@ 0x70
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80013ce:	f000 f9fd 	bl	80017cc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fbf3 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f865 	bl	80014a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f000 f91f 	bl	800161c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80013de:	f009 fb17 	bl	800aa10 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80013e2:	f000 f8cf 	bl	8001584 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {

    	CurrentTime = HAL_GetTick();
 80013e6:	f000 fc6f 	bl	8001cc8 <HAL_GetTick>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a27      	ldr	r2, [pc, #156]	@ (800148c <main+0xc4>)
 80013ee:	6013      	str	r3, [r2, #0]

        if (CurrentTime - LastTimer >= 10000)
 80013f0:	4b26      	ldr	r3, [pc, #152]	@ (800148c <main+0xc4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <main+0xc8>)
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013fe:	4293      	cmp	r3, r2
 8001400:	d923      	bls.n	800144a <main+0x82>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", CurrentTime, Scanrate / 10);
 8001402:	4b22      	ldr	r3, [pc, #136]	@ (800148c <main+0xc4>)
 8001404:	6819      	ldr	r1, [r3, #0]
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <main+0xcc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <main+0xd0>)
 800140c:	fb82 0203 	smull	r0, r2, r2, r3
 8001410:	1092      	asrs	r2, r2, #2
 8001412:	17db      	asrs	r3, r3, #31
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	1d38      	adds	r0, r7, #4
 8001418:	460a      	mov	r2, r1
 800141a:	4920      	ldr	r1, [pc, #128]	@ (800149c <main+0xd4>)
 800141c:	f009 ffb4 	bl	800b388 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe ff74 	bl	8000310 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	1d39      	adds	r1, r7, #4
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	481b      	ldr	r0, [pc, #108]	@ (80014a0 <main+0xd8>)
 8001434:	f005 f80c 	bl	8006450 <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 8001438:	f000 fc46 	bl	8001cc8 <HAL_GetTick>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <main+0xc8>)
 8001442:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <main+0xcc>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <main+0xcc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	4a10      	ldr	r2, [pc, #64]	@ (8001494 <main+0xcc>)
 8001452:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

        MatrixScanResult Matrix = MatrixScan();
 8001454:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f929 	bl	80006b0 <MatrixScan>

        if ( Matrix.pinNumber != -1 )
 800145e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d0bf      	beq.n	80013e6 <main+0x1e>
        {
			if ( Matrix.pinState == 1)
 8001466:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800146a:	2b01      	cmp	r3, #1
 800146c:	d106      	bne.n	800147c <main+0xb4>
			{
				PressKeycodes(Matrix.pinNumber);
 800146e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fd3b 	bl	8000eec <PressKeycodes>
				KeycodeSend();
 8001476:	f7ff fd13 	bl	8000ea0 <KeycodeSend>
 800147a:	e7b4      	b.n	80013e6 <main+0x1e>
			}
			else
			{
				ReleaseKeycodes(Matrix.pinNumber);
 800147c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe66 	bl	8001150 <ReleaseKeycodes>
				KeycodeSend();
 8001484:	f7ff fd0c 	bl	8000ea0 <KeycodeSend>
    {
 8001488:	e7ad      	b.n	80013e6 <main+0x1e>
 800148a:	bf00      	nop
 800148c:	24000778 	.word	0x24000778
 8001490:	240003d4 	.word	0x240003d4
 8001494:	240003d0 	.word	0x240003d0
 8001498:	66666667 	.word	0x66666667
 800149c:	0800bdc0 	.word	0x0800bdc0
 80014a0:	2400033c 	.word	0x2400033c

080014a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b09c      	sub	sp, #112	@ 0x70
 80014a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ae:	224c      	movs	r2, #76	@ 0x4c
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f009 ff88 	bl	800b3c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2220      	movs	r2, #32
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f009 ff82 	bl	800b3c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f002 fa01 	bl	80038cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <SystemClock_Config+0xdc>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001580 <SystemClock_Config+0xdc>)
 80014d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014d8:	6193      	str	r3, [r2, #24]
 80014da:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <SystemClock_Config+0xdc>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014e6:	bf00      	nop
 80014e8:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <SystemClock_Config+0xdc>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014f4:	d1f8      	bne.n	80014e8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80014f6:	2321      	movs	r3, #33	@ 0x21
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001508:	2302      	movs	r3, #2
 800150a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800150c:	2305      	movs	r3, #5
 800150e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8001510:	236e      	movs	r3, #110	@ 0x6e
 8001512:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001520:	2308      	movs	r3, #8
 8001522:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001524:	2300      	movs	r3, #0
 8001526:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fa15 	bl	8003960 <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800153c:	f000 f972 	bl	8001824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	233f      	movs	r3, #63	@ 0x3f
 8001542:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001544:	2303      	movs	r3, #3
 8001546:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800154c:	2308      	movs	r3, #8
 800154e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001550:	2340      	movs	r3, #64	@ 0x40
 8001552:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001554:	2340      	movs	r3, #64	@ 0x40
 8001556:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800155c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 800155e:	2350      	movs	r3, #80	@ 0x50
 8001560:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2103      	movs	r1, #3
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fdd4 	bl	8004114 <HAL_RCC_ClockConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001572:	f000 f957 	bl	8001824 <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3770      	adds	r7, #112	@ 0x70
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	58024800 	.word	0x58024800

08001584 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <MX_UART4_Init+0x90>)
 800158a:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <MX_UART4_Init+0x94>)
 800158c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <MX_UART4_Init+0x90>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <MX_UART4_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <MX_UART4_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <MX_UART4_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <MX_UART4_Init+0x90>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <MX_UART4_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <MX_UART4_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <MX_UART4_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_UART4_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_UART4_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015cc:	4811      	ldr	r0, [pc, #68]	@ (8001614 <MX_UART4_Init+0x90>)
 80015ce:	f004 feef 	bl	80063b0 <HAL_UART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 f924 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <MX_UART4_Init+0x90>)
 80015e0:	f006 f889 	bl	80076f6 <HAL_UARTEx_SetTxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015ea:	f000 f91b 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4808      	ldr	r0, [pc, #32]	@ (8001614 <MX_UART4_Init+0x90>)
 80015f2:	f006 f8be 	bl	8007772 <HAL_UARTEx_SetRxFifoThreshold>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 f912 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_UART4_Init+0x90>)
 8001602:	f006 f83f 	bl	8007684 <HAL_UARTEx_DisableFifoMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 f90a 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2400033c 	.word	0x2400033c
 8001618:	40004c00 	.word	0x40004c00

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4b60      	ldr	r3, [pc, #384]	@ (80017b4 <MX_GPIO_Init+0x198>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a5e      	ldr	r2, [pc, #376]	@ (80017b4 <MX_GPIO_Init+0x198>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b5c      	ldr	r3, [pc, #368]	@ (80017b4 <MX_GPIO_Init+0x198>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001650:	4b58      	ldr	r3, [pc, #352]	@ (80017b4 <MX_GPIO_Init+0x198>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001656:	4a57      	ldr	r2, [pc, #348]	@ (80017b4 <MX_GPIO_Init+0x198>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001660:	4b54      	ldr	r3, [pc, #336]	@ (80017b4 <MX_GPIO_Init+0x198>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	4b51      	ldr	r3, [pc, #324]	@ (80017b4 <MX_GPIO_Init+0x198>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001674:	4a4f      	ldr	r2, [pc, #316]	@ (80017b4 <MX_GPIO_Init+0x198>)
 8001676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167e:	4b4d      	ldr	r3, [pc, #308]	@ (80017b4 <MX_GPIO_Init+0x198>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b49      	ldr	r3, [pc, #292]	@ (80017b4 <MX_GPIO_Init+0x198>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001692:	4a48      	ldr	r2, [pc, #288]	@ (80017b4 <MX_GPIO_Init+0x198>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169c:	4b45      	ldr	r3, [pc, #276]	@ (80017b4 <MX_GPIO_Init+0x198>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b42      	ldr	r3, [pc, #264]	@ (80017b4 <MX_GPIO_Init+0x198>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b0:	4a40      	ldr	r2, [pc, #256]	@ (80017b4 <MX_GPIO_Init+0x198>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ba:	4b3e      	ldr	r3, [pc, #248]	@ (80017b4 <MX_GPIO_Init+0x198>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	4b3a      	ldr	r3, [pc, #232]	@ (80017b4 <MX_GPIO_Init+0x198>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	4a39      	ldr	r2, [pc, #228]	@ (80017b4 <MX_GPIO_Init+0x198>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d8:	4b36      	ldr	r3, [pc, #216]	@ (80017b4 <MX_GPIO_Init+0x198>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2104      	movs	r1, #4
 80016ea:	4833      	ldr	r0, [pc, #204]	@ (80017b8 <MX_GPIO_Init+0x19c>)
 80016ec:	f000 fe4c 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80016f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016f4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	482d      	ldr	r0, [pc, #180]	@ (80017bc <MX_GPIO_Init+0x1a0>)
 8001706:	f000 fc97 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800170a:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 800170e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001714:	2301      	movs	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	4828      	ldr	r0, [pc, #160]	@ (80017c0 <MX_GPIO_Init+0x1a4>)
 8001720:	f000 fc8a 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001724:	2304      	movs	r3, #4
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	481f      	ldr	r0, [pc, #124]	@ (80017b8 <MX_GPIO_Init+0x19c>)
 800173c:	f000 fc7c 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001740:	f649 73d0 	movw	r3, #40912	@ 0x9fd0
 8001744:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174a:	2301      	movs	r3, #1
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4818      	ldr	r0, [pc, #96]	@ (80017b8 <MX_GPIO_Init+0x19c>)
 8001756:	f000 fc6f 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB3 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 800175a:	f244 33dc 	movw	r3, #17372	@ 0x43dc
 800175e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001764:	2301      	movs	r3, #1
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	4815      	ldr	r0, [pc, #84]	@ (80017c4 <MX_GPIO_Init+0x1a8>)
 8001770:	f000 fc62 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001774:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <MX_GPIO_Init+0x1a8>)
 800178c:	f000 fc54 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001790:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001794:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4808      	ldr	r0, [pc, #32]	@ (80017c8 <MX_GPIO_Init+0x1ac>)
 80017a6:	f000 fc47 	bl	8002038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	@ 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020000 	.word	0x58020000
 80017bc:	58021000 	.word	0x58021000
 80017c0:	58020800 	.word	0x58020800
 80017c4:	58020400 	.word	0x58020400
 80017c8:	58020c00 	.word	0x58020c00

080017cc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80017d2:	463b      	mov	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80017de:	f000 fbb3 	bl	8001f48 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017e2:	2301      	movs	r3, #1
 80017e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80017ee:	231f      	movs	r3, #31
 80017f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80017f2:	2387      	movs	r3, #135	@ 0x87
 80017f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80017fa:	2300      	movs	r3, #0
 80017fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017fe:	2301      	movs	r3, #1
 8001800:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001802:	2301      	movs	r3, #1
 8001804:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800180e:	463b      	mov	r3, r7
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fbd1 	bl	8001fb8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001816:	2004      	movs	r0, #4
 8001818:	f000 fbae 	bl	8001f78 <HAL_MPU_Enable>

}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <Error_Handler+0x8>

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_MspInit+0x30>)
 8001838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800183c:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <HAL_MspInit+0x30>)
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_MspInit+0x30>)
 8001848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	58024400 	.word	0x58024400

08001864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0b8      	sub	sp, #224	@ 0xe0
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	22b8      	movs	r2, #184	@ 0xb8
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f009 fd9f 	bl	800b3c8 <memset>
  if(huart->Instance==UART4)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a26      	ldr	r2, [pc, #152]	@ (8001928 <HAL_UART_MspInit+0xc4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d145      	bne.n	8001920 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001894:	f04f 0202 	mov.w	r2, #2
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 ffbe 	bl	800482c <HAL_RCCEx_PeriphCLKConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018b6:	f7ff ffb5 	bl	8001824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <HAL_UART_MspInit+0xc8>)
 80018bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018c0:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_UART_MspInit+0xc8>)
 80018c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_UART_MspInit+0xc8>)
 80018cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <HAL_UART_MspInit+0xc8>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018de:	4a13      	ldr	r2, [pc, #76]	@ (800192c <HAL_UART_MspInit+0xc8>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_UART_MspInit+0xc8>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f6:	2303      	movs	r3, #3
 80018f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800190e:	2308      	movs	r3, #8
 8001910:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001918:	4619      	mov	r1, r3
 800191a:	4805      	ldr	r0, [pc, #20]	@ (8001930 <HAL_UART_MspInit+0xcc>)
 800191c:	f000 fb8c 	bl	8002038 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001920:	bf00      	nop
 8001922:	37e0      	adds	r7, #224	@ 0xe0
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40004c00 	.word	0x40004c00
 800192c:	58024400 	.word	0x58024400
 8001930:	58020000 	.word	0x58020000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <NMI_Handler+0x4>

0800193c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <MemManage_Handler+0x4>

0800194c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <UsageFault_Handler+0x4>

0800195c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198a:	f000 f989 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <OTG_HS_IRQHandler+0x10>)
 800199a:	f000 fe4f 	bl	800263c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	24000c84 	.word	0x24000c84

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f009 fcfe 	bl	800b3d8 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	24050000 	.word	0x24050000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	2400079c 	.word	0x2400079c
 8001a10:	240012c8 	.word	0x240012c8

08001a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a18:	4b3e      	ldr	r3, [pc, #248]	@ (8001b14 <SystemInit+0x100>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b14 <SystemInit+0x100>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a28:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <SystemInit+0x104>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	2b06      	cmp	r3, #6
 8001a32:	d807      	bhi.n	8001a44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a34:	4b38      	ldr	r3, [pc, #224]	@ (8001b18 <SystemInit+0x104>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 030f 	bic.w	r3, r3, #15
 8001a3c:	4a36      	ldr	r2, [pc, #216]	@ (8001b18 <SystemInit+0x104>)
 8001a3e:	f043 0307 	orr.w	r3, r3, #7
 8001a42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a44:	4b35      	ldr	r3, [pc, #212]	@ (8001b1c <SystemInit+0x108>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a34      	ldr	r2, [pc, #208]	@ (8001b1c <SystemInit+0x108>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a50:	4b32      	ldr	r3, [pc, #200]	@ (8001b1c <SystemInit+0x108>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a56:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <SystemInit+0x108>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4930      	ldr	r1, [pc, #192]	@ (8001b1c <SystemInit+0x108>)
 8001a5c:	4b30      	ldr	r3, [pc, #192]	@ (8001b20 <SystemInit+0x10c>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a62:	4b2d      	ldr	r3, [pc, #180]	@ (8001b18 <SystemInit+0x104>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <SystemInit+0x104>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 030f 	bic.w	r3, r3, #15
 8001a76:	4a28      	ldr	r2, [pc, #160]	@ (8001b18 <SystemInit+0x104>)
 8001a78:	f043 0307 	orr.w	r3, r3, #7
 8001a7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a7e:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <SystemInit+0x108>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a84:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <SystemInit+0x108>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <SystemInit+0x108>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a90:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <SystemInit+0x108>)
 8001a92:	4a24      	ldr	r2, [pc, #144]	@ (8001b24 <SystemInit+0x110>)
 8001a94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a96:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <SystemInit+0x108>)
 8001a98:	4a23      	ldr	r2, [pc, #140]	@ (8001b28 <SystemInit+0x114>)
 8001a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <SystemInit+0x108>)
 8001a9e:	4a23      	ldr	r2, [pc, #140]	@ (8001b2c <SystemInit+0x118>)
 8001aa0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <SystemInit+0x108>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <SystemInit+0x108>)
 8001aaa:	4a20      	ldr	r2, [pc, #128]	@ (8001b2c <SystemInit+0x118>)
 8001aac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001aae:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <SystemInit+0x108>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <SystemInit+0x108>)
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b2c <SystemInit+0x118>)
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aba:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <SystemInit+0x108>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ac0:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <SystemInit+0x108>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a15      	ldr	r2, [pc, #84]	@ (8001b1c <SystemInit+0x108>)
 8001ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001acc:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <SystemInit+0x108>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <SystemInit+0x108>)
 8001ad4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d113      	bne.n	8001b08 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <SystemInit+0x108>)
 8001ae2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <SystemInit+0x108>)
 8001ae8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <SystemInit+0x11c>)
 8001af2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001af6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <SystemInit+0x108>)
 8001afa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001afe:	4a07      	ldr	r2, [pc, #28]	@ (8001b1c <SystemInit+0x108>)
 8001b00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b04:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00
 8001b18:	52002000 	.word	0x52002000
 8001b1c:	58024400 	.word	0x58024400
 8001b20:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b24:	02020200 	.word	0x02020200
 8001b28:	01ff0000 	.word	0x01ff0000
 8001b2c:	01010280 	.word	0x01010280
 8001b30:	52004000 	.word	0x52004000

08001b34 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <ExitRun0Mode+0x2c>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a08      	ldr	r2, [pc, #32]	@ (8001b60 <ExitRun0Mode+0x2c>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001b44:	bf00      	nop
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <ExitRun0Mode+0x2c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f9      	beq.n	8001b46 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	58024800 	.word	0x58024800

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ba0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001b68:	f7ff ffe4 	bl	8001b34 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b6c:	f7ff ff52 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b96:	f009 fc25 	bl	800b3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7ff fc15 	bl	80013c8 <main>
  bx  lr
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001ba4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ba8:	24000318 	.word	0x24000318
  ldr r2, =_sidata
 8001bac:	0800beac 	.word	0x0800beac
  ldr r2, =_sbss
 8001bb0:	24000318 	.word	0x24000318
  ldr r4, =_ebss
 8001bb4:	240012c4 	.word	0x240012c4

08001bb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC3_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	f000 f980 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bc8:	f002 fc5a 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_Init+0x68>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	4913      	ldr	r1, [pc, #76]	@ (8001c28 <HAL_Init+0x6c>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
 8001be4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001be6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <HAL_Init+0x68>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4a0e      	ldr	r2, [pc, #56]	@ (8001c28 <HAL_Init+0x6c>)
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_Init+0x70>)
 8001bfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c00:	4a0b      	ldr	r2, [pc, #44]	@ (8001c30 <HAL_Init+0x74>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c06:	200f      	movs	r0, #15
 8001c08:	f000 f814 	bl	8001c34 <HAL_InitTick>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e002      	b.n	8001c1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c16:	f7ff fe0b 	bl	8001830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	58024400 	.word	0x58024400
 8001c28:	0800be30 	.word	0x0800be30
 8001c2c:	240001b4 	.word	0x240001b4
 8001c30:	240001b0 	.word	0x240001b0

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_InitTick+0x60>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e021      	b.n	8001c8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <HAL_InitTick+0x64>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <HAL_InitTick+0x60>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f965 	bl	8001f2e <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f92f 	bl	8001ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <HAL_InitTick+0x68>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	240001bc 	.word	0x240001bc
 8001c98:	240001b0 	.word	0x240001b0
 8001c9c:	240001b8 	.word	0x240001b8

08001ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_IncTick+0x20>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	240001bc 	.word	0x240001bc
 8001cc4:	240007a0 	.word	0x240007a0

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	240007a0 	.word	0x240007a0

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffde 	bl	8001cc8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	240001bc 	.word	0x240001bc

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x40>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x40>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00
 8001d6c:	05fa0000 	.word	0x05fa0000

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	@ (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	@ (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	@ (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	@ 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f7ff ff8e 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff29 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff40 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff90 	bl	8001e1c <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5f 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff33 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa4 	bl	8001e84 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f4c:	f3bf 8f5f 	dmb	sy
}
 8001f50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <HAL_MPU_Disable+0x28>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	4a06      	ldr	r2, [pc, #24]	@ (8001f70 <HAL_MPU_Disable+0x28>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_MPU_Disable+0x2c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00
 8001f74:	e000ed90 	.word	0xe000ed90

08001f78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f80:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <HAL_MPU_Enable+0x38>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_MPU_Enable+0x3c>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	4a09      	ldr	r2, [pc, #36]	@ (8001fb4 <HAL_MPU_Enable+0x3c>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f94:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f96:	f3bf 8f4f 	dsb	sy
}
 8001f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f9c:	f3bf 8f6f 	isb	sy
}
 8001fa0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed90 	.word	0xe000ed90
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	785a      	ldrb	r2, [r3, #1]
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fc6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001fd4:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7b1b      	ldrb	r3, [r3, #12]
 8001fe0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7adb      	ldrb	r3, [r3, #11]
 8001fe6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fe8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7a9b      	ldrb	r3, [r3, #10]
 8001fee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ff0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7b5b      	ldrb	r3, [r3, #13]
 8001ff6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ff8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7b9b      	ldrb	r3, [r3, #14]
 8001ffe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002000:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7bdb      	ldrb	r3, [r3, #15]
 8002006:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7a5b      	ldrb	r3, [r3, #9]
 800200e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7a1b      	ldrb	r3, [r3, #8]
 8002016:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002018:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	7812      	ldrb	r2, [r2, #0]
 800201e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002022:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002024:	6113      	str	r3, [r2, #16]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed90 	.word	0xe000ed90

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002046:	4b86      	ldr	r3, [pc, #536]	@ (8002260 <HAL_GPIO_Init+0x228>)
 8002048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800204a:	e18c      	b.n	8002366 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 817e 	beq.w	8002360 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d005      	beq.n	800207c <HAL_GPIO_Init+0x44>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d130      	bne.n	80020de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b2:	2201      	movs	r2, #1
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0201 	and.w	r2, r3, #1
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d017      	beq.n	800211a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d123      	bne.n	800216e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	69b9      	ldr	r1, [r7, #24]
 800216a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0203 	and.w	r2, r3, #3
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80d8 	beq.w	8002360 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <HAL_GPIO_Init+0x22c>)
 80021b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002264 <HAL_GPIO_Init+0x22c>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021c0:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <HAL_GPIO_Init+0x22c>)
 80021c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ce:	4a26      	ldr	r2, [pc, #152]	@ (8002268 <HAL_GPIO_Init+0x230>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	@ (800226c <HAL_GPIO_Init+0x234>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d04a      	beq.n	8002290 <HAL_GPIO_Init+0x258>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002270 <HAL_GPIO_Init+0x238>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02b      	beq.n	800225a <HAL_GPIO_Init+0x222>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1b      	ldr	r2, [pc, #108]	@ (8002274 <HAL_GPIO_Init+0x23c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d025      	beq.n	8002256 <HAL_GPIO_Init+0x21e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a1a      	ldr	r2, [pc, #104]	@ (8002278 <HAL_GPIO_Init+0x240>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01f      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a19      	ldr	r2, [pc, #100]	@ (800227c <HAL_GPIO_Init+0x244>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d019      	beq.n	800224e <HAL_GPIO_Init+0x216>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a18      	ldr	r2, [pc, #96]	@ (8002280 <HAL_GPIO_Init+0x248>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_GPIO_Init+0x212>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a17      	ldr	r2, [pc, #92]	@ (8002284 <HAL_GPIO_Init+0x24c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00d      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a16      	ldr	r2, [pc, #88]	@ (8002288 <HAL_GPIO_Init+0x250>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <HAL_GPIO_Init+0x20a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a15      	ldr	r2, [pc, #84]	@ (800228c <HAL_GPIO_Init+0x254>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_GPIO_Init+0x206>
 800223a:	2309      	movs	r3, #9
 800223c:	e029      	b.n	8002292 <HAL_GPIO_Init+0x25a>
 800223e:	230a      	movs	r3, #10
 8002240:	e027      	b.n	8002292 <HAL_GPIO_Init+0x25a>
 8002242:	2307      	movs	r3, #7
 8002244:	e025      	b.n	8002292 <HAL_GPIO_Init+0x25a>
 8002246:	2306      	movs	r3, #6
 8002248:	e023      	b.n	8002292 <HAL_GPIO_Init+0x25a>
 800224a:	2305      	movs	r3, #5
 800224c:	e021      	b.n	8002292 <HAL_GPIO_Init+0x25a>
 800224e:	2304      	movs	r3, #4
 8002250:	e01f      	b.n	8002292 <HAL_GPIO_Init+0x25a>
 8002252:	2303      	movs	r3, #3
 8002254:	e01d      	b.n	8002292 <HAL_GPIO_Init+0x25a>
 8002256:	2302      	movs	r3, #2
 8002258:	e01b      	b.n	8002292 <HAL_GPIO_Init+0x25a>
 800225a:	2301      	movs	r3, #1
 800225c:	e019      	b.n	8002292 <HAL_GPIO_Init+0x25a>
 800225e:	bf00      	nop
 8002260:	58000080 	.word	0x58000080
 8002264:	58024400 	.word	0x58024400
 8002268:	58000400 	.word	0x58000400
 800226c:	58020000 	.word	0x58020000
 8002270:	58020400 	.word	0x58020400
 8002274:	58020800 	.word	0x58020800
 8002278:	58020c00 	.word	0x58020c00
 800227c:	58021000 	.word	0x58021000
 8002280:	58021400 	.word	0x58021400
 8002284:	58021800 	.word	0x58021800
 8002288:	58021c00 	.word	0x58021c00
 800228c:	58022400 	.word	0x58022400
 8002290:	2300      	movs	r3, #0
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	4093      	lsls	r3, r2
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a2:	4938      	ldr	r1, [pc, #224]	@ (8002384 <HAL_GPIO_Init+0x34c>)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	3301      	adds	r3, #1
 8002364:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	f47f ae6b 	bne.w	800204c <HAL_GPIO_Init+0x14>
  }
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	3724      	adds	r7, #36	@ 0x24
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	58000400 	.word	0x58000400

08002388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
 8002394:	4613      	mov	r3, r2
 8002396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023a4:	e003      	b.n	80023ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	041a      	lsls	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	619a      	str	r2, [r3, #24]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af02      	add	r7, sp, #8
 80023c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0fe      	b.n	80025ca <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f008 fc4d 	bl	800ac80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f005 fb6f 	bl	8007ad6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7c1a      	ldrb	r2, [r3, #16]
 8002400:	f88d 2000 	strb.w	r2, [sp]
 8002404:	3304      	adds	r3, #4
 8002406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002408:	f005 fa40 	bl	800788c <USB_CoreInit>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0d5      	b.n	80025ca <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f005 fb67 	bl	8007af8 <USB_SetCurrentMode>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0c6      	b.n	80025ca <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e04a      	b.n	80024d8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3315      	adds	r3, #21
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3314      	adds	r3, #20
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	b298      	uxth	r0, r3
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	332e      	adds	r3, #46	@ 0x2e
 800247e:	4602      	mov	r2, r0
 8002480:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3318      	adds	r3, #24
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	331c      	adds	r3, #28
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3320      	adds	r3, #32
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3324      	adds	r3, #36	@ 0x24
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	791b      	ldrb	r3, [r3, #4]
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3af      	bcc.n	8002442 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e044      	b.n	8002572 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	3301      	adds	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	791b      	ldrb	r3, [r3, #4]
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	429a      	cmp	r2, r3
 800257a:	d3b5      	bcc.n	80024e8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7c1a      	ldrb	r2, [r3, #16]
 8002584:	f88d 2000 	strb.w	r2, [sp]
 8002588:	3304      	adds	r3, #4
 800258a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258c:	f005 fb00 	bl	8007b90 <USB_DevInit>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2202      	movs	r2, #2
 800259a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e013      	b.n	80025ca <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7b1b      	ldrb	r3, [r3, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f001 f957 	bl	800386c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f006 fb43 	bl	8008c4e <USB_DevDisconnect>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_PCD_Start+0x1c>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e022      	b.n	8002634 <HAL_PCD_Start+0x62>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f005 fa4a 	bl	8007ab4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f006 faf1 	bl	8008c0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b08d      	sub	sp, #52	@ 0x34
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f006 fbaf 	bl	8008db6 <USB_GetMode>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 84b9 	bne.w	8002fd2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f006 fb13 	bl	8008c90 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 84af 	beq.w	8002fd0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f006 fb00 	bl	8008c90 <USB_ReadInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d107      	bne.n	80026aa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f002 0202 	and.w	r2, r2, #2
 80026a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f006 faee 	bl	8008c90 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d161      	bne.n	8002782 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0210 	bic.w	r2, r2, #16
 80026cc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	3304      	adds	r3, #4
 80026ec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	0c5b      	lsrs	r3, r3, #17
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d124      	bne.n	8002744 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d035      	beq.n	8002772 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	6a38      	ldr	r0, [r7, #32]
 800271a:	f006 f925 	bl	8008968 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800272a:	441a      	add	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800273c:	441a      	add	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	615a      	str	r2, [r3, #20]
 8002742:	e016      	b.n	8002772 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	0c5b      	lsrs	r3, r3, #17
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	2b06      	cmp	r3, #6
 800274e:	d110      	bne.n	8002772 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002756:	2208      	movs	r2, #8
 8002758:	4619      	mov	r1, r3
 800275a:	6a38      	ldr	r0, [r7, #32]
 800275c:	f006 f904 	bl	8008968 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276c:	441a      	add	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0210 	orr.w	r2, r2, #16
 8002780:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f006 fa82 	bl	8008c90 <USB_ReadInterrupts>
 800278c:	4603      	mov	r3, r0
 800278e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002792:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002796:	f040 80a7 	bne.w	80028e8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f006 fa87 	bl	8008cb6 <USB_ReadDevAllOutEpInterrupt>
 80027a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027aa:	e099      	b.n	80028e0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 808e 	beq.w	80028d4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f006 faab 	bl	8008d1e <USB_ReadDevOutEPInterrupt>
 80027c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00c      	beq.n	80027ee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e0:	461a      	mov	r2, r3
 80027e2:	2301      	movs	r3, #1
 80027e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 feb9 	bl	8003560 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00c      	beq.n	8002812 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002804:	461a      	mov	r2, r3
 8002806:	2308      	movs	r3, #8
 8002808:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800280a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 ff8f 	bl	8003730 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	4413      	add	r3, r2
 8002824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002828:	461a      	mov	r2, r3
 800282a:	2310      	movs	r3, #16
 800282c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d030      	beq.n	800289a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002840:	2b80      	cmp	r3, #128	@ 0x80
 8002842:	d109      	bne.n	8002858 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002856:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	78db      	ldrb	r3, [r3, #3]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f008 fb7e 	bl	800af84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	2302      	movs	r3, #2
 8002898:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	2320      	movs	r3, #32
 80028b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028cc:	461a      	mov	r2, r3
 80028ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	3301      	adds	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f47f af62 	bne.w	80027ac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f006 f9cf 	bl	8008c90 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028fc:	f040 80db 	bne.w	8002ab6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f006 f9f0 	bl	8008cea <USB_ReadDevAllInEpInterrupt>
 800290a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002910:	e0cd      	b.n	8002aae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80c2 	beq.w	8002aa2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f006 fa16 	bl	8008d5a <USB_ReadDevInEPInterrupt>
 800292e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d057      	beq.n	80029ea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	2201      	movs	r2, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800294e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	69f9      	ldr	r1, [r7, #28]
 8002956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800295a:	4013      	ands	r3, r2
 800295c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800296a:	461a      	mov	r2, r3
 800296c:	2301      	movs	r3, #1
 800296e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	799b      	ldrb	r3, [r3, #6]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d132      	bne.n	80029de <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3320      	adds	r3, #32
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4403      	add	r3, r0
 8002998:	331c      	adds	r3, #28
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4419      	add	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4403      	add	r3, r0
 80029ac:	3320      	adds	r3, #32
 80029ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d113      	bne.n	80029de <HAL_PCD_IRQHandler+0x3a2>
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3324      	adds	r3, #36	@ 0x24
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d108      	bne.n	80029de <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029d6:	461a      	mov	r2, r3
 80029d8:	2101      	movs	r1, #1
 80029da:	f006 fa1f 	bl	8008e1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f008 fa48 	bl	800ae7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a00:	461a      	mov	r2, r3
 8002a02:	2308      	movs	r3, #8
 8002a04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2310      	movs	r3, #16
 8002a20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2340      	movs	r3, #64	@ 0x40
 8002a3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d023      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a4a:	6a38      	ldr	r0, [r7, #32]
 8002a4c:	f005 f9fe 	bl	8007e4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	3310      	adds	r3, #16
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3304      	adds	r3, #4
 8002a62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	78db      	ldrb	r3, [r3, #3]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d108      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f008 fa95 	bl	800afa8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fcd2 	bl	8003446 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f af2e 	bne.w	8002912 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f006 f8e8 	bl	8008c90 <USB_ReadInterrupts>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aca:	d122      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d108      	bne.n	8002afc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002af2:	2100      	movs	r1, #0
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fedd 	bl	80038b4 <HAL_PCDEx_LPM_Callback>
 8002afa:	e002      	b.n	8002b02 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f008 fa33 	bl	800af68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f006 f8ba 	bl	8008c90 <USB_ReadInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b26:	d112      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d102      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f008 f9ef 	bl	800af1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f006 f89c 	bl	8008c90 <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b62:	d121      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002b72:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d111      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b98:	2101      	movs	r1, #1
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fe8a 	bl	80038b4 <HAL_PCDEx_LPM_Callback>
 8002ba0:	e002      	b.n	8002ba8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f008 f9ba 	bl	800af1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f006 f86f 	bl	8008c90 <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bbc:	f040 80b7 	bne.w	8002d2e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2110      	movs	r1, #16
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f005 f936 	bl	8007e4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002be4:	e046      	b.n	8002c74 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bf8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c0a:	0151      	lsls	r1, r2, #5
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	440a      	add	r2, r1
 8002c10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c26:	461a      	mov	r2, r3
 8002c28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c3e:	0151      	lsls	r1, r2, #5
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	440a      	add	r2, r1
 8002c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c5e:	0151      	lsls	r1, r2, #5
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	440a      	add	r2, r1
 8002c64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c70:	3301      	adds	r3, #1
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	791b      	ldrb	r3, [r3, #4]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d3b2      	bcc.n	8002be6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c8e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7bdb      	ldrb	r3, [r3, #15]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d016      	beq.n	8002cca <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cac:	f043 030b 	orr.w	r3, r3, #11
 8002cb0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc2:	f043 030b 	orr.w	r3, r3, #11
 8002cc6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc8:	e015      	b.n	8002cf6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cf0:	f043 030b 	orr.w	r3, r3, #11
 8002cf4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d04:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f006 f87f 	bl	8008e1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f005 ffac 	bl	8008c90 <USB_ReadInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d42:	d123      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f006 f843 	bl	8008dd4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f005 f8f3 	bl	8007f3e <USB_GetDevSpeed>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681c      	ldr	r4, [r3, #0]
 8002d64:	f001 fd06 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8002d68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4620      	mov	r0, r4
 8002d72:	f004 fdfd 	bl	8007970 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f008 f8a7 	bl	800aeca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f005 ff7d 	bl	8008c90 <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d10a      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f008 f884 	bl	800aeae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 0208 	and.w	r2, r2, #8
 8002db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f005 ff68 	bl	8008c90 <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc6:	2b80      	cmp	r3, #128	@ 0x80
 8002dc8:	d123      	bne.n	8002e12 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dda:	e014      	b.n	8002e06 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 faf2 	bl	80033e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	3301      	adds	r3, #1
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	791b      	ldrb	r3, [r3, #4]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d3e4      	bcc.n	8002ddc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 ff3a 	bl	8008c90 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e26:	d13c      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e28:	2301      	movs	r3, #1
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e2c:	e02b      	b.n	8002e86 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d115      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	da12      	bge.n	8002e80 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	3317      	adds	r3, #23
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fab2 	bl	80033e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	3301      	adds	r3, #1
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	791b      	ldrb	r3, [r3, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d3cd      	bcc.n	8002e2e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f005 fef2 	bl	8008c90 <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eb6:	d156      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb8:	2301      	movs	r3, #1
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebc:	e045      	b.n	8002f4a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d12e      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ee6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	da2b      	bge.n	8002f44 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	0c1a      	lsrs	r2, r3, #16
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ef6:	4053      	eors	r3, r2
 8002ef8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d121      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f40:	6053      	str	r3, [r2, #4]
            break;
 8002f42:	e008      	b.n	8002f56 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	3301      	adds	r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d3b3      	bcc.n	8002ebe <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f005 fe90 	bl	8008c90 <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7a:	d10a      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f008 f825 	bl	800afcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f005 fe7a 	bl	8008c90 <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d115      	bne.n	8002fd2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f008 f815 	bl	800afe8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	e000      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x996>
      return;
 8002fd0:	bf00      	nop
    }
  }
}
 8002fd2:	3734      	adds	r7, #52	@ 0x34
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd90      	pop	{r4, r7, pc}

08002fd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_PCD_SetAddress+0x1a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e012      	b.n	8003018 <HAL_PCD_SetAddress+0x40>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f005 fdd9 	bl	8008bc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	70fb      	strb	r3, [r7, #3]
 8003032:	460b      	mov	r3, r1
 8003034:	803b      	strh	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800303e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da0f      	bge.n	8003066 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	3310      	adds	r3, #16
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	3304      	adds	r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	705a      	strb	r2, [r3, #1]
 8003064:	e00f      	b.n	8003086 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	3304      	adds	r3, #4
 800307e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003092:	883b      	ldrh	r3, [r7, #0]
 8003094:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	78ba      	ldrb	r2, [r7, #2]
 80030a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030b4:	78bb      	ldrb	r3, [r7, #2]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d102      	bne.n	80030c0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_PCD_EP_Open+0xae>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e00e      	b.n	80030ec <HAL_PCD_EP_Open+0xcc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	4618      	mov	r0, r3
 80030de:	f004 ff53 	bl	8007f88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80030ea:	7afb      	ldrb	r3, [r7, #11]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003104:	2b00      	cmp	r3, #0
 8003106:	da0f      	bge.n	8003128 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	f003 020f 	and.w	r2, r3, #15
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	3310      	adds	r3, #16
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	705a      	strb	r2, [r3, #1]
 8003126:	e00f      	b.n	8003148 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	f003 020f 	and.w	r2, r3, #15
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	b2da      	uxtb	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_PCD_EP_Close+0x6e>
 800315e:	2302      	movs	r3, #2
 8003160:	e00e      	b.n	8003180 <HAL_PCD_EP_Close+0x8c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68f9      	ldr	r1, [r7, #12]
 8003170:	4618      	mov	r0, r3
 8003172:	f004 ff91 	bl	8008098 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	460b      	mov	r3, r1
 8003196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003198:	7afb      	ldrb	r3, [r7, #11]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2200      	movs	r2, #0
 80031c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ca:	7afb      	ldrb	r3, [r7, #11]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	799b      	ldrb	r3, [r3, #6]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	799b      	ldrb	r3, [r3, #6]
 80031ec:	461a      	mov	r2, r3
 80031ee:	6979      	ldr	r1, [r7, #20]
 80031f0:	f005 f82e 	bl	8008250 <USB_EPStartXfer>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	460b      	mov	r3, r1
 800320c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320e:	7afb      	ldrb	r3, [r7, #11]
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	3310      	adds	r3, #16
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2201      	movs	r2, #1
 800323c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800323e:	7afb      	ldrb	r3, [r7, #11]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	b2da      	uxtb	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	799b      	ldrb	r3, [r3, #6]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	799b      	ldrb	r3, [r3, #6]
 8003260:	461a      	mov	r2, r3
 8003262:	6979      	ldr	r1, [r7, #20]
 8003264:	f004 fff4 	bl	8008250 <USB_EPStartXfer>

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	7912      	ldrb	r2, [r2, #4]
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e04f      	b.n	8003330 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003294:	2b00      	cmp	r3, #0
 8003296:	da0f      	bge.n	80032b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 020f 	and.w	r2, r3, #15
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	3310      	adds	r3, #16
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	3304      	adds	r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	705a      	strb	r2, [r3, #1]
 80032b6:	e00d      	b.n	80032d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	3304      	adds	r3, #4
 80032cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_PCD_EP_SetStall+0x82>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e01d      	b.n	8003330 <HAL_PCD_EP_SetStall+0xbe>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68f9      	ldr	r1, [r7, #12]
 8003302:	4618      	mov	r0, r3
 8003304:	f005 fb88 	bl	8008a18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	7999      	ldrb	r1, [r3, #6]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003320:	461a      	mov	r2, r3
 8003322:	f005 fd7b 	bl	8008e1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	7912      	ldrb	r2, [r2, #4]
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e042      	b.n	80033dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800335a:	2b00      	cmp	r3, #0
 800335c:	da0f      	bge.n	800337e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3310      	adds	r3, #16
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	3304      	adds	r3, #4
 8003374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	705a      	strb	r2, [r3, #1]
 800337c:	e00f      	b.n	800339e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	f003 020f 	and.w	r2, r3, #15
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	3304      	adds	r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_PCD_EP_ClrStall+0x86>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e00e      	b.n	80033dc <HAL_PCD_EP_ClrStall+0xa4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68f9      	ldr	r1, [r7, #12]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f005 fb91 	bl	8008af4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da0c      	bge.n	8003412 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 020f 	and.w	r2, r3, #15
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	3310      	adds	r3, #16
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4413      	add	r3, r2
 800340c:	3304      	adds	r3, #4
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e00c      	b.n	800342c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 020f 	and.w	r2, r3, #15
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	3304      	adds	r3, #4
 800342a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68f9      	ldr	r1, [r7, #12]
 8003432:	4618      	mov	r0, r3
 8003434:	f005 f9b0 	bl	8008798 <USB_EPStopXfer>
 8003438:	4603      	mov	r3, r0
 800343a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800343c:	7afb      	ldrb	r3, [r7, #11]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b08a      	sub	sp, #40	@ 0x28
 800344a:	af02      	add	r7, sp, #8
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	3310      	adds	r3, #16
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	429a      	cmp	r2, r3
 8003478:	d901      	bls.n	800347e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e06b      	b.n	8003556 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	429a      	cmp	r2, r3
 8003492:	d902      	bls.n	800349a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3303      	adds	r3, #3
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034a2:	e02a      	b.n	80034fa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d902      	bls.n	80034c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	3303      	adds	r3, #3
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	68d9      	ldr	r1, [r3, #12]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4603      	mov	r3, r0
 80034dc:	6978      	ldr	r0, [r7, #20]
 80034de:	f005 fa05 	bl	80088ec <USB_WritePacket>

    ep->xfer_buff  += len;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	441a      	add	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	441a      	add	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	429a      	cmp	r2, r3
 800350e:	d809      	bhi.n	8003524 <PCD_WriteEmptyTxFifo+0xde>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003518:	429a      	cmp	r2, r3
 800351a:	d203      	bcs.n	8003524 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1bf      	bne.n	80034a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	d811      	bhi.n	8003554 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	2201      	movs	r2, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	43db      	mvns	r3, r3
 800354a:	6939      	ldr	r1, [r7, #16]
 800354c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003550:	4013      	ands	r3, r2
 8003552:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	333c      	adds	r3, #60	@ 0x3c
 8003578:	3304      	adds	r3, #4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	799b      	ldrb	r3, [r3, #6]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d17b      	bne.n	800368e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	4a61      	ldr	r2, [pc, #388]	@ (8003728 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	f240 80b9 	bls.w	800371c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80b3 	beq.w	800371c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c2:	461a      	mov	r2, r3
 80035c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035c8:	6093      	str	r3, [r2, #8]
 80035ca:	e0a7      	b.n	800371c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e2:	461a      	mov	r2, r3
 80035e4:	2320      	movs	r3, #32
 80035e6:	6093      	str	r3, [r2, #8]
 80035e8:	e098      	b.n	800371c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f040 8093 	bne.w	800371c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003728 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d90f      	bls.n	800361e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003614:	461a      	mov	r2, r3
 8003616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800361a:	6093      	str	r3, [r2, #8]
 800361c:	e07e      	b.n	800371c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	3304      	adds	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	0159      	lsls	r1, r3, #5
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	440b      	add	r3, r1
 8003640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364a:	1ad2      	subs	r2, r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d114      	bne.n	8003680 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003668:	461a      	mov	r2, r3
 800366a:	2101      	movs	r1, #1
 800366c:	f005 fbd6 	bl	8008e1c <USB_EP0_OutStart>
 8003670:	e006      	b.n	8003680 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	441a      	add	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f007 fbdc 	bl	800ae44 <HAL_PCD_DataOutStageCallback>
 800368c:	e046      	b.n	800371c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	4a26      	ldr	r2, [pc, #152]	@ (800372c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d124      	bne.n	80036e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ac:	461a      	mov	r2, r3
 80036ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036b2:	6093      	str	r3, [r2, #8]
 80036b4:	e032      	b.n	800371c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036cc:	461a      	mov	r2, r3
 80036ce:	2320      	movs	r3, #32
 80036d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	4619      	mov	r1, r3
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f007 fbb3 	bl	800ae44 <HAL_PCD_DataOutStageCallback>
 80036de:	e01d      	b.n	800371c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d114      	bne.n	8003710 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003708:	461a      	mov	r2, r3
 800370a:	2100      	movs	r1, #0
 800370c:	f005 fb86 	bl	8008e1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f007 fb94 	bl	800ae44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	4f54300a 	.word	0x4f54300a
 800372c:	4f54310a 	.word	0x4f54310a

08003730 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	333c      	adds	r3, #60	@ 0x3c
 8003748:	3304      	adds	r3, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a15      	ldr	r2, [pc, #84]	@ (80037b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d90e      	bls.n	8003784 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003782:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f007 fb4b 	bl	800ae20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d90c      	bls.n	80037ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	799b      	ldrb	r3, [r3, #6]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d108      	bne.n	80037ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037a4:	461a      	mov	r2, r3
 80037a6:	2101      	movs	r1, #1
 80037a8:	f005 fb38 	bl	8008e1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	4f54300a 	.word	0x4f54300a

080037bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	70fb      	strb	r3, [r7, #3]
 80037c8:	4613      	mov	r3, r2
 80037ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037da:	883b      	ldrh	r3, [r7, #0]
 80037dc:	0419      	lsls	r1, r3, #16
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80037e8:	e028      	b.n	800383c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4413      	add	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e00d      	b.n	800381a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	3340      	adds	r3, #64	@ 0x40
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	4413      	add	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	3301      	adds	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	3b01      	subs	r3, #1
 8003820:	429a      	cmp	r2, r3
 8003822:	d3ec      	bcc.n	80037fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003824:	883b      	ldrh	r3, [r7, #0]
 8003826:	0418      	lsls	r0, r3, #16
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	3b01      	subs	r3, #1
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	4302      	orrs	r2, r0
 8003834:	3340      	adds	r3, #64	@ 0x40
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800389a:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800389c:	4313      	orrs	r3, r2
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	10000003 	.word	0x10000003

080038b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038d4:	4b19      	ldr	r3, [pc, #100]	@ (800393c <HAL_PWREx_ConfigSupply+0x70>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d00a      	beq.n	80038f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038e0:	4b16      	ldr	r3, [pc, #88]	@ (800393c <HAL_PWREx_ConfigSupply+0x70>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d001      	beq.n	80038f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e01f      	b.n	8003932 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e01d      	b.n	8003932 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038f6:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_PWREx_ConfigSupply+0x70>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 0207 	bic.w	r2, r3, #7
 80038fe:	490f      	ldr	r1, [pc, #60]	@ (800393c <HAL_PWREx_ConfigSupply+0x70>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4313      	orrs	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003906:	f7fe f9df 	bl	8001cc8 <HAL_GetTick>
 800390a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800390c:	e009      	b.n	8003922 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800390e:	f7fe f9db 	bl	8001cc8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800391c:	d901      	bls.n	8003922 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e007      	b.n	8003932 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_PWREx_ConfigSupply+0x70>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392e:	d1ee      	bne.n	800390e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	58024800 	.word	0x58024800

08003940 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a04      	ldr	r2, [pc, #16]	@ (800395c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800394e:	60d3      	str	r3, [r2, #12]
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	58024800 	.word	0x58024800

08003960 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	@ 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e3c8      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8087 	beq.w	8003a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003980:	4b88      	ldr	r3, [pc, #544]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800398a:	4b86      	ldr	r3, [pc, #536]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003992:	2b10      	cmp	r3, #16
 8003994:	d007      	beq.n	80039a6 <HAL_RCC_OscConfig+0x46>
 8003996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003998:	2b18      	cmp	r3, #24
 800399a:	d110      	bne.n	80039be <HAL_RCC_OscConfig+0x5e>
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d10b      	bne.n	80039be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06c      	beq.n	8003a8c <HAL_RCC_OscConfig+0x12c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d168      	bne.n	8003a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e3a2      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x76>
 80039c8:	4b76      	ldr	r3, [pc, #472]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a75      	ldr	r2, [pc, #468]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 80039ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e02e      	b.n	8003a34 <HAL_RCC_OscConfig+0xd4>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x98>
 80039de:	4b71      	ldr	r3, [pc, #452]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a70      	ldr	r2, [pc, #448]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 80039e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b6e      	ldr	r3, [pc, #440]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6d      	ldr	r2, [pc, #436]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 80039f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e01d      	b.n	8003a34 <HAL_RCC_OscConfig+0xd4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0xbc>
 8003a02:	4b68      	ldr	r3, [pc, #416]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a67      	ldr	r2, [pc, #412]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4b65      	ldr	r3, [pc, #404]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a64      	ldr	r2, [pc, #400]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCC_OscConfig+0xd4>
 8003a1c:	4b61      	ldr	r3, [pc, #388]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a60      	ldr	r2, [pc, #384]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b5e      	ldr	r3, [pc, #376]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d013      	beq.n	8003a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe f944 	bl	8001cc8 <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fe f940 	bl	8001cc8 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	@ 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e356      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a56:	4b53      	ldr	r3, [pc, #332]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0xe4>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fe f930 	bl	8001cc8 <HAL_GetTick>
 8003a68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fe f92c 	bl	8001cc8 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	@ 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e342      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x10c>
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 808c 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9c:	4b41      	ldr	r3, [pc, #260]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aaa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x162>
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b18      	cmp	r3, #24
 8003ab6:	d137      	bne.n	8003b28 <HAL_RCC_OscConfig+0x1c8>
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d132      	bne.n	8003b28 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac2:	4b38      	ldr	r3, [pc, #224]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x17a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e314      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ada:	4b32      	ldr	r3, [pc, #200]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 0219 	bic.w	r2, r3, #25
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	492f      	ldr	r1, [pc, #188]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe f8ec 	bl	8001cc8 <HAL_GetTick>
 8003af0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af4:	f7fe f8e8 	bl	8001cc8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e2fe      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b06:	4b27      	ldr	r3, [pc, #156]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b24      	ldr	r3, [pc, #144]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	4920      	ldr	r1, [pc, #128]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b26:	e045      	b.n	8003bb4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d026      	beq.n	8003b7e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b30:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 0219 	bic.w	r2, r3, #25
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4919      	ldr	r1, [pc, #100]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fe f8c1 	bl	8001cc8 <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7fe f8bd 	bl	8001cc8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e2d3      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	490b      	ldr	r1, [pc, #44]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
 8003b7c:	e01a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a08      	ldr	r2, [pc, #32]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fe f89d 	bl	8001cc8 <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b92:	f7fe f899 	bl	8001cc8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d903      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e2af      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
 8003ba4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ba8:	4b96      	ldr	r3, [pc, #600]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ee      	bne.n	8003b92 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d06a      	beq.n	8003c96 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc0:	4b90      	ldr	r3, [pc, #576]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bca:	4b8e      	ldr	r3, [pc, #568]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d007      	beq.n	8003be6 <HAL_RCC_OscConfig+0x286>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b18      	cmp	r3, #24
 8003bda:	d11b      	bne.n	8003c14 <HAL_RCC_OscConfig+0x2b4>
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d116      	bne.n	8003c14 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003be6:	4b87      	ldr	r3, [pc, #540]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_RCC_OscConfig+0x29e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b80      	cmp	r3, #128	@ 0x80
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e282      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bfe:	4b81      	ldr	r3, [pc, #516]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	061b      	lsls	r3, r3, #24
 8003c0c:	497d      	ldr	r1, [pc, #500]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c12:	e040      	b.n	8003c96 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d023      	beq.n	8003c64 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c1c:	4b79      	ldr	r3, [pc, #484]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a78      	ldr	r2, [pc, #480]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe f84e 	bl	8001cc8 <HAL_GetTick>
 8003c2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c30:	f7fe f84a 	bl	8001cc8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e260      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c42:	4b70      	ldr	r3, [pc, #448]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	061b      	lsls	r3, r3, #24
 8003c5c:	4969      	ldr	r1, [pc, #420]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60cb      	str	r3, [r1, #12]
 8003c62:	e018      	b.n	8003c96 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c64:	4b67      	ldr	r3, [pc, #412]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a66      	ldr	r2, [pc, #408]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe f82a 	bl	8001cc8 <HAL_GetTick>
 8003c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c78:	f7fe f826 	bl	8001cc8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e23c      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d036      	beq.n	8003d10 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d019      	beq.n	8003cde <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003caa:	4b56      	ldr	r3, [pc, #344]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cae:	4a55      	ldr	r2, [pc, #340]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fe f807 	bl	8001cc8 <HAL_GetTick>
 8003cba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbe:	f7fe f803 	bl	8001cc8 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e219      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x35e>
 8003cdc:	e018      	b.n	8003d10 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cde:	4b49      	ldr	r3, [pc, #292]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce2:	4a48      	ldr	r2, [pc, #288]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fd ffed 	bl	8001cc8 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7fd ffe9 	bl	8001cc8 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1ff      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d04:	4b3f      	ldr	r3, [pc, #252]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d036      	beq.n	8003d8a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d019      	beq.n	8003d58 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d24:	4b37      	ldr	r3, [pc, #220]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a36      	ldr	r2, [pc, #216]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003d2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d30:	f7fd ffca 	bl	8001cc8 <HAL_GetTick>
 8003d34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d38:	f7fd ffc6 	bl	8001cc8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1dc      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x3d8>
 8003d56:	e018      	b.n	8003d8a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d58:	4b2a      	ldr	r3, [pc, #168]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a29      	ldr	r2, [pc, #164]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003d5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d64:	f7fd ffb0 	bl	8001cc8 <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d6c:	f7fd ffac 	bl	8001cc8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1c2      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d7e:	4b21      	ldr	r3, [pc, #132]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8086 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <HAL_RCC_OscConfig+0x4a8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e08 <HAL_RCC_OscConfig+0x4a8>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da4:	f7fd ff90 	bl	8001cc8 <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fd ff8c 	bl	8001cc8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	@ 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1a2      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dbe:	4b12      	ldr	r3, [pc, #72]	@ (8003e08 <HAL_RCC_OscConfig+0x4a8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCC_OscConfig+0x480>
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e6>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d111      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4ac>
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	4a05      	ldr	r2, [pc, #20]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df4:	4b03      	ldr	r3, [pc, #12]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	4a02      	ldr	r2, [pc, #8]	@ (8003e04 <HAL_RCC_OscConfig+0x4a4>)
 8003dfa:	f023 0304 	bic.w	r3, r3, #4
 8003dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e00:	e021      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e6>
 8003e02:	bf00      	nop
 8003e04:	58024400 	.word	0x58024400
 8003e08:	58024800 	.word	0x58024800
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4ce>
 8003e14:	4b83      	ldr	r3, [pc, #524]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	4a82      	ldr	r2, [pc, #520]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e20:	4b80      	ldr	r3, [pc, #512]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	4a7f      	ldr	r2, [pc, #508]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e6>
 8003e2e:	4b7d      	ldr	r3, [pc, #500]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e32:	4a7c      	ldr	r2, [pc, #496]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a79      	ldr	r2, [pc, #484]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d015      	beq.n	8003e7a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fd ff3b 	bl	8001cc8 <HAL_GetTick>
 8003e52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd ff37 	bl	8001cc8 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e14b      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e6c:	4b6d      	ldr	r3, [pc, #436]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCC_OscConfig+0x4f6>
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fd ff25 	bl	8001cc8 <HAL_GetTick>
 8003e7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd ff21 	bl	8001cc8 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e135      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e98:	4b62      	ldr	r3, [pc, #392]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 812a 	beq.w	8004102 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003eae:	4b5d      	ldr	r3, [pc, #372]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eb6:	2b18      	cmp	r3, #24
 8003eb8:	f000 80ba 	beq.w	8004030 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	f040 8095 	bne.w	8003ff0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec6:	4b57      	ldr	r3, [pc, #348]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a56      	ldr	r2, [pc, #344]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003ecc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7fd fef9 	bl	8001cc8 <HAL_GetTick>
 8003ed6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fd fef5 	bl	8001cc8 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e10b      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eec:	4b4d      	ldr	r3, [pc, #308]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003efa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003efc:	4b4a      	ldr	r3, [pc, #296]	@ (8004028 <HAL_RCC_OscConfig+0x6c8>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f08:	0112      	lsls	r2, r2, #4
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	4945      	ldr	r1, [pc, #276]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	3b01      	subs	r3, #1
 8003f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f20:	3b01      	subs	r3, #1
 8003f22:	025b      	lsls	r3, r3, #9
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f42:	4938      	ldr	r1, [pc, #224]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f48:	4b36      	ldr	r3, [pc, #216]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4c:	4a35      	ldr	r2, [pc, #212]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f54:	4b33      	ldr	r3, [pc, #204]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f58:	4b34      	ldr	r3, [pc, #208]	@ (800402c <HAL_RCC_OscConfig+0x6cc>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f60:	00d2      	lsls	r2, r2, #3
 8003f62:	4930      	ldr	r1, [pc, #192]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f68:	4b2e      	ldr	r3, [pc, #184]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	f023 020c 	bic.w	r2, r3, #12
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	492b      	ldr	r1, [pc, #172]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7e:	f023 0202 	bic.w	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	4927      	ldr	r1, [pc, #156]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f8c:	4b25      	ldr	r3, [pc, #148]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	4a24      	ldr	r2, [pc, #144]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f98:	4b22      	ldr	r3, [pc, #136]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	4a21      	ldr	r2, [pc, #132]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003faa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b19      	ldr	r3, [pc, #100]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a18      	ldr	r2, [pc, #96]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fe7e 	bl	8001cc8 <HAL_GetTick>
 8003fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd fe7a 	bl	8001cc8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e090      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fe2:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x670>
 8003fee:	e088      	b.n	8004102 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8003ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd fe64 	bl	8001cc8 <HAL_GetTick>
 8004000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fd fe60 	bl	8001cc8 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e076      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004016:	4b03      	ldr	r3, [pc, #12]	@ (8004024 <HAL_RCC_OscConfig+0x6c4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x6a4>
 8004022:	e06e      	b.n	8004102 <HAL_RCC_OscConfig+0x7a2>
 8004024:	58024400 	.word	0x58024400
 8004028:	fffffc0c 	.word	0xfffffc0c
 800402c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004030:	4b36      	ldr	r3, [pc, #216]	@ (800410c <HAL_RCC_OscConfig+0x7ac>)
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004036:	4b35      	ldr	r3, [pc, #212]	@ (800410c <HAL_RCC_OscConfig+0x7ac>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	2b01      	cmp	r3, #1
 8004042:	d031      	beq.n	80040a8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f003 0203 	and.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d12a      	bne.n	80040a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d122      	bne.n	80040a8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d11a      	bne.n	80040a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0a5b      	lsrs	r3, r3, #9
 8004076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004080:	429a      	cmp	r2, r3
 8004082:	d111      	bne.n	80040a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004090:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d108      	bne.n	80040a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	0e1b      	lsrs	r3, r3, #24
 800409a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e02b      	b.n	8004104 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040ac:	4b17      	ldr	r3, [pc, #92]	@ (800410c <HAL_RCC_OscConfig+0x7ac>)
 80040ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d01f      	beq.n	8004102 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040c2:	4b12      	ldr	r3, [pc, #72]	@ (800410c <HAL_RCC_OscConfig+0x7ac>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	4a11      	ldr	r2, [pc, #68]	@ (800410c <HAL_RCC_OscConfig+0x7ac>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ce:	f7fd fdfb 	bl	8001cc8 <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040d4:	bf00      	nop
 80040d6:	f7fd fdf7 	bl	8001cc8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	4293      	cmp	r3, r2
 80040e0:	d0f9      	beq.n	80040d6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040e2:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <HAL_RCC_OscConfig+0x7ac>)
 80040e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040ee:	00d2      	lsls	r2, r2, #3
 80040f0:	4906      	ldr	r1, [pc, #24]	@ (800410c <HAL_RCC_OscConfig+0x7ac>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040f6:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_RCC_OscConfig+0x7ac>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	4a04      	ldr	r2, [pc, #16]	@ (800410c <HAL_RCC_OscConfig+0x7ac>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3730      	adds	r7, #48	@ 0x30
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	58024400 	.word	0x58024400
 8004110:	ffff0007 	.word	0xffff0007

08004114 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e19c      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004128:	4b8a      	ldr	r3, [pc, #552]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d910      	bls.n	8004158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b87      	ldr	r3, [pc, #540]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 020f 	bic.w	r2, r3, #15
 800413e:	4985      	ldr	r1, [pc, #532]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b83      	ldr	r3, [pc, #524]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e184      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	4b7b      	ldr	r3, [pc, #492]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004170:	429a      	cmp	r2, r3
 8004172:	d908      	bls.n	8004186 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004174:	4b78      	ldr	r3, [pc, #480]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	4975      	ldr	r1, [pc, #468]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004182:	4313      	orrs	r3, r2
 8004184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d010      	beq.n	80041b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	4b70      	ldr	r3, [pc, #448]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800419e:	429a      	cmp	r2, r3
 80041a0:	d908      	bls.n	80041b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	496a      	ldr	r1, [pc, #424]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	4b64      	ldr	r3, [pc, #400]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d908      	bls.n	80041e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041d0:	4b61      	ldr	r3, [pc, #388]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	495e      	ldr	r1, [pc, #376]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d010      	beq.n	8004210 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	4b59      	ldr	r3, [pc, #356]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d908      	bls.n	8004210 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041fe:	4b56      	ldr	r3, [pc, #344]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4953      	ldr	r1, [pc, #332]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 800420c:	4313      	orrs	r3, r2
 800420e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	429a      	cmp	r2, r3
 800422a:	d908      	bls.n	800423e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f023 020f 	bic.w	r2, r3, #15
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4947      	ldr	r1, [pc, #284]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 800423a:	4313      	orrs	r3, r2
 800423c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d055      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800424a:	4b43      	ldr	r3, [pc, #268]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	4940      	ldr	r1, [pc, #256]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004258:	4313      	orrs	r3, r2
 800425a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004264:	4b3c      	ldr	r3, [pc, #240]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d121      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0f6      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d107      	bne.n	800428c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800427c:	4b36      	ldr	r3, [pc, #216]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d115      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0ea      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004294:	4b30      	ldr	r3, [pc, #192]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0de      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0d6      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b4:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f023 0207 	bic.w	r2, r3, #7
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4925      	ldr	r1, [pc, #148]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c6:	f7fd fcff 	bl	8001cc8 <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ce:	f7fd fcfb 	bl	8001cc8 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0be      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d1eb      	bne.n	80042ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d010      	beq.n	8004324 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	4b14      	ldr	r3, [pc, #80]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	429a      	cmp	r2, r3
 8004310:	d208      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004312:	4b11      	ldr	r3, [pc, #68]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	490e      	ldr	r1, [pc, #56]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004320:	4313      	orrs	r3, r2
 8004322:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d214      	bcs.n	800435c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 020f 	bic.w	r2, r3, #15
 800433a:	4906      	ldr	r1, [pc, #24]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b04      	ldr	r3, [pc, #16]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e086      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
 8004354:	52002000 	.word	0x52002000
 8004358:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d010      	beq.n	800438a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	4b3f      	ldr	r3, [pc, #252]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004374:	429a      	cmp	r2, r3
 8004376:	d208      	bcs.n	800438a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004378:	4b3c      	ldr	r3, [pc, #240]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	4939      	ldr	r1, [pc, #228]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 8004386:	4313      	orrs	r3, r2
 8004388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d010      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	4b34      	ldr	r3, [pc, #208]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d208      	bcs.n	80043b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043a6:	4b31      	ldr	r3, [pc, #196]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	492e      	ldr	r1, [pc, #184]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d010      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	4b28      	ldr	r3, [pc, #160]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d208      	bcs.n	80043e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043d4:	4b25      	ldr	r3, [pc, #148]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4922      	ldr	r1, [pc, #136]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d010      	beq.n	8004414 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	4b1d      	ldr	r3, [pc, #116]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043fe:	429a      	cmp	r2, r3
 8004400:	d208      	bcs.n	8004414 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004402:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4917      	ldr	r1, [pc, #92]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 8004410:	4313      	orrs	r3, r2
 8004412:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004414:	f000 f834 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b14      	ldr	r3, [pc, #80]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	4912      	ldr	r1, [pc, #72]	@ (8004470 <HAL_RCC_ClockConfig+0x35c>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004432:	4b0e      	ldr	r3, [pc, #56]	@ (800446c <HAL_RCC_ClockConfig+0x358>)
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	4a0d      	ldr	r2, [pc, #52]	@ (8004470 <HAL_RCC_ClockConfig+0x35c>)
 800443c:	5cd3      	ldrb	r3, [r2, r3]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
 8004448:	4a0a      	ldr	r2, [pc, #40]	@ (8004474 <HAL_RCC_ClockConfig+0x360>)
 800444a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800444c:	4a0a      	ldr	r2, [pc, #40]	@ (8004478 <HAL_RCC_ClockConfig+0x364>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004452:	4b0a      	ldr	r3, [pc, #40]	@ (800447c <HAL_RCC_ClockConfig+0x368>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fbec 	bl	8001c34 <HAL_InitTick>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	58024400 	.word	0x58024400
 8004470:	0800be30 	.word	0x0800be30
 8004474:	240001b4 	.word	0x240001b4
 8004478:	240001b0 	.word	0x240001b0
 800447c:	240001b8 	.word	0x240001b8

08004480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	@ 0x24
 8004484:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004486:	4bb3      	ldr	r3, [pc, #716]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800448e:	2b18      	cmp	r3, #24
 8004490:	f200 8155 	bhi.w	800473e <HAL_RCC_GetSysClockFreq+0x2be>
 8004494:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	08004501 	.word	0x08004501
 80044a0:	0800473f 	.word	0x0800473f
 80044a4:	0800473f 	.word	0x0800473f
 80044a8:	0800473f 	.word	0x0800473f
 80044ac:	0800473f 	.word	0x0800473f
 80044b0:	0800473f 	.word	0x0800473f
 80044b4:	0800473f 	.word	0x0800473f
 80044b8:	0800473f 	.word	0x0800473f
 80044bc:	08004527 	.word	0x08004527
 80044c0:	0800473f 	.word	0x0800473f
 80044c4:	0800473f 	.word	0x0800473f
 80044c8:	0800473f 	.word	0x0800473f
 80044cc:	0800473f 	.word	0x0800473f
 80044d0:	0800473f 	.word	0x0800473f
 80044d4:	0800473f 	.word	0x0800473f
 80044d8:	0800473f 	.word	0x0800473f
 80044dc:	0800452d 	.word	0x0800452d
 80044e0:	0800473f 	.word	0x0800473f
 80044e4:	0800473f 	.word	0x0800473f
 80044e8:	0800473f 	.word	0x0800473f
 80044ec:	0800473f 	.word	0x0800473f
 80044f0:	0800473f 	.word	0x0800473f
 80044f4:	0800473f 	.word	0x0800473f
 80044f8:	0800473f 	.word	0x0800473f
 80044fc:	08004533 	.word	0x08004533
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004500:	4b94      	ldr	r3, [pc, #592]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800450c:	4b91      	ldr	r3, [pc, #580]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	4a90      	ldr	r2, [pc, #576]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
 800451c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800451e:	e111      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004520:	4b8d      	ldr	r3, [pc, #564]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004522:	61bb      	str	r3, [r7, #24]
      break;
 8004524:	e10e      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004526:	4b8d      	ldr	r3, [pc, #564]	@ (800475c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004528:	61bb      	str	r3, [r7, #24]
      break;
 800452a:	e10b      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800452c:	4b8c      	ldr	r3, [pc, #560]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800452e:	61bb      	str	r3, [r7, #24]
      break;
 8004530:	e108      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004532:	4b88      	ldr	r3, [pc, #544]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800453c:	4b85      	ldr	r3, [pc, #532]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004546:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004548:	4b82      	ldr	r3, [pc, #520]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004552:	4b80      	ldr	r3, [pc, #512]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80e1 	beq.w	8004738 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b02      	cmp	r3, #2
 800457a:	f000 8083 	beq.w	8004684 <HAL_RCC_GetSysClockFreq+0x204>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b02      	cmp	r3, #2
 8004582:	f200 80a1 	bhi.w	80046c8 <HAL_RCC_GetSysClockFreq+0x248>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x114>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d056      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004592:	e099      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004594:	4b6f      	ldr	r3, [pc, #444]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02d      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	08db      	lsrs	r3, r3, #3
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ca:	4b62      	ldr	r3, [pc, #392]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045da:	ed97 6a02 	vldr	s12, [r7, #8]
 80045de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045fa:	e087      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004768 <HAL_RCC_GetSysClockFreq+0x2e8>
 800460a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460e:	4b51      	ldr	r3, [pc, #324]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004622:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800463e:	e065      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800476c <HAL_RCC_GetSysClockFreq+0x2ec>
 800464e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004652:	4b40      	ldr	r3, [pc, #256]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004662:	ed97 6a02 	vldr	s12, [r7, #8]
 8004666:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004682:	e043      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004696:	4b2f      	ldr	r3, [pc, #188]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046c6:	e021      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800476c <HAL_RCC_GetSysClockFreq+0x2ec>
 80046d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046da:	4b1e      	ldr	r3, [pc, #120]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800470a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800470c:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	0a5b      	lsrs	r3, r3, #9
 8004712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004716:	3301      	adds	r3, #1
 8004718:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004724:	edd7 6a07 	vldr	s13, [r7, #28]
 8004728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004730:	ee17 3a90 	vmov	r3, s15
 8004734:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004736:	e005      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
      break;
 800473c:	e002      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800473e:	4b07      	ldr	r3, [pc, #28]	@ (800475c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004740:	61bb      	str	r3, [r7, #24]
      break;
 8004742:	bf00      	nop
  }

  return sysclockfreq;
 8004744:	69bb      	ldr	r3, [r7, #24]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	@ 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	58024400 	.word	0x58024400
 8004758:	03d09000 	.word	0x03d09000
 800475c:	003d0900 	.word	0x003d0900
 8004760:	017d7840 	.word	0x017d7840
 8004764:	46000000 	.word	0x46000000
 8004768:	4c742400 	.word	0x4c742400
 800476c:	4a742400 	.word	0x4a742400
 8004770:	4bbebc20 	.word	0x4bbebc20

08004774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800477a:	f7ff fe81 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 800477e:	4602      	mov	r2, r0
 8004780:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	490f      	ldr	r1, [pc, #60]	@ (80047c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800478c:	5ccb      	ldrb	r3, [r1, r3]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	fa22 f303 	lsr.w	r3, r2, r3
 8004796:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004798:	4b0a      	ldr	r3, [pc, #40]	@ (80047c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	4a09      	ldr	r2, [pc, #36]	@ (80047c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80047a2:	5cd3      	ldrb	r3, [r2, r3]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	fa22 f303 	lsr.w	r3, r2, r3
 80047ae:	4a07      	ldr	r2, [pc, #28]	@ (80047cc <HAL_RCC_GetHCLKFreq+0x58>)
 80047b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047b2:	4a07      	ldr	r2, [pc, #28]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047b8:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <HAL_RCC_GetHCLKFreq+0x58>)
 80047ba:	681b      	ldr	r3, [r3, #0]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	58024400 	.word	0x58024400
 80047c8:	0800be30 	.word	0x0800be30
 80047cc:	240001b4 	.word	0x240001b4
 80047d0:	240001b0 	.word	0x240001b0

080047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047d8:	f7ff ffcc 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4904      	ldr	r1, [pc, #16]	@ (80047fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	58024400 	.word	0x58024400
 80047fc:	0800be30 	.word	0x0800be30

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004804:	f7ff ffb6 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4904      	ldr	r1, [pc, #16]	@ (8004828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	58024400 	.word	0x58024400
 8004828:	0800be30 	.word	0x0800be30

0800482c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800482c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004830:	b0c6      	sub	sp, #280	@ 0x118
 8004832:	af00      	add	r7, sp, #0
 8004834:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004838:	2300      	movs	r3, #0
 800483a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800483e:	2300      	movs	r3, #0
 8004840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004850:	2500      	movs	r5, #0
 8004852:	ea54 0305 	orrs.w	r3, r4, r5
 8004856:	d049      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800485e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004862:	d02f      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004864:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004868:	d828      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800486a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800486e:	d01a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004874:	d822      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800487a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800487e:	d007      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004880:	e01c      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004882:	4bab      	ldr	r3, [pc, #684]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004886:	4aaa      	ldr	r2, [pc, #680]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800488c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800488e:	e01a      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004894:	3308      	adds	r3, #8
 8004896:	2102      	movs	r1, #2
 8004898:	4618      	mov	r0, r3
 800489a:	f001 fc25 	bl	80060e8 <RCCEx_PLL2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048a4:	e00f      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048aa:	3328      	adds	r3, #40	@ 0x28
 80048ac:	2102      	movs	r1, #2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fccc 	bl	800624c <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ba:	e004      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048ce:	4b98      	ldr	r3, [pc, #608]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048dc:	4a94      	ldr	r2, [pc, #592]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048de:	430b      	orrs	r3, r1
 80048e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80048e2:	e003      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80048f8:	f04f 0900 	mov.w	r9, #0
 80048fc:	ea58 0309 	orrs.w	r3, r8, r9
 8004900:	d047      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	2b04      	cmp	r3, #4
 800490a:	d82a      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800490c:	a201      	add	r2, pc, #4	@ (adr r2, 8004914 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004929 	.word	0x08004929
 8004918:	08004937 	.word	0x08004937
 800491c:	0800494d 	.word	0x0800494d
 8004920:	0800496b 	.word	0x0800496b
 8004924:	0800496b 	.word	0x0800496b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004928:	4b81      	ldr	r3, [pc, #516]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	4a80      	ldr	r2, [pc, #512]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800492e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004934:	e01a      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800493a:	3308      	adds	r3, #8
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f001 fbd2 	bl	80060e8 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800494a:	e00f      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800494c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004950:	3328      	adds	r3, #40	@ 0x28
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f001 fc79 	bl	800624c <RCCEx_PLL3_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004960:	e004      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004968:	e000      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800496a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800496c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004974:	4b6e      	ldr	r3, [pc, #440]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004978:	f023 0107 	bic.w	r1, r3, #7
 800497c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004982:	4a6b      	ldr	r2, [pc, #428]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004984:	430b      	orrs	r3, r1
 8004986:	6513      	str	r3, [r2, #80]	@ 0x50
 8004988:	e003      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800498e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800499e:	f04f 0b00 	mov.w	fp, #0
 80049a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80049a6:	d05b      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049b0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80049b4:	d03b      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80049b6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80049ba:	d834      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049c0:	d037      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80049c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049c6:	d82e      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049cc:	d033      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80049ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049d2:	d828      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049d8:	d01a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80049da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049de:	d822      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80049e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049e8:	d007      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80049ea:	e01c      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ec:	4b50      	ldr	r3, [pc, #320]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049f8:	e01e      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049fe:	3308      	adds	r3, #8
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 fb70 	bl	80060e8 <RCCEx_PLL2_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a0e:	e013      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a14:	3328      	adds	r3, #40	@ 0x28
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 fc17 	bl	800624c <RCCEx_PLL3_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a24:	e008      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a2c:	e004      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a2e:	bf00      	nop
 8004a30:	e002      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a32:	bf00      	nop
 8004a34:	e000      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a40:	4b3b      	ldr	r3, [pc, #236]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a50:	4a37      	ldr	r2, [pc, #220]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a52:	430b      	orrs	r3, r1
 8004a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a56:	e003      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	d05d      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a88:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a8c:	d03b      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004a8e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a92:	d834      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a98:	d037      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004a9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a9e:	d82e      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004aa0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004aa4:	d033      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004aa6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004aaa:	d828      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004aac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ab0:	d01a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004ab2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ab6:	d822      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ac0:	d007      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ac2:	e01c      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	4a19      	ldr	r2, [pc, #100]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ad0:	e01e      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 fb04 	bl	80060e8 <RCCEx_PLL2_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ae6:	e013      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aec:	3328      	adds	r3, #40	@ 0x28
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fbab 	bl	800624c <RCCEx_PLL3_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b04:	e004      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b06:	bf00      	nop
 8004b08:	e002      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b0a:	bf00      	nop
 8004b0c:	e000      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10d      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b18:	4b05      	ldr	r3, [pc, #20]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b28:	4a01      	ldr	r2, [pc, #4]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b2e:	e005      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b52:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	d03a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b62:	2b30      	cmp	r3, #48	@ 0x30
 8004b64:	d01f      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004b66:	2b30      	cmp	r3, #48	@ 0x30
 8004b68:	d819      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d00c      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d815      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d019      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d111      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b7a:	4baa      	ldr	r3, [pc, #680]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7e:	4aa9      	ldr	r2, [pc, #676]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b86:	e011      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	2102      	movs	r1, #2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f001 faa9 	bl	80060e8 <RCCEx_PLL2_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ba4:	e002      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bb4:	4b9b      	ldr	r3, [pc, #620]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc2:	4a98      	ldr	r2, [pc, #608]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bc8:	e003      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004bde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004be8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d051      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bfc:	d035      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c02:	d82e      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c08:	d031      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004c0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c0e:	d828      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c14:	d01a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c1a:	d822      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c24:	d007      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004c26:	e01c      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c28:	4b7e      	ldr	r3, [pc, #504]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c34:	e01c      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 fa52 	bl	80060e8 <RCCEx_PLL2_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c4a:	e011      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c50:	3328      	adds	r3, #40	@ 0x28
 8004c52:	2100      	movs	r1, #0
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 faf9 	bl	800624c <RCCEx_PLL3_Config>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c60:	e006      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c68:	e002      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c6a:	bf00      	nop
 8004c6c:	e000      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c78:	4b6a      	ldr	r3, [pc, #424]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c86:	4a67      	ldr	r2, [pc, #412]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c8c:	e003      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ca2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	d053      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cc0:	d033      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004cc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cc6:	d82c      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ccc:	d02f      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004cce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cd2:	d826      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cd8:	d02b      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004cda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cde:	d820      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce4:	d012      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004ce6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cea:	d81a      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d022      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf4:	d115      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 f9f2 	bl	80060e8 <RCCEx_PLL2_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d0a:	e015      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d10:	3328      	adds	r3, #40	@ 0x28
 8004d12:	2101      	movs	r1, #1
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 fa99 	bl	800624c <RCCEx_PLL3_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d20:	e00a      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d28:	e006      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d2a:	bf00      	nop
 8004d2c:	e004      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d40:	4b38      	ldr	r3, [pc, #224]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4e:	4a35      	ldr	r2, [pc, #212]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	d058      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d8a:	d033      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d90:	d82c      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d96:	d02f      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9c:	d826      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004da2:	d02b      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004da4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004da8:	d820      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dae:	d012      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004db4:	d81a      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d022      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004dba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dbe:	d115      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f001 f98d 	bl	80060e8 <RCCEx_PLL2_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dd4:	e015      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dda:	3328      	adds	r3, #40	@ 0x28
 8004ddc:	2101      	movs	r1, #1
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 fa34 	bl	800624c <RCCEx_PLL3_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dea:	e00a      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004df2:	e006      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004df4:	bf00      	nop
 8004df6:	e004      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004df8:	bf00      	nop
 8004dfa:	e002      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10e      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e0a:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e1a:	4a02      	ldr	r2, [pc, #8]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e20:	e006      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	d037      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e5a:	d00e      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e60:	d816      	bhi.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004e66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e6a:	d111      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e6c:	4bc4      	ldr	r3, [pc, #784]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	4ac3      	ldr	r2, [pc, #780]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e78:	e00f      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7e:	3308      	adds	r3, #8
 8004e80:	2101      	movs	r1, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 f930 	bl	80060e8 <RCCEx_PLL2_Config>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e8e:	e004      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e96:	e000      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ea2:	4bb7      	ldr	r3, [pc, #732]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb0:	4ab3      	ldr	r2, [pc, #716]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004eb6:	e003      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ed6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004eda:	460b      	mov	r3, r1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	d039      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d81c      	bhi.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004eea:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f2d 	.word	0x08004f2d
 8004ef4:	08004f01 	.word	0x08004f01
 8004ef8:	08004f0f 	.word	0x08004f0f
 8004efc:	08004f2d 	.word	0x08004f2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f00:	4b9f      	ldr	r3, [pc, #636]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	4a9e      	ldr	r2, [pc, #632]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f0c:	e00f      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f12:	3308      	adds	r3, #8
 8004f14:	2102      	movs	r1, #2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 f8e6 	bl	80060e8 <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f22:	e004      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f36:	4b92      	ldr	r3, [pc, #584]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3a:	f023 0103 	bic.w	r1, r3, #3
 8004f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f44:	4a8e      	ldr	r2, [pc, #568]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f46:	430b      	orrs	r3, r1
 8004f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f4a:	e003      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f64:	2300      	movs	r3, #0
 8004f66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f000 8099 	beq.w	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f76:	4b83      	ldr	r3, [pc, #524]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a82      	ldr	r2, [pc, #520]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f82:	f7fc fea1 	bl	8001cc8 <HAL_GetTick>
 8004f86:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8c:	f7fc fe9c 	bl	8001cc8 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b64      	cmp	r3, #100	@ 0x64
 8004f9a:	d903      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fa2:	e005      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa4:	4b77      	ldr	r3, [pc, #476]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ed      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004fb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d173      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fb8:	4b71      	ldr	r3, [pc, #452]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fc4:	4053      	eors	r3, r2
 8004fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d015      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fce:	4b6c      	ldr	r3, [pc, #432]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fda:	4b69      	ldr	r3, [pc, #420]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	4a68      	ldr	r2, [pc, #416]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe6:	4b66      	ldr	r3, [pc, #408]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	4a65      	ldr	r2, [pc, #404]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ff0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ff2:	4a63      	ldr	r2, [pc, #396]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ff8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005006:	d118      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fc fe5e 	bl	8001cc8 <HAL_GetTick>
 800500c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005010:	e00d      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fc fe59 	bl	8001cc8 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800501c:	1ad2      	subs	r2, r2, r3
 800501e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005022:	429a      	cmp	r2, r3
 8005024:	d903      	bls.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800502c:	e005      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800502e:	4b54      	ldr	r3, [pc, #336]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0eb      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800503a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800503e:	2b00      	cmp	r3, #0
 8005040:	d129      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800504a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005052:	d10e      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005054:	4b4a      	ldr	r3, [pc, #296]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800505c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005064:	091a      	lsrs	r2, r3, #4
 8005066:	4b48      	ldr	r3, [pc, #288]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005068:	4013      	ands	r3, r2
 800506a:	4a45      	ldr	r2, [pc, #276]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800506c:	430b      	orrs	r3, r1
 800506e:	6113      	str	r3, [r2, #16]
 8005070:	e005      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005072:	4b43      	ldr	r3, [pc, #268]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	4a42      	ldr	r2, [pc, #264]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005078:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800507c:	6113      	str	r3, [r2, #16]
 800507e:	4b40      	ldr	r3, [pc, #256]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005080:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800508a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800508e:	4a3c      	ldr	r2, [pc, #240]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005090:	430b      	orrs	r3, r1
 8005092:	6713      	str	r3, [r2, #112]	@ 0x70
 8005094:	e008      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800509a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800509e:	e003      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f002 0301 	and.w	r3, r2, #1
 80050b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050c2:	460b      	mov	r3, r1
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f000 808f 	beq.w	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050d0:	2b28      	cmp	r3, #40	@ 0x28
 80050d2:	d871      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80050d4:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	080051c1 	.word	0x080051c1
 80050e0:	080051b9 	.word	0x080051b9
 80050e4:	080051b9 	.word	0x080051b9
 80050e8:	080051b9 	.word	0x080051b9
 80050ec:	080051b9 	.word	0x080051b9
 80050f0:	080051b9 	.word	0x080051b9
 80050f4:	080051b9 	.word	0x080051b9
 80050f8:	080051b9 	.word	0x080051b9
 80050fc:	0800518d 	.word	0x0800518d
 8005100:	080051b9 	.word	0x080051b9
 8005104:	080051b9 	.word	0x080051b9
 8005108:	080051b9 	.word	0x080051b9
 800510c:	080051b9 	.word	0x080051b9
 8005110:	080051b9 	.word	0x080051b9
 8005114:	080051b9 	.word	0x080051b9
 8005118:	080051b9 	.word	0x080051b9
 800511c:	080051a3 	.word	0x080051a3
 8005120:	080051b9 	.word	0x080051b9
 8005124:	080051b9 	.word	0x080051b9
 8005128:	080051b9 	.word	0x080051b9
 800512c:	080051b9 	.word	0x080051b9
 8005130:	080051b9 	.word	0x080051b9
 8005134:	080051b9 	.word	0x080051b9
 8005138:	080051b9 	.word	0x080051b9
 800513c:	080051c1 	.word	0x080051c1
 8005140:	080051b9 	.word	0x080051b9
 8005144:	080051b9 	.word	0x080051b9
 8005148:	080051b9 	.word	0x080051b9
 800514c:	080051b9 	.word	0x080051b9
 8005150:	080051b9 	.word	0x080051b9
 8005154:	080051b9 	.word	0x080051b9
 8005158:	080051b9 	.word	0x080051b9
 800515c:	080051c1 	.word	0x080051c1
 8005160:	080051b9 	.word	0x080051b9
 8005164:	080051b9 	.word	0x080051b9
 8005168:	080051b9 	.word	0x080051b9
 800516c:	080051b9 	.word	0x080051b9
 8005170:	080051b9 	.word	0x080051b9
 8005174:	080051b9 	.word	0x080051b9
 8005178:	080051b9 	.word	0x080051b9
 800517c:	080051c1 	.word	0x080051c1
 8005180:	58024400 	.word	0x58024400
 8005184:	58024800 	.word	0x58024800
 8005188:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800518c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005190:	3308      	adds	r3, #8
 8005192:	2101      	movs	r1, #1
 8005194:	4618      	mov	r0, r3
 8005196:	f000 ffa7 	bl	80060e8 <RCCEx_PLL2_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051a0:	e00f      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a6:	3328      	adds	r3, #40	@ 0x28
 80051a8:	2101      	movs	r1, #1
 80051aa:	4618      	mov	r0, r3
 80051ac:	f001 f84e 	bl	800624c <RCCEx_PLL3_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051b6:	e004      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051be:	e000      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80051c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051ca:	4bbf      	ldr	r3, [pc, #764]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051d8:	4abb      	ldr	r2, [pc, #748]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051da:	430b      	orrs	r3, r1
 80051dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80051de:	e003      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f002 0302 	and.w	r3, r2, #2
 80051f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051f8:	2300      	movs	r3, #0
 80051fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005202:	460b      	mov	r3, r1
 8005204:	4313      	orrs	r3, r2
 8005206:	d041      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520e:	2b05      	cmp	r3, #5
 8005210:	d824      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005212:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	08005265 	.word	0x08005265
 800521c:	08005231 	.word	0x08005231
 8005220:	08005247 	.word	0x08005247
 8005224:	08005265 	.word	0x08005265
 8005228:	08005265 	.word	0x08005265
 800522c:	08005265 	.word	0x08005265
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005234:	3308      	adds	r3, #8
 8005236:	2101      	movs	r1, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f000 ff55 	bl	80060e8 <RCCEx_PLL2_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005244:	e00f      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524a:	3328      	adds	r3, #40	@ 0x28
 800524c:	2101      	movs	r1, #1
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fffc 	bl	800624c <RCCEx_PLL3_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800525a:	e004      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005262:	e000      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005266:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800526e:	4b96      	ldr	r3, [pc, #600]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	f023 0107 	bic.w	r1, r3, #7
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800527c:	4a92      	ldr	r2, [pc, #584]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800527e:	430b      	orrs	r3, r1
 8005280:	6553      	str	r3, [r2, #84]	@ 0x54
 8005282:	e003      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005288:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f002 0304 	and.w	r3, r2, #4
 8005298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800529c:	2300      	movs	r3, #0
 800529e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052a2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052a6:	460b      	mov	r3, r1
 80052a8:	4313      	orrs	r3, r2
 80052aa:	d044      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b4:	2b05      	cmp	r3, #5
 80052b6:	d825      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80052b8:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	0800530d 	.word	0x0800530d
 80052c4:	080052d9 	.word	0x080052d9
 80052c8:	080052ef 	.word	0x080052ef
 80052cc:	0800530d 	.word	0x0800530d
 80052d0:	0800530d 	.word	0x0800530d
 80052d4:	0800530d 	.word	0x0800530d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052dc:	3308      	adds	r3, #8
 80052de:	2101      	movs	r1, #1
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 ff01 	bl	80060e8 <RCCEx_PLL2_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052ec:	e00f      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f2:	3328      	adds	r3, #40	@ 0x28
 80052f4:	2101      	movs	r1, #1
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 ffa8 	bl	800624c <RCCEx_PLL3_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005302:	e004      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800530a:	e000      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800530c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800530e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005316:	4b6c      	ldr	r3, [pc, #432]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531a:	f023 0107 	bic.w	r1, r3, #7
 800531e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005326:	4a68      	ldr	r2, [pc, #416]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005328:	430b      	orrs	r3, r1
 800532a:	6593      	str	r3, [r2, #88]	@ 0x58
 800532c:	e003      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005332:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f002 0320 	and.w	r3, r2, #32
 8005342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800534c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005350:	460b      	mov	r3, r1
 8005352:	4313      	orrs	r3, r2
 8005354:	d055      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800535e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005362:	d033      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005364:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005368:	d82c      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536e:	d02f      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d826      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005376:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800537a:	d02b      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800537c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005380:	d820      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005386:	d012      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800538c:	d81a      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d022      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005396:	d115      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800539c:	3308      	adds	r3, #8
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fea1 	bl	80060e8 <RCCEx_PLL2_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053ac:	e015      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b2:	3328      	adds	r3, #40	@ 0x28
 80053b4:	2102      	movs	r1, #2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 ff48 	bl	800624c <RCCEx_PLL3_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053c2:	e00a      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053ca:	e006      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053cc:	bf00      	nop
 80053ce:	e004      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053d0:	bf00      	nop
 80053d2:	e002      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053e2:	4b39      	ldr	r3, [pc, #228]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053f2:	4a35      	ldr	r2, [pc, #212]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053f4:	430b      	orrs	r3, r1
 80053f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800540e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005412:	2300      	movs	r3, #0
 8005414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005418:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800541c:	460b      	mov	r3, r1
 800541e:	4313      	orrs	r3, r2
 8005420:	d058      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005426:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800542a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800542e:	d033      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005430:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005434:	d82c      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800543a:	d02f      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005440:	d826      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005442:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005446:	d02b      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005448:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800544c:	d820      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800544e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005452:	d012      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005458:	d81a      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d022      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800545e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005462:	d115      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005468:	3308      	adds	r3, #8
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fe3b 	bl	80060e8 <RCCEx_PLL2_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005478:	e015      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800547a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547e:	3328      	adds	r3, #40	@ 0x28
 8005480:	2102      	movs	r1, #2
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fee2 	bl	800624c <RCCEx_PLL3_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800548e:	e00a      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005496:	e006      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005498:	bf00      	nop
 800549a:	e004      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800549c:	bf00      	nop
 800549e:	e002      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10e      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ae:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054be:	4a02      	ldr	r2, [pc, #8]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054c4:	e006      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80054c6:	bf00      	nop
 80054c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80054ee:	460b      	mov	r3, r1
 80054f0:	4313      	orrs	r3, r2
 80054f2:	d055      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005500:	d033      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005502:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005506:	d82c      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800550c:	d02f      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800550e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005512:	d826      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005514:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005518:	d02b      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800551a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800551e:	d820      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005520:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005524:	d012      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005526:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800552a:	d81a      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d022      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005534:	d115      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553a:	3308      	adds	r3, #8
 800553c:	2100      	movs	r1, #0
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fdd2 	bl	80060e8 <RCCEx_PLL2_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800554a:	e015      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800554c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005550:	3328      	adds	r3, #40	@ 0x28
 8005552:	2102      	movs	r1, #2
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fe79 	bl	800624c <RCCEx_PLL3_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005560:	e00a      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005568:	e006      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800556a:	bf00      	nop
 800556c:	e004      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800556e:	bf00      	nop
 8005570:	e002      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005572:	bf00      	nop
 8005574:	e000      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10b      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005580:	4ba0      	ldr	r3, [pc, #640]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005584:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005590:	4a9c      	ldr	r2, [pc, #624]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005592:	430b      	orrs	r3, r1
 8005594:	6593      	str	r3, [r2, #88]	@ 0x58
 8005596:	e003      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800559c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80055a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f002 0308 	and.w	r3, r2, #8
 80055ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055ba:	460b      	mov	r3, r1
 80055bc:	4313      	orrs	r3, r2
 80055be:	d01e      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80055c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d2:	3328      	adds	r3, #40	@ 0x28
 80055d4:	2102      	movs	r1, #2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fe38 	bl	800624c <RCCEx_PLL3_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80055e8:	4b86      	ldr	r3, [pc, #536]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f8:	4a82      	ldr	r2, [pc, #520]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055fa:	430b      	orrs	r3, r1
 80055fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f002 0310 	and.w	r3, r2, #16
 800560a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800560e:	2300      	movs	r3, #0
 8005610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005614:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005618:	460b      	mov	r3, r1
 800561a:	4313      	orrs	r3, r2
 800561c:	d01e      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562a:	d10c      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005630:	3328      	adds	r3, #40	@ 0x28
 8005632:	2102      	movs	r1, #2
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fe09 	bl	800624c <RCCEx_PLL3_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005646:	4b6f      	ldr	r3, [pc, #444]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005656:	4a6b      	ldr	r2, [pc, #428]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005658:	430b      	orrs	r3, r1
 800565a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005668:	67bb      	str	r3, [r7, #120]	@ 0x78
 800566a:	2300      	movs	r3, #0
 800566c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800566e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005672:	460b      	mov	r3, r1
 8005674:	4313      	orrs	r3, r2
 8005676:	d03e      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005684:	d022      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800568a:	d81b      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005694:	d00b      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005696:	e015      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	3308      	adds	r3, #8
 800569e:	2100      	movs	r1, #0
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fd21 	bl	80060e8 <RCCEx_PLL2_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056ac:	e00f      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b2:	3328      	adds	r3, #40	@ 0x28
 80056b4:	2102      	movs	r1, #2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fdc8 	bl	800624c <RCCEx_PLL3_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056c2:	e004      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80056cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056e6:	4a47      	ldr	r2, [pc, #284]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005702:	673b      	str	r3, [r7, #112]	@ 0x70
 8005704:	2300      	movs	r3, #0
 8005706:	677b      	str	r3, [r7, #116]	@ 0x74
 8005708:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800571a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800571e:	d01f      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005720:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005724:	d818      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800572a:	d003      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800572c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005730:	d007      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005732:	e011      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005734:	4b33      	ldr	r3, [pc, #204]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	4a32      	ldr	r2, [pc, #200]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800573a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005740:	e00f      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005746:	3328      	adds	r3, #40	@ 0x28
 8005748:	2101      	movs	r1, #1
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fd7e 	bl	800624c <RCCEx_PLL3_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005756:	e004      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005762:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800576a:	4b26      	ldr	r3, [pc, #152]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800576c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800577a:	4a22      	ldr	r2, [pc, #136]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800577c:	430b      	orrs	r3, r1
 800577e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005786:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005796:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005798:	2300      	movs	r3, #0
 800579a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800579c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057a0:	460b      	mov	r3, r1
 80057a2:	4313      	orrs	r3, r2
 80057a4:	d034      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b4:	d007      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80057b6:	e011      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b8:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057bc:	4a11      	ldr	r2, [pc, #68]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057c4:	e00e      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ca:	3308      	adds	r3, #8
 80057cc:	2102      	movs	r1, #2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fc8a 	bl	80060e8 <RCCEx_PLL2_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057da:	e003      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10d      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fa:	4a02      	ldr	r2, [pc, #8]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057fc:	430b      	orrs	r3, r1
 80057fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005800:	e006      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005802:	bf00      	nop
 8005804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800580c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800581c:	663b      	str	r3, [r7, #96]	@ 0x60
 800581e:	2300      	movs	r3, #0
 8005820:	667b      	str	r3, [r7, #100]	@ 0x64
 8005822:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005826:	460b      	mov	r3, r1
 8005828:	4313      	orrs	r3, r2
 800582a:	d00c      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800582c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005830:	3328      	adds	r3, #40	@ 0x28
 8005832:	2102      	movs	r1, #2
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fd09 	bl	800624c <RCCEx_PLL3_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005852:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005854:	2300      	movs	r3, #0
 8005856:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005858:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800585c:	460b      	mov	r3, r1
 800585e:	4313      	orrs	r3, r2
 8005860:	d036      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005868:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800586c:	d018      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800586e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005872:	d811      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005878:	d014      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800587a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800587e:	d80b      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d011      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005888:	d106      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588a:	4bb7      	ldr	r3, [pc, #732]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	4ab6      	ldr	r2, [pc, #728]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005896:	e008      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800589e:	e004      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058a0:	bf00      	nop
 80058a2:	e002      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058a4:	bf00      	nop
 80058a6:	e000      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058b2:	4bad      	ldr	r3, [pc, #692]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058c0:	4aa9      	ldr	r2, [pc, #676]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058c2:	430b      	orrs	r3, r1
 80058c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80058c6:	e003      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80058dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80058de:	2300      	movs	r3, #0
 80058e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80058e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80058e6:	460b      	mov	r3, r1
 80058e8:	4313      	orrs	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058ec:	4b9e      	ldr	r3, [pc, #632]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fa:	4a9b      	ldr	r2, [pc, #620]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800590c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800590e:	2300      	movs	r3, #0
 8005910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005912:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005916:	460b      	mov	r3, r1
 8005918:	4313      	orrs	r3, r2
 800591a:	d009      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800591c:	4b92      	ldr	r3, [pc, #584]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800591e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005920:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800592a:	4a8f      	ldr	r2, [pc, #572]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800592c:	430b      	orrs	r3, r1
 800592e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800593c:	643b      	str	r3, [r7, #64]	@ 0x40
 800593e:	2300      	movs	r3, #0
 8005940:	647b      	str	r3, [r7, #68]	@ 0x44
 8005942:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005946:	460b      	mov	r3, r1
 8005948:	4313      	orrs	r3, r2
 800594a:	d00e      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800594c:	4b86      	ldr	r3, [pc, #536]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	4a85      	ldr	r2, [pc, #532]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005952:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005956:	6113      	str	r3, [r2, #16]
 8005958:	4b83      	ldr	r3, [pc, #524]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800595a:	6919      	ldr	r1, [r3, #16]
 800595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005964:	4a80      	ldr	r2, [pc, #512]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005966:	430b      	orrs	r3, r1
 8005968:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005976:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005978:	2300      	movs	r3, #0
 800597a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800597c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005980:	460b      	mov	r3, r1
 8005982:	4313      	orrs	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005986:	4b78      	ldr	r3, [pc, #480]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800598e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005994:	4a74      	ldr	r2, [pc, #464]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005996:	430b      	orrs	r3, r1
 8005998:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800599a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a8:	2300      	movs	r3, #0
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059b0:	460b      	mov	r3, r1
 80059b2:	4313      	orrs	r3, r2
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c6:	4a68      	ldr	r2, [pc, #416]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	2100      	movs	r1, #0
 80059d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059de:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	d011      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ec:	3308      	adds	r3, #8
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fb79 	bl	80060e8 <RCCEx_PLL2_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80059fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	2100      	movs	r1, #0
 8005a16:	6239      	str	r1, [r7, #32]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a1e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a22:	460b      	mov	r3, r1
 8005a24:	4313      	orrs	r3, r2
 8005a26:	d011      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	2101      	movs	r1, #1
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fb59 	bl	80060e8 <RCCEx_PLL2_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	2100      	movs	r1, #0
 8005a56:	61b9      	str	r1, [r7, #24]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a62:	460b      	mov	r3, r1
 8005a64:	4313      	orrs	r3, r2
 8005a66:	d011      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	2102      	movs	r1, #2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fb39 	bl	80060e8 <RCCEx_PLL2_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	2100      	movs	r1, #0
 8005a96:	6139      	str	r1, [r7, #16]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	d011      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aac:	3328      	adds	r3, #40	@ 0x28
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fbcb 	bl	800624c <RCCEx_PLL3_Config>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005abc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	d011      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aec:	3328      	adds	r3, #40	@ 0x28
 8005aee:	2101      	movs	r1, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fbab 	bl	800624c <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	2100      	movs	r1, #0
 8005b16:	6039      	str	r1, [r7, #0]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d011      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2c:	3328      	adds	r3, #40	@ 0x28
 8005b2e:	2102      	movs	r1, #2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fb8b 	bl	800624c <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005b4c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e000      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005b60:	46bd      	mov	sp, r7
 8005b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b66:	bf00      	nop
 8005b68:	58024400 	.word	0x58024400

08005b6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b70:	f7fe fe00 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8005b74:	4602      	mov	r2, r0
 8005b76:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	091b      	lsrs	r3, r3, #4
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	4904      	ldr	r1, [pc, #16]	@ (8005b94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b82:	5ccb      	ldrb	r3, [r1, r3]
 8005b84:	f003 031f 	and.w	r3, r3, #31
 8005b88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	58024400 	.word	0x58024400
 8005b94:	0800be30 	.word	0x0800be30

08005b98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b089      	sub	sp, #36	@ 0x24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ba0:	4ba1      	ldr	r3, [pc, #644]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005baa:	4b9f      	ldr	r3, [pc, #636]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bae:	0b1b      	lsrs	r3, r3, #12
 8005bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bb4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bb6:	4b9c      	ldr	r3, [pc, #624]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005bc2:	4b99      	ldr	r3, [pc, #612]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc6:	08db      	lsrs	r3, r3, #3
 8005bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8111 	beq.w	8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	f000 8083 	beq.w	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	f200 80a1 	bhi.w	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d056      	beq.n	8005cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c02:	e099      	b.n	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c04:	4b88      	ldr	r3, [pc, #544]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d02d      	beq.n	8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c10:	4b85      	ldr	r3, [pc, #532]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	08db      	lsrs	r3, r3, #3
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	4a84      	ldr	r2, [pc, #528]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c6a:	e087      	b.n	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cae:	e065      	b.n	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc2:	4b59      	ldr	r3, [pc, #356]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cf2:	e043      	b.n	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d06:	4b48      	ldr	r3, [pc, #288]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d36:	e021      	b.n	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4a:	4b37      	ldr	r3, [pc, #220]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	0a5b      	lsrs	r3, r3, #9
 8005d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da2:	ee17 2a90 	vmov	r2, s15
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005daa:	4b1f      	ldr	r3, [pc, #124]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db4:	ee07 3a90 	vmov	s15, r3
 8005db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd0:	ee17 2a90 	vmov	r2, s15
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005dd8:	4b13      	ldr	r3, [pc, #76]	@ (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ddc:	0e1b      	lsrs	r3, r3, #24
 8005dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfe:	ee17 2a90 	vmov	r2, s15
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e06:	e008      	b.n	8005e1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	609a      	str	r2, [r3, #8]
}
 8005e1a:	bf00      	nop
 8005e1c:	3724      	adds	r7, #36	@ 0x24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	03d09000 	.word	0x03d09000
 8005e30:	46000000 	.word	0x46000000
 8005e34:	4c742400 	.word	0x4c742400
 8005e38:	4a742400 	.word	0x4a742400
 8005e3c:	4bbebc20 	.word	0x4bbebc20

08005e40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b089      	sub	sp, #36	@ 0x24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e48:	4ba1      	ldr	r3, [pc, #644]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e52:	4b9f      	ldr	r3, [pc, #636]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	0d1b      	lsrs	r3, r3, #20
 8005e58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e5e:	4b9c      	ldr	r3, [pc, #624]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e62:	0a1b      	lsrs	r3, r3, #8
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e6a:	4b99      	ldr	r3, [pc, #612]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6e:	08db      	lsrs	r3, r3, #3
 8005e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 8111 	beq.w	80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	f000 8083 	beq.w	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	f200 80a1 	bhi.w	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d056      	beq.n	8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005eaa:	e099      	b.n	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eac:	4b88      	ldr	r3, [pc, #544]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d02d      	beq.n	8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eb8:	4b85      	ldr	r3, [pc, #532]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	08db      	lsrs	r3, r3, #3
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	4a84      	ldr	r2, [pc, #528]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee2:	4b7b      	ldr	r3, [pc, #492]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ef6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f12:	e087      	b.n	8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	4b6a      	ldr	r3, [pc, #424]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f56:	e065      	b.n	8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6a:	4b59      	ldr	r3, [pc, #356]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9a:	e043      	b.n	8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fae:	4b48      	ldr	r3, [pc, #288]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fde:	e021      	b.n	8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff2:	4b37      	ldr	r3, [pc, #220]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006002:	ed97 6a03 	vldr	s12, [r7, #12]
 8006006:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800600a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006022:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006024:	4b2a      	ldr	r3, [pc, #168]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006028:	0a5b      	lsrs	r3, r3, #9
 800602a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800603a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800603e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800604a:	ee17 2a90 	vmov	r2, s15
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006052:	4b1f      	ldr	r3, [pc, #124]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006064:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006068:	ee37 7a87 	vadd.f32	s14, s15, s14
 800606c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006078:	ee17 2a90 	vmov	r2, s15
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006080:	4b13      	ldr	r3, [pc, #76]	@ (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006084:	0e1b      	lsrs	r3, r3, #24
 8006086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800609a:	edd7 6a07 	vldr	s13, [r7, #28]
 800609e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a6:	ee17 2a90 	vmov	r2, s15
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060ae:	e008      	b.n	80060c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	609a      	str	r2, [r3, #8]
}
 80060c2:	bf00      	nop
 80060c4:	3724      	adds	r7, #36	@ 0x24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	58024400 	.word	0x58024400
 80060d4:	03d09000 	.word	0x03d09000
 80060d8:	46000000 	.word	0x46000000
 80060dc:	4c742400 	.word	0x4c742400
 80060e0:	4a742400 	.word	0x4a742400
 80060e4:	4bbebc20 	.word	0x4bbebc20

080060e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060f6:	4b53      	ldr	r3, [pc, #332]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80060f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d101      	bne.n	8006106 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e099      	b.n	800623a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006106:	4b4f      	ldr	r3, [pc, #316]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a4e      	ldr	r2, [pc, #312]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 800610c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006112:	f7fb fdd9 	bl	8001cc8 <HAL_GetTick>
 8006116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006118:	e008      	b.n	800612c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800611a:	f7fb fdd5 	bl	8001cc8 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e086      	b.n	800623a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800612c:	4b45      	ldr	r3, [pc, #276]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006138:	4b42      	ldr	r3, [pc, #264]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	493f      	ldr	r1, [pc, #252]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 8006148:	4313      	orrs	r3, r2
 800614a:	628b      	str	r3, [r1, #40]	@ 0x28
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	3b01      	subs	r3, #1
 8006152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	3b01      	subs	r3, #1
 800615c:	025b      	lsls	r3, r3, #9
 800615e:	b29b      	uxth	r3, r3
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	3b01      	subs	r3, #1
 8006168:	041b      	lsls	r3, r3, #16
 800616a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	3b01      	subs	r3, #1
 8006176:	061b      	lsls	r3, r3, #24
 8006178:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800617c:	4931      	ldr	r1, [pc, #196]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 800617e:	4313      	orrs	r3, r2
 8006180:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006182:	4b30      	ldr	r3, [pc, #192]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 8006184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006186:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	492d      	ldr	r1, [pc, #180]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 8006190:	4313      	orrs	r3, r2
 8006192:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006194:	4b2b      	ldr	r3, [pc, #172]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	f023 0220 	bic.w	r2, r3, #32
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	4928      	ldr	r1, [pc, #160]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061a6:	4b27      	ldr	r3, [pc, #156]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061aa:	4a26      	ldr	r2, [pc, #152]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	f023 0310 	bic.w	r3, r3, #16
 80061b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061b2:	4b24      	ldr	r3, [pc, #144]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061b6:	4b24      	ldr	r3, [pc, #144]	@ (8006248 <RCCEx_PLL2_Config+0x160>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	69d2      	ldr	r2, [r2, #28]
 80061be:	00d2      	lsls	r2, r2, #3
 80061c0:	4920      	ldr	r1, [pc, #128]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061cc:	f043 0310 	orr.w	r3, r3, #16
 80061d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	4a19      	ldr	r2, [pc, #100]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061e4:	e00f      	b.n	8006206 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d106      	bne.n	80061fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061ec:	4b15      	ldr	r3, [pc, #84]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	4a14      	ldr	r2, [pc, #80]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061f8:	e005      	b.n	8006206 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061fa:	4b12      	ldr	r3, [pc, #72]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	4a11      	ldr	r2, [pc, #68]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 8006200:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006204:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006206:	4b0f      	ldr	r3, [pc, #60]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a0e      	ldr	r2, [pc, #56]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 800620c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006212:	f7fb fd59 	bl	8001cc8 <HAL_GetTick>
 8006216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006218:	e008      	b.n	800622c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800621a:	f7fb fd55 	bl	8001cc8 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e006      	b.n	800623a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800622c:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <RCCEx_PLL2_Config+0x15c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0f0      	beq.n	800621a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	58024400 	.word	0x58024400
 8006248:	ffff0007 	.word	0xffff0007

0800624c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800625a:	4b53      	ldr	r3, [pc, #332]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b03      	cmp	r3, #3
 8006264:	d101      	bne.n	800626a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e099      	b.n	800639e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800626a:	4b4f      	ldr	r3, [pc, #316]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a4e      	ldr	r2, [pc, #312]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006270:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006276:	f7fb fd27 	bl	8001cc8 <HAL_GetTick>
 800627a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800627c:	e008      	b.n	8006290 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800627e:	f7fb fd23 	bl	8001cc8 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e086      	b.n	800639e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006290:	4b45      	ldr	r3, [pc, #276]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f0      	bne.n	800627e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800629c:	4b42      	ldr	r3, [pc, #264]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	051b      	lsls	r3, r3, #20
 80062aa:	493f      	ldr	r1, [pc, #252]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	3b01      	subs	r3, #1
 80062c0:	025b      	lsls	r3, r3, #9
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	041b      	lsls	r3, r3, #16
 80062ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	3b01      	subs	r3, #1
 80062da:	061b      	lsls	r3, r3, #24
 80062dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062e0:	4931      	ldr	r1, [pc, #196]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062e6:	4b30      	ldr	r3, [pc, #192]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	492d      	ldr	r1, [pc, #180]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062f8:	4b2b      	ldr	r3, [pc, #172]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	4928      	ldr	r1, [pc, #160]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006306:	4313      	orrs	r3, r2
 8006308:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800630a:	4b27      	ldr	r3, [pc, #156]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 800630c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630e:	4a26      	ldr	r2, [pc, #152]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006314:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006316:	4b24      	ldr	r3, [pc, #144]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800631a:	4b24      	ldr	r3, [pc, #144]	@ (80063ac <RCCEx_PLL3_Config+0x160>)
 800631c:	4013      	ands	r3, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	69d2      	ldr	r2, [r2, #28]
 8006322:	00d2      	lsls	r2, r2, #3
 8006324:	4920      	ldr	r1, [pc, #128]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006326:	4313      	orrs	r3, r2
 8006328:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800632a:	4b1f      	ldr	r3, [pc, #124]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 800632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632e:	4a1e      	ldr	r2, [pc, #120]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006334:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800633c:	4b1a      	ldr	r3, [pc, #104]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	4a19      	ldr	r2, [pc, #100]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006342:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006346:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006348:	e00f      	b.n	800636a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d106      	bne.n	800635e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006350:	4b15      	ldr	r3, [pc, #84]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	4a14      	ldr	r2, [pc, #80]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006356:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800635a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800635c:	e005      	b.n	800636a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800635e:	4b12      	ldr	r3, [pc, #72]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	4a11      	ldr	r2, [pc, #68]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006364:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006368:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800636a:	4b0f      	ldr	r3, [pc, #60]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a0e      	ldr	r2, [pc, #56]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006376:	f7fb fca7 	bl	8001cc8 <HAL_GetTick>
 800637a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800637c:	e008      	b.n	8006390 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800637e:	f7fb fca3 	bl	8001cc8 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e006      	b.n	800639e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006390:	4b05      	ldr	r3, [pc, #20]	@ (80063a8 <RCCEx_PLL3_Config+0x15c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	58024400 	.word	0x58024400
 80063ac:	ffff0007 	.word	0xffff0007

080063b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e042      	b.n	8006448 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fb fa45 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2224      	movs	r2, #36	@ 0x24
 80063de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0201 	bic.w	r2, r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 ff22 	bl	8007244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f8b3 	bl	800656c <UART_SetConfig>
 8006406:	4603      	mov	r3, r0
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e01b      	b.n	8006448 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800641e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800642e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 ffa1 	bl	8007388 <UART_CheckIdleState>
 8006446:	4603      	mov	r3, r0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	@ 0x28
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006466:	2b20      	cmp	r3, #32
 8006468:	d17b      	bne.n	8006562 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_UART_Transmit+0x26>
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e074      	b.n	8006564 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2221      	movs	r2, #33	@ 0x21
 8006486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800648a:	f7fb fc1d 	bl	8001cc8 <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a8:	d108      	bne.n	80064bc <HAL_UART_Transmit+0x6c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e003      	b.n	80064c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064c4:	e030      	b.n	8006528 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2200      	movs	r2, #0
 80064ce:	2180      	movs	r1, #128	@ 0x80
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f001 f803 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e03d      	b.n	8006564 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10b      	bne.n	8006506 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	3302      	adds	r3, #2
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e007      	b.n	8006516 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1c8      	bne.n	80064c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	2140      	movs	r1, #64	@ 0x40
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 ffcc 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e006      	b.n	8006564 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3720      	adds	r7, #32
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800656c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006570:	b092      	sub	sp, #72	@ 0x48
 8006572:	af00      	add	r7, sp, #0
 8006574:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	431a      	orrs	r2, r3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	431a      	orrs	r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	4313      	orrs	r3, r2
 8006592:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4bbe      	ldr	r3, [pc, #760]	@ (8006894 <UART_SetConfig+0x328>)
 800659c:	4013      	ands	r3, r2
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4ab3      	ldr	r2, [pc, #716]	@ (8006898 <UART_SetConfig+0x32c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065d4:	4313      	orrs	r3, r2
 80065d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	4baf      	ldr	r3, [pc, #700]	@ (800689c <UART_SetConfig+0x330>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f2:	f023 010f 	bic.w	r1, r3, #15
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4aa6      	ldr	r2, [pc, #664]	@ (80068a0 <UART_SetConfig+0x334>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d177      	bne.n	80066fc <UART_SetConfig+0x190>
 800660c:	4ba5      	ldr	r3, [pc, #660]	@ (80068a4 <UART_SetConfig+0x338>)
 800660e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006610:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006614:	2b28      	cmp	r3, #40	@ 0x28
 8006616:	d86d      	bhi.n	80066f4 <UART_SetConfig+0x188>
 8006618:	a201      	add	r2, pc, #4	@ (adr r2, 8006620 <UART_SetConfig+0xb4>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	080066c5 	.word	0x080066c5
 8006624:	080066f5 	.word	0x080066f5
 8006628:	080066f5 	.word	0x080066f5
 800662c:	080066f5 	.word	0x080066f5
 8006630:	080066f5 	.word	0x080066f5
 8006634:	080066f5 	.word	0x080066f5
 8006638:	080066f5 	.word	0x080066f5
 800663c:	080066f5 	.word	0x080066f5
 8006640:	080066cd 	.word	0x080066cd
 8006644:	080066f5 	.word	0x080066f5
 8006648:	080066f5 	.word	0x080066f5
 800664c:	080066f5 	.word	0x080066f5
 8006650:	080066f5 	.word	0x080066f5
 8006654:	080066f5 	.word	0x080066f5
 8006658:	080066f5 	.word	0x080066f5
 800665c:	080066f5 	.word	0x080066f5
 8006660:	080066d5 	.word	0x080066d5
 8006664:	080066f5 	.word	0x080066f5
 8006668:	080066f5 	.word	0x080066f5
 800666c:	080066f5 	.word	0x080066f5
 8006670:	080066f5 	.word	0x080066f5
 8006674:	080066f5 	.word	0x080066f5
 8006678:	080066f5 	.word	0x080066f5
 800667c:	080066f5 	.word	0x080066f5
 8006680:	080066dd 	.word	0x080066dd
 8006684:	080066f5 	.word	0x080066f5
 8006688:	080066f5 	.word	0x080066f5
 800668c:	080066f5 	.word	0x080066f5
 8006690:	080066f5 	.word	0x080066f5
 8006694:	080066f5 	.word	0x080066f5
 8006698:	080066f5 	.word	0x080066f5
 800669c:	080066f5 	.word	0x080066f5
 80066a0:	080066e5 	.word	0x080066e5
 80066a4:	080066f5 	.word	0x080066f5
 80066a8:	080066f5 	.word	0x080066f5
 80066ac:	080066f5 	.word	0x080066f5
 80066b0:	080066f5 	.word	0x080066f5
 80066b4:	080066f5 	.word	0x080066f5
 80066b8:	080066f5 	.word	0x080066f5
 80066bc:	080066f5 	.word	0x080066f5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e326      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e322      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e31e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e31a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066e4:	2320      	movs	r3, #32
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e316      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066ec:	2340      	movs	r3, #64	@ 0x40
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e312      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066f4:	2380      	movs	r3, #128	@ 0x80
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e30e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a69      	ldr	r2, [pc, #420]	@ (80068a8 <UART_SetConfig+0x33c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d130      	bne.n	8006768 <UART_SetConfig+0x1fc>
 8006706:	4b67      	ldr	r3, [pc, #412]	@ (80068a4 <UART_SetConfig+0x338>)
 8006708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	2b05      	cmp	r3, #5
 8006710:	d826      	bhi.n	8006760 <UART_SetConfig+0x1f4>
 8006712:	a201      	add	r2, pc, #4	@ (adr r2, 8006718 <UART_SetConfig+0x1ac>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	08006731 	.word	0x08006731
 800671c:	08006739 	.word	0x08006739
 8006720:	08006741 	.word	0x08006741
 8006724:	08006749 	.word	0x08006749
 8006728:	08006751 	.word	0x08006751
 800672c:	08006759 	.word	0x08006759
 8006730:	2300      	movs	r3, #0
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e2f0      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e2ec      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e2e8      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e2e4      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006750:	2320      	movs	r3, #32
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006756:	e2e0      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006758:	2340      	movs	r3, #64	@ 0x40
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e2dc      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006760:	2380      	movs	r3, #128	@ 0x80
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006766:	e2d8      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a4f      	ldr	r2, [pc, #316]	@ (80068ac <UART_SetConfig+0x340>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d130      	bne.n	80067d4 <UART_SetConfig+0x268>
 8006772:	4b4c      	ldr	r3, [pc, #304]	@ (80068a4 <UART_SetConfig+0x338>)
 8006774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b05      	cmp	r3, #5
 800677c:	d826      	bhi.n	80067cc <UART_SetConfig+0x260>
 800677e:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <UART_SetConfig+0x218>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	0800679d 	.word	0x0800679d
 8006788:	080067a5 	.word	0x080067a5
 800678c:	080067ad 	.word	0x080067ad
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	2300      	movs	r3, #0
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e2ba      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067a4:	2304      	movs	r3, #4
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e2b6      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067ac:	2308      	movs	r3, #8
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b2:	e2b2      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067b4:	2310      	movs	r3, #16
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e2ae      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067bc:	2320      	movs	r3, #32
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e2aa      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067c4:	2340      	movs	r3, #64	@ 0x40
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e2a6      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067cc:	2380      	movs	r3, #128	@ 0x80
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d2:	e2a2      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a35      	ldr	r2, [pc, #212]	@ (80068b0 <UART_SetConfig+0x344>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d130      	bne.n	8006840 <UART_SetConfig+0x2d4>
 80067de:	4b31      	ldr	r3, [pc, #196]	@ (80068a4 <UART_SetConfig+0x338>)
 80067e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	2b05      	cmp	r3, #5
 80067e8:	d826      	bhi.n	8006838 <UART_SetConfig+0x2cc>
 80067ea:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <UART_SetConfig+0x284>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006809 	.word	0x08006809
 80067f4:	08006811 	.word	0x08006811
 80067f8:	08006819 	.word	0x08006819
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006829 	.word	0x08006829
 8006804:	08006831 	.word	0x08006831
 8006808:	2300      	movs	r3, #0
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e284      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e280      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681e:	e27c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006826:	e278      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006828:	2320      	movs	r3, #32
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682e:	e274      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006830:	2340      	movs	r3, #64	@ 0x40
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006836:	e270      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006838:	2380      	movs	r3, #128	@ 0x80
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683e:	e26c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1b      	ldr	r2, [pc, #108]	@ (80068b4 <UART_SetConfig+0x348>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d142      	bne.n	80068d0 <UART_SetConfig+0x364>
 800684a:	4b16      	ldr	r3, [pc, #88]	@ (80068a4 <UART_SetConfig+0x338>)
 800684c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	2b05      	cmp	r3, #5
 8006854:	d838      	bhi.n	80068c8 <UART_SetConfig+0x35c>
 8006856:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <UART_SetConfig+0x2f0>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006875 	.word	0x08006875
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006885 	.word	0x08006885
 8006868:	0800688d 	.word	0x0800688d
 800686c:	080068b9 	.word	0x080068b9
 8006870:	080068c1 	.word	0x080068c1
 8006874:	2300      	movs	r3, #0
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687a:	e24e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006882:	e24a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688a:	e246      	b.n	8006d1a <UART_SetConfig+0x7ae>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006892:	e242      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006894:	cfff69f3 	.word	0xcfff69f3
 8006898:	58000c00 	.word	0x58000c00
 800689c:	11fff4ff 	.word	0x11fff4ff
 80068a0:	40011000 	.word	0x40011000
 80068a4:	58024400 	.word	0x58024400
 80068a8:	40004400 	.word	0x40004400
 80068ac:	40004800 	.word	0x40004800
 80068b0:	40004c00 	.word	0x40004c00
 80068b4:	40005000 	.word	0x40005000
 80068b8:	2320      	movs	r3, #32
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e22c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80068c0:	2340      	movs	r3, #64	@ 0x40
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e228      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80068c8:	2380      	movs	r3, #128	@ 0x80
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e224      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4ab1      	ldr	r2, [pc, #708]	@ (8006b9c <UART_SetConfig+0x630>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d176      	bne.n	80069c8 <UART_SetConfig+0x45c>
 80068da:	4bb1      	ldr	r3, [pc, #708]	@ (8006ba0 <UART_SetConfig+0x634>)
 80068dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068e2:	2b28      	cmp	r3, #40	@ 0x28
 80068e4:	d86c      	bhi.n	80069c0 <UART_SetConfig+0x454>
 80068e6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <UART_SetConfig+0x380>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006991 	.word	0x08006991
 80068f0:	080069c1 	.word	0x080069c1
 80068f4:	080069c1 	.word	0x080069c1
 80068f8:	080069c1 	.word	0x080069c1
 80068fc:	080069c1 	.word	0x080069c1
 8006900:	080069c1 	.word	0x080069c1
 8006904:	080069c1 	.word	0x080069c1
 8006908:	080069c1 	.word	0x080069c1
 800690c:	08006999 	.word	0x08006999
 8006910:	080069c1 	.word	0x080069c1
 8006914:	080069c1 	.word	0x080069c1
 8006918:	080069c1 	.word	0x080069c1
 800691c:	080069c1 	.word	0x080069c1
 8006920:	080069c1 	.word	0x080069c1
 8006924:	080069c1 	.word	0x080069c1
 8006928:	080069c1 	.word	0x080069c1
 800692c:	080069a1 	.word	0x080069a1
 8006930:	080069c1 	.word	0x080069c1
 8006934:	080069c1 	.word	0x080069c1
 8006938:	080069c1 	.word	0x080069c1
 800693c:	080069c1 	.word	0x080069c1
 8006940:	080069c1 	.word	0x080069c1
 8006944:	080069c1 	.word	0x080069c1
 8006948:	080069c1 	.word	0x080069c1
 800694c:	080069a9 	.word	0x080069a9
 8006950:	080069c1 	.word	0x080069c1
 8006954:	080069c1 	.word	0x080069c1
 8006958:	080069c1 	.word	0x080069c1
 800695c:	080069c1 	.word	0x080069c1
 8006960:	080069c1 	.word	0x080069c1
 8006964:	080069c1 	.word	0x080069c1
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069b1 	.word	0x080069b1
 8006970:	080069c1 	.word	0x080069c1
 8006974:	080069c1 	.word	0x080069c1
 8006978:	080069c1 	.word	0x080069c1
 800697c:	080069c1 	.word	0x080069c1
 8006980:	080069c1 	.word	0x080069c1
 8006984:	080069c1 	.word	0x080069c1
 8006988:	080069c1 	.word	0x080069c1
 800698c:	080069b9 	.word	0x080069b9
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e1c0      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006998:	2304      	movs	r3, #4
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e1bc      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069a0:	2308      	movs	r3, #8
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e1b8      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069a8:	2310      	movs	r3, #16
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e1b4      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069b0:	2320      	movs	r3, #32
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e1b0      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069b8:	2340      	movs	r3, #64	@ 0x40
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e1ac      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e1a8      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a75      	ldr	r2, [pc, #468]	@ (8006ba4 <UART_SetConfig+0x638>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d130      	bne.n	8006a34 <UART_SetConfig+0x4c8>
 80069d2:	4b73      	ldr	r3, [pc, #460]	@ (8006ba0 <UART_SetConfig+0x634>)
 80069d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	2b05      	cmp	r3, #5
 80069dc:	d826      	bhi.n	8006a2c <UART_SetConfig+0x4c0>
 80069de:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <UART_SetConfig+0x478>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	080069fd 	.word	0x080069fd
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	08006a0d 	.word	0x08006a0d
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a25 	.word	0x08006a25
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e18a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a04:	2304      	movs	r3, #4
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e186      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e182      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a14:	2310      	movs	r3, #16
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1a:	e17e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a1c:	2320      	movs	r3, #32
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e17a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a24:	2340      	movs	r3, #64	@ 0x40
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2a:	e176      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a2c:	2380      	movs	r3, #128	@ 0x80
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a32:	e172      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a5b      	ldr	r2, [pc, #364]	@ (8006ba8 <UART_SetConfig+0x63c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d130      	bne.n	8006aa0 <UART_SetConfig+0x534>
 8006a3e:	4b58      	ldr	r3, [pc, #352]	@ (8006ba0 <UART_SetConfig+0x634>)
 8006a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	2b05      	cmp	r3, #5
 8006a48:	d826      	bhi.n	8006a98 <UART_SetConfig+0x52c>
 8006a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <UART_SetConfig+0x4e4>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a69 	.word	0x08006a69
 8006a54:	08006a71 	.word	0x08006a71
 8006a58:	08006a79 	.word	0x08006a79
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a89 	.word	0x08006a89
 8006a64:	08006a91 	.word	0x08006a91
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e154      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a70:	2304      	movs	r3, #4
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e150      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a78:	2308      	movs	r3, #8
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7e:	e14c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a80:	2310      	movs	r3, #16
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a86:	e148      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a88:	2320      	movs	r3, #32
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	e144      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a90:	2340      	movs	r3, #64	@ 0x40
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a96:	e140      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a98:	2380      	movs	r3, #128	@ 0x80
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9e:	e13c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a41      	ldr	r2, [pc, #260]	@ (8006bac <UART_SetConfig+0x640>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	f040 8082 	bne.w	8006bb0 <UART_SetConfig+0x644>
 8006aac:	4b3c      	ldr	r3, [pc, #240]	@ (8006ba0 <UART_SetConfig+0x634>)
 8006aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ab4:	2b28      	cmp	r3, #40	@ 0x28
 8006ab6:	d86d      	bhi.n	8006b94 <UART_SetConfig+0x628>
 8006ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac0 <UART_SetConfig+0x554>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006b65 	.word	0x08006b65
 8006ac4:	08006b95 	.word	0x08006b95
 8006ac8:	08006b95 	.word	0x08006b95
 8006acc:	08006b95 	.word	0x08006b95
 8006ad0:	08006b95 	.word	0x08006b95
 8006ad4:	08006b95 	.word	0x08006b95
 8006ad8:	08006b95 	.word	0x08006b95
 8006adc:	08006b95 	.word	0x08006b95
 8006ae0:	08006b6d 	.word	0x08006b6d
 8006ae4:	08006b95 	.word	0x08006b95
 8006ae8:	08006b95 	.word	0x08006b95
 8006aec:	08006b95 	.word	0x08006b95
 8006af0:	08006b95 	.word	0x08006b95
 8006af4:	08006b95 	.word	0x08006b95
 8006af8:	08006b95 	.word	0x08006b95
 8006afc:	08006b95 	.word	0x08006b95
 8006b00:	08006b75 	.word	0x08006b75
 8006b04:	08006b95 	.word	0x08006b95
 8006b08:	08006b95 	.word	0x08006b95
 8006b0c:	08006b95 	.word	0x08006b95
 8006b10:	08006b95 	.word	0x08006b95
 8006b14:	08006b95 	.word	0x08006b95
 8006b18:	08006b95 	.word	0x08006b95
 8006b1c:	08006b95 	.word	0x08006b95
 8006b20:	08006b7d 	.word	0x08006b7d
 8006b24:	08006b95 	.word	0x08006b95
 8006b28:	08006b95 	.word	0x08006b95
 8006b2c:	08006b95 	.word	0x08006b95
 8006b30:	08006b95 	.word	0x08006b95
 8006b34:	08006b95 	.word	0x08006b95
 8006b38:	08006b95 	.word	0x08006b95
 8006b3c:	08006b95 	.word	0x08006b95
 8006b40:	08006b85 	.word	0x08006b85
 8006b44:	08006b95 	.word	0x08006b95
 8006b48:	08006b95 	.word	0x08006b95
 8006b4c:	08006b95 	.word	0x08006b95
 8006b50:	08006b95 	.word	0x08006b95
 8006b54:	08006b95 	.word	0x08006b95
 8006b58:	08006b95 	.word	0x08006b95
 8006b5c:	08006b95 	.word	0x08006b95
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6a:	e0d6      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b72:	e0d2      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b74:	2308      	movs	r3, #8
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7a:	e0ce      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b82:	e0ca      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b84:	2320      	movs	r3, #32
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8a:	e0c6      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b8c:	2340      	movs	r3, #64	@ 0x40
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b92:	e0c2      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b94:	2380      	movs	r3, #128	@ 0x80
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9a:	e0be      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b9c:	40011400 	.word	0x40011400
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	40007800 	.word	0x40007800
 8006ba8:	40007c00 	.word	0x40007c00
 8006bac:	40011800 	.word	0x40011800
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4aad      	ldr	r2, [pc, #692]	@ (8006e6c <UART_SetConfig+0x900>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d176      	bne.n	8006ca8 <UART_SetConfig+0x73c>
 8006bba:	4bad      	ldr	r3, [pc, #692]	@ (8006e70 <UART_SetConfig+0x904>)
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bc2:	2b28      	cmp	r3, #40	@ 0x28
 8006bc4:	d86c      	bhi.n	8006ca0 <UART_SetConfig+0x734>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <UART_SetConfig+0x660>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c71 	.word	0x08006c71
 8006bd0:	08006ca1 	.word	0x08006ca1
 8006bd4:	08006ca1 	.word	0x08006ca1
 8006bd8:	08006ca1 	.word	0x08006ca1
 8006bdc:	08006ca1 	.word	0x08006ca1
 8006be0:	08006ca1 	.word	0x08006ca1
 8006be4:	08006ca1 	.word	0x08006ca1
 8006be8:	08006ca1 	.word	0x08006ca1
 8006bec:	08006c79 	.word	0x08006c79
 8006bf0:	08006ca1 	.word	0x08006ca1
 8006bf4:	08006ca1 	.word	0x08006ca1
 8006bf8:	08006ca1 	.word	0x08006ca1
 8006bfc:	08006ca1 	.word	0x08006ca1
 8006c00:	08006ca1 	.word	0x08006ca1
 8006c04:	08006ca1 	.word	0x08006ca1
 8006c08:	08006ca1 	.word	0x08006ca1
 8006c0c:	08006c81 	.word	0x08006c81
 8006c10:	08006ca1 	.word	0x08006ca1
 8006c14:	08006ca1 	.word	0x08006ca1
 8006c18:	08006ca1 	.word	0x08006ca1
 8006c1c:	08006ca1 	.word	0x08006ca1
 8006c20:	08006ca1 	.word	0x08006ca1
 8006c24:	08006ca1 	.word	0x08006ca1
 8006c28:	08006ca1 	.word	0x08006ca1
 8006c2c:	08006c89 	.word	0x08006c89
 8006c30:	08006ca1 	.word	0x08006ca1
 8006c34:	08006ca1 	.word	0x08006ca1
 8006c38:	08006ca1 	.word	0x08006ca1
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006ca1 	.word	0x08006ca1
 8006c44:	08006ca1 	.word	0x08006ca1
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006c91 	.word	0x08006c91
 8006c50:	08006ca1 	.word	0x08006ca1
 8006c54:	08006ca1 	.word	0x08006ca1
 8006c58:	08006ca1 	.word	0x08006ca1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006ca1 	.word	0x08006ca1
 8006c64:	08006ca1 	.word	0x08006ca1
 8006c68:	08006ca1 	.word	0x08006ca1
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c76:	e050      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7e:	e04c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e048      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e044      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c90:	2320      	movs	r3, #32
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c96:	e040      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c98:	2340      	movs	r3, #64	@ 0x40
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9e:	e03c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006ca0:	2380      	movs	r3, #128	@ 0x80
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	e038      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a71      	ldr	r2, [pc, #452]	@ (8006e74 <UART_SetConfig+0x908>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d130      	bne.n	8006d14 <UART_SetConfig+0x7a8>
 8006cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8006e70 <UART_SetConfig+0x904>)
 8006cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d826      	bhi.n	8006d0c <UART_SetConfig+0x7a0>
 8006cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <UART_SetConfig+0x758>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cdd 	.word	0x08006cdd
 8006cc8:	08006ce5 	.word	0x08006ce5
 8006ccc:	08006ced 	.word	0x08006ced
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006d05 	.word	0x08006d05
 8006cdc:	2302      	movs	r3, #2
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce2:	e01a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cea:	e016      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf2:	e012      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfa:	e00e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d02:	e00a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006d04:	2340      	movs	r3, #64	@ 0x40
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0a:	e006      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006d0c:	2380      	movs	r3, #128	@ 0x80
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d12:	e002      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006d14:	2380      	movs	r3, #128	@ 0x80
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a55      	ldr	r2, [pc, #340]	@ (8006e74 <UART_SetConfig+0x908>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	f040 80f8 	bne.w	8006f16 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	dc46      	bgt.n	8006dbc <UART_SetConfig+0x850>
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	db75      	blt.n	8006e1e <UART_SetConfig+0x8b2>
 8006d32:	3b02      	subs	r3, #2
 8006d34:	2b1e      	cmp	r3, #30
 8006d36:	d872      	bhi.n	8006e1e <UART_SetConfig+0x8b2>
 8006d38:	a201      	add	r2, pc, #4	@ (adr r2, 8006d40 <UART_SetConfig+0x7d4>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006dc3 	.word	0x08006dc3
 8006d44:	08006e1f 	.word	0x08006e1f
 8006d48:	08006dcb 	.word	0x08006dcb
 8006d4c:	08006e1f 	.word	0x08006e1f
 8006d50:	08006e1f 	.word	0x08006e1f
 8006d54:	08006e1f 	.word	0x08006e1f
 8006d58:	08006ddb 	.word	0x08006ddb
 8006d5c:	08006e1f 	.word	0x08006e1f
 8006d60:	08006e1f 	.word	0x08006e1f
 8006d64:	08006e1f 	.word	0x08006e1f
 8006d68:	08006e1f 	.word	0x08006e1f
 8006d6c:	08006e1f 	.word	0x08006e1f
 8006d70:	08006e1f 	.word	0x08006e1f
 8006d74:	08006e1f 	.word	0x08006e1f
 8006d78:	08006deb 	.word	0x08006deb
 8006d7c:	08006e1f 	.word	0x08006e1f
 8006d80:	08006e1f 	.word	0x08006e1f
 8006d84:	08006e1f 	.word	0x08006e1f
 8006d88:	08006e1f 	.word	0x08006e1f
 8006d8c:	08006e1f 	.word	0x08006e1f
 8006d90:	08006e1f 	.word	0x08006e1f
 8006d94:	08006e1f 	.word	0x08006e1f
 8006d98:	08006e1f 	.word	0x08006e1f
 8006d9c:	08006e1f 	.word	0x08006e1f
 8006da0:	08006e1f 	.word	0x08006e1f
 8006da4:	08006e1f 	.word	0x08006e1f
 8006da8:	08006e1f 	.word	0x08006e1f
 8006dac:	08006e1f 	.word	0x08006e1f
 8006db0:	08006e1f 	.word	0x08006e1f
 8006db4:	08006e1f 	.word	0x08006e1f
 8006db8:	08006e11 	.word	0x08006e11
 8006dbc:	2b40      	cmp	r3, #64	@ 0x40
 8006dbe:	d02a      	beq.n	8006e16 <UART_SetConfig+0x8aa>
 8006dc0:	e02d      	b.n	8006e1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006dc2:	f7fe fed3 	bl	8005b6c <HAL_RCCEx_GetD3PCLK1Freq>
 8006dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006dc8:	e02f      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fee2 	bl	8005b98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dd8:	e027      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dda:	f107 0318 	add.w	r3, r7, #24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff f82e 	bl	8005e40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de8:	e01f      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dea:	4b21      	ldr	r3, [pc, #132]	@ (8006e70 <UART_SetConfig+0x904>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006df6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e70 <UART_SetConfig+0x904>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	08db      	lsrs	r3, r3, #3
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	4a1d      	ldr	r2, [pc, #116]	@ (8006e78 <UART_SetConfig+0x90c>)
 8006e02:	fa22 f303 	lsr.w	r3, r2, r3
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e08:	e00f      	b.n	8006e2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e78 <UART_SetConfig+0x90c>)
 8006e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0e:	e00c      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e10:	4b1a      	ldr	r3, [pc, #104]	@ (8006e7c <UART_SetConfig+0x910>)
 8006e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e14:	e009      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e1c:	e005      	b.n	8006e2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 81ee 	beq.w	800720e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	4a12      	ldr	r2, [pc, #72]	@ (8006e80 <UART_SetConfig+0x914>)
 8006e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e44:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	4413      	add	r3, r2
 8006e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d305      	bcc.n	8006e62 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d910      	bls.n	8006e84 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e68:	e1d1      	b.n	800720e <UART_SetConfig+0xca2>
 8006e6a:	bf00      	nop
 8006e6c:	40011c00 	.word	0x40011c00
 8006e70:	58024400 	.word	0x58024400
 8006e74:	58000c00 	.word	0x58000c00
 8006e78:	03d09000 	.word	0x03d09000
 8006e7c:	003d0900 	.word	0x003d0900
 8006e80:	0800be40 	.word	0x0800be40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e86:	2200      	movs	r2, #0
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	60fa      	str	r2, [r7, #12]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	4ac0      	ldr	r2, [pc, #768]	@ (8007194 <UART_SetConfig+0xc28>)
 8006e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2200      	movs	r2, #0
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ea6:	f7f9 fa8b 	bl	80003c0 <__aeabi_uldivmod>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	020b      	lsls	r3, r1, #8
 8006ebc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ec0:	0202      	lsls	r2, r0, #8
 8006ec2:	6979      	ldr	r1, [r7, #20]
 8006ec4:	6849      	ldr	r1, [r1, #4]
 8006ec6:	0849      	lsrs	r1, r1, #1
 8006ec8:	2000      	movs	r0, #0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	4605      	mov	r5, r0
 8006ece:	eb12 0804 	adds.w	r8, r2, r4
 8006ed2:	eb43 0905 	adc.w	r9, r3, r5
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	469a      	mov	sl, r3
 8006ede:	4693      	mov	fp, r2
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	465b      	mov	r3, fp
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	f7f9 fa6a 	bl	80003c0 <__aeabi_uldivmod>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006efa:	d308      	bcc.n	8006f0e <UART_SetConfig+0x9a2>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f02:	d204      	bcs.n	8006f0e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f0a:	60da      	str	r2, [r3, #12]
 8006f0c:	e17f      	b.n	800720e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f14:	e17b      	b.n	800720e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f1e:	f040 80bd 	bne.w	800709c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006f22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	dc48      	bgt.n	8006fbc <UART_SetConfig+0xa50>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	db7b      	blt.n	8007026 <UART_SetConfig+0xaba>
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d879      	bhi.n	8007026 <UART_SetConfig+0xaba>
 8006f32:	a201      	add	r2, pc, #4	@ (adr r2, 8006f38 <UART_SetConfig+0x9cc>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006fc3 	.word	0x08006fc3
 8006f3c:	08006fcb 	.word	0x08006fcb
 8006f40:	08007027 	.word	0x08007027
 8006f44:	08007027 	.word	0x08007027
 8006f48:	08006fd3 	.word	0x08006fd3
 8006f4c:	08007027 	.word	0x08007027
 8006f50:	08007027 	.word	0x08007027
 8006f54:	08007027 	.word	0x08007027
 8006f58:	08006fe3 	.word	0x08006fe3
 8006f5c:	08007027 	.word	0x08007027
 8006f60:	08007027 	.word	0x08007027
 8006f64:	08007027 	.word	0x08007027
 8006f68:	08007027 	.word	0x08007027
 8006f6c:	08007027 	.word	0x08007027
 8006f70:	08007027 	.word	0x08007027
 8006f74:	08007027 	.word	0x08007027
 8006f78:	08006ff3 	.word	0x08006ff3
 8006f7c:	08007027 	.word	0x08007027
 8006f80:	08007027 	.word	0x08007027
 8006f84:	08007027 	.word	0x08007027
 8006f88:	08007027 	.word	0x08007027
 8006f8c:	08007027 	.word	0x08007027
 8006f90:	08007027 	.word	0x08007027
 8006f94:	08007027 	.word	0x08007027
 8006f98:	08007027 	.word	0x08007027
 8006f9c:	08007027 	.word	0x08007027
 8006fa0:	08007027 	.word	0x08007027
 8006fa4:	08007027 	.word	0x08007027
 8006fa8:	08007027 	.word	0x08007027
 8006fac:	08007027 	.word	0x08007027
 8006fb0:	08007027 	.word	0x08007027
 8006fb4:	08007027 	.word	0x08007027
 8006fb8:	08007019 	.word	0x08007019
 8006fbc:	2b40      	cmp	r3, #64	@ 0x40
 8006fbe:	d02e      	beq.n	800701e <UART_SetConfig+0xab2>
 8006fc0:	e031      	b.n	8007026 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc2:	f7fd fc07 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8006fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fc8:	e033      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fca:	f7fd fc19 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8006fce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fd0:	e02f      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fdde 	bl	8005b98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe0:	e027      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fe2:	f107 0318 	add.w	r3, r7, #24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe ff2a 	bl	8005e40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff0:	e01f      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ff2:	4b69      	ldr	r3, [pc, #420]	@ (8007198 <UART_SetConfig+0xc2c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ffe:	4b66      	ldr	r3, [pc, #408]	@ (8007198 <UART_SetConfig+0xc2c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	4a64      	ldr	r2, [pc, #400]	@ (800719c <UART_SetConfig+0xc30>)
 800700a:	fa22 f303 	lsr.w	r3, r2, r3
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007010:	e00f      	b.n	8007032 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007012:	4b62      	ldr	r3, [pc, #392]	@ (800719c <UART_SetConfig+0xc30>)
 8007014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007016:	e00c      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007018:	4b61      	ldr	r3, [pc, #388]	@ (80071a0 <UART_SetConfig+0xc34>)
 800701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800701c:	e009      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800701e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007024:	e005      	b.n	8007032 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 80ea 	beq.w	800720e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	4a55      	ldr	r2, [pc, #340]	@ (8007194 <UART_SetConfig+0xc28>)
 8007040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007044:	461a      	mov	r2, r3
 8007046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007048:	fbb3 f3f2 	udiv	r3, r3, r2
 800704c:	005a      	lsls	r2, r3, #1
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	085b      	lsrs	r3, r3, #1
 8007054:	441a      	add	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	fbb2 f3f3 	udiv	r3, r2, r3
 800705e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007062:	2b0f      	cmp	r3, #15
 8007064:	d916      	bls.n	8007094 <UART_SetConfig+0xb28>
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800706c:	d212      	bcs.n	8007094 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800706e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007070:	b29b      	uxth	r3, r3
 8007072:	f023 030f 	bic.w	r3, r3, #15
 8007076:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	085b      	lsrs	r3, r3, #1
 800707c:	b29b      	uxth	r3, r3
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	b29a      	uxth	r2, r3
 8007084:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007086:	4313      	orrs	r3, r2
 8007088:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	e0bc      	b.n	800720e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800709a:	e0b8      	b.n	800720e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800709c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	dc4b      	bgt.n	800713c <UART_SetConfig+0xbd0>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f2c0 8087 	blt.w	80071b8 <UART_SetConfig+0xc4c>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	f200 8084 	bhi.w	80071b8 <UART_SetConfig+0xc4c>
 80070b0:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <UART_SetConfig+0xb4c>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	08007143 	.word	0x08007143
 80070bc:	0800714b 	.word	0x0800714b
 80070c0:	080071b9 	.word	0x080071b9
 80070c4:	080071b9 	.word	0x080071b9
 80070c8:	08007153 	.word	0x08007153
 80070cc:	080071b9 	.word	0x080071b9
 80070d0:	080071b9 	.word	0x080071b9
 80070d4:	080071b9 	.word	0x080071b9
 80070d8:	08007163 	.word	0x08007163
 80070dc:	080071b9 	.word	0x080071b9
 80070e0:	080071b9 	.word	0x080071b9
 80070e4:	080071b9 	.word	0x080071b9
 80070e8:	080071b9 	.word	0x080071b9
 80070ec:	080071b9 	.word	0x080071b9
 80070f0:	080071b9 	.word	0x080071b9
 80070f4:	080071b9 	.word	0x080071b9
 80070f8:	08007173 	.word	0x08007173
 80070fc:	080071b9 	.word	0x080071b9
 8007100:	080071b9 	.word	0x080071b9
 8007104:	080071b9 	.word	0x080071b9
 8007108:	080071b9 	.word	0x080071b9
 800710c:	080071b9 	.word	0x080071b9
 8007110:	080071b9 	.word	0x080071b9
 8007114:	080071b9 	.word	0x080071b9
 8007118:	080071b9 	.word	0x080071b9
 800711c:	080071b9 	.word	0x080071b9
 8007120:	080071b9 	.word	0x080071b9
 8007124:	080071b9 	.word	0x080071b9
 8007128:	080071b9 	.word	0x080071b9
 800712c:	080071b9 	.word	0x080071b9
 8007130:	080071b9 	.word	0x080071b9
 8007134:	080071b9 	.word	0x080071b9
 8007138:	080071ab 	.word	0x080071ab
 800713c:	2b40      	cmp	r3, #64	@ 0x40
 800713e:	d037      	beq.n	80071b0 <UART_SetConfig+0xc44>
 8007140:	e03a      	b.n	80071b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007142:	f7fd fb47 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007146:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007148:	e03c      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800714a:	f7fd fb59 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 800714e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007150:	e038      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fd1e 	bl	8005b98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007160:	e030      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007162:	f107 0318 	add.w	r3, r7, #24
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fe6a 	bl	8005e40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007170:	e028      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007172:	4b09      	ldr	r3, [pc, #36]	@ (8007198 <UART_SetConfig+0xc2c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d012      	beq.n	80071a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800717e:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <UART_SetConfig+0xc2c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	08db      	lsrs	r3, r3, #3
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	4a04      	ldr	r2, [pc, #16]	@ (800719c <UART_SetConfig+0xc30>)
 800718a:	fa22 f303 	lsr.w	r3, r2, r3
 800718e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007190:	e018      	b.n	80071c4 <UART_SetConfig+0xc58>
 8007192:	bf00      	nop
 8007194:	0800be40 	.word	0x0800be40
 8007198:	58024400 	.word	0x58024400
 800719c:	03d09000 	.word	0x03d09000
 80071a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80071a4:	4b24      	ldr	r3, [pc, #144]	@ (8007238 <UART_SetConfig+0xccc>)
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a8:	e00c      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071aa:	4b24      	ldr	r3, [pc, #144]	@ (800723c <UART_SetConfig+0xcd0>)
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ae:	e009      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b6:	e005      	b.n	80071c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80071c2:	bf00      	nop
    }

    if (pclk != 0U)
 80071c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d021      	beq.n	800720e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007240 <UART_SetConfig+0xcd4>)
 80071d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d4:	461a      	mov	r2, r3
 80071d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	441a      	add	r2, r3
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	2b0f      	cmp	r3, #15
 80071f2:	d909      	bls.n	8007208 <UART_SetConfig+0xc9c>
 80071f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071fa:	d205      	bcs.n	8007208 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	b29a      	uxth	r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60da      	str	r2, [r3, #12]
 8007206:	e002      	b.n	800720e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2201      	movs	r2, #1
 8007212:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2201      	movs	r2, #1
 800721a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2200      	movs	r2, #0
 8007222:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2200      	movs	r2, #0
 8007228:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800722a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800722e:	4618      	mov	r0, r3
 8007230:	3748      	adds	r7, #72	@ 0x48
 8007232:	46bd      	mov	sp, r7
 8007234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007238:	03d09000 	.word	0x03d09000
 800723c:	003d0900 	.word	0x003d0900
 8007240:	0800be40 	.word	0x0800be40

08007244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01a      	beq.n	800735a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007342:	d10a      	bne.n	800735a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b098      	sub	sp, #96	@ 0x60
 800738c:	af02      	add	r7, sp, #8
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007398:	f7fa fc96 	bl	8001cc8 <HAL_GetTick>
 800739c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d12f      	bne.n	800740c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b4:	2200      	movs	r2, #0
 80073b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f88e 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d022      	beq.n	800740c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073da:	653b      	str	r3, [r7, #80]	@ 0x50
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e6      	bne.n	80073c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e063      	b.n	80074d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b04      	cmp	r3, #4
 8007418:	d149      	bne.n	80074ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800741a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007422:	2200      	movs	r2, #0
 8007424:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f857 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d03c      	beq.n	80074ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	623b      	str	r3, [r7, #32]
   return(result);
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007452:	633b      	str	r3, [r7, #48]	@ 0x30
 8007454:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	60fb      	str	r3, [r7, #12]
   return(result);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007486:	61fa      	str	r2, [r7, #28]
 8007488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	69b9      	ldr	r1, [r7, #24]
 800748c:	69fa      	ldr	r2, [r7, #28]
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	617b      	str	r3, [r7, #20]
   return(result);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e012      	b.n	80074d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3758      	adds	r7, #88	@ 0x58
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	4613      	mov	r3, r2
 80074ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ec:	e04f      	b.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d04b      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f6:	f7fa fbe7 	bl	8001cc8 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	429a      	cmp	r2, r3
 8007504:	d302      	bcc.n	800750c <UART_WaitOnFlagUntilTimeout+0x30>
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e04e      	b.n	80075ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d037      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b80      	cmp	r3, #128	@ 0x80
 8007522:	d034      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b40      	cmp	r3, #64	@ 0x40
 8007528:	d031      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b08      	cmp	r3, #8
 8007536:	d110      	bne.n	800755a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2208      	movs	r2, #8
 800753e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f839 	bl	80075b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2208      	movs	r2, #8
 800754a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e029      	b.n	80075ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007568:	d111      	bne.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f81f 	bl	80075b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e00f      	b.n	80075ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4013      	ands	r3, r2
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	429a      	cmp	r2, r3
 800759c:	bf0c      	ite	eq
 800759e:	2301      	moveq	r3, #1
 80075a0:	2300      	movne	r3, #0
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d0a0      	beq.n	80074ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b095      	sub	sp, #84	@ 0x54
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075de:	643b      	str	r3, [r7, #64]	@ 0x40
 80075e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e6      	bne.n	80075c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	61fb      	str	r3, [r7, #28]
   return(result);
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	4b1e      	ldr	r3, [pc, #120]	@ (8007680 <UART_EndRxTransfer+0xc8>)
 8007606:	4013      	ands	r3, r2
 8007608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007614:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800762a:	2b01      	cmp	r3, #1
 800762c:	d118      	bne.n	8007660 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	60bb      	str	r3, [r7, #8]
   return(result);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 0310 	bic.w	r3, r3, #16
 8007642:	647b      	str	r3, [r7, #68]	@ 0x44
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6979      	ldr	r1, [r7, #20]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	613b      	str	r3, [r7, #16]
   return(result);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e6      	bne.n	800762e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007674:	bf00      	nop
 8007676:	3754      	adds	r7, #84	@ 0x54
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	effffffe 	.word	0xeffffffe

08007684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_UARTEx_DisableFifoMode+0x16>
 8007696:	2302      	movs	r3, #2
 8007698:	e027      	b.n	80076ea <HAL_UARTEx_DisableFifoMode+0x66>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2224      	movs	r2, #36	@ 0x24
 80076a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0201 	bic.w	r2, r2, #1
 80076c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80076c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800770a:	2302      	movs	r3, #2
 800770c:	e02d      	b.n	800776a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2224      	movs	r2, #36	@ 0x24
 800771a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0201 	bic.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f850 	bl	80077f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007786:	2302      	movs	r3, #2
 8007788:	e02d      	b.n	80077e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2224      	movs	r2, #36	@ 0x24
 8007796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0201 	bic.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f812 	bl	80077f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d108      	bne.n	8007812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007810:	e031      	b.n	8007876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007812:	2310      	movs	r3, #16
 8007814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007816:	2310      	movs	r3, #16
 8007818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	0e5b      	lsrs	r3, r3, #25
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	0f5b      	lsrs	r3, r3, #29
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	7b3a      	ldrb	r2, [r7, #12]
 800783e:	4911      	ldr	r1, [pc, #68]	@ (8007884 <UARTEx_SetNbDataToProcess+0x94>)
 8007840:	5c8a      	ldrb	r2, [r1, r2]
 8007842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007846:	7b3a      	ldrb	r2, [r7, #12]
 8007848:	490f      	ldr	r1, [pc, #60]	@ (8007888 <UARTEx_SetNbDataToProcess+0x98>)
 800784a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800784c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	7b7a      	ldrb	r2, [r7, #13]
 800785c:	4909      	ldr	r1, [pc, #36]	@ (8007884 <UARTEx_SetNbDataToProcess+0x94>)
 800785e:	5c8a      	ldrb	r2, [r1, r2]
 8007860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007864:	7b7a      	ldrb	r2, [r7, #13]
 8007866:	4908      	ldr	r1, [pc, #32]	@ (8007888 <UARTEx_SetNbDataToProcess+0x98>)
 8007868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800786a:	fb93 f3f2 	sdiv	r3, r3, r2
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	0800be58 	.word	0x0800be58
 8007888:	0800be60 	.word	0x0800be60

0800788c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800788c:	b084      	sub	sp, #16
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	f107 001c 	add.w	r0, r7, #28
 800789a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800789e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d121      	bne.n	80078ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007968 <USB_CoreInit+0xdc>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d105      	bne.n	80078de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 fafa 	bl	8008ed8 <USB_CoreReset>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]
 80078e8:	e01b      	b.n	8007922 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 faee 	bl	8008ed8 <USB_CoreReset>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007900:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007904:	2b00      	cmp	r3, #0
 8007906:	d106      	bne.n	8007916 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38
 8007914:	e005      	b.n	8007922 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007922:	7fbb      	ldrb	r3, [r7, #30]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d116      	bne.n	8007956 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800792c:	b29a      	uxth	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007936:	4b0d      	ldr	r3, [pc, #52]	@ (800796c <USB_CoreInit+0xe0>)
 8007938:	4313      	orrs	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f043 0206 	orr.w	r2, r3, #6
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f043 0220 	orr.w	r2, r3, #32
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007962:	b004      	add	sp, #16
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	ffbdffbf 	.word	0xffbdffbf
 800796c:	03ee0000 	.word	0x03ee0000

08007970 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d165      	bne.n	8007a50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4a41      	ldr	r2, [pc, #260]	@ (8007a8c <USB_SetTurnaroundTime+0x11c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d906      	bls.n	800799a <USB_SetTurnaroundTime+0x2a>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4a40      	ldr	r2, [pc, #256]	@ (8007a90 <USB_SetTurnaroundTime+0x120>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d202      	bcs.n	800799a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007994:	230f      	movs	r3, #15
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	e062      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	4a3c      	ldr	r2, [pc, #240]	@ (8007a90 <USB_SetTurnaroundTime+0x120>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d306      	bcc.n	80079b0 <USB_SetTurnaroundTime+0x40>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	4a3b      	ldr	r2, [pc, #236]	@ (8007a94 <USB_SetTurnaroundTime+0x124>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d202      	bcs.n	80079b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079aa:	230e      	movs	r3, #14
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	e057      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4a38      	ldr	r2, [pc, #224]	@ (8007a94 <USB_SetTurnaroundTime+0x124>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d306      	bcc.n	80079c6 <USB_SetTurnaroundTime+0x56>
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4a37      	ldr	r2, [pc, #220]	@ (8007a98 <USB_SetTurnaroundTime+0x128>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d202      	bcs.n	80079c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80079c0:	230d      	movs	r3, #13
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	e04c      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4a33      	ldr	r2, [pc, #204]	@ (8007a98 <USB_SetTurnaroundTime+0x128>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d306      	bcc.n	80079dc <USB_SetTurnaroundTime+0x6c>
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	4a32      	ldr	r2, [pc, #200]	@ (8007a9c <USB_SetTurnaroundTime+0x12c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d802      	bhi.n	80079dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80079d6:	230c      	movs	r3, #12
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	e041      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	4a2f      	ldr	r2, [pc, #188]	@ (8007a9c <USB_SetTurnaroundTime+0x12c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d906      	bls.n	80079f2 <USB_SetTurnaroundTime+0x82>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4a2e      	ldr	r2, [pc, #184]	@ (8007aa0 <USB_SetTurnaroundTime+0x130>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d802      	bhi.n	80079f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80079ec:	230b      	movs	r3, #11
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e036      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa0 <USB_SetTurnaroundTime+0x130>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d906      	bls.n	8007a08 <USB_SetTurnaroundTime+0x98>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	4a29      	ldr	r2, [pc, #164]	@ (8007aa4 <USB_SetTurnaroundTime+0x134>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d802      	bhi.n	8007a08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a02:	230a      	movs	r3, #10
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	e02b      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	4a26      	ldr	r2, [pc, #152]	@ (8007aa4 <USB_SetTurnaroundTime+0x134>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d906      	bls.n	8007a1e <USB_SetTurnaroundTime+0xae>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	4a25      	ldr	r2, [pc, #148]	@ (8007aa8 <USB_SetTurnaroundTime+0x138>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d202      	bcs.n	8007a1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a18:	2309      	movs	r3, #9
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e020      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	4a21      	ldr	r2, [pc, #132]	@ (8007aa8 <USB_SetTurnaroundTime+0x138>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d306      	bcc.n	8007a34 <USB_SetTurnaroundTime+0xc4>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4a20      	ldr	r2, [pc, #128]	@ (8007aac <USB_SetTurnaroundTime+0x13c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d802      	bhi.n	8007a34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a2e:	2308      	movs	r3, #8
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e015      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4a1d      	ldr	r2, [pc, #116]	@ (8007aac <USB_SetTurnaroundTime+0x13c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d906      	bls.n	8007a4a <USB_SetTurnaroundTime+0xda>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab0 <USB_SetTurnaroundTime+0x140>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d202      	bcs.n	8007a4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a44:	2307      	movs	r3, #7
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	e00a      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a4a:	2306      	movs	r3, #6
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	e007      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a56:	2309      	movs	r3, #9
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e001      	b.n	8007a60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a5c:	2309      	movs	r3, #9
 8007a5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	68da      	ldr	r2, [r3, #12]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	029b      	lsls	r3, r3, #10
 8007a74:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	371c      	adds	r7, #28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	00d8acbf 	.word	0x00d8acbf
 8007a90:	00e4e1c0 	.word	0x00e4e1c0
 8007a94:	00f42400 	.word	0x00f42400
 8007a98:	01067380 	.word	0x01067380
 8007a9c:	011a499f 	.word	0x011a499f
 8007aa0:	01312cff 	.word	0x01312cff
 8007aa4:	014ca43f 	.word	0x014ca43f
 8007aa8:	016e3600 	.word	0x016e3600
 8007aac:	01a6ab1f 	.word	0x01a6ab1f
 8007ab0:	01e84800 	.word	0x01e84800

08007ab4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f043 0201 	orr.w	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d115      	bne.n	8007b46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b26:	200a      	movs	r0, #10
 8007b28:	f7fa f8da 	bl	8001ce0 <HAL_Delay>
      ms += 10U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	330a      	adds	r3, #10
 8007b30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 f93f 	bl	8008db6 <USB_GetMode>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d01e      	beq.n	8007b7c <USB_SetCurrentMode+0x84>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b42:	d9f0      	bls.n	8007b26 <USB_SetCurrentMode+0x2e>
 8007b44:	e01a      	b.n	8007b7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d115      	bne.n	8007b78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b58:	200a      	movs	r0, #10
 8007b5a:	f7fa f8c1 	bl	8001ce0 <HAL_Delay>
      ms += 10U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	330a      	adds	r3, #10
 8007b62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f926 	bl	8008db6 <USB_GetMode>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d005      	beq.n	8007b7c <USB_SetCurrentMode+0x84>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b74:	d9f0      	bls.n	8007b58 <USB_SetCurrentMode+0x60>
 8007b76:	e001      	b.n	8007b7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e005      	b.n	8007b88 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007b80:	d101      	bne.n	8007b86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b90:	b084      	sub	sp, #16
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b086      	sub	sp, #24
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007baa:	2300      	movs	r3, #0
 8007bac:	613b      	str	r3, [r7, #16]
 8007bae:	e009      	b.n	8007bc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	3340      	adds	r3, #64	@ 0x40
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	2200      	movs	r2, #0
 8007bbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	613b      	str	r3, [r7, #16]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	2b0e      	cmp	r3, #14
 8007bc8:	d9f2      	bls.n	8007bb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d11c      	bne.n	8007c0c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007be0:	f043 0302 	orr.w	r3, r3, #2
 8007be4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e005      	b.n	8007c18 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c1e:	461a      	mov	r2, r3
 8007c20:	2300      	movs	r3, #0
 8007c22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d10d      	bne.n	8007c48 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f968 	bl	8007f0c <USB_SetDevSpeed>
 8007c3c:	e008      	b.n	8007c50 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c3e:	2101      	movs	r1, #1
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f963 	bl	8007f0c <USB_SetDevSpeed>
 8007c46:	e003      	b.n	8007c50 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c48:	2103      	movs	r1, #3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f95e 	bl	8007f0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c50:	2110      	movs	r1, #16
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f8fa 	bl	8007e4c <USB_FlushTxFifo>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f924 	bl	8007eb0 <USB_FlushRxFifo>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c78:	461a      	mov	r2, r3
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c84:	461a      	mov	r2, r3
 8007c86:	2300      	movs	r3, #0
 8007c88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c90:	461a      	mov	r2, r3
 8007c92:	2300      	movs	r3, #0
 8007c94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c96:	2300      	movs	r3, #0
 8007c98:	613b      	str	r3, [r7, #16]
 8007c9a:	e043      	b.n	8007d24 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cb2:	d118      	bne.n	8007ce6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10a      	bne.n	8007cd0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	e013      	b.n	8007cf8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	e008      	b.n	8007cf8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d04:	461a      	mov	r2, r3
 8007d06:	2300      	movs	r3, #0
 8007d08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d16:	461a      	mov	r2, r3
 8007d18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	3301      	adds	r3, #1
 8007d22:	613b      	str	r3, [r7, #16]
 8007d24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d28:	461a      	mov	r2, r3
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d3b5      	bcc.n	8007c9c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d30:	2300      	movs	r3, #0
 8007d32:	613b      	str	r3, [r7, #16]
 8007d34:	e043      	b.n	8007dbe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d4c:	d118      	bne.n	8007d80 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10a      	bne.n	8007d6a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d60:	461a      	mov	r2, r3
 8007d62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	e013      	b.n	8007d92 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d76:	461a      	mov	r2, r3
 8007d78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	e008      	b.n	8007d92 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	2300      	movs	r3, #0
 8007d90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9e:	461a      	mov	r2, r3
 8007da0:	2300      	movs	r3, #0
 8007da2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db0:	461a      	mov	r2, r3
 8007db2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007db6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d3b5      	bcc.n	8007d36 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ddc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007dea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f043 0210 	orr.w	r2, r3, #16
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699a      	ldr	r2, [r3, #24]
 8007e04:	4b0f      	ldr	r3, [pc, #60]	@ (8007e44 <USB_DevInit+0x2b4>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	f043 0208 	orr.w	r2, r3, #8
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d105      	bne.n	8007e34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	4b06      	ldr	r3, [pc, #24]	@ (8007e48 <USB_DevInit+0x2b8>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e40:	b004      	add	sp, #16
 8007e42:	4770      	bx	lr
 8007e44:	803c3800 	.word	0x803c3800
 8007e48:	40000004 	.word	0x40000004

08007e4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e66:	d901      	bls.n	8007e6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e01b      	b.n	8007ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	daf2      	bge.n	8007e5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	019b      	lsls	r3, r3, #6
 8007e7c:	f043 0220 	orr.w	r2, r3, #32
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e90:	d901      	bls.n	8007e96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e006      	b.n	8007ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	d0f0      	beq.n	8007e84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ec8:	d901      	bls.n	8007ece <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e018      	b.n	8007f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	daf2      	bge.n	8007ebc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2210      	movs	r2, #16
 8007ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007eec:	d901      	bls.n	8007ef2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e006      	b.n	8007f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f003 0310 	and.w	r3, r3, #16
 8007efa:	2b10      	cmp	r3, #16
 8007efc:	d0f0      	beq.n	8007ee0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	68f9      	ldr	r1, [r7, #12]
 8007f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b087      	sub	sp, #28
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0306 	and.w	r3, r3, #6
 8007f56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d102      	bne.n	8007f64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75fb      	strb	r3, [r7, #23]
 8007f62:	e00a      	b.n	8007f7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d002      	beq.n	8007f70 <USB_GetDevSpeed+0x32>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b06      	cmp	r3, #6
 8007f6e:	d102      	bne.n	8007f76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f70:	2302      	movs	r3, #2
 8007f72:	75fb      	strb	r3, [r7, #23]
 8007f74:	e001      	b.n	8007f7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f76:	230f      	movs	r3, #15
 8007f78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d139      	bne.n	8008018 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 030f 	and.w	r3, r3, #15
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	68f9      	ldr	r1, [r7, #12]
 8007fbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d153      	bne.n	8008084 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ff8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	059b      	lsls	r3, r3, #22
 8007ffe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008000:	431a      	orrs	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	0159      	lsls	r1, r3, #5
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	440b      	add	r3, r1
 800800a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800e:	4619      	mov	r1, r3
 8008010:	4b20      	ldr	r3, [pc, #128]	@ (8008094 <USB_ActivateEndpoint+0x10c>)
 8008012:	4313      	orrs	r3, r2
 8008014:	600b      	str	r3, [r1, #0]
 8008016:	e035      	b.n	8008084 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	f003 030f 	and.w	r3, r3, #15
 8008028:	2101      	movs	r1, #1
 800802a:	fa01 f303 	lsl.w	r3, r1, r3
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	68f9      	ldr	r1, [r7, #12]
 8008032:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008036:	4313      	orrs	r3, r2
 8008038:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d119      	bne.n	8008084 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	791b      	ldrb	r3, [r3, #4]
 800806a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800806c:	430b      	orrs	r3, r1
 800806e:	431a      	orrs	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	0159      	lsls	r1, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	440b      	add	r3, r1
 8008078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807c:	4619      	mov	r1, r3
 800807e:	4b05      	ldr	r3, [pc, #20]	@ (8008094 <USB_ActivateEndpoint+0x10c>)
 8008080:	4313      	orrs	r3, r2
 8008082:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	10008000 	.word	0x10008000

08008098 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d161      	bne.n	8008178 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ca:	d11f      	bne.n	800810c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	440a      	add	r2, r1
 8008102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008106:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800810a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	f003 030f 	and.w	r3, r3, #15
 800811c:	2101      	movs	r1, #1
 800811e:	fa01 f303 	lsl.w	r3, r1, r3
 8008122:	b29b      	uxth	r3, r3
 8008124:	43db      	mvns	r3, r3
 8008126:	68f9      	ldr	r1, [r7, #12]
 8008128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800812c:	4013      	ands	r3, r2
 800812e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	2101      	movs	r1, #1
 8008142:	fa01 f303 	lsl.w	r3, r1, r3
 8008146:	b29b      	uxth	r3, r3
 8008148:	43db      	mvns	r3, r3
 800814a:	68f9      	ldr	r1, [r7, #12]
 800814c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008150:	4013      	ands	r3, r2
 8008152:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4413      	add	r3, r2
 800815c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	0159      	lsls	r1, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	440b      	add	r3, r1
 800816a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800816e:	4619      	mov	r1, r3
 8008170:	4b35      	ldr	r3, [pc, #212]	@ (8008248 <USB_DeactivateEndpoint+0x1b0>)
 8008172:	4013      	ands	r3, r2
 8008174:	600b      	str	r3, [r1, #0]
 8008176:	e060      	b.n	800823a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800818a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800818e:	d11f      	bne.n	80081d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	0151      	lsls	r1, r2, #5
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	440a      	add	r2, r1
 80081a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	0151      	lsls	r1, r2, #5
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	440a      	add	r2, r1
 80081c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	2101      	movs	r1, #1
 80081e2:	fa01 f303 	lsl.w	r3, r1, r3
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	43db      	mvns	r3, r3
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081f0:	4013      	ands	r3, r2
 80081f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081fa:	69da      	ldr	r2, [r3, #28]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	2101      	movs	r1, #1
 8008206:	fa01 f303 	lsl.w	r3, r1, r3
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	43db      	mvns	r3, r3
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008214:	4013      	ands	r3, r2
 8008216:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	0159      	lsls	r1, r3, #5
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	440b      	add	r3, r1
 800822e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008232:	4619      	mov	r1, r3
 8008234:	4b05      	ldr	r3, [pc, #20]	@ (800824c <USB_DeactivateEndpoint+0x1b4>)
 8008236:	4013      	ands	r3, r2
 8008238:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	ec337800 	.word	0xec337800
 800824c:	eff37800 	.word	0xeff37800

08008250 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08a      	sub	sp, #40	@ 0x28
 8008254:	af02      	add	r7, sp, #8
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b01      	cmp	r3, #1
 800826e:	f040 8185 	bne.w	800857c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d132      	bne.n	80082e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	0159      	lsls	r1, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	440b      	add	r3, r1
 8008290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008294:	4619      	mov	r1, r3
 8008296:	4ba7      	ldr	r3, [pc, #668]	@ (8008534 <USB_EPStartXfer+0x2e4>)
 8008298:	4013      	ands	r3, r2
 800829a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	0159      	lsls	r1, r3, #5
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	440b      	add	r3, r1
 80082d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d6:	4619      	mov	r1, r3
 80082d8:	4b97      	ldr	r3, [pc, #604]	@ (8008538 <USB_EPStartXfer+0x2e8>)
 80082da:	4013      	ands	r3, r2
 80082dc:	610b      	str	r3, [r1, #16]
 80082de:	e097      	b.n	8008410 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ec:	691a      	ldr	r2, [r3, #16]
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	0159      	lsls	r1, r3, #5
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	440b      	add	r3, r1
 80082f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fa:	4619      	mov	r1, r3
 80082fc:	4b8e      	ldr	r3, [pc, #568]	@ (8008538 <USB_EPStartXfer+0x2e8>)
 80082fe:	4013      	ands	r3, r2
 8008300:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800830e:	691a      	ldr	r2, [r3, #16]
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	0159      	lsls	r1, r3, #5
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	440b      	add	r3, r1
 8008318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800831c:	4619      	mov	r1, r3
 800831e:	4b85      	ldr	r3, [pc, #532]	@ (8008534 <USB_EPStartXfer+0x2e4>)
 8008320:	4013      	ands	r3, r2
 8008322:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d11a      	bne.n	8008360 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	429a      	cmp	r2, r3
 8008334:	d903      	bls.n	800833e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	4413      	add	r3, r2
 8008346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	0151      	lsls	r1, r2, #5
 8008350:	69fa      	ldr	r2, [r7, #28]
 8008352:	440a      	add	r2, r1
 8008354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008358:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800835c:	6113      	str	r3, [r2, #16]
 800835e:	e044      	b.n	80083ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	4413      	add	r3, r2
 800836a:	1e5a      	subs	r2, r3, #1
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	fbb2 f3f3 	udiv	r3, r2, r3
 8008374:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	8afb      	ldrh	r3, [r7, #22]
 8008386:	04d9      	lsls	r1, r3, #19
 8008388:	4b6c      	ldr	r3, [pc, #432]	@ (800853c <USB_EPStartXfer+0x2ec>)
 800838a:	400b      	ands	r3, r1
 800838c:	69b9      	ldr	r1, [r7, #24]
 800838e:	0148      	lsls	r0, r1, #5
 8008390:	69f9      	ldr	r1, [r7, #28]
 8008392:	4401      	add	r1, r0
 8008394:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008398:	4313      	orrs	r3, r2
 800839a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	791b      	ldrb	r3, [r3, #4]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d122      	bne.n	80083ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	0151      	lsls	r1, r2, #5
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	440a      	add	r2, r1
 80083ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80083c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	8afb      	ldrh	r3, [r7, #22]
 80083d4:	075b      	lsls	r3, r3, #29
 80083d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80083da:	69b9      	ldr	r1, [r7, #24]
 80083dc:	0148      	lsls	r0, r1, #5
 80083de:	69f9      	ldr	r1, [r7, #28]
 80083e0:	4401      	add	r1, r0
 80083e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80083e6:	4313      	orrs	r3, r2
 80083e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008400:	69b9      	ldr	r1, [r7, #24]
 8008402:	0148      	lsls	r0, r1, #5
 8008404:	69f9      	ldr	r1, [r7, #28]
 8008406:	4401      	add	r1, r0
 8008408:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800840c:	4313      	orrs	r3, r2
 800840e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d14b      	bne.n	80084ae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800842a:	461a      	mov	r2, r3
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	791b      	ldrb	r3, [r3, #4]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d128      	bne.n	800848c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008446:	2b00      	cmp	r3, #0
 8008448:	d110      	bne.n	800846c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	0151      	lsls	r1, r2, #5
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	440a      	add	r2, r1
 8008460:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008464:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	e00f      	b.n	800848c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800848a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	e169      	b.n	8008782 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80084cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	791b      	ldrb	r3, [r3, #4]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d015      	beq.n	8008502 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 8151 	beq.w	8008782 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	f003 030f 	and.w	r3, r3, #15
 80084f0:	2101      	movs	r1, #1
 80084f2:	fa01 f303 	lsl.w	r3, r1, r3
 80084f6:	69f9      	ldr	r1, [r7, #28]
 80084f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084fc:	4313      	orrs	r3, r2
 80084fe:	634b      	str	r3, [r1, #52]	@ 0x34
 8008500:	e13f      	b.n	8008782 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800850e:	2b00      	cmp	r3, #0
 8008510:	d116      	bne.n	8008540 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	0151      	lsls	r1, r2, #5
 8008524:	69fa      	ldr	r2, [r7, #28]
 8008526:	440a      	add	r2, r1
 8008528:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800852c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	e015      	b.n	8008560 <USB_EPStartXfer+0x310>
 8008534:	e007ffff 	.word	0xe007ffff
 8008538:	fff80000 	.word	0xfff80000
 800853c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	0151      	lsls	r1, r2, #5
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	440a      	add	r2, r1
 8008556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800855a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800855e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	68d9      	ldr	r1, [r3, #12]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	b298      	uxth	r0, r3
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	4603      	mov	r3, r0
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f9b9 	bl	80088ec <USB_WritePacket>
 800857a:	e102      	b.n	8008782 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008588:	691a      	ldr	r2, [r3, #16]
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	0159      	lsls	r1, r3, #5
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	440b      	add	r3, r1
 8008592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008596:	4619      	mov	r1, r3
 8008598:	4b7c      	ldr	r3, [pc, #496]	@ (800878c <USB_EPStartXfer+0x53c>)
 800859a:	4013      	ands	r3, r2
 800859c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	0159      	lsls	r1, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	440b      	add	r3, r1
 80085b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b8:	4619      	mov	r1, r3
 80085ba:	4b75      	ldr	r3, [pc, #468]	@ (8008790 <USB_EPStartXfer+0x540>)
 80085bc:	4013      	ands	r3, r2
 80085be:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d12f      	bne.n	8008626 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	689a      	ldr	r2, [r3, #8]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085f4:	69b9      	ldr	r1, [r7, #24]
 80085f6:	0148      	lsls	r0, r1, #5
 80085f8:	69f9      	ldr	r1, [r7, #28]
 80085fa:	4401      	add	r1, r0
 80085fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008600:	4313      	orrs	r3, r2
 8008602:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	0151      	lsls	r1, r2, #5
 8008616:	69fa      	ldr	r2, [r7, #28]
 8008618:	440a      	add	r2, r1
 800861a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800861e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008622:	6113      	str	r3, [r2, #16]
 8008624:	e05f      	b.n	80086e6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d123      	bne.n	8008676 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008644:	69b9      	ldr	r1, [r7, #24]
 8008646:	0148      	lsls	r0, r1, #5
 8008648:	69f9      	ldr	r1, [r7, #28]
 800864a:	4401      	add	r1, r0
 800864c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008650:	4313      	orrs	r3, r2
 8008652:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800866e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008672:	6113      	str	r3, [r2, #16]
 8008674:	e037      	b.n	80086e6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	4413      	add	r3, r2
 8008680:	1e5a      	subs	r2, r3, #1
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	fbb2 f3f3 	udiv	r3, r2, r3
 800868a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	8afa      	ldrh	r2, [r7, #22]
 8008692:	fb03 f202 	mul.w	r2, r3, r2
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a6:	691a      	ldr	r2, [r3, #16]
 80086a8:	8afb      	ldrh	r3, [r7, #22]
 80086aa:	04d9      	lsls	r1, r3, #19
 80086ac:	4b39      	ldr	r3, [pc, #228]	@ (8008794 <USB_EPStartXfer+0x544>)
 80086ae:	400b      	ands	r3, r1
 80086b0:	69b9      	ldr	r1, [r7, #24]
 80086b2:	0148      	lsls	r0, r1, #5
 80086b4:	69f9      	ldr	r1, [r7, #28]
 80086b6:	4401      	add	r1, r0
 80086b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80086bc:	4313      	orrs	r3, r2
 80086be:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086cc:	691a      	ldr	r2, [r3, #16]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086d6:	69b9      	ldr	r1, [r7, #24]
 80086d8:	0148      	lsls	r0, r1, #5
 80086da:	69f9      	ldr	r1, [r7, #28]
 80086dc:	4401      	add	r1, r0
 80086de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80086e2:	4313      	orrs	r3, r2
 80086e4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d10d      	bne.n	8008708 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d009      	beq.n	8008708 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	68d9      	ldr	r1, [r3, #12]
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008704:	460a      	mov	r2, r1
 8008706:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	791b      	ldrb	r3, [r3, #4]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d128      	bne.n	8008762 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800871c:	2b00      	cmp	r3, #0
 800871e:	d110      	bne.n	8008742 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	0151      	lsls	r1, r2, #5
 8008732:	69fa      	ldr	r2, [r7, #28]
 8008734:	440a      	add	r2, r1
 8008736:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800873a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	e00f      	b.n	8008762 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	440a      	add	r2, r1
 8008758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800875c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008760:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	0151      	lsls	r1, r2, #5
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	440a      	add	r2, r1
 8008778:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800877c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008780:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	fff80000 	.word	0xfff80000
 8008790:	e007ffff 	.word	0xe007ffff
 8008794:	1ff80000 	.word	0x1ff80000

08008798 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	785b      	ldrb	r3, [r3, #1]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d14a      	bne.n	800884c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087ce:	f040 8086 	bne.w	80088de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	7812      	ldrb	r2, [r2, #0]
 80087e6:	0151      	lsls	r1, r2, #5
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	440a      	add	r2, r1
 80087ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	7812      	ldrb	r2, [r2, #0]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	440a      	add	r2, r1
 8008810:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008818:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008826:	4293      	cmp	r3, r2
 8008828:	d902      	bls.n	8008830 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	75fb      	strb	r3, [r7, #23]
          break;
 800882e:	e056      	b.n	80088de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	4413      	add	r3, r2
 800883a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008844:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008848:	d0e7      	beq.n	800881a <USB_EPStopXfer+0x82>
 800884a:	e048      	b.n	80088de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008864:	d13b      	bne.n	80088de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	7812      	ldrb	r2, [r2, #0]
 800887a:	0151      	lsls	r1, r2, #5
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	440a      	add	r2, r1
 8008880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008884:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008888:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	0151      	lsls	r1, r2, #5
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	440a      	add	r2, r1
 80088a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d902      	bls.n	80088c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	75fb      	strb	r3, [r7, #23]
          break;
 80088c2:	e00c      	b.n	80088de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088dc:	d0e7      	beq.n	80088ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	371c      	adds	r7, #28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b089      	sub	sp, #36	@ 0x24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	4611      	mov	r1, r2
 80088f8:	461a      	mov	r2, r3
 80088fa:	460b      	mov	r3, r1
 80088fc:	71fb      	strb	r3, [r7, #7]
 80088fe:	4613      	mov	r3, r2
 8008900:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800890a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800890e:	2b00      	cmp	r3, #0
 8008910:	d123      	bne.n	800895a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008912:	88bb      	ldrh	r3, [r7, #4]
 8008914:	3303      	adds	r3, #3
 8008916:	089b      	lsrs	r3, r3, #2
 8008918:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800891a:	2300      	movs	r3, #0
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	e018      	b.n	8008952 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	031a      	lsls	r2, r3, #12
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	4413      	add	r3, r2
 8008928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800892c:	461a      	mov	r2, r3
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	3301      	adds	r3, #1
 8008938:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	3301      	adds	r3, #1
 800893e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	3301      	adds	r3, #1
 8008944:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	3301      	adds	r3, #1
 800894a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	3301      	adds	r3, #1
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	429a      	cmp	r2, r3
 8008958:	d3e2      	bcc.n	8008920 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3724      	adds	r7, #36	@ 0x24
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008968:	b480      	push	{r7}
 800896a:	b08b      	sub	sp, #44	@ 0x2c
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800897e:	88fb      	ldrh	r3, [r7, #6]
 8008980:	089b      	lsrs	r3, r3, #2
 8008982:	b29b      	uxth	r3, r3
 8008984:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008986:	88fb      	ldrh	r3, [r7, #6]
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800898e:	2300      	movs	r3, #0
 8008990:	623b      	str	r3, [r7, #32]
 8008992:	e014      	b.n	80089be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	601a      	str	r2, [r3, #0]
    pDest++;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a2:	3301      	adds	r3, #1
 80089a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	3301      	adds	r3, #1
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	3301      	adds	r3, #1
 80089b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b4:	3301      	adds	r3, #1
 80089b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	3301      	adds	r3, #1
 80089bc:	623b      	str	r3, [r7, #32]
 80089be:	6a3a      	ldr	r2, [r7, #32]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d3e6      	bcc.n	8008994 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80089c6:	8bfb      	ldrh	r3, [r7, #30]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01e      	beq.n	8008a0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089d6:	461a      	mov	r2, r3
 80089d8:	f107 0310 	add.w	r3, r7, #16
 80089dc:	6812      	ldr	r2, [r2, #0]
 80089de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	701a      	strb	r2, [r3, #0]
      i++;
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	3301      	adds	r3, #1
 80089f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fa:	3301      	adds	r3, #1
 80089fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80089fe:	8bfb      	ldrh	r3, [r7, #30]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a04:	8bfb      	ldrh	r3, [r7, #30]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1ea      	bne.n	80089e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	372c      	adds	r7, #44	@ 0x2c
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	785b      	ldrb	r3, [r3, #1]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d12c      	bne.n	8008a8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	db12      	blt.n	8008a6c <USB_EPSetStall+0x54>
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00f      	beq.n	8008a6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	0151      	lsls	r1, r2, #5
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	440a      	add	r2, r1
 8008a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	e02b      	b.n	8008ae6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	db12      	blt.n	8008ac6 <USB_EPSetStall+0xae>
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00f      	beq.n	8008ac6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	0151      	lsls	r1, r2, #5
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	440a      	add	r2, r1
 8008abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ac0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ac4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	0151      	lsls	r1, r2, #5
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	440a      	add	r2, r1
 8008adc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ae0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ae4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d128      	bne.n	8008b62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	0151      	lsls	r1, r2, #5
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	440a      	add	r2, r1
 8008b26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	791b      	ldrb	r3, [r3, #4]
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d003      	beq.n	8008b40 <USB_EPClearStall+0x4c>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	791b      	ldrb	r3, [r3, #4]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d138      	bne.n	8008bb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	0151      	lsls	r1, r2, #5
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	440a      	add	r2, r1
 8008b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	e027      	b.n	8008bb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	0151      	lsls	r1, r2, #5
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	440a      	add	r2, r1
 8008b78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b7c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	791b      	ldrb	r3, [r3, #4]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d003      	beq.n	8008b92 <USB_EPClearStall+0x9e>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	791b      	ldrb	r3, [r3, #4]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d10f      	bne.n	8008bb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	015a      	lsls	r2, r3, #5
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	4413      	add	r3, r2
 8008b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	0151      	lsls	r1, r2, #5
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	440a      	add	r2, r1
 8008ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bde:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008be2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	011b      	lsls	r3, r3, #4
 8008bf0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008bf4:	68f9      	ldr	r1, [r7, #12]
 8008bf6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c26:	f023 0303 	bic.w	r3, r3, #3
 8008c2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c3a:	f023 0302 	bic.w	r3, r3, #2
 8008c3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b085      	sub	sp, #20
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c68:	f023 0303 	bic.w	r3, r3, #3
 8008c6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c7c:	f043 0302 	orr.w	r3, r3, #2
 8008c80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	0c1b      	lsrs	r3, r3, #16
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	b29b      	uxth	r3, r3
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b085      	sub	sp, #20
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	4013      	ands	r3, r2
 8008d4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b087      	sub	sp, #28
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	460b      	mov	r3, r1
 8008d64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	f003 030f 	and.w	r3, r3, #15
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8a:	01db      	lsls	r3, r3, #7
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4013      	ands	r3, r2
 8008da6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008da8:	68bb      	ldr	r3, [r7, #8]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
	...

08008dd4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dee:	4619      	mov	r1, r3
 8008df0:	4b09      	ldr	r3, [pc, #36]	@ (8008e18 <USB_ActivateSetup+0x44>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	fffff800 	.word	0xfffff800

08008e1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	460b      	mov	r3, r1
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	333c      	adds	r3, #60	@ 0x3c
 8008e32:	3304      	adds	r3, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	4a26      	ldr	r2, [pc, #152]	@ (8008ed4 <USB_EP0_OutStart+0xb8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d90a      	bls.n	8008e56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e50:	d101      	bne.n	8008e56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	e037      	b.n	8008ec6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e84:	f043 0318 	orr.w	r3, r3, #24
 8008e88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e98:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008e9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e9e:	7afb      	ldrb	r3, [r7, #11]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d10f      	bne.n	8008ec4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eaa:	461a      	mov	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ebe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008ec2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	4f54300a 	.word	0x4f54300a

08008ed8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ef0:	d901      	bls.n	8008ef6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e01b      	b.n	8008f2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	daf2      	bge.n	8008ee4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f043 0201 	orr.w	r2, r3, #1
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3301      	adds	r3, #1
 8008f12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f1a:	d901      	bls.n	8008f20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e006      	b.n	8008f2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d0f0      	beq.n	8008f0e <USB_CoreReset+0x36>

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
	...

08008f3c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008f48:	2010      	movs	r0, #16
 8008f4a:	f002 f9d9 	bl	800b300 <USBD_static_malloc>
 8008f4e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d109      	bne.n	8008f6a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	32b0      	adds	r2, #176	@ 0xb0
 8008f60:	2100      	movs	r1, #0
 8008f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f66:	2302      	movs	r3, #2
 8008f68:	e048      	b.n	8008ffc <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	32b0      	adds	r2, #176	@ 0xb0
 8008f74:	68f9      	ldr	r1, [r7, #12]
 8008f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	32b0      	adds	r2, #176	@ 0xb0
 8008f84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	7c1b      	ldrb	r3, [r3, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10d      	bne.n	8008fb2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008f96:	4b1b      	ldr	r3, [pc, #108]	@ (8009004 <USBD_HID_Init+0xc8>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	f003 020f 	and.w	r2, r3, #15
 8008f9e:	6879      	ldr	r1, [r7, #4]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	440b      	add	r3, r1
 8008faa:	3326      	adds	r3, #38	@ 0x26
 8008fac:	2207      	movs	r2, #7
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e00c      	b.n	8008fcc <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008fb2:	4b14      	ldr	r3, [pc, #80]	@ (8009004 <USBD_HID_Init+0xc8>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	f003 020f 	and.w	r2, r3, #15
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	3326      	adds	r3, #38	@ 0x26
 8008fc8:	220a      	movs	r2, #10
 8008fca:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009004 <USBD_HID_Init+0xc8>)
 8008fce:	7819      	ldrb	r1, [r3, #0]
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	2203      	movs	r2, #3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f002 f882 	bl	800b0de <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008fda:	4b0a      	ldr	r3, [pc, #40]	@ (8009004 <USBD_HID_Init+0xc8>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	f003 020f 	and.w	r2, r3, #15
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	440b      	add	r3, r1
 8008fee:	3324      	adds	r3, #36	@ 0x24
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	24000273 	.word	0x24000273

08009008 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009014:	4b1f      	ldr	r3, [pc, #124]	@ (8009094 <USBD_HID_DeInit+0x8c>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f002 f885 	bl	800b12a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009020:	4b1c      	ldr	r3, [pc, #112]	@ (8009094 <USBD_HID_DeInit+0x8c>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	f003 020f 	and.w	r2, r3, #15
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	4613      	mov	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	440b      	add	r3, r1
 8009034:	3324      	adds	r3, #36	@ 0x24
 8009036:	2200      	movs	r2, #0
 8009038:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800903a:	4b16      	ldr	r3, [pc, #88]	@ (8009094 <USBD_HID_DeInit+0x8c>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f003 020f 	and.w	r2, r3, #15
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	4613      	mov	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	440b      	add	r3, r1
 800904e:	3326      	adds	r3, #38	@ 0x26
 8009050:	2200      	movs	r2, #0
 8009052:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	32b0      	adds	r2, #176	@ 0xb0
 800905e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d011      	beq.n	800908a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	32b0      	adds	r2, #176	@ 0xb0
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	4618      	mov	r0, r3
 8009076:	f002 f951 	bl	800b31c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	32b0      	adds	r2, #176	@ 0xb0
 8009084:	2100      	movs	r1, #0
 8009086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	24000273 	.word	0x24000273

08009098 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	32b0      	adds	r2, #176	@ 0xb0
 80090ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e0e8      	b.n	8009296 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d046      	beq.n	800915e <USBD_HID_Setup+0xc6>
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	f040 80d8 	bne.w	8009286 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	785b      	ldrb	r3, [r3, #1]
 80090da:	3b02      	subs	r3, #2
 80090dc:	2b09      	cmp	r3, #9
 80090de:	d836      	bhi.n	800914e <USBD_HID_Setup+0xb6>
 80090e0:	a201      	add	r2, pc, #4	@ (adr r2, 80090e8 <USBD_HID_Setup+0x50>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	0800913f 	.word	0x0800913f
 80090ec:	0800911f 	.word	0x0800911f
 80090f0:	0800914f 	.word	0x0800914f
 80090f4:	0800914f 	.word	0x0800914f
 80090f8:	0800914f 	.word	0x0800914f
 80090fc:	0800914f 	.word	0x0800914f
 8009100:	0800914f 	.word	0x0800914f
 8009104:	0800914f 	.word	0x0800914f
 8009108:	0800912d 	.word	0x0800912d
 800910c:	08009111 	.word	0x08009111
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	885b      	ldrh	r3, [r3, #2]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	461a      	mov	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	601a      	str	r2, [r3, #0]
          break;
 800911c:	e01e      	b.n	800915c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 fc0f 	bl	800a948 <USBD_CtlSendData>
          break;
 800912a:	e017      	b.n	800915c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	885b      	ldrh	r3, [r3, #2]
 8009130:	0a1b      	lsrs	r3, r3, #8
 8009132:	b29b      	uxth	r3, r3
 8009134:	b2db      	uxtb	r3, r3
 8009136:	461a      	mov	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	605a      	str	r2, [r3, #4]
          break;
 800913c:	e00e      	b.n	800915c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3304      	adds	r3, #4
 8009142:	2201      	movs	r2, #1
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f001 fbfe 	bl	800a948 <USBD_CtlSendData>
          break;
 800914c:	e006      	b.n	800915c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 fb7c 	bl	800a84e <USBD_CtlError>
          ret = USBD_FAIL;
 8009156:	2303      	movs	r3, #3
 8009158:	75fb      	strb	r3, [r7, #23]
          break;
 800915a:	bf00      	nop
      }
      break;
 800915c:	e09a      	b.n	8009294 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	785b      	ldrb	r3, [r3, #1]
 8009162:	2b0b      	cmp	r3, #11
 8009164:	f200 8086 	bhi.w	8009274 <USBD_HID_Setup+0x1dc>
 8009168:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <USBD_HID_Setup+0xd8>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	080091a1 	.word	0x080091a1
 8009174:	08009283 	.word	0x08009283
 8009178:	08009275 	.word	0x08009275
 800917c:	08009275 	.word	0x08009275
 8009180:	08009275 	.word	0x08009275
 8009184:	08009275 	.word	0x08009275
 8009188:	080091cb 	.word	0x080091cb
 800918c:	08009275 	.word	0x08009275
 8009190:	08009275 	.word	0x08009275
 8009194:	08009275 	.word	0x08009275
 8009198:	08009223 	.word	0x08009223
 800919c:	0800924d 	.word	0x0800924d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d107      	bne.n	80091bc <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80091ac:	f107 030a 	add.w	r3, r7, #10
 80091b0:	2202      	movs	r2, #2
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 fbc7 	bl	800a948 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091ba:	e063      	b.n	8009284 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 fb45 	bl	800a84e <USBD_CtlError>
            ret = USBD_FAIL;
 80091c4:	2303      	movs	r3, #3
 80091c6:	75fb      	strb	r3, [r7, #23]
          break;
 80091c8:	e05c      	b.n	8009284 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	885b      	ldrh	r3, [r3, #2]
 80091ce:	0a1b      	lsrs	r3, r3, #8
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b22      	cmp	r3, #34	@ 0x22
 80091d4:	d108      	bne.n	80091e8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	88db      	ldrh	r3, [r3, #6]
 80091da:	2b3f      	cmp	r3, #63	@ 0x3f
 80091dc:	bf28      	it	cs
 80091de:	233f      	movcs	r3, #63	@ 0x3f
 80091e0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80091e2:	4b2f      	ldr	r3, [pc, #188]	@ (80092a0 <USBD_HID_Setup+0x208>)
 80091e4:	613b      	str	r3, [r7, #16]
 80091e6:	e015      	b.n	8009214 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	885b      	ldrh	r3, [r3, #2]
 80091ec:	0a1b      	lsrs	r3, r3, #8
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b21      	cmp	r3, #33	@ 0x21
 80091f2:	d108      	bne.n	8009206 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80091f4:	4b2b      	ldr	r3, [pc, #172]	@ (80092a4 <USBD_HID_Setup+0x20c>)
 80091f6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	88db      	ldrh	r3, [r3, #6]
 80091fc:	2b09      	cmp	r3, #9
 80091fe:	bf28      	it	cs
 8009200:	2309      	movcs	r3, #9
 8009202:	82bb      	strh	r3, [r7, #20]
 8009204:	e006      	b.n	8009214 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fb20 	bl	800a84e <USBD_CtlError>
            ret = USBD_FAIL;
 800920e:	2303      	movs	r3, #3
 8009210:	75fb      	strb	r3, [r7, #23]
            break;
 8009212:	e037      	b.n	8009284 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009214:	8abb      	ldrh	r3, [r7, #20]
 8009216:	461a      	mov	r2, r3
 8009218:	6939      	ldr	r1, [r7, #16]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 fb94 	bl	800a948 <USBD_CtlSendData>
          break;
 8009220:	e030      	b.n	8009284 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b03      	cmp	r3, #3
 800922c:	d107      	bne.n	800923e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3308      	adds	r3, #8
 8009232:	2201      	movs	r2, #1
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 fb86 	bl	800a948 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800923c:	e022      	b.n	8009284 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 fb04 	bl	800a84e <USBD_CtlError>
            ret = USBD_FAIL;
 8009246:	2303      	movs	r3, #3
 8009248:	75fb      	strb	r3, [r7, #23]
          break;
 800924a:	e01b      	b.n	8009284 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b03      	cmp	r3, #3
 8009256:	d106      	bne.n	8009266 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	885b      	ldrh	r3, [r3, #2]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	461a      	mov	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009264:	e00e      	b.n	8009284 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 faf0 	bl	800a84e <USBD_CtlError>
            ret = USBD_FAIL;
 800926e:	2303      	movs	r3, #3
 8009270:	75fb      	strb	r3, [r7, #23]
          break;
 8009272:	e007      	b.n	8009284 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 fae9 	bl	800a84e <USBD_CtlError>
          ret = USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	75fb      	strb	r3, [r7, #23]
          break;
 8009280:	e000      	b.n	8009284 <USBD_HID_Setup+0x1ec>
          break;
 8009282:	bf00      	nop
      }
      break;
 8009284:	e006      	b.n	8009294 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fae0 	bl	800a84e <USBD_CtlError>
      ret = USBD_FAIL;
 800928e:	2303      	movs	r3, #3
 8009290:	75fb      	strb	r3, [r7, #23]
      break;
 8009292:	bf00      	nop
  }

  return (uint8_t)ret;
 8009294:	7dfb      	ldrb	r3, [r7, #23]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	24000234 	.word	0x24000234
 80092a4:	2400021c 	.word	0x2400021c

080092a8 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	32b0      	adds	r2, #176	@ 0xb0
 80092c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e014      	b.n	80092fa <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d10d      	bne.n	80092f8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	7b1b      	ldrb	r3, [r3, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d109      	bne.n	80092f8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2201      	movs	r2, #1
 80092e8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80092ea:	4b06      	ldr	r3, [pc, #24]	@ (8009304 <USBD_HID_SendReport+0x5c>)
 80092ec:	7819      	ldrb	r1, [r3, #0]
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f001 ffc1 	bl	800b27a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	24000273 	.word	0x24000273

08009308 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009310:	2181      	movs	r1, #129	@ 0x81
 8009312:	4809      	ldr	r0, [pc, #36]	@ (8009338 <USBD_HID_GetFSCfgDesc+0x30>)
 8009314:	f000 fc3b 	bl	8009b8e <USBD_GetEpDesc>
 8009318:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	220a      	movs	r2, #10
 8009324:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2222      	movs	r2, #34	@ 0x22
 800932a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800932c:	4b02      	ldr	r3, [pc, #8]	@ (8009338 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	240001f8 	.word	0x240001f8

0800933c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009344:	2181      	movs	r1, #129	@ 0x81
 8009346:	4809      	ldr	r0, [pc, #36]	@ (800936c <USBD_HID_GetHSCfgDesc+0x30>)
 8009348:	f000 fc21 	bl	8009b8e <USBD_GetEpDesc>
 800934c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2207      	movs	r2, #7
 8009358:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2222      	movs	r2, #34	@ 0x22
 800935e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009360:	4b02      	ldr	r3, [pc, #8]	@ (800936c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	240001f8 	.word	0x240001f8

08009370 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009378:	2181      	movs	r1, #129	@ 0x81
 800937a:	4809      	ldr	r0, [pc, #36]	@ (80093a0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800937c:	f000 fc07 	bl	8009b8e <USBD_GetEpDesc>
 8009380:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	220a      	movs	r2, #10
 800938c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2222      	movs	r2, #34	@ 0x22
 8009392:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009394:	4b02      	ldr	r3, [pc, #8]	@ (80093a0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	240001f8 	.word	0x240001f8

080093a4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	32b0      	adds	r2, #176	@ 0xb0
 80093ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093be:	2200      	movs	r2, #0
 80093c0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	220a      	movs	r2, #10
 80093dc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80093de:	4b03      	ldr	r3, [pc, #12]	@ (80093ec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	24000228 	.word	0x24000228

080093f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	4613      	mov	r3, r2
 80093fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009404:	2303      	movs	r3, #3
 8009406:	e01f      	b.n	8009448 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	79fa      	ldrb	r2, [r7, #7]
 800943a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f001 fde1 	bl	800b004 <USBD_LL_Init>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009446:	7dfb      	ldrb	r3, [r7, #23]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009464:	2303      	movs	r3, #3
 8009466:	e025      	b.n	80094b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	32ae      	adds	r2, #174	@ 0xae
 800947a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00f      	beq.n	80094a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	32ae      	adds	r2, #174	@ 0xae
 800948e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009494:	f107 020e 	add.w	r2, r7, #14
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
 800949c:	4602      	mov	r2, r0
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 fdef 	bl	800b0a8 <USBD_LL_Start>
 80094ca:	4603      	mov	r3, r0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009500:	2b00      	cmp	r3, #0
 8009502:	d009      	beq.n	8009518 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	4611      	mov	r1, r2
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	4798      	blx	r3
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	78fa      	ldrb	r2, [r7, #3]
 800953c:	4611      	mov	r1, r2
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009548:	2303      	movs	r3, #3
 800954a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	4618      	mov	r0, r3
 800956a:	f001 f936 	bl	800a7da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800957c:	461a      	mov	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800958a:	f003 031f 	and.w	r3, r3, #31
 800958e:	2b02      	cmp	r3, #2
 8009590:	d01a      	beq.n	80095c8 <USBD_LL_SetupStage+0x72>
 8009592:	2b02      	cmp	r3, #2
 8009594:	d822      	bhi.n	80095dc <USBD_LL_SetupStage+0x86>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <USBD_LL_SetupStage+0x4a>
 800959a:	2b01      	cmp	r3, #1
 800959c:	d00a      	beq.n	80095b4 <USBD_LL_SetupStage+0x5e>
 800959e:	e01d      	b.n	80095dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fb63 	bl	8009c74 <USBD_StdDevReq>
 80095ae:	4603      	mov	r3, r0
 80095b0:	73fb      	strb	r3, [r7, #15]
      break;
 80095b2:	e020      	b.n	80095f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fbcb 	bl	8009d58 <USBD_StdItfReq>
 80095c2:	4603      	mov	r3, r0
 80095c4:	73fb      	strb	r3, [r7, #15]
      break;
 80095c6:	e016      	b.n	80095f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fc2d 	bl	8009e30 <USBD_StdEPReq>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]
      break;
 80095da:	e00c      	b.n	80095f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 fdbc 	bl	800b168 <USBD_LL_StallEP>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73fb      	strb	r3, [r7, #15]
      break;
 80095f4:	bf00      	nop
  }

  return ret;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	460b      	mov	r3, r1
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009612:	7afb      	ldrb	r3, [r7, #11]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d16e      	bne.n	80096f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800961e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009626:	2b03      	cmp	r3, #3
 8009628:	f040 8098 	bne.w	800975c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	429a      	cmp	r2, r3
 8009636:	d913      	bls.n	8009660 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	1ad2      	subs	r2, r2, r3
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	4293      	cmp	r3, r2
 8009650:	bf28      	it	cs
 8009652:	4613      	movcs	r3, r2
 8009654:	461a      	mov	r2, r3
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f001 f9a1 	bl	800a9a0 <USBD_CtlContinueRx>
 800965e:	e07d      	b.n	800975c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009666:	f003 031f 	and.w	r3, r3, #31
 800966a:	2b02      	cmp	r3, #2
 800966c:	d014      	beq.n	8009698 <USBD_LL_DataOutStage+0x98>
 800966e:	2b02      	cmp	r3, #2
 8009670:	d81d      	bhi.n	80096ae <USBD_LL_DataOutStage+0xae>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <USBD_LL_DataOutStage+0x7c>
 8009676:	2b01      	cmp	r3, #1
 8009678:	d003      	beq.n	8009682 <USBD_LL_DataOutStage+0x82>
 800967a:	e018      	b.n	80096ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	75bb      	strb	r3, [r7, #22]
            break;
 8009680:	e018      	b.n	80096b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009688:	b2db      	uxtb	r3, r3
 800968a:	4619      	mov	r1, r3
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fa64 	bl	8009b5a <USBD_CoreFindIF>
 8009692:	4603      	mov	r3, r0
 8009694:	75bb      	strb	r3, [r7, #22]
            break;
 8009696:	e00d      	b.n	80096b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	4619      	mov	r1, r3
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 fa66 	bl	8009b74 <USBD_CoreFindEP>
 80096a8:	4603      	mov	r3, r0
 80096aa:	75bb      	strb	r3, [r7, #22]
            break;
 80096ac:	e002      	b.n	80096b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	75bb      	strb	r3, [r7, #22]
            break;
 80096b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80096b4:	7dbb      	ldrb	r3, [r7, #22]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d119      	bne.n	80096ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d113      	bne.n	80096ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80096c6:	7dba      	ldrb	r2, [r7, #22]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	32ae      	adds	r2, #174	@ 0xae
 80096cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00b      	beq.n	80096ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80096d6:	7dba      	ldrb	r2, [r7, #22]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80096de:	7dba      	ldrb	r2, [r7, #22]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	32ae      	adds	r2, #174	@ 0xae
 80096e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f001 f967 	bl	800a9c2 <USBD_CtlSendStatus>
 80096f4:	e032      	b.n	800975c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80096f6:	7afb      	ldrb	r3, [r7, #11]
 80096f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	4619      	mov	r1, r3
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 fa37 	bl	8009b74 <USBD_CoreFindEP>
 8009706:	4603      	mov	r3, r0
 8009708:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800970a:	7dbb      	ldrb	r3, [r7, #22]
 800970c:	2bff      	cmp	r3, #255	@ 0xff
 800970e:	d025      	beq.n	800975c <USBD_LL_DataOutStage+0x15c>
 8009710:	7dbb      	ldrb	r3, [r7, #22]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d122      	bne.n	800975c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b03      	cmp	r3, #3
 8009720:	d117      	bne.n	8009752 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009722:	7dba      	ldrb	r2, [r7, #22]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	32ae      	adds	r2, #174	@ 0xae
 8009728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00f      	beq.n	8009752 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009732:	7dba      	ldrb	r2, [r7, #22]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800973a:	7dba      	ldrb	r2, [r7, #22]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	32ae      	adds	r2, #174	@ 0xae
 8009740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	7afa      	ldrb	r2, [r7, #11]
 8009748:	4611      	mov	r1, r2
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	4798      	blx	r3
 800974e:	4603      	mov	r3, r0
 8009750:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	e000      	b.n	800975e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b086      	sub	sp, #24
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	460b      	mov	r3, r1
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d16f      	bne.n	800985a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3314      	adds	r3, #20
 800977e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009786:	2b02      	cmp	r3, #2
 8009788:	d15a      	bne.n	8009840 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	689a      	ldr	r2, [r3, #8]
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	429a      	cmp	r2, r3
 8009794:	d914      	bls.n	80097c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	1ad2      	subs	r2, r2, r3
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	461a      	mov	r2, r3
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f001 f8e6 	bl	800a97e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097b2:	2300      	movs	r3, #0
 80097b4:	2200      	movs	r2, #0
 80097b6:	2100      	movs	r1, #0
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f001 fd7f 	bl	800b2bc <USBD_LL_PrepareReceive>
 80097be:	e03f      	b.n	8009840 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d11c      	bne.n	8009806 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d316      	bcc.n	8009806 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d20f      	bcs.n	8009806 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f001 f8c7 	bl	800a97e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097f8:	2300      	movs	r3, #0
 80097fa:	2200      	movs	r2, #0
 80097fc:	2100      	movs	r1, #0
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f001 fd5c 	bl	800b2bc <USBD_LL_PrepareReceive>
 8009804:	e01c      	b.n	8009840 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b03      	cmp	r3, #3
 8009810:	d10f      	bne.n	8009832 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d009      	beq.n	8009832 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009832:	2180      	movs	r1, #128	@ 0x80
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f001 fc97 	bl	800b168 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f001 f8d4 	bl	800a9e8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d03a      	beq.n	80098c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7ff fe42 	bl	80094d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009858:	e032      	b.n	80098c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800985a:	7afb      	ldrb	r3, [r7, #11]
 800985c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009860:	b2db      	uxtb	r3, r3
 8009862:	4619      	mov	r1, r3
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f985 	bl	8009b74 <USBD_CoreFindEP>
 800986a:	4603      	mov	r3, r0
 800986c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	2bff      	cmp	r3, #255	@ 0xff
 8009872:	d025      	beq.n	80098c0 <USBD_LL_DataInStage+0x15a>
 8009874:	7dfb      	ldrb	r3, [r7, #23]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d122      	bne.n	80098c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b03      	cmp	r3, #3
 8009884:	d11c      	bne.n	80098c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009886:	7dfa      	ldrb	r2, [r7, #23]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	32ae      	adds	r2, #174	@ 0xae
 800988c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d014      	beq.n	80098c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009896:	7dfa      	ldrb	r2, [r7, #23]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800989e:	7dfa      	ldrb	r2, [r7, #23]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	32ae      	adds	r2, #174	@ 0xae
 80098a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	7afa      	ldrb	r2, [r7, #11]
 80098ac:	4611      	mov	r1, r2
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	4798      	blx	r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80098b6:	7dbb      	ldrb	r3, [r7, #22]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80098bc:	7dbb      	ldrb	r3, [r7, #22]
 80098be:	e000      	b.n	80098c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009902:	2b00      	cmp	r3, #0
 8009904:	d014      	beq.n	8009930 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00e      	beq.n	8009930 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6852      	ldr	r2, [r2, #4]
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	4611      	mov	r1, r2
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800992c:	2303      	movs	r3, #3
 800992e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009930:	2340      	movs	r3, #64	@ 0x40
 8009932:	2200      	movs	r2, #0
 8009934:	2100      	movs	r1, #0
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 fbd1 	bl	800b0de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2240      	movs	r2, #64	@ 0x40
 8009948:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800994c:	2340      	movs	r3, #64	@ 0x40
 800994e:	2200      	movs	r2, #0
 8009950:	2180      	movs	r1, #128	@ 0x80
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 fbc3 	bl	800b0de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2240      	movs	r2, #64	@ 0x40
 8009962:	621a      	str	r2, [r3, #32]

  return ret;
 8009964:	7bfb      	ldrb	r3, [r7, #15]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800996e:	b480      	push	{r7}
 8009970:	b083      	sub	sp, #12
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	460b      	mov	r3, r1
 8009978:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d006      	beq.n	80099b0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2204      	movs	r2, #4
 80099b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d106      	bne.n	80099e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d110      	bne.n	8009a2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d005      	beq.n	8009a2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	32ae      	adds	r2, #174	@ 0xae
 8009a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e01c      	b.n	8009a92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d115      	bne.n	8009a90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	32ae      	adds	r2, #174	@ 0xae
 8009a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a72:	6a1b      	ldr	r3, [r3, #32]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00b      	beq.n	8009a90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	32ae      	adds	r2, #174	@ 0xae
 8009a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	78fa      	ldrb	r2, [r7, #3]
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	32ae      	adds	r2, #174	@ 0xae
 8009ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e01c      	b.n	8009af6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d115      	bne.n	8009af4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	32ae      	adds	r2, #174	@ 0xae
 8009ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00b      	beq.n	8009af4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	32ae      	adds	r2, #174	@ 0xae
 8009ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	4611      	mov	r1, r2
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00e      	beq.n	8009b50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	6852      	ldr	r2, [r2, #4]
 8009b3e:	b2d2      	uxtb	r2, r2
 8009b40:	4611      	mov	r1, r2
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	4798      	blx	r3
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	460b      	mov	r3, r1
 8009b64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b086      	sub	sp, #24
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	460b      	mov	r3, r1
 8009b98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	7812      	ldrb	r2, [r2, #0]
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d91f      	bls.n	8009bf4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009bba:	e013      	b.n	8009be4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009bbc:	f107 030a 	add.w	r3, r7, #10
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6978      	ldr	r0, [r7, #20]
 8009bc4:	f000 f81b 	bl	8009bfe <USBD_GetNextDesc>
 8009bc8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	785b      	ldrb	r3, [r3, #1]
 8009bce:	2b05      	cmp	r3, #5
 8009bd0:	d108      	bne.n	8009be4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	789b      	ldrb	r3, [r3, #2]
 8009bda:	78fa      	ldrb	r2, [r7, #3]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d008      	beq.n	8009bf2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009be0:	2300      	movs	r3, #0
 8009be2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	885b      	ldrh	r3, [r3, #2]
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	897b      	ldrh	r3, [r7, #10]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d8e5      	bhi.n	8009bbc <USBD_GetEpDesc+0x2e>
 8009bf0:	e000      	b.n	8009bf4 <USBD_GetEpDesc+0x66>
          break;
 8009bf2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009bf4:	693b      	ldr	r3, [r7, #16]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	7812      	ldrb	r2, [r2, #0]
 8009c14:	4413      	add	r3, r2
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	461a      	mov	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4413      	add	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c28:	68fb      	ldr	r3, [r7, #12]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b087      	sub	sp, #28
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c54:	8a3b      	ldrh	r3, [r7, #16]
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	b21a      	sxth	r2, r3
 8009c5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	b21b      	sxth	r3, r3
 8009c62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c64:	89fb      	ldrh	r3, [r7, #14]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
	...

08009c74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c8a:	2b40      	cmp	r3, #64	@ 0x40
 8009c8c:	d005      	beq.n	8009c9a <USBD_StdDevReq+0x26>
 8009c8e:	2b40      	cmp	r3, #64	@ 0x40
 8009c90:	d857      	bhi.n	8009d42 <USBD_StdDevReq+0xce>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00f      	beq.n	8009cb6 <USBD_StdDevReq+0x42>
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	d153      	bne.n	8009d42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	32ae      	adds	r2, #174	@ 0xae
 8009ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	4798      	blx	r3
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb4:	e04a      	b.n	8009d4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	785b      	ldrb	r3, [r3, #1]
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	d83b      	bhi.n	8009d36 <USBD_StdDevReq+0xc2>
 8009cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc4 <USBD_StdDevReq+0x50>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009d19 	.word	0x08009d19
 8009cc8:	08009d2d 	.word	0x08009d2d
 8009ccc:	08009d37 	.word	0x08009d37
 8009cd0:	08009d23 	.word	0x08009d23
 8009cd4:	08009d37 	.word	0x08009d37
 8009cd8:	08009cf7 	.word	0x08009cf7
 8009cdc:	08009ced 	.word	0x08009ced
 8009ce0:	08009d37 	.word	0x08009d37
 8009ce4:	08009d0f 	.word	0x08009d0f
 8009ce8:	08009d01 	.word	0x08009d01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa3c 	bl	800a16c <USBD_GetDescriptor>
          break;
 8009cf4:	e024      	b.n	8009d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fbcb 	bl	800a494 <USBD_SetAddress>
          break;
 8009cfe:	e01f      	b.n	8009d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fc0a 	bl	800a51c <USBD_SetConfig>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
          break;
 8009d0c:	e018      	b.n	8009d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fcad 	bl	800a670 <USBD_GetConfig>
          break;
 8009d16:	e013      	b.n	8009d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fcde 	bl	800a6dc <USBD_GetStatus>
          break;
 8009d20:	e00e      	b.n	8009d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fd0d 	bl	800a744 <USBD_SetFeature>
          break;
 8009d2a:	e009      	b.n	8009d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fd31 	bl	800a796 <USBD_ClrFeature>
          break;
 8009d34:	e004      	b.n	8009d40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009d36:	6839      	ldr	r1, [r7, #0]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fd88 	bl	800a84e <USBD_CtlError>
          break;
 8009d3e:	bf00      	nop
      }
      break;
 8009d40:	e004      	b.n	8009d4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fd82 	bl	800a84e <USBD_CtlError>
      break;
 8009d4a:	bf00      	nop
  }

  return ret;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop

08009d58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d6e:	2b40      	cmp	r3, #64	@ 0x40
 8009d70:	d005      	beq.n	8009d7e <USBD_StdItfReq+0x26>
 8009d72:	2b40      	cmp	r3, #64	@ 0x40
 8009d74:	d852      	bhi.n	8009e1c <USBD_StdItfReq+0xc4>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <USBD_StdItfReq+0x26>
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	d14e      	bne.n	8009e1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	3b01      	subs	r3, #1
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d840      	bhi.n	8009e0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	889b      	ldrh	r3, [r3, #4]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d836      	bhi.n	8009e04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	889b      	ldrh	r3, [r3, #4]
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff fedb 	bl	8009b5a <USBD_CoreFindIF>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	2bff      	cmp	r3, #255	@ 0xff
 8009dac:	d01d      	beq.n	8009dea <USBD_StdItfReq+0x92>
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d11a      	bne.n	8009dea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009db4:	7bba      	ldrb	r2, [r7, #14]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	32ae      	adds	r2, #174	@ 0xae
 8009dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00f      	beq.n	8009de4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009dc4:	7bba      	ldrb	r2, [r7, #14]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009dcc:	7bba      	ldrb	r2, [r7, #14]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	32ae      	adds	r2, #174	@ 0xae
 8009dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	4798      	blx	r3
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009de2:	e004      	b.n	8009dee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009de4:	2303      	movs	r3, #3
 8009de6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009de8:	e001      	b.n	8009dee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009dea:	2303      	movs	r3, #3
 8009dec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	88db      	ldrh	r3, [r3, #6]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d110      	bne.n	8009e18 <USBD_StdItfReq+0xc0>
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10d      	bne.n	8009e18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fde0 	bl	800a9c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e02:	e009      	b.n	8009e18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fd21 	bl	800a84e <USBD_CtlError>
          break;
 8009e0c:	e004      	b.n	8009e18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fd1c 	bl	800a84e <USBD_CtlError>
          break;
 8009e16:	e000      	b.n	8009e1a <USBD_StdItfReq+0xc2>
          break;
 8009e18:	bf00      	nop
      }
      break;
 8009e1a:	e004      	b.n	8009e26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fd15 	bl	800a84e <USBD_CtlError>
      break;
 8009e24:	bf00      	nop
  }

  return ret;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	889b      	ldrh	r3, [r3, #4]
 8009e42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e4c:	2b40      	cmp	r3, #64	@ 0x40
 8009e4e:	d007      	beq.n	8009e60 <USBD_StdEPReq+0x30>
 8009e50:	2b40      	cmp	r3, #64	@ 0x40
 8009e52:	f200 817f 	bhi.w	800a154 <USBD_StdEPReq+0x324>
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d02a      	beq.n	8009eb0 <USBD_StdEPReq+0x80>
 8009e5a:	2b20      	cmp	r3, #32
 8009e5c:	f040 817a 	bne.w	800a154 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff fe85 	bl	8009b74 <USBD_CoreFindEP>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e6e:	7b7b      	ldrb	r3, [r7, #13]
 8009e70:	2bff      	cmp	r3, #255	@ 0xff
 8009e72:	f000 8174 	beq.w	800a15e <USBD_StdEPReq+0x32e>
 8009e76:	7b7b      	ldrb	r3, [r7, #13]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f040 8170 	bne.w	800a15e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009e7e:	7b7a      	ldrb	r2, [r7, #13]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009e86:	7b7a      	ldrb	r2, [r7, #13]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	32ae      	adds	r2, #174	@ 0xae
 8009e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 8163 	beq.w	800a15e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009e98:	7b7a      	ldrb	r2, [r7, #13]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	32ae      	adds	r2, #174	@ 0xae
 8009e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	4798      	blx	r3
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009eae:	e156      	b.n	800a15e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	785b      	ldrb	r3, [r3, #1]
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d008      	beq.n	8009eca <USBD_StdEPReq+0x9a>
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	f300 8145 	bgt.w	800a148 <USBD_StdEPReq+0x318>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 809b 	beq.w	8009ffa <USBD_StdEPReq+0x1ca>
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d03c      	beq.n	8009f42 <USBD_StdEPReq+0x112>
 8009ec8:	e13e      	b.n	800a148 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d002      	beq.n	8009edc <USBD_StdEPReq+0xac>
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d016      	beq.n	8009f08 <USBD_StdEPReq+0xd8>
 8009eda:	e02c      	b.n	8009f36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00d      	beq.n	8009efe <USBD_StdEPReq+0xce>
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	2b80      	cmp	r3, #128	@ 0x80
 8009ee6:	d00a      	beq.n	8009efe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 f93b 	bl	800b168 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ef2:	2180      	movs	r1, #128	@ 0x80
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 f937 	bl	800b168 <USBD_LL_StallEP>
 8009efa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009efc:	e020      	b.n	8009f40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fca4 	bl	800a84e <USBD_CtlError>
              break;
 8009f06:	e01b      	b.n	8009f40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	885b      	ldrh	r3, [r3, #2]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10e      	bne.n	8009f2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00b      	beq.n	8009f2e <USBD_StdEPReq+0xfe>
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	2b80      	cmp	r3, #128	@ 0x80
 8009f1a:	d008      	beq.n	8009f2e <USBD_StdEPReq+0xfe>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	88db      	ldrh	r3, [r3, #6]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 f91d 	bl	800b168 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fd47 	bl	800a9c2 <USBD_CtlSendStatus>

              break;
 8009f34:	e004      	b.n	8009f40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fc88 	bl	800a84e <USBD_CtlError>
              break;
 8009f3e:	bf00      	nop
          }
          break;
 8009f40:	e107      	b.n	800a152 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d002      	beq.n	8009f54 <USBD_StdEPReq+0x124>
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d016      	beq.n	8009f80 <USBD_StdEPReq+0x150>
 8009f52:	e04b      	b.n	8009fec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00d      	beq.n	8009f76 <USBD_StdEPReq+0x146>
 8009f5a:	7bbb      	ldrb	r3, [r7, #14]
 8009f5c:	2b80      	cmp	r3, #128	@ 0x80
 8009f5e:	d00a      	beq.n	8009f76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 f8ff 	bl	800b168 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f6a:	2180      	movs	r1, #128	@ 0x80
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 f8fb 	bl	800b168 <USBD_LL_StallEP>
 8009f72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f74:	e040      	b.n	8009ff8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fc68 	bl	800a84e <USBD_CtlError>
              break;
 8009f7e:	e03b      	b.n	8009ff8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	885b      	ldrh	r3, [r3, #2]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d136      	bne.n	8009ff6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d004      	beq.n	8009f9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f001 f905 	bl	800b1a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fd10 	bl	800a9c2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff fde4 	bl	8009b74 <USBD_CoreFindEP>
 8009fac:	4603      	mov	r3, r0
 8009fae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fb0:	7b7b      	ldrb	r3, [r7, #13]
 8009fb2:	2bff      	cmp	r3, #255	@ 0xff
 8009fb4:	d01f      	beq.n	8009ff6 <USBD_StdEPReq+0x1c6>
 8009fb6:	7b7b      	ldrb	r3, [r7, #13]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d11c      	bne.n	8009ff6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009fbc:	7b7a      	ldrb	r2, [r7, #13]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009fc4:	7b7a      	ldrb	r2, [r7, #13]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	32ae      	adds	r2, #174	@ 0xae
 8009fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d010      	beq.n	8009ff6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009fd4:	7b7a      	ldrb	r2, [r7, #13]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	32ae      	adds	r2, #174	@ 0xae
 8009fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	6839      	ldr	r1, [r7, #0]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	4798      	blx	r3
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009fea:	e004      	b.n	8009ff6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fc2d 	bl	800a84e <USBD_CtlError>
              break;
 8009ff4:	e000      	b.n	8009ff8 <USBD_StdEPReq+0x1c8>
              break;
 8009ff6:	bf00      	nop
          }
          break;
 8009ff8:	e0ab      	b.n	800a152 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b02      	cmp	r3, #2
 800a004:	d002      	beq.n	800a00c <USBD_StdEPReq+0x1dc>
 800a006:	2b03      	cmp	r3, #3
 800a008:	d032      	beq.n	800a070 <USBD_StdEPReq+0x240>
 800a00a:	e097      	b.n	800a13c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d007      	beq.n	800a022 <USBD_StdEPReq+0x1f2>
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	2b80      	cmp	r3, #128	@ 0x80
 800a016:	d004      	beq.n	800a022 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fc17 	bl	800a84e <USBD_CtlError>
                break;
 800a020:	e091      	b.n	800a146 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a026:	2b00      	cmp	r3, #0
 800a028:	da0b      	bge.n	800a042 <USBD_StdEPReq+0x212>
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	3310      	adds	r3, #16
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	4413      	add	r3, r2
 800a03e:	3304      	adds	r3, #4
 800a040:	e00b      	b.n	800a05a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a042:	7bbb      	ldrb	r3, [r7, #14]
 800a044:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a048:	4613      	mov	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	4413      	add	r3, r2
 800a058:	3304      	adds	r3, #4
 800a05a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2202      	movs	r2, #2
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fc6d 	bl	800a948 <USBD_CtlSendData>
              break;
 800a06e:	e06a      	b.n	800a146 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a074:	2b00      	cmp	r3, #0
 800a076:	da11      	bge.n	800a09c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a078:	7bbb      	ldrb	r3, [r7, #14]
 800a07a:	f003 020f 	and.w	r2, r3, #15
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	440b      	add	r3, r1
 800a08a:	3324      	adds	r3, #36	@ 0x24
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d117      	bne.n	800a0c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fbda 	bl	800a84e <USBD_CtlError>
                  break;
 800a09a:	e054      	b.n	800a146 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
 800a09e:	f003 020f 	and.w	r2, r3, #15
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	440b      	add	r3, r1
 800a0ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fbc7 	bl	800a84e <USBD_CtlError>
                  break;
 800a0c0:	e041      	b.n	800a146 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	da0b      	bge.n	800a0e2 <USBD_StdEPReq+0x2b2>
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	3310      	adds	r3, #16
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	4413      	add	r3, r2
 800a0de:	3304      	adds	r3, #4
 800a0e0:	e00b      	b.n	800a0fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <USBD_StdEPReq+0x2d8>
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	2b80      	cmp	r3, #128	@ 0x80
 800a106:	d103      	bne.n	800a110 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	e00e      	b.n	800a12e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f001 f865 	bl	800b1e4 <USBD_LL_IsStallEP>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2201      	movs	r2, #1
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	e002      	b.n	800a12e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2200      	movs	r2, #0
 800a12c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2202      	movs	r2, #2
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fc07 	bl	800a948 <USBD_CtlSendData>
              break;
 800a13a:	e004      	b.n	800a146 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fb85 	bl	800a84e <USBD_CtlError>
              break;
 800a144:	bf00      	nop
          }
          break;
 800a146:	e004      	b.n	800a152 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fb7f 	bl	800a84e <USBD_CtlError>
          break;
 800a150:	bf00      	nop
      }
      break;
 800a152:	e005      	b.n	800a160 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fb79 	bl	800a84e <USBD_CtlError>
      break;
 800a15c:	e000      	b.n	800a160 <USBD_StdEPReq+0x330>
      break;
 800a15e:	bf00      	nop
  }

  return ret;
 800a160:	7bfb      	ldrb	r3, [r7, #15]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	885b      	ldrh	r3, [r3, #2]
 800a186:	0a1b      	lsrs	r3, r3, #8
 800a188:	b29b      	uxth	r3, r3
 800a18a:	3b01      	subs	r3, #1
 800a18c:	2b0e      	cmp	r3, #14
 800a18e:	f200 8152 	bhi.w	800a436 <USBD_GetDescriptor+0x2ca>
 800a192:	a201      	add	r2, pc, #4	@ (adr r2, 800a198 <USBD_GetDescriptor+0x2c>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a209 	.word	0x0800a209
 800a19c:	0800a221 	.word	0x0800a221
 800a1a0:	0800a261 	.word	0x0800a261
 800a1a4:	0800a437 	.word	0x0800a437
 800a1a8:	0800a437 	.word	0x0800a437
 800a1ac:	0800a3d7 	.word	0x0800a3d7
 800a1b0:	0800a403 	.word	0x0800a403
 800a1b4:	0800a437 	.word	0x0800a437
 800a1b8:	0800a437 	.word	0x0800a437
 800a1bc:	0800a437 	.word	0x0800a437
 800a1c0:	0800a437 	.word	0x0800a437
 800a1c4:	0800a437 	.word	0x0800a437
 800a1c8:	0800a437 	.word	0x0800a437
 800a1cc:	0800a437 	.word	0x0800a437
 800a1d0:	0800a1d5 	.word	0x0800a1d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1da:	69db      	ldr	r3, [r3, #28]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00b      	beq.n	800a1f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1e6:	69db      	ldr	r3, [r3, #28]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	7c12      	ldrb	r2, [r2, #16]
 800a1ec:	f107 0108 	add.w	r1, r7, #8
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
 800a1f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1f6:	e126      	b.n	800a446 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fb27 	bl	800a84e <USBD_CtlError>
        err++;
 800a200:	7afb      	ldrb	r3, [r7, #11]
 800a202:	3301      	adds	r3, #1
 800a204:	72fb      	strb	r3, [r7, #11]
      break;
 800a206:	e11e      	b.n	800a446 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	7c12      	ldrb	r2, [r2, #16]
 800a214:	f107 0108 	add.w	r1, r7, #8
 800a218:	4610      	mov	r0, r2
 800a21a:	4798      	blx	r3
 800a21c:	60f8      	str	r0, [r7, #12]
      break;
 800a21e:	e112      	b.n	800a446 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	7c1b      	ldrb	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10d      	bne.n	800a244 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a22e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a230:	f107 0208 	add.w	r2, r7, #8
 800a234:	4610      	mov	r0, r2
 800a236:	4798      	blx	r3
 800a238:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3301      	adds	r3, #1
 800a23e:	2202      	movs	r2, #2
 800a240:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a242:	e100      	b.n	800a446 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24c:	f107 0208 	add.w	r2, r7, #8
 800a250:	4610      	mov	r0, r2
 800a252:	4798      	blx	r3
 800a254:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3301      	adds	r3, #1
 800a25a:	2202      	movs	r2, #2
 800a25c:	701a      	strb	r2, [r3, #0]
      break;
 800a25e:	e0f2      	b.n	800a446 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	885b      	ldrh	r3, [r3, #2]
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b05      	cmp	r3, #5
 800a268:	f200 80ac 	bhi.w	800a3c4 <USBD_GetDescriptor+0x258>
 800a26c:	a201      	add	r2, pc, #4	@ (adr r2, 800a274 <USBD_GetDescriptor+0x108>)
 800a26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a272:	bf00      	nop
 800a274:	0800a28d 	.word	0x0800a28d
 800a278:	0800a2c1 	.word	0x0800a2c1
 800a27c:	0800a2f5 	.word	0x0800a2f5
 800a280:	0800a329 	.word	0x0800a329
 800a284:	0800a35d 	.word	0x0800a35d
 800a288:	0800a391 	.word	0x0800a391
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00b      	beq.n	800a2b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	7c12      	ldrb	r2, [r2, #16]
 800a2a4:	f107 0108 	add.w	r1, r7, #8
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
 800a2ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ae:	e091      	b.n	800a3d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 facb 	bl	800a84e <USBD_CtlError>
            err++;
 800a2b8:	7afb      	ldrb	r3, [r7, #11]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2be:	e089      	b.n	800a3d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00b      	beq.n	800a2e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	7c12      	ldrb	r2, [r2, #16]
 800a2d8:	f107 0108 	add.w	r1, r7, #8
 800a2dc:	4610      	mov	r0, r2
 800a2de:	4798      	blx	r3
 800a2e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2e2:	e077      	b.n	800a3d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fab1 	bl	800a84e <USBD_CtlError>
            err++;
 800a2ec:	7afb      	ldrb	r3, [r7, #11]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2f2:	e06f      	b.n	800a3d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00b      	beq.n	800a318 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	7c12      	ldrb	r2, [r2, #16]
 800a30c:	f107 0108 	add.w	r1, r7, #8
 800a310:	4610      	mov	r0, r2
 800a312:	4798      	blx	r3
 800a314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a316:	e05d      	b.n	800a3d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fa97 	bl	800a84e <USBD_CtlError>
            err++;
 800a320:	7afb      	ldrb	r3, [r7, #11]
 800a322:	3301      	adds	r3, #1
 800a324:	72fb      	strb	r3, [r7, #11]
          break;
 800a326:	e055      	b.n	800a3d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00b      	beq.n	800a34c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	7c12      	ldrb	r2, [r2, #16]
 800a340:	f107 0108 	add.w	r1, r7, #8
 800a344:	4610      	mov	r0, r2
 800a346:	4798      	blx	r3
 800a348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a34a:	e043      	b.n	800a3d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fa7d 	bl	800a84e <USBD_CtlError>
            err++;
 800a354:	7afb      	ldrb	r3, [r7, #11]
 800a356:	3301      	adds	r3, #1
 800a358:	72fb      	strb	r3, [r7, #11]
          break;
 800a35a:	e03b      	b.n	800a3d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00b      	beq.n	800a380 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	7c12      	ldrb	r2, [r2, #16]
 800a374:	f107 0108 	add.w	r1, r7, #8
 800a378:	4610      	mov	r0, r2
 800a37a:	4798      	blx	r3
 800a37c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a37e:	e029      	b.n	800a3d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fa63 	bl	800a84e <USBD_CtlError>
            err++;
 800a388:	7afb      	ldrb	r3, [r7, #11]
 800a38a:	3301      	adds	r3, #1
 800a38c:	72fb      	strb	r3, [r7, #11]
          break;
 800a38e:	e021      	b.n	800a3d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00b      	beq.n	800a3b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	7c12      	ldrb	r2, [r2, #16]
 800a3a8:	f107 0108 	add.w	r1, r7, #8
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	4798      	blx	r3
 800a3b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3b2:	e00f      	b.n	800a3d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fa49 	bl	800a84e <USBD_CtlError>
            err++;
 800a3bc:	7afb      	ldrb	r3, [r7, #11]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3c2:	e007      	b.n	800a3d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fa41 	bl	800a84e <USBD_CtlError>
          err++;
 800a3cc:	7afb      	ldrb	r3, [r7, #11]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a3d2:	bf00      	nop
      }
      break;
 800a3d4:	e037      	b.n	800a446 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	7c1b      	ldrb	r3, [r3, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d109      	bne.n	800a3f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e6:	f107 0208 	add.w	r2, r7, #8
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	4798      	blx	r3
 800a3ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3f0:	e029      	b.n	800a446 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fa2a 	bl	800a84e <USBD_CtlError>
        err++;
 800a3fa:	7afb      	ldrb	r3, [r7, #11]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	72fb      	strb	r3, [r7, #11]
      break;
 800a400:	e021      	b.n	800a446 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	7c1b      	ldrb	r3, [r3, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10d      	bne.n	800a426 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a412:	f107 0208 	add.w	r2, r7, #8
 800a416:	4610      	mov	r0, r2
 800a418:	4798      	blx	r3
 800a41a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3301      	adds	r3, #1
 800a420:	2207      	movs	r2, #7
 800a422:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a424:	e00f      	b.n	800a446 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fa10 	bl	800a84e <USBD_CtlError>
        err++;
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	3301      	adds	r3, #1
 800a432:	72fb      	strb	r3, [r7, #11]
      break;
 800a434:	e007      	b.n	800a446 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fa08 	bl	800a84e <USBD_CtlError>
      err++;
 800a43e:	7afb      	ldrb	r3, [r7, #11]
 800a440:	3301      	adds	r3, #1
 800a442:	72fb      	strb	r3, [r7, #11]
      break;
 800a444:	bf00      	nop
  }

  if (err != 0U)
 800a446:	7afb      	ldrb	r3, [r7, #11]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d11e      	bne.n	800a48a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	88db      	ldrh	r3, [r3, #6]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d016      	beq.n	800a482 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a454:	893b      	ldrh	r3, [r7, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00e      	beq.n	800a478 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	88da      	ldrh	r2, [r3, #6]
 800a45e:	893b      	ldrh	r3, [r7, #8]
 800a460:	4293      	cmp	r3, r2
 800a462:	bf28      	it	cs
 800a464:	4613      	movcs	r3, r2
 800a466:	b29b      	uxth	r3, r3
 800a468:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a46a:	893b      	ldrh	r3, [r7, #8]
 800a46c:	461a      	mov	r2, r3
 800a46e:	68f9      	ldr	r1, [r7, #12]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fa69 	bl	800a948 <USBD_CtlSendData>
 800a476:	e009      	b.n	800a48c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f9e7 	bl	800a84e <USBD_CtlError>
 800a480:	e004      	b.n	800a48c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fa9d 	bl	800a9c2 <USBD_CtlSendStatus>
 800a488:	e000      	b.n	800a48c <USBD_GetDescriptor+0x320>
    return;
 800a48a:	bf00      	nop
  }
}
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop

0800a494 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	889b      	ldrh	r3, [r3, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d131      	bne.n	800a50a <USBD_SetAddress+0x76>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	88db      	ldrh	r3, [r3, #6]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d12d      	bne.n	800a50a <USBD_SetAddress+0x76>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	885b      	ldrh	r3, [r3, #2]
 800a4b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4b4:	d829      	bhi.n	800a50a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	885b      	ldrh	r3, [r3, #2]
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d104      	bne.n	800a4d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f9bc 	bl	800a84e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4d6:	e01d      	b.n	800a514 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	7bfa      	ldrb	r2, [r7, #15]
 800a4dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fea9 	bl	800b23c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fa69 	bl	800a9c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d004      	beq.n	800a500 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4fe:	e009      	b.n	800a514 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a508:	e004      	b.n	800a514 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f99e 	bl	800a84e <USBD_CtlError>
  }
}
 800a512:	bf00      	nop
 800a514:	bf00      	nop
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	885b      	ldrh	r3, [r3, #2]
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	4b4e      	ldr	r3, [pc, #312]	@ (800a66c <USBD_SetConfig+0x150>)
 800a532:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a534:	4b4d      	ldr	r3, [pc, #308]	@ (800a66c <USBD_SetConfig+0x150>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d905      	bls.n	800a548 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f985 	bl	800a84e <USBD_CtlError>
    return USBD_FAIL;
 800a544:	2303      	movs	r3, #3
 800a546:	e08c      	b.n	800a662 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b02      	cmp	r3, #2
 800a552:	d002      	beq.n	800a55a <USBD_SetConfig+0x3e>
 800a554:	2b03      	cmp	r3, #3
 800a556:	d029      	beq.n	800a5ac <USBD_SetConfig+0x90>
 800a558:	e075      	b.n	800a646 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a55a:	4b44      	ldr	r3, [pc, #272]	@ (800a66c <USBD_SetConfig+0x150>)
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d020      	beq.n	800a5a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a562:	4b42      	ldr	r3, [pc, #264]	@ (800a66c <USBD_SetConfig+0x150>)
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a56c:	4b3f      	ldr	r3, [pc, #252]	@ (800a66c <USBD_SetConfig+0x150>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7fe ffb9 	bl	80094ea <USBD_SetClassConfig>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d008      	beq.n	800a594 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f962 	bl	800a84e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2202      	movs	r2, #2
 800a58e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a592:	e065      	b.n	800a660 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fa14 	bl	800a9c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2203      	movs	r2, #3
 800a59e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a5a2:	e05d      	b.n	800a660 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fa0c 	bl	800a9c2 <USBD_CtlSendStatus>
      break;
 800a5aa:	e059      	b.n	800a660 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a5ac:	4b2f      	ldr	r3, [pc, #188]	@ (800a66c <USBD_SetConfig+0x150>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d112      	bne.n	800a5da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a5bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a66c <USBD_SetConfig+0x150>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5c6:	4b29      	ldr	r3, [pc, #164]	@ (800a66c <USBD_SetConfig+0x150>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fe ffa8 	bl	8009522 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f9f5 	bl	800a9c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a5d8:	e042      	b.n	800a660 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a5da:	4b24      	ldr	r3, [pc, #144]	@ (800a66c <USBD_SetConfig+0x150>)
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d02a      	beq.n	800a63e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7fe ff96 	bl	8009522 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a5f6:	4b1d      	ldr	r3, [pc, #116]	@ (800a66c <USBD_SetConfig+0x150>)
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a600:	4b1a      	ldr	r3, [pc, #104]	@ (800a66c <USBD_SetConfig+0x150>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7fe ff6f 	bl	80094ea <USBD_SetClassConfig>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00f      	beq.n	800a636 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f918 	bl	800a84e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7fe ff7b 	bl	8009522 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a634:	e014      	b.n	800a660 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f9c3 	bl	800a9c2 <USBD_CtlSendStatus>
      break;
 800a63c:	e010      	b.n	800a660 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f9bf 	bl	800a9c2 <USBD_CtlSendStatus>
      break;
 800a644:	e00c      	b.n	800a660 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f900 	bl	800a84e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a64e:	4b07      	ldr	r3, [pc, #28]	@ (800a66c <USBD_SetConfig+0x150>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7fe ff64 	bl	8009522 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a65a:	2303      	movs	r3, #3
 800a65c:	73fb      	strb	r3, [r7, #15]
      break;
 800a65e:	bf00      	nop
  }

  return ret;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	240007a4 	.word	0x240007a4

0800a670 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	88db      	ldrh	r3, [r3, #6]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d004      	beq.n	800a68c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f8e2 	bl	800a84e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a68a:	e023      	b.n	800a6d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b02      	cmp	r3, #2
 800a696:	dc02      	bgt.n	800a69e <USBD_GetConfig+0x2e>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dc03      	bgt.n	800a6a4 <USBD_GetConfig+0x34>
 800a69c:	e015      	b.n	800a6ca <USBD_GetConfig+0x5a>
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d00b      	beq.n	800a6ba <USBD_GetConfig+0x4a>
 800a6a2:	e012      	b.n	800a6ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f948 	bl	800a948 <USBD_CtlSendData>
        break;
 800a6b8:	e00c      	b.n	800a6d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	3304      	adds	r3, #4
 800a6be:	2201      	movs	r2, #1
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f940 	bl	800a948 <USBD_CtlSendData>
        break;
 800a6c8:	e004      	b.n	800a6d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f8be 	bl	800a84e <USBD_CtlError>
        break;
 800a6d2:	bf00      	nop
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d81e      	bhi.n	800a732 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	88db      	ldrh	r3, [r3, #6]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d004      	beq.n	800a706 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f8a5 	bl	800a84e <USBD_CtlError>
        break;
 800a704:	e01a      	b.n	800a73c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a712:	2b00      	cmp	r3, #0
 800a714:	d005      	beq.n	800a722 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f043 0202 	orr.w	r2, r3, #2
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	330c      	adds	r3, #12
 800a726:	2202      	movs	r2, #2
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f90c 	bl	800a948 <USBD_CtlSendData>
      break;
 800a730:	e004      	b.n	800a73c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a732:	6839      	ldr	r1, [r7, #0]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f88a 	bl	800a84e <USBD_CtlError>
      break;
 800a73a:	bf00      	nop
  }
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	885b      	ldrh	r3, [r3, #2]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d107      	bne.n	800a766 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f92f 	bl	800a9c2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a764:	e013      	b.n	800a78e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	885b      	ldrh	r3, [r3, #2]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d10b      	bne.n	800a786 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	889b      	ldrh	r3, [r3, #4]
 800a772:	0a1b      	lsrs	r3, r3, #8
 800a774:	b29b      	uxth	r3, r3
 800a776:	b2da      	uxtb	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f91f 	bl	800a9c2 <USBD_CtlSendStatus>
}
 800a784:	e003      	b.n	800a78e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f860 	bl	800a84e <USBD_CtlError>
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b082      	sub	sp, #8
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d80b      	bhi.n	800a7c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	885b      	ldrh	r3, [r3, #2]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d10c      	bne.n	800a7d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f8ff 	bl	800a9c2 <USBD_CtlSendStatus>
      }
      break;
 800a7c4:	e004      	b.n	800a7d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f840 	bl	800a84e <USBD_CtlError>
      break;
 800a7ce:	e000      	b.n	800a7d2 <USBD_ClrFeature+0x3c>
      break;
 800a7d0:	bf00      	nop
  }
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	781a      	ldrb	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3301      	adds	r3, #1
 800a802:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f7ff fa16 	bl	8009c36 <SWAPBYTE>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461a      	mov	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3301      	adds	r3, #1
 800a816:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3301      	adds	r3, #1
 800a81c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7ff fa09 	bl	8009c36 <SWAPBYTE>
 800a824:	4603      	mov	r3, r0
 800a826:	461a      	mov	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	3301      	adds	r3, #1
 800a830:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3301      	adds	r3, #1
 800a836:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f7ff f9fc 	bl	8009c36 <SWAPBYTE>
 800a83e:	4603      	mov	r3, r0
 800a840:	461a      	mov	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	80da      	strh	r2, [r3, #6]
}
 800a846:	bf00      	nop
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b082      	sub	sp, #8
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a858:	2180      	movs	r1, #128	@ 0x80
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fc84 	bl	800b168 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a860:	2100      	movs	r1, #0
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fc80 	bl	800b168 <USBD_LL_StallEP>
}
 800a868:	bf00      	nop
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d042      	beq.n	800a90c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a88a:	6938      	ldr	r0, [r7, #16]
 800a88c:	f000 f842 	bl	800a914 <USBD_GetLen>
 800a890:	4603      	mov	r3, r0
 800a892:	3301      	adds	r3, #1
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a89a:	d808      	bhi.n	800a8ae <USBD_GetString+0x3e>
 800a89c:	6938      	ldr	r0, [r7, #16]
 800a89e:	f000 f839 	bl	800a914 <USBD_GetLen>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	e001      	b.n	800a8b2 <USBD_GetString+0x42>
 800a8ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a8b6:	7dfb      	ldrb	r3, [r7, #23]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	7812      	ldrb	r2, [r2, #0]
 800a8c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a8d8:	e013      	b.n	800a902 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	4413      	add	r3, r2
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	7812      	ldrb	r2, [r2, #0]
 800a8e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	613b      	str	r3, [r7, #16]
    idx++;
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a8f2:	7dfb      	ldrb	r3, [r7, #23]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
    idx++;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	3301      	adds	r3, #1
 800a900:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e7      	bne.n	800a8da <USBD_GetString+0x6a>
 800a90a:	e000      	b.n	800a90e <USBD_GetString+0x9e>
    return;
 800a90c:	bf00      	nop
  }
}
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a924:	e005      	b.n	800a932 <USBD_GetLen+0x1e>
  {
    len++;
 800a926:	7bfb      	ldrb	r3, [r7, #15]
 800a928:	3301      	adds	r3, #1
 800a92a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	3301      	adds	r3, #1
 800a930:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1f5      	bne.n	800a926 <USBD_GetLen+0x12>
  }

  return len;
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2202      	movs	r2, #2
 800a958:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	2100      	movs	r1, #0
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f000 fc83 	bl	800b27a <USBD_LL_Transmit>

  return USBD_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	60f8      	str	r0, [r7, #12]
 800a986:	60b9      	str	r1, [r7, #8]
 800a988:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	2100      	movs	r1, #0
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 fc72 	bl	800b27a <USBD_LL_Transmit>

  return USBD_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f000 fc82 	bl	800b2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2204      	movs	r2, #4
 800a9ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fc4e 	bl	800b27a <USBD_LL_Transmit>

  return USBD_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2205      	movs	r2, #5
 800a9f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fc5c 	bl	800b2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800aa14:	2201      	movs	r2, #1
 800aa16:	490f      	ldr	r1, [pc, #60]	@ (800aa54 <MX_USB_DEVICE_Init+0x44>)
 800aa18:	480f      	ldr	r0, [pc, #60]	@ (800aa58 <MX_USB_DEVICE_Init+0x48>)
 800aa1a:	f7fe fce9 	bl	80093f0 <USBD_Init>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa24:	f7f6 fefe 	bl	8001824 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800aa28:	490c      	ldr	r1, [pc, #48]	@ (800aa5c <MX_USB_DEVICE_Init+0x4c>)
 800aa2a:	480b      	ldr	r0, [pc, #44]	@ (800aa58 <MX_USB_DEVICE_Init+0x48>)
 800aa2c:	f7fe fd10 	bl	8009450 <USBD_RegisterClass>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa36:	f7f6 fef5 	bl	8001824 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800aa3a:	4807      	ldr	r0, [pc, #28]	@ (800aa58 <MX_USB_DEVICE_Init+0x48>)
 800aa3c:	f7fe fd3e 	bl	80094bc <USBD_Start>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800aa46:	f7f6 feed 	bl	8001824 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800aa4a:	f7f8 ff79 	bl	8003940 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa4e:	bf00      	nop
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	24000274 	.word	0x24000274
 800aa58:	240007a8 	.word	0x240007a8
 800aa5c:	240001c0 	.word	0x240001c0

0800aa60 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	6039      	str	r1, [r7, #0]
 800aa6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2212      	movs	r2, #18
 800aa70:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800aa72:	4b03      	ldr	r3, [pc, #12]	@ (800aa80 <USBD_HS_DeviceDescriptor+0x20>)
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	24000294 	.word	0x24000294

0800aa84 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2204      	movs	r2, #4
 800aa94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa96:	4b03      	ldr	r3, [pc, #12]	@ (800aaa4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	240002a8 	.word	0x240002a8

0800aaa8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	6039      	str	r1, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d105      	bne.n	800aac6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	4907      	ldr	r1, [pc, #28]	@ (800aadc <USBD_HS_ProductStrDescriptor+0x34>)
 800aabe:	4808      	ldr	r0, [pc, #32]	@ (800aae0 <USBD_HS_ProductStrDescriptor+0x38>)
 800aac0:	f7ff fed6 	bl	800a870 <USBD_GetString>
 800aac4:	e004      	b.n	800aad0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	4904      	ldr	r1, [pc, #16]	@ (800aadc <USBD_HS_ProductStrDescriptor+0x34>)
 800aaca:	4805      	ldr	r0, [pc, #20]	@ (800aae0 <USBD_HS_ProductStrDescriptor+0x38>)
 800aacc:	f7ff fed0 	bl	800a870 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad0:	4b02      	ldr	r3, [pc, #8]	@ (800aadc <USBD_HS_ProductStrDescriptor+0x34>)
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	24000a84 	.word	0x24000a84
 800aae0:	0800bde8 	.word	0x0800bde8

0800aae4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	4904      	ldr	r1, [pc, #16]	@ (800ab04 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800aaf4:	4804      	ldr	r0, [pc, #16]	@ (800ab08 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800aaf6:	f7ff febb 	bl	800a870 <USBD_GetString>
  return USBD_StrDesc;
 800aafa:	4b02      	ldr	r3, [pc, #8]	@ (800ab04 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	24000a84 	.word	0x24000a84
 800ab08:	0800be00 	.word	0x0800be00

0800ab0c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	6039      	str	r1, [r7, #0]
 800ab16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	221a      	movs	r2, #26
 800ab1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab1e:	f000 f843 	bl	800aba8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ab22:	4b02      	ldr	r3, [pc, #8]	@ (800ab2c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	240002ac 	.word	0x240002ac

0800ab30 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab3c:	79fb      	ldrb	r3, [r7, #7]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d105      	bne.n	800ab4e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	4907      	ldr	r1, [pc, #28]	@ (800ab64 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ab46:	4808      	ldr	r0, [pc, #32]	@ (800ab68 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ab48:	f7ff fe92 	bl	800a870 <USBD_GetString>
 800ab4c:	e004      	b.n	800ab58 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	4904      	ldr	r1, [pc, #16]	@ (800ab64 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ab52:	4805      	ldr	r0, [pc, #20]	@ (800ab68 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ab54:	f7ff fe8c 	bl	800a870 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab58:	4b02      	ldr	r3, [pc, #8]	@ (800ab64 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	24000a84 	.word	0x24000a84
 800ab68:	0800be14 	.word	0x0800be14

0800ab6c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d105      	bne.n	800ab8a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	4907      	ldr	r1, [pc, #28]	@ (800aba0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ab82:	4808      	ldr	r0, [pc, #32]	@ (800aba4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ab84:	f7ff fe74 	bl	800a870 <USBD_GetString>
 800ab88:	e004      	b.n	800ab94 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	4904      	ldr	r1, [pc, #16]	@ (800aba0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ab8e:	4805      	ldr	r0, [pc, #20]	@ (800aba4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ab90:	f7ff fe6e 	bl	800a870 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab94:	4b02      	ldr	r3, [pc, #8]	@ (800aba0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	24000a84 	.word	0x24000a84
 800aba4:	0800be20 	.word	0x0800be20

0800aba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abae:	4b0f      	ldr	r3, [pc, #60]	@ (800abec <Get_SerialNum+0x44>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abb4:	4b0e      	ldr	r3, [pc, #56]	@ (800abf0 <Get_SerialNum+0x48>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abba:	4b0e      	ldr	r3, [pc, #56]	@ (800abf4 <Get_SerialNum+0x4c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d009      	beq.n	800abe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abce:	2208      	movs	r2, #8
 800abd0:	4909      	ldr	r1, [pc, #36]	@ (800abf8 <Get_SerialNum+0x50>)
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f814 	bl	800ac00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abd8:	2204      	movs	r2, #4
 800abda:	4908      	ldr	r1, [pc, #32]	@ (800abfc <Get_SerialNum+0x54>)
 800abdc:	68b8      	ldr	r0, [r7, #8]
 800abde:	f000 f80f 	bl	800ac00 <IntToUnicode>
  }
}
 800abe2:	bf00      	nop
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	1ff1e800 	.word	0x1ff1e800
 800abf0:	1ff1e804 	.word	0x1ff1e804
 800abf4:	1ff1e808 	.word	0x1ff1e808
 800abf8:	240002ae 	.word	0x240002ae
 800abfc:	240002be 	.word	0x240002be

0800ac00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac12:	2300      	movs	r3, #0
 800ac14:	75fb      	strb	r3, [r7, #23]
 800ac16:	e027      	b.n	800ac68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	0f1b      	lsrs	r3, r3, #28
 800ac1c:	2b09      	cmp	r3, #9
 800ac1e:	d80b      	bhi.n	800ac38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	0f1b      	lsrs	r3, r3, #28
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	440b      	add	r3, r1
 800ac30:	3230      	adds	r2, #48	@ 0x30
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e00a      	b.n	800ac4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0f1b      	lsrs	r3, r3, #28
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	4619      	mov	r1, r3
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	440b      	add	r3, r1
 800ac48:	3237      	adds	r2, #55	@ 0x37
 800ac4a:	b2d2      	uxtb	r2, r2
 800ac4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	011b      	lsls	r3, r3, #4
 800ac52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	3301      	adds	r3, #1
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	3301      	adds	r3, #1
 800ac66:	75fb      	strb	r3, [r7, #23]
 800ac68:	7dfa      	ldrb	r2, [r7, #23]
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d3d3      	bcc.n	800ac18 <IntToUnicode+0x18>
  }
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	371c      	adds	r7, #28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
	...

0800ac80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b0bc      	sub	sp, #240	@ 0xf0
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	605a      	str	r2, [r3, #4]
 800ac92:	609a      	str	r2, [r3, #8]
 800ac94:	60da      	str	r2, [r3, #12]
 800ac96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac98:	f107 0320 	add.w	r3, r7, #32
 800ac9c:	22b8      	movs	r2, #184	@ 0xb8
 800ac9e:	2100      	movs	r1, #0
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 fb91 	bl	800b3c8 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a58      	ldr	r2, [pc, #352]	@ (800ae0c <HAL_PCD_MspInit+0x18c>)
 800acac:	4293      	cmp	r3, r2
 800acae:	f040 80a9 	bne.w	800ae04 <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800acb2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800acb6:	f04f 0300 	mov.w	r3, #0
 800acba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800acbe:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800acc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800acc6:	f107 0320 	add.w	r3, r7, #32
 800acca:	4618      	mov	r0, r3
 800accc:	f7f9 fdae 	bl	800482c <HAL_RCCEx_PeriphCLKConfig>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800acd6:	f7f6 fda5 	bl	8001824 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800acda:	f7f8 fe31 	bl	8003940 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800acde:	4b4c      	ldr	r3, [pc, #304]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800ace0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ace4:	4a4a      	ldr	r2, [pc, #296]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800ace6:	f043 0304 	orr.w	r3, r3, #4
 800acea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800acee:	4b48      	ldr	r3, [pc, #288]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800acf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acf4:	f003 0304 	and.w	r3, r3, #4
 800acf8:	61fb      	str	r3, [r7, #28]
 800acfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acfc:	4b44      	ldr	r3, [pc, #272]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800acfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad02:	4a43      	ldr	r2, [pc, #268]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800ad04:	f043 0301 	orr.w	r3, r3, #1
 800ad08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ad0c:	4b40      	ldr	r3, [pc, #256]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800ad0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	61bb      	str	r3, [r7, #24]
 800ad18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad1a:	4b3d      	ldr	r3, [pc, #244]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800ad1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad20:	4a3b      	ldr	r2, [pc, #236]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800ad22:	f043 0302 	orr.w	r3, r3, #2
 800ad26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ad2a:	4b39      	ldr	r3, [pc, #228]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800ad2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad30:	f003 0302 	and.w	r3, r3, #2
 800ad34:	617b      	str	r3, [r7, #20]
 800ad36:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800ad38:	230d      	movs	r3, #13
 800ad3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad3e:	2302      	movs	r3, #2
 800ad40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad44:	2300      	movs	r3, #0
 800ad46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800ad50:	230a      	movs	r3, #10
 800ad52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad56:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	482d      	ldr	r0, [pc, #180]	@ (800ae14 <HAL_PCD_MspInit+0x194>)
 800ad5e:	f7f7 f96b 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800ad62:	2328      	movs	r3, #40	@ 0x28
 800ad64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad68:	2302      	movs	r3, #2
 800ad6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad74:	2302      	movs	r3, #2
 800ad76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800ad7a:	230a      	movs	r3, #10
 800ad7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ad84:	4619      	mov	r1, r3
 800ad86:	4824      	ldr	r0, [pc, #144]	@ (800ae18 <HAL_PCD_MspInit+0x198>)
 800ad88:	f7f7 f956 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800ad8c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800ad90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad94:	2302      	movs	r3, #2
 800ad96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ada0:	2302      	movs	r3, #2
 800ada2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800ada6:	230a      	movs	r3, #10
 800ada8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800adb0:	4619      	mov	r1, r3
 800adb2:	481a      	ldr	r0, [pc, #104]	@ (800ae1c <HAL_PCD_MspInit+0x19c>)
 800adb4:	f7f7 f940 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800adb8:	4b15      	ldr	r3, [pc, #84]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800adba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800adbe:	4a14      	ldr	r2, [pc, #80]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800adc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800adc4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800adc8:	4b11      	ldr	r3, [pc, #68]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800adca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800adce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800add2:	613b      	str	r3, [r7, #16]
 800add4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800add6:	4b0e      	ldr	r3, [pc, #56]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800add8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800addc:	4a0c      	ldr	r2, [pc, #48]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800adde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ade2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ade6:	4b0a      	ldr	r3, [pc, #40]	@ (800ae10 <HAL_PCD_MspInit+0x190>)
 800ade8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800adec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800adf0:	60fb      	str	r3, [r7, #12]
 800adf2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800adf4:	2200      	movs	r2, #0
 800adf6:	2100      	movs	r1, #0
 800adf8:	204d      	movs	r0, #77	@ 0x4d
 800adfa:	f7f7 f870 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800adfe:	204d      	movs	r0, #77	@ 0x4d
 800ae00:	f7f7 f887 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ae04:	bf00      	nop
 800ae06:	37f0      	adds	r7, #240	@ 0xf0
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	40040000 	.word	0x40040000
 800ae10:	58024400 	.word	0x58024400
 800ae14:	58020800 	.word	0x58020800
 800ae18:	58020000 	.word	0x58020000
 800ae1c:	58020400 	.word	0x58020400

0800ae20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ae34:	4619      	mov	r1, r3
 800ae36:	4610      	mov	r0, r2
 800ae38:	f7fe fb8d 	bl	8009556 <USBD_LL_SetupStage>
}
 800ae3c:	bf00      	nop
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae56:	78fa      	ldrb	r2, [r7, #3]
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	4413      	add	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	440b      	add	r3, r1
 800ae64:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	78fb      	ldrb	r3, [r7, #3]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	f7fe fbc7 	bl	8009600 <USBD_LL_DataOutStage>
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae8c:	78fa      	ldrb	r2, [r7, #3]
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	4613      	mov	r3, r2
 800ae92:	00db      	lsls	r3, r3, #3
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	440b      	add	r3, r1
 800ae9a:	3320      	adds	r3, #32
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	78fb      	ldrb	r3, [r7, #3]
 800aea0:	4619      	mov	r1, r3
 800aea2:	f7fe fc60 	bl	8009766 <USBD_LL_DataInStage>
}
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fe fd9a 	bl	80099f6 <USBD_LL_SOF>
}
 800aec2:	bf00      	nop
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aed2:	2301      	movs	r3, #1
 800aed4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	79db      	ldrb	r3, [r3, #7]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d102      	bne.n	800aee4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]
 800aee2:	e008      	b.n	800aef6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	79db      	ldrb	r3, [r3, #7]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d102      	bne.n	800aef2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aeec:	2301      	movs	r3, #1
 800aeee:	73fb      	strb	r3, [r7, #15]
 800aef0:	e001      	b.n	800aef6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aef2:	f7f6 fc97 	bl	8001824 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aefc:	7bfa      	ldrb	r2, [r7, #15]
 800aefe:	4611      	mov	r1, r2
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe fd34 	bl	800996e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fcdc 	bl	80098ca <USBD_LL_Reset>
}
 800af12:	bf00      	nop
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fd2f 	bl	800998e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6812      	ldr	r2, [r2, #0]
 800af3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800af42:	f043 0301 	orr.w	r3, r3, #1
 800af46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	7adb      	ldrb	r3, [r3, #11]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af50:	4b04      	ldr	r3, [pc, #16]	@ (800af64 <HAL_PCD_SuspendCallback+0x48>)
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	4a03      	ldr	r2, [pc, #12]	@ (800af64 <HAL_PCD_SuspendCallback+0x48>)
 800af56:	f043 0306 	orr.w	r3, r3, #6
 800af5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	e000ed00 	.word	0xe000ed00

0800af68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe fd25 	bl	80099c6 <USBD_LL_Resume>
}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af96:	78fa      	ldrb	r2, [r7, #3]
 800af98:	4611      	mov	r1, r2
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fe fd7d 	bl	8009a9a <USBD_LL_IsoOUTIncomplete>
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afba:	78fa      	ldrb	r2, [r7, #3]
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fe fd39 	bl	8009a36 <USBD_LL_IsoINIncomplete>
}
 800afc4:	bf00      	nop
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe fd8f 	bl	8009afe <USBD_LL_DevConnected>
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fd8c 	bl	8009b14 <USBD_LL_DevDisconnected>
}
 800affc:	bf00      	nop
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d140      	bne.n	800b096 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b014:	4a22      	ldr	r2, [pc, #136]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a20      	ldr	r2, [pc, #128]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b020:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b024:	4b1e      	ldr	r3, [pc, #120]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b026:	4a1f      	ldr	r2, [pc, #124]	@ (800b0a4 <USBD_LL_Init+0xa0>)
 800b028:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800b02a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b02c:	2209      	movs	r2, #9
 800b02e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800b030:	4b1b      	ldr	r3, [pc, #108]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b032:	2200      	movs	r2, #0
 800b034:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b036:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b038:	2200      	movs	r2, #0
 800b03a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800b03c:	4b18      	ldr	r3, [pc, #96]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b03e:	2201      	movs	r2, #1
 800b040:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b042:	4b17      	ldr	r3, [pc, #92]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b044:	2200      	movs	r2, #0
 800b046:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b048:	4b15      	ldr	r3, [pc, #84]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b04e:	4b14      	ldr	r3, [pc, #80]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b050:	2200      	movs	r2, #0
 800b052:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b054:	4b12      	ldr	r3, [pc, #72]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b056:	2200      	movs	r2, #0
 800b058:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b05a:	4b11      	ldr	r3, [pc, #68]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b060:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b062:	2200      	movs	r2, #0
 800b064:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b066:	480e      	ldr	r0, [pc, #56]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b068:	f7f7 f9a7 	bl	80023ba <HAL_PCD_Init>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b072:	f7f6 fbd7 	bl	8001824 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b07a:	4809      	ldr	r0, [pc, #36]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b07c:	f7f8 fbe5 	bl	800384a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b080:	2280      	movs	r2, #128	@ 0x80
 800b082:	2100      	movs	r1, #0
 800b084:	4806      	ldr	r0, [pc, #24]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b086:	f7f8 fb99 	bl	80037bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b08a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b08e:	2101      	movs	r1, #1
 800b090:	4803      	ldr	r0, [pc, #12]	@ (800b0a0 <USBD_LL_Init+0x9c>)
 800b092:	f7f8 fb93 	bl	80037bc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	24000c84 	.word	0x24000c84
 800b0a4:	40040000 	.word	0x40040000

0800b0a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7f7 fa87 	bl	80025d2 <HAL_PCD_Start>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 f930 	bl	800b330 <USBD_Get_USB_Status>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	4608      	mov	r0, r1
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	70fb      	strb	r3, [r7, #3]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	70bb      	strb	r3, [r7, #2]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b106:	78bb      	ldrb	r3, [r7, #2]
 800b108:	883a      	ldrh	r2, [r7, #0]
 800b10a:	78f9      	ldrb	r1, [r7, #3]
 800b10c:	f7f7 ff88 	bl	8003020 <HAL_PCD_EP_Open>
 800b110:	4603      	mov	r3, r0
 800b112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b114:	7bfb      	ldrb	r3, [r7, #15]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 f90a 	bl	800b330 <USBD_Get_USB_Status>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b120:	7bbb      	ldrb	r3, [r7, #14]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b084      	sub	sp, #16
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	460b      	mov	r3, r1
 800b134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b144:	78fa      	ldrb	r2, [r7, #3]
 800b146:	4611      	mov	r1, r2
 800b148:	4618      	mov	r0, r3
 800b14a:	f7f7 ffd3 	bl	80030f4 <HAL_PCD_EP_Close>
 800b14e:	4603      	mov	r3, r0
 800b150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	4618      	mov	r0, r3
 800b156:	f000 f8eb 	bl	800b330 <USBD_Get_USB_Status>
 800b15a:	4603      	mov	r3, r0
 800b15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	460b      	mov	r3, r1
 800b172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b182:	78fa      	ldrb	r2, [r7, #3]
 800b184:	4611      	mov	r1, r2
 800b186:	4618      	mov	r0, r3
 800b188:	f7f8 f873 	bl	8003272 <HAL_PCD_EP_SetStall>
 800b18c:	4603      	mov	r3, r0
 800b18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f8cc 	bl	800b330 <USBD_Get_USB_Status>
 800b198:	4603      	mov	r3, r0
 800b19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1c0:	78fa      	ldrb	r2, [r7, #3]
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7f8 f8b7 	bl	8003338 <HAL_PCD_EP_ClrStall>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 f8ad 	bl	800b330 <USBD_Get_USB_Status>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	da0b      	bge.n	800b218 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b200:	78fb      	ldrb	r3, [r7, #3]
 800b202:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b206:	68f9      	ldr	r1, [r7, #12]
 800b208:	4613      	mov	r3, r2
 800b20a:	00db      	lsls	r3, r3, #3
 800b20c:	4413      	add	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	440b      	add	r3, r1
 800b212:	3316      	adds	r3, #22
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	e00b      	b.n	800b230 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b21e:	68f9      	ldr	r1, [r7, #12]
 800b220:	4613      	mov	r3, r2
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	4413      	add	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	440b      	add	r3, r1
 800b22a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b22e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b248:	2300      	movs	r3, #0
 800b24a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b256:	78fa      	ldrb	r2, [r7, #3]
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7f7 febc 	bl	8002fd8 <HAL_PCD_SetAddress>
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	4618      	mov	r0, r3
 800b268:	f000 f862 	bl	800b330 <USBD_Get_USB_Status>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b270:	7bbb      	ldrb	r3, [r7, #14]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b086      	sub	sp, #24
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]
 800b286:	460b      	mov	r3, r1
 800b288:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b298:	7af9      	ldrb	r1, [r7, #11]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	f7f7 ffae 	bl	80031fe <HAL_PCD_EP_Transmit>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 f841 	bl	800b330 <USBD_Get_USB_Status>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	607a      	str	r2, [r7, #4]
 800b2c6:	603b      	str	r3, [r7, #0]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b2da:	7af9      	ldrb	r1, [r7, #11]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	f7f7 ff52 	bl	8003188 <HAL_PCD_EP_Receive>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 f820 	bl	800b330 <USBD_Get_USB_Status>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b308:	4b03      	ldr	r3, [pc, #12]	@ (800b318 <USBD_static_malloc+0x18>)
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	24001168 	.word	0x24001168

0800b31c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	4603      	mov	r3, r0
 800b338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b33e:	79fb      	ldrb	r3, [r7, #7]
 800b340:	2b03      	cmp	r3, #3
 800b342:	d817      	bhi.n	800b374 <USBD_Get_USB_Status+0x44>
 800b344:	a201      	add	r2, pc, #4	@ (adr r2, 800b34c <USBD_Get_USB_Status+0x1c>)
 800b346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34a:	bf00      	nop
 800b34c:	0800b35d 	.word	0x0800b35d
 800b350:	0800b363 	.word	0x0800b363
 800b354:	0800b369 	.word	0x0800b369
 800b358:	0800b36f 	.word	0x0800b36f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]
    break;
 800b360:	e00b      	b.n	800b37a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b362:	2303      	movs	r3, #3
 800b364:	73fb      	strb	r3, [r7, #15]
    break;
 800b366:	e008      	b.n	800b37a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b368:	2301      	movs	r3, #1
 800b36a:	73fb      	strb	r3, [r7, #15]
    break;
 800b36c:	e005      	b.n	800b37a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b36e:	2303      	movs	r3, #3
 800b370:	73fb      	strb	r3, [r7, #15]
    break;
 800b372:	e002      	b.n	800b37a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b374:	2303      	movs	r3, #3
 800b376:	73fb      	strb	r3, [r7, #15]
    break;
 800b378:	bf00      	nop
  }
  return usb_status;
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <siprintf>:
 800b388:	b40e      	push	{r1, r2, r3}
 800b38a:	b500      	push	{lr}
 800b38c:	b09c      	sub	sp, #112	@ 0x70
 800b38e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b390:	9002      	str	r0, [sp, #8]
 800b392:	9006      	str	r0, [sp, #24]
 800b394:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b398:	4809      	ldr	r0, [pc, #36]	@ (800b3c0 <siprintf+0x38>)
 800b39a:	9107      	str	r1, [sp, #28]
 800b39c:	9104      	str	r1, [sp, #16]
 800b39e:	4909      	ldr	r1, [pc, #36]	@ (800b3c4 <siprintf+0x3c>)
 800b3a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3a4:	9105      	str	r1, [sp, #20]
 800b3a6:	6800      	ldr	r0, [r0, #0]
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	a902      	add	r1, sp, #8
 800b3ac:	f000 f994 	bl	800b6d8 <_svfiprintf_r>
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
 800b3b6:	b01c      	add	sp, #112	@ 0x70
 800b3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3bc:	b003      	add	sp, #12
 800b3be:	4770      	bx	lr
 800b3c0:	240002c8 	.word	0x240002c8
 800b3c4:	ffff0208 	.word	0xffff0208

0800b3c8 <memset>:
 800b3c8:	4402      	add	r2, r0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d100      	bne.n	800b3d2 <memset+0xa>
 800b3d0:	4770      	bx	lr
 800b3d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d6:	e7f9      	b.n	800b3cc <memset+0x4>

0800b3d8 <__errno>:
 800b3d8:	4b01      	ldr	r3, [pc, #4]	@ (800b3e0 <__errno+0x8>)
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	240002c8 	.word	0x240002c8

0800b3e4 <__libc_init_array>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	4d0d      	ldr	r5, [pc, #52]	@ (800b41c <__libc_init_array+0x38>)
 800b3e8:	4c0d      	ldr	r4, [pc, #52]	@ (800b420 <__libc_init_array+0x3c>)
 800b3ea:	1b64      	subs	r4, r4, r5
 800b3ec:	10a4      	asrs	r4, r4, #2
 800b3ee:	2600      	movs	r6, #0
 800b3f0:	42a6      	cmp	r6, r4
 800b3f2:	d109      	bne.n	800b408 <__libc_init_array+0x24>
 800b3f4:	4d0b      	ldr	r5, [pc, #44]	@ (800b424 <__libc_init_array+0x40>)
 800b3f6:	4c0c      	ldr	r4, [pc, #48]	@ (800b428 <__libc_init_array+0x44>)
 800b3f8:	f000 fc66 	bl	800bcc8 <_init>
 800b3fc:	1b64      	subs	r4, r4, r5
 800b3fe:	10a4      	asrs	r4, r4, #2
 800b400:	2600      	movs	r6, #0
 800b402:	42a6      	cmp	r6, r4
 800b404:	d105      	bne.n	800b412 <__libc_init_array+0x2e>
 800b406:	bd70      	pop	{r4, r5, r6, pc}
 800b408:	f855 3b04 	ldr.w	r3, [r5], #4
 800b40c:	4798      	blx	r3
 800b40e:	3601      	adds	r6, #1
 800b410:	e7ee      	b.n	800b3f0 <__libc_init_array+0xc>
 800b412:	f855 3b04 	ldr.w	r3, [r5], #4
 800b416:	4798      	blx	r3
 800b418:	3601      	adds	r6, #1
 800b41a:	e7f2      	b.n	800b402 <__libc_init_array+0x1e>
 800b41c:	0800bea4 	.word	0x0800bea4
 800b420:	0800bea4 	.word	0x0800bea4
 800b424:	0800bea4 	.word	0x0800bea4
 800b428:	0800bea8 	.word	0x0800bea8

0800b42c <__retarget_lock_acquire_recursive>:
 800b42c:	4770      	bx	lr

0800b42e <__retarget_lock_release_recursive>:
 800b42e:	4770      	bx	lr

0800b430 <_free_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4605      	mov	r5, r0
 800b434:	2900      	cmp	r1, #0
 800b436:	d041      	beq.n	800b4bc <_free_r+0x8c>
 800b438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b43c:	1f0c      	subs	r4, r1, #4
 800b43e:	2b00      	cmp	r3, #0
 800b440:	bfb8      	it	lt
 800b442:	18e4      	addlt	r4, r4, r3
 800b444:	f000 f8e0 	bl	800b608 <__malloc_lock>
 800b448:	4a1d      	ldr	r2, [pc, #116]	@ (800b4c0 <_free_r+0x90>)
 800b44a:	6813      	ldr	r3, [r2, #0]
 800b44c:	b933      	cbnz	r3, 800b45c <_free_r+0x2c>
 800b44e:	6063      	str	r3, [r4, #4]
 800b450:	6014      	str	r4, [r2, #0]
 800b452:	4628      	mov	r0, r5
 800b454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b458:	f000 b8dc 	b.w	800b614 <__malloc_unlock>
 800b45c:	42a3      	cmp	r3, r4
 800b45e:	d908      	bls.n	800b472 <_free_r+0x42>
 800b460:	6820      	ldr	r0, [r4, #0]
 800b462:	1821      	adds	r1, r4, r0
 800b464:	428b      	cmp	r3, r1
 800b466:	bf01      	itttt	eq
 800b468:	6819      	ldreq	r1, [r3, #0]
 800b46a:	685b      	ldreq	r3, [r3, #4]
 800b46c:	1809      	addeq	r1, r1, r0
 800b46e:	6021      	streq	r1, [r4, #0]
 800b470:	e7ed      	b.n	800b44e <_free_r+0x1e>
 800b472:	461a      	mov	r2, r3
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	b10b      	cbz	r3, 800b47c <_free_r+0x4c>
 800b478:	42a3      	cmp	r3, r4
 800b47a:	d9fa      	bls.n	800b472 <_free_r+0x42>
 800b47c:	6811      	ldr	r1, [r2, #0]
 800b47e:	1850      	adds	r0, r2, r1
 800b480:	42a0      	cmp	r0, r4
 800b482:	d10b      	bne.n	800b49c <_free_r+0x6c>
 800b484:	6820      	ldr	r0, [r4, #0]
 800b486:	4401      	add	r1, r0
 800b488:	1850      	adds	r0, r2, r1
 800b48a:	4283      	cmp	r3, r0
 800b48c:	6011      	str	r1, [r2, #0]
 800b48e:	d1e0      	bne.n	800b452 <_free_r+0x22>
 800b490:	6818      	ldr	r0, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	6053      	str	r3, [r2, #4]
 800b496:	4408      	add	r0, r1
 800b498:	6010      	str	r0, [r2, #0]
 800b49a:	e7da      	b.n	800b452 <_free_r+0x22>
 800b49c:	d902      	bls.n	800b4a4 <_free_r+0x74>
 800b49e:	230c      	movs	r3, #12
 800b4a0:	602b      	str	r3, [r5, #0]
 800b4a2:	e7d6      	b.n	800b452 <_free_r+0x22>
 800b4a4:	6820      	ldr	r0, [r4, #0]
 800b4a6:	1821      	adds	r1, r4, r0
 800b4a8:	428b      	cmp	r3, r1
 800b4aa:	bf04      	itt	eq
 800b4ac:	6819      	ldreq	r1, [r3, #0]
 800b4ae:	685b      	ldreq	r3, [r3, #4]
 800b4b0:	6063      	str	r3, [r4, #4]
 800b4b2:	bf04      	itt	eq
 800b4b4:	1809      	addeq	r1, r1, r0
 800b4b6:	6021      	streq	r1, [r4, #0]
 800b4b8:	6054      	str	r4, [r2, #4]
 800b4ba:	e7ca      	b.n	800b452 <_free_r+0x22>
 800b4bc:	bd38      	pop	{r3, r4, r5, pc}
 800b4be:	bf00      	nop
 800b4c0:	240012c0 	.word	0x240012c0

0800b4c4 <sbrk_aligned>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	4e0f      	ldr	r6, [pc, #60]	@ (800b504 <sbrk_aligned+0x40>)
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	6831      	ldr	r1, [r6, #0]
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	b911      	cbnz	r1, 800b4d6 <sbrk_aligned+0x12>
 800b4d0:	f000 fba6 	bl	800bc20 <_sbrk_r>
 800b4d4:	6030      	str	r0, [r6, #0]
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f000 fba1 	bl	800bc20 <_sbrk_r>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d103      	bne.n	800b4ea <sbrk_aligned+0x26>
 800b4e2:	f04f 34ff 	mov.w	r4, #4294967295
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ea:	1cc4      	adds	r4, r0, #3
 800b4ec:	f024 0403 	bic.w	r4, r4, #3
 800b4f0:	42a0      	cmp	r0, r4
 800b4f2:	d0f8      	beq.n	800b4e6 <sbrk_aligned+0x22>
 800b4f4:	1a21      	subs	r1, r4, r0
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f000 fb92 	bl	800bc20 <_sbrk_r>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d1f2      	bne.n	800b4e6 <sbrk_aligned+0x22>
 800b500:	e7ef      	b.n	800b4e2 <sbrk_aligned+0x1e>
 800b502:	bf00      	nop
 800b504:	240012bc 	.word	0x240012bc

0800b508 <_malloc_r>:
 800b508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b50c:	1ccd      	adds	r5, r1, #3
 800b50e:	f025 0503 	bic.w	r5, r5, #3
 800b512:	3508      	adds	r5, #8
 800b514:	2d0c      	cmp	r5, #12
 800b516:	bf38      	it	cc
 800b518:	250c      	movcc	r5, #12
 800b51a:	2d00      	cmp	r5, #0
 800b51c:	4606      	mov	r6, r0
 800b51e:	db01      	blt.n	800b524 <_malloc_r+0x1c>
 800b520:	42a9      	cmp	r1, r5
 800b522:	d904      	bls.n	800b52e <_malloc_r+0x26>
 800b524:	230c      	movs	r3, #12
 800b526:	6033      	str	r3, [r6, #0]
 800b528:	2000      	movs	r0, #0
 800b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b604 <_malloc_r+0xfc>
 800b532:	f000 f869 	bl	800b608 <__malloc_lock>
 800b536:	f8d8 3000 	ldr.w	r3, [r8]
 800b53a:	461c      	mov	r4, r3
 800b53c:	bb44      	cbnz	r4, 800b590 <_malloc_r+0x88>
 800b53e:	4629      	mov	r1, r5
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff ffbf 	bl	800b4c4 <sbrk_aligned>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	4604      	mov	r4, r0
 800b54a:	d158      	bne.n	800b5fe <_malloc_r+0xf6>
 800b54c:	f8d8 4000 	ldr.w	r4, [r8]
 800b550:	4627      	mov	r7, r4
 800b552:	2f00      	cmp	r7, #0
 800b554:	d143      	bne.n	800b5de <_malloc_r+0xd6>
 800b556:	2c00      	cmp	r4, #0
 800b558:	d04b      	beq.n	800b5f2 <_malloc_r+0xea>
 800b55a:	6823      	ldr	r3, [r4, #0]
 800b55c:	4639      	mov	r1, r7
 800b55e:	4630      	mov	r0, r6
 800b560:	eb04 0903 	add.w	r9, r4, r3
 800b564:	f000 fb5c 	bl	800bc20 <_sbrk_r>
 800b568:	4581      	cmp	r9, r0
 800b56a:	d142      	bne.n	800b5f2 <_malloc_r+0xea>
 800b56c:	6821      	ldr	r1, [r4, #0]
 800b56e:	1a6d      	subs	r5, r5, r1
 800b570:	4629      	mov	r1, r5
 800b572:	4630      	mov	r0, r6
 800b574:	f7ff ffa6 	bl	800b4c4 <sbrk_aligned>
 800b578:	3001      	adds	r0, #1
 800b57a:	d03a      	beq.n	800b5f2 <_malloc_r+0xea>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	442b      	add	r3, r5
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	f8d8 3000 	ldr.w	r3, [r8]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	bb62      	cbnz	r2, 800b5e4 <_malloc_r+0xdc>
 800b58a:	f8c8 7000 	str.w	r7, [r8]
 800b58e:	e00f      	b.n	800b5b0 <_malloc_r+0xa8>
 800b590:	6822      	ldr	r2, [r4, #0]
 800b592:	1b52      	subs	r2, r2, r5
 800b594:	d420      	bmi.n	800b5d8 <_malloc_r+0xd0>
 800b596:	2a0b      	cmp	r2, #11
 800b598:	d917      	bls.n	800b5ca <_malloc_r+0xc2>
 800b59a:	1961      	adds	r1, r4, r5
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	6025      	str	r5, [r4, #0]
 800b5a0:	bf18      	it	ne
 800b5a2:	6059      	strne	r1, [r3, #4]
 800b5a4:	6863      	ldr	r3, [r4, #4]
 800b5a6:	bf08      	it	eq
 800b5a8:	f8c8 1000 	streq.w	r1, [r8]
 800b5ac:	5162      	str	r2, [r4, r5]
 800b5ae:	604b      	str	r3, [r1, #4]
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f000 f82f 	bl	800b614 <__malloc_unlock>
 800b5b6:	f104 000b 	add.w	r0, r4, #11
 800b5ba:	1d23      	adds	r3, r4, #4
 800b5bc:	f020 0007 	bic.w	r0, r0, #7
 800b5c0:	1ac2      	subs	r2, r0, r3
 800b5c2:	bf1c      	itt	ne
 800b5c4:	1a1b      	subne	r3, r3, r0
 800b5c6:	50a3      	strne	r3, [r4, r2]
 800b5c8:	e7af      	b.n	800b52a <_malloc_r+0x22>
 800b5ca:	6862      	ldr	r2, [r4, #4]
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	bf0c      	ite	eq
 800b5d0:	f8c8 2000 	streq.w	r2, [r8]
 800b5d4:	605a      	strne	r2, [r3, #4]
 800b5d6:	e7eb      	b.n	800b5b0 <_malloc_r+0xa8>
 800b5d8:	4623      	mov	r3, r4
 800b5da:	6864      	ldr	r4, [r4, #4]
 800b5dc:	e7ae      	b.n	800b53c <_malloc_r+0x34>
 800b5de:	463c      	mov	r4, r7
 800b5e0:	687f      	ldr	r7, [r7, #4]
 800b5e2:	e7b6      	b.n	800b552 <_malloc_r+0x4a>
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	42a3      	cmp	r3, r4
 800b5ea:	d1fb      	bne.n	800b5e4 <_malloc_r+0xdc>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	6053      	str	r3, [r2, #4]
 800b5f0:	e7de      	b.n	800b5b0 <_malloc_r+0xa8>
 800b5f2:	230c      	movs	r3, #12
 800b5f4:	6033      	str	r3, [r6, #0]
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	f000 f80c 	bl	800b614 <__malloc_unlock>
 800b5fc:	e794      	b.n	800b528 <_malloc_r+0x20>
 800b5fe:	6005      	str	r5, [r0, #0]
 800b600:	e7d6      	b.n	800b5b0 <_malloc_r+0xa8>
 800b602:	bf00      	nop
 800b604:	240012c0 	.word	0x240012c0

0800b608 <__malloc_lock>:
 800b608:	4801      	ldr	r0, [pc, #4]	@ (800b610 <__malloc_lock+0x8>)
 800b60a:	f7ff bf0f 	b.w	800b42c <__retarget_lock_acquire_recursive>
 800b60e:	bf00      	nop
 800b610:	240012b8 	.word	0x240012b8

0800b614 <__malloc_unlock>:
 800b614:	4801      	ldr	r0, [pc, #4]	@ (800b61c <__malloc_unlock+0x8>)
 800b616:	f7ff bf0a 	b.w	800b42e <__retarget_lock_release_recursive>
 800b61a:	bf00      	nop
 800b61c:	240012b8 	.word	0x240012b8

0800b620 <__ssputs_r>:
 800b620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b624:	688e      	ldr	r6, [r1, #8]
 800b626:	461f      	mov	r7, r3
 800b628:	42be      	cmp	r6, r7
 800b62a:	680b      	ldr	r3, [r1, #0]
 800b62c:	4682      	mov	sl, r0
 800b62e:	460c      	mov	r4, r1
 800b630:	4690      	mov	r8, r2
 800b632:	d82d      	bhi.n	800b690 <__ssputs_r+0x70>
 800b634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b63c:	d026      	beq.n	800b68c <__ssputs_r+0x6c>
 800b63e:	6965      	ldr	r5, [r4, #20]
 800b640:	6909      	ldr	r1, [r1, #16]
 800b642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b646:	eba3 0901 	sub.w	r9, r3, r1
 800b64a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b64e:	1c7b      	adds	r3, r7, #1
 800b650:	444b      	add	r3, r9
 800b652:	106d      	asrs	r5, r5, #1
 800b654:	429d      	cmp	r5, r3
 800b656:	bf38      	it	cc
 800b658:	461d      	movcc	r5, r3
 800b65a:	0553      	lsls	r3, r2, #21
 800b65c:	d527      	bpl.n	800b6ae <__ssputs_r+0x8e>
 800b65e:	4629      	mov	r1, r5
 800b660:	f7ff ff52 	bl	800b508 <_malloc_r>
 800b664:	4606      	mov	r6, r0
 800b666:	b360      	cbz	r0, 800b6c2 <__ssputs_r+0xa2>
 800b668:	6921      	ldr	r1, [r4, #16]
 800b66a:	464a      	mov	r2, r9
 800b66c:	f000 fae8 	bl	800bc40 <memcpy>
 800b670:	89a3      	ldrh	r3, [r4, #12]
 800b672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	6126      	str	r6, [r4, #16]
 800b67e:	6165      	str	r5, [r4, #20]
 800b680:	444e      	add	r6, r9
 800b682:	eba5 0509 	sub.w	r5, r5, r9
 800b686:	6026      	str	r6, [r4, #0]
 800b688:	60a5      	str	r5, [r4, #8]
 800b68a:	463e      	mov	r6, r7
 800b68c:	42be      	cmp	r6, r7
 800b68e:	d900      	bls.n	800b692 <__ssputs_r+0x72>
 800b690:	463e      	mov	r6, r7
 800b692:	6820      	ldr	r0, [r4, #0]
 800b694:	4632      	mov	r2, r6
 800b696:	4641      	mov	r1, r8
 800b698:	f000 faa8 	bl	800bbec <memmove>
 800b69c:	68a3      	ldr	r3, [r4, #8]
 800b69e:	1b9b      	subs	r3, r3, r6
 800b6a0:	60a3      	str	r3, [r4, #8]
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	4433      	add	r3, r6
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ae:	462a      	mov	r2, r5
 800b6b0:	f000 fad4 	bl	800bc5c <_realloc_r>
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d1e0      	bne.n	800b67c <__ssputs_r+0x5c>
 800b6ba:	6921      	ldr	r1, [r4, #16]
 800b6bc:	4650      	mov	r0, sl
 800b6be:	f7ff feb7 	bl	800b430 <_free_r>
 800b6c2:	230c      	movs	r3, #12
 800b6c4:	f8ca 3000 	str.w	r3, [sl]
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ce:	81a3      	strh	r3, [r4, #12]
 800b6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d4:	e7e9      	b.n	800b6aa <__ssputs_r+0x8a>
	...

0800b6d8 <_svfiprintf_r>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	4698      	mov	r8, r3
 800b6de:	898b      	ldrh	r3, [r1, #12]
 800b6e0:	061b      	lsls	r3, r3, #24
 800b6e2:	b09d      	sub	sp, #116	@ 0x74
 800b6e4:	4607      	mov	r7, r0
 800b6e6:	460d      	mov	r5, r1
 800b6e8:	4614      	mov	r4, r2
 800b6ea:	d510      	bpl.n	800b70e <_svfiprintf_r+0x36>
 800b6ec:	690b      	ldr	r3, [r1, #16]
 800b6ee:	b973      	cbnz	r3, 800b70e <_svfiprintf_r+0x36>
 800b6f0:	2140      	movs	r1, #64	@ 0x40
 800b6f2:	f7ff ff09 	bl	800b508 <_malloc_r>
 800b6f6:	6028      	str	r0, [r5, #0]
 800b6f8:	6128      	str	r0, [r5, #16]
 800b6fa:	b930      	cbnz	r0, 800b70a <_svfiprintf_r+0x32>
 800b6fc:	230c      	movs	r3, #12
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	f04f 30ff 	mov.w	r0, #4294967295
 800b704:	b01d      	add	sp, #116	@ 0x74
 800b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70a:	2340      	movs	r3, #64	@ 0x40
 800b70c:	616b      	str	r3, [r5, #20]
 800b70e:	2300      	movs	r3, #0
 800b710:	9309      	str	r3, [sp, #36]	@ 0x24
 800b712:	2320      	movs	r3, #32
 800b714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b718:	f8cd 800c 	str.w	r8, [sp, #12]
 800b71c:	2330      	movs	r3, #48	@ 0x30
 800b71e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b8bc <_svfiprintf_r+0x1e4>
 800b722:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b726:	f04f 0901 	mov.w	r9, #1
 800b72a:	4623      	mov	r3, r4
 800b72c:	469a      	mov	sl, r3
 800b72e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b732:	b10a      	cbz	r2, 800b738 <_svfiprintf_r+0x60>
 800b734:	2a25      	cmp	r2, #37	@ 0x25
 800b736:	d1f9      	bne.n	800b72c <_svfiprintf_r+0x54>
 800b738:	ebba 0b04 	subs.w	fp, sl, r4
 800b73c:	d00b      	beq.n	800b756 <_svfiprintf_r+0x7e>
 800b73e:	465b      	mov	r3, fp
 800b740:	4622      	mov	r2, r4
 800b742:	4629      	mov	r1, r5
 800b744:	4638      	mov	r0, r7
 800b746:	f7ff ff6b 	bl	800b620 <__ssputs_r>
 800b74a:	3001      	adds	r0, #1
 800b74c:	f000 80a7 	beq.w	800b89e <_svfiprintf_r+0x1c6>
 800b750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b752:	445a      	add	r2, fp
 800b754:	9209      	str	r2, [sp, #36]	@ 0x24
 800b756:	f89a 3000 	ldrb.w	r3, [sl]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f000 809f 	beq.w	800b89e <_svfiprintf_r+0x1c6>
 800b760:	2300      	movs	r3, #0
 800b762:	f04f 32ff 	mov.w	r2, #4294967295
 800b766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b76a:	f10a 0a01 	add.w	sl, sl, #1
 800b76e:	9304      	str	r3, [sp, #16]
 800b770:	9307      	str	r3, [sp, #28]
 800b772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b776:	931a      	str	r3, [sp, #104]	@ 0x68
 800b778:	4654      	mov	r4, sl
 800b77a:	2205      	movs	r2, #5
 800b77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b780:	484e      	ldr	r0, [pc, #312]	@ (800b8bc <_svfiprintf_r+0x1e4>)
 800b782:	f7f4 fdcd 	bl	8000320 <memchr>
 800b786:	9a04      	ldr	r2, [sp, #16]
 800b788:	b9d8      	cbnz	r0, 800b7c2 <_svfiprintf_r+0xea>
 800b78a:	06d0      	lsls	r0, r2, #27
 800b78c:	bf44      	itt	mi
 800b78e:	2320      	movmi	r3, #32
 800b790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b794:	0711      	lsls	r1, r2, #28
 800b796:	bf44      	itt	mi
 800b798:	232b      	movmi	r3, #43	@ 0x2b
 800b79a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b79e:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7a4:	d015      	beq.n	800b7d2 <_svfiprintf_r+0xfa>
 800b7a6:	9a07      	ldr	r2, [sp, #28]
 800b7a8:	4654      	mov	r4, sl
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	f04f 0c0a 	mov.w	ip, #10
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7b6:	3b30      	subs	r3, #48	@ 0x30
 800b7b8:	2b09      	cmp	r3, #9
 800b7ba:	d94b      	bls.n	800b854 <_svfiprintf_r+0x17c>
 800b7bc:	b1b0      	cbz	r0, 800b7ec <_svfiprintf_r+0x114>
 800b7be:	9207      	str	r2, [sp, #28]
 800b7c0:	e014      	b.n	800b7ec <_svfiprintf_r+0x114>
 800b7c2:	eba0 0308 	sub.w	r3, r0, r8
 800b7c6:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	9304      	str	r3, [sp, #16]
 800b7ce:	46a2      	mov	sl, r4
 800b7d0:	e7d2      	b.n	800b778 <_svfiprintf_r+0xa0>
 800b7d2:	9b03      	ldr	r3, [sp, #12]
 800b7d4:	1d19      	adds	r1, r3, #4
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	9103      	str	r1, [sp, #12]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bfbb      	ittet	lt
 800b7de:	425b      	neglt	r3, r3
 800b7e0:	f042 0202 	orrlt.w	r2, r2, #2
 800b7e4:	9307      	strge	r3, [sp, #28]
 800b7e6:	9307      	strlt	r3, [sp, #28]
 800b7e8:	bfb8      	it	lt
 800b7ea:	9204      	strlt	r2, [sp, #16]
 800b7ec:	7823      	ldrb	r3, [r4, #0]
 800b7ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7f0:	d10a      	bne.n	800b808 <_svfiprintf_r+0x130>
 800b7f2:	7863      	ldrb	r3, [r4, #1]
 800b7f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7f6:	d132      	bne.n	800b85e <_svfiprintf_r+0x186>
 800b7f8:	9b03      	ldr	r3, [sp, #12]
 800b7fa:	1d1a      	adds	r2, r3, #4
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	9203      	str	r2, [sp, #12]
 800b800:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b804:	3402      	adds	r4, #2
 800b806:	9305      	str	r3, [sp, #20]
 800b808:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b8cc <_svfiprintf_r+0x1f4>
 800b80c:	7821      	ldrb	r1, [r4, #0]
 800b80e:	2203      	movs	r2, #3
 800b810:	4650      	mov	r0, sl
 800b812:	f7f4 fd85 	bl	8000320 <memchr>
 800b816:	b138      	cbz	r0, 800b828 <_svfiprintf_r+0x150>
 800b818:	9b04      	ldr	r3, [sp, #16]
 800b81a:	eba0 000a 	sub.w	r0, r0, sl
 800b81e:	2240      	movs	r2, #64	@ 0x40
 800b820:	4082      	lsls	r2, r0
 800b822:	4313      	orrs	r3, r2
 800b824:	3401      	adds	r4, #1
 800b826:	9304      	str	r3, [sp, #16]
 800b828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82c:	4824      	ldr	r0, [pc, #144]	@ (800b8c0 <_svfiprintf_r+0x1e8>)
 800b82e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b832:	2206      	movs	r2, #6
 800b834:	f7f4 fd74 	bl	8000320 <memchr>
 800b838:	2800      	cmp	r0, #0
 800b83a:	d036      	beq.n	800b8aa <_svfiprintf_r+0x1d2>
 800b83c:	4b21      	ldr	r3, [pc, #132]	@ (800b8c4 <_svfiprintf_r+0x1ec>)
 800b83e:	bb1b      	cbnz	r3, 800b888 <_svfiprintf_r+0x1b0>
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	3307      	adds	r3, #7
 800b844:	f023 0307 	bic.w	r3, r3, #7
 800b848:	3308      	adds	r3, #8
 800b84a:	9303      	str	r3, [sp, #12]
 800b84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b84e:	4433      	add	r3, r6
 800b850:	9309      	str	r3, [sp, #36]	@ 0x24
 800b852:	e76a      	b.n	800b72a <_svfiprintf_r+0x52>
 800b854:	fb0c 3202 	mla	r2, ip, r2, r3
 800b858:	460c      	mov	r4, r1
 800b85a:	2001      	movs	r0, #1
 800b85c:	e7a8      	b.n	800b7b0 <_svfiprintf_r+0xd8>
 800b85e:	2300      	movs	r3, #0
 800b860:	3401      	adds	r4, #1
 800b862:	9305      	str	r3, [sp, #20]
 800b864:	4619      	mov	r1, r3
 800b866:	f04f 0c0a 	mov.w	ip, #10
 800b86a:	4620      	mov	r0, r4
 800b86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b870:	3a30      	subs	r2, #48	@ 0x30
 800b872:	2a09      	cmp	r2, #9
 800b874:	d903      	bls.n	800b87e <_svfiprintf_r+0x1a6>
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0c6      	beq.n	800b808 <_svfiprintf_r+0x130>
 800b87a:	9105      	str	r1, [sp, #20]
 800b87c:	e7c4      	b.n	800b808 <_svfiprintf_r+0x130>
 800b87e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b882:	4604      	mov	r4, r0
 800b884:	2301      	movs	r3, #1
 800b886:	e7f0      	b.n	800b86a <_svfiprintf_r+0x192>
 800b888:	ab03      	add	r3, sp, #12
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	462a      	mov	r2, r5
 800b88e:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c8 <_svfiprintf_r+0x1f0>)
 800b890:	a904      	add	r1, sp, #16
 800b892:	4638      	mov	r0, r7
 800b894:	f3af 8000 	nop.w
 800b898:	1c42      	adds	r2, r0, #1
 800b89a:	4606      	mov	r6, r0
 800b89c:	d1d6      	bne.n	800b84c <_svfiprintf_r+0x174>
 800b89e:	89ab      	ldrh	r3, [r5, #12]
 800b8a0:	065b      	lsls	r3, r3, #25
 800b8a2:	f53f af2d 	bmi.w	800b700 <_svfiprintf_r+0x28>
 800b8a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8a8:	e72c      	b.n	800b704 <_svfiprintf_r+0x2c>
 800b8aa:	ab03      	add	r3, sp, #12
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	462a      	mov	r2, r5
 800b8b0:	4b05      	ldr	r3, [pc, #20]	@ (800b8c8 <_svfiprintf_r+0x1f0>)
 800b8b2:	a904      	add	r1, sp, #16
 800b8b4:	4638      	mov	r0, r7
 800b8b6:	f000 f879 	bl	800b9ac <_printf_i>
 800b8ba:	e7ed      	b.n	800b898 <_svfiprintf_r+0x1c0>
 800b8bc:	0800be68 	.word	0x0800be68
 800b8c0:	0800be72 	.word	0x0800be72
 800b8c4:	00000000 	.word	0x00000000
 800b8c8:	0800b621 	.word	0x0800b621
 800b8cc:	0800be6e 	.word	0x0800be6e

0800b8d0 <_printf_common>:
 800b8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d4:	4616      	mov	r6, r2
 800b8d6:	4698      	mov	r8, r3
 800b8d8:	688a      	ldr	r2, [r1, #8]
 800b8da:	690b      	ldr	r3, [r1, #16]
 800b8dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	bfb8      	it	lt
 800b8e4:	4613      	movlt	r3, r2
 800b8e6:	6033      	str	r3, [r6, #0]
 800b8e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	b10a      	cbz	r2, 800b8f6 <_printf_common+0x26>
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	6033      	str	r3, [r6, #0]
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	0699      	lsls	r1, r3, #26
 800b8fa:	bf42      	ittt	mi
 800b8fc:	6833      	ldrmi	r3, [r6, #0]
 800b8fe:	3302      	addmi	r3, #2
 800b900:	6033      	strmi	r3, [r6, #0]
 800b902:	6825      	ldr	r5, [r4, #0]
 800b904:	f015 0506 	ands.w	r5, r5, #6
 800b908:	d106      	bne.n	800b918 <_printf_common+0x48>
 800b90a:	f104 0a19 	add.w	sl, r4, #25
 800b90e:	68e3      	ldr	r3, [r4, #12]
 800b910:	6832      	ldr	r2, [r6, #0]
 800b912:	1a9b      	subs	r3, r3, r2
 800b914:	42ab      	cmp	r3, r5
 800b916:	dc26      	bgt.n	800b966 <_printf_common+0x96>
 800b918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b91c:	6822      	ldr	r2, [r4, #0]
 800b91e:	3b00      	subs	r3, #0
 800b920:	bf18      	it	ne
 800b922:	2301      	movne	r3, #1
 800b924:	0692      	lsls	r2, r2, #26
 800b926:	d42b      	bmi.n	800b980 <_printf_common+0xb0>
 800b928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b92c:	4641      	mov	r1, r8
 800b92e:	4638      	mov	r0, r7
 800b930:	47c8      	blx	r9
 800b932:	3001      	adds	r0, #1
 800b934:	d01e      	beq.n	800b974 <_printf_common+0xa4>
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	6922      	ldr	r2, [r4, #16]
 800b93a:	f003 0306 	and.w	r3, r3, #6
 800b93e:	2b04      	cmp	r3, #4
 800b940:	bf02      	ittt	eq
 800b942:	68e5      	ldreq	r5, [r4, #12]
 800b944:	6833      	ldreq	r3, [r6, #0]
 800b946:	1aed      	subeq	r5, r5, r3
 800b948:	68a3      	ldr	r3, [r4, #8]
 800b94a:	bf0c      	ite	eq
 800b94c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b950:	2500      	movne	r5, #0
 800b952:	4293      	cmp	r3, r2
 800b954:	bfc4      	itt	gt
 800b956:	1a9b      	subgt	r3, r3, r2
 800b958:	18ed      	addgt	r5, r5, r3
 800b95a:	2600      	movs	r6, #0
 800b95c:	341a      	adds	r4, #26
 800b95e:	42b5      	cmp	r5, r6
 800b960:	d11a      	bne.n	800b998 <_printf_common+0xc8>
 800b962:	2000      	movs	r0, #0
 800b964:	e008      	b.n	800b978 <_printf_common+0xa8>
 800b966:	2301      	movs	r3, #1
 800b968:	4652      	mov	r2, sl
 800b96a:	4641      	mov	r1, r8
 800b96c:	4638      	mov	r0, r7
 800b96e:	47c8      	blx	r9
 800b970:	3001      	adds	r0, #1
 800b972:	d103      	bne.n	800b97c <_printf_common+0xac>
 800b974:	f04f 30ff 	mov.w	r0, #4294967295
 800b978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97c:	3501      	adds	r5, #1
 800b97e:	e7c6      	b.n	800b90e <_printf_common+0x3e>
 800b980:	18e1      	adds	r1, r4, r3
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	2030      	movs	r0, #48	@ 0x30
 800b986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b98a:	4422      	add	r2, r4
 800b98c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b994:	3302      	adds	r3, #2
 800b996:	e7c7      	b.n	800b928 <_printf_common+0x58>
 800b998:	2301      	movs	r3, #1
 800b99a:	4622      	mov	r2, r4
 800b99c:	4641      	mov	r1, r8
 800b99e:	4638      	mov	r0, r7
 800b9a0:	47c8      	blx	r9
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	d0e6      	beq.n	800b974 <_printf_common+0xa4>
 800b9a6:	3601      	adds	r6, #1
 800b9a8:	e7d9      	b.n	800b95e <_printf_common+0x8e>
	...

0800b9ac <_printf_i>:
 800b9ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b0:	7e0f      	ldrb	r7, [r1, #24]
 800b9b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b9b4:	2f78      	cmp	r7, #120	@ 0x78
 800b9b6:	4691      	mov	r9, r2
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	469a      	mov	sl, r3
 800b9be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9c2:	d807      	bhi.n	800b9d4 <_printf_i+0x28>
 800b9c4:	2f62      	cmp	r7, #98	@ 0x62
 800b9c6:	d80a      	bhi.n	800b9de <_printf_i+0x32>
 800b9c8:	2f00      	cmp	r7, #0
 800b9ca:	f000 80d2 	beq.w	800bb72 <_printf_i+0x1c6>
 800b9ce:	2f58      	cmp	r7, #88	@ 0x58
 800b9d0:	f000 80b9 	beq.w	800bb46 <_printf_i+0x19a>
 800b9d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b9dc:	e03a      	b.n	800ba54 <_printf_i+0xa8>
 800b9de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b9e2:	2b15      	cmp	r3, #21
 800b9e4:	d8f6      	bhi.n	800b9d4 <_printf_i+0x28>
 800b9e6:	a101      	add	r1, pc, #4	@ (adr r1, 800b9ec <_printf_i+0x40>)
 800b9e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9ec:	0800ba45 	.word	0x0800ba45
 800b9f0:	0800ba59 	.word	0x0800ba59
 800b9f4:	0800b9d5 	.word	0x0800b9d5
 800b9f8:	0800b9d5 	.word	0x0800b9d5
 800b9fc:	0800b9d5 	.word	0x0800b9d5
 800ba00:	0800b9d5 	.word	0x0800b9d5
 800ba04:	0800ba59 	.word	0x0800ba59
 800ba08:	0800b9d5 	.word	0x0800b9d5
 800ba0c:	0800b9d5 	.word	0x0800b9d5
 800ba10:	0800b9d5 	.word	0x0800b9d5
 800ba14:	0800b9d5 	.word	0x0800b9d5
 800ba18:	0800bb59 	.word	0x0800bb59
 800ba1c:	0800ba83 	.word	0x0800ba83
 800ba20:	0800bb13 	.word	0x0800bb13
 800ba24:	0800b9d5 	.word	0x0800b9d5
 800ba28:	0800b9d5 	.word	0x0800b9d5
 800ba2c:	0800bb7b 	.word	0x0800bb7b
 800ba30:	0800b9d5 	.word	0x0800b9d5
 800ba34:	0800ba83 	.word	0x0800ba83
 800ba38:	0800b9d5 	.word	0x0800b9d5
 800ba3c:	0800b9d5 	.word	0x0800b9d5
 800ba40:	0800bb1b 	.word	0x0800bb1b
 800ba44:	6833      	ldr	r3, [r6, #0]
 800ba46:	1d1a      	adds	r2, r3, #4
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	6032      	str	r2, [r6, #0]
 800ba4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba54:	2301      	movs	r3, #1
 800ba56:	e09d      	b.n	800bb94 <_printf_i+0x1e8>
 800ba58:	6833      	ldr	r3, [r6, #0]
 800ba5a:	6820      	ldr	r0, [r4, #0]
 800ba5c:	1d19      	adds	r1, r3, #4
 800ba5e:	6031      	str	r1, [r6, #0]
 800ba60:	0606      	lsls	r6, r0, #24
 800ba62:	d501      	bpl.n	800ba68 <_printf_i+0xbc>
 800ba64:	681d      	ldr	r5, [r3, #0]
 800ba66:	e003      	b.n	800ba70 <_printf_i+0xc4>
 800ba68:	0645      	lsls	r5, r0, #25
 800ba6a:	d5fb      	bpl.n	800ba64 <_printf_i+0xb8>
 800ba6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba70:	2d00      	cmp	r5, #0
 800ba72:	da03      	bge.n	800ba7c <_printf_i+0xd0>
 800ba74:	232d      	movs	r3, #45	@ 0x2d
 800ba76:	426d      	negs	r5, r5
 800ba78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba7c:	4859      	ldr	r0, [pc, #356]	@ (800bbe4 <_printf_i+0x238>)
 800ba7e:	230a      	movs	r3, #10
 800ba80:	e011      	b.n	800baa6 <_printf_i+0xfa>
 800ba82:	6821      	ldr	r1, [r4, #0]
 800ba84:	6833      	ldr	r3, [r6, #0]
 800ba86:	0608      	lsls	r0, r1, #24
 800ba88:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba8c:	d402      	bmi.n	800ba94 <_printf_i+0xe8>
 800ba8e:	0649      	lsls	r1, r1, #25
 800ba90:	bf48      	it	mi
 800ba92:	b2ad      	uxthmi	r5, r5
 800ba94:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba96:	4853      	ldr	r0, [pc, #332]	@ (800bbe4 <_printf_i+0x238>)
 800ba98:	6033      	str	r3, [r6, #0]
 800ba9a:	bf14      	ite	ne
 800ba9c:	230a      	movne	r3, #10
 800ba9e:	2308      	moveq	r3, #8
 800baa0:	2100      	movs	r1, #0
 800baa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800baa6:	6866      	ldr	r6, [r4, #4]
 800baa8:	60a6      	str	r6, [r4, #8]
 800baaa:	2e00      	cmp	r6, #0
 800baac:	bfa2      	ittt	ge
 800baae:	6821      	ldrge	r1, [r4, #0]
 800bab0:	f021 0104 	bicge.w	r1, r1, #4
 800bab4:	6021      	strge	r1, [r4, #0]
 800bab6:	b90d      	cbnz	r5, 800babc <_printf_i+0x110>
 800bab8:	2e00      	cmp	r6, #0
 800baba:	d04b      	beq.n	800bb54 <_printf_i+0x1a8>
 800babc:	4616      	mov	r6, r2
 800babe:	fbb5 f1f3 	udiv	r1, r5, r3
 800bac2:	fb03 5711 	mls	r7, r3, r1, r5
 800bac6:	5dc7      	ldrb	r7, [r0, r7]
 800bac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bacc:	462f      	mov	r7, r5
 800bace:	42bb      	cmp	r3, r7
 800bad0:	460d      	mov	r5, r1
 800bad2:	d9f4      	bls.n	800babe <_printf_i+0x112>
 800bad4:	2b08      	cmp	r3, #8
 800bad6:	d10b      	bne.n	800baf0 <_printf_i+0x144>
 800bad8:	6823      	ldr	r3, [r4, #0]
 800bada:	07df      	lsls	r7, r3, #31
 800badc:	d508      	bpl.n	800baf0 <_printf_i+0x144>
 800bade:	6923      	ldr	r3, [r4, #16]
 800bae0:	6861      	ldr	r1, [r4, #4]
 800bae2:	4299      	cmp	r1, r3
 800bae4:	bfde      	ittt	le
 800bae6:	2330      	movle	r3, #48	@ 0x30
 800bae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800baec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800baf0:	1b92      	subs	r2, r2, r6
 800baf2:	6122      	str	r2, [r4, #16]
 800baf4:	f8cd a000 	str.w	sl, [sp]
 800baf8:	464b      	mov	r3, r9
 800bafa:	aa03      	add	r2, sp, #12
 800bafc:	4621      	mov	r1, r4
 800bafe:	4640      	mov	r0, r8
 800bb00:	f7ff fee6 	bl	800b8d0 <_printf_common>
 800bb04:	3001      	adds	r0, #1
 800bb06:	d14a      	bne.n	800bb9e <_printf_i+0x1f2>
 800bb08:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0c:	b004      	add	sp, #16
 800bb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	f043 0320 	orr.w	r3, r3, #32
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	4833      	ldr	r0, [pc, #204]	@ (800bbe8 <_printf_i+0x23c>)
 800bb1c:	2778      	movs	r7, #120	@ 0x78
 800bb1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	6831      	ldr	r1, [r6, #0]
 800bb26:	061f      	lsls	r7, r3, #24
 800bb28:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb2c:	d402      	bmi.n	800bb34 <_printf_i+0x188>
 800bb2e:	065f      	lsls	r7, r3, #25
 800bb30:	bf48      	it	mi
 800bb32:	b2ad      	uxthmi	r5, r5
 800bb34:	6031      	str	r1, [r6, #0]
 800bb36:	07d9      	lsls	r1, r3, #31
 800bb38:	bf44      	itt	mi
 800bb3a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb3e:	6023      	strmi	r3, [r4, #0]
 800bb40:	b11d      	cbz	r5, 800bb4a <_printf_i+0x19e>
 800bb42:	2310      	movs	r3, #16
 800bb44:	e7ac      	b.n	800baa0 <_printf_i+0xf4>
 800bb46:	4827      	ldr	r0, [pc, #156]	@ (800bbe4 <_printf_i+0x238>)
 800bb48:	e7e9      	b.n	800bb1e <_printf_i+0x172>
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	f023 0320 	bic.w	r3, r3, #32
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	e7f6      	b.n	800bb42 <_printf_i+0x196>
 800bb54:	4616      	mov	r6, r2
 800bb56:	e7bd      	b.n	800bad4 <_printf_i+0x128>
 800bb58:	6833      	ldr	r3, [r6, #0]
 800bb5a:	6825      	ldr	r5, [r4, #0]
 800bb5c:	6961      	ldr	r1, [r4, #20]
 800bb5e:	1d18      	adds	r0, r3, #4
 800bb60:	6030      	str	r0, [r6, #0]
 800bb62:	062e      	lsls	r6, r5, #24
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	d501      	bpl.n	800bb6c <_printf_i+0x1c0>
 800bb68:	6019      	str	r1, [r3, #0]
 800bb6a:	e002      	b.n	800bb72 <_printf_i+0x1c6>
 800bb6c:	0668      	lsls	r0, r5, #25
 800bb6e:	d5fb      	bpl.n	800bb68 <_printf_i+0x1bc>
 800bb70:	8019      	strh	r1, [r3, #0]
 800bb72:	2300      	movs	r3, #0
 800bb74:	6123      	str	r3, [r4, #16]
 800bb76:	4616      	mov	r6, r2
 800bb78:	e7bc      	b.n	800baf4 <_printf_i+0x148>
 800bb7a:	6833      	ldr	r3, [r6, #0]
 800bb7c:	1d1a      	adds	r2, r3, #4
 800bb7e:	6032      	str	r2, [r6, #0]
 800bb80:	681e      	ldr	r6, [r3, #0]
 800bb82:	6862      	ldr	r2, [r4, #4]
 800bb84:	2100      	movs	r1, #0
 800bb86:	4630      	mov	r0, r6
 800bb88:	f7f4 fbca 	bl	8000320 <memchr>
 800bb8c:	b108      	cbz	r0, 800bb92 <_printf_i+0x1e6>
 800bb8e:	1b80      	subs	r0, r0, r6
 800bb90:	6060      	str	r0, [r4, #4]
 800bb92:	6863      	ldr	r3, [r4, #4]
 800bb94:	6123      	str	r3, [r4, #16]
 800bb96:	2300      	movs	r3, #0
 800bb98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb9c:	e7aa      	b.n	800baf4 <_printf_i+0x148>
 800bb9e:	6923      	ldr	r3, [r4, #16]
 800bba0:	4632      	mov	r2, r6
 800bba2:	4649      	mov	r1, r9
 800bba4:	4640      	mov	r0, r8
 800bba6:	47d0      	blx	sl
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d0ad      	beq.n	800bb08 <_printf_i+0x15c>
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	079b      	lsls	r3, r3, #30
 800bbb0:	d413      	bmi.n	800bbda <_printf_i+0x22e>
 800bbb2:	68e0      	ldr	r0, [r4, #12]
 800bbb4:	9b03      	ldr	r3, [sp, #12]
 800bbb6:	4298      	cmp	r0, r3
 800bbb8:	bfb8      	it	lt
 800bbba:	4618      	movlt	r0, r3
 800bbbc:	e7a6      	b.n	800bb0c <_printf_i+0x160>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	4640      	mov	r0, r8
 800bbc6:	47d0      	blx	sl
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d09d      	beq.n	800bb08 <_printf_i+0x15c>
 800bbcc:	3501      	adds	r5, #1
 800bbce:	68e3      	ldr	r3, [r4, #12]
 800bbd0:	9903      	ldr	r1, [sp, #12]
 800bbd2:	1a5b      	subs	r3, r3, r1
 800bbd4:	42ab      	cmp	r3, r5
 800bbd6:	dcf2      	bgt.n	800bbbe <_printf_i+0x212>
 800bbd8:	e7eb      	b.n	800bbb2 <_printf_i+0x206>
 800bbda:	2500      	movs	r5, #0
 800bbdc:	f104 0619 	add.w	r6, r4, #25
 800bbe0:	e7f5      	b.n	800bbce <_printf_i+0x222>
 800bbe2:	bf00      	nop
 800bbe4:	0800be79 	.word	0x0800be79
 800bbe8:	0800be8a 	.word	0x0800be8a

0800bbec <memmove>:
 800bbec:	4288      	cmp	r0, r1
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	eb01 0402 	add.w	r4, r1, r2
 800bbf4:	d902      	bls.n	800bbfc <memmove+0x10>
 800bbf6:	4284      	cmp	r4, r0
 800bbf8:	4623      	mov	r3, r4
 800bbfa:	d807      	bhi.n	800bc0c <memmove+0x20>
 800bbfc:	1e43      	subs	r3, r0, #1
 800bbfe:	42a1      	cmp	r1, r4
 800bc00:	d008      	beq.n	800bc14 <memmove+0x28>
 800bc02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc0a:	e7f8      	b.n	800bbfe <memmove+0x12>
 800bc0c:	4402      	add	r2, r0
 800bc0e:	4601      	mov	r1, r0
 800bc10:	428a      	cmp	r2, r1
 800bc12:	d100      	bne.n	800bc16 <memmove+0x2a>
 800bc14:	bd10      	pop	{r4, pc}
 800bc16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc1e:	e7f7      	b.n	800bc10 <memmove+0x24>

0800bc20 <_sbrk_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d06      	ldr	r5, [pc, #24]	@ (800bc3c <_sbrk_r+0x1c>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	f7f5 febc 	bl	80019a8 <_sbrk>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d102      	bne.n	800bc3a <_sbrk_r+0x1a>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	b103      	cbz	r3, 800bc3a <_sbrk_r+0x1a>
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	240012b4 	.word	0x240012b4

0800bc40 <memcpy>:
 800bc40:	440a      	add	r2, r1
 800bc42:	4291      	cmp	r1, r2
 800bc44:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc48:	d100      	bne.n	800bc4c <memcpy+0xc>
 800bc4a:	4770      	bx	lr
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc56:	4291      	cmp	r1, r2
 800bc58:	d1f9      	bne.n	800bc4e <memcpy+0xe>
 800bc5a:	bd10      	pop	{r4, pc}

0800bc5c <_realloc_r>:
 800bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc60:	4680      	mov	r8, r0
 800bc62:	4615      	mov	r5, r2
 800bc64:	460c      	mov	r4, r1
 800bc66:	b921      	cbnz	r1, 800bc72 <_realloc_r+0x16>
 800bc68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	f7ff bc4b 	b.w	800b508 <_malloc_r>
 800bc72:	b92a      	cbnz	r2, 800bc80 <_realloc_r+0x24>
 800bc74:	f7ff fbdc 	bl	800b430 <_free_r>
 800bc78:	2400      	movs	r4, #0
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc80:	f000 f81a 	bl	800bcb8 <_malloc_usable_size_r>
 800bc84:	4285      	cmp	r5, r0
 800bc86:	4606      	mov	r6, r0
 800bc88:	d802      	bhi.n	800bc90 <_realloc_r+0x34>
 800bc8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc8e:	d8f4      	bhi.n	800bc7a <_realloc_r+0x1e>
 800bc90:	4629      	mov	r1, r5
 800bc92:	4640      	mov	r0, r8
 800bc94:	f7ff fc38 	bl	800b508 <_malloc_r>
 800bc98:	4607      	mov	r7, r0
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d0ec      	beq.n	800bc78 <_realloc_r+0x1c>
 800bc9e:	42b5      	cmp	r5, r6
 800bca0:	462a      	mov	r2, r5
 800bca2:	4621      	mov	r1, r4
 800bca4:	bf28      	it	cs
 800bca6:	4632      	movcs	r2, r6
 800bca8:	f7ff ffca 	bl	800bc40 <memcpy>
 800bcac:	4621      	mov	r1, r4
 800bcae:	4640      	mov	r0, r8
 800bcb0:	f7ff fbbe 	bl	800b430 <_free_r>
 800bcb4:	463c      	mov	r4, r7
 800bcb6:	e7e0      	b.n	800bc7a <_realloc_r+0x1e>

0800bcb8 <_malloc_usable_size_r>:
 800bcb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcbc:	1f18      	subs	r0, r3, #4
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	bfbc      	itt	lt
 800bcc2:	580b      	ldrlt	r3, [r1, r0]
 800bcc4:	18c0      	addlt	r0, r0, r3
 800bcc6:	4770      	bx	lr

0800bcc8 <_init>:
 800bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcca:	bf00      	nop
 800bccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcce:	bc08      	pop	{r3}
 800bcd0:	469e      	mov	lr, r3
 800bcd2:	4770      	bx	lr

0800bcd4 <_fini>:
 800bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd6:	bf00      	nop
 800bcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcda:	bc08      	pop	{r3}
 800bcdc:	469e      	mov	lr, r3
 800bcde:	4770      	bx	lr
